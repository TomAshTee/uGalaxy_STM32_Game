
SpaceShooter-v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000092a0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008e0  08009430  08009430  0000a430  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009d10  08009d10  0000b074  2**0
                  CONTENTS
  4 .ARM          00000008  08009d10  08009d10  0000ad10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009d18  08009d18  0000b074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009d18  08009d18  0000ad18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009d1c  08009d1c  0000ad1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08009d20  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003afc  20000074  08009d94  0000b074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003b70  08009d94  0000bb70  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000edc6  00000000  00000000  0000b0a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002986  00000000  00000000  00019e6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f48  00000000  00000000  0001c7f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b6a  00000000  00000000  0001d738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000233f8  00000000  00000000  0001e2a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011bdf  00000000  00000000  0004169a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d22e9  00000000  00000000  00053279  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00125562  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b6c  00000000  00000000  001255a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  0012a114  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009418 	.word	0x08009418

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08009418 	.word	0x08009418

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	@ 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmpun>:
 8000b1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b24:	d102      	bne.n	8000b2c <__aeabi_dcmpun+0x10>
 8000b26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b2a:	d10a      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x20>
 8000b36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b3a:	d102      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	f04f 0001 	mov.w	r0, #1
 8000b46:	4770      	bx	lr

08000b48 <GFX_DrowLine>:
	        }
	   }
}

//Bresenham's algorithm - Wikipedia
void GFX_DrowLine(int X1, int Y1,int X2,int Y2,int I_O) {
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b08e      	sub	sp, #56	@ 0x38
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	60f8      	str	r0, [r7, #12]
 8000b50:	60b9      	str	r1, [r7, #8]
 8000b52:	607a      	str	r2, [r7, #4]
 8000b54:	603b      	str	r3, [r7, #0]
	int CurrentX, CurrentY, Xinc, Yinc,
		Dx, Dy, TwoDx, TwoDy,
		TwoDxAccumulatedError, TwoDyAccumulatedError;

	Dx = (X2-X1);
 8000b56:	687a      	ldr	r2, [r7, #4]
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	1ad3      	subs	r3, r2, r3
 8000b5c:	627b      	str	r3, [r7, #36]	@ 0x24
	Dy = (Y2-Y1);
 8000b5e:	683a      	ldr	r2, [r7, #0]
 8000b60:	68bb      	ldr	r3, [r7, #8]
 8000b62:	1ad3      	subs	r3, r2, r3
 8000b64:	623b      	str	r3, [r7, #32]

	TwoDx = Dx + Dx;
 8000b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b68:	005b      	lsls	r3, r3, #1
 8000b6a:	61fb      	str	r3, [r7, #28]
	TwoDy = Dy + Dy;
 8000b6c:	6a3b      	ldr	r3, [r7, #32]
 8000b6e:	005b      	lsls	r3, r3, #1
 8000b70:	61bb      	str	r3, [r7, #24]

	CurrentX = X1;
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	637b      	str	r3, [r7, #52]	@ 0x34
	CurrentY = Y1;
 8000b76:	68bb      	ldr	r3, [r7, #8]
 8000b78:	633b      	str	r3, [r7, #48]	@ 0x30

	Xinc = 1;
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	Yinc = 1;
 8000b7e:	2301      	movs	r3, #1
 8000b80:	62bb      	str	r3, [r7, #40]	@ 0x28

	if(Dx < 0) {
 8000b82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	da08      	bge.n	8000b9a <GFX_DrowLine+0x52>

		Xinc = -1;
 8000b88:	f04f 33ff 	mov.w	r3, #4294967295
 8000b8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
		Dx = -Dx;
 8000b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b90:	425b      	negs	r3, r3
 8000b92:	627b      	str	r3, [r7, #36]	@ 0x24
		TwoDx = -TwoDx;
 8000b94:	69fb      	ldr	r3, [r7, #28]
 8000b96:	425b      	negs	r3, r3
 8000b98:	61fb      	str	r3, [r7, #28]
	}

	if (Dy < 0) {
 8000b9a:	6a3b      	ldr	r3, [r7, #32]
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	da08      	bge.n	8000bb2 <GFX_DrowLine+0x6a>
		Yinc = -1;
 8000ba0:	f04f 33ff 	mov.w	r3, #4294967295
 8000ba4:	62bb      	str	r3, [r7, #40]	@ 0x28
		Dy = -Dy;
 8000ba6:	6a3b      	ldr	r3, [r7, #32]
 8000ba8:	425b      	negs	r3, r3
 8000baa:	623b      	str	r3, [r7, #32]
		TwoDy = -TwoDy;
 8000bac:	69bb      	ldr	r3, [r7, #24]
 8000bae:	425b      	negs	r3, r3
 8000bb0:	61bb      	str	r3, [r7, #24]
	}

	ssd1327_setPixel(X1,Y1,I_O);
 8000bb2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000bb4:	b2db      	uxtb	r3, r3
 8000bb6:	461a      	mov	r2, r3
 8000bb8:	68b9      	ldr	r1, [r7, #8]
 8000bba:	68f8      	ldr	r0, [r7, #12]
 8000bbc:	f003 f99a 	bl	8003ef4 <ssd1327_setPixel>

	if ((Dx != 0) || (Dy != 0)) {
 8000bc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d102      	bne.n	8000bcc <GFX_DrowLine+0x84>
 8000bc6:	6a3b      	ldr	r3, [r7, #32]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d046      	beq.n	8000c5a <GFX_DrowLine+0x112>

		if (Dy <= Dx) {
 8000bcc:	6a3a      	ldr	r2, [r7, #32]
 8000bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bd0:	429a      	cmp	r2, r3
 8000bd2:	dc21      	bgt.n	8000c18 <GFX_DrowLine+0xd0>
			TwoDxAccumulatedError = 0;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	617b      	str	r3, [r7, #20]
			do {
			    CurrentX += Xinc;
 8000bd8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000bda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000bdc:	4413      	add	r3, r2
 8000bde:	637b      	str	r3, [r7, #52]	@ 0x34
			    TwoDxAccumulatedError += TwoDy;
 8000be0:	697a      	ldr	r2, [r7, #20]
 8000be2:	69bb      	ldr	r3, [r7, #24]
 8000be4:	4413      	add	r3, r2
 8000be6:	617b      	str	r3, [r7, #20]
			    if(TwoDxAccumulatedError > Dx) {
 8000be8:	697a      	ldr	r2, [r7, #20]
 8000bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bec:	429a      	cmp	r2, r3
 8000bee:	dd07      	ble.n	8000c00 <GFX_DrowLine+0xb8>
			        CurrentY += Yinc;
 8000bf0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000bf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000bf4:	4413      	add	r3, r2
 8000bf6:	633b      	str	r3, [r7, #48]	@ 0x30
			        TwoDxAccumulatedError -= TwoDx;
 8000bf8:	697a      	ldr	r2, [r7, #20]
 8000bfa:	69fb      	ldr	r3, [r7, #28]
 8000bfc:	1ad3      	subs	r3, r2, r3
 8000bfe:	617b      	str	r3, [r7, #20]
			    }
			    ssd1327_setPixel(CurrentX,CurrentY,I_O);
 8000c00:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000c02:	b2db      	uxtb	r3, r3
 8000c04:	461a      	mov	r2, r3
 8000c06:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8000c08:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8000c0a:	f003 f973 	bl	8003ef4 <ssd1327_setPixel>
			  } while (CurrentX != X2);
 8000c0e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	429a      	cmp	r2, r3
 8000c14:	d1e0      	bne.n	8000bd8 <GFX_DrowLine+0x90>
			      }
			      ssd1327_setPixel(CurrentX,CurrentY,I_O);
			  } while (CurrentY != Y2);
		  }
	}
}
 8000c16:	e020      	b.n	8000c5a <GFX_DrowLine+0x112>
			  TwoDyAccumulatedError = 0;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	613b      	str	r3, [r7, #16]
			      CurrentY += Yinc;
 8000c1c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000c1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000c20:	4413      	add	r3, r2
 8000c22:	633b      	str	r3, [r7, #48]	@ 0x30
			      TwoDyAccumulatedError += TwoDx;
 8000c24:	693a      	ldr	r2, [r7, #16]
 8000c26:	69fb      	ldr	r3, [r7, #28]
 8000c28:	4413      	add	r3, r2
 8000c2a:	613b      	str	r3, [r7, #16]
			      if(TwoDyAccumulatedError>Dy) {
 8000c2c:	693a      	ldr	r2, [r7, #16]
 8000c2e:	6a3b      	ldr	r3, [r7, #32]
 8000c30:	429a      	cmp	r2, r3
 8000c32:	dd07      	ble.n	8000c44 <GFX_DrowLine+0xfc>
				      CurrentX += Xinc;
 8000c34:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000c36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c38:	4413      	add	r3, r2
 8000c3a:	637b      	str	r3, [r7, #52]	@ 0x34
				      TwoDyAccumulatedError -= TwoDy;
 8000c3c:	693a      	ldr	r2, [r7, #16]
 8000c3e:	69bb      	ldr	r3, [r7, #24]
 8000c40:	1ad3      	subs	r3, r2, r3
 8000c42:	613b      	str	r3, [r7, #16]
			      ssd1327_setPixel(CurrentX,CurrentY,I_O);
 8000c44:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000c46:	b2db      	uxtb	r3, r3
 8000c48:	461a      	mov	r2, r3
 8000c4a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8000c4c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8000c4e:	f003 f951 	bl	8003ef4 <ssd1327_setPixel>
			  } while (CurrentY != Y2);
 8000c52:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	429a      	cmp	r2, r3
 8000c58:	d1e0      	bne.n	8000c1c <GFX_DrowLine+0xd4>
}
 8000c5a:	bf00      	nop
 8000c5c:	3738      	adds	r7, #56	@ 0x38
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}

08000c62 <GFX_DrowCircleHelper>:
		}
	}
}

void GFX_DrowCircleHelper(int x0, int y0, int r, uint8_t cornername, uint8_t color )
{
 8000c62:	b580      	push	{r7, lr}
 8000c64:	b08a      	sub	sp, #40	@ 0x28
 8000c66:	af00      	add	r7, sp, #0
 8000c68:	60f8      	str	r0, [r7, #12]
 8000c6a:	60b9      	str	r1, [r7, #8]
 8000c6c:	607a      	str	r2, [r7, #4]
 8000c6e:	70fb      	strb	r3, [r7, #3]
	int f 		= 1 - r;
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	f1c3 0301 	rsb	r3, r3, #1
 8000c76:	627b      	str	r3, [r7, #36]	@ 0x24
	int ddF_x 	= 1;
 8000c78:	2301      	movs	r3, #1
 8000c7a:	623b      	str	r3, [r7, #32]
	int ddF_y	= -2 * r;
 8000c7c:	687a      	ldr	r2, [r7, #4]
 8000c7e:	4613      	mov	r3, r2
 8000c80:	07db      	lsls	r3, r3, #31
 8000c82:	1a9b      	subs	r3, r3, r2
 8000c84:	005b      	lsls	r3, r3, #1
 8000c86:	61fb      	str	r3, [r7, #28]
	int x		= 0;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	61bb      	str	r3, [r7, #24]
	int y		= r;
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	617b      	str	r3, [r7, #20]

	while(x<y)
 8000c90:	e082      	b.n	8000d98 <GFX_DrowCircleHelper+0x136>
	{
		if(f >= 0)
 8000c92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	db09      	blt.n	8000cac <GFX_DrowCircleHelper+0x4a>
		{
			y--;
 8000c98:	697b      	ldr	r3, [r7, #20]
 8000c9a:	3b01      	subs	r3, #1
 8000c9c:	617b      	str	r3, [r7, #20]
			ddF_y += 2;
 8000c9e:	69fb      	ldr	r3, [r7, #28]
 8000ca0:	3302      	adds	r3, #2
 8000ca2:	61fb      	str	r3, [r7, #28]
			f += ddF_y;
 8000ca4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000ca6:	69fb      	ldr	r3, [r7, #28]
 8000ca8:	4413      	add	r3, r2
 8000caa:	627b      	str	r3, [r7, #36]	@ 0x24
		}
		x++;
 8000cac:	69bb      	ldr	r3, [r7, #24]
 8000cae:	3301      	adds	r3, #1
 8000cb0:	61bb      	str	r3, [r7, #24]
		ddF_x += 2;
 8000cb2:	6a3b      	ldr	r3, [r7, #32]
 8000cb4:	3302      	adds	r3, #2
 8000cb6:	623b      	str	r3, [r7, #32]
		f += ddF_x;
 8000cb8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000cba:	6a3b      	ldr	r3, [r7, #32]
 8000cbc:	4413      	add	r3, r2
 8000cbe:	627b      	str	r3, [r7, #36]	@ 0x24

		if(cornername & 0x4)
 8000cc0:	78fb      	ldrb	r3, [r7, #3]
 8000cc2:	f003 0304 	and.w	r3, r3, #4
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d015      	beq.n	8000cf6 <GFX_DrowCircleHelper+0x94>
		{
			ssd1327_setPixel(x0 + x, y0 + y, color);
 8000cca:	68fa      	ldr	r2, [r7, #12]
 8000ccc:	69bb      	ldr	r3, [r7, #24]
 8000cce:	18d0      	adds	r0, r2, r3
 8000cd0:	68ba      	ldr	r2, [r7, #8]
 8000cd2:	697b      	ldr	r3, [r7, #20]
 8000cd4:	4413      	add	r3, r2
 8000cd6:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8000cda:	4619      	mov	r1, r3
 8000cdc:	f003 f90a 	bl	8003ef4 <ssd1327_setPixel>
			ssd1327_setPixel(x0 + y, y0 + x, color);
 8000ce0:	68fa      	ldr	r2, [r7, #12]
 8000ce2:	697b      	ldr	r3, [r7, #20]
 8000ce4:	18d0      	adds	r0, r2, r3
 8000ce6:	68ba      	ldr	r2, [r7, #8]
 8000ce8:	69bb      	ldr	r3, [r7, #24]
 8000cea:	4413      	add	r3, r2
 8000cec:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	f003 f8ff 	bl	8003ef4 <ssd1327_setPixel>
		}
		if(cornername & 0x2)
 8000cf6:	78fb      	ldrb	r3, [r7, #3]
 8000cf8:	f003 0302 	and.w	r3, r3, #2
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d015      	beq.n	8000d2c <GFX_DrowCircleHelper+0xca>
		{
			ssd1327_setPixel(x0 + x, y0 - y, color);
 8000d00:	68fa      	ldr	r2, [r7, #12]
 8000d02:	69bb      	ldr	r3, [r7, #24]
 8000d04:	18d0      	adds	r0, r2, r3
 8000d06:	68ba      	ldr	r2, [r7, #8]
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	1ad3      	subs	r3, r2, r3
 8000d0c:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8000d10:	4619      	mov	r1, r3
 8000d12:	f003 f8ef 	bl	8003ef4 <ssd1327_setPixel>
			ssd1327_setPixel(x0 + y, y0 - x, color);
 8000d16:	68fa      	ldr	r2, [r7, #12]
 8000d18:	697b      	ldr	r3, [r7, #20]
 8000d1a:	18d0      	adds	r0, r2, r3
 8000d1c:	68ba      	ldr	r2, [r7, #8]
 8000d1e:	69bb      	ldr	r3, [r7, #24]
 8000d20:	1ad3      	subs	r3, r2, r3
 8000d22:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8000d26:	4619      	mov	r1, r3
 8000d28:	f003 f8e4 	bl	8003ef4 <ssd1327_setPixel>
		}
		if(cornername & 0x8)
 8000d2c:	78fb      	ldrb	r3, [r7, #3]
 8000d2e:	f003 0308 	and.w	r3, r3, #8
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d015      	beq.n	8000d62 <GFX_DrowCircleHelper+0x100>
		{
			ssd1327_setPixel(x0 - x, y0 + y, color);
 8000d36:	68fa      	ldr	r2, [r7, #12]
 8000d38:	69bb      	ldr	r3, [r7, #24]
 8000d3a:	1ad0      	subs	r0, r2, r3
 8000d3c:	68ba      	ldr	r2, [r7, #8]
 8000d3e:	697b      	ldr	r3, [r7, #20]
 8000d40:	4413      	add	r3, r2
 8000d42:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8000d46:	4619      	mov	r1, r3
 8000d48:	f003 f8d4 	bl	8003ef4 <ssd1327_setPixel>
			ssd1327_setPixel(x0 - y, y0 + x, color);
 8000d4c:	68fa      	ldr	r2, [r7, #12]
 8000d4e:	697b      	ldr	r3, [r7, #20]
 8000d50:	1ad0      	subs	r0, r2, r3
 8000d52:	68ba      	ldr	r2, [r7, #8]
 8000d54:	69bb      	ldr	r3, [r7, #24]
 8000d56:	4413      	add	r3, r2
 8000d58:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	f003 f8c9 	bl	8003ef4 <ssd1327_setPixel>
		}
		if(cornername & 0x1)
 8000d62:	78fb      	ldrb	r3, [r7, #3]
 8000d64:	f003 0301 	and.w	r3, r3, #1
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d015      	beq.n	8000d98 <GFX_DrowCircleHelper+0x136>
		{
			ssd1327_setPixel(x0 - x, y0 - y, color);
 8000d6c:	68fa      	ldr	r2, [r7, #12]
 8000d6e:	69bb      	ldr	r3, [r7, #24]
 8000d70:	1ad0      	subs	r0, r2, r3
 8000d72:	68ba      	ldr	r2, [r7, #8]
 8000d74:	697b      	ldr	r3, [r7, #20]
 8000d76:	1ad3      	subs	r3, r2, r3
 8000d78:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	f003 f8b9 	bl	8003ef4 <ssd1327_setPixel>
			ssd1327_setPixel(x0 - y, y0 - x, color);
 8000d82:	68fa      	ldr	r2, [r7, #12]
 8000d84:	697b      	ldr	r3, [r7, #20]
 8000d86:	1ad0      	subs	r0, r2, r3
 8000d88:	68ba      	ldr	r2, [r7, #8]
 8000d8a:	69bb      	ldr	r3, [r7, #24]
 8000d8c:	1ad3      	subs	r3, r2, r3
 8000d8e:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8000d92:	4619      	mov	r1, r3
 8000d94:	f003 f8ae 	bl	8003ef4 <ssd1327_setPixel>
	while(x<y)
 8000d98:	69ba      	ldr	r2, [r7, #24]
 8000d9a:	697b      	ldr	r3, [r7, #20]
 8000d9c:	429a      	cmp	r2, r3
 8000d9e:	f6ff af78 	blt.w	8000c92 <GFX_DrowCircleHelper+0x30>
		}
	}
}
 8000da2:	bf00      	nop
 8000da4:	bf00      	nop
 8000da6:	3728      	adds	r7, #40	@ 0x28
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}

08000dac <GFX_DrowBitMap_P>:
		GFX_DrowLine(x0-y, y0+x, x0-y, y0-x,I_O);
  	}
}

void GFX_DrowBitMap_P (int x, int y, const uint8_t *bitmap, uint8_t w, uint8_t h, uint8_t color)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b086      	sub	sp, #24
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	60f8      	str	r0, [r7, #12]
 8000db4:	60b9      	str	r1, [r7, #8]
 8000db6:	607a      	str	r2, [r7, #4]
 8000db8:	70fb      	strb	r3, [r7, #3]
//
//			ssd1327_setPixel(x+i, y+j, );
//		}
//	}

	uint8_t i, j, byteWidth = (w+7)/8;
 8000dba:	78fb      	ldrb	r3, [r7, #3]
 8000dbc:	3307      	adds	r3, #7
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	da00      	bge.n	8000dc4 <GFX_DrowBitMap_P+0x18>
 8000dc2:	3307      	adds	r3, #7
 8000dc4:	10db      	asrs	r3, r3, #3
 8000dc6:	757b      	strb	r3, [r7, #21]

	for(j = 0; j < h; j++)
 8000dc8:	2300      	movs	r3, #0
 8000dca:	75bb      	strb	r3, [r7, #22]
 8000dcc:	e02d      	b.n	8000e2a <GFX_DrowBitMap_P+0x7e>
	{
		for(i = 0; i < w; i++)
 8000dce:	2300      	movs	r3, #0
 8000dd0:	75fb      	strb	r3, [r7, #23]
 8000dd2:	e023      	b.n	8000e1c <GFX_DrowBitMap_P+0x70>
		{
			if(*(bitmap + j *byteWidth + i /8) & (128 >> (i&7)) )
 8000dd4:	7dbb      	ldrb	r3, [r7, #22]
 8000dd6:	7d7a      	ldrb	r2, [r7, #21]
 8000dd8:	fb02 f303 	mul.w	r3, r2, r3
 8000ddc:	461a      	mov	r2, r3
 8000dde:	7dfb      	ldrb	r3, [r7, #23]
 8000de0:	08db      	lsrs	r3, r3, #3
 8000de2:	b2db      	uxtb	r3, r3
 8000de4:	4413      	add	r3, r2
 8000de6:	687a      	ldr	r2, [r7, #4]
 8000de8:	4413      	add	r3, r2
 8000dea:	781b      	ldrb	r3, [r3, #0]
 8000dec:	4619      	mov	r1, r3
 8000dee:	7dfb      	ldrb	r3, [r7, #23]
 8000df0:	f003 0307 	and.w	r3, r3, #7
 8000df4:	2280      	movs	r2, #128	@ 0x80
 8000df6:	fa42 f303 	asr.w	r3, r2, r3
 8000dfa:	400b      	ands	r3, r1
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d00a      	beq.n	8000e16 <GFX_DrowBitMap_P+0x6a>
				ssd1327_setPixel(x+i, y+j, color);
 8000e00:	7dfa      	ldrb	r2, [r7, #23]
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	18d0      	adds	r0, r2, r3
 8000e06:	7dba      	ldrb	r2, [r7, #22]
 8000e08:	68bb      	ldr	r3, [r7, #8]
 8000e0a:	4413      	add	r3, r2
 8000e0c:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8000e10:	4619      	mov	r1, r3
 8000e12:	f003 f86f 	bl	8003ef4 <ssd1327_setPixel>
		for(i = 0; i < w; i++)
 8000e16:	7dfb      	ldrb	r3, [r7, #23]
 8000e18:	3301      	adds	r3, #1
 8000e1a:	75fb      	strb	r3, [r7, #23]
 8000e1c:	7dfa      	ldrb	r2, [r7, #23]
 8000e1e:	78fb      	ldrb	r3, [r7, #3]
 8000e20:	429a      	cmp	r2, r3
 8000e22:	d3d7      	bcc.n	8000dd4 <GFX_DrowBitMap_P+0x28>
	for(j = 0; j < h; j++)
 8000e24:	7dbb      	ldrb	r3, [r7, #22]
 8000e26:	3301      	adds	r3, #1
 8000e28:	75bb      	strb	r3, [r7, #22]
 8000e2a:	7dba      	ldrb	r2, [r7, #22]
 8000e2c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000e30:	429a      	cmp	r2, r3
 8000e32:	d3cc      	bcc.n	8000dce <GFX_DrowBitMap_P+0x22>
		}
	}

}
 8000e34:	bf00      	nop
 8000e36:	bf00      	nop
 8000e38:	3718      	adds	r7, #24
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
	...

08000e40 <GFX_DrowChar>:

void GFX_DrowChar(int x, int y, char c, uint8_t color, uint8_t bg, uint8_t size)
{
 8000e40:	b590      	push	{r4, r7, lr}
 8000e42:	b089      	sub	sp, #36	@ 0x24
 8000e44:	af02      	add	r7, sp, #8
 8000e46:	60f8      	str	r0, [r7, #12]
 8000e48:	60b9      	str	r1, [r7, #8]
 8000e4a:	4611      	mov	r1, r2
 8000e4c:	461a      	mov	r2, r3
 8000e4e:	460b      	mov	r3, r1
 8000e50:	71fb      	strb	r3, [r7, #7]
 8000e52:	4613      	mov	r3, r2
 8000e54:	71bb      	strb	r3, [r7, #6]

	  uint8_t line;
	  int8_t i,j;
	  if((x >= SSD1327_WIDTH)            || // Clip right
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	2b7f      	cmp	r3, #127	@ 0x7f
 8000e5a:	f300 80a9 	bgt.w	8000fb0 <GFX_DrowChar+0x170>
 8000e5e:	68bb      	ldr	r3, [r7, #8]
 8000e60:	2b7f      	cmp	r3, #127	@ 0x7f
 8000e62:	f300 80a5 	bgt.w	8000fb0 <GFX_DrowChar+0x170>
	     (y >= SSD1327_HEIGHT)           || // Clip bottom
	     ((x + 6 * size - 1) < 0) || // Clip left
 8000e66:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8000e6a:	4613      	mov	r3, r2
 8000e6c:	005b      	lsls	r3, r3, #1
 8000e6e:	4413      	add	r3, r2
 8000e70:	005b      	lsls	r3, r3, #1
 8000e72:	461a      	mov	r2, r3
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	4413      	add	r3, r2
	     (y >= SSD1327_HEIGHT)           || // Clip bottom
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	f340 8099 	ble.w	8000fb0 <GFX_DrowChar+0x170>
	     ((y + 8 * size - 1) < 0))   // Clip top
 8000e7e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000e82:	00da      	lsls	r2, r3, #3
 8000e84:	68bb      	ldr	r3, [r7, #8]
 8000e86:	4413      	add	r3, r2
	     ((x + 6 * size - 1) < 0) || // Clip left
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	f340 8091 	ble.w	8000fb0 <GFX_DrowChar+0x170>
	    return;

	  for  (i=0; i<6; i++ ) {
 8000e8e:	2300      	movs	r3, #0
 8000e90:	75bb      	strb	r3, [r7, #22]
 8000e92:	e087      	b.n	8000fa4 <GFX_DrowChar+0x164>
	    if (i == 5)
 8000e94:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8000e98:	2b05      	cmp	r3, #5
 8000e9a:	d102      	bne.n	8000ea2 <GFX_DrowChar+0x62>
	      line = 0x0;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	75fb      	strb	r3, [r7, #23]
 8000ea0:	e009      	b.n	8000eb6 <GFX_DrowChar+0x76>
	    else
	      //line = pgm_read_byte(font+(c*5)+i);
	    	line = (font[(c*5)+i]);
 8000ea2:	79fa      	ldrb	r2, [r7, #7]
 8000ea4:	4613      	mov	r3, r2
 8000ea6:	009b      	lsls	r3, r3, #2
 8000ea8:	441a      	add	r2, r3
 8000eaa:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8000eae:	4413      	add	r3, r2
 8000eb0:	4a41      	ldr	r2, [pc, #260]	@ (8000fb8 <GFX_DrowChar+0x178>)
 8000eb2:	5cd3      	ldrb	r3, [r2, r3]
 8000eb4:	75fb      	strb	r3, [r7, #23]
	    for (j = 0; j<8; j++) {
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	757b      	strb	r3, [r7, #21]
 8000eba:	e069      	b.n	8000f90 <GFX_DrowChar+0x150>
	      if (line & 0x1) {
 8000ebc:	7dfb      	ldrb	r3, [r7, #23]
 8000ebe:	f003 0301 	and.w	r3, r3, #1
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d02a      	beq.n	8000f1c <GFX_DrowChar+0xdc>
	        if (size == 1) // default size
 8000ec6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000eca:	2b01      	cmp	r3, #1
 8000ecc:	d10c      	bne.n	8000ee8 <GFX_DrowChar+0xa8>
	        	ssd1327_setPixel(x+i, y+j, color);
 8000ece:	f997 2016 	ldrsb.w	r2, [r7, #22]
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	18d0      	adds	r0, r2, r3
 8000ed6:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8000eda:	68bb      	ldr	r3, [r7, #8]
 8000edc:	4413      	add	r3, r2
 8000ede:	79ba      	ldrb	r2, [r7, #6]
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	f003 f807 	bl	8003ef4 <ssd1327_setPixel>
 8000ee6:	e04a      	b.n	8000f7e <GFX_DrowChar+0x13e>
	        else {  // big size
	        	GFX_FillRect(x+(i*size), y+(j*size), size, size, color);
 8000ee8:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8000eec:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8000ef0:	fb03 f202 	mul.w	r2, r3, r2
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	18d0      	adds	r0, r2, r3
 8000ef8:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000efc:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8000f00:	fb03 f202 	mul.w	r2, r3, r2
 8000f04:	68bb      	ldr	r3, [r7, #8]
 8000f06:	18d1      	adds	r1, r2, r3
 8000f08:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8000f0c:	f897 402c 	ldrb.w	r4, [r7, #44]	@ 0x2c
 8000f10:	79bb      	ldrb	r3, [r7, #6]
 8000f12:	9300      	str	r3, [sp, #0]
 8000f14:	4623      	mov	r3, r4
 8000f16:	f000 f851 	bl	8000fbc <GFX_FillRect>
 8000f1a:	e030      	b.n	8000f7e <GFX_DrowChar+0x13e>
	        }
	      } else if (bg != color) {
 8000f1c:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8000f20:	79bb      	ldrb	r3, [r7, #6]
 8000f22:	429a      	cmp	r2, r3
 8000f24:	d02b      	beq.n	8000f7e <GFX_DrowChar+0x13e>
	        if (size == 1) // default size
 8000f26:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000f2a:	2b01      	cmp	r3, #1
 8000f2c:	d10d      	bne.n	8000f4a <GFX_DrowChar+0x10a>
	        	ssd1327_setPixel(x+i, y+j, bg);
 8000f2e:	f997 2016 	ldrsb.w	r2, [r7, #22]
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	18d0      	adds	r0, r2, r3
 8000f36:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8000f3a:	68bb      	ldr	r3, [r7, #8]
 8000f3c:	4413      	add	r3, r2
 8000f3e:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8000f42:	4619      	mov	r1, r3
 8000f44:	f002 ffd6 	bl	8003ef4 <ssd1327_setPixel>
 8000f48:	e019      	b.n	8000f7e <GFX_DrowChar+0x13e>
	        else {  // big size
	        	GFX_FillRect(x+i*size, y+j*size, size, size, bg);
 8000f4a:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8000f4e:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8000f52:	fb03 f202 	mul.w	r2, r3, r2
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	18d0      	adds	r0, r2, r3
 8000f5a:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000f5e:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8000f62:	fb03 f202 	mul.w	r2, r3, r2
 8000f66:	68bb      	ldr	r3, [r7, #8]
 8000f68:	18d1      	adds	r1, r2, r3
 8000f6a:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8000f6e:	f897 402c 	ldrb.w	r4, [r7, #44]	@ 0x2c
 8000f72:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000f76:	9300      	str	r3, [sp, #0]
 8000f78:	4623      	mov	r3, r4
 8000f7a:	f000 f81f 	bl	8000fbc <GFX_FillRect>
	        }
	      }
	      line >>= 1;
 8000f7e:	7dfb      	ldrb	r3, [r7, #23]
 8000f80:	085b      	lsrs	r3, r3, #1
 8000f82:	75fb      	strb	r3, [r7, #23]
	    for (j = 0; j<8; j++) {
 8000f84:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000f88:	b2db      	uxtb	r3, r3
 8000f8a:	3301      	adds	r3, #1
 8000f8c:	b2db      	uxtb	r3, r3
 8000f8e:	757b      	strb	r3, [r7, #21]
 8000f90:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000f94:	2b07      	cmp	r3, #7
 8000f96:	dd91      	ble.n	8000ebc <GFX_DrowChar+0x7c>
	  for  (i=0; i<6; i++ ) {
 8000f98:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8000f9c:	b2db      	uxtb	r3, r3
 8000f9e:	3301      	adds	r3, #1
 8000fa0:	b2db      	uxtb	r3, r3
 8000fa2:	75bb      	strb	r3, [r7, #22]
 8000fa4:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8000fa8:	2b05      	cmp	r3, #5
 8000faa:	f77f af73 	ble.w	8000e94 <GFX_DrowChar+0x54>
 8000fae:	e000      	b.n	8000fb2 <GFX_DrowChar+0x172>
	    return;
 8000fb0:	bf00      	nop
	    }
	  }
}
 8000fb2:	371c      	adds	r7, #28
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd90      	pop	{r4, r7, pc}
 8000fb8:	08009430 	.word	0x08009430

08000fbc <GFX_FillRect>:

void GFX_FillRect (int x, int y, int w, int h, uint8_t color )
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b086      	sub	sp, #24
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	60f8      	str	r0, [r7, #12]
 8000fc4:	60b9      	str	r1, [r7, #8]
 8000fc6:	607a      	str	r2, [r7, #4]
 8000fc8:	603b      	str	r3, [r7, #0]
	int16_t i;
	for(i=x; i <x+w; i++)
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	82fb      	strh	r3, [r7, #22]
 8000fce:	e00d      	b.n	8000fec <GFX_FillRect+0x30>
	{
		GFX_DrowFastVLine(i, y, h, color);
 8000fd0:	f9b7 0016 	ldrsh.w	r0, [r7, #22]
 8000fd4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000fd8:	683a      	ldr	r2, [r7, #0]
 8000fda:	68b9      	ldr	r1, [r7, #8]
 8000fdc:	f000 f812 	bl	8001004 <GFX_DrowFastVLine>
	for(i=x; i <x+w; i++)
 8000fe0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000fe4:	b29b      	uxth	r3, r3
 8000fe6:	3301      	adds	r3, #1
 8000fe8:	b29b      	uxth	r3, r3
 8000fea:	82fb      	strh	r3, [r7, #22]
 8000fec:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8000ff0:	68f9      	ldr	r1, [r7, #12]
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	440b      	add	r3, r1
 8000ff6:	429a      	cmp	r2, r3
 8000ff8:	dbea      	blt.n	8000fd0 <GFX_FillRect+0x14>
	}
}
 8000ffa:	bf00      	nop
 8000ffc:	bf00      	nop
 8000ffe:	3718      	adds	r7, #24
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}

08001004 <GFX_DrowFastVLine>:

void GFX_DrowFastVLine(int x, int y, int h, uint8_t color)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b086      	sub	sp, #24
 8001008:	af02      	add	r7, sp, #8
 800100a:	60f8      	str	r0, [r7, #12]
 800100c:	60b9      	str	r1, [r7, #8]
 800100e:	607a      	str	r2, [r7, #4]
 8001010:	70fb      	strb	r3, [r7, #3]
	GFX_DrowLine(x, y, x, y+h-1, color);
 8001012:	68ba      	ldr	r2, [r7, #8]
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	4413      	add	r3, r2
 8001018:	1e5a      	subs	r2, r3, #1
 800101a:	78fb      	ldrb	r3, [r7, #3]
 800101c:	9300      	str	r3, [sp, #0]
 800101e:	4613      	mov	r3, r2
 8001020:	68fa      	ldr	r2, [r7, #12]
 8001022:	68b9      	ldr	r1, [r7, #8]
 8001024:	68f8      	ldr	r0, [r7, #12]
 8001026:	f7ff fd8f 	bl	8000b48 <GFX_DrowLine>
}
 800102a:	bf00      	nop
 800102c:	3710      	adds	r7, #16
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}

08001032 <GFX_DrowFastHLine>:

void GFX_DrowFastHLine(int x, int y, int w, uint8_t color)
{
 8001032:	b580      	push	{r7, lr}
 8001034:	b086      	sub	sp, #24
 8001036:	af02      	add	r7, sp, #8
 8001038:	60f8      	str	r0, [r7, #12]
 800103a:	60b9      	str	r1, [r7, #8]
 800103c:	607a      	str	r2, [r7, #4]
 800103e:	70fb      	strb	r3, [r7, #3]
	GFX_DrowLine(x, y, x+w-1 ,y , color);
 8001040:	68fa      	ldr	r2, [r7, #12]
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	4413      	add	r3, r2
 8001046:	1e5a      	subs	r2, r3, #1
 8001048:	78fb      	ldrb	r3, [r7, #3]
 800104a:	9300      	str	r3, [sp, #0]
 800104c:	68bb      	ldr	r3, [r7, #8]
 800104e:	68b9      	ldr	r1, [r7, #8]
 8001050:	68f8      	ldr	r0, [r7, #12]
 8001052:	f7ff fd79 	bl	8000b48 <GFX_DrowLine>
}
 8001056:	bf00      	nop
 8001058:	3710      	adds	r7, #16
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
	...

08001060 <GFX_PutString>:

void GFX_PutString(int x, int y, char* str, uint8_t txt_size, uint8_t color, uint8_t bg)
{
 8001060:	b590      	push	{r4, r7, lr}
 8001062:	b087      	sub	sp, #28
 8001064:	af02      	add	r7, sp, #8
 8001066:	60f8      	str	r0, [r7, #12]
 8001068:	60b9      	str	r1, [r7, #8]
 800106a:	607a      	str	r2, [r7, #4]
 800106c:	70fb      	strb	r3, [r7, #3]
	cursor_x = x;
 800106e:	4a16      	ldr	r2, [pc, #88]	@ (80010c8 <GFX_PutString+0x68>)
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	6013      	str	r3, [r2, #0]
	cursor_y = y;
 8001074:	4a15      	ldr	r2, [pc, #84]	@ (80010cc <GFX_PutString+0x6c>)
 8001076:	68bb      	ldr	r3, [r7, #8]
 8001078:	6013      	str	r3, [r2, #0]

	while(*str)		//do kiedy jest cos w stringu
 800107a:	e01c      	b.n	80010b6 <GFX_PutString+0x56>
	{
		GFX_DrowChar(cursor_x,cursor_y, *str++, color, bg, txt_size);
 800107c:	4b12      	ldr	r3, [pc, #72]	@ (80010c8 <GFX_PutString+0x68>)
 800107e:	6818      	ldr	r0, [r3, #0]
 8001080:	4b12      	ldr	r3, [pc, #72]	@ (80010cc <GFX_PutString+0x6c>)
 8001082:	6819      	ldr	r1, [r3, #0]
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	1c5a      	adds	r2, r3, #1
 8001088:	607a      	str	r2, [r7, #4]
 800108a:	781a      	ldrb	r2, [r3, #0]
 800108c:	f897 4020 	ldrb.w	r4, [r7, #32]
 8001090:	78fb      	ldrb	r3, [r7, #3]
 8001092:	9301      	str	r3, [sp, #4]
 8001094:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001098:	9300      	str	r3, [sp, #0]
 800109a:	4623      	mov	r3, r4
 800109c:	f7ff fed0 	bl	8000e40 <GFX_DrowChar>
		cursor_x += txt_size*6; // tylko pod dany font trzeba potem to korygowa�
 80010a0:	78fa      	ldrb	r2, [r7, #3]
 80010a2:	4613      	mov	r3, r2
 80010a4:	005b      	lsls	r3, r3, #1
 80010a6:	4413      	add	r3, r2
 80010a8:	005b      	lsls	r3, r3, #1
 80010aa:	461a      	mov	r2, r3
 80010ac:	4b06      	ldr	r3, [pc, #24]	@ (80010c8 <GFX_PutString+0x68>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4413      	add	r3, r2
 80010b2:	4a05      	ldr	r2, [pc, #20]	@ (80010c8 <GFX_PutString+0x68>)
 80010b4:	6013      	str	r3, [r2, #0]
	while(*str)		//do kiedy jest cos w stringu
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	781b      	ldrb	r3, [r3, #0]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d1de      	bne.n	800107c <GFX_PutString+0x1c>
	}
}
 80010be:	bf00      	nop
 80010c0:	bf00      	nop
 80010c2:	3714      	adds	r7, #20
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd90      	pop	{r4, r7, pc}
 80010c8:	20000090 	.word	0x20000090
 80010cc:	20000094 	.word	0x20000094

080010d0 <GFX_PutInt>:

void GFX_PutInt (int x, int y, int data, uint8_t txt_size, uint8_t color, uint8_t bg)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b08a      	sub	sp, #40	@ 0x28
 80010d4:	af02      	add	r7, sp, #8
 80010d6:	60f8      	str	r0, [r7, #12]
 80010d8:	60b9      	str	r1, [r7, #8]
 80010da:	607a      	str	r2, [r7, #4]
 80010dc:	70fb      	strb	r3, [r7, #3]
	char buf[16];
	GFX_PutString(x, y, itoa(data, buf,10), txt_size, color, bg);
 80010de:	f107 0310 	add.w	r3, r7, #16
 80010e2:	220a      	movs	r2, #10
 80010e4:	4619      	mov	r1, r3
 80010e6:	6878      	ldr	r0, [r7, #4]
 80010e8:	f002 fa98 	bl	800361c <itoa>
 80010ec:	4601      	mov	r1, r0
 80010ee:	78fa      	ldrb	r2, [r7, #3]
 80010f0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80010f4:	9301      	str	r3, [sp, #4]
 80010f6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80010fa:	9300      	str	r3, [sp, #0]
 80010fc:	4613      	mov	r3, r2
 80010fe:	460a      	mov	r2, r1
 8001100:	68b9      	ldr	r1, [r7, #8]
 8001102:	68f8      	ldr	r0, [r7, #12]
 8001104:	f7ff ffac 	bl	8001060 <GFX_PutString>
	//GFX_PutString(x, y, dtoa((double)data,1,1,1,1,buf), txt_size, color, bg);
	//itoa(data,buf);
	//GFX_PutString(x, y, buf , txt_size, color, bg);
}
 8001108:	bf00      	nop
 800110a:	3720      	adds	r7, #32
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}

08001110 <GFX_DrowRoundRect>:

void GFX_DrowRoundRect(int x, int y, int w, int h, uint8_t r, uint8_t color)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b086      	sub	sp, #24
 8001114:	af02      	add	r7, sp, #8
 8001116:	60f8      	str	r0, [r7, #12]
 8001118:	60b9      	str	r1, [r7, #8]
 800111a:	607a      	str	r2, [r7, #4]
 800111c:	603b      	str	r3, [r7, #0]
	// r - to jest wielkosc zaokraglonego naro�nika
	GFX_DrowFastHLine(x+r	,y		,w-2*r	,color );
 800111e:	7e3a      	ldrb	r2, [r7, #24]
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	18d0      	adds	r0, r2, r3
 8001124:	7e3b      	ldrb	r3, [r7, #24]
 8001126:	005b      	lsls	r3, r3, #1
 8001128:	687a      	ldr	r2, [r7, #4]
 800112a:	1ad2      	subs	r2, r2, r3
 800112c:	7f3b      	ldrb	r3, [r7, #28]
 800112e:	68b9      	ldr	r1, [r7, #8]
 8001130:	f7ff ff7f 	bl	8001032 <GFX_DrowFastHLine>
	GFX_DrowFastHLine(x+r	,y+h-1	,w-2*r	,color );
 8001134:	7e3a      	ldrb	r2, [r7, #24]
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	18d0      	adds	r0, r2, r3
 800113a:	68ba      	ldr	r2, [r7, #8]
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	4413      	add	r3, r2
 8001140:	1e59      	subs	r1, r3, #1
 8001142:	7e3b      	ldrb	r3, [r7, #24]
 8001144:	005b      	lsls	r3, r3, #1
 8001146:	687a      	ldr	r2, [r7, #4]
 8001148:	1ad2      	subs	r2, r2, r3
 800114a:	7f3b      	ldrb	r3, [r7, #28]
 800114c:	f7ff ff71 	bl	8001032 <GFX_DrowFastHLine>
	GFX_DrowFastVLine(x		,y+r	,h-2*r	,color );
 8001150:	7e3a      	ldrb	r2, [r7, #24]
 8001152:	68bb      	ldr	r3, [r7, #8]
 8001154:	18d1      	adds	r1, r2, r3
 8001156:	7e3b      	ldrb	r3, [r7, #24]
 8001158:	005b      	lsls	r3, r3, #1
 800115a:	683a      	ldr	r2, [r7, #0]
 800115c:	1ad2      	subs	r2, r2, r3
 800115e:	7f3b      	ldrb	r3, [r7, #28]
 8001160:	68f8      	ldr	r0, [r7, #12]
 8001162:	f7ff ff4f 	bl	8001004 <GFX_DrowFastVLine>
	GFX_DrowFastVLine(x+w-1	,y+r	,h-2*r	,color );
 8001166:	68fa      	ldr	r2, [r7, #12]
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	4413      	add	r3, r2
 800116c:	1e58      	subs	r0, r3, #1
 800116e:	7e3a      	ldrb	r2, [r7, #24]
 8001170:	68bb      	ldr	r3, [r7, #8]
 8001172:	18d1      	adds	r1, r2, r3
 8001174:	7e3b      	ldrb	r3, [r7, #24]
 8001176:	005b      	lsls	r3, r3, #1
 8001178:	683a      	ldr	r2, [r7, #0]
 800117a:	1ad2      	subs	r2, r2, r3
 800117c:	7f3b      	ldrb	r3, [r7, #28]
 800117e:	f7ff ff41 	bl	8001004 <GFX_DrowFastVLine>

	GFX_DrowCircleHelper(x+r	,y+r	,r	,1	,color);
 8001182:	7e3a      	ldrb	r2, [r7, #24]
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	18d0      	adds	r0, r2, r3
 8001188:	7e3a      	ldrb	r2, [r7, #24]
 800118a:	68bb      	ldr	r3, [r7, #8]
 800118c:	18d1      	adds	r1, r2, r3
 800118e:	7e3a      	ldrb	r2, [r7, #24]
 8001190:	7f3b      	ldrb	r3, [r7, #28]
 8001192:	9300      	str	r3, [sp, #0]
 8001194:	2301      	movs	r3, #1
 8001196:	f7ff fd64 	bl	8000c62 <GFX_DrowCircleHelper>
	GFX_DrowCircleHelper(x+w-r-1,y+r	,r	,2	,color);
 800119a:	68fa      	ldr	r2, [r7, #12]
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	441a      	add	r2, r3
 80011a0:	7e3b      	ldrb	r3, [r7, #24]
 80011a2:	1ad3      	subs	r3, r2, r3
 80011a4:	1e58      	subs	r0, r3, #1
 80011a6:	7e3a      	ldrb	r2, [r7, #24]
 80011a8:	68bb      	ldr	r3, [r7, #8]
 80011aa:	18d1      	adds	r1, r2, r3
 80011ac:	7e3a      	ldrb	r2, [r7, #24]
 80011ae:	7f3b      	ldrb	r3, [r7, #28]
 80011b0:	9300      	str	r3, [sp, #0]
 80011b2:	2302      	movs	r3, #2
 80011b4:	f7ff fd55 	bl	8000c62 <GFX_DrowCircleHelper>
	GFX_DrowCircleHelper(x+w-r-1,y+h-r-1,r	,4	,color);
 80011b8:	68fa      	ldr	r2, [r7, #12]
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	441a      	add	r2, r3
 80011be:	7e3b      	ldrb	r3, [r7, #24]
 80011c0:	1ad3      	subs	r3, r2, r3
 80011c2:	1e58      	subs	r0, r3, #1
 80011c4:	68ba      	ldr	r2, [r7, #8]
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	441a      	add	r2, r3
 80011ca:	7e3b      	ldrb	r3, [r7, #24]
 80011cc:	1ad3      	subs	r3, r2, r3
 80011ce:	1e59      	subs	r1, r3, #1
 80011d0:	7e3a      	ldrb	r2, [r7, #24]
 80011d2:	7f3b      	ldrb	r3, [r7, #28]
 80011d4:	9300      	str	r3, [sp, #0]
 80011d6:	2304      	movs	r3, #4
 80011d8:	f7ff fd43 	bl	8000c62 <GFX_DrowCircleHelper>
	GFX_DrowCircleHelper(x+r	,y+h-r-1,r	,8	,color);
 80011dc:	7e3a      	ldrb	r2, [r7, #24]
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	18d0      	adds	r0, r2, r3
 80011e2:	68ba      	ldr	r2, [r7, #8]
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	441a      	add	r2, r3
 80011e8:	7e3b      	ldrb	r3, [r7, #24]
 80011ea:	1ad3      	subs	r3, r2, r3
 80011ec:	1e59      	subs	r1, r3, #1
 80011ee:	7e3a      	ldrb	r2, [r7, #24]
 80011f0:	7f3b      	ldrb	r3, [r7, #28]
 80011f2:	9300      	str	r3, [sp, #0]
 80011f4:	2308      	movs	r3, #8
 80011f6:	f7ff fd34 	bl	8000c62 <GFX_DrowCircleHelper>
}
 80011fa:	bf00      	nop
 80011fc:	3710      	adds	r7, #16
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}

08001202 <Game_Init>:
#include <stdlib.h>
#include <math.h>

GameCtx g_singleton;

void Game_Init(GameCtx *g) {
 8001202:	b480      	push	{r7}
 8001204:	b085      	sub	sp, #20
 8001206:	af00      	add	r7, sp, #0
 8001208:	6078      	str	r0, [r7, #4]
	 * the player and the first boss. Furthermore, it "resets"
	 * the arrays of shot, opponents and bonuses.
	 */
	uint8_t i;
	//Player initial settings
	g->player.lives = initial_lives;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	220a      	movs	r2, #10
 800120e:	611a      	str	r2, [r3, #16]
	g->player.score = initial_score;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2200      	movs	r2, #0
 8001214:	609a      	str	r2, [r3, #8]
	g->player.x = initial_x;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	2202      	movs	r2, #2
 800121a:	601a      	str	r2, [r3, #0]
	g->player.y = initial_y;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	2240      	movs	r2, #64	@ 0x40
 8001220:	605a      	str	r2, [r3, #4]
	g->player.level = initial_level;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	2201      	movs	r2, #1
 8001226:	615a      	str	r2, [r3, #20]
	g->player.game_progres = initial_game_progres;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	2200      	movs	r2, #0
 800122c:	619a      	str	r2, [r3, #24]
	g->player.shoot_type = st_normal;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	2200      	movs	r2, #0
 8001232:	771a      	strb	r2, [r3, #28]

	//Deactivation of player shots
	for (i = 0; i < num_shots; ++i)
 8001234:	2300      	movs	r3, #0
 8001236:	73fb      	strb	r3, [r7, #15]
 8001238:	e00c      	b.n	8001254 <Game_Init+0x52>
		g->shots[i].active = false;
 800123a:	7bfa      	ldrb	r2, [r7, #15]
 800123c:	6879      	ldr	r1, [r7, #4]
 800123e:	4613      	mov	r3, r2
 8001240:	009b      	lsls	r3, r3, #2
 8001242:	4413      	add	r3, r2
 8001244:	009b      	lsls	r3, r3, #2
 8001246:	440b      	add	r3, r1
 8001248:	3324      	adds	r3, #36	@ 0x24
 800124a:	2200      	movs	r2, #0
 800124c:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < num_shots; ++i)
 800124e:	7bfb      	ldrb	r3, [r7, #15]
 8001250:	3301      	adds	r3, #1
 8001252:	73fb      	strb	r3, [r7, #15]
 8001254:	7bfb      	ldrb	r3, [r7, #15]
 8001256:	2b22      	cmp	r3, #34	@ 0x22
 8001258:	d9ef      	bls.n	800123a <Game_Init+0x38>

	//Deactivation of boss shots
	for (i = 0; i < num_boss_shots; ++i)
 800125a:	2300      	movs	r3, #0
 800125c:	73fb      	strb	r3, [r7, #15]
 800125e:	e00d      	b.n	800127c <Game_Init+0x7a>
		g->boss_shots[i].active = false;
 8001260:	7bfa      	ldrb	r2, [r7, #15]
 8001262:	6879      	ldr	r1, [r7, #4]
 8001264:	4613      	mov	r3, r2
 8001266:	009b      	lsls	r3, r3, #2
 8001268:	4413      	add	r3, r2
 800126a:	009b      	lsls	r3, r3, #2
 800126c:	440b      	add	r3, r1
 800126e:	f503 7338 	add.w	r3, r3, #736	@ 0x2e0
 8001272:	2200      	movs	r2, #0
 8001274:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < num_boss_shots; ++i)
 8001276:	7bfb      	ldrb	r3, [r7, #15]
 8001278:	3301      	adds	r3, #1
 800127a:	73fb      	strb	r3, [r7, #15]
 800127c:	7bfb      	ldrb	r3, [r7, #15]
 800127e:	2b04      	cmp	r3, #4
 8001280:	d9ee      	bls.n	8001260 <Game_Init+0x5e>

	//Deactivation enemies
	for (i = 0; i < num_enemies; i++) {
 8001282:	2300      	movs	r3, #0
 8001284:	73fb      	strb	r3, [r7, #15]
 8001286:	e023      	b.n	80012d0 <Game_Init+0xce>
		g->enemies[i].active = false;
 8001288:	7bfa      	ldrb	r2, [r7, #15]
 800128a:	6879      	ldr	r1, [r7, #4]
 800128c:	4613      	mov	r3, r2
 800128e:	00db      	lsls	r3, r3, #3
 8001290:	4413      	add	r3, r2
 8001292:	009b      	lsls	r3, r3, #2
 8001294:	440b      	add	r3, r1
 8001296:	f503 7351 	add.w	r3, r3, #836	@ 0x344
 800129a:	2200      	movs	r2, #0
 800129c:	701a      	strb	r2, [r3, #0]
		g->enemies[i].track_number = 0;
 800129e:	7bfa      	ldrb	r2, [r7, #15]
 80012a0:	6879      	ldr	r1, [r7, #4]
 80012a2:	4613      	mov	r3, r2
 80012a4:	00db      	lsls	r3, r3, #3
 80012a6:	4413      	add	r3, r2
 80012a8:	009b      	lsls	r3, r3, #2
 80012aa:	440b      	add	r3, r1
 80012ac:	f503 7359 	add.w	r3, r3, #868	@ 0x364
 80012b0:	2200      	movs	r2, #0
 80012b2:	601a      	str	r2, [r3, #0]
		g->enemies[i].tracked_by_missile = false;
 80012b4:	7bfa      	ldrb	r2, [r7, #15]
 80012b6:	6879      	ldr	r1, [r7, #4]
 80012b8:	4613      	mov	r3, r2
 80012ba:	00db      	lsls	r3, r3, #3
 80012bc:	4413      	add	r3, r2
 80012be:	009b      	lsls	r3, r3, #2
 80012c0:	440b      	add	r3, r1
 80012c2:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 80012c6:	2200      	movs	r2, #0
 80012c8:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < num_enemies; i++) {
 80012ca:	7bfb      	ldrb	r3, [r7, #15]
 80012cc:	3301      	adds	r3, #1
 80012ce:	73fb      	strb	r3, [r7, #15]
 80012d0:	7bfb      	ldrb	r3, [r7, #15]
 80012d2:	2b09      	cmp	r3, #9
 80012d4:	d9d8      	bls.n	8001288 <Game_Init+0x86>
	}

	//Deactivation bonuses
	for (i = 0; i < num_bonus; i++)
 80012d6:	2300      	movs	r3, #0
 80012d8:	73fb      	strb	r3, [r7, #15]
 80012da:	e00e      	b.n	80012fa <Game_Init+0xf8>
		g->bonuses[i].active = false;
 80012dc:	7bfa      	ldrb	r2, [r7, #15]
 80012de:	6879      	ldr	r1, [r7, #4]
 80012e0:	4613      	mov	r3, r2
 80012e2:	00db      	lsls	r3, r3, #3
 80012e4:	1a9b      	subs	r3, r3, r2
 80012e6:	009b      	lsls	r3, r3, #2
 80012e8:	440b      	add	r3, r1
 80012ea:	f503 53c2 	add.w	r3, r3, #6208	@ 0x1840
 80012ee:	3310      	adds	r3, #16
 80012f0:	2200      	movs	r2, #0
 80012f2:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < num_bonus; i++)
 80012f4:	7bfb      	ldrb	r3, [r7, #15]
 80012f6:	3301      	adds	r3, #1
 80012f8:	73fb      	strb	r3, [r7, #15]
 80012fa:	7bfb      	ldrb	r3, [r7, #15]
 80012fc:	2b02      	cmp	r3, #2
 80012fe:	d9ed      	bls.n	80012dc <Game_Init+0xda>

	//Deactivation boss
	g->boss.active = false;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001306:	2200      	movs	r2, #0
 8001308:	f883 2834 	strb.w	r2, [r3, #2100]	@ 0x834
	g->boss.lives = 6;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001312:	461a      	mov	r2, r3
 8001314:	2306      	movs	r3, #6
 8001316:	f8c2 3848 	str.w	r3, [r2, #2120]	@ 0x848
	g->boss.level = 1;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001320:	461a      	mov	r2, r3
 8001322:	2301      	movs	r3, #1
 8001324:	f8c2 384c 	str.w	r3, [r2, #2124]	@ 0x84c
	g->boss.x = 140;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800132e:	461a      	mov	r2, r3
 8001330:	238c      	movs	r3, #140	@ 0x8c
 8001332:	f8c2 3838 	str.w	r3, [r2, #2104]	@ 0x838
	g->boss.y = 32;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800133c:	461a      	mov	r2, r3
 800133e:	2320      	movs	r3, #32
 8001340:	f8c2 383c 	str.w	r3, [r2, #2108]	@ 0x83c
	g->boss.update_delay = 3;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800134a:	461a      	mov	r2, r3
 800134c:	2303      	movs	r3, #3
 800134e:	f8c2 3844 	str.w	r3, [r2, #2116]	@ 0x844
}
 8001352:	bf00      	nop
 8001354:	3714      	adds	r7, #20
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr
	...

08001360 <Game_Tick>:

void Game_Tick(GameCtx *g) {
 8001360:	b5b0      	push	{r4, r5, r7, lr}
 8001362:	b088      	sub	sp, #32
 8001364:	af02      	add	r7, sp, #8
 8001366:	6078      	str	r0, [r7, #4]
	 */
	uint8_t i, j;

	static uint8_t y = 0, dy = 1;
	// Read analog stick
	int stick = joystick_value_y();
 8001368:	f002 fcb2 	bl	8003cd0 <joystick_value_y>
 800136c:	60b8      	str	r0, [r7, #8]

	if (stick < 1000)
 800136e:	68bb      	ldr	r3, [r7, #8]
 8001370:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001374:	da05      	bge.n	8001382 <Game_Tick+0x22>
		g->player.y -= 1;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	1e5a      	subs	r2, r3, #1
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	605a      	str	r2, [r3, #4]
 8001380:	e009      	b.n	8001396 <Game_Tick+0x36>
	else if (stick > 3500)
 8001382:	68bb      	ldr	r3, [r7, #8]
 8001384:	f640 52ac 	movw	r2, #3500	@ 0xdac
 8001388:	4293      	cmp	r3, r2
 800138a:	dd04      	ble.n	8001396 <Game_Tick+0x36>
		g->player.y += 1;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	1c5a      	adds	r2, r3, #1
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	605a      	str	r2, [r3, #4]

	// Keeping the player within the screen
	if (g->player.y < 10)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	2b09      	cmp	r3, #9
 800139c:	dc02      	bgt.n	80013a4 <Game_Tick+0x44>
		g->player.y = 10;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	220a      	movs	r2, #10
 80013a2:	605a      	str	r2, [r3, #4]
	if (g->player.y > (screen_height - 14))
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	2b72      	cmp	r3, #114	@ 0x72
 80013aa:	dd02      	ble.n	80013b2 <Game_Tick+0x52>
		g->player.y = (screen_height - 14);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2272      	movs	r2, #114	@ 0x72
 80013b0:	605a      	str	r2, [r3, #4]

	// Shifting shots forward
	bool shoot_updated = false;
 80013b2:	2300      	movs	r3, #0
 80013b4:	757b      	strb	r3, [r7, #21]

	for (i = 0; i < num_shots; ++i) {
 80013b6:	2300      	movs	r3, #0
 80013b8:	75fb      	strb	r3, [r7, #23]
 80013ba:	e151      	b.n	8001660 <Game_Tick+0x300>
		switch (g->shots[i].type) {
 80013bc:	7dfa      	ldrb	r2, [r7, #23]
 80013be:	6879      	ldr	r1, [r7, #4]
 80013c0:	4613      	mov	r3, r2
 80013c2:	009b      	lsls	r3, r3, #2
 80013c4:	4413      	add	r3, r2
 80013c6:	009b      	lsls	r3, r3, #2
 80013c8:	440b      	add	r3, r1
 80013ca:	3330      	adds	r3, #48	@ 0x30
 80013cc:	781b      	ldrb	r3, [r3, #0]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d002      	beq.n	80013d8 <Game_Tick+0x78>
 80013d2:	2b01      	cmp	r3, #1
 80013d4:	d034      	beq.n	8001440 <Game_Tick+0xe0>
 80013d6:	e140      	b.n	800165a <Game_Tick+0x2fa>
		case st_normal:
			if (g->shots[i].active)
 80013d8:	7dfa      	ldrb	r2, [r7, #23]
 80013da:	6879      	ldr	r1, [r7, #4]
 80013dc:	4613      	mov	r3, r2
 80013de:	009b      	lsls	r3, r3, #2
 80013e0:	4413      	add	r3, r2
 80013e2:	009b      	lsls	r3, r3, #2
 80013e4:	440b      	add	r3, r1
 80013e6:	3324      	adds	r3, #36	@ 0x24
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d011      	beq.n	8001412 <Game_Tick+0xb2>
				g->shots[i].x++;
 80013ee:	7dfa      	ldrb	r2, [r7, #23]
 80013f0:	6879      	ldr	r1, [r7, #4]
 80013f2:	4613      	mov	r3, r2
 80013f4:	009b      	lsls	r3, r3, #2
 80013f6:	4413      	add	r3, r2
 80013f8:	009b      	lsls	r3, r3, #2
 80013fa:	440b      	add	r3, r1
 80013fc:	3328      	adds	r3, #40	@ 0x28
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	1c59      	adds	r1, r3, #1
 8001402:	6878      	ldr	r0, [r7, #4]
 8001404:	4613      	mov	r3, r2
 8001406:	009b      	lsls	r3, r3, #2
 8001408:	4413      	add	r3, r2
 800140a:	009b      	lsls	r3, r3, #2
 800140c:	4403      	add	r3, r0
 800140e:	3328      	adds	r3, #40	@ 0x28
 8001410:	6019      	str	r1, [r3, #0]
			if (g->shots[i].x > 128)
 8001412:	7dfa      	ldrb	r2, [r7, #23]
 8001414:	6879      	ldr	r1, [r7, #4]
 8001416:	4613      	mov	r3, r2
 8001418:	009b      	lsls	r3, r3, #2
 800141a:	4413      	add	r3, r2
 800141c:	009b      	lsls	r3, r3, #2
 800141e:	440b      	add	r3, r1
 8001420:	3328      	adds	r3, #40	@ 0x28
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	2b80      	cmp	r3, #128	@ 0x80
 8001426:	f340 8115 	ble.w	8001654 <Game_Tick+0x2f4>
				g->shots[i].active = false;
 800142a:	7dfa      	ldrb	r2, [r7, #23]
 800142c:	6879      	ldr	r1, [r7, #4]
 800142e:	4613      	mov	r3, r2
 8001430:	009b      	lsls	r3, r3, #2
 8001432:	4413      	add	r3, r2
 8001434:	009b      	lsls	r3, r3, #2
 8001436:	440b      	add	r3, r1
 8001438:	3324      	adds	r3, #36	@ 0x24
 800143a:	2200      	movs	r2, #0
 800143c:	701a      	strb	r2, [r3, #0]
			break;
 800143e:	e109      	b.n	8001654 <Game_Tick+0x2f4>
		case st_tracker:

			for (int j = 0; j < num_enemies; j++) {
 8001440:	2300      	movs	r3, #0
 8001442:	613b      	str	r3, [r7, #16]
 8001444:	e0bb      	b.n	80015be <Game_Tick+0x25e>
				if (g->shots[i].track_number == g->enemies[j].track_number) {
 8001446:	7dfa      	ldrb	r2, [r7, #23]
 8001448:	6879      	ldr	r1, [r7, #4]
 800144a:	4613      	mov	r3, r2
 800144c:	009b      	lsls	r3, r3, #2
 800144e:	4413      	add	r3, r2
 8001450:	009b      	lsls	r3, r3, #2
 8001452:	440b      	add	r3, r1
 8001454:	3334      	adds	r3, #52	@ 0x34
 8001456:	6819      	ldr	r1, [r3, #0]
 8001458:	6878      	ldr	r0, [r7, #4]
 800145a:	693a      	ldr	r2, [r7, #16]
 800145c:	4613      	mov	r3, r2
 800145e:	00db      	lsls	r3, r3, #3
 8001460:	4413      	add	r3, r2
 8001462:	009b      	lsls	r3, r3, #2
 8001464:	4403      	add	r3, r0
 8001466:	f503 7359 	add.w	r3, r3, #868	@ 0x364
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4299      	cmp	r1, r3
 800146e:	f040 80a3 	bne.w	80015b8 <Game_Tick+0x258>
					if (g->shots[i].x > g->enemies[j].x)
 8001472:	7dfa      	ldrb	r2, [r7, #23]
 8001474:	6879      	ldr	r1, [r7, #4]
 8001476:	4613      	mov	r3, r2
 8001478:	009b      	lsls	r3, r3, #2
 800147a:	4413      	add	r3, r2
 800147c:	009b      	lsls	r3, r3, #2
 800147e:	440b      	add	r3, r1
 8001480:	3328      	adds	r3, #40	@ 0x28
 8001482:	6819      	ldr	r1, [r3, #0]
 8001484:	6878      	ldr	r0, [r7, #4]
 8001486:	693a      	ldr	r2, [r7, #16]
 8001488:	4613      	mov	r3, r2
 800148a:	00db      	lsls	r3, r3, #3
 800148c:	4413      	add	r3, r2
 800148e:	009b      	lsls	r3, r3, #2
 8001490:	4403      	add	r3, r0
 8001492:	f503 7352 	add.w	r3, r3, #840	@ 0x348
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4299      	cmp	r1, r3
 800149a:	dd12      	ble.n	80014c2 <Game_Tick+0x162>
						g->shots[i].x -= 2;
 800149c:	7dfa      	ldrb	r2, [r7, #23]
 800149e:	6879      	ldr	r1, [r7, #4]
 80014a0:	4613      	mov	r3, r2
 80014a2:	009b      	lsls	r3, r3, #2
 80014a4:	4413      	add	r3, r2
 80014a6:	009b      	lsls	r3, r3, #2
 80014a8:	440b      	add	r3, r1
 80014aa:	3328      	adds	r3, #40	@ 0x28
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	7dfa      	ldrb	r2, [r7, #23]
 80014b0:	1e99      	subs	r1, r3, #2
 80014b2:	6878      	ldr	r0, [r7, #4]
 80014b4:	4613      	mov	r3, r2
 80014b6:	009b      	lsls	r3, r3, #2
 80014b8:	4413      	add	r3, r2
 80014ba:	009b      	lsls	r3, r3, #2
 80014bc:	4403      	add	r3, r0
 80014be:	3328      	adds	r3, #40	@ 0x28
 80014c0:	6019      	str	r1, [r3, #0]
					if (g->shots[i].x < g->enemies[j].x)
 80014c2:	7dfa      	ldrb	r2, [r7, #23]
 80014c4:	6879      	ldr	r1, [r7, #4]
 80014c6:	4613      	mov	r3, r2
 80014c8:	009b      	lsls	r3, r3, #2
 80014ca:	4413      	add	r3, r2
 80014cc:	009b      	lsls	r3, r3, #2
 80014ce:	440b      	add	r3, r1
 80014d0:	3328      	adds	r3, #40	@ 0x28
 80014d2:	6819      	ldr	r1, [r3, #0]
 80014d4:	6878      	ldr	r0, [r7, #4]
 80014d6:	693a      	ldr	r2, [r7, #16]
 80014d8:	4613      	mov	r3, r2
 80014da:	00db      	lsls	r3, r3, #3
 80014dc:	4413      	add	r3, r2
 80014de:	009b      	lsls	r3, r3, #2
 80014e0:	4403      	add	r3, r0
 80014e2:	f503 7352 	add.w	r3, r3, #840	@ 0x348
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4299      	cmp	r1, r3
 80014ea:	da12      	bge.n	8001512 <Game_Tick+0x1b2>
						g->shots[i].x += 2;
 80014ec:	7dfa      	ldrb	r2, [r7, #23]
 80014ee:	6879      	ldr	r1, [r7, #4]
 80014f0:	4613      	mov	r3, r2
 80014f2:	009b      	lsls	r3, r3, #2
 80014f4:	4413      	add	r3, r2
 80014f6:	009b      	lsls	r3, r3, #2
 80014f8:	440b      	add	r3, r1
 80014fa:	3328      	adds	r3, #40	@ 0x28
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	7dfa      	ldrb	r2, [r7, #23]
 8001500:	1c99      	adds	r1, r3, #2
 8001502:	6878      	ldr	r0, [r7, #4]
 8001504:	4613      	mov	r3, r2
 8001506:	009b      	lsls	r3, r3, #2
 8001508:	4413      	add	r3, r2
 800150a:	009b      	lsls	r3, r3, #2
 800150c:	4403      	add	r3, r0
 800150e:	3328      	adds	r3, #40	@ 0x28
 8001510:	6019      	str	r1, [r3, #0]
					if (g->shots[i].y > g->enemies[j].y)
 8001512:	7dfa      	ldrb	r2, [r7, #23]
 8001514:	6879      	ldr	r1, [r7, #4]
 8001516:	4613      	mov	r3, r2
 8001518:	009b      	lsls	r3, r3, #2
 800151a:	4413      	add	r3, r2
 800151c:	009b      	lsls	r3, r3, #2
 800151e:	440b      	add	r3, r1
 8001520:	332c      	adds	r3, #44	@ 0x2c
 8001522:	6819      	ldr	r1, [r3, #0]
 8001524:	6878      	ldr	r0, [r7, #4]
 8001526:	693a      	ldr	r2, [r7, #16]
 8001528:	4613      	mov	r3, r2
 800152a:	00db      	lsls	r3, r3, #3
 800152c:	4413      	add	r3, r2
 800152e:	009b      	lsls	r3, r3, #2
 8001530:	4403      	add	r3, r0
 8001532:	f503 7353 	add.w	r3, r3, #844	@ 0x34c
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4299      	cmp	r1, r3
 800153a:	dd12      	ble.n	8001562 <Game_Tick+0x202>
						g->shots[i].y -= 2;
 800153c:	7dfa      	ldrb	r2, [r7, #23]
 800153e:	6879      	ldr	r1, [r7, #4]
 8001540:	4613      	mov	r3, r2
 8001542:	009b      	lsls	r3, r3, #2
 8001544:	4413      	add	r3, r2
 8001546:	009b      	lsls	r3, r3, #2
 8001548:	440b      	add	r3, r1
 800154a:	332c      	adds	r3, #44	@ 0x2c
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	7dfa      	ldrb	r2, [r7, #23]
 8001550:	1e99      	subs	r1, r3, #2
 8001552:	6878      	ldr	r0, [r7, #4]
 8001554:	4613      	mov	r3, r2
 8001556:	009b      	lsls	r3, r3, #2
 8001558:	4413      	add	r3, r2
 800155a:	009b      	lsls	r3, r3, #2
 800155c:	4403      	add	r3, r0
 800155e:	332c      	adds	r3, #44	@ 0x2c
 8001560:	6019      	str	r1, [r3, #0]
					if (g->shots[i].y < g->enemies[j].y)
 8001562:	7dfa      	ldrb	r2, [r7, #23]
 8001564:	6879      	ldr	r1, [r7, #4]
 8001566:	4613      	mov	r3, r2
 8001568:	009b      	lsls	r3, r3, #2
 800156a:	4413      	add	r3, r2
 800156c:	009b      	lsls	r3, r3, #2
 800156e:	440b      	add	r3, r1
 8001570:	332c      	adds	r3, #44	@ 0x2c
 8001572:	6819      	ldr	r1, [r3, #0]
 8001574:	6878      	ldr	r0, [r7, #4]
 8001576:	693a      	ldr	r2, [r7, #16]
 8001578:	4613      	mov	r3, r2
 800157a:	00db      	lsls	r3, r3, #3
 800157c:	4413      	add	r3, r2
 800157e:	009b      	lsls	r3, r3, #2
 8001580:	4403      	add	r3, r0
 8001582:	f503 7353 	add.w	r3, r3, #844	@ 0x34c
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4299      	cmp	r1, r3
 800158a:	da12      	bge.n	80015b2 <Game_Tick+0x252>
						g->shots[i].y += 2;
 800158c:	7dfa      	ldrb	r2, [r7, #23]
 800158e:	6879      	ldr	r1, [r7, #4]
 8001590:	4613      	mov	r3, r2
 8001592:	009b      	lsls	r3, r3, #2
 8001594:	4413      	add	r3, r2
 8001596:	009b      	lsls	r3, r3, #2
 8001598:	440b      	add	r3, r1
 800159a:	332c      	adds	r3, #44	@ 0x2c
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	7dfa      	ldrb	r2, [r7, #23]
 80015a0:	1c99      	adds	r1, r3, #2
 80015a2:	6878      	ldr	r0, [r7, #4]
 80015a4:	4613      	mov	r3, r2
 80015a6:	009b      	lsls	r3, r3, #2
 80015a8:	4413      	add	r3, r2
 80015aa:	009b      	lsls	r3, r3, #2
 80015ac:	4403      	add	r3, r0
 80015ae:	332c      	adds	r3, #44	@ 0x2c
 80015b0:	6019      	str	r1, [r3, #0]
					shoot_updated = true;
 80015b2:	2301      	movs	r3, #1
 80015b4:	757b      	strb	r3, [r7, #21]
					break;
 80015b6:	e006      	b.n	80015c6 <Game_Tick+0x266>
			for (int j = 0; j < num_enemies; j++) {
 80015b8:	693b      	ldr	r3, [r7, #16]
 80015ba:	3301      	adds	r3, #1
 80015bc:	613b      	str	r3, [r7, #16]
 80015be:	693b      	ldr	r3, [r7, #16]
 80015c0:	2b09      	cmp	r3, #9
 80015c2:	f77f af40 	ble.w	8001446 <Game_Tick+0xe6>
				}
			}
			//Remove tracking missiles that have no target
			if (!shoot_updated && g->shots[i].type == st_tracker) {
 80015c6:	7d7b      	ldrb	r3, [r7, #21]
 80015c8:	f083 0301 	eor.w	r3, r3, #1
 80015cc:	b2db      	uxtb	r3, r3
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d020      	beq.n	8001614 <Game_Tick+0x2b4>
 80015d2:	7dfa      	ldrb	r2, [r7, #23]
 80015d4:	6879      	ldr	r1, [r7, #4]
 80015d6:	4613      	mov	r3, r2
 80015d8:	009b      	lsls	r3, r3, #2
 80015da:	4413      	add	r3, r2
 80015dc:	009b      	lsls	r3, r3, #2
 80015de:	440b      	add	r3, r1
 80015e0:	3330      	adds	r3, #48	@ 0x30
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	2b01      	cmp	r3, #1
 80015e6:	d115      	bne.n	8001614 <Game_Tick+0x2b4>
				g->shots[i].active = false;
 80015e8:	7dfa      	ldrb	r2, [r7, #23]
 80015ea:	6879      	ldr	r1, [r7, #4]
 80015ec:	4613      	mov	r3, r2
 80015ee:	009b      	lsls	r3, r3, #2
 80015f0:	4413      	add	r3, r2
 80015f2:	009b      	lsls	r3, r3, #2
 80015f4:	440b      	add	r3, r1
 80015f6:	3324      	adds	r3, #36	@ 0x24
 80015f8:	2200      	movs	r2, #0
 80015fa:	701a      	strb	r2, [r3, #0]
				g->shots[i].track_number = 0;
 80015fc:	7dfa      	ldrb	r2, [r7, #23]
 80015fe:	6879      	ldr	r1, [r7, #4]
 8001600:	4613      	mov	r3, r2
 8001602:	009b      	lsls	r3, r3, #2
 8001604:	4413      	add	r3, r2
 8001606:	009b      	lsls	r3, r3, #2
 8001608:	440b      	add	r3, r1
 800160a:	3334      	adds	r3, #52	@ 0x34
 800160c:	2200      	movs	r2, #0
 800160e:	601a      	str	r2, [r3, #0]
				shoot_updated = false;
 8001610:	2300      	movs	r3, #0
 8001612:	757b      	strb	r3, [r7, #21]
			}

			//Remove off-map shots
			if (g->shots[i].x > 128) {
 8001614:	7dfa      	ldrb	r2, [r7, #23]
 8001616:	6879      	ldr	r1, [r7, #4]
 8001618:	4613      	mov	r3, r2
 800161a:	009b      	lsls	r3, r3, #2
 800161c:	4413      	add	r3, r2
 800161e:	009b      	lsls	r3, r3, #2
 8001620:	440b      	add	r3, r1
 8001622:	3328      	adds	r3, #40	@ 0x28
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	2b80      	cmp	r3, #128	@ 0x80
 8001628:	dd16      	ble.n	8001658 <Game_Tick+0x2f8>
				g->shots[i].active = false;
 800162a:	7dfa      	ldrb	r2, [r7, #23]
 800162c:	6879      	ldr	r1, [r7, #4]
 800162e:	4613      	mov	r3, r2
 8001630:	009b      	lsls	r3, r3, #2
 8001632:	4413      	add	r3, r2
 8001634:	009b      	lsls	r3, r3, #2
 8001636:	440b      	add	r3, r1
 8001638:	3324      	adds	r3, #36	@ 0x24
 800163a:	2200      	movs	r2, #0
 800163c:	701a      	strb	r2, [r3, #0]
				g->shots[i].track_number = 0;
 800163e:	7dfa      	ldrb	r2, [r7, #23]
 8001640:	6879      	ldr	r1, [r7, #4]
 8001642:	4613      	mov	r3, r2
 8001644:	009b      	lsls	r3, r3, #2
 8001646:	4413      	add	r3, r2
 8001648:	009b      	lsls	r3, r3, #2
 800164a:	440b      	add	r3, r1
 800164c:	3334      	adds	r3, #52	@ 0x34
 800164e:	2200      	movs	r2, #0
 8001650:	601a      	str	r2, [r3, #0]
			}
			break;
 8001652:	e001      	b.n	8001658 <Game_Tick+0x2f8>
			break;
 8001654:	bf00      	nop
 8001656:	e000      	b.n	800165a <Game_Tick+0x2fa>
			break;
 8001658:	bf00      	nop
	for (i = 0; i < num_shots; ++i) {
 800165a:	7dfb      	ldrb	r3, [r7, #23]
 800165c:	3301      	adds	r3, #1
 800165e:	75fb      	strb	r3, [r7, #23]
 8001660:	7dfb      	ldrb	r3, [r7, #23]
 8001662:	2b22      	cmp	r3, #34	@ 0x22
 8001664:	f67f aeaa 	bls.w	80013bc <Game_Tick+0x5c>

	}

	//Remove the markers on enemies whose shots have been used on others
	bool is_there_a_missile;
	for (i = 0; i < num_enemies; i++) {
 8001668:	2300      	movs	r3, #0
 800166a:	75fb      	strb	r3, [r7, #23]
 800166c:	e035      	b.n	80016da <Game_Tick+0x37a>
		is_there_a_missile = false;
 800166e:	2300      	movs	r3, #0
 8001670:	73fb      	strb	r3, [r7, #15]

		for (j = 0; j < num_shots; j++) {
 8001672:	2300      	movs	r3, #0
 8001674:	75bb      	strb	r3, [r7, #22]
 8001676:	e019      	b.n	80016ac <Game_Tick+0x34c>
			if (g->enemies[i].track_number == g->shots[j].track_number)
 8001678:	7dfa      	ldrb	r2, [r7, #23]
 800167a:	6879      	ldr	r1, [r7, #4]
 800167c:	4613      	mov	r3, r2
 800167e:	00db      	lsls	r3, r3, #3
 8001680:	4413      	add	r3, r2
 8001682:	009b      	lsls	r3, r3, #2
 8001684:	440b      	add	r3, r1
 8001686:	f503 7359 	add.w	r3, r3, #868	@ 0x364
 800168a:	6819      	ldr	r1, [r3, #0]
 800168c:	7dba      	ldrb	r2, [r7, #22]
 800168e:	6878      	ldr	r0, [r7, #4]
 8001690:	4613      	mov	r3, r2
 8001692:	009b      	lsls	r3, r3, #2
 8001694:	4413      	add	r3, r2
 8001696:	009b      	lsls	r3, r3, #2
 8001698:	4403      	add	r3, r0
 800169a:	3334      	adds	r3, #52	@ 0x34
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4299      	cmp	r1, r3
 80016a0:	d101      	bne.n	80016a6 <Game_Tick+0x346>
				is_there_a_missile = true;
 80016a2:	2301      	movs	r3, #1
 80016a4:	73fb      	strb	r3, [r7, #15]
		for (j = 0; j < num_shots; j++) {
 80016a6:	7dbb      	ldrb	r3, [r7, #22]
 80016a8:	3301      	adds	r3, #1
 80016aa:	75bb      	strb	r3, [r7, #22]
 80016ac:	7dbb      	ldrb	r3, [r7, #22]
 80016ae:	2b22      	cmp	r3, #34	@ 0x22
 80016b0:	d9e2      	bls.n	8001678 <Game_Tick+0x318>
		}

		if (!is_there_a_missile)
 80016b2:	7bfb      	ldrb	r3, [r7, #15]
 80016b4:	f083 0301 	eor.w	r3, r3, #1
 80016b8:	b2db      	uxtb	r3, r3
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d00a      	beq.n	80016d4 <Game_Tick+0x374>
			g->enemies[i].track_number = 0;
 80016be:	7dfa      	ldrb	r2, [r7, #23]
 80016c0:	6879      	ldr	r1, [r7, #4]
 80016c2:	4613      	mov	r3, r2
 80016c4:	00db      	lsls	r3, r3, #3
 80016c6:	4413      	add	r3, r2
 80016c8:	009b      	lsls	r3, r3, #2
 80016ca:	440b      	add	r3, r1
 80016cc:	f503 7359 	add.w	r3, r3, #868	@ 0x364
 80016d0:	2200      	movs	r2, #0
 80016d2:	601a      	str	r2, [r3, #0]
	for (i = 0; i < num_enemies; i++) {
 80016d4:	7dfb      	ldrb	r3, [r7, #23]
 80016d6:	3301      	adds	r3, #1
 80016d8:	75fb      	strb	r3, [r7, #23]
 80016da:	7dfb      	ldrb	r3, [r7, #23]
 80016dc:	2b09      	cmp	r3, #9
 80016de:	d9c6      	bls.n	800166e <Game_Tick+0x30e>
	}

	// Updated enemies
	for (i = 0; i < num_enemies; ++i) {
 80016e0:	2300      	movs	r3, #0
 80016e2:	75fb      	strb	r3, [r7, #23]
 80016e4:	e2a4      	b.n	8001c30 <Game_Tick+0x8d0>

		if (g->enemies[i].active) {
 80016e6:	7dfa      	ldrb	r2, [r7, #23]
 80016e8:	6879      	ldr	r1, [r7, #4]
 80016ea:	4613      	mov	r3, r2
 80016ec:	00db      	lsls	r3, r3, #3
 80016ee:	4413      	add	r3, r2
 80016f0:	009b      	lsls	r3, r3, #2
 80016f2:	440b      	add	r3, r1
 80016f4:	f503 7351 	add.w	r3, r3, #836	@ 0x344
 80016f8:	781b      	ldrb	r3, [r3, #0]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	f000 8295 	beq.w	8001c2a <Game_Tick+0x8ca>
			g->enemies[i].next_update -= 1;
 8001700:	7dfa      	ldrb	r2, [r7, #23]
 8001702:	6879      	ldr	r1, [r7, #4]
 8001704:	4613      	mov	r3, r2
 8001706:	00db      	lsls	r3, r3, #3
 8001708:	4413      	add	r3, r2
 800170a:	009b      	lsls	r3, r3, #2
 800170c:	440b      	add	r3, r1
 800170e:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	7dfa      	ldrb	r2, [r7, #23]
 8001716:	1e59      	subs	r1, r3, #1
 8001718:	6878      	ldr	r0, [r7, #4]
 800171a:	4613      	mov	r3, r2
 800171c:	00db      	lsls	r3, r3, #3
 800171e:	4413      	add	r3, r2
 8001720:	009b      	lsls	r3, r3, #2
 8001722:	4403      	add	r3, r0
 8001724:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8001728:	6019      	str	r1, [r3, #0]
			if (g->enemies[i].next_update <= 0) {
 800172a:	7dfa      	ldrb	r2, [r7, #23]
 800172c:	6879      	ldr	r1, [r7, #4]
 800172e:	4613      	mov	r3, r2
 8001730:	00db      	lsls	r3, r3, #3
 8001732:	4413      	add	r3, r2
 8001734:	009b      	lsls	r3, r3, #2
 8001736:	440b      	add	r3, r1
 8001738:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	2b00      	cmp	r3, #0
 8001740:	f300 8273 	bgt.w	8001c2a <Game_Tick+0x8ca>
				if (g->enemies[i].active) {
 8001744:	7dfa      	ldrb	r2, [r7, #23]
 8001746:	6879      	ldr	r1, [r7, #4]
 8001748:	4613      	mov	r3, r2
 800174a:	00db      	lsls	r3, r3, #3
 800174c:	4413      	add	r3, r2
 800174e:	009b      	lsls	r3, r3, #2
 8001750:	440b      	add	r3, r1
 8001752:	f503 7351 	add.w	r3, r3, #836	@ 0x344
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	2b00      	cmp	r3, #0
 800175a:	f000 8266 	beq.w	8001c2a <Game_Tick+0x8ca>

					g->enemies[i].next_update = g->enemies[i].update_delay;
 800175e:	7df9      	ldrb	r1, [r7, #23]
 8001760:	7dfa      	ldrb	r2, [r7, #23]
 8001762:	6878      	ldr	r0, [r7, #4]
 8001764:	460b      	mov	r3, r1
 8001766:	00db      	lsls	r3, r3, #3
 8001768:	440b      	add	r3, r1
 800176a:	009b      	lsls	r3, r3, #2
 800176c:	4403      	add	r3, r0
 800176e:	f503 7357 	add.w	r3, r3, #860	@ 0x35c
 8001772:	6819      	ldr	r1, [r3, #0]
 8001774:	6878      	ldr	r0, [r7, #4]
 8001776:	4613      	mov	r3, r2
 8001778:	00db      	lsls	r3, r3, #3
 800177a:	4413      	add	r3, r2
 800177c:	009b      	lsls	r3, r3, #2
 800177e:	4403      	add	r3, r0
 8001780:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8001784:	6019      	str	r1, [r3, #0]

					//Checking for collisions between opponents and the player
					if (colliding(g->enemies[i].x, g->enemies[i].y, g->player.x,
 8001786:	7dfa      	ldrb	r2, [r7, #23]
 8001788:	6879      	ldr	r1, [r7, #4]
 800178a:	4613      	mov	r3, r2
 800178c:	00db      	lsls	r3, r3, #3
 800178e:	4413      	add	r3, r2
 8001790:	009b      	lsls	r3, r3, #2
 8001792:	440b      	add	r3, r1
 8001794:	f503 7352 	add.w	r3, r3, #840	@ 0x348
 8001798:	6818      	ldr	r0, [r3, #0]
 800179a:	7dfa      	ldrb	r2, [r7, #23]
 800179c:	6879      	ldr	r1, [r7, #4]
 800179e:	4613      	mov	r3, r2
 80017a0:	00db      	lsls	r3, r3, #3
 80017a2:	4413      	add	r3, r2
 80017a4:	009b      	lsls	r3, r3, #2
 80017a6:	440b      	add	r3, r1
 80017a8:	f503 7353 	add.w	r3, r3, #844	@ 0x34c
 80017ac:	6819      	ldr	r1, [r3, #0]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681a      	ldr	r2, [r3, #0]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	f001 fdb9 	bl	800332c <colliding>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d15a      	bne.n	8001876 <Game_Tick+0x516>
							g->player.y)
							|| colliding(g->enemies[i].x, g->enemies[i].y,
 80017c0:	7dfa      	ldrb	r2, [r7, #23]
 80017c2:	6879      	ldr	r1, [r7, #4]
 80017c4:	4613      	mov	r3, r2
 80017c6:	00db      	lsls	r3, r3, #3
 80017c8:	4413      	add	r3, r2
 80017ca:	009b      	lsls	r3, r3, #2
 80017cc:	440b      	add	r3, r1
 80017ce:	f503 7352 	add.w	r3, r3, #840	@ 0x348
 80017d2:	6818      	ldr	r0, [r3, #0]
 80017d4:	7dfa      	ldrb	r2, [r7, #23]
 80017d6:	6879      	ldr	r1, [r7, #4]
 80017d8:	4613      	mov	r3, r2
 80017da:	00db      	lsls	r3, r3, #3
 80017dc:	4413      	add	r3, r2
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	440b      	add	r3, r1
 80017e2:	f503 7353 	add.w	r3, r3, #844	@ 0x34c
 80017e6:	6819      	ldr	r1, [r3, #0]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681a      	ldr	r2, [r3, #0]
									g->player.x, g->player.y + 5)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	685b      	ldr	r3, [r3, #4]
							|| colliding(g->enemies[i].x, g->enemies[i].y,
 80017f0:	3305      	adds	r3, #5
 80017f2:	f001 fd9b 	bl	800332c <colliding>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d13c      	bne.n	8001876 <Game_Tick+0x516>
							|| colliding(g->enemies[i].x, g->enemies[i].y,
 80017fc:	7dfa      	ldrb	r2, [r7, #23]
 80017fe:	6879      	ldr	r1, [r7, #4]
 8001800:	4613      	mov	r3, r2
 8001802:	00db      	lsls	r3, r3, #3
 8001804:	4413      	add	r3, r2
 8001806:	009b      	lsls	r3, r3, #2
 8001808:	440b      	add	r3, r1
 800180a:	f503 7352 	add.w	r3, r3, #840	@ 0x348
 800180e:	6818      	ldr	r0, [r3, #0]
 8001810:	7dfa      	ldrb	r2, [r7, #23]
 8001812:	6879      	ldr	r1, [r7, #4]
 8001814:	4613      	mov	r3, r2
 8001816:	00db      	lsls	r3, r3, #3
 8001818:	4413      	add	r3, r2
 800181a:	009b      	lsls	r3, r3, #2
 800181c:	440b      	add	r3, r1
 800181e:	f503 7353 	add.w	r3, r3, #844	@ 0x34c
 8001822:	6819      	ldr	r1, [r3, #0]
									g->player.x + 7, g->player.y)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
							|| colliding(g->enemies[i].x, g->enemies[i].y,
 8001828:	1dda      	adds	r2, r3, #7
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	f001 fd7d 	bl	800332c <colliding>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	d11e      	bne.n	8001876 <Game_Tick+0x516>
							|| colliding(g->enemies[i].x, g->enemies[i].y,
 8001838:	7dfa      	ldrb	r2, [r7, #23]
 800183a:	6879      	ldr	r1, [r7, #4]
 800183c:	4613      	mov	r3, r2
 800183e:	00db      	lsls	r3, r3, #3
 8001840:	4413      	add	r3, r2
 8001842:	009b      	lsls	r3, r3, #2
 8001844:	440b      	add	r3, r1
 8001846:	f503 7352 	add.w	r3, r3, #840	@ 0x348
 800184a:	6818      	ldr	r0, [r3, #0]
 800184c:	7dfa      	ldrb	r2, [r7, #23]
 800184e:	6879      	ldr	r1, [r7, #4]
 8001850:	4613      	mov	r3, r2
 8001852:	00db      	lsls	r3, r3, #3
 8001854:	4413      	add	r3, r2
 8001856:	009b      	lsls	r3, r3, #2
 8001858:	440b      	add	r3, r1
 800185a:	f503 7353 	add.w	r3, r3, #844	@ 0x34c
 800185e:	6819      	ldr	r1, [r3, #0]
									g->player.x + 7, g->player.y + 5)) {
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
							|| colliding(g->enemies[i].x, g->enemies[i].y,
 8001864:	1dda      	adds	r2, r3, #7
									g->player.x + 7, g->player.y + 5)) {
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	685b      	ldr	r3, [r3, #4]
							|| colliding(g->enemies[i].x, g->enemies[i].y,
 800186a:	3305      	adds	r3, #5
 800186c:	f001 fd5e 	bl	800332c <colliding>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d06b      	beq.n	800194e <Game_Tick+0x5ee>
						g->player.lives -= 1;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	691b      	ldr	r3, [r3, #16]
 800187a:	1e5a      	subs	r2, r3, #1
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	611a      	str	r2, [r3, #16]
						;
						g->enemies[i].active = false;
 8001880:	7dfa      	ldrb	r2, [r7, #23]
 8001882:	6879      	ldr	r1, [r7, #4]
 8001884:	4613      	mov	r3, r2
 8001886:	00db      	lsls	r3, r3, #3
 8001888:	4413      	add	r3, r2
 800188a:	009b      	lsls	r3, r3, #2
 800188c:	440b      	add	r3, r1
 800188e:	f503 7351 	add.w	r3, r3, #836	@ 0x344
 8001892:	2200      	movs	r2, #0
 8001894:	701a      	strb	r2, [r3, #0]
						g->enemies[i].tracked_by_missile = false;
 8001896:	7dfa      	ldrb	r2, [r7, #23]
 8001898:	6879      	ldr	r1, [r7, #4]
 800189a:	4613      	mov	r3, r2
 800189c:	00db      	lsls	r3, r3, #3
 800189e:	4413      	add	r3, r2
 80018a0:	009b      	lsls	r3, r3, #2
 80018a2:	440b      	add	r3, r1
 80018a4:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 80018a8:	2200      	movs	r2, #0
 80018aa:	701a      	strb	r2, [r3, #0]
						g->enemies[i].track_number = 0;
 80018ac:	7dfa      	ldrb	r2, [r7, #23]
 80018ae:	6879      	ldr	r1, [r7, #4]
 80018b0:	4613      	mov	r3, r2
 80018b2:	00db      	lsls	r3, r3, #3
 80018b4:	4413      	add	r3, r2
 80018b6:	009b      	lsls	r3, r3, #2
 80018b8:	440b      	add	r3, r1
 80018ba:	f503 7359 	add.w	r3, r3, #868	@ 0x364
 80018be:	2200      	movs	r2, #0
 80018c0:	601a      	str	r2, [r3, #0]
						GFX_DrowBitMap_P(g->enemies[i].x + 2, g->enemies[i].y,
 80018c2:	7dfa      	ldrb	r2, [r7, #23]
 80018c4:	6879      	ldr	r1, [r7, #4]
 80018c6:	4613      	mov	r3, r2
 80018c8:	00db      	lsls	r3, r3, #3
 80018ca:	4413      	add	r3, r2
 80018cc:	009b      	lsls	r3, r3, #2
 80018ce:	440b      	add	r3, r1
 80018d0:	f503 7352 	add.w	r3, r3, #840	@ 0x348
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	1c98      	adds	r0, r3, #2
 80018d8:	7dfa      	ldrb	r2, [r7, #23]
 80018da:	6879      	ldr	r1, [r7, #4]
 80018dc:	4613      	mov	r3, r2
 80018de:	00db      	lsls	r3, r3, #3
 80018e0:	4413      	add	r3, r2
 80018e2:	009b      	lsls	r3, r3, #2
 80018e4:	440b      	add	r3, r1
 80018e6:	f503 7353 	add.w	r3, r3, #844	@ 0x34c
 80018ea:	6819      	ldr	r1, [r3, #0]
 80018ec:	2301      	movs	r3, #1
 80018ee:	9301      	str	r3, [sp, #4]
 80018f0:	230a      	movs	r3, #10
 80018f2:	9300      	str	r3, [sp, #0]
 80018f4:	230a      	movs	r3, #10
 80018f6:	4ab2      	ldr	r2, [pc, #712]	@ (8001bc0 <Game_Tick+0x860>)
 80018f8:	f7ff fa58 	bl	8000dac <GFX_DrowBitMap_P>
								explosion_map, 10, 10, 1);
						GFX_DrowBitMap_P(g->player.x + 8, g->player.y - 2,
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f103 0008 	add.w	r0, r3, #8
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	1e99      	subs	r1, r3, #2
 800190a:	2301      	movs	r3, #1
 800190c:	9301      	str	r3, [sp, #4]
 800190e:	2310      	movs	r3, #16
 8001910:	9300      	str	r3, [sp, #0]
 8001912:	230a      	movs	r3, #10
 8001914:	4aab      	ldr	r2, [pc, #684]	@ (8001bc4 <Game_Tick+0x864>)
 8001916:	f7ff fa49 	bl	8000dac <GFX_DrowBitMap_P>
								player_shield_map, 10, 16, 1);
						GFX_DrowBitMap_P(g->player.x, g->player.y, player_map,
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6818      	ldr	r0, [r3, #0]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6859      	ldr	r1, [r3, #4]
 8001922:	2301      	movs	r3, #1
 8001924:	9301      	str	r3, [sp, #4]
 8001926:	230b      	movs	r3, #11
 8001928:	9300      	str	r3, [sp, #0]
 800192a:	230b      	movs	r3, #11
 800192c:	4aa6      	ldr	r2, [pc, #664]	@ (8001bc8 <Game_Tick+0x868>)
 800192e:	f7ff fa3d 	bl	8000dac <GFX_DrowBitMap_P>
								11, 11, 1);

						ssd1327_display();
 8001932:	f002 fa9b 	bl	8003e6c <ssd1327_display>
						if (g->player.lives <= 0) {
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	691b      	ldr	r3, [r3, #16]
 800193a:	2b00      	cmp	r3, #0
 800193c:	dc07      	bgt.n	800194e <Game_Tick+0x5ee>
							play_dead_anim();
 800193e:	f002 f8f3 	bl	8003b28 <play_dead_anim>
							g->state = st_dead;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001948:	2202      	movs	r2, #2
 800194a:	f883 28a4 	strb.w	r2, [r3, #2212]	@ 0x8a4
						}
					}

					// Moving to the left and making special moves
					g->enemies[i].x -= 1;
 800194e:	7dfa      	ldrb	r2, [r7, #23]
 8001950:	6879      	ldr	r1, [r7, #4]
 8001952:	4613      	mov	r3, r2
 8001954:	00db      	lsls	r3, r3, #3
 8001956:	4413      	add	r3, r2
 8001958:	009b      	lsls	r3, r3, #2
 800195a:	440b      	add	r3, r1
 800195c:	f503 7352 	add.w	r3, r3, #840	@ 0x348
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	7dfa      	ldrb	r2, [r7, #23]
 8001964:	1e59      	subs	r1, r3, #1
 8001966:	6878      	ldr	r0, [r7, #4]
 8001968:	4613      	mov	r3, r2
 800196a:	00db      	lsls	r3, r3, #3
 800196c:	4413      	add	r3, r2
 800196e:	009b      	lsls	r3, r3, #2
 8001970:	4403      	add	r3, r0
 8001972:	f503 7352 	add.w	r3, r3, #840	@ 0x348
 8001976:	6019      	str	r1, [r3, #0]

					switch (g->enemies[i].type) {
 8001978:	7dfa      	ldrb	r2, [r7, #23]
 800197a:	6879      	ldr	r1, [r7, #4]
 800197c:	4613      	mov	r3, r2
 800197e:	00db      	lsls	r3, r3, #3
 8001980:	4413      	add	r3, r2
 8001982:	009b      	lsls	r3, r3, #2
 8001984:	440b      	add	r3, r1
 8001986:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800198a:	781b      	ldrb	r3, [r3, #0]
 800198c:	2b02      	cmp	r3, #2
 800198e:	d05d      	beq.n	8001a4c <Game_Tick+0x6ec>
 8001990:	2b02      	cmp	r3, #2
 8001992:	f300 811c 	bgt.w	8001bce <Game_Tick+0x86e>
 8001996:	2b00      	cmp	r3, #0
 8001998:	f000 810d 	beq.w	8001bb6 <Game_Tick+0x856>
 800199c:	2b01      	cmp	r3, #1
 800199e:	f040 8116 	bne.w	8001bce <Game_Tick+0x86e>
					case et_tracker:
						if (g->enemies[i].x < 70) {
 80019a2:	7dfa      	ldrb	r2, [r7, #23]
 80019a4:	6879      	ldr	r1, [r7, #4]
 80019a6:	4613      	mov	r3, r2
 80019a8:	00db      	lsls	r3, r3, #3
 80019aa:	4413      	add	r3, r2
 80019ac:	009b      	lsls	r3, r3, #2
 80019ae:	440b      	add	r3, r1
 80019b0:	f503 7352 	add.w	r3, r3, #840	@ 0x348
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	2b45      	cmp	r3, #69	@ 0x45
 80019b8:	f300 80ff 	bgt.w	8001bba <Game_Tick+0x85a>
							if (g->player.y > g->enemies[i].y)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6859      	ldr	r1, [r3, #4]
 80019c0:	7dfa      	ldrb	r2, [r7, #23]
 80019c2:	6878      	ldr	r0, [r7, #4]
 80019c4:	4613      	mov	r3, r2
 80019c6:	00db      	lsls	r3, r3, #3
 80019c8:	4413      	add	r3, r2
 80019ca:	009b      	lsls	r3, r3, #2
 80019cc:	4403      	add	r3, r0
 80019ce:	f503 7353 	add.w	r3, r3, #844	@ 0x34c
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4299      	cmp	r1, r3
 80019d6:	dd14      	ble.n	8001a02 <Game_Tick+0x6a2>
								g->enemies[i].y += 1;
 80019d8:	7dfa      	ldrb	r2, [r7, #23]
 80019da:	6879      	ldr	r1, [r7, #4]
 80019dc:	4613      	mov	r3, r2
 80019de:	00db      	lsls	r3, r3, #3
 80019e0:	4413      	add	r3, r2
 80019e2:	009b      	lsls	r3, r3, #2
 80019e4:	440b      	add	r3, r1
 80019e6:	f503 7353 	add.w	r3, r3, #844	@ 0x34c
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	7dfa      	ldrb	r2, [r7, #23]
 80019ee:	1c59      	adds	r1, r3, #1
 80019f0:	6878      	ldr	r0, [r7, #4]
 80019f2:	4613      	mov	r3, r2
 80019f4:	00db      	lsls	r3, r3, #3
 80019f6:	4413      	add	r3, r2
 80019f8:	009b      	lsls	r3, r3, #2
 80019fa:	4403      	add	r3, r0
 80019fc:	f503 7353 	add.w	r3, r3, #844	@ 0x34c
 8001a00:	6019      	str	r1, [r3, #0]
							if (g->player.y < g->enemies[i].y)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6859      	ldr	r1, [r3, #4]
 8001a06:	7dfa      	ldrb	r2, [r7, #23]
 8001a08:	6878      	ldr	r0, [r7, #4]
 8001a0a:	4613      	mov	r3, r2
 8001a0c:	00db      	lsls	r3, r3, #3
 8001a0e:	4413      	add	r3, r2
 8001a10:	009b      	lsls	r3, r3, #2
 8001a12:	4403      	add	r3, r0
 8001a14:	f503 7353 	add.w	r3, r3, #844	@ 0x34c
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4299      	cmp	r1, r3
 8001a1c:	f280 80cd 	bge.w	8001bba <Game_Tick+0x85a>
								g->enemies[i].y -= 1;
 8001a20:	7dfa      	ldrb	r2, [r7, #23]
 8001a22:	6879      	ldr	r1, [r7, #4]
 8001a24:	4613      	mov	r3, r2
 8001a26:	00db      	lsls	r3, r3, #3
 8001a28:	4413      	add	r3, r2
 8001a2a:	009b      	lsls	r3, r3, #2
 8001a2c:	440b      	add	r3, r1
 8001a2e:	f503 7353 	add.w	r3, r3, #844	@ 0x34c
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	7dfa      	ldrb	r2, [r7, #23]
 8001a36:	1e59      	subs	r1, r3, #1
 8001a38:	6878      	ldr	r0, [r7, #4]
 8001a3a:	4613      	mov	r3, r2
 8001a3c:	00db      	lsls	r3, r3, #3
 8001a3e:	4413      	add	r3, r2
 8001a40:	009b      	lsls	r3, r3, #2
 8001a42:	4403      	add	r3, r0
 8001a44:	f503 7353 	add.w	r3, r3, #844	@ 0x34c
 8001a48:	6019      	str	r1, [r3, #0]
						}
						break;
 8001a4a:	e0b6      	b.n	8001bba <Game_Tick+0x85a>
					case et_diver:
						break;
					case et_bobber:
						if ((g->enemies[i].x % 4 == 0)
 8001a4c:	7dfa      	ldrb	r2, [r7, #23]
 8001a4e:	6879      	ldr	r1, [r7, #4]
 8001a50:	4613      	mov	r3, r2
 8001a52:	00db      	lsls	r3, r3, #3
 8001a54:	4413      	add	r3, r2
 8001a56:	009b      	lsls	r3, r3, #2
 8001a58:	440b      	add	r3, r1
 8001a5a:	f503 7352 	add.w	r3, r3, #840	@ 0x348
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f003 0303 	and.w	r3, r3, #3
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d122      	bne.n	8001aae <Game_Tick+0x74e>
								&& (g->enemies[i].x % 8 == 0))
 8001a68:	7dfa      	ldrb	r2, [r7, #23]
 8001a6a:	6879      	ldr	r1, [r7, #4]
 8001a6c:	4613      	mov	r3, r2
 8001a6e:	00db      	lsls	r3, r3, #3
 8001a70:	4413      	add	r3, r2
 8001a72:	009b      	lsls	r3, r3, #2
 8001a74:	440b      	add	r3, r1
 8001a76:	f503 7352 	add.w	r3, r3, #840	@ 0x348
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f003 0307 	and.w	r3, r3, #7
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d114      	bne.n	8001aae <Game_Tick+0x74e>
							g->enemies[i].y += 4;
 8001a84:	7dfa      	ldrb	r2, [r7, #23]
 8001a86:	6879      	ldr	r1, [r7, #4]
 8001a88:	4613      	mov	r3, r2
 8001a8a:	00db      	lsls	r3, r3, #3
 8001a8c:	4413      	add	r3, r2
 8001a8e:	009b      	lsls	r3, r3, #2
 8001a90:	440b      	add	r3, r1
 8001a92:	f503 7353 	add.w	r3, r3, #844	@ 0x34c
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	7dfa      	ldrb	r2, [r7, #23]
 8001a9a:	1d19      	adds	r1, r3, #4
 8001a9c:	6878      	ldr	r0, [r7, #4]
 8001a9e:	4613      	mov	r3, r2
 8001aa0:	00db      	lsls	r3, r3, #3
 8001aa2:	4413      	add	r3, r2
 8001aa4:	009b      	lsls	r3, r3, #2
 8001aa6:	4403      	add	r3, r0
 8001aa8:	f503 7353 	add.w	r3, r3, #844	@ 0x34c
 8001aac:	6019      	str	r1, [r3, #0]
						if ((g->enemies[i].x % 4 == 0)
 8001aae:	7dfa      	ldrb	r2, [r7, #23]
 8001ab0:	6879      	ldr	r1, [r7, #4]
 8001ab2:	4613      	mov	r3, r2
 8001ab4:	00db      	lsls	r3, r3, #3
 8001ab6:	4413      	add	r3, r2
 8001ab8:	009b      	lsls	r3, r3, #2
 8001aba:	440b      	add	r3, r1
 8001abc:	f503 7352 	add.w	r3, r3, #840	@ 0x348
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f003 0303 	and.w	r3, r3, #3
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d122      	bne.n	8001b10 <Game_Tick+0x7b0>
								&& !(g->enemies[i].x % 8 == 0))
 8001aca:	7dfa      	ldrb	r2, [r7, #23]
 8001acc:	6879      	ldr	r1, [r7, #4]
 8001ace:	4613      	mov	r3, r2
 8001ad0:	00db      	lsls	r3, r3, #3
 8001ad2:	4413      	add	r3, r2
 8001ad4:	009b      	lsls	r3, r3, #2
 8001ad6:	440b      	add	r3, r1
 8001ad8:	f503 7352 	add.w	r3, r3, #840	@ 0x348
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f003 0307 	and.w	r3, r3, #7
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d014      	beq.n	8001b10 <Game_Tick+0x7b0>
							g->enemies[i].y -= 4;
 8001ae6:	7dfa      	ldrb	r2, [r7, #23]
 8001ae8:	6879      	ldr	r1, [r7, #4]
 8001aea:	4613      	mov	r3, r2
 8001aec:	00db      	lsls	r3, r3, #3
 8001aee:	4413      	add	r3, r2
 8001af0:	009b      	lsls	r3, r3, #2
 8001af2:	440b      	add	r3, r1
 8001af4:	f503 7353 	add.w	r3, r3, #844	@ 0x34c
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	7dfa      	ldrb	r2, [r7, #23]
 8001afc:	1f19      	subs	r1, r3, #4
 8001afe:	6878      	ldr	r0, [r7, #4]
 8001b00:	4613      	mov	r3, r2
 8001b02:	00db      	lsls	r3, r3, #3
 8001b04:	4413      	add	r3, r2
 8001b06:	009b      	lsls	r3, r3, #2
 8001b08:	4403      	add	r3, r0
 8001b0a:	f503 7353 	add.w	r3, r3, #844	@ 0x34c
 8001b0e:	6019      	str	r1, [r3, #0]
						if (g->enemies[i].x < 70) {
 8001b10:	7dfa      	ldrb	r2, [r7, #23]
 8001b12:	6879      	ldr	r1, [r7, #4]
 8001b14:	4613      	mov	r3, r2
 8001b16:	00db      	lsls	r3, r3, #3
 8001b18:	4413      	add	r3, r2
 8001b1a:	009b      	lsls	r3, r3, #2
 8001b1c:	440b      	add	r3, r1
 8001b1e:	f503 7352 	add.w	r3, r3, #840	@ 0x348
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	2b45      	cmp	r3, #69	@ 0x45
 8001b26:	dc51      	bgt.n	8001bcc <Game_Tick+0x86c>
							if (g->player.y > g->enemies[i].y)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6859      	ldr	r1, [r3, #4]
 8001b2c:	7dfa      	ldrb	r2, [r7, #23]
 8001b2e:	6878      	ldr	r0, [r7, #4]
 8001b30:	4613      	mov	r3, r2
 8001b32:	00db      	lsls	r3, r3, #3
 8001b34:	4413      	add	r3, r2
 8001b36:	009b      	lsls	r3, r3, #2
 8001b38:	4403      	add	r3, r0
 8001b3a:	f503 7353 	add.w	r3, r3, #844	@ 0x34c
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4299      	cmp	r1, r3
 8001b42:	dd14      	ble.n	8001b6e <Game_Tick+0x80e>
								g->enemies[i].y += 1;
 8001b44:	7dfa      	ldrb	r2, [r7, #23]
 8001b46:	6879      	ldr	r1, [r7, #4]
 8001b48:	4613      	mov	r3, r2
 8001b4a:	00db      	lsls	r3, r3, #3
 8001b4c:	4413      	add	r3, r2
 8001b4e:	009b      	lsls	r3, r3, #2
 8001b50:	440b      	add	r3, r1
 8001b52:	f503 7353 	add.w	r3, r3, #844	@ 0x34c
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	7dfa      	ldrb	r2, [r7, #23]
 8001b5a:	1c59      	adds	r1, r3, #1
 8001b5c:	6878      	ldr	r0, [r7, #4]
 8001b5e:	4613      	mov	r3, r2
 8001b60:	00db      	lsls	r3, r3, #3
 8001b62:	4413      	add	r3, r2
 8001b64:	009b      	lsls	r3, r3, #2
 8001b66:	4403      	add	r3, r0
 8001b68:	f503 7353 	add.w	r3, r3, #844	@ 0x34c
 8001b6c:	6019      	str	r1, [r3, #0]
							if (g->player.y < g->enemies[i].y)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6859      	ldr	r1, [r3, #4]
 8001b72:	7dfa      	ldrb	r2, [r7, #23]
 8001b74:	6878      	ldr	r0, [r7, #4]
 8001b76:	4613      	mov	r3, r2
 8001b78:	00db      	lsls	r3, r3, #3
 8001b7a:	4413      	add	r3, r2
 8001b7c:	009b      	lsls	r3, r3, #2
 8001b7e:	4403      	add	r3, r0
 8001b80:	f503 7353 	add.w	r3, r3, #844	@ 0x34c
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4299      	cmp	r1, r3
 8001b88:	da20      	bge.n	8001bcc <Game_Tick+0x86c>
								g->enemies[i].y -= 1;
 8001b8a:	7dfa      	ldrb	r2, [r7, #23]
 8001b8c:	6879      	ldr	r1, [r7, #4]
 8001b8e:	4613      	mov	r3, r2
 8001b90:	00db      	lsls	r3, r3, #3
 8001b92:	4413      	add	r3, r2
 8001b94:	009b      	lsls	r3, r3, #2
 8001b96:	440b      	add	r3, r1
 8001b98:	f503 7353 	add.w	r3, r3, #844	@ 0x34c
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	7dfa      	ldrb	r2, [r7, #23]
 8001ba0:	1e59      	subs	r1, r3, #1
 8001ba2:	6878      	ldr	r0, [r7, #4]
 8001ba4:	4613      	mov	r3, r2
 8001ba6:	00db      	lsls	r3, r3, #3
 8001ba8:	4413      	add	r3, r2
 8001baa:	009b      	lsls	r3, r3, #2
 8001bac:	4403      	add	r3, r0
 8001bae:	f503 7353 	add.w	r3, r3, #844	@ 0x34c
 8001bb2:	6019      	str	r1, [r3, #0]
						}
						break;
 8001bb4:	e00a      	b.n	8001bcc <Game_Tick+0x86c>
						break;
 8001bb6:	bf00      	nop
 8001bb8:	e009      	b.n	8001bce <Game_Tick+0x86e>
						break;
 8001bba:	bf00      	nop
 8001bbc:	e007      	b.n	8001bce <Game_Tick+0x86e>
 8001bbe:	bf00      	nop
 8001bc0:	08009b30 	.word	0x08009b30
 8001bc4:	08009af8 	.word	0x08009af8
 8001bc8:	08009930 	.word	0x08009930
						break;
 8001bcc:	bf00      	nop
					}

					// If off-screen, deactivation
					if (g->enemies[i].x < -4) {
 8001bce:	7dfa      	ldrb	r2, [r7, #23]
 8001bd0:	6879      	ldr	r1, [r7, #4]
 8001bd2:	4613      	mov	r3, r2
 8001bd4:	00db      	lsls	r3, r3, #3
 8001bd6:	4413      	add	r3, r2
 8001bd8:	009b      	lsls	r3, r3, #2
 8001bda:	440b      	add	r3, r1
 8001bdc:	f503 7352 	add.w	r3, r3, #840	@ 0x348
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f113 0f04 	cmn.w	r3, #4
 8001be6:	da20      	bge.n	8001c2a <Game_Tick+0x8ca>
						g->enemies[i].active = false;
 8001be8:	7dfa      	ldrb	r2, [r7, #23]
 8001bea:	6879      	ldr	r1, [r7, #4]
 8001bec:	4613      	mov	r3, r2
 8001bee:	00db      	lsls	r3, r3, #3
 8001bf0:	4413      	add	r3, r2
 8001bf2:	009b      	lsls	r3, r3, #2
 8001bf4:	440b      	add	r3, r1
 8001bf6:	f503 7351 	add.w	r3, r3, #836	@ 0x344
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	701a      	strb	r2, [r3, #0]
						g->enemies[i].tracked_by_missile = false;
 8001bfe:	7dfa      	ldrb	r2, [r7, #23]
 8001c00:	6879      	ldr	r1, [r7, #4]
 8001c02:	4613      	mov	r3, r2
 8001c04:	00db      	lsls	r3, r3, #3
 8001c06:	4413      	add	r3, r2
 8001c08:	009b      	lsls	r3, r3, #2
 8001c0a:	440b      	add	r3, r1
 8001c0c:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8001c10:	2200      	movs	r2, #0
 8001c12:	701a      	strb	r2, [r3, #0]
						g->enemies[i].track_number = 0;
 8001c14:	7dfa      	ldrb	r2, [r7, #23]
 8001c16:	6879      	ldr	r1, [r7, #4]
 8001c18:	4613      	mov	r3, r2
 8001c1a:	00db      	lsls	r3, r3, #3
 8001c1c:	4413      	add	r3, r2
 8001c1e:	009b      	lsls	r3, r3, #2
 8001c20:	440b      	add	r3, r1
 8001c22:	f503 7359 	add.w	r3, r3, #868	@ 0x364
 8001c26:	2200      	movs	r2, #0
 8001c28:	601a      	str	r2, [r3, #0]
	for (i = 0; i < num_enemies; ++i) {
 8001c2a:	7dfb      	ldrb	r3, [r7, #23]
 8001c2c:	3301      	adds	r3, #1
 8001c2e:	75fb      	strb	r3, [r7, #23]
 8001c30:	7dfb      	ldrb	r3, [r7, #23]
 8001c32:	2b09      	cmp	r3, #9
 8001c34:	f67f ad57 	bls.w	80016e6 <Game_Tick+0x386>
			}
		}
	}

	//------------- Boss service ---------------
	if (g->boss.active) {
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c3e:	f893 3834 	ldrb.w	r3, [r3, #2100]	@ 0x834
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	f000 8284 	beq.w	8002150 <Game_Tick+0xdf0>
		g->boss.next_update -= 1;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c4e:	f8d3 3840 	ldr.w	r3, [r3, #2112]	@ 0x840
 8001c52:	3b01      	subs	r3, #1
 8001c54:	687a      	ldr	r2, [r7, #4]
 8001c56:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001c5a:	f8c2 3840 	str.w	r3, [r2, #2112]	@ 0x840

		//Boss position
		if (g->boss.next_update <= 0) {
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c64:	f8d3 3840 	ldr.w	r3, [r3, #2112]	@ 0x840
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	dc5c      	bgt.n	8001d26 <Game_Tick+0x9c6>
			g->boss.next_update = g->boss.update_delay;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c72:	f8d3 3844 	ldr.w	r3, [r3, #2116]	@ 0x844
 8001c76:	687a      	ldr	r2, [r7, #4]
 8001c78:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001c7c:	f8c2 3840 	str.w	r3, [r2, #2112]	@ 0x840

			y += dy;
 8001c80:	4b57      	ldr	r3, [pc, #348]	@ (8001de0 <Game_Tick+0xa80>)
 8001c82:	781a      	ldrb	r2, [r3, #0]
 8001c84:	4b57      	ldr	r3, [pc, #348]	@ (8001de4 <Game_Tick+0xa84>)
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	4413      	add	r3, r2
 8001c8a:	b2da      	uxtb	r2, r3
 8001c8c:	4b54      	ldr	r3, [pc, #336]	@ (8001de0 <Game_Tick+0xa80>)
 8001c8e:	701a      	strb	r2, [r3, #0]
			if (y < 1 || y > (screen_height - 24))
 8001c90:	4b53      	ldr	r3, [pc, #332]	@ (8001de0 <Game_Tick+0xa80>)
 8001c92:	781b      	ldrb	r3, [r3, #0]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d003      	beq.n	8001ca0 <Game_Tick+0x940>
 8001c98:	4b51      	ldr	r3, [pc, #324]	@ (8001de0 <Game_Tick+0xa80>)
 8001c9a:	781b      	ldrb	r3, [r3, #0]
 8001c9c:	2b68      	cmp	r3, #104	@ 0x68
 8001c9e:	d905      	bls.n	8001cac <Game_Tick+0x94c>
				dy = -dy;
 8001ca0:	4b50      	ldr	r3, [pc, #320]	@ (8001de4 <Game_Tick+0xa84>)
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	425b      	negs	r3, r3
 8001ca6:	b2da      	uxtb	r2, r3
 8001ca8:	4b4e      	ldr	r3, [pc, #312]	@ (8001de4 <Game_Tick+0xa84>)
 8001caa:	701a      	strb	r2, [r3, #0]

			g->boss.y = y;
 8001cac:	4b4c      	ldr	r3, [pc, #304]	@ (8001de0 <Game_Tick+0xa80>)
 8001cae:	781b      	ldrb	r3, [r3, #0]
 8001cb0:	461a      	mov	r2, r3
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001cb8:	f8c3 283c 	str.w	r2, [r3, #2108]	@ 0x83c

			if (g->boss.y < 10)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001cc2:	f8d3 383c 	ldr.w	r3, [r3, #2108]	@ 0x83c
 8001cc6:	2b09      	cmp	r3, #9
 8001cc8:	dc06      	bgt.n	8001cd8 <Game_Tick+0x978>
				g->boss.y = 10;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001cd0:	461a      	mov	r2, r3
 8001cd2:	230a      	movs	r3, #10
 8001cd4:	f8c2 383c 	str.w	r3, [r2, #2108]	@ 0x83c
			if (g->boss.y > (screen_height - 24))
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001cde:	f8d3 383c 	ldr.w	r3, [r3, #2108]	@ 0x83c
 8001ce2:	2b68      	cmp	r3, #104	@ 0x68
 8001ce4:	dd06      	ble.n	8001cf4 <Game_Tick+0x994>
				g->boss.y = (screen_height - 24);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001cec:	461a      	mov	r2, r3
 8001cee:	2368      	movs	r3, #104	@ 0x68
 8001cf0:	f8c2 383c 	str.w	r3, [r2, #2108]	@ 0x83c

			g->boss.x -= 1;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001cfa:	f8d3 3838 	ldr.w	r3, [r3, #2104]	@ 0x838
 8001cfe:	3b01      	subs	r3, #1
 8001d00:	687a      	ldr	r2, [r7, #4]
 8001d02:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001d06:	f8c2 3838 	str.w	r3, [r2, #2104]	@ 0x838
			if (g->boss.x < 100)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d10:	f8d3 3838 	ldr.w	r3, [r3, #2104]	@ 0x838
 8001d14:	2b63      	cmp	r3, #99	@ 0x63
 8001d16:	dc06      	bgt.n	8001d26 <Game_Tick+0x9c6>
				g->boss.x = 100;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d1e:	461a      	mov	r2, r3
 8001d20:	2364      	movs	r3, #100	@ 0x64
 8001d22:	f8c2 3838 	str.w	r3, [r2, #2104]	@ 0x838
		}

		//Frequency of boss shots
		if ((rand() % 100) < (g->boss.level * 2))
 8001d26:	f005 fc0f 	bl	8007548 <rand>
 8001d2a:	4602      	mov	r2, r0
 8001d2c:	4b2e      	ldr	r3, [pc, #184]	@ (8001de8 <Game_Tick+0xa88>)
 8001d2e:	fb83 1302 	smull	r1, r3, r3, r2
 8001d32:	1159      	asrs	r1, r3, #5
 8001d34:	17d3      	asrs	r3, r2, #31
 8001d36:	1acb      	subs	r3, r1, r3
 8001d38:	2164      	movs	r1, #100	@ 0x64
 8001d3a:	fb01 f303 	mul.w	r3, r1, r3
 8001d3e:	1ad3      	subs	r3, r2, r3
 8001d40:	687a      	ldr	r2, [r7, #4]
 8001d42:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001d46:	f8d2 284c 	ldr.w	r2, [r2, #2124]	@ 0x84c
 8001d4a:	0052      	lsls	r2, r2, #1
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	da02      	bge.n	8001d56 <Game_Tick+0x9f6>
			Game_Shot_Boss(g);//boss_shoot();
 8001d50:	6878      	ldr	r0, [r7, #4]
 8001d52:	f001 fa9f 	bl	8003294 <Game_Shot_Boss>

		for (i = 0; i < num_boss_shots; ++i) {
 8001d56:	2300      	movs	r3, #0
 8001d58:	75fb      	strb	r3, [r7, #23]
 8001d5a:	e03a      	b.n	8001dd2 <Game_Tick+0xa72>
			if (g->boss_shots[i].active)
 8001d5c:	7dfa      	ldrb	r2, [r7, #23]
 8001d5e:	6879      	ldr	r1, [r7, #4]
 8001d60:	4613      	mov	r3, r2
 8001d62:	009b      	lsls	r3, r3, #2
 8001d64:	4413      	add	r3, r2
 8001d66:	009b      	lsls	r3, r3, #2
 8001d68:	440b      	add	r3, r1
 8001d6a:	f503 7338 	add.w	r3, r3, #736	@ 0x2e0
 8001d6e:	781b      	ldrb	r3, [r3, #0]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d013      	beq.n	8001d9c <Game_Tick+0xa3c>
				--g->boss_shots[i].x;
 8001d74:	7dfa      	ldrb	r2, [r7, #23]
 8001d76:	6879      	ldr	r1, [r7, #4]
 8001d78:	4613      	mov	r3, r2
 8001d7a:	009b      	lsls	r3, r3, #2
 8001d7c:	4413      	add	r3, r2
 8001d7e:	009b      	lsls	r3, r3, #2
 8001d80:	440b      	add	r3, r1
 8001d82:	f503 7339 	add.w	r3, r3, #740	@ 0x2e4
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	1e59      	subs	r1, r3, #1
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	4613      	mov	r3, r2
 8001d8e:	009b      	lsls	r3, r3, #2
 8001d90:	4413      	add	r3, r2
 8001d92:	009b      	lsls	r3, r3, #2
 8001d94:	4403      	add	r3, r0
 8001d96:	f503 7339 	add.w	r3, r3, #740	@ 0x2e4
 8001d9a:	6019      	str	r1, [r3, #0]
			if (g->boss_shots[i].x < -4)
 8001d9c:	7dfa      	ldrb	r2, [r7, #23]
 8001d9e:	6879      	ldr	r1, [r7, #4]
 8001da0:	4613      	mov	r3, r2
 8001da2:	009b      	lsls	r3, r3, #2
 8001da4:	4413      	add	r3, r2
 8001da6:	009b      	lsls	r3, r3, #2
 8001da8:	440b      	add	r3, r1
 8001daa:	f503 7339 	add.w	r3, r3, #740	@ 0x2e4
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f113 0f04 	cmn.w	r3, #4
 8001db4:	da0a      	bge.n	8001dcc <Game_Tick+0xa6c>
				g->boss_shots[i].active = false;
 8001db6:	7dfa      	ldrb	r2, [r7, #23]
 8001db8:	6879      	ldr	r1, [r7, #4]
 8001dba:	4613      	mov	r3, r2
 8001dbc:	009b      	lsls	r3, r3, #2
 8001dbe:	4413      	add	r3, r2
 8001dc0:	009b      	lsls	r3, r3, #2
 8001dc2:	440b      	add	r3, r1
 8001dc4:	f503 7338 	add.w	r3, r3, #736	@ 0x2e0
 8001dc8:	2200      	movs	r2, #0
 8001dca:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < num_boss_shots; ++i) {
 8001dcc:	7dfb      	ldrb	r3, [r7, #23]
 8001dce:	3301      	adds	r3, #1
 8001dd0:	75fb      	strb	r3, [r7, #23]
 8001dd2:	7dfb      	ldrb	r3, [r7, #23]
 8001dd4:	2b04      	cmp	r3, #4
 8001dd6:	d9c1      	bls.n	8001d5c <Game_Tick+0x9fc>
		}

		for (i = 0; i < num_boss_shots; i++) {
 8001dd8:	2300      	movs	r3, #0
 8001dda:	75fb      	strb	r3, [r7, #23]
 8001ddc:	e0e4      	b.n	8001fa8 <Game_Tick+0xc48>
 8001dde:	bf00      	nop
 8001de0:	20001940 	.word	0x20001940
 8001de4:	20000000 	.word	0x20000000
 8001de8:	51eb851f 	.word	0x51eb851f
			if (g->boss_shots[i].active) {
 8001dec:	7dfa      	ldrb	r2, [r7, #23]
 8001dee:	6879      	ldr	r1, [r7, #4]
 8001df0:	4613      	mov	r3, r2
 8001df2:	009b      	lsls	r3, r3, #2
 8001df4:	4413      	add	r3, r2
 8001df6:	009b      	lsls	r3, r3, #2
 8001df8:	440b      	add	r3, r1
 8001dfa:	f503 7338 	add.w	r3, r3, #736	@ 0x2e0
 8001dfe:	781b      	ldrb	r3, [r3, #0]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	f000 80ce 	beq.w	8001fa2 <Game_Tick+0xc42>
				if (colliding(g->boss_shots[i].x, g->boss_shots[i].y,
 8001e06:	7dfa      	ldrb	r2, [r7, #23]
 8001e08:	6879      	ldr	r1, [r7, #4]
 8001e0a:	4613      	mov	r3, r2
 8001e0c:	009b      	lsls	r3, r3, #2
 8001e0e:	4413      	add	r3, r2
 8001e10:	009b      	lsls	r3, r3, #2
 8001e12:	440b      	add	r3, r1
 8001e14:	f503 7339 	add.w	r3, r3, #740	@ 0x2e4
 8001e18:	6818      	ldr	r0, [r3, #0]
 8001e1a:	7dfa      	ldrb	r2, [r7, #23]
 8001e1c:	6879      	ldr	r1, [r7, #4]
 8001e1e:	4613      	mov	r3, r2
 8001e20:	009b      	lsls	r3, r3, #2
 8001e22:	4413      	add	r3, r2
 8001e24:	009b      	lsls	r3, r3, #2
 8001e26:	440b      	add	r3, r1
 8001e28:	f503 733a 	add.w	r3, r3, #744	@ 0x2e8
 8001e2c:	6819      	ldr	r1, [r3, #0]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681a      	ldr	r2, [r3, #0]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	f001 fa79 	bl	800332c <colliding>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d15a      	bne.n	8001ef6 <Game_Tick+0xb96>
						g->player.x, g->player.y)
						|| colliding(g->boss_shots[i].x, g->boss_shots[i].y,
 8001e40:	7dfa      	ldrb	r2, [r7, #23]
 8001e42:	6879      	ldr	r1, [r7, #4]
 8001e44:	4613      	mov	r3, r2
 8001e46:	009b      	lsls	r3, r3, #2
 8001e48:	4413      	add	r3, r2
 8001e4a:	009b      	lsls	r3, r3, #2
 8001e4c:	440b      	add	r3, r1
 8001e4e:	f503 7339 	add.w	r3, r3, #740	@ 0x2e4
 8001e52:	6818      	ldr	r0, [r3, #0]
 8001e54:	7dfa      	ldrb	r2, [r7, #23]
 8001e56:	6879      	ldr	r1, [r7, #4]
 8001e58:	4613      	mov	r3, r2
 8001e5a:	009b      	lsls	r3, r3, #2
 8001e5c:	4413      	add	r3, r2
 8001e5e:	009b      	lsls	r3, r3, #2
 8001e60:	440b      	add	r3, r1
 8001e62:	f503 733a 	add.w	r3, r3, #744	@ 0x2e8
 8001e66:	6819      	ldr	r1, [r3, #0]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681a      	ldr	r2, [r3, #0]
								g->player.x, g->player.y + 5)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	685b      	ldr	r3, [r3, #4]
						|| colliding(g->boss_shots[i].x, g->boss_shots[i].y,
 8001e70:	3305      	adds	r3, #5
 8001e72:	f001 fa5b 	bl	800332c <colliding>
 8001e76:	4603      	mov	r3, r0
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d13c      	bne.n	8001ef6 <Game_Tick+0xb96>
						|| colliding(g->boss_shots[i].x, g->boss_shots[i].y,
 8001e7c:	7dfa      	ldrb	r2, [r7, #23]
 8001e7e:	6879      	ldr	r1, [r7, #4]
 8001e80:	4613      	mov	r3, r2
 8001e82:	009b      	lsls	r3, r3, #2
 8001e84:	4413      	add	r3, r2
 8001e86:	009b      	lsls	r3, r3, #2
 8001e88:	440b      	add	r3, r1
 8001e8a:	f503 7339 	add.w	r3, r3, #740	@ 0x2e4
 8001e8e:	6818      	ldr	r0, [r3, #0]
 8001e90:	7dfa      	ldrb	r2, [r7, #23]
 8001e92:	6879      	ldr	r1, [r7, #4]
 8001e94:	4613      	mov	r3, r2
 8001e96:	009b      	lsls	r3, r3, #2
 8001e98:	4413      	add	r3, r2
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	440b      	add	r3, r1
 8001e9e:	f503 733a 	add.w	r3, r3, #744	@ 0x2e8
 8001ea2:	6819      	ldr	r1, [r3, #0]
								g->player.x + 7, g->player.y)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
						|| colliding(g->boss_shots[i].x, g->boss_shots[i].y,
 8001ea8:	1dda      	adds	r2, r3, #7
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	f001 fa3d 	bl	800332c <colliding>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d11e      	bne.n	8001ef6 <Game_Tick+0xb96>
						|| colliding(g->boss_shots[i].x, g->boss_shots[i].y,
 8001eb8:	7dfa      	ldrb	r2, [r7, #23]
 8001eba:	6879      	ldr	r1, [r7, #4]
 8001ebc:	4613      	mov	r3, r2
 8001ebe:	009b      	lsls	r3, r3, #2
 8001ec0:	4413      	add	r3, r2
 8001ec2:	009b      	lsls	r3, r3, #2
 8001ec4:	440b      	add	r3, r1
 8001ec6:	f503 7339 	add.w	r3, r3, #740	@ 0x2e4
 8001eca:	6818      	ldr	r0, [r3, #0]
 8001ecc:	7dfa      	ldrb	r2, [r7, #23]
 8001ece:	6879      	ldr	r1, [r7, #4]
 8001ed0:	4613      	mov	r3, r2
 8001ed2:	009b      	lsls	r3, r3, #2
 8001ed4:	4413      	add	r3, r2
 8001ed6:	009b      	lsls	r3, r3, #2
 8001ed8:	440b      	add	r3, r1
 8001eda:	f503 733a 	add.w	r3, r3, #744	@ 0x2e8
 8001ede:	6819      	ldr	r1, [r3, #0]
								g->player.x + 7, g->player.y + 5)) {
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
						|| colliding(g->boss_shots[i].x, g->boss_shots[i].y,
 8001ee4:	1dda      	adds	r2, r3, #7
								g->player.x + 7, g->player.y + 5)) {
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	685b      	ldr	r3, [r3, #4]
						|| colliding(g->boss_shots[i].x, g->boss_shots[i].y,
 8001eea:	3305      	adds	r3, #5
 8001eec:	f001 fa1e 	bl	800332c <colliding>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d055      	beq.n	8001fa2 <Game_Tick+0xc42>
					g->player.lives -= 1;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	691b      	ldr	r3, [r3, #16]
 8001efa:	1e5a      	subs	r2, r3, #1
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	611a      	str	r2, [r3, #16]
					;
					g->boss_shots[i].active = false;
 8001f00:	7dfa      	ldrb	r2, [r7, #23]
 8001f02:	6879      	ldr	r1, [r7, #4]
 8001f04:	4613      	mov	r3, r2
 8001f06:	009b      	lsls	r3, r3, #2
 8001f08:	4413      	add	r3, r2
 8001f0a:	009b      	lsls	r3, r3, #2
 8001f0c:	440b      	add	r3, r1
 8001f0e:	f503 7338 	add.w	r3, r3, #736	@ 0x2e0
 8001f12:	2200      	movs	r2, #0
 8001f14:	701a      	strb	r2, [r3, #0]
					GFX_DrowBitMap_P(g->boss_shots[i].x + 2, g->boss_shots[i].y,
 8001f16:	7dfa      	ldrb	r2, [r7, #23]
 8001f18:	6879      	ldr	r1, [r7, #4]
 8001f1a:	4613      	mov	r3, r2
 8001f1c:	009b      	lsls	r3, r3, #2
 8001f1e:	4413      	add	r3, r2
 8001f20:	009b      	lsls	r3, r3, #2
 8001f22:	440b      	add	r3, r1
 8001f24:	f503 7339 	add.w	r3, r3, #740	@ 0x2e4
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	1c98      	adds	r0, r3, #2
 8001f2c:	7dfa      	ldrb	r2, [r7, #23]
 8001f2e:	6879      	ldr	r1, [r7, #4]
 8001f30:	4613      	mov	r3, r2
 8001f32:	009b      	lsls	r3, r3, #2
 8001f34:	4413      	add	r3, r2
 8001f36:	009b      	lsls	r3, r3, #2
 8001f38:	440b      	add	r3, r1
 8001f3a:	f503 733a 	add.w	r3, r3, #744	@ 0x2e8
 8001f3e:	6819      	ldr	r1, [r3, #0]
 8001f40:	2301      	movs	r3, #1
 8001f42:	9301      	str	r3, [sp, #4]
 8001f44:	230a      	movs	r3, #10
 8001f46:	9300      	str	r3, [sp, #0]
 8001f48:	230a      	movs	r3, #10
 8001f4a:	4aab      	ldr	r2, [pc, #684]	@ (80021f8 <Game_Tick+0xe98>)
 8001f4c:	f7fe ff2e 	bl	8000dac <GFX_DrowBitMap_P>
							explosion_map, 10, 10, 1);
					GFX_DrowBitMap_P(g->player.x + 8, g->player.y - 2,
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f103 0008 	add.w	r0, r3, #8
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	1e99      	subs	r1, r3, #2
 8001f5e:	2301      	movs	r3, #1
 8001f60:	9301      	str	r3, [sp, #4]
 8001f62:	2310      	movs	r3, #16
 8001f64:	9300      	str	r3, [sp, #0]
 8001f66:	230a      	movs	r3, #10
 8001f68:	4aa4      	ldr	r2, [pc, #656]	@ (80021fc <Game_Tick+0xe9c>)
 8001f6a:	f7fe ff1f 	bl	8000dac <GFX_DrowBitMap_P>
							player_shield_map, 10, 16, 1);
					GFX_DrowBitMap_P(g->player.x, g->player.y, player_map, 11,
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6818      	ldr	r0, [r3, #0]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6859      	ldr	r1, [r3, #4]
 8001f76:	2301      	movs	r3, #1
 8001f78:	9301      	str	r3, [sp, #4]
 8001f7a:	230b      	movs	r3, #11
 8001f7c:	9300      	str	r3, [sp, #0]
 8001f7e:	230b      	movs	r3, #11
 8001f80:	4a9f      	ldr	r2, [pc, #636]	@ (8002200 <Game_Tick+0xea0>)
 8001f82:	f7fe ff13 	bl	8000dac <GFX_DrowBitMap_P>
							11, 1);

					ssd1327_display();
 8001f86:	f001 ff71 	bl	8003e6c <ssd1327_display>
					if (g->player.lives <= 0) {
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	691b      	ldr	r3, [r3, #16]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	dc07      	bgt.n	8001fa2 <Game_Tick+0xc42>
						play_dead_anim();
 8001f92:	f001 fdc9 	bl	8003b28 <play_dead_anim>
						g->state = st_dead;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f9c:	2202      	movs	r2, #2
 8001f9e:	f883 28a4 	strb.w	r2, [r3, #2212]	@ 0x8a4
		for (i = 0; i < num_boss_shots; i++) {
 8001fa2:	7dfb      	ldrb	r3, [r7, #23]
 8001fa4:	3301      	adds	r3, #1
 8001fa6:	75fb      	strb	r3, [r7, #23]
 8001fa8:	7dfb      	ldrb	r3, [r7, #23]
 8001faa:	2b04      	cmp	r3, #4
 8001fac:	f67f af1e 	bls.w	8001dec <Game_Tick+0xa8c>
				}
			}
		}

		// Player's shots to the boss
		for (i = 0; i < num_shots; i++) {
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	75fb      	strb	r3, [r7, #23]
 8001fb4:	e0c8      	b.n	8002148 <Game_Tick+0xde8>
			if (g->shots[i].active) {
 8001fb6:	7dfa      	ldrb	r2, [r7, #23]
 8001fb8:	6879      	ldr	r1, [r7, #4]
 8001fba:	4613      	mov	r3, r2
 8001fbc:	009b      	lsls	r3, r3, #2
 8001fbe:	4413      	add	r3, r2
 8001fc0:	009b      	lsls	r3, r3, #2
 8001fc2:	440b      	add	r3, r1
 8001fc4:	3324      	adds	r3, #36	@ 0x24
 8001fc6:	781b      	ldrb	r3, [r3, #0]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	f000 80ba 	beq.w	8002142 <Game_Tick+0xde2>
				if (colliding(g->boss.x, g->boss.y, g->shots[i].x,
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001fd4:	f8d3 0838 	ldr.w	r0, [r3, #2104]	@ 0x838
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001fde:	f8d3 483c 	ldr.w	r4, [r3, #2108]	@ 0x83c
 8001fe2:	7dfa      	ldrb	r2, [r7, #23]
 8001fe4:	6879      	ldr	r1, [r7, #4]
 8001fe6:	4613      	mov	r3, r2
 8001fe8:	009b      	lsls	r3, r3, #2
 8001fea:	4413      	add	r3, r2
 8001fec:	009b      	lsls	r3, r3, #2
 8001fee:	440b      	add	r3, r1
 8001ff0:	3328      	adds	r3, #40	@ 0x28
 8001ff2:	681d      	ldr	r5, [r3, #0]
 8001ff4:	7dfa      	ldrb	r2, [r7, #23]
 8001ff6:	6879      	ldr	r1, [r7, #4]
 8001ff8:	4613      	mov	r3, r2
 8001ffa:	009b      	lsls	r3, r3, #2
 8001ffc:	4413      	add	r3, r2
 8001ffe:	009b      	lsls	r3, r3, #2
 8002000:	440b      	add	r3, r1
 8002002:	332c      	adds	r3, #44	@ 0x2c
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	462a      	mov	r2, r5
 8002008:	4621      	mov	r1, r4
 800200a:	f001 f98f 	bl	800332c <colliding>
 800200e:	4603      	mov	r3, r0
 8002010:	2b00      	cmp	r3, #0
 8002012:	d148      	bne.n	80020a6 <Game_Tick+0xd46>
						g->shots[i].y)
						|| colliding(g->boss.x, g->boss.y + 6, g->shots[i].x,
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800201a:	f8d3 0838 	ldr.w	r0, [r3, #2104]	@ 0x838
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002024:	f8d3 383c 	ldr.w	r3, [r3, #2108]	@ 0x83c
 8002028:	1d9c      	adds	r4, r3, #6
 800202a:	7dfa      	ldrb	r2, [r7, #23]
 800202c:	6879      	ldr	r1, [r7, #4]
 800202e:	4613      	mov	r3, r2
 8002030:	009b      	lsls	r3, r3, #2
 8002032:	4413      	add	r3, r2
 8002034:	009b      	lsls	r3, r3, #2
 8002036:	440b      	add	r3, r1
 8002038:	3328      	adds	r3, #40	@ 0x28
 800203a:	681d      	ldr	r5, [r3, #0]
 800203c:	7dfa      	ldrb	r2, [r7, #23]
 800203e:	6879      	ldr	r1, [r7, #4]
 8002040:	4613      	mov	r3, r2
 8002042:	009b      	lsls	r3, r3, #2
 8002044:	4413      	add	r3, r2
 8002046:	009b      	lsls	r3, r3, #2
 8002048:	440b      	add	r3, r1
 800204a:	332c      	adds	r3, #44	@ 0x2c
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	462a      	mov	r2, r5
 8002050:	4621      	mov	r1, r4
 8002052:	f001 f96b 	bl	800332c <colliding>
 8002056:	4603      	mov	r3, r0
 8002058:	2b00      	cmp	r3, #0
 800205a:	d124      	bne.n	80020a6 <Game_Tick+0xd46>
								g->shots[i].y)
						|| colliding(g->boss.x, g->boss.y + 12, g->shots[i].x,
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002062:	f8d3 0838 	ldr.w	r0, [r3, #2104]	@ 0x838
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800206c:	f8d3 383c 	ldr.w	r3, [r3, #2108]	@ 0x83c
 8002070:	f103 040c 	add.w	r4, r3, #12
 8002074:	7dfa      	ldrb	r2, [r7, #23]
 8002076:	6879      	ldr	r1, [r7, #4]
 8002078:	4613      	mov	r3, r2
 800207a:	009b      	lsls	r3, r3, #2
 800207c:	4413      	add	r3, r2
 800207e:	009b      	lsls	r3, r3, #2
 8002080:	440b      	add	r3, r1
 8002082:	3328      	adds	r3, #40	@ 0x28
 8002084:	681d      	ldr	r5, [r3, #0]
 8002086:	7dfa      	ldrb	r2, [r7, #23]
 8002088:	6879      	ldr	r1, [r7, #4]
 800208a:	4613      	mov	r3, r2
 800208c:	009b      	lsls	r3, r3, #2
 800208e:	4413      	add	r3, r2
 8002090:	009b      	lsls	r3, r3, #2
 8002092:	440b      	add	r3, r1
 8002094:	332c      	adds	r3, #44	@ 0x2c
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	462a      	mov	r2, r5
 800209a:	4621      	mov	r1, r4
 800209c:	f001 f946 	bl	800332c <colliding>
 80020a0:	4603      	mov	r3, r0
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d04d      	beq.n	8002142 <Game_Tick+0xde2>
								g->shots[i].y)) {
					g->boss.lives -= 1;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80020ac:	f8d3 3848 	ldr.w	r3, [r3, #2120]	@ 0x848
 80020b0:	3b01      	subs	r3, #1
 80020b2:	687a      	ldr	r2, [r7, #4]
 80020b4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80020b8:	f8c2 3848 	str.w	r3, [r2, #2120]	@ 0x848
					g->shots[i].active = false;
 80020bc:	7dfa      	ldrb	r2, [r7, #23]
 80020be:	6879      	ldr	r1, [r7, #4]
 80020c0:	4613      	mov	r3, r2
 80020c2:	009b      	lsls	r3, r3, #2
 80020c4:	4413      	add	r3, r2
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	440b      	add	r3, r1
 80020ca:	3324      	adds	r3, #36	@ 0x24
 80020cc:	2200      	movs	r2, #0
 80020ce:	701a      	strb	r2, [r3, #0]
					g->shots[i].track_number = 0;
 80020d0:	7dfa      	ldrb	r2, [r7, #23]
 80020d2:	6879      	ldr	r1, [r7, #4]
 80020d4:	4613      	mov	r3, r2
 80020d6:	009b      	lsls	r3, r3, #2
 80020d8:	4413      	add	r3, r2
 80020da:	009b      	lsls	r3, r3, #2
 80020dc:	440b      	add	r3, r1
 80020de:	3334      	adds	r3, #52	@ 0x34
 80020e0:	2200      	movs	r2, #0
 80020e2:	601a      	str	r2, [r3, #0]
					GFX_DrowBitMap_P(g->shots[i].x, g->shots[i].y,
 80020e4:	7dfa      	ldrb	r2, [r7, #23]
 80020e6:	6879      	ldr	r1, [r7, #4]
 80020e8:	4613      	mov	r3, r2
 80020ea:	009b      	lsls	r3, r3, #2
 80020ec:	4413      	add	r3, r2
 80020ee:	009b      	lsls	r3, r3, #2
 80020f0:	440b      	add	r3, r1
 80020f2:	3328      	adds	r3, #40	@ 0x28
 80020f4:	6818      	ldr	r0, [r3, #0]
 80020f6:	7dfa      	ldrb	r2, [r7, #23]
 80020f8:	6879      	ldr	r1, [r7, #4]
 80020fa:	4613      	mov	r3, r2
 80020fc:	009b      	lsls	r3, r3, #2
 80020fe:	4413      	add	r3, r2
 8002100:	009b      	lsls	r3, r3, #2
 8002102:	440b      	add	r3, r1
 8002104:	332c      	adds	r3, #44	@ 0x2c
 8002106:	6819      	ldr	r1, [r3, #0]
 8002108:	2301      	movs	r3, #1
 800210a:	9301      	str	r3, [sp, #4]
 800210c:	230a      	movs	r3, #10
 800210e:	9300      	str	r3, [sp, #0]
 8002110:	230a      	movs	r3, #10
 8002112:	4a39      	ldr	r2, [pc, #228]	@ (80021f8 <Game_Tick+0xe98>)
 8002114:	f7fe fe4a 	bl	8000dac <GFX_DrowBitMap_P>
							explosion_map, 10, 10, 1);

					if (g->boss.lives <= 0) {
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800211e:	f8d3 3848 	ldr.w	r3, [r3, #2120]	@ 0x848
 8002122:	2b00      	cmp	r3, #0
 8002124:	dc0d      	bgt.n	8002142 <Game_Tick+0xde2>
						g->boss.active = false;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800212c:	2200      	movs	r2, #0
 800212e:	f883 2834 	strb.w	r2, [r3, #2100]	@ 0x834
						g->boss.lives = 0;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002138:	461a      	mov	r2, r3
 800213a:	2300      	movs	r3, #0
 800213c:	f8c2 3848 	str.w	r3, [r2, #2120]	@ 0x848
						break;
 8002140:	e006      	b.n	8002150 <Game_Tick+0xdf0>
		for (i = 0; i < num_shots; i++) {
 8002142:	7dfb      	ldrb	r3, [r7, #23]
 8002144:	3301      	adds	r3, #1
 8002146:	75fb      	strb	r3, [r7, #23]
 8002148:	7dfb      	ldrb	r3, [r7, #23]
 800214a:	2b22      	cmp	r3, #34	@ 0x22
 800214c:	f67f af33 	bls.w	8001fb6 <Game_Tick+0xc56>
			}
		}
	}

	//Painting over and deactivating shots left over from the boss
	if (!g->boss.active) {
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002156:	f893 3834 	ldrb.w	r3, [r3, #2100]	@ 0x834
 800215a:	f083 0301 	eor.w	r3, r3, #1
 800215e:	b2db      	uxtb	r3, r3
 8002160:	2b00      	cmp	r3, #0
 8002162:	d03b      	beq.n	80021dc <Game_Tick+0xe7c>
		for (i = 0; i < num_boss_shots; i++) {
 8002164:	2300      	movs	r3, #0
 8002166:	75fb      	strb	r3, [r7, #23]
 8002168:	e035      	b.n	80021d6 <Game_Tick+0xe76>
			if (g->boss_shots[i].active) {
 800216a:	7dfa      	ldrb	r2, [r7, #23]
 800216c:	6879      	ldr	r1, [r7, #4]
 800216e:	4613      	mov	r3, r2
 8002170:	009b      	lsls	r3, r3, #2
 8002172:	4413      	add	r3, r2
 8002174:	009b      	lsls	r3, r3, #2
 8002176:	440b      	add	r3, r1
 8002178:	f503 7338 	add.w	r3, r3, #736	@ 0x2e0
 800217c:	781b      	ldrb	r3, [r3, #0]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d026      	beq.n	80021d0 <Game_Tick+0xe70>
				g->boss_shots[i].active = false;
 8002182:	7dfa      	ldrb	r2, [r7, #23]
 8002184:	6879      	ldr	r1, [r7, #4]
 8002186:	4613      	mov	r3, r2
 8002188:	009b      	lsls	r3, r3, #2
 800218a:	4413      	add	r3, r2
 800218c:	009b      	lsls	r3, r3, #2
 800218e:	440b      	add	r3, r1
 8002190:	f503 7338 	add.w	r3, r3, #736	@ 0x2e0
 8002194:	2200      	movs	r2, #0
 8002196:	701a      	strb	r2, [r3, #0]
				GFX_DrowBitMap_P(g->boss_shots[i].x, g->boss_shots[i].y,
 8002198:	7dfa      	ldrb	r2, [r7, #23]
 800219a:	6879      	ldr	r1, [r7, #4]
 800219c:	4613      	mov	r3, r2
 800219e:	009b      	lsls	r3, r3, #2
 80021a0:	4413      	add	r3, r2
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	440b      	add	r3, r1
 80021a6:	f503 7339 	add.w	r3, r3, #740	@ 0x2e4
 80021aa:	6818      	ldr	r0, [r3, #0]
 80021ac:	7dfa      	ldrb	r2, [r7, #23]
 80021ae:	6879      	ldr	r1, [r7, #4]
 80021b0:	4613      	mov	r3, r2
 80021b2:	009b      	lsls	r3, r3, #2
 80021b4:	4413      	add	r3, r2
 80021b6:	009b      	lsls	r3, r3, #2
 80021b8:	440b      	add	r3, r1
 80021ba:	f503 733a 	add.w	r3, r3, #744	@ 0x2e8
 80021be:	6819      	ldr	r1, [r3, #0]
 80021c0:	2300      	movs	r3, #0
 80021c2:	9301      	str	r3, [sp, #4]
 80021c4:	2301      	movs	r3, #1
 80021c6:	9300      	str	r3, [sp, #0]
 80021c8:	2304      	movs	r3, #4
 80021ca:	4a0e      	ldr	r2, [pc, #56]	@ (8002204 <Game_Tick+0xea4>)
 80021cc:	f7fe fdee 	bl	8000dac <GFX_DrowBitMap_P>
		for (i = 0; i < num_boss_shots; i++) {
 80021d0:	7dfb      	ldrb	r3, [r7, #23]
 80021d2:	3301      	adds	r3, #1
 80021d4:	75fb      	strb	r3, [r7, #23]
 80021d6:	7dfb      	ldrb	r3, [r7, #23]
 80021d8:	2b04      	cmp	r3, #4
 80021da:	d9c6      	bls.n	800216a <Game_Tick+0xe0a>
			}
		}
	}
	//-------------------------------------------

	if (button_pressed())
 80021dc:	f001 fd52 	bl	8003c84 <button_pressed>
 80021e0:	4603      	mov	r3, r0
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d002      	beq.n	80021ec <Game_Tick+0xe8c>
		Game_Shot(g);//shot();
 80021e6:	6878      	ldr	r0, [r7, #4]
 80021e8:	f000 ff2e 	bl	8003048 <Game_Shot>

	// Checking the collision of a player's shots with opponents. Adding Bonuses
	for (i = 0; i < num_shots; ++i) {
 80021ec:	2300      	movs	r3, #0
 80021ee:	75fb      	strb	r3, [r7, #23]
 80021f0:	e0ce      	b.n	8002390 <Game_Tick+0x1030>
		for (j = 0; j < num_enemies; ++j) {
 80021f2:	2300      	movs	r3, #0
 80021f4:	75bb      	strb	r3, [r7, #22]
 80021f6:	e0c4      	b.n	8002382 <Game_Tick+0x1022>
 80021f8:	08009b30 	.word	0x08009b30
 80021fc:	08009af8 	.word	0x08009af8
 8002200:	08009930 	.word	0x08009930
 8002204:	0800992c 	.word	0x0800992c
			if (g->shots[i].active && g->enemies[j].active) {
 8002208:	7dfa      	ldrb	r2, [r7, #23]
 800220a:	6879      	ldr	r1, [r7, #4]
 800220c:	4613      	mov	r3, r2
 800220e:	009b      	lsls	r3, r3, #2
 8002210:	4413      	add	r3, r2
 8002212:	009b      	lsls	r3, r3, #2
 8002214:	440b      	add	r3, r1
 8002216:	3324      	adds	r3, #36	@ 0x24
 8002218:	781b      	ldrb	r3, [r3, #0]
 800221a:	2b00      	cmp	r3, #0
 800221c:	f000 80ae 	beq.w	800237c <Game_Tick+0x101c>
 8002220:	7dba      	ldrb	r2, [r7, #22]
 8002222:	6879      	ldr	r1, [r7, #4]
 8002224:	4613      	mov	r3, r2
 8002226:	00db      	lsls	r3, r3, #3
 8002228:	4413      	add	r3, r2
 800222a:	009b      	lsls	r3, r3, #2
 800222c:	440b      	add	r3, r1
 800222e:	f503 7351 	add.w	r3, r3, #836	@ 0x344
 8002232:	781b      	ldrb	r3, [r3, #0]
 8002234:	2b00      	cmp	r3, #0
 8002236:	f000 80a1 	beq.w	800237c <Game_Tick+0x101c>
				if (colliding(g->enemies[j].x, g->enemies[j].y, g->shots[i].x,
 800223a:	7dba      	ldrb	r2, [r7, #22]
 800223c:	6879      	ldr	r1, [r7, #4]
 800223e:	4613      	mov	r3, r2
 8002240:	00db      	lsls	r3, r3, #3
 8002242:	4413      	add	r3, r2
 8002244:	009b      	lsls	r3, r3, #2
 8002246:	440b      	add	r3, r1
 8002248:	f503 7352 	add.w	r3, r3, #840	@ 0x348
 800224c:	6818      	ldr	r0, [r3, #0]
 800224e:	7dba      	ldrb	r2, [r7, #22]
 8002250:	6879      	ldr	r1, [r7, #4]
 8002252:	4613      	mov	r3, r2
 8002254:	00db      	lsls	r3, r3, #3
 8002256:	4413      	add	r3, r2
 8002258:	009b      	lsls	r3, r3, #2
 800225a:	440b      	add	r3, r1
 800225c:	f503 7353 	add.w	r3, r3, #844	@ 0x34c
 8002260:	681c      	ldr	r4, [r3, #0]
 8002262:	7dfa      	ldrb	r2, [r7, #23]
 8002264:	6879      	ldr	r1, [r7, #4]
 8002266:	4613      	mov	r3, r2
 8002268:	009b      	lsls	r3, r3, #2
 800226a:	4413      	add	r3, r2
 800226c:	009b      	lsls	r3, r3, #2
 800226e:	440b      	add	r3, r1
 8002270:	3328      	adds	r3, #40	@ 0x28
 8002272:	681d      	ldr	r5, [r3, #0]
 8002274:	7dfa      	ldrb	r2, [r7, #23]
 8002276:	6879      	ldr	r1, [r7, #4]
 8002278:	4613      	mov	r3, r2
 800227a:	009b      	lsls	r3, r3, #2
 800227c:	4413      	add	r3, r2
 800227e:	009b      	lsls	r3, r3, #2
 8002280:	440b      	add	r3, r1
 8002282:	332c      	adds	r3, #44	@ 0x2c
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	462a      	mov	r2, r5
 8002288:	4621      	mov	r1, r4
 800228a:	f001 f84f 	bl	800332c <colliding>
 800228e:	4603      	mov	r3, r0
 8002290:	2b00      	cmp	r3, #0
 8002292:	d073      	beq.n	800237c <Game_Tick+0x101c>
						g->shots[i].y)) {
					g->enemies[j].active = false;
 8002294:	7dba      	ldrb	r2, [r7, #22]
 8002296:	6879      	ldr	r1, [r7, #4]
 8002298:	4613      	mov	r3, r2
 800229a:	00db      	lsls	r3, r3, #3
 800229c:	4413      	add	r3, r2
 800229e:	009b      	lsls	r3, r3, #2
 80022a0:	440b      	add	r3, r1
 80022a2:	f503 7351 	add.w	r3, r3, #836	@ 0x344
 80022a6:	2200      	movs	r2, #0
 80022a8:	701a      	strb	r2, [r3, #0]
					g->enemies[j].tracked_by_missile = false;
 80022aa:	7dba      	ldrb	r2, [r7, #22]
 80022ac:	6879      	ldr	r1, [r7, #4]
 80022ae:	4613      	mov	r3, r2
 80022b0:	00db      	lsls	r3, r3, #3
 80022b2:	4413      	add	r3, r2
 80022b4:	009b      	lsls	r3, r3, #2
 80022b6:	440b      	add	r3, r1
 80022b8:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 80022bc:	2200      	movs	r2, #0
 80022be:	701a      	strb	r2, [r3, #0]
					g->enemies[j].track_number = 0;
 80022c0:	7dba      	ldrb	r2, [r7, #22]
 80022c2:	6879      	ldr	r1, [r7, #4]
 80022c4:	4613      	mov	r3, r2
 80022c6:	00db      	lsls	r3, r3, #3
 80022c8:	4413      	add	r3, r2
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	440b      	add	r3, r1
 80022ce:	f503 7359 	add.w	r3, r3, #868	@ 0x364
 80022d2:	2200      	movs	r2, #0
 80022d4:	601a      	str	r2, [r3, #0]
					g->shots[i].active = false;
 80022d6:	7dfa      	ldrb	r2, [r7, #23]
 80022d8:	6879      	ldr	r1, [r7, #4]
 80022da:	4613      	mov	r3, r2
 80022dc:	009b      	lsls	r3, r3, #2
 80022de:	4413      	add	r3, r2
 80022e0:	009b      	lsls	r3, r3, #2
 80022e2:	440b      	add	r3, r1
 80022e4:	3324      	adds	r3, #36	@ 0x24
 80022e6:	2200      	movs	r2, #0
 80022e8:	701a      	strb	r2, [r3, #0]
					g->player.score += 1;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	1c5a      	adds	r2, r3, #1
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	609a      	str	r2, [r3, #8]
					GFX_DrowBitMap_P(g->enemies[j].x, g->enemies[j].y,
 80022f4:	7dba      	ldrb	r2, [r7, #22]
 80022f6:	6879      	ldr	r1, [r7, #4]
 80022f8:	4613      	mov	r3, r2
 80022fa:	00db      	lsls	r3, r3, #3
 80022fc:	4413      	add	r3, r2
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	440b      	add	r3, r1
 8002302:	f503 7352 	add.w	r3, r3, #840	@ 0x348
 8002306:	6818      	ldr	r0, [r3, #0]
 8002308:	7dba      	ldrb	r2, [r7, #22]
 800230a:	6879      	ldr	r1, [r7, #4]
 800230c:	4613      	mov	r3, r2
 800230e:	00db      	lsls	r3, r3, #3
 8002310:	4413      	add	r3, r2
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	440b      	add	r3, r1
 8002316:	f503 7353 	add.w	r3, r3, #844	@ 0x34c
 800231a:	6819      	ldr	r1, [r3, #0]
 800231c:	2301      	movs	r3, #1
 800231e:	9301      	str	r3, [sp, #4]
 8002320:	230a      	movs	r3, #10
 8002322:	9300      	str	r3, [sp, #0]
 8002324:	230a      	movs	r3, #10
 8002326:	4a2e      	ldr	r2, [pc, #184]	@ (80023e0 <Game_Tick+0x1080>)
 8002328:	f7fe fd40 	bl	8000dac <GFX_DrowBitMap_P>
							explosion_map, 10, 10, 1);

					//Dodanie bonusa w miejscu zestrzelenia
					if ((rand() % 100) < frequ_bonus)
 800232c:	f005 f90c 	bl	8007548 <rand>
 8002330:	4602      	mov	r2, r0
 8002332:	4b2c      	ldr	r3, [pc, #176]	@ (80023e4 <Game_Tick+0x1084>)
 8002334:	fb83 1302 	smull	r1, r3, r3, r2
 8002338:	1159      	asrs	r1, r3, #5
 800233a:	17d3      	asrs	r3, r2, #31
 800233c:	1acb      	subs	r3, r1, r3
 800233e:	2164      	movs	r1, #100	@ 0x64
 8002340:	fb01 f303 	mul.w	r3, r1, r3
 8002344:	1ad3      	subs	r3, r2, r3
 8002346:	2b0e      	cmp	r3, #14
 8002348:	dc18      	bgt.n	800237c <Game_Tick+0x101c>
						Game_Add_Bonus(g, g->enemies[j].x, g->enemies[j].y);//add_bonus(g->enemies[j].x, g->enemies[j].y);
 800234a:	7dba      	ldrb	r2, [r7, #22]
 800234c:	6879      	ldr	r1, [r7, #4]
 800234e:	4613      	mov	r3, r2
 8002350:	00db      	lsls	r3, r3, #3
 8002352:	4413      	add	r3, r2
 8002354:	009b      	lsls	r3, r3, #2
 8002356:	440b      	add	r3, r1
 8002358:	f503 7352 	add.w	r3, r3, #840	@ 0x348
 800235c:	6818      	ldr	r0, [r3, #0]
 800235e:	7dba      	ldrb	r2, [r7, #22]
 8002360:	6879      	ldr	r1, [r7, #4]
 8002362:	4613      	mov	r3, r2
 8002364:	00db      	lsls	r3, r3, #3
 8002366:	4413      	add	r3, r2
 8002368:	009b      	lsls	r3, r3, #2
 800236a:	440b      	add	r3, r1
 800236c:	f503 7353 	add.w	r3, r3, #844	@ 0x34c
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	461a      	mov	r2, r3
 8002374:	4601      	mov	r1, r0
 8002376:	6878      	ldr	r0, [r7, #4]
 8002378:	f000 fc5c 	bl	8002c34 <Game_Add_Bonus>
		for (j = 0; j < num_enemies; ++j) {
 800237c:	7dbb      	ldrb	r3, [r7, #22]
 800237e:	3301      	adds	r3, #1
 8002380:	75bb      	strb	r3, [r7, #22]
 8002382:	7dbb      	ldrb	r3, [r7, #22]
 8002384:	2b09      	cmp	r3, #9
 8002386:	f67f af3f 	bls.w	8002208 <Game_Tick+0xea8>
	for (i = 0; i < num_shots; ++i) {
 800238a:	7dfb      	ldrb	r3, [r7, #23]
 800238c:	3301      	adds	r3, #1
 800238e:	75fb      	strb	r3, [r7, #23]
 8002390:	7dfb      	ldrb	r3, [r7, #23]
 8002392:	2b22      	cmp	r3, #34	@ 0x22
 8002394:	f67f af2d 	bls.w	80021f2 <Game_Tick+0xe92>
				}
			}
		}
	}
	if ((rand() % 100) < (g->player.level * 2) && !(g->boss.active)) //Frequency of adding opponents according to level
 8002398:	f005 f8d6 	bl	8007548 <rand>
 800239c:	4602      	mov	r2, r0
 800239e:	4b11      	ldr	r3, [pc, #68]	@ (80023e4 <Game_Tick+0x1084>)
 80023a0:	fb83 1302 	smull	r1, r3, r3, r2
 80023a4:	1159      	asrs	r1, r3, #5
 80023a6:	17d3      	asrs	r3, r2, #31
 80023a8:	1acb      	subs	r3, r1, r3
 80023aa:	2164      	movs	r1, #100	@ 0x64
 80023ac:	fb01 f303 	mul.w	r3, r1, r3
 80023b0:	1ad3      	subs	r3, r2, r3
 80023b2:	687a      	ldr	r2, [r7, #4]
 80023b4:	6952      	ldr	r2, [r2, #20]
 80023b6:	0052      	lsls	r2, r2, #1
 80023b8:	4293      	cmp	r3, r2
 80023ba:	da0c      	bge.n	80023d6 <Game_Tick+0x1076>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80023c2:	f893 3834 	ldrb.w	r3, [r3, #2100]	@ 0x834
 80023c6:	f083 0301 	eor.w	r3, r3, #1
 80023ca:	b2db      	uxtb	r3, r3
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d002      	beq.n	80023d6 <Game_Tick+0x1076>
		Game_Add_Enemy(g);//add_enemy();
 80023d0:	6878      	ldr	r0, [r7, #4]
 80023d2:	f000 ffd3 	bl	800337c <Game_Add_Enemy>
}
 80023d6:	bf00      	nop
 80023d8:	3718      	adds	r7, #24
 80023da:	46bd      	mov	sp, r7
 80023dc:	bdb0      	pop	{r4, r5, r7, pc}
 80023de:	bf00      	nop
 80023e0:	08009b30 	.word	0x08009b30
 80023e4:	51eb851f 	.word	0x51eb851f

080023e8 <Game_Draw>:

void Game_Draw(GameCtx *g) {
 80023e8:	b5b0      	push	{r4, r5, r7, lr}
 80023ea:	b086      	sub	sp, #24
 80023ec:	af02      	add	r7, sp, #8
 80023ee:	6078      	str	r0, [r7, #4]
	 * Drawing all game graphics
	 */
	uint8_t i;

	//Rsownanie informacji o grze
	GFX_PutInt(5, 0, g->player.score, 1, 1, 0);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	689a      	ldr	r2, [r3, #8]
 80023f4:	2300      	movs	r3, #0
 80023f6:	9301      	str	r3, [sp, #4]
 80023f8:	2301      	movs	r3, #1
 80023fa:	9300      	str	r3, [sp, #0]
 80023fc:	2301      	movs	r3, #1
 80023fe:	2100      	movs	r1, #0
 8002400:	2005      	movs	r0, #5
 8002402:	f7fe fe65 	bl	80010d0 <GFX_PutInt>
	GFX_DrowBitMap_P(102, 0, lives_map, 8, 6, 1);
 8002406:	2301      	movs	r3, #1
 8002408:	9301      	str	r3, [sp, #4]
 800240a:	2306      	movs	r3, #6
 800240c:	9300      	str	r3, [sp, #0]
 800240e:	2308      	movs	r3, #8
 8002410:	4aa3      	ldr	r2, [pc, #652]	@ (80026a0 <Game_Draw+0x2b8>)
 8002412:	2100      	movs	r1, #0
 8002414:	2066      	movs	r0, #102	@ 0x66
 8002416:	f7fe fcc9 	bl	8000dac <GFX_DrowBitMap_P>
	GFX_PutInt(114, 0, g->player.lives, 1, 1, 0);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	691a      	ldr	r2, [r3, #16]
 800241e:	2300      	movs	r3, #0
 8002420:	9301      	str	r3, [sp, #4]
 8002422:	2301      	movs	r3, #1
 8002424:	9300      	str	r3, [sp, #0]
 8002426:	2301      	movs	r3, #1
 8002428:	2100      	movs	r1, #0
 800242a:	2072      	movs	r0, #114	@ 0x72
 800242c:	f7fe fe50 	bl	80010d0 <GFX_PutInt>
	GFX_DrowBitMap_P(50, 0, Level_map, 20, 7, 1);
 8002430:	2301      	movs	r3, #1
 8002432:	9301      	str	r3, [sp, #4]
 8002434:	2307      	movs	r3, #7
 8002436:	9300      	str	r3, [sp, #0]
 8002438:	2314      	movs	r3, #20
 800243a:	4a9a      	ldr	r2, [pc, #616]	@ (80026a4 <Game_Draw+0x2bc>)
 800243c:	2100      	movs	r1, #0
 800243e:	2032      	movs	r0, #50	@ 0x32
 8002440:	f7fe fcb4 	bl	8000dac <GFX_DrowBitMap_P>
	GFX_PutInt(80, 0, g->player.level, 1, 1, 0);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	695a      	ldr	r2, [r3, #20]
 8002448:	2300      	movs	r3, #0
 800244a:	9301      	str	r3, [sp, #4]
 800244c:	2301      	movs	r3, #1
 800244e:	9300      	str	r3, [sp, #0]
 8002450:	2301      	movs	r3, #1
 8002452:	2100      	movs	r1, #0
 8002454:	2050      	movs	r0, #80	@ 0x50
 8002456:	f7fe fe3b 	bl	80010d0 <GFX_PutInt>

	//Drawing graphics of a player's shot
	for (i = 0; i < num_shots; i++) {
 800245a:	2300      	movs	r3, #0
 800245c:	73fb      	strb	r3, [r7, #15]
 800245e:	e027      	b.n	80024b0 <Game_Draw+0xc8>
		if (g->shots[i].active) {
 8002460:	7bfa      	ldrb	r2, [r7, #15]
 8002462:	6879      	ldr	r1, [r7, #4]
 8002464:	4613      	mov	r3, r2
 8002466:	009b      	lsls	r3, r3, #2
 8002468:	4413      	add	r3, r2
 800246a:	009b      	lsls	r3, r3, #2
 800246c:	440b      	add	r3, r1
 800246e:	3324      	adds	r3, #36	@ 0x24
 8002470:	781b      	ldrb	r3, [r3, #0]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d019      	beq.n	80024aa <Game_Draw+0xc2>
			GFX_DrowBitMap_P(g->shots[i].x, g->shots[i].y, player_shot_map, 4, 1, 1);
 8002476:	7bfa      	ldrb	r2, [r7, #15]
 8002478:	6879      	ldr	r1, [r7, #4]
 800247a:	4613      	mov	r3, r2
 800247c:	009b      	lsls	r3, r3, #2
 800247e:	4413      	add	r3, r2
 8002480:	009b      	lsls	r3, r3, #2
 8002482:	440b      	add	r3, r1
 8002484:	3328      	adds	r3, #40	@ 0x28
 8002486:	6818      	ldr	r0, [r3, #0]
 8002488:	7bfa      	ldrb	r2, [r7, #15]
 800248a:	6879      	ldr	r1, [r7, #4]
 800248c:	4613      	mov	r3, r2
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	4413      	add	r3, r2
 8002492:	009b      	lsls	r3, r3, #2
 8002494:	440b      	add	r3, r1
 8002496:	332c      	adds	r3, #44	@ 0x2c
 8002498:	6819      	ldr	r1, [r3, #0]
 800249a:	2301      	movs	r3, #1
 800249c:	9301      	str	r3, [sp, #4]
 800249e:	2301      	movs	r3, #1
 80024a0:	9300      	str	r3, [sp, #0]
 80024a2:	2304      	movs	r3, #4
 80024a4:	4a80      	ldr	r2, [pc, #512]	@ (80026a8 <Game_Draw+0x2c0>)
 80024a6:	f7fe fc81 	bl	8000dac <GFX_DrowBitMap_P>
	for (i = 0; i < num_shots; i++) {
 80024aa:	7bfb      	ldrb	r3, [r7, #15]
 80024ac:	3301      	adds	r3, #1
 80024ae:	73fb      	strb	r3, [r7, #15]
 80024b0:	7bfb      	ldrb	r3, [r7, #15]
 80024b2:	2b22      	cmp	r3, #34	@ 0x22
 80024b4:	d9d4      	bls.n	8002460 <Game_Draw+0x78>
		}
	}

	//Drawing graphics of a boss shot
	if (g->boss.active) {
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80024bc:	f893 3834 	ldrb.w	r3, [r3, #2100]	@ 0x834
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d030      	beq.n	8002526 <Game_Draw+0x13e>
		for (i = 0; i < num_boss_shots; i++) {
 80024c4:	2300      	movs	r3, #0
 80024c6:	73fb      	strb	r3, [r7, #15]
 80024c8:	e02a      	b.n	8002520 <Game_Draw+0x138>
			if (g->boss_shots[i].active) {
 80024ca:	7bfa      	ldrb	r2, [r7, #15]
 80024cc:	6879      	ldr	r1, [r7, #4]
 80024ce:	4613      	mov	r3, r2
 80024d0:	009b      	lsls	r3, r3, #2
 80024d2:	4413      	add	r3, r2
 80024d4:	009b      	lsls	r3, r3, #2
 80024d6:	440b      	add	r3, r1
 80024d8:	f503 7338 	add.w	r3, r3, #736	@ 0x2e0
 80024dc:	781b      	ldrb	r3, [r3, #0]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d01b      	beq.n	800251a <Game_Draw+0x132>
				GFX_DrowBitMap_P(g->boss_shots[i].x, g->boss_shots[i].y,
 80024e2:	7bfa      	ldrb	r2, [r7, #15]
 80024e4:	6879      	ldr	r1, [r7, #4]
 80024e6:	4613      	mov	r3, r2
 80024e8:	009b      	lsls	r3, r3, #2
 80024ea:	4413      	add	r3, r2
 80024ec:	009b      	lsls	r3, r3, #2
 80024ee:	440b      	add	r3, r1
 80024f0:	f503 7339 	add.w	r3, r3, #740	@ 0x2e4
 80024f4:	6818      	ldr	r0, [r3, #0]
 80024f6:	7bfa      	ldrb	r2, [r7, #15]
 80024f8:	6879      	ldr	r1, [r7, #4]
 80024fa:	4613      	mov	r3, r2
 80024fc:	009b      	lsls	r3, r3, #2
 80024fe:	4413      	add	r3, r2
 8002500:	009b      	lsls	r3, r3, #2
 8002502:	440b      	add	r3, r1
 8002504:	f503 733a 	add.w	r3, r3, #744	@ 0x2e8
 8002508:	6819      	ldr	r1, [r3, #0]
 800250a:	2301      	movs	r3, #1
 800250c:	9301      	str	r3, [sp, #4]
 800250e:	2301      	movs	r3, #1
 8002510:	9300      	str	r3, [sp, #0]
 8002512:	2304      	movs	r3, #4
 8002514:	4a64      	ldr	r2, [pc, #400]	@ (80026a8 <Game_Draw+0x2c0>)
 8002516:	f7fe fc49 	bl	8000dac <GFX_DrowBitMap_P>
		for (i = 0; i < num_boss_shots; i++) {
 800251a:	7bfb      	ldrb	r3, [r7, #15]
 800251c:	3301      	adds	r3, #1
 800251e:	73fb      	strb	r3, [r7, #15]
 8002520:	7bfb      	ldrb	r3, [r7, #15]
 8002522:	2b04      	cmp	r3, #4
 8002524:	d9d1      	bls.n	80024ca <Game_Draw+0xe2>
			}
		}
	}

	//Drawing graphics of enemies
	for (i = 0; i < num_enemies; i++) {
 8002526:	2300      	movs	r3, #0
 8002528:	73fb      	strb	r3, [r7, #15]
 800252a:	e0a5      	b.n	8002678 <Game_Draw+0x290>
		if (g->enemies[i].active) {
 800252c:	7bfa      	ldrb	r2, [r7, #15]
 800252e:	6879      	ldr	r1, [r7, #4]
 8002530:	4613      	mov	r3, r2
 8002532:	00db      	lsls	r3, r3, #3
 8002534:	4413      	add	r3, r2
 8002536:	009b      	lsls	r3, r3, #2
 8002538:	440b      	add	r3, r1
 800253a:	f503 7351 	add.w	r3, r3, #836	@ 0x344
 800253e:	781b      	ldrb	r3, [r3, #0]
 8002540:	2b00      	cmp	r3, #0
 8002542:	f000 8096 	beq.w	8002672 <Game_Draw+0x28a>
			if (g->enemies[i].type == et_tracker)
 8002546:	7bfa      	ldrb	r2, [r7, #15]
 8002548:	6879      	ldr	r1, [r7, #4]
 800254a:	4613      	mov	r3, r2
 800254c:	00db      	lsls	r3, r3, #3
 800254e:	4413      	add	r3, r2
 8002550:	009b      	lsls	r3, r3, #2
 8002552:	440b      	add	r3, r1
 8002554:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8002558:	781b      	ldrb	r3, [r3, #0]
 800255a:	2b01      	cmp	r3, #1
 800255c:	d125      	bne.n	80025aa <Game_Draw+0x1c2>
				GFX_DrowBitMap_P(g->enemies[i].x, g->enemies[i].y, g->enemies[i].bit_map,
 800255e:	7bfa      	ldrb	r2, [r7, #15]
 8002560:	6879      	ldr	r1, [r7, #4]
 8002562:	4613      	mov	r3, r2
 8002564:	00db      	lsls	r3, r3, #3
 8002566:	4413      	add	r3, r2
 8002568:	009b      	lsls	r3, r3, #2
 800256a:	440b      	add	r3, r1
 800256c:	f503 7352 	add.w	r3, r3, #840	@ 0x348
 8002570:	6818      	ldr	r0, [r3, #0]
 8002572:	7bfa      	ldrb	r2, [r7, #15]
 8002574:	6879      	ldr	r1, [r7, #4]
 8002576:	4613      	mov	r3, r2
 8002578:	00db      	lsls	r3, r3, #3
 800257a:	4413      	add	r3, r2
 800257c:	009b      	lsls	r3, r3, #2
 800257e:	440b      	add	r3, r1
 8002580:	f503 7353 	add.w	r3, r3, #844	@ 0x34c
 8002584:	681c      	ldr	r4, [r3, #0]
 8002586:	7bfa      	ldrb	r2, [r7, #15]
 8002588:	6879      	ldr	r1, [r7, #4]
 800258a:	4613      	mov	r3, r2
 800258c:	00db      	lsls	r3, r3, #3
 800258e:	4413      	add	r3, r2
 8002590:	009b      	lsls	r3, r3, #2
 8002592:	440b      	add	r3, r1
 8002594:	f503 7355 	add.w	r3, r3, #852	@ 0x354
 8002598:	681a      	ldr	r2, [r3, #0]
 800259a:	2301      	movs	r3, #1
 800259c:	9301      	str	r3, [sp, #4]
 800259e:	2305      	movs	r3, #5
 80025a0:	9300      	str	r3, [sp, #0]
 80025a2:	2305      	movs	r3, #5
 80025a4:	4621      	mov	r1, r4
 80025a6:	f7fe fc01 	bl	8000dac <GFX_DrowBitMap_P>
						5, 5, 1);
			if (g->enemies[i].type == et_diver)
 80025aa:	7bfa      	ldrb	r2, [r7, #15]
 80025ac:	6879      	ldr	r1, [r7, #4]
 80025ae:	4613      	mov	r3, r2
 80025b0:	00db      	lsls	r3, r3, #3
 80025b2:	4413      	add	r3, r2
 80025b4:	009b      	lsls	r3, r3, #2
 80025b6:	440b      	add	r3, r1
 80025b8:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80025bc:	781b      	ldrb	r3, [r3, #0]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d125      	bne.n	800260e <Game_Draw+0x226>
				GFX_DrowBitMap_P(g->enemies[i].x, g->enemies[i].y, g->enemies[i].bit_map,
 80025c2:	7bfa      	ldrb	r2, [r7, #15]
 80025c4:	6879      	ldr	r1, [r7, #4]
 80025c6:	4613      	mov	r3, r2
 80025c8:	00db      	lsls	r3, r3, #3
 80025ca:	4413      	add	r3, r2
 80025cc:	009b      	lsls	r3, r3, #2
 80025ce:	440b      	add	r3, r1
 80025d0:	f503 7352 	add.w	r3, r3, #840	@ 0x348
 80025d4:	6818      	ldr	r0, [r3, #0]
 80025d6:	7bfa      	ldrb	r2, [r7, #15]
 80025d8:	6879      	ldr	r1, [r7, #4]
 80025da:	4613      	mov	r3, r2
 80025dc:	00db      	lsls	r3, r3, #3
 80025de:	4413      	add	r3, r2
 80025e0:	009b      	lsls	r3, r3, #2
 80025e2:	440b      	add	r3, r1
 80025e4:	f503 7353 	add.w	r3, r3, #844	@ 0x34c
 80025e8:	681c      	ldr	r4, [r3, #0]
 80025ea:	7bfa      	ldrb	r2, [r7, #15]
 80025ec:	6879      	ldr	r1, [r7, #4]
 80025ee:	4613      	mov	r3, r2
 80025f0:	00db      	lsls	r3, r3, #3
 80025f2:	4413      	add	r3, r2
 80025f4:	009b      	lsls	r3, r3, #2
 80025f6:	440b      	add	r3, r1
 80025f8:	f503 7355 	add.w	r3, r3, #852	@ 0x354
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	2301      	movs	r3, #1
 8002600:	9301      	str	r3, [sp, #4]
 8002602:	2307      	movs	r3, #7
 8002604:	9300      	str	r3, [sp, #0]
 8002606:	2303      	movs	r3, #3
 8002608:	4621      	mov	r1, r4
 800260a:	f7fe fbcf 	bl	8000dac <GFX_DrowBitMap_P>
						3, 7, 1);
			if (g->enemies[i].type == et_bobber)
 800260e:	7bfa      	ldrb	r2, [r7, #15]
 8002610:	6879      	ldr	r1, [r7, #4]
 8002612:	4613      	mov	r3, r2
 8002614:	00db      	lsls	r3, r3, #3
 8002616:	4413      	add	r3, r2
 8002618:	009b      	lsls	r3, r3, #2
 800261a:	440b      	add	r3, r1
 800261c:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8002620:	781b      	ldrb	r3, [r3, #0]
 8002622:	2b02      	cmp	r3, #2
 8002624:	d125      	bne.n	8002672 <Game_Draw+0x28a>
				GFX_DrowBitMap_P(g->enemies[i].x, g->enemies[i].y, g->enemies[i].bit_map,
 8002626:	7bfa      	ldrb	r2, [r7, #15]
 8002628:	6879      	ldr	r1, [r7, #4]
 800262a:	4613      	mov	r3, r2
 800262c:	00db      	lsls	r3, r3, #3
 800262e:	4413      	add	r3, r2
 8002630:	009b      	lsls	r3, r3, #2
 8002632:	440b      	add	r3, r1
 8002634:	f503 7352 	add.w	r3, r3, #840	@ 0x348
 8002638:	6818      	ldr	r0, [r3, #0]
 800263a:	7bfa      	ldrb	r2, [r7, #15]
 800263c:	6879      	ldr	r1, [r7, #4]
 800263e:	4613      	mov	r3, r2
 8002640:	00db      	lsls	r3, r3, #3
 8002642:	4413      	add	r3, r2
 8002644:	009b      	lsls	r3, r3, #2
 8002646:	440b      	add	r3, r1
 8002648:	f503 7353 	add.w	r3, r3, #844	@ 0x34c
 800264c:	681c      	ldr	r4, [r3, #0]
 800264e:	7bfa      	ldrb	r2, [r7, #15]
 8002650:	6879      	ldr	r1, [r7, #4]
 8002652:	4613      	mov	r3, r2
 8002654:	00db      	lsls	r3, r3, #3
 8002656:	4413      	add	r3, r2
 8002658:	009b      	lsls	r3, r3, #2
 800265a:	440b      	add	r3, r1
 800265c:	f503 7355 	add.w	r3, r3, #852	@ 0x354
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	2301      	movs	r3, #1
 8002664:	9301      	str	r3, [sp, #4]
 8002666:	2305      	movs	r3, #5
 8002668:	9300      	str	r3, [sp, #0]
 800266a:	2305      	movs	r3, #5
 800266c:	4621      	mov	r1, r4
 800266e:	f7fe fb9d 	bl	8000dac <GFX_DrowBitMap_P>
	for (i = 0; i < num_enemies; i++) {
 8002672:	7bfb      	ldrb	r3, [r7, #15]
 8002674:	3301      	adds	r3, #1
 8002676:	73fb      	strb	r3, [r7, #15]
 8002678:	7bfb      	ldrb	r3, [r7, #15]
 800267a:	2b09      	cmp	r3, #9
 800267c:	f67f af56 	bls.w	800252c <Game_Draw+0x144>
						5, 5, 1);
		}
	}

	//Drawing the player's graphics
	GFX_DrowBitMap_P(g->player.x, g->player.y, player_map, 11, 11, 1);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6818      	ldr	r0, [r3, #0]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6859      	ldr	r1, [r3, #4]
 8002688:	2301      	movs	r3, #1
 800268a:	9301      	str	r3, [sp, #4]
 800268c:	230b      	movs	r3, #11
 800268e:	9300      	str	r3, [sp, #0]
 8002690:	230b      	movs	r3, #11
 8002692:	4a06      	ldr	r2, [pc, #24]	@ (80026ac <Game_Draw+0x2c4>)
 8002694:	f7fe fb8a 	bl	8000dac <GFX_DrowBitMap_P>

	//Drawing a background
	for (i = 0; i < num_background; i++) {
 8002698:	2300      	movs	r3, #0
 800269a:	73fb      	strb	r3, [r7, #15]
 800269c:	e03f      	b.n	800271e <Game_Draw+0x336>
 800269e:	bf00      	nop
 80026a0:	08009960 	.word	0x08009960
 80026a4:	08009948 	.word	0x08009948
 80026a8:	0800992c 	.word	0x0800992c
 80026ac:	08009930 	.word	0x08009930
		if (g->background[i].active) {
 80026b0:	7bfa      	ldrb	r2, [r7, #15]
 80026b2:	6879      	ldr	r1, [r7, #4]
 80026b4:	4613      	mov	r3, r2
 80026b6:	009b      	lsls	r3, r3, #2
 80026b8:	4413      	add	r3, r2
 80026ba:	009b      	lsls	r3, r3, #2
 80026bc:	440b      	add	r3, r1
 80026be:	f203 43ac 	addw	r3, r3, #1196	@ 0x4ac
 80026c2:	781b      	ldrb	r3, [r3, #0]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d027      	beq.n	8002718 <Game_Draw+0x330>
			ssd1327_setPixel(g->background[i].x, g->background[i].y, (rand() % 15));
 80026c8:	7bfa      	ldrb	r2, [r7, #15]
 80026ca:	6879      	ldr	r1, [r7, #4]
 80026cc:	4613      	mov	r3, r2
 80026ce:	009b      	lsls	r3, r3, #2
 80026d0:	4413      	add	r3, r2
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	440b      	add	r3, r1
 80026d6:	f503 6396 	add.w	r3, r3, #1200	@ 0x4b0
 80026da:	681c      	ldr	r4, [r3, #0]
 80026dc:	7bfa      	ldrb	r2, [r7, #15]
 80026de:	6879      	ldr	r1, [r7, #4]
 80026e0:	4613      	mov	r3, r2
 80026e2:	009b      	lsls	r3, r3, #2
 80026e4:	4413      	add	r3, r2
 80026e6:	009b      	lsls	r3, r3, #2
 80026e8:	440b      	add	r3, r1
 80026ea:	f203 43b4 	addw	r3, r3, #1204	@ 0x4b4
 80026ee:	681d      	ldr	r5, [r3, #0]
 80026f0:	f004 ff2a 	bl	8007548 <rand>
 80026f4:	4602      	mov	r2, r0
 80026f6:	4b5d      	ldr	r3, [pc, #372]	@ (800286c <Game_Draw+0x484>)
 80026f8:	fb83 1302 	smull	r1, r3, r3, r2
 80026fc:	4413      	add	r3, r2
 80026fe:	10d9      	asrs	r1, r3, #3
 8002700:	17d3      	asrs	r3, r2, #31
 8002702:	1ac9      	subs	r1, r1, r3
 8002704:	460b      	mov	r3, r1
 8002706:	011b      	lsls	r3, r3, #4
 8002708:	1a5b      	subs	r3, r3, r1
 800270a:	1ad1      	subs	r1, r2, r3
 800270c:	b2cb      	uxtb	r3, r1
 800270e:	461a      	mov	r2, r3
 8002710:	4629      	mov	r1, r5
 8002712:	4620      	mov	r0, r4
 8002714:	f001 fbee 	bl	8003ef4 <ssd1327_setPixel>
	for (i = 0; i < num_background; i++) {
 8002718:	7bfb      	ldrb	r3, [r7, #15]
 800271a:	3301      	adds	r3, #1
 800271c:	73fb      	strb	r3, [r7, #15]
 800271e:	7bfb      	ldrb	r3, [r7, #15]
 8002720:	2bf9      	cmp	r3, #249	@ 0xf9
 8002722:	d9c5      	bls.n	80026b0 <Game_Draw+0x2c8>
		}
	}

	//Drawing Boss
	if (g->boss.active && g->player.game_progres == 30)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800272a:	f893 3834 	ldrb.w	r3, [r3, #2100]	@ 0x834
 800272e:	2b00      	cmp	r3, #0
 8002730:	d015      	beq.n	800275e <Game_Draw+0x376>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	699b      	ldr	r3, [r3, #24]
 8002736:	2b1e      	cmp	r3, #30
 8002738:	d111      	bne.n	800275e <Game_Draw+0x376>
		GFX_DrowBitMap_P(g->boss.x, g->boss.y, boss_map_1, 10, 18, 1);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002740:	f8d3 0838 	ldr.w	r0, [r3, #2104]	@ 0x838
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800274a:	f8d3 183c 	ldr.w	r1, [r3, #2108]	@ 0x83c
 800274e:	2301      	movs	r3, #1
 8002750:	9301      	str	r3, [sp, #4]
 8002752:	2312      	movs	r3, #18
 8002754:	9300      	str	r3, [sp, #0]
 8002756:	230a      	movs	r3, #10
 8002758:	4a45      	ldr	r2, [pc, #276]	@ (8002870 <Game_Draw+0x488>)
 800275a:	f7fe fb27 	bl	8000dac <GFX_DrowBitMap_P>
	if (g->boss.active && g->player.game_progres == 60)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002764:	f893 3834 	ldrb.w	r3, [r3, #2100]	@ 0x834
 8002768:	2b00      	cmp	r3, #0
 800276a:	d015      	beq.n	8002798 <Game_Draw+0x3b0>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	699b      	ldr	r3, [r3, #24]
 8002770:	2b3c      	cmp	r3, #60	@ 0x3c
 8002772:	d111      	bne.n	8002798 <Game_Draw+0x3b0>
		GFX_DrowBitMap_P(g->boss.x, g->boss.y, boss_map_2, 10, 18, 1);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800277a:	f8d3 0838 	ldr.w	r0, [r3, #2104]	@ 0x838
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002784:	f8d3 183c 	ldr.w	r1, [r3, #2108]	@ 0x83c
 8002788:	2301      	movs	r3, #1
 800278a:	9301      	str	r3, [sp, #4]
 800278c:	2312      	movs	r3, #18
 800278e:	9300      	str	r3, [sp, #0]
 8002790:	230a      	movs	r3, #10
 8002792:	4a38      	ldr	r2, [pc, #224]	@ (8002874 <Game_Draw+0x48c>)
 8002794:	f7fe fb0a 	bl	8000dac <GFX_DrowBitMap_P>

	//Drawing bonuses
	for (i = 0; i < num_bonus; i++) {
 8002798:	2300      	movs	r3, #0
 800279a:	73fb      	strb	r3, [r7, #15]
 800279c:	e05d      	b.n	800285a <Game_Draw+0x472>
		if (g->bonuses[i].active) {
 800279e:	7bfa      	ldrb	r2, [r7, #15]
 80027a0:	6879      	ldr	r1, [r7, #4]
 80027a2:	4613      	mov	r3, r2
 80027a4:	00db      	lsls	r3, r3, #3
 80027a6:	1a9b      	subs	r3, r3, r2
 80027a8:	009b      	lsls	r3, r3, #2
 80027aa:	440b      	add	r3, r1
 80027ac:	f503 53c2 	add.w	r3, r3, #6208	@ 0x1840
 80027b0:	3310      	adds	r3, #16
 80027b2:	781b      	ldrb	r3, [r3, #0]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d04d      	beq.n	8002854 <Game_Draw+0x46c>
			switch (g->bonuses[i].type) {
 80027b8:	7bfa      	ldrb	r2, [r7, #15]
 80027ba:	6879      	ldr	r1, [r7, #4]
 80027bc:	4613      	mov	r3, r2
 80027be:	00db      	lsls	r3, r3, #3
 80027c0:	1a9b      	subs	r3, r3, r2
 80027c2:	009b      	lsls	r3, r3, #2
 80027c4:	440b      	add	r3, r1
 80027c6:	f503 53c2 	add.w	r3, r3, #6208	@ 0x1840
 80027ca:	331c      	adds	r3, #28
 80027cc:	781b      	ldrb	r3, [r3, #0]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d002      	beq.n	80027d8 <Game_Draw+0x3f0>
 80027d2:	2b01      	cmp	r3, #1
 80027d4:	d01f      	beq.n	8002816 <Game_Draw+0x42e>
 80027d6:	e03d      	b.n	8002854 <Game_Draw+0x46c>
			case bt_live:
				GFX_DrowBitMap_P(g->bonuses[i].x, g->bonuses[i].y, bonus_live_map, 7,
 80027d8:	7bfa      	ldrb	r2, [r7, #15]
 80027da:	6879      	ldr	r1, [r7, #4]
 80027dc:	4613      	mov	r3, r2
 80027de:	00db      	lsls	r3, r3, #3
 80027e0:	1a9b      	subs	r3, r3, r2
 80027e2:	009b      	lsls	r3, r3, #2
 80027e4:	440b      	add	r3, r1
 80027e6:	f503 53c2 	add.w	r3, r3, #6208	@ 0x1840
 80027ea:	3314      	adds	r3, #20
 80027ec:	6818      	ldr	r0, [r3, #0]
 80027ee:	7bfa      	ldrb	r2, [r7, #15]
 80027f0:	6879      	ldr	r1, [r7, #4]
 80027f2:	4613      	mov	r3, r2
 80027f4:	00db      	lsls	r3, r3, #3
 80027f6:	1a9b      	subs	r3, r3, r2
 80027f8:	009b      	lsls	r3, r3, #2
 80027fa:	440b      	add	r3, r1
 80027fc:	f503 53c2 	add.w	r3, r3, #6208	@ 0x1840
 8002800:	3318      	adds	r3, #24
 8002802:	6819      	ldr	r1, [r3, #0]
 8002804:	2301      	movs	r3, #1
 8002806:	9301      	str	r3, [sp, #4]
 8002808:	2307      	movs	r3, #7
 800280a:	9300      	str	r3, [sp, #0]
 800280c:	2307      	movs	r3, #7
 800280e:	4a1a      	ldr	r2, [pc, #104]	@ (8002878 <Game_Draw+0x490>)
 8002810:	f7fe facc 	bl	8000dac <GFX_DrowBitMap_P>
						7, 1);
				break;
 8002814:	e01e      	b.n	8002854 <Game_Draw+0x46c>
			case bt_tracker_shoot:
				GFX_DrowBitMap_P(g->bonuses[i].x, g->bonuses[i].y,
 8002816:	7bfa      	ldrb	r2, [r7, #15]
 8002818:	6879      	ldr	r1, [r7, #4]
 800281a:	4613      	mov	r3, r2
 800281c:	00db      	lsls	r3, r3, #3
 800281e:	1a9b      	subs	r3, r3, r2
 8002820:	009b      	lsls	r3, r3, #2
 8002822:	440b      	add	r3, r1
 8002824:	f503 53c2 	add.w	r3, r3, #6208	@ 0x1840
 8002828:	3314      	adds	r3, #20
 800282a:	6818      	ldr	r0, [r3, #0]
 800282c:	7bfa      	ldrb	r2, [r7, #15]
 800282e:	6879      	ldr	r1, [r7, #4]
 8002830:	4613      	mov	r3, r2
 8002832:	00db      	lsls	r3, r3, #3
 8002834:	1a9b      	subs	r3, r3, r2
 8002836:	009b      	lsls	r3, r3, #2
 8002838:	440b      	add	r3, r1
 800283a:	f503 53c2 	add.w	r3, r3, #6208	@ 0x1840
 800283e:	3318      	adds	r3, #24
 8002840:	6819      	ldr	r1, [r3, #0]
 8002842:	2301      	movs	r3, #1
 8002844:	9301      	str	r3, [sp, #4]
 8002846:	2307      	movs	r3, #7
 8002848:	9300      	str	r3, [sp, #0]
 800284a:	2307      	movs	r3, #7
 800284c:	4a0b      	ldr	r2, [pc, #44]	@ (800287c <Game_Draw+0x494>)
 800284e:	f7fe faad 	bl	8000dac <GFX_DrowBitMap_P>
						bonus_tracker_shoot_map, 7, 7, 1);
				break;
 8002852:	bf00      	nop
	for (i = 0; i < num_bonus; i++) {
 8002854:	7bfb      	ldrb	r3, [r7, #15]
 8002856:	3301      	adds	r3, #1
 8002858:	73fb      	strb	r3, [r7, #15]
 800285a:	7bfb      	ldrb	r3, [r7, #15]
 800285c:	2b02      	cmp	r3, #2
 800285e:	d99e      	bls.n	800279e <Game_Draw+0x3b6>
			}
		}
	}

}
 8002860:	bf00      	nop
 8002862:	bf00      	nop
 8002864:	3710      	adds	r7, #16
 8002866:	46bd      	mov	sp, r7
 8002868:	bdb0      	pop	{r4, r5, r7, pc}
 800286a:	bf00      	nop
 800286c:	88888889 	.word	0x88888889
 8002870:	08009b44 	.word	0x08009b44
 8002874:	08009b68 	.word	0x08009b68
 8002878:	08009b8c 	.word	0x08009b8c
 800287c:	08009b94 	.word	0x08009b94

08002880 <Game_Level_Update>:

void Game_Level_Update(GameCtx* g) {
 8002880:	b480      	push	{r7}
 8002882:	b083      	sub	sp, #12
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
		 * their initial parameters and adjusts the level of play to its progress.
		 */
		static uint8_t i = 0;

		//Calculation of game progress
		if(i > 70)
 8002888:	4b62      	ldr	r3, [pc, #392]	@ (8002a14 <Game_Level_Update+0x194>)
 800288a:	781b      	ldrb	r3, [r3, #0]
 800288c:	2b46      	cmp	r3, #70	@ 0x46
 800288e:	d907      	bls.n	80028a0 <Game_Level_Update+0x20>
		{
			g->player.game_progres += 1;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	699b      	ldr	r3, [r3, #24]
 8002894:	1c5a      	adds	r2, r3, #1
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	619a      	str	r2, [r3, #24]
			i = 0;
 800289a:	4b5e      	ldr	r3, [pc, #376]	@ (8002a14 <Game_Level_Update+0x194>)
 800289c:	2200      	movs	r2, #0
 800289e:	701a      	strb	r2, [r3, #0]
		}

		//If the boss is not active count the progress
		if(!g->boss.active) i++;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80028a6:	f893 3834 	ldrb.w	r3, [r3, #2100]	@ 0x834
 80028aa:	f083 0301 	eor.w	r3, r3, #1
 80028ae:	b2db      	uxtb	r3, r3
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d005      	beq.n	80028c0 <Game_Level_Update+0x40>
 80028b4:	4b57      	ldr	r3, [pc, #348]	@ (8002a14 <Game_Level_Update+0x194>)
 80028b6:	781b      	ldrb	r3, [r3, #0]
 80028b8:	3301      	adds	r3, #1
 80028ba:	b2da      	uxtb	r2, r3
 80028bc:	4b55      	ldr	r3, [pc, #340]	@ (8002a14 <Game_Level_Update+0x194>)
 80028be:	701a      	strb	r2, [r3, #0]

		//---- Moments of boss appearance -----
		if(g->player.game_progres == 29)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	699b      	ldr	r3, [r3, #24]
 80028c4:	2b1d      	cmp	r3, #29
 80028c6:	d118      	bne.n	80028fa <Game_Level_Update+0x7a>
		{
			g->boss.active = true;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80028ce:	2201      	movs	r2, #1
 80028d0:	f883 2834 	strb.w	r2, [r3, #2100]	@ 0x834
			g->boss.lives = 3;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80028da:	461a      	mov	r2, r3
 80028dc:	2303      	movs	r3, #3
 80028de:	f8c2 3848 	str.w	r3, [r2, #2120]	@ 0x848
			g->boss.update_delay = 4;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80028e8:	461a      	mov	r2, r3
 80028ea:	2304      	movs	r3, #4
 80028ec:	f8c2 3844 	str.w	r3, [r2, #2116]	@ 0x844
			g->player.game_progres += 1;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	699b      	ldr	r3, [r3, #24]
 80028f4:	1c5a      	adds	r2, r3, #1
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	619a      	str	r2, [r3, #24]

		}
		if(g->player.game_progres == 59)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	699b      	ldr	r3, [r3, #24]
 80028fe:	2b3b      	cmp	r3, #59	@ 0x3b
 8002900:	d118      	bne.n	8002934 <Game_Level_Update+0xb4>
		{
			g->boss.active = true;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002908:	2201      	movs	r2, #1
 800290a:	f883 2834 	strb.w	r2, [r3, #2100]	@ 0x834
			g->boss.lives = 6;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002914:	461a      	mov	r2, r3
 8002916:	2306      	movs	r3, #6
 8002918:	f8c2 3848 	str.w	r3, [r2, #2120]	@ 0x848
			g->boss.update_delay = 2;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002922:	461a      	mov	r2, r3
 8002924:	2302      	movs	r3, #2
 8002926:	f8c2 3844 	str.w	r3, [r2, #2116]	@ 0x844
			g->player.game_progres += 1;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	699b      	ldr	r3, [r3, #24]
 800292e:	1c5a      	adds	r2, r3, #1
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	619a      	str	r2, [r3, #24]
		}
		//--------------------------------------

		//Next levels
		if(g->player.game_progres > 9 && g->player.game_progres < 10 )
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	699b      	ldr	r3, [r3, #24]
 8002938:	2b09      	cmp	r3, #9
 800293a:	dd06      	ble.n	800294a <Game_Level_Update+0xca>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	699b      	ldr	r3, [r3, #24]
 8002940:	2b09      	cmp	r3, #9
 8002942:	dc02      	bgt.n	800294a <Game_Level_Update+0xca>
			g->player.level = 1;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2201      	movs	r2, #1
 8002948:	615a      	str	r2, [r3, #20]
		if(g->player.game_progres > 10 && g->player.game_progres < 19)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	699b      	ldr	r3, [r3, #24]
 800294e:	2b0a      	cmp	r3, #10
 8002950:	dd06      	ble.n	8002960 <Game_Level_Update+0xe0>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	699b      	ldr	r3, [r3, #24]
 8002956:	2b12      	cmp	r3, #18
 8002958:	dc02      	bgt.n	8002960 <Game_Level_Update+0xe0>
			g->player.level = 2;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2202      	movs	r2, #2
 800295e:	615a      	str	r2, [r3, #20]
		if(g->player.game_progres > 20 && g->player.game_progres < 29)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	699b      	ldr	r3, [r3, #24]
 8002964:	2b14      	cmp	r3, #20
 8002966:	dd06      	ble.n	8002976 <Game_Level_Update+0xf6>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	699b      	ldr	r3, [r3, #24]
 800296c:	2b1c      	cmp	r3, #28
 800296e:	dc02      	bgt.n	8002976 <Game_Level_Update+0xf6>
			g->player.level = 3;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2203      	movs	r2, #3
 8002974:	615a      	str	r2, [r3, #20]
		if(g->player.game_progres > 30 && g->player.game_progres < 39)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	699b      	ldr	r3, [r3, #24]
 800297a:	2b1e      	cmp	r3, #30
 800297c:	dd06      	ble.n	800298c <Game_Level_Update+0x10c>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	699b      	ldr	r3, [r3, #24]
 8002982:	2b26      	cmp	r3, #38	@ 0x26
 8002984:	dc02      	bgt.n	800298c <Game_Level_Update+0x10c>
			g->player.level = 4;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2204      	movs	r2, #4
 800298a:	615a      	str	r2, [r3, #20]
		if(g->player.game_progres > 40 && g->player.game_progres < 49)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	699b      	ldr	r3, [r3, #24]
 8002990:	2b28      	cmp	r3, #40	@ 0x28
 8002992:	dd06      	ble.n	80029a2 <Game_Level_Update+0x122>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	699b      	ldr	r3, [r3, #24]
 8002998:	2b30      	cmp	r3, #48	@ 0x30
 800299a:	dc02      	bgt.n	80029a2 <Game_Level_Update+0x122>
			g->player.level = 5;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2205      	movs	r2, #5
 80029a0:	615a      	str	r2, [r3, #20]
		if(g->player.game_progres > 50 && g->player.game_progres < 59)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	699b      	ldr	r3, [r3, #24]
 80029a6:	2b32      	cmp	r3, #50	@ 0x32
 80029a8:	dd06      	ble.n	80029b8 <Game_Level_Update+0x138>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	699b      	ldr	r3, [r3, #24]
 80029ae:	2b3a      	cmp	r3, #58	@ 0x3a
 80029b0:	dc02      	bgt.n	80029b8 <Game_Level_Update+0x138>
			g->player.level = 6;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2206      	movs	r2, #6
 80029b6:	615a      	str	r2, [r3, #20]
		if(g->player.game_progres > 60 && g->player.game_progres < 69)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	699b      	ldr	r3, [r3, #24]
 80029bc:	2b3c      	cmp	r3, #60	@ 0x3c
 80029be:	dd06      	ble.n	80029ce <Game_Level_Update+0x14e>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	699b      	ldr	r3, [r3, #24]
 80029c4:	2b44      	cmp	r3, #68	@ 0x44
 80029c6:	dc02      	bgt.n	80029ce <Game_Level_Update+0x14e>
			g->player.level = 7;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2207      	movs	r2, #7
 80029cc:	615a      	str	r2, [r3, #20]
		if(g->player.game_progres > 70 && g->player.game_progres < 79)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	699b      	ldr	r3, [r3, #24]
 80029d2:	2b46      	cmp	r3, #70	@ 0x46
 80029d4:	dd06      	ble.n	80029e4 <Game_Level_Update+0x164>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	699b      	ldr	r3, [r3, #24]
 80029da:	2b4e      	cmp	r3, #78	@ 0x4e
 80029dc:	dc02      	bgt.n	80029e4 <Game_Level_Update+0x164>
			g->player.level = 8;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2208      	movs	r2, #8
 80029e2:	615a      	str	r2, [r3, #20]
		if(g->player.game_progres > 80 && g->player.game_progres < 89)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	699b      	ldr	r3, [r3, #24]
 80029e8:	2b50      	cmp	r3, #80	@ 0x50
 80029ea:	dd06      	ble.n	80029fa <Game_Level_Update+0x17a>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	699b      	ldr	r3, [r3, #24]
 80029f0:	2b58      	cmp	r3, #88	@ 0x58
 80029f2:	dc02      	bgt.n	80029fa <Game_Level_Update+0x17a>
			g->player.level = 9;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2209      	movs	r2, #9
 80029f8:	615a      	str	r2, [r3, #20]
		if(g->player.game_progres > 90)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	699b      	ldr	r3, [r3, #24]
 80029fe:	2b5a      	cmp	r3, #90	@ 0x5a
 8002a00:	dd02      	ble.n	8002a08 <Game_Level_Update+0x188>
			g->player.level = 10;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	220a      	movs	r2, #10
 8002a06:	615a      	str	r2, [r3, #20]

}
 8002a08:	bf00      	nop
 8002a0a:	370c      	adds	r7, #12
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a12:	4770      	bx	lr
 8002a14:	20001941 	.word	0x20001941

08002a18 <Game_Update_Backgrand>:

void Game_Update_Backgrand(GameCtx* g) {
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b084      	sub	sp, #16
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
	 * Refreshes the background effect, stars.
	 * Moves elements and randomises when a new element have to be added.
	 */
	uint8_t i;

	for(i = 0; i < num_background; i++)
 8002a20:	2300      	movs	r3, #0
 8002a22:	73fb      	strb	r3, [r7, #15]
 8002a24:	e07c      	b.n	8002b20 <Game_Update_Backgrand+0x108>
	{
		if(g->background[i].active)
 8002a26:	7bfa      	ldrb	r2, [r7, #15]
 8002a28:	6879      	ldr	r1, [r7, #4]
 8002a2a:	4613      	mov	r3, r2
 8002a2c:	009b      	lsls	r3, r3, #2
 8002a2e:	4413      	add	r3, r2
 8002a30:	009b      	lsls	r3, r3, #2
 8002a32:	440b      	add	r3, r1
 8002a34:	f203 43ac 	addw	r3, r3, #1196	@ 0x4ac
 8002a38:	781b      	ldrb	r3, [r3, #0]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d06d      	beq.n	8002b1a <Game_Update_Backgrand+0x102>
		{
			g->background[i].next_update -= 1;
 8002a3e:	7bfa      	ldrb	r2, [r7, #15]
 8002a40:	6879      	ldr	r1, [r7, #4]
 8002a42:	4613      	mov	r3, r2
 8002a44:	009b      	lsls	r3, r3, #2
 8002a46:	4413      	add	r3, r2
 8002a48:	009b      	lsls	r3, r3, #2
 8002a4a:	440b      	add	r3, r1
 8002a4c:	f503 6397 	add.w	r3, r3, #1208	@ 0x4b8
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	7bfa      	ldrb	r2, [r7, #15]
 8002a54:	1e59      	subs	r1, r3, #1
 8002a56:	6878      	ldr	r0, [r7, #4]
 8002a58:	4613      	mov	r3, r2
 8002a5a:	009b      	lsls	r3, r3, #2
 8002a5c:	4413      	add	r3, r2
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	4403      	add	r3, r0
 8002a62:	f503 6397 	add.w	r3, r3, #1208	@ 0x4b8
 8002a66:	6019      	str	r1, [r3, #0]
			if(g->background[i].next_update <= 0)
 8002a68:	7bfa      	ldrb	r2, [r7, #15]
 8002a6a:	6879      	ldr	r1, [r7, #4]
 8002a6c:	4613      	mov	r3, r2
 8002a6e:	009b      	lsls	r3, r3, #2
 8002a70:	4413      	add	r3, r2
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	440b      	add	r3, r1
 8002a76:	f503 6397 	add.w	r3, r3, #1208	@ 0x4b8
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	dc4c      	bgt.n	8002b1a <Game_Update_Backgrand+0x102>
			{
				g->background[i].next_update = g->background[i].update_delay;
 8002a80:	7bf9      	ldrb	r1, [r7, #15]
 8002a82:	7bfa      	ldrb	r2, [r7, #15]
 8002a84:	6878      	ldr	r0, [r7, #4]
 8002a86:	460b      	mov	r3, r1
 8002a88:	009b      	lsls	r3, r3, #2
 8002a8a:	440b      	add	r3, r1
 8002a8c:	009b      	lsls	r3, r3, #2
 8002a8e:	4403      	add	r3, r0
 8002a90:	f203 43bc 	addw	r3, r3, #1212	@ 0x4bc
 8002a94:	6819      	ldr	r1, [r3, #0]
 8002a96:	6878      	ldr	r0, [r7, #4]
 8002a98:	4613      	mov	r3, r2
 8002a9a:	009b      	lsls	r3, r3, #2
 8002a9c:	4413      	add	r3, r2
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	4403      	add	r3, r0
 8002aa2:	f503 6397 	add.w	r3, r3, #1208	@ 0x4b8
 8002aa6:	6019      	str	r1, [r3, #0]
				if(g->background[i].active)
 8002aa8:	7bfa      	ldrb	r2, [r7, #15]
 8002aaa:	6879      	ldr	r1, [r7, #4]
 8002aac:	4613      	mov	r3, r2
 8002aae:	009b      	lsls	r3, r3, #2
 8002ab0:	4413      	add	r3, r2
 8002ab2:	009b      	lsls	r3, r3, #2
 8002ab4:	440b      	add	r3, r1
 8002ab6:	f203 43ac 	addw	r3, r3, #1196	@ 0x4ac
 8002aba:	781b      	ldrb	r3, [r3, #0]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d02c      	beq.n	8002b1a <Game_Update_Backgrand+0x102>
				{
					g->background[i].x -= 1;
 8002ac0:	7bfa      	ldrb	r2, [r7, #15]
 8002ac2:	6879      	ldr	r1, [r7, #4]
 8002ac4:	4613      	mov	r3, r2
 8002ac6:	009b      	lsls	r3, r3, #2
 8002ac8:	4413      	add	r3, r2
 8002aca:	009b      	lsls	r3, r3, #2
 8002acc:	440b      	add	r3, r1
 8002ace:	f503 6396 	add.w	r3, r3, #1200	@ 0x4b0
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	7bfa      	ldrb	r2, [r7, #15]
 8002ad6:	1e59      	subs	r1, r3, #1
 8002ad8:	6878      	ldr	r0, [r7, #4]
 8002ada:	4613      	mov	r3, r2
 8002adc:	009b      	lsls	r3, r3, #2
 8002ade:	4413      	add	r3, r2
 8002ae0:	009b      	lsls	r3, r3, #2
 8002ae2:	4403      	add	r3, r0
 8002ae4:	f503 6396 	add.w	r3, r3, #1200	@ 0x4b0
 8002ae8:	6019      	str	r1, [r3, #0]

					if(g->background[i].x <= -2)
 8002aea:	7bfa      	ldrb	r2, [r7, #15]
 8002aec:	6879      	ldr	r1, [r7, #4]
 8002aee:	4613      	mov	r3, r2
 8002af0:	009b      	lsls	r3, r3, #2
 8002af2:	4413      	add	r3, r2
 8002af4:	009b      	lsls	r3, r3, #2
 8002af6:	440b      	add	r3, r1
 8002af8:	f503 6396 	add.w	r3, r3, #1200	@ 0x4b0
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b02:	da0a      	bge.n	8002b1a <Game_Update_Backgrand+0x102>
						g->background[i].active = false;
 8002b04:	7bfa      	ldrb	r2, [r7, #15]
 8002b06:	6879      	ldr	r1, [r7, #4]
 8002b08:	4613      	mov	r3, r2
 8002b0a:	009b      	lsls	r3, r3, #2
 8002b0c:	4413      	add	r3, r2
 8002b0e:	009b      	lsls	r3, r3, #2
 8002b10:	440b      	add	r3, r1
 8002b12:	f203 43ac 	addw	r3, r3, #1196	@ 0x4ac
 8002b16:	2200      	movs	r2, #0
 8002b18:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < num_background; i++)
 8002b1a:	7bfb      	ldrb	r3, [r7, #15]
 8002b1c:	3301      	adds	r3, #1
 8002b1e:	73fb      	strb	r3, [r7, #15]
 8002b20:	7bfb      	ldrb	r3, [r7, #15]
 8002b22:	2bf9      	cmp	r3, #249	@ 0xf9
 8002b24:	f67f af7f 	bls.w	8002a26 <Game_Update_Backgrand+0xe>
				}
			}
		}
	}

	if ((rand()%100) < num_background_freq) 		//Frequency of background additions
 8002b28:	f004 fd0e 	bl	8007548 <rand>
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	4b09      	ldr	r3, [pc, #36]	@ (8002b54 <Game_Update_Backgrand+0x13c>)
 8002b30:	fb83 1302 	smull	r1, r3, r3, r2
 8002b34:	1159      	asrs	r1, r3, #5
 8002b36:	17d3      	asrs	r3, r2, #31
 8002b38:	1acb      	subs	r3, r1, r3
 8002b3a:	2164      	movs	r1, #100	@ 0x64
 8002b3c:	fb01 f303 	mul.w	r3, r1, r3
 8002b40:	1ad3      	subs	r3, r2, r3
 8002b42:	2b0b      	cmp	r3, #11
 8002b44:	dc02      	bgt.n	8002b4c <Game_Update_Backgrand+0x134>
		Game_Add_Background(g);//add_background();
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	f000 f806 	bl	8002b58 <Game_Add_Background>

}
 8002b4c:	bf00      	nop
 8002b4e:	3710      	adds	r7, #16
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}
 8002b54:	51eb851f 	.word	0x51eb851f

08002b58 <Game_Add_Background>:

void Game_Add_Background(GameCtx* g){
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b084      	sub	sp, #16
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
	 * In addition, it sets the random parameters for its
	 * refreshment and a random position on the Y axis.
	 */
	uint8_t i;

	for(i = 0; i < num_background; i++)
 8002b60:	2300      	movs	r3, #0
 8002b62:	73fb      	strb	r3, [r7, #15]
 8002b64:	e059      	b.n	8002c1a <Game_Add_Background+0xc2>
	{
		if(!g->background[i].active)
 8002b66:	7bfa      	ldrb	r2, [r7, #15]
 8002b68:	6879      	ldr	r1, [r7, #4]
 8002b6a:	4613      	mov	r3, r2
 8002b6c:	009b      	lsls	r3, r3, #2
 8002b6e:	4413      	add	r3, r2
 8002b70:	009b      	lsls	r3, r3, #2
 8002b72:	440b      	add	r3, r1
 8002b74:	f203 43ac 	addw	r3, r3, #1196	@ 0x4ac
 8002b78:	781b      	ldrb	r3, [r3, #0]
 8002b7a:	f083 0301 	eor.w	r3, r3, #1
 8002b7e:	b2db      	uxtb	r3, r3
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d047      	beq.n	8002c14 <Game_Add_Background+0xbc>
		{
			g->background[i].active 		= true;
 8002b84:	7bfa      	ldrb	r2, [r7, #15]
 8002b86:	6879      	ldr	r1, [r7, #4]
 8002b88:	4613      	mov	r3, r2
 8002b8a:	009b      	lsls	r3, r3, #2
 8002b8c:	4413      	add	r3, r2
 8002b8e:	009b      	lsls	r3, r3, #2
 8002b90:	440b      	add	r3, r1
 8002b92:	f203 43ac 	addw	r3, r3, #1196	@ 0x4ac
 8002b96:	2201      	movs	r2, #1
 8002b98:	701a      	strb	r2, [r3, #0]
			g->background[i].x 				= 128;
 8002b9a:	7bfa      	ldrb	r2, [r7, #15]
 8002b9c:	6879      	ldr	r1, [r7, #4]
 8002b9e:	4613      	mov	r3, r2
 8002ba0:	009b      	lsls	r3, r3, #2
 8002ba2:	4413      	add	r3, r2
 8002ba4:	009b      	lsls	r3, r3, #2
 8002ba6:	440b      	add	r3, r1
 8002ba8:	f503 6396 	add.w	r3, r3, #1200	@ 0x4b0
 8002bac:	2280      	movs	r2, #128	@ 0x80
 8002bae:	601a      	str	r2, [r3, #0]
			g->background[i].y				= (rand()%(screen_height-10)) +10;
 8002bb0:	f004 fcca 	bl	8007548 <rand>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	4b1d      	ldr	r3, [pc, #116]	@ (8002c2c <Game_Add_Background+0xd4>)
 8002bb8:	fb83 1302 	smull	r1, r3, r3, r2
 8002bbc:	1119      	asrs	r1, r3, #4
 8002bbe:	17d3      	asrs	r3, r2, #31
 8002bc0:	1acb      	subs	r3, r1, r3
 8002bc2:	2176      	movs	r1, #118	@ 0x76
 8002bc4:	fb01 f303 	mul.w	r3, r1, r3
 8002bc8:	1ad3      	subs	r3, r2, r3
 8002bca:	7bfa      	ldrb	r2, [r7, #15]
 8002bcc:	f103 010a 	add.w	r1, r3, #10
 8002bd0:	6878      	ldr	r0, [r7, #4]
 8002bd2:	4613      	mov	r3, r2
 8002bd4:	009b      	lsls	r3, r3, #2
 8002bd6:	4413      	add	r3, r2
 8002bd8:	009b      	lsls	r3, r3, #2
 8002bda:	4403      	add	r3, r0
 8002bdc:	f203 43b4 	addw	r3, r3, #1204	@ 0x4b4
 8002be0:	6019      	str	r1, [r3, #0]
			g->background[i].update_delay 	= (rand()%6)+2; // def. (rand()%4)+2;
 8002be2:	f004 fcb1 	bl	8007548 <rand>
 8002be6:	4601      	mov	r1, r0
 8002be8:	4b11      	ldr	r3, [pc, #68]	@ (8002c30 <Game_Add_Background+0xd8>)
 8002bea:	fb83 3201 	smull	r3, r2, r3, r1
 8002bee:	17cb      	asrs	r3, r1, #31
 8002bf0:	1ad2      	subs	r2, r2, r3
 8002bf2:	4613      	mov	r3, r2
 8002bf4:	005b      	lsls	r3, r3, #1
 8002bf6:	4413      	add	r3, r2
 8002bf8:	005b      	lsls	r3, r3, #1
 8002bfa:	1aca      	subs	r2, r1, r3
 8002bfc:	7bf9      	ldrb	r1, [r7, #15]
 8002bfe:	3202      	adds	r2, #2
 8002c00:	6878      	ldr	r0, [r7, #4]
 8002c02:	460b      	mov	r3, r1
 8002c04:	009b      	lsls	r3, r3, #2
 8002c06:	440b      	add	r3, r1
 8002c08:	009b      	lsls	r3, r3, #2
 8002c0a:	4403      	add	r3, r0
 8002c0c:	f203 43bc 	addw	r3, r3, #1212	@ 0x4bc
 8002c10:	601a      	str	r2, [r3, #0]

			break;
 8002c12:	e006      	b.n	8002c22 <Game_Add_Background+0xca>
	for(i = 0; i < num_background; i++)
 8002c14:	7bfb      	ldrb	r3, [r7, #15]
 8002c16:	3301      	adds	r3, #1
 8002c18:	73fb      	strb	r3, [r7, #15]
 8002c1a:	7bfb      	ldrb	r3, [r7, #15]
 8002c1c:	2bf9      	cmp	r3, #249	@ 0xf9
 8002c1e:	d9a2      	bls.n	8002b66 <Game_Add_Background+0xe>
		}
	}
}
 8002c20:	bf00      	nop
 8002c22:	bf00      	nop
 8002c24:	3710      	adds	r7, #16
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}
 8002c2a:	bf00      	nop
 8002c2c:	22b63cbf 	.word	0x22b63cbf
 8002c30:	2aaaaaab 	.word	0x2aaaaaab

08002c34 <Game_Add_Bonus>:

void Game_Add_Bonus(GameCtx* g, int x, int y){
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b086      	sub	sp, #24
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	60f8      	str	r0, [r7, #12]
 8002c3c:	60b9      	str	r1, [r7, #8]
 8002c3e:	607a      	str	r2, [r7, #4]
	 */

	uint8_t i;
	int bonus_type;

	for (i = 0; i < num_bonus; i++)
 8002c40:	2300      	movs	r3, #0
 8002c42:	75fb      	strb	r3, [r7, #23]
 8002c44:	e085      	b.n	8002d52 <Game_Add_Bonus+0x11e>
	{
		if (!g->bonuses[i].active)
 8002c46:	7dfa      	ldrb	r2, [r7, #23]
 8002c48:	68f9      	ldr	r1, [r7, #12]
 8002c4a:	4613      	mov	r3, r2
 8002c4c:	00db      	lsls	r3, r3, #3
 8002c4e:	1a9b      	subs	r3, r3, r2
 8002c50:	009b      	lsls	r3, r3, #2
 8002c52:	440b      	add	r3, r1
 8002c54:	f503 53c2 	add.w	r3, r3, #6208	@ 0x1840
 8002c58:	3310      	adds	r3, #16
 8002c5a:	781b      	ldrb	r3, [r3, #0]
 8002c5c:	f083 0301 	eor.w	r3, r3, #1
 8002c60:	b2db      	uxtb	r3, r3
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d072      	beq.n	8002d4c <Game_Add_Bonus+0x118>
		{
			g->bonuses[i].active = true;
 8002c66:	7dfa      	ldrb	r2, [r7, #23]
 8002c68:	68f9      	ldr	r1, [r7, #12]
 8002c6a:	4613      	mov	r3, r2
 8002c6c:	00db      	lsls	r3, r3, #3
 8002c6e:	1a9b      	subs	r3, r3, r2
 8002c70:	009b      	lsls	r3, r3, #2
 8002c72:	440b      	add	r3, r1
 8002c74:	f503 53c2 	add.w	r3, r3, #6208	@ 0x1840
 8002c78:	3310      	adds	r3, #16
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	701a      	strb	r2, [r3, #0]
			g->bonuses[i].x = x;
 8002c7e:	7dfa      	ldrb	r2, [r7, #23]
 8002c80:	68f9      	ldr	r1, [r7, #12]
 8002c82:	4613      	mov	r3, r2
 8002c84:	00db      	lsls	r3, r3, #3
 8002c86:	1a9b      	subs	r3, r3, r2
 8002c88:	009b      	lsls	r3, r3, #2
 8002c8a:	440b      	add	r3, r1
 8002c8c:	f503 53c2 	add.w	r3, r3, #6208	@ 0x1840
 8002c90:	3314      	adds	r3, #20
 8002c92:	68ba      	ldr	r2, [r7, #8]
 8002c94:	601a      	str	r2, [r3, #0]
			g->bonuses[i].y = y;
 8002c96:	7dfa      	ldrb	r2, [r7, #23]
 8002c98:	68f9      	ldr	r1, [r7, #12]
 8002c9a:	4613      	mov	r3, r2
 8002c9c:	00db      	lsls	r3, r3, #3
 8002c9e:	1a9b      	subs	r3, r3, r2
 8002ca0:	009b      	lsls	r3, r3, #2
 8002ca2:	440b      	add	r3, r1
 8002ca4:	f503 53c2 	add.w	r3, r3, #6208	@ 0x1840
 8002ca8:	3318      	adds	r3, #24
 8002caa:	687a      	ldr	r2, [r7, #4]
 8002cac:	601a      	str	r2, [r3, #0]
			g->bonuses[i].update_delay = 3;
 8002cae:	7dfa      	ldrb	r2, [r7, #23]
 8002cb0:	68f9      	ldr	r1, [r7, #12]
 8002cb2:	4613      	mov	r3, r2
 8002cb4:	00db      	lsls	r3, r3, #3
 8002cb6:	1a9b      	subs	r3, r3, r2
 8002cb8:	009b      	lsls	r3, r3, #2
 8002cba:	440b      	add	r3, r1
 8002cbc:	f503 53c3 	add.w	r3, r3, #6240	@ 0x1860
 8002cc0:	3308      	adds	r3, #8
 8002cc2:	2203      	movs	r2, #3
 8002cc4:	601a      	str	r2, [r3, #0]

			bonus_type = rand()%100;
 8002cc6:	f004 fc3f 	bl	8007548 <rand>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	4a25      	ldr	r2, [pc, #148]	@ (8002d64 <Game_Add_Bonus+0x130>)
 8002cce:	fb82 1203 	smull	r1, r2, r2, r3
 8002cd2:	1151      	asrs	r1, r2, #5
 8002cd4:	17da      	asrs	r2, r3, #31
 8002cd6:	1a8a      	subs	r2, r1, r2
 8002cd8:	2164      	movs	r1, #100	@ 0x64
 8002cda:	fb01 f202 	mul.w	r2, r1, r2
 8002cde:	1a9b      	subs	r3, r3, r2
 8002ce0:	613b      	str	r3, [r7, #16]

			if(bonus_type > 30)
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	2b1e      	cmp	r3, #30
 8002ce6:	dd16      	ble.n	8002d16 <Game_Add_Bonus+0xe2>
			{
				g->bonuses[i].bit_map = bonus_live_map;
 8002ce8:	7dfa      	ldrb	r2, [r7, #23]
 8002cea:	68f9      	ldr	r1, [r7, #12]
 8002cec:	4613      	mov	r3, r2
 8002cee:	00db      	lsls	r3, r3, #3
 8002cf0:	1a9b      	subs	r3, r3, r2
 8002cf2:	009b      	lsls	r3, r3, #2
 8002cf4:	440b      	add	r3, r1
 8002cf6:	f503 53c3 	add.w	r3, r3, #6240	@ 0x1860
 8002cfa:	4a1b      	ldr	r2, [pc, #108]	@ (8002d68 <Game_Add_Bonus+0x134>)
 8002cfc:	601a      	str	r2, [r3, #0]
				g->bonuses[i].type = st_normal;
 8002cfe:	7dfa      	ldrb	r2, [r7, #23]
 8002d00:	68f9      	ldr	r1, [r7, #12]
 8002d02:	4613      	mov	r3, r2
 8002d04:	00db      	lsls	r3, r3, #3
 8002d06:	1a9b      	subs	r3, r3, r2
 8002d08:	009b      	lsls	r3, r3, #2
 8002d0a:	440b      	add	r3, r1
 8002d0c:	f503 53c2 	add.w	r3, r3, #6208	@ 0x1840
 8002d10:	331c      	adds	r3, #28
 8002d12:	2200      	movs	r2, #0
 8002d14:	701a      	strb	r2, [r3, #0]
			}
			if(bonus_type < 30)
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	2b1d      	cmp	r3, #29
 8002d1a:	dc1f      	bgt.n	8002d5c <Game_Add_Bonus+0x128>
			{
				g->bonuses[i].bit_map = bonus_tracker_shoot_map;
 8002d1c:	7dfa      	ldrb	r2, [r7, #23]
 8002d1e:	68f9      	ldr	r1, [r7, #12]
 8002d20:	4613      	mov	r3, r2
 8002d22:	00db      	lsls	r3, r3, #3
 8002d24:	1a9b      	subs	r3, r3, r2
 8002d26:	009b      	lsls	r3, r3, #2
 8002d28:	440b      	add	r3, r1
 8002d2a:	f503 53c3 	add.w	r3, r3, #6240	@ 0x1860
 8002d2e:	4a0f      	ldr	r2, [pc, #60]	@ (8002d6c <Game_Add_Bonus+0x138>)
 8002d30:	601a      	str	r2, [r3, #0]
				g->bonuses[i].type = st_tracker;
 8002d32:	7dfa      	ldrb	r2, [r7, #23]
 8002d34:	68f9      	ldr	r1, [r7, #12]
 8002d36:	4613      	mov	r3, r2
 8002d38:	00db      	lsls	r3, r3, #3
 8002d3a:	1a9b      	subs	r3, r3, r2
 8002d3c:	009b      	lsls	r3, r3, #2
 8002d3e:	440b      	add	r3, r1
 8002d40:	f503 53c2 	add.w	r3, r3, #6208	@ 0x1840
 8002d44:	331c      	adds	r3, #28
 8002d46:	2201      	movs	r2, #1
 8002d48:	701a      	strb	r2, [r3, #0]
			}
			return;
 8002d4a:	e007      	b.n	8002d5c <Game_Add_Bonus+0x128>
	for (i = 0; i < num_bonus; i++)
 8002d4c:	7dfb      	ldrb	r3, [r7, #23]
 8002d4e:	3301      	adds	r3, #1
 8002d50:	75fb      	strb	r3, [r7, #23]
 8002d52:	7dfb      	ldrb	r3, [r7, #23]
 8002d54:	2b02      	cmp	r3, #2
 8002d56:	f67f af76 	bls.w	8002c46 <Game_Add_Bonus+0x12>
 8002d5a:	e000      	b.n	8002d5e <Game_Add_Bonus+0x12a>
			return;
 8002d5c:	bf00      	nop
		}
	}
}
 8002d5e:	3718      	adds	r7, #24
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}
 8002d64:	51eb851f 	.word	0x51eb851f
 8002d68:	08009b8c 	.word	0x08009b8c
 8002d6c:	08009b94 	.word	0x08009b94

08002d70 <Game_Update_Bonus>:

void Game_Update_Bonus(GameCtx* g){
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b084      	sub	sp, #16
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
	/*
		 * Checking whether a player has hovered over a bonus.
		 * Moving a bonus on the map
		 * */
		int i = 0;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	60fb      	str	r3, [r7, #12]

		//Check duration of st_tracekr if active

		if(g->player.bonus_duration > 0)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6a1b      	ldr	r3, [r3, #32]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	dd04      	ble.n	8002d8e <Game_Update_Bonus+0x1e>
			g->player.bonus_duration -= 1;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6a1b      	ldr	r3, [r3, #32]
 8002d88:	1e5a      	subs	r2, r3, #1
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	621a      	str	r2, [r3, #32]
		if(g->player.bonus_duration == 0 && g->player.shoot_type == st_tracker)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6a1b      	ldr	r3, [r3, #32]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d106      	bne.n	8002da4 <Game_Update_Bonus+0x34>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	7f1b      	ldrb	r3, [r3, #28]
 8002d9a:	2b01      	cmp	r3, #1
 8002d9c:	d102      	bne.n	8002da4 <Game_Update_Bonus+0x34>
			g->player.shoot_type = st_normal;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2200      	movs	r2, #0
 8002da2:	771a      	strb	r2, [r3, #28]

		// Checking whether a player has hovered over a bonus
		for (i = 0; i < num_bonus; i++)
 8002da4:	2300      	movs	r3, #0
 8002da6:	60fb      	str	r3, [r7, #12]
 8002da8:	e145      	b.n	8003036 <Game_Update_Bonus+0x2c6>
		{
			if(g->bonuses[i].active)
 8002daa:	6879      	ldr	r1, [r7, #4]
 8002dac:	68fa      	ldr	r2, [r7, #12]
 8002dae:	4613      	mov	r3, r2
 8002db0:	00db      	lsls	r3, r3, #3
 8002db2:	1a9b      	subs	r3, r3, r2
 8002db4:	009b      	lsls	r3, r3, #2
 8002db6:	440b      	add	r3, r1
 8002db8:	f503 53c2 	add.w	r3, r3, #6208	@ 0x1840
 8002dbc:	3310      	adds	r3, #16
 8002dbe:	781b      	ldrb	r3, [r3, #0]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	f000 8135 	beq.w	8003030 <Game_Update_Bonus+0x2c0>
			{
				g->bonuses[i].next_update -= 1;
 8002dc6:	6879      	ldr	r1, [r7, #4]
 8002dc8:	68fa      	ldr	r2, [r7, #12]
 8002dca:	4613      	mov	r3, r2
 8002dcc:	00db      	lsls	r3, r3, #3
 8002dce:	1a9b      	subs	r3, r3, r2
 8002dd0:	009b      	lsls	r3, r3, #2
 8002dd2:	440b      	add	r3, r1
 8002dd4:	f503 53c3 	add.w	r3, r3, #6240	@ 0x1860
 8002dd8:	3304      	adds	r3, #4
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	1e59      	subs	r1, r3, #1
 8002dde:	6878      	ldr	r0, [r7, #4]
 8002de0:	68fa      	ldr	r2, [r7, #12]
 8002de2:	4613      	mov	r3, r2
 8002de4:	00db      	lsls	r3, r3, #3
 8002de6:	1a9b      	subs	r3, r3, r2
 8002de8:	009b      	lsls	r3, r3, #2
 8002dea:	4403      	add	r3, r0
 8002dec:	f503 53c3 	add.w	r3, r3, #6240	@ 0x1860
 8002df0:	3304      	adds	r3, #4
 8002df2:	6019      	str	r1, [r3, #0]
				if(g->bonuses[i].next_update <= 0)
 8002df4:	6879      	ldr	r1, [r7, #4]
 8002df6:	68fa      	ldr	r2, [r7, #12]
 8002df8:	4613      	mov	r3, r2
 8002dfa:	00db      	lsls	r3, r3, #3
 8002dfc:	1a9b      	subs	r3, r3, r2
 8002dfe:	009b      	lsls	r3, r3, #2
 8002e00:	440b      	add	r3, r1
 8002e02:	f503 53c3 	add.w	r3, r3, #6240	@ 0x1860
 8002e06:	3304      	adds	r3, #4
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	f300 8110 	bgt.w	8003030 <Game_Update_Bonus+0x2c0>
				{
					if(g->bonuses[i].active)
 8002e10:	6879      	ldr	r1, [r7, #4]
 8002e12:	68fa      	ldr	r2, [r7, #12]
 8002e14:	4613      	mov	r3, r2
 8002e16:	00db      	lsls	r3, r3, #3
 8002e18:	1a9b      	subs	r3, r3, r2
 8002e1a:	009b      	lsls	r3, r3, #2
 8002e1c:	440b      	add	r3, r1
 8002e1e:	f503 53c2 	add.w	r3, r3, #6208	@ 0x1840
 8002e22:	3310      	adds	r3, #16
 8002e24:	781b      	ldrb	r3, [r3, #0]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	f000 8102 	beq.w	8003030 <Game_Update_Bonus+0x2c0>
					{
						g->bonuses[i].next_update = g->bonuses[i].update_delay;
 8002e2c:	6879      	ldr	r1, [r7, #4]
 8002e2e:	68fa      	ldr	r2, [r7, #12]
 8002e30:	4613      	mov	r3, r2
 8002e32:	00db      	lsls	r3, r3, #3
 8002e34:	1a9b      	subs	r3, r3, r2
 8002e36:	009b      	lsls	r3, r3, #2
 8002e38:	440b      	add	r3, r1
 8002e3a:	f503 53c3 	add.w	r3, r3, #6240	@ 0x1860
 8002e3e:	3308      	adds	r3, #8
 8002e40:	6819      	ldr	r1, [r3, #0]
 8002e42:	6878      	ldr	r0, [r7, #4]
 8002e44:	68fa      	ldr	r2, [r7, #12]
 8002e46:	4613      	mov	r3, r2
 8002e48:	00db      	lsls	r3, r3, #3
 8002e4a:	1a9b      	subs	r3, r3, r2
 8002e4c:	009b      	lsls	r3, r3, #2
 8002e4e:	4403      	add	r3, r0
 8002e50:	f503 53c3 	add.w	r3, r3, #6240	@ 0x1860
 8002e54:	3304      	adds	r3, #4
 8002e56:	6019      	str	r1, [r3, #0]

						if (colliding(g->bonuses[i].x,g->bonuses[i].y, g->player.x, g->player.y) 	||
 8002e58:	6879      	ldr	r1, [r7, #4]
 8002e5a:	68fa      	ldr	r2, [r7, #12]
 8002e5c:	4613      	mov	r3, r2
 8002e5e:	00db      	lsls	r3, r3, #3
 8002e60:	1a9b      	subs	r3, r3, r2
 8002e62:	009b      	lsls	r3, r3, #2
 8002e64:	440b      	add	r3, r1
 8002e66:	f503 53c2 	add.w	r3, r3, #6208	@ 0x1840
 8002e6a:	3314      	adds	r3, #20
 8002e6c:	6818      	ldr	r0, [r3, #0]
 8002e6e:	6879      	ldr	r1, [r7, #4]
 8002e70:	68fa      	ldr	r2, [r7, #12]
 8002e72:	4613      	mov	r3, r2
 8002e74:	00db      	lsls	r3, r3, #3
 8002e76:	1a9b      	subs	r3, r3, r2
 8002e78:	009b      	lsls	r3, r3, #2
 8002e7a:	440b      	add	r3, r1
 8002e7c:	f503 53c2 	add.w	r3, r3, #6208	@ 0x1840
 8002e80:	3318      	adds	r3, #24
 8002e82:	6819      	ldr	r1, [r3, #0]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681a      	ldr	r2, [r3, #0]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	f000 fa4e 	bl	800332c <colliding>
 8002e90:	4603      	mov	r3, r0
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d160      	bne.n	8002f58 <Game_Update_Bonus+0x1e8>
							colliding(g->bonuses[i].x,g->bonuses[i].y, g->player.x, g->player.y+5) 	||
 8002e96:	6879      	ldr	r1, [r7, #4]
 8002e98:	68fa      	ldr	r2, [r7, #12]
 8002e9a:	4613      	mov	r3, r2
 8002e9c:	00db      	lsls	r3, r3, #3
 8002e9e:	1a9b      	subs	r3, r3, r2
 8002ea0:	009b      	lsls	r3, r3, #2
 8002ea2:	440b      	add	r3, r1
 8002ea4:	f503 53c2 	add.w	r3, r3, #6208	@ 0x1840
 8002ea8:	3314      	adds	r3, #20
 8002eaa:	6818      	ldr	r0, [r3, #0]
 8002eac:	6879      	ldr	r1, [r7, #4]
 8002eae:	68fa      	ldr	r2, [r7, #12]
 8002eb0:	4613      	mov	r3, r2
 8002eb2:	00db      	lsls	r3, r3, #3
 8002eb4:	1a9b      	subs	r3, r3, r2
 8002eb6:	009b      	lsls	r3, r3, #2
 8002eb8:	440b      	add	r3, r1
 8002eba:	f503 53c2 	add.w	r3, r3, #6208	@ 0x1840
 8002ebe:	3318      	adds	r3, #24
 8002ec0:	6819      	ldr	r1, [r3, #0]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	3305      	adds	r3, #5
 8002ecc:	f000 fa2e 	bl	800332c <colliding>
 8002ed0:	4603      	mov	r3, r0
						if (colliding(g->bonuses[i].x,g->bonuses[i].y, g->player.x, g->player.y) 	||
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d140      	bne.n	8002f58 <Game_Update_Bonus+0x1e8>
							colliding(g->bonuses[i].x,g->bonuses[i].y, g->player.x+7, g->player.y)	||
 8002ed6:	6879      	ldr	r1, [r7, #4]
 8002ed8:	68fa      	ldr	r2, [r7, #12]
 8002eda:	4613      	mov	r3, r2
 8002edc:	00db      	lsls	r3, r3, #3
 8002ede:	1a9b      	subs	r3, r3, r2
 8002ee0:	009b      	lsls	r3, r3, #2
 8002ee2:	440b      	add	r3, r1
 8002ee4:	f503 53c2 	add.w	r3, r3, #6208	@ 0x1840
 8002ee8:	3314      	adds	r3, #20
 8002eea:	6818      	ldr	r0, [r3, #0]
 8002eec:	6879      	ldr	r1, [r7, #4]
 8002eee:	68fa      	ldr	r2, [r7, #12]
 8002ef0:	4613      	mov	r3, r2
 8002ef2:	00db      	lsls	r3, r3, #3
 8002ef4:	1a9b      	subs	r3, r3, r2
 8002ef6:	009b      	lsls	r3, r3, #2
 8002ef8:	440b      	add	r3, r1
 8002efa:	f503 53c2 	add.w	r3, r3, #6208	@ 0x1840
 8002efe:	3318      	adds	r3, #24
 8002f00:	6819      	ldr	r1, [r3, #0]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	1dda      	adds	r2, r3, #7
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	f000 fa0e 	bl	800332c <colliding>
 8002f10:	4603      	mov	r3, r0
							colliding(g->bonuses[i].x,g->bonuses[i].y, g->player.x, g->player.y+5) 	||
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d120      	bne.n	8002f58 <Game_Update_Bonus+0x1e8>
							colliding(g->bonuses[i].x,g->bonuses[i].y, g->player.x+7, g->player.y+5)
 8002f16:	6879      	ldr	r1, [r7, #4]
 8002f18:	68fa      	ldr	r2, [r7, #12]
 8002f1a:	4613      	mov	r3, r2
 8002f1c:	00db      	lsls	r3, r3, #3
 8002f1e:	1a9b      	subs	r3, r3, r2
 8002f20:	009b      	lsls	r3, r3, #2
 8002f22:	440b      	add	r3, r1
 8002f24:	f503 53c2 	add.w	r3, r3, #6208	@ 0x1840
 8002f28:	3314      	adds	r3, #20
 8002f2a:	6818      	ldr	r0, [r3, #0]
 8002f2c:	6879      	ldr	r1, [r7, #4]
 8002f2e:	68fa      	ldr	r2, [r7, #12]
 8002f30:	4613      	mov	r3, r2
 8002f32:	00db      	lsls	r3, r3, #3
 8002f34:	1a9b      	subs	r3, r3, r2
 8002f36:	009b      	lsls	r3, r3, #2
 8002f38:	440b      	add	r3, r1
 8002f3a:	f503 53c2 	add.w	r3, r3, #6208	@ 0x1840
 8002f3e:	3318      	adds	r3, #24
 8002f40:	6819      	ldr	r1, [r3, #0]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	1dda      	adds	r2, r3, #7
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	3305      	adds	r3, #5
 8002f4e:	f000 f9ed 	bl	800332c <colliding>
 8002f52:	4603      	mov	r3, r0
							colliding(g->bonuses[i].x,g->bonuses[i].y, g->player.x+7, g->player.y)	||
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d03a      	beq.n	8002fce <Game_Update_Bonus+0x25e>
							)
						{
							switch(g->bonuses[i].type)
 8002f58:	6879      	ldr	r1, [r7, #4]
 8002f5a:	68fa      	ldr	r2, [r7, #12]
 8002f5c:	4613      	mov	r3, r2
 8002f5e:	00db      	lsls	r3, r3, #3
 8002f60:	1a9b      	subs	r3, r3, r2
 8002f62:	009b      	lsls	r3, r3, #2
 8002f64:	440b      	add	r3, r1
 8002f66:	f503 53c2 	add.w	r3, r3, #6208	@ 0x1840
 8002f6a:	331c      	adds	r3, #28
 8002f6c:	781b      	ldrb	r3, [r3, #0]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d002      	beq.n	8002f78 <Game_Update_Bonus+0x208>
 8002f72:	2b01      	cmp	r3, #1
 8002f74:	d012      	beq.n	8002f9c <Game_Update_Bonus+0x22c>
 8002f76:	e02a      	b.n	8002fce <Game_Update_Bonus+0x25e>
							{
							case bt_live:
								g->player.lives += 1;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	691b      	ldr	r3, [r3, #16]
 8002f7c:	1c5a      	adds	r2, r3, #1
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	611a      	str	r2, [r3, #16]
								g->bonuses[i].active = false;
 8002f82:	6879      	ldr	r1, [r7, #4]
 8002f84:	68fa      	ldr	r2, [r7, #12]
 8002f86:	4613      	mov	r3, r2
 8002f88:	00db      	lsls	r3, r3, #3
 8002f8a:	1a9b      	subs	r3, r3, r2
 8002f8c:	009b      	lsls	r3, r3, #2
 8002f8e:	440b      	add	r3, r1
 8002f90:	f503 53c2 	add.w	r3, r3, #6208	@ 0x1840
 8002f94:	3310      	adds	r3, #16
 8002f96:	2200      	movs	r2, #0
 8002f98:	701a      	strb	r2, [r3, #0]
								break;
 8002f9a:	e018      	b.n	8002fce <Game_Update_Bonus+0x25e>
							case bt_tracker_shoot:
								g->player.shoot_type = st_tracker;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	771a      	strb	r2, [r3, #28]
								g->player.bonus_duration = duration_bonus + (g->player.level * 50);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	695b      	ldr	r3, [r3, #20]
 8002fa6:	2232      	movs	r2, #50	@ 0x32
 8002fa8:	fb02 f303 	mul.w	r3, r2, r3
 8002fac:	f103 0296 	add.w	r2, r3, #150	@ 0x96
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	621a      	str	r2, [r3, #32]
								g->bonuses[i].active = false;
 8002fb4:	6879      	ldr	r1, [r7, #4]
 8002fb6:	68fa      	ldr	r2, [r7, #12]
 8002fb8:	4613      	mov	r3, r2
 8002fba:	00db      	lsls	r3, r3, #3
 8002fbc:	1a9b      	subs	r3, r3, r2
 8002fbe:	009b      	lsls	r3, r3, #2
 8002fc0:	440b      	add	r3, r1
 8002fc2:	f503 53c2 	add.w	r3, r3, #6208	@ 0x1840
 8002fc6:	3310      	adds	r3, #16
 8002fc8:	2200      	movs	r2, #0
 8002fca:	701a      	strb	r2, [r3, #0]
								break;
 8002fcc:	bf00      	nop
							}

						}

						g->bonuses[i].x -= 1;
 8002fce:	6879      	ldr	r1, [r7, #4]
 8002fd0:	68fa      	ldr	r2, [r7, #12]
 8002fd2:	4613      	mov	r3, r2
 8002fd4:	00db      	lsls	r3, r3, #3
 8002fd6:	1a9b      	subs	r3, r3, r2
 8002fd8:	009b      	lsls	r3, r3, #2
 8002fda:	440b      	add	r3, r1
 8002fdc:	f503 53c2 	add.w	r3, r3, #6208	@ 0x1840
 8002fe0:	3314      	adds	r3, #20
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	1e59      	subs	r1, r3, #1
 8002fe6:	6878      	ldr	r0, [r7, #4]
 8002fe8:	68fa      	ldr	r2, [r7, #12]
 8002fea:	4613      	mov	r3, r2
 8002fec:	00db      	lsls	r3, r3, #3
 8002fee:	1a9b      	subs	r3, r3, r2
 8002ff0:	009b      	lsls	r3, r3, #2
 8002ff2:	4403      	add	r3, r0
 8002ff4:	f503 53c2 	add.w	r3, r3, #6208	@ 0x1840
 8002ff8:	3314      	adds	r3, #20
 8002ffa:	6019      	str	r1, [r3, #0]
						if(g->bonuses[i].x <= -2){
 8002ffc:	6879      	ldr	r1, [r7, #4]
 8002ffe:	68fa      	ldr	r2, [r7, #12]
 8003000:	4613      	mov	r3, r2
 8003002:	00db      	lsls	r3, r3, #3
 8003004:	1a9b      	subs	r3, r3, r2
 8003006:	009b      	lsls	r3, r3, #2
 8003008:	440b      	add	r3, r1
 800300a:	f503 53c2 	add.w	r3, r3, #6208	@ 0x1840
 800300e:	3314      	adds	r3, #20
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003016:	da0b      	bge.n	8003030 <Game_Update_Bonus+0x2c0>
							g->bonuses[i].active = false;
 8003018:	6879      	ldr	r1, [r7, #4]
 800301a:	68fa      	ldr	r2, [r7, #12]
 800301c:	4613      	mov	r3, r2
 800301e:	00db      	lsls	r3, r3, #3
 8003020:	1a9b      	subs	r3, r3, r2
 8003022:	009b      	lsls	r3, r3, #2
 8003024:	440b      	add	r3, r1
 8003026:	f503 53c2 	add.w	r3, r3, #6208	@ 0x1840
 800302a:	3310      	adds	r3, #16
 800302c:	2200      	movs	r2, #0
 800302e:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < num_bonus; i++)
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	3301      	adds	r3, #1
 8003034:	60fb      	str	r3, [r7, #12]
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	2b02      	cmp	r3, #2
 800303a:	f77f aeb6 	ble.w	8002daa <Game_Update_Bonus+0x3a>
						}
					}
				}
			}
		}
}
 800303e:	bf00      	nop
 8003040:	bf00      	nop
 8003042:	3710      	adds	r7, #16
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}

08003048 <Game_Shot>:

void Game_Shot(GameCtx* g){
 8003048:	b5b0      	push	{r4, r5, r7, lr}
 800304a:	b08a      	sub	sp, #40	@ 0x28
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
	/*
		 * Activate the shot in the player's shot table and set the initial parameters.
		 */
		uint8_t i;

		bool is_any_enemies_active = false;
 8003050:	2300      	movs	r3, #0
 8003052:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

		int closest_enemy_number;
		double temp_distance;
		double smolest_distance = 500;
 8003056:	f04f 0200 	mov.w	r2, #0
 800305a:	4b8d      	ldr	r3, [pc, #564]	@ (8003290 <Game_Shot+0x248>)
 800305c:	e9c7 2306 	strd	r2, r3, [r7, #24]
		int random_tracking_number;

		for (i = 0; i < num_shots; ++i)
 8003060:	2300      	movs	r3, #0
 8003062:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8003066:	e105      	b.n	8003274 <Game_Shot+0x22c>
		{
			if (!g->shots[i].active)
 8003068:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800306c:	6879      	ldr	r1, [r7, #4]
 800306e:	4613      	mov	r3, r2
 8003070:	009b      	lsls	r3, r3, #2
 8003072:	4413      	add	r3, r2
 8003074:	009b      	lsls	r3, r3, #2
 8003076:	440b      	add	r3, r1
 8003078:	3324      	adds	r3, #36	@ 0x24
 800307a:	781b      	ldrb	r3, [r3, #0]
 800307c:	f083 0301 	eor.w	r3, r3, #1
 8003080:	b2db      	uxtb	r3, r3
 8003082:	2b00      	cmp	r3, #0
 8003084:	f000 80f1 	beq.w	800326a <Game_Shot+0x222>
			{
				g->shots[i].active = true;
 8003088:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800308c:	6879      	ldr	r1, [r7, #4]
 800308e:	4613      	mov	r3, r2
 8003090:	009b      	lsls	r3, r3, #2
 8003092:	4413      	add	r3, r2
 8003094:	009b      	lsls	r3, r3, #2
 8003096:	440b      	add	r3, r1
 8003098:	3324      	adds	r3, #36	@ 0x24
 800309a:	2201      	movs	r2, #1
 800309c:	701a      	strb	r2, [r3, #0]
				g->shots[i].x = 11;
 800309e:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80030a2:	6879      	ldr	r1, [r7, #4]
 80030a4:	4613      	mov	r3, r2
 80030a6:	009b      	lsls	r3, r3, #2
 80030a8:	4413      	add	r3, r2
 80030aa:	009b      	lsls	r3, r3, #2
 80030ac:	440b      	add	r3, r1
 80030ae:	3328      	adds	r3, #40	@ 0x28
 80030b0:	220b      	movs	r2, #11
 80030b2:	601a      	str	r2, [r3, #0]
				g->shots[i].y = g->player.y + 5;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80030bc:	1d59      	adds	r1, r3, #5
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	4613      	mov	r3, r2
 80030c2:	009b      	lsls	r3, r3, #2
 80030c4:	4413      	add	r3, r2
 80030c6:	009b      	lsls	r3, r3, #2
 80030c8:	4403      	add	r3, r0
 80030ca:	332c      	adds	r3, #44	@ 0x2c
 80030cc:	6019      	str	r1, [r3, #0]

				//Setting the type of shot
				switch(g->player.shoot_type)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	7f1b      	ldrb	r3, [r3, #28]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d002      	beq.n	80030dc <Game_Shot+0x94>
 80030d6:	2b01      	cmp	r3, #1
 80030d8:	d00c      	beq.n	80030f4 <Game_Shot+0xac>
						// If you haven't found a target act like a normal shot
						g->shots[i].type = st_normal;
					}
					break;
				}
				return;
 80030da:	e0d0      	b.n	800327e <Game_Shot+0x236>
					g->shots[i].type = st_normal;
 80030dc:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80030e0:	6879      	ldr	r1, [r7, #4]
 80030e2:	4613      	mov	r3, r2
 80030e4:	009b      	lsls	r3, r3, #2
 80030e6:	4413      	add	r3, r2
 80030e8:	009b      	lsls	r3, r3, #2
 80030ea:	440b      	add	r3, r1
 80030ec:	3330      	adds	r3, #48	@ 0x30
 80030ee:	2200      	movs	r2, #0
 80030f0:	701a      	strb	r2, [r3, #0]
					break;
 80030f2:	e0b9      	b.n	8003268 <Game_Shot+0x220>
					for(int j = 0; j < num_enemies; j++)
 80030f4:	2300      	movs	r3, #0
 80030f6:	617b      	str	r3, [r7, #20]
 80030f8:	e073      	b.n	80031e2 <Game_Shot+0x19a>
						if(g->enemies[j].active && !g->enemies[j].tracked_by_missile)
 80030fa:	6879      	ldr	r1, [r7, #4]
 80030fc:	697a      	ldr	r2, [r7, #20]
 80030fe:	4613      	mov	r3, r2
 8003100:	00db      	lsls	r3, r3, #3
 8003102:	4413      	add	r3, r2
 8003104:	009b      	lsls	r3, r3, #2
 8003106:	440b      	add	r3, r1
 8003108:	f503 7351 	add.w	r3, r3, #836	@ 0x344
 800310c:	781b      	ldrb	r3, [r3, #0]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d064      	beq.n	80031dc <Game_Shot+0x194>
 8003112:	6879      	ldr	r1, [r7, #4]
 8003114:	697a      	ldr	r2, [r7, #20]
 8003116:	4613      	mov	r3, r2
 8003118:	00db      	lsls	r3, r3, #3
 800311a:	4413      	add	r3, r2
 800311c:	009b      	lsls	r3, r3, #2
 800311e:	440b      	add	r3, r1
 8003120:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8003124:	781b      	ldrb	r3, [r3, #0]
 8003126:	f083 0301 	eor.w	r3, r3, #1
 800312a:	b2db      	uxtb	r3, r3
 800312c:	2b00      	cmp	r3, #0
 800312e:	d055      	beq.n	80031dc <Game_Shot+0x194>
							is_any_enemies_active = true;
 8003130:	2301      	movs	r3, #1
 8003132:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
							temp_distance = sqrt(pow(g->enemies[j].x - g->player.x, 2) + pow(g->enemies[j].y - g->player.y, 2));
 8003136:	6879      	ldr	r1, [r7, #4]
 8003138:	697a      	ldr	r2, [r7, #20]
 800313a:	4613      	mov	r3, r2
 800313c:	00db      	lsls	r3, r3, #3
 800313e:	4413      	add	r3, r2
 8003140:	009b      	lsls	r3, r3, #2
 8003142:	440b      	add	r3, r1
 8003144:	f503 7352 	add.w	r3, r3, #840	@ 0x348
 8003148:	681a      	ldr	r2, [r3, #0]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	1ad3      	subs	r3, r2, r3
 8003150:	4618      	mov	r0, r3
 8003152:	f7fd f9df 	bl	8000514 <__aeabi_i2d>
 8003156:	4602      	mov	r2, r0
 8003158:	460b      	mov	r3, r1
 800315a:	ed9f 1b4b 	vldr	d1, [pc, #300]	@ 8003288 <Game_Shot+0x240>
 800315e:	ec43 2b10 	vmov	d0, r2, r3
 8003162:	f005 f9cd 	bl	8008500 <pow>
 8003166:	ec55 4b10 	vmov	r4, r5, d0
 800316a:	6879      	ldr	r1, [r7, #4]
 800316c:	697a      	ldr	r2, [r7, #20]
 800316e:	4613      	mov	r3, r2
 8003170:	00db      	lsls	r3, r3, #3
 8003172:	4413      	add	r3, r2
 8003174:	009b      	lsls	r3, r3, #2
 8003176:	440b      	add	r3, r1
 8003178:	f503 7353 	add.w	r3, r3, #844	@ 0x34c
 800317c:	681a      	ldr	r2, [r3, #0]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	1ad3      	subs	r3, r2, r3
 8003184:	4618      	mov	r0, r3
 8003186:	f7fd f9c5 	bl	8000514 <__aeabi_i2d>
 800318a:	4602      	mov	r2, r0
 800318c:	460b      	mov	r3, r1
 800318e:	ed9f 1b3e 	vldr	d1, [pc, #248]	@ 8003288 <Game_Shot+0x240>
 8003192:	ec43 2b10 	vmov	d0, r2, r3
 8003196:	f005 f9b3 	bl	8008500 <pow>
 800319a:	ec53 2b10 	vmov	r2, r3, d0
 800319e:	4620      	mov	r0, r4
 80031a0:	4629      	mov	r1, r5
 80031a2:	f7fd f86b 	bl	800027c <__adddf3>
 80031a6:	4602      	mov	r2, r0
 80031a8:	460b      	mov	r3, r1
 80031aa:	ec43 2b17 	vmov	d7, r2, r3
 80031ae:	eeb0 0a47 	vmov.f32	s0, s14
 80031b2:	eef0 0a67 	vmov.f32	s1, s15
 80031b6:	f005 fa13 	bl	80085e0 <sqrt>
 80031ba:	ed87 0b02 	vstr	d0, [r7, #8]
							if (temp_distance < smolest_distance)
 80031be:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80031c2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80031c6:	f7fd fc81 	bl	8000acc <__aeabi_dcmplt>
 80031ca:	4603      	mov	r3, r0
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d005      	beq.n	80031dc <Game_Shot+0x194>
								smolest_distance = temp_distance;
 80031d0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80031d4:	e9c7 2306 	strd	r2, r3, [r7, #24]
								closest_enemy_number = j;
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	623b      	str	r3, [r7, #32]
					for(int j = 0; j < num_enemies; j++)
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	3301      	adds	r3, #1
 80031e0:	617b      	str	r3, [r7, #20]
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	2b09      	cmp	r3, #9
 80031e6:	dd88      	ble.n	80030fa <Game_Shot+0xb2>
					if(is_any_enemies_active)
 80031e8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d02f      	beq.n	8003250 <Game_Shot+0x208>
						random_tracking_number = rand();
 80031f0:	f004 f9aa 	bl	8007548 <rand>
 80031f4:	6138      	str	r0, [r7, #16]
						g->enemies[closest_enemy_number].track_number = random_tracking_number;
 80031f6:	6879      	ldr	r1, [r7, #4]
 80031f8:	6a3a      	ldr	r2, [r7, #32]
 80031fa:	4613      	mov	r3, r2
 80031fc:	00db      	lsls	r3, r3, #3
 80031fe:	4413      	add	r3, r2
 8003200:	009b      	lsls	r3, r3, #2
 8003202:	440b      	add	r3, r1
 8003204:	f503 7359 	add.w	r3, r3, #868	@ 0x364
 8003208:	693a      	ldr	r2, [r7, #16]
 800320a:	601a      	str	r2, [r3, #0]
						g->enemies[closest_enemy_number].tracked_by_missile = true;
 800320c:	6879      	ldr	r1, [r7, #4]
 800320e:	6a3a      	ldr	r2, [r7, #32]
 8003210:	4613      	mov	r3, r2
 8003212:	00db      	lsls	r3, r3, #3
 8003214:	4413      	add	r3, r2
 8003216:	009b      	lsls	r3, r3, #2
 8003218:	440b      	add	r3, r1
 800321a:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800321e:	2201      	movs	r2, #1
 8003220:	701a      	strb	r2, [r3, #0]
						g->shots[i].type = st_tracker;
 8003222:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8003226:	6879      	ldr	r1, [r7, #4]
 8003228:	4613      	mov	r3, r2
 800322a:	009b      	lsls	r3, r3, #2
 800322c:	4413      	add	r3, r2
 800322e:	009b      	lsls	r3, r3, #2
 8003230:	440b      	add	r3, r1
 8003232:	3330      	adds	r3, #48	@ 0x30
 8003234:	2201      	movs	r2, #1
 8003236:	701a      	strb	r2, [r3, #0]
						g->shots[i].track_number = random_tracking_number;
 8003238:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800323c:	6879      	ldr	r1, [r7, #4]
 800323e:	4613      	mov	r3, r2
 8003240:	009b      	lsls	r3, r3, #2
 8003242:	4413      	add	r3, r2
 8003244:	009b      	lsls	r3, r3, #2
 8003246:	440b      	add	r3, r1
 8003248:	3334      	adds	r3, #52	@ 0x34
 800324a:	693a      	ldr	r2, [r7, #16]
 800324c:	601a      	str	r2, [r3, #0]
					break;
 800324e:	e00a      	b.n	8003266 <Game_Shot+0x21e>
						g->shots[i].type = st_normal;
 8003250:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8003254:	6879      	ldr	r1, [r7, #4]
 8003256:	4613      	mov	r3, r2
 8003258:	009b      	lsls	r3, r3, #2
 800325a:	4413      	add	r3, r2
 800325c:	009b      	lsls	r3, r3, #2
 800325e:	440b      	add	r3, r1
 8003260:	3330      	adds	r3, #48	@ 0x30
 8003262:	2200      	movs	r2, #0
 8003264:	701a      	strb	r2, [r3, #0]
					break;
 8003266:	bf00      	nop
				return;
 8003268:	e009      	b.n	800327e <Game_Shot+0x236>
		for (i = 0; i < num_shots; ++i)
 800326a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800326e:	3301      	adds	r3, #1
 8003270:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8003274:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003278:	2b22      	cmp	r3, #34	@ 0x22
 800327a:	f67f aef5 	bls.w	8003068 <Game_Shot+0x20>
			}
		}
}
 800327e:	3728      	adds	r7, #40	@ 0x28
 8003280:	46bd      	mov	sp, r7
 8003282:	bdb0      	pop	{r4, r5, r7, pc}
 8003284:	f3af 8000 	nop.w
 8003288:	00000000 	.word	0x00000000
 800328c:	40000000 	.word	0x40000000
 8003290:	407f4000 	.word	0x407f4000

08003294 <Game_Shot_Boss>:

void Game_Shot_Boss(GameCtx* g){
 8003294:	b480      	push	{r7}
 8003296:	b085      	sub	sp, #20
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
	/*
		 * Handling boss shots.
		 */
		uint8_t i;

		for (i = 0; i < num_shots; ++i)
 800329c:	2300      	movs	r3, #0
 800329e:	73fb      	strb	r3, [r7, #15]
 80032a0:	e03c      	b.n	800331c <Game_Shot_Boss+0x88>
		{
			if (!g->boss_shots[i].active)
 80032a2:	7bfa      	ldrb	r2, [r7, #15]
 80032a4:	6879      	ldr	r1, [r7, #4]
 80032a6:	4613      	mov	r3, r2
 80032a8:	009b      	lsls	r3, r3, #2
 80032aa:	4413      	add	r3, r2
 80032ac:	009b      	lsls	r3, r3, #2
 80032ae:	440b      	add	r3, r1
 80032b0:	f503 7338 	add.w	r3, r3, #736	@ 0x2e0
 80032b4:	781b      	ldrb	r3, [r3, #0]
 80032b6:	f083 0301 	eor.w	r3, r3, #1
 80032ba:	b2db      	uxtb	r3, r3
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d02a      	beq.n	8003316 <Game_Shot_Boss+0x82>
			{
				g->boss_shots[i].active = true;
 80032c0:	7bfa      	ldrb	r2, [r7, #15]
 80032c2:	6879      	ldr	r1, [r7, #4]
 80032c4:	4613      	mov	r3, r2
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	4413      	add	r3, r2
 80032ca:	009b      	lsls	r3, r3, #2
 80032cc:	440b      	add	r3, r1
 80032ce:	f503 7338 	add.w	r3, r3, #736	@ 0x2e0
 80032d2:	2201      	movs	r2, #1
 80032d4:	701a      	strb	r2, [r3, #0]
				g->boss_shots[i].x = g->boss.x;
 80032d6:	7bfa      	ldrb	r2, [r7, #15]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80032de:	f8d3 1838 	ldr.w	r1, [r3, #2104]	@ 0x838
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	4613      	mov	r3, r2
 80032e6:	009b      	lsls	r3, r3, #2
 80032e8:	4413      	add	r3, r2
 80032ea:	009b      	lsls	r3, r3, #2
 80032ec:	4403      	add	r3, r0
 80032ee:	f503 7339 	add.w	r3, r3, #740	@ 0x2e4
 80032f2:	6019      	str	r1, [r3, #0]
				g->boss_shots[i].y = g->boss.y + 5;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80032fa:	f8d3 383c 	ldr.w	r3, [r3, #2108]	@ 0x83c
 80032fe:	7bfa      	ldrb	r2, [r7, #15]
 8003300:	1d59      	adds	r1, r3, #5
 8003302:	6878      	ldr	r0, [r7, #4]
 8003304:	4613      	mov	r3, r2
 8003306:	009b      	lsls	r3, r3, #2
 8003308:	4413      	add	r3, r2
 800330a:	009b      	lsls	r3, r3, #2
 800330c:	4403      	add	r3, r0
 800330e:	f503 733a 	add.w	r3, r3, #744	@ 0x2e8
 8003312:	6019      	str	r1, [r3, #0]
				return;
 8003314:	e005      	b.n	8003322 <Game_Shot_Boss+0x8e>
		for (i = 0; i < num_shots; ++i)
 8003316:	7bfb      	ldrb	r3, [r7, #15]
 8003318:	3301      	adds	r3, #1
 800331a:	73fb      	strb	r3, [r7, #15]
 800331c:	7bfb      	ldrb	r3, [r7, #15]
 800331e:	2b22      	cmp	r3, #34	@ 0x22
 8003320:	d9bf      	bls.n	80032a2 <Game_Shot_Boss+0xe>
			}
		}
}
 8003322:	3714      	adds	r7, #20
 8003324:	46bd      	mov	sp, r7
 8003326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332a:	4770      	bx	lr

0800332c <colliding>:

bool colliding(int x0, int y0, int x1, int y1){
 800332c:	b480      	push	{r7}
 800332e:	b087      	sub	sp, #28
 8003330:	af00      	add	r7, sp, #0
 8003332:	60f8      	str	r0, [r7, #12]
 8003334:	60b9      	str	r1, [r7, #8]
 8003336:	607a      	str	r2, [r7, #4]
 8003338:	603b      	str	r3, [r7, #0]
	/*
		 * Checking whether objects collide with each other.
		 */
		int dx = abs(x0 - x1);
 800333a:	68fa      	ldr	r2, [r7, #12]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	1ad3      	subs	r3, r2, r3
 8003340:	2b00      	cmp	r3, #0
 8003342:	bfb8      	it	lt
 8003344:	425b      	neglt	r3, r3
 8003346:	617b      	str	r3, [r7, #20]
		int dy = abs(y0 - y1);
 8003348:	68ba      	ldr	r2, [r7, #8]
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	1ad3      	subs	r3, r2, r3
 800334e:	2b00      	cmp	r3, #0
 8003350:	bfb8      	it	lt
 8003352:	425b      	neglt	r3, r3
 8003354:	613b      	str	r3, [r7, #16]
		return dx < 6 && dy < 9;
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	2b05      	cmp	r3, #5
 800335a:	dc04      	bgt.n	8003366 <colliding+0x3a>
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	2b08      	cmp	r3, #8
 8003360:	dc01      	bgt.n	8003366 <colliding+0x3a>
 8003362:	2301      	movs	r3, #1
 8003364:	e000      	b.n	8003368 <colliding+0x3c>
 8003366:	2300      	movs	r3, #0
 8003368:	f003 0301 	and.w	r3, r3, #1
 800336c:	b2db      	uxtb	r3, r3
}
 800336e:	4618      	mov	r0, r3
 8003370:	371c      	adds	r7, #28
 8003372:	46bd      	mov	sp, r7
 8003374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003378:	4770      	bx	lr
	...

0800337c <Game_Add_Enemy>:

void Game_Add_Enemy(GameCtx* g){
 800337c:	b580      	push	{r7, lr}
 800337e:	b084      	sub	sp, #16
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
		 * Setting its initial parameters, i.e. position, refreshment, graphics, type.
		 */
		uint8_t i;
		uint8_t enemy_type;

		for(i = 0; i < g->player.level; i++)
 8003384:	2300      	movs	r3, #0
 8003386:	73fb      	strb	r3, [r7, #15]
 8003388:	e101      	b.n	800358e <Game_Add_Enemy+0x212>
		{
			if(!g->enemies[i].active)
 800338a:	7bfa      	ldrb	r2, [r7, #15]
 800338c:	6879      	ldr	r1, [r7, #4]
 800338e:	4613      	mov	r3, r2
 8003390:	00db      	lsls	r3, r3, #3
 8003392:	4413      	add	r3, r2
 8003394:	009b      	lsls	r3, r3, #2
 8003396:	440b      	add	r3, r1
 8003398:	f503 7351 	add.w	r3, r3, #836	@ 0x344
 800339c:	781b      	ldrb	r3, [r3, #0]
 800339e:	f083 0301 	eor.w	r3, r3, #1
 80033a2:	b2db      	uxtb	r3, r3
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	f000 80ef 	beq.w	8003588 <Game_Add_Enemy+0x20c>
			{
				g->enemies[i].active = true;
 80033aa:	7bfa      	ldrb	r2, [r7, #15]
 80033ac:	6879      	ldr	r1, [r7, #4]
 80033ae:	4613      	mov	r3, r2
 80033b0:	00db      	lsls	r3, r3, #3
 80033b2:	4413      	add	r3, r2
 80033b4:	009b      	lsls	r3, r3, #2
 80033b6:	440b      	add	r3, r1
 80033b8:	f503 7351 	add.w	r3, r3, #836	@ 0x344
 80033bc:	2201      	movs	r2, #1
 80033be:	701a      	strb	r2, [r3, #0]
				g->enemies[i].x = 140;
 80033c0:	7bfa      	ldrb	r2, [r7, #15]
 80033c2:	6879      	ldr	r1, [r7, #4]
 80033c4:	4613      	mov	r3, r2
 80033c6:	00db      	lsls	r3, r3, #3
 80033c8:	4413      	add	r3, r2
 80033ca:	009b      	lsls	r3, r3, #2
 80033cc:	440b      	add	r3, r1
 80033ce:	f503 7352 	add.w	r3, r3, #840	@ 0x348
 80033d2:	228c      	movs	r2, #140	@ 0x8c
 80033d4:	601a      	str	r2, [r3, #0]
				g->enemies[i].y = ((rand()%(screen_height - 10))+10);
 80033d6:	f004 f8b7 	bl	8007548 <rand>
 80033da:	4602      	mov	r2, r0
 80033dc:	4b72      	ldr	r3, [pc, #456]	@ (80035a8 <Game_Add_Enemy+0x22c>)
 80033de:	fb83 1302 	smull	r1, r3, r3, r2
 80033e2:	1119      	asrs	r1, r3, #4
 80033e4:	17d3      	asrs	r3, r2, #31
 80033e6:	1acb      	subs	r3, r1, r3
 80033e8:	2176      	movs	r1, #118	@ 0x76
 80033ea:	fb01 f303 	mul.w	r3, r1, r3
 80033ee:	1ad3      	subs	r3, r2, r3
 80033f0:	7bfa      	ldrb	r2, [r7, #15]
 80033f2:	f103 010a 	add.w	r1, r3, #10
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	4613      	mov	r3, r2
 80033fa:	00db      	lsls	r3, r3, #3
 80033fc:	4413      	add	r3, r2
 80033fe:	009b      	lsls	r3, r3, #2
 8003400:	4403      	add	r3, r0
 8003402:	f503 7353 	add.w	r3, r3, #844	@ 0x34c
 8003406:	6019      	str	r1, [r3, #0]
				g->enemies[i].tracked_by_missile = false;
 8003408:	7bfa      	ldrb	r2, [r7, #15]
 800340a:	6879      	ldr	r1, [r7, #4]
 800340c:	4613      	mov	r3, r2
 800340e:	00db      	lsls	r3, r3, #3
 8003410:	4413      	add	r3, r2
 8003412:	009b      	lsls	r3, r3, #2
 8003414:	440b      	add	r3, r1
 8003416:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800341a:	2200      	movs	r2, #0
 800341c:	701a      	strb	r2, [r3, #0]
				g->enemies[i].track_number = 0;
 800341e:	7bfa      	ldrb	r2, [r7, #15]
 8003420:	6879      	ldr	r1, [r7, #4]
 8003422:	4613      	mov	r3, r2
 8003424:	00db      	lsls	r3, r3, #3
 8003426:	4413      	add	r3, r2
 8003428:	009b      	lsls	r3, r3, #2
 800342a:	440b      	add	r3, r1
 800342c:	f503 7359 	add.w	r3, r3, #868	@ 0x364
 8003430:	2200      	movs	r2, #0
 8003432:	601a      	str	r2, [r3, #0]

				enemy_type = (rand()%100);
 8003434:	f004 f888 	bl	8007548 <rand>
 8003438:	4603      	mov	r3, r0
 800343a:	4a5c      	ldr	r2, [pc, #368]	@ (80035ac <Game_Add_Enemy+0x230>)
 800343c:	fb82 1203 	smull	r1, r2, r2, r3
 8003440:	1151      	asrs	r1, r2, #5
 8003442:	17da      	asrs	r2, r3, #31
 8003444:	1a8a      	subs	r2, r1, r2
 8003446:	2164      	movs	r1, #100	@ 0x64
 8003448:	fb01 f202 	mul.w	r2, r1, r2
 800344c:	1a9a      	subs	r2, r3, r2
 800344e:	4613      	mov	r3, r2
 8003450:	73bb      	strb	r3, [r7, #14]

				if((enemy_type > 50))
 8003452:	7bbb      	ldrb	r3, [r7, #14]
 8003454:	2b32      	cmp	r3, #50	@ 0x32
 8003456:	d92b      	bls.n	80034b0 <Game_Add_Enemy+0x134>
				{

					g->enemies[i].type = et_diver;
 8003458:	7bfa      	ldrb	r2, [r7, #15]
 800345a:	6879      	ldr	r1, [r7, #4]
 800345c:	4613      	mov	r3, r2
 800345e:	00db      	lsls	r3, r3, #3
 8003460:	4413      	add	r3, r2
 8003462:	009b      	lsls	r3, r3, #2
 8003464:	440b      	add	r3, r1
 8003466:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800346a:	2200      	movs	r2, #0
 800346c:	701a      	strb	r2, [r3, #0]
					g->enemies[i].update_delay = (rand()%3);	//Speed setting (less = faster)
 800346e:	f004 f86b 	bl	8007548 <rand>
 8003472:	4601      	mov	r1, r0
 8003474:	7bf8      	ldrb	r0, [r7, #15]
 8003476:	4b4e      	ldr	r3, [pc, #312]	@ (80035b0 <Game_Add_Enemy+0x234>)
 8003478:	fb83 3201 	smull	r3, r2, r3, r1
 800347c:	17cb      	asrs	r3, r1, #31
 800347e:	1ad2      	subs	r2, r2, r3
 8003480:	4613      	mov	r3, r2
 8003482:	005b      	lsls	r3, r3, #1
 8003484:	4413      	add	r3, r2
 8003486:	1aca      	subs	r2, r1, r3
 8003488:	6879      	ldr	r1, [r7, #4]
 800348a:	4603      	mov	r3, r0
 800348c:	00db      	lsls	r3, r3, #3
 800348e:	4403      	add	r3, r0
 8003490:	009b      	lsls	r3, r3, #2
 8003492:	440b      	add	r3, r1
 8003494:	f503 7357 	add.w	r3, r3, #860	@ 0x35c
 8003498:	601a      	str	r2, [r3, #0]
					g->enemies[i].bit_map = driver_map;
 800349a:	7bfa      	ldrb	r2, [r7, #15]
 800349c:	6879      	ldr	r1, [r7, #4]
 800349e:	4613      	mov	r3, r2
 80034a0:	00db      	lsls	r3, r3, #3
 80034a2:	4413      	add	r3, r2
 80034a4:	009b      	lsls	r3, r3, #2
 80034a6:	440b      	add	r3, r1
 80034a8:	f503 7355 	add.w	r3, r3, #852	@ 0x354
 80034ac:	4a41      	ldr	r2, [pc, #260]	@ (80035b4 <Game_Add_Enemy+0x238>)
 80034ae:	601a      	str	r2, [r3, #0]
				}
				if((enemy_type > 20 && enemy_type < 50) && (g->player.level > 4))
 80034b0:	7bbb      	ldrb	r3, [r7, #14]
 80034b2:	2b14      	cmp	r3, #20
 80034b4:	d933      	bls.n	800351e <Game_Add_Enemy+0x1a2>
 80034b6:	7bbb      	ldrb	r3, [r7, #14]
 80034b8:	2b31      	cmp	r3, #49	@ 0x31
 80034ba:	d830      	bhi.n	800351e <Game_Add_Enemy+0x1a2>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	695b      	ldr	r3, [r3, #20]
 80034c0:	2b04      	cmp	r3, #4
 80034c2:	dd2c      	ble.n	800351e <Game_Add_Enemy+0x1a2>
				{
					g->enemies[i].type = et_tracker;
 80034c4:	7bfa      	ldrb	r2, [r7, #15]
 80034c6:	6879      	ldr	r1, [r7, #4]
 80034c8:	4613      	mov	r3, r2
 80034ca:	00db      	lsls	r3, r3, #3
 80034cc:	4413      	add	r3, r2
 80034ce:	009b      	lsls	r3, r3, #2
 80034d0:	440b      	add	r3, r1
 80034d2:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80034d6:	2201      	movs	r2, #1
 80034d8:	701a      	strb	r2, [r3, #0]
					g->enemies[i].update_delay = ((rand()%3)+1);
 80034da:	f004 f835 	bl	8007548 <rand>
 80034de:	4601      	mov	r1, r0
 80034e0:	4b33      	ldr	r3, [pc, #204]	@ (80035b0 <Game_Add_Enemy+0x234>)
 80034e2:	fb83 3201 	smull	r3, r2, r3, r1
 80034e6:	17cb      	asrs	r3, r1, #31
 80034e8:	1ad2      	subs	r2, r2, r3
 80034ea:	4613      	mov	r3, r2
 80034ec:	005b      	lsls	r3, r3, #1
 80034ee:	4413      	add	r3, r2
 80034f0:	1aca      	subs	r2, r1, r3
 80034f2:	7bf9      	ldrb	r1, [r7, #15]
 80034f4:	3201      	adds	r2, #1
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	460b      	mov	r3, r1
 80034fa:	00db      	lsls	r3, r3, #3
 80034fc:	440b      	add	r3, r1
 80034fe:	009b      	lsls	r3, r3, #2
 8003500:	4403      	add	r3, r0
 8003502:	f503 7357 	add.w	r3, r3, #860	@ 0x35c
 8003506:	601a      	str	r2, [r3, #0]
					g->enemies[i].bit_map = tracker_map;
 8003508:	7bfa      	ldrb	r2, [r7, #15]
 800350a:	6879      	ldr	r1, [r7, #4]
 800350c:	4613      	mov	r3, r2
 800350e:	00db      	lsls	r3, r3, #3
 8003510:	4413      	add	r3, r2
 8003512:	009b      	lsls	r3, r3, #2
 8003514:	440b      	add	r3, r1
 8003516:	f503 7355 	add.w	r3, r3, #852	@ 0x354
 800351a:	4a27      	ldr	r2, [pc, #156]	@ (80035b8 <Game_Add_Enemy+0x23c>)
 800351c:	601a      	str	r2, [r3, #0]
				}
				if((enemy_type < 20) && (g->player.level > 7))
 800351e:	7bbb      	ldrb	r3, [r7, #14]
 8003520:	2b13      	cmp	r3, #19
 8003522:	d83b      	bhi.n	800359c <Game_Add_Enemy+0x220>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	695b      	ldr	r3, [r3, #20]
 8003528:	2b07      	cmp	r3, #7
 800352a:	dd37      	ble.n	800359c <Game_Add_Enemy+0x220>
				{
					g->enemies[i].type = et_bobber;
 800352c:	7bfa      	ldrb	r2, [r7, #15]
 800352e:	6879      	ldr	r1, [r7, #4]
 8003530:	4613      	mov	r3, r2
 8003532:	00db      	lsls	r3, r3, #3
 8003534:	4413      	add	r3, r2
 8003536:	009b      	lsls	r3, r3, #2
 8003538:	440b      	add	r3, r1
 800353a:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800353e:	2202      	movs	r2, #2
 8003540:	701a      	strb	r2, [r3, #0]
					g->enemies[i].update_delay = ((rand()%3)+2);
 8003542:	f004 f801 	bl	8007548 <rand>
 8003546:	4601      	mov	r1, r0
 8003548:	4b19      	ldr	r3, [pc, #100]	@ (80035b0 <Game_Add_Enemy+0x234>)
 800354a:	fb83 3201 	smull	r3, r2, r3, r1
 800354e:	17cb      	asrs	r3, r1, #31
 8003550:	1ad2      	subs	r2, r2, r3
 8003552:	4613      	mov	r3, r2
 8003554:	005b      	lsls	r3, r3, #1
 8003556:	4413      	add	r3, r2
 8003558:	1aca      	subs	r2, r1, r3
 800355a:	7bf9      	ldrb	r1, [r7, #15]
 800355c:	3202      	adds	r2, #2
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	460b      	mov	r3, r1
 8003562:	00db      	lsls	r3, r3, #3
 8003564:	440b      	add	r3, r1
 8003566:	009b      	lsls	r3, r3, #2
 8003568:	4403      	add	r3, r0
 800356a:	f503 7357 	add.w	r3, r3, #860	@ 0x35c
 800356e:	601a      	str	r2, [r3, #0]
					g->enemies[i].bit_map = bobber_map;
 8003570:	7bfa      	ldrb	r2, [r7, #15]
 8003572:	6879      	ldr	r1, [r7, #4]
 8003574:	4613      	mov	r3, r2
 8003576:	00db      	lsls	r3, r3, #3
 8003578:	4413      	add	r3, r2
 800357a:	009b      	lsls	r3, r3, #2
 800357c:	440b      	add	r3, r1
 800357e:	f503 7355 	add.w	r3, r3, #852	@ 0x354
 8003582:	4a0e      	ldr	r2, [pc, #56]	@ (80035bc <Game_Add_Enemy+0x240>)
 8003584:	601a      	str	r2, [r3, #0]
				}
				break;
 8003586:	e009      	b.n	800359c <Game_Add_Enemy+0x220>
		for(i = 0; i < g->player.level; i++)
 8003588:	7bfb      	ldrb	r3, [r7, #15]
 800358a:	3301      	adds	r3, #1
 800358c:	73fb      	strb	r3, [r7, #15]
 800358e:	7bfa      	ldrb	r2, [r7, #15]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	695b      	ldr	r3, [r3, #20]
 8003594:	429a      	cmp	r2, r3
 8003596:	f6ff aef8 	blt.w	800338a <Game_Add_Enemy+0xe>
			}
		}
}
 800359a:	e000      	b.n	800359e <Game_Add_Enemy+0x222>
				break;
 800359c:	bf00      	nop
}
 800359e:	bf00      	nop
 80035a0:	3710      	adds	r7, #16
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}
 80035a6:	bf00      	nop
 80035a8:	22b63cbf 	.word	0x22b63cbf
 80035ac:	51eb851f 	.word	0x51eb851f
 80035b0:	55555556 	.word	0x55555556
 80035b4:	08009b20 	.word	0x08009b20
 80035b8:	08009b18 	.word	0x08009b18
 80035bc:	08009b28 	.word	0x08009b28

080035c0 <Game_Set_State>:

void Game_Set_State(GameCtx* g, gamestate state){
 80035c0:	b480      	push	{r7}
 80035c2:	b083      	sub	sp, #12
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
 80035c8:	460b      	mov	r3, r1
 80035ca:	70fb      	strb	r3, [r7, #3]
	/*
	 * Sets the game state in the passed context
	 * */

	g->state = state;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80035d2:	461a      	mov	r2, r3
 80035d4:	78fb      	ldrb	r3, [r7, #3]
 80035d6:	f882 38a4 	strb.w	r3, [r2, #2212]	@ 0x8a4
}
 80035da:	bf00      	nop
 80035dc:	370c      	adds	r7, #12
 80035de:	46bd      	mov	sp, r7
 80035e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e4:	4770      	bx	lr

080035e6 <Game_Get_State>:

gamestate Game_Get_State(GameCtx* g){
 80035e6:	b480      	push	{r7}
 80035e8:	b083      	sub	sp, #12
 80035ea:	af00      	add	r7, sp, #0
 80035ec:	6078      	str	r0, [r7, #4]
	/*
	 * Returns the current play status of the passed context.
	 * */

	return g->state;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80035f4:	f893 38a4 	ldrb.w	r3, [r3, #2212]	@ 0x8a4
}
 80035f8:	4618      	mov	r0, r3
 80035fa:	370c      	adds	r7, #12
 80035fc:	46bd      	mov	sp, r7
 80035fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003602:	4770      	bx	lr

08003604 <Game_Get_Palyer_Score>:

int Game_Get_Palyer_Score(GameCtx* g){
 8003604:	b480      	push	{r7}
 8003606:	b083      	sub	sp, #12
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
	/*
	 * Returns the player's current score from the passed context.
	 * */

	return g->player.score;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	689b      	ldr	r3, [r3, #8]
}
 8003610:	4618      	mov	r0, r3
 8003612:	370c      	adds	r7, #12
 8003614:	46bd      	mov	sp, r7
 8003616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361a:	4770      	bx	lr

0800361c <itoa>:
* \param [in] base the base of conversion
* \return pointer to \em buffer
*//*-------------------------------------------------------------------------*/

char* itoa(int value, char* buffer, int base)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b088      	sub	sp, #32
 8003620:	af00      	add	r7, sp, #0
 8003622:	60f8      	str	r0, [r7, #12]
 8003624:	60b9      	str	r1, [r7, #8]
 8003626:	607a      	str	r2, [r7, #4]
	static const char digits[]="0123456789abcdef";

	char* buffer_copy=buffer;
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	61bb      	str	r3, [r7, #24]
	int32_t sign=0;
 800362c:	2300      	movs	r3, #0
 800362e:	61fb      	str	r3, [r7, #28]
	int32_t quot,rem;

	if ((base>=2)&&(base<=16))				// is the base valid?
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2b01      	cmp	r3, #1
 8003634:	dd36      	ble.n	80036a4 <itoa+0x88>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2b10      	cmp	r3, #16
 800363a:	dc33      	bgt.n	80036a4 <itoa+0x88>
	{
		if (base == 10 && (sign = value) < 0)// negative value and base == 10? store the copy (sign)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2b0a      	cmp	r3, #10
 8003640:	d107      	bne.n	8003652 <itoa+0x36>
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	61fb      	str	r3, [r7, #28]
 8003646:	69fb      	ldr	r3, [r7, #28]
 8003648:	2b00      	cmp	r3, #0
 800364a:	da02      	bge.n	8003652 <itoa+0x36>
			value = -value;					// make it positive
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	425b      	negs	r3, r3
 8003650:	60fb      	str	r3, [r7, #12]

		do
		{
			quot=value/base;				// calculate quotient and remainder
 8003652:	68fa      	ldr	r2, [r7, #12]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	fb92 f3f3 	sdiv	r3, r2, r3
 800365a:	617b      	str	r3, [r7, #20]
			rem=value%base;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	687a      	ldr	r2, [r7, #4]
 8003660:	fb93 f2f2 	sdiv	r2, r3, r2
 8003664:	6879      	ldr	r1, [r7, #4]
 8003666:	fb01 f202 	mul.w	r2, r1, r2
 800366a:	1a9b      	subs	r3, r3, r2
 800366c:	613b      	str	r3, [r7, #16]
			*buffer++ = digits[rem];		// append the remainder to the string
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	1c5a      	adds	r2, r3, #1
 8003672:	60ba      	str	r2, [r7, #8]
 8003674:	490f      	ldr	r1, [pc, #60]	@ (80036b4 <itoa+0x98>)
 8003676:	693a      	ldr	r2, [r7, #16]
 8003678:	440a      	add	r2, r1
 800367a:	7812      	ldrb	r2, [r2, #0]
 800367c:	701a      	strb	r2, [r3, #0]
		} while ((value=quot));				// loop while there is something to convert
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	60fb      	str	r3, [r7, #12]
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d1e4      	bne.n	8003652 <itoa+0x36>

		if (sign<0)							// was the value negative?
 8003688:	69fb      	ldr	r3, [r7, #28]
 800368a:	2b00      	cmp	r3, #0
 800368c:	da04      	bge.n	8003698 <itoa+0x7c>
			*buffer++='-';					// append the sign
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	1c5a      	adds	r2, r3, #1
 8003692:	60ba      	str	r2, [r7, #8]
 8003694:	222d      	movs	r2, #45	@ 0x2d
 8003696:	701a      	strb	r2, [r3, #0]

		__reverse(buffer_copy,buffer-1);		// reverse the string
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	3b01      	subs	r3, #1
 800369c:	4619      	mov	r1, r3
 800369e:	69b8      	ldr	r0, [r7, #24]
 80036a0:	f000 f80a 	bl	80036b8 <__reverse>
	}

	*buffer='\0';
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	2200      	movs	r2, #0
 80036a8:	701a      	strb	r2, [r3, #0]
	return buffer_copy;
 80036aa:	69bb      	ldr	r3, [r7, #24]
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	3720      	adds	r7, #32
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}
 80036b4:	08009b9c 	.word	0x08009b9c

080036b8 <__reverse>:
* \param [in,out] begin pointer to the beginning of the string
* \param [in,out] end pointer to the end of the string
*//*-------------------------------------------------------------------------*/

static void __reverse(char* begin,char* end)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b085      	sub	sp, #20
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
 80036c0:	6039      	str	r1, [r7, #0]
	char temp;

	while (end>begin)
 80036c2:	e00d      	b.n	80036e0 <__reverse+0x28>
	{
		temp=*end;
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	781b      	ldrb	r3, [r3, #0]
 80036c8:	73fb      	strb	r3, [r7, #15]
		*end--=*begin;
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	1e5a      	subs	r2, r3, #1
 80036ce:	603a      	str	r2, [r7, #0]
 80036d0:	687a      	ldr	r2, [r7, #4]
 80036d2:	7812      	ldrb	r2, [r2, #0]
 80036d4:	701a      	strb	r2, [r3, #0]
		*begin++=temp;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	1c5a      	adds	r2, r3, #1
 80036da:	607a      	str	r2, [r7, #4]
 80036dc:	7bfa      	ldrb	r2, [r7, #15]
 80036de:	701a      	strb	r2, [r3, #0]
	while (end>begin)
 80036e0:	683a      	ldr	r2, [r7, #0]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	429a      	cmp	r2, r3
 80036e6:	d8ed      	bhi.n	80036c4 <__reverse+0xc>
	}
}
 80036e8:	bf00      	nop
 80036ea:	bf00      	nop
 80036ec:	3714      	adds	r7, #20
 80036ee:	46bd      	mov	sp, r7
 80036f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f4:	4770      	bx	lr
	...

080036f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80036fc:	f000 fe45 	bl	800438a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003700:	f000 f834 	bl	800376c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003704:	f000 f936 	bl	8003974 <MX_GPIO_Init>
  MX_ADC1_Init();
 8003708:	f000 f892 	bl	8003830 <MX_ADC1_Init>
  MX_SPI1_Init();
 800370c:	f000 f8f4 	bl	80038f8 <MX_SPI1_Init>

//  // Konfiguracja ADC z DMA
//  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
//  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)value, 2);

  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8003710:	217f      	movs	r1, #127	@ 0x7f
 8003712:	4813      	ldr	r0, [pc, #76]	@ (8003760 <main+0x68>)
 8003714:	f001 ff56 	bl	80055c4 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start(&hadc1);
 8003718:	4811      	ldr	r0, [pc, #68]	@ (8003760 <main+0x68>)
 800371a:	f001 f9f1 	bl	8004b00 <HAL_ADC_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  ssd1327_SpiInit(&hspi1);
 800371e:	4811      	ldr	r0, [pc, #68]	@ (8003764 <main+0x6c>)
 8003720:	f000 fb22 	bl	8003d68 <ssd1327_SpiInit>
  ssd1327_CLR();
 8003724:	f000 fbda 	bl	8003edc <ssd1327_CLR>
  ssd1327_display();
 8003728:	f000 fba0 	bl	8003e6c <ssd1327_display>

  //start_game();
  Game_Init(&g_singleton);
 800372c:	480e      	ldr	r0, [pc, #56]	@ (8003768 <main+0x70>)
 800372e:	f7fd fd68 	bl	8001202 <Game_Init>
  //add_enemy();

  while (1)
  {
		switch (Game_Get_State(&g_singleton))
 8003732:	480d      	ldr	r0, [pc, #52]	@ (8003768 <main+0x70>)
 8003734:	f7ff ff57 	bl	80035e6 <Game_Get_State>
 8003738:	4603      	mov	r3, r0
 800373a:	2b02      	cmp	r3, #2
 800373c:	d00c      	beq.n	8003758 <main+0x60>
 800373e:	2b02      	cmp	r3, #2
 8003740:	dcf7      	bgt.n	8003732 <main+0x3a>
 8003742:	2b00      	cmp	r3, #0
 8003744:	d002      	beq.n	800374c <main+0x54>
 8003746:	2b01      	cmp	r3, #1
 8003748:	d003      	beq.n	8003752 <main+0x5a>
 800374a:	e008      	b.n	800375e <main+0x66>
		{
		case st_menu:
			run_menu(); break;
 800374c:	f000 fa2a 	bl	8003ba4 <run_menu>
 8003750:	e005      	b.n	800375e <main+0x66>
		case st_playing:
			run_game(); break;
 8003752:	f000 fa15 	bl	8003b80 <run_game>
 8003756:	e002      	b.n	800375e <main+0x66>
		case st_dead:
			run_dead();	break;
 8003758:	f000 f990 	bl	8003a7c <run_dead>
 800375c:	bf00      	nop
		switch (Game_Get_State(&g_singleton))
 800375e:	e7e8      	b.n	8003732 <main+0x3a>
 8003760:	20001944 	.word	0x20001944
 8003764:	200019a8 	.word	0x200019a8
 8003768:	20000098 	.word	0x20000098

0800376c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b096      	sub	sp, #88	@ 0x58
 8003770:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003772:	f107 0314 	add.w	r3, r7, #20
 8003776:	2244      	movs	r2, #68	@ 0x44
 8003778:	2100      	movs	r1, #0
 800377a:	4618      	mov	r0, r3
 800377c:	f004 f827 	bl	80077ce <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003780:	463b      	mov	r3, r7
 8003782:	2200      	movs	r2, #0
 8003784:	601a      	str	r2, [r3, #0]
 8003786:	605a      	str	r2, [r3, #4]
 8003788:	609a      	str	r2, [r3, #8]
 800378a:	60da      	str	r2, [r3, #12]
 800378c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800378e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8003792:	f002 fa15 	bl	8005bc0 <HAL_PWREx_ControlVoltageScaling>
 8003796:	4603      	mov	r3, r0
 8003798:	2b00      	cmp	r3, #0
 800379a:	d001      	beq.n	80037a0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800379c:	f000 faa2 	bl	8003ce4 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80037a0:	f002 f9f0 	bl	8005b84 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80037a4:	4b21      	ldr	r3, [pc, #132]	@ (800382c <SystemClock_Config+0xc0>)
 80037a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037aa:	4a20      	ldr	r2, [pc, #128]	@ (800382c <SystemClock_Config+0xc0>)
 80037ac:	f023 0318 	bic.w	r3, r3, #24
 80037b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80037b4:	2314      	movs	r3, #20
 80037b6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80037b8:	2301      	movs	r3, #1
 80037ba:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80037bc:	2301      	movs	r3, #1
 80037be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80037c0:	2300      	movs	r3, #0
 80037c2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80037c4:	2360      	movs	r3, #96	@ 0x60
 80037c6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80037c8:	2302      	movs	r3, #2
 80037ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80037cc:	2301      	movs	r3, #1
 80037ce:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80037d0:	2301      	movs	r3, #1
 80037d2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80037d4:	2328      	movs	r3, #40	@ 0x28
 80037d6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80037d8:	2307      	movs	r3, #7
 80037da:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80037dc:	2302      	movs	r3, #2
 80037de:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80037e0:	2302      	movs	r3, #2
 80037e2:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80037e4:	f107 0314 	add.w	r3, r7, #20
 80037e8:	4618      	mov	r0, r3
 80037ea:	f002 fa3f 	bl	8005c6c <HAL_RCC_OscConfig>
 80037ee:	4603      	mov	r3, r0
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d001      	beq.n	80037f8 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80037f4:	f000 fa76 	bl	8003ce4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80037f8:	230f      	movs	r3, #15
 80037fa:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80037fc:	2303      	movs	r3, #3
 80037fe:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003800:	2300      	movs	r3, #0
 8003802:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003804:	2300      	movs	r3, #0
 8003806:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003808:	2300      	movs	r3, #0
 800380a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800380c:	463b      	mov	r3, r7
 800380e:	2104      	movs	r1, #4
 8003810:	4618      	mov	r0, r3
 8003812:	f002 fe3f 	bl	8006494 <HAL_RCC_ClockConfig>
 8003816:	4603      	mov	r3, r0
 8003818:	2b00      	cmp	r3, #0
 800381a:	d001      	beq.n	8003820 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 800381c:	f000 fa62 	bl	8003ce4 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8003820:	f003 fa1a 	bl	8006c58 <HAL_RCCEx_EnableMSIPLLMode>
}
 8003824:	bf00      	nop
 8003826:	3758      	adds	r7, #88	@ 0x58
 8003828:	46bd      	mov	sp, r7
 800382a:	bd80      	pop	{r7, pc}
 800382c:	40021000 	.word	0x40021000

08003830 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b086      	sub	sp, #24
 8003834:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003836:	463b      	mov	r3, r7
 8003838:	2200      	movs	r2, #0
 800383a:	601a      	str	r2, [r3, #0]
 800383c:	605a      	str	r2, [r3, #4]
 800383e:	609a      	str	r2, [r3, #8]
 8003840:	60da      	str	r2, [r3, #12]
 8003842:	611a      	str	r2, [r3, #16]
 8003844:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8003846:	4b29      	ldr	r3, [pc, #164]	@ (80038ec <MX_ADC1_Init+0xbc>)
 8003848:	4a29      	ldr	r2, [pc, #164]	@ (80038f0 <MX_ADC1_Init+0xc0>)
 800384a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800384c:	4b27      	ldr	r3, [pc, #156]	@ (80038ec <MX_ADC1_Init+0xbc>)
 800384e:	2200      	movs	r2, #0
 8003850:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003852:	4b26      	ldr	r3, [pc, #152]	@ (80038ec <MX_ADC1_Init+0xbc>)
 8003854:	2200      	movs	r2, #0
 8003856:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003858:	4b24      	ldr	r3, [pc, #144]	@ (80038ec <MX_ADC1_Init+0xbc>)
 800385a:	2200      	movs	r2, #0
 800385c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800385e:	4b23      	ldr	r3, [pc, #140]	@ (80038ec <MX_ADC1_Init+0xbc>)
 8003860:	2200      	movs	r2, #0
 8003862:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003864:	4b21      	ldr	r3, [pc, #132]	@ (80038ec <MX_ADC1_Init+0xbc>)
 8003866:	2204      	movs	r2, #4
 8003868:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800386a:	4b20      	ldr	r3, [pc, #128]	@ (80038ec <MX_ADC1_Init+0xbc>)
 800386c:	2200      	movs	r2, #0
 800386e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8003870:	4b1e      	ldr	r3, [pc, #120]	@ (80038ec <MX_ADC1_Init+0xbc>)
 8003872:	2201      	movs	r2, #1
 8003874:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8003876:	4b1d      	ldr	r3, [pc, #116]	@ (80038ec <MX_ADC1_Init+0xbc>)
 8003878:	2201      	movs	r2, #1
 800387a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800387c:	4b1b      	ldr	r3, [pc, #108]	@ (80038ec <MX_ADC1_Init+0xbc>)
 800387e:	2200      	movs	r2, #0
 8003880:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003884:	4b19      	ldr	r3, [pc, #100]	@ (80038ec <MX_ADC1_Init+0xbc>)
 8003886:	2200      	movs	r2, #0
 8003888:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800388a:	4b18      	ldr	r3, [pc, #96]	@ (80038ec <MX_ADC1_Init+0xbc>)
 800388c:	2200      	movs	r2, #0
 800388e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8003890:	4b16      	ldr	r3, [pc, #88]	@ (80038ec <MX_ADC1_Init+0xbc>)
 8003892:	2200      	movs	r2, #0
 8003894:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8003898:	4b14      	ldr	r3, [pc, #80]	@ (80038ec <MX_ADC1_Init+0xbc>)
 800389a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800389e:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80038a0:	4b12      	ldr	r3, [pc, #72]	@ (80038ec <MX_ADC1_Init+0xbc>)
 80038a2:	2200      	movs	r2, #0
 80038a4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80038a8:	4810      	ldr	r0, [pc, #64]	@ (80038ec <MX_ADC1_Init+0xbc>)
 80038aa:	f000 ffe1 	bl	8004870 <HAL_ADC_Init>
 80038ae:	4603      	mov	r3, r0
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d001      	beq.n	80038b8 <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 80038b4:	f000 fa16 	bl	8003ce4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80038b8:	4b0e      	ldr	r3, [pc, #56]	@ (80038f4 <MX_ADC1_Init+0xc4>)
 80038ba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80038bc:	2306      	movs	r3, #6
 80038be:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 80038c0:	2307      	movs	r3, #7
 80038c2:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80038c4:	237f      	movs	r3, #127	@ 0x7f
 80038c6:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80038c8:	2304      	movs	r3, #4
 80038ca:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80038cc:	2300      	movs	r3, #0
 80038ce:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80038d0:	463b      	mov	r3, r7
 80038d2:	4619      	mov	r1, r3
 80038d4:	4805      	ldr	r0, [pc, #20]	@ (80038ec <MX_ADC1_Init+0xbc>)
 80038d6:	f001 f983 	bl	8004be0 <HAL_ADC_ConfigChannel>
 80038da:	4603      	mov	r3, r0
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d001      	beq.n	80038e4 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 80038e0:	f000 fa00 	bl	8003ce4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80038e4:	bf00      	nop
 80038e6:	3718      	adds	r7, #24
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bd80      	pop	{r7, pc}
 80038ec:	20001944 	.word	0x20001944
 80038f0:	50040000 	.word	0x50040000
 80038f4:	14f00020 	.word	0x14f00020

080038f8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80038fc:	4b1b      	ldr	r3, [pc, #108]	@ (800396c <MX_SPI1_Init+0x74>)
 80038fe:	4a1c      	ldr	r2, [pc, #112]	@ (8003970 <MX_SPI1_Init+0x78>)
 8003900:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003902:	4b1a      	ldr	r3, [pc, #104]	@ (800396c <MX_SPI1_Init+0x74>)
 8003904:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003908:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800390a:	4b18      	ldr	r3, [pc, #96]	@ (800396c <MX_SPI1_Init+0x74>)
 800390c:	2200      	movs	r2, #0
 800390e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003910:	4b16      	ldr	r3, [pc, #88]	@ (800396c <MX_SPI1_Init+0x74>)
 8003912:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8003916:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003918:	4b14      	ldr	r3, [pc, #80]	@ (800396c <MX_SPI1_Init+0x74>)
 800391a:	2200      	movs	r2, #0
 800391c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800391e:	4b13      	ldr	r3, [pc, #76]	@ (800396c <MX_SPI1_Init+0x74>)
 8003920:	2200      	movs	r2, #0
 8003922:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003924:	4b11      	ldr	r3, [pc, #68]	@ (800396c <MX_SPI1_Init+0x74>)
 8003926:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800392a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800392c:	4b0f      	ldr	r3, [pc, #60]	@ (800396c <MX_SPI1_Init+0x74>)
 800392e:	2210      	movs	r2, #16
 8003930:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003932:	4b0e      	ldr	r3, [pc, #56]	@ (800396c <MX_SPI1_Init+0x74>)
 8003934:	2200      	movs	r2, #0
 8003936:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003938:	4b0c      	ldr	r3, [pc, #48]	@ (800396c <MX_SPI1_Init+0x74>)
 800393a:	2200      	movs	r2, #0
 800393c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800393e:	4b0b      	ldr	r3, [pc, #44]	@ (800396c <MX_SPI1_Init+0x74>)
 8003940:	2200      	movs	r2, #0
 8003942:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8003944:	4b09      	ldr	r3, [pc, #36]	@ (800396c <MX_SPI1_Init+0x74>)
 8003946:	2207      	movs	r2, #7
 8003948:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800394a:	4b08      	ldr	r3, [pc, #32]	@ (800396c <MX_SPI1_Init+0x74>)
 800394c:	2200      	movs	r2, #0
 800394e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003950:	4b06      	ldr	r3, [pc, #24]	@ (800396c <MX_SPI1_Init+0x74>)
 8003952:	2208      	movs	r2, #8
 8003954:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003956:	4805      	ldr	r0, [pc, #20]	@ (800396c <MX_SPI1_Init+0x74>)
 8003958:	f003 fa80 	bl	8006e5c <HAL_SPI_Init>
 800395c:	4603      	mov	r3, r0
 800395e:	2b00      	cmp	r3, #0
 8003960:	d001      	beq.n	8003966 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8003962:	f000 f9bf 	bl	8003ce4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003966:	bf00      	nop
 8003968:	bd80      	pop	{r7, pc}
 800396a:	bf00      	nop
 800396c:	200019a8 	.word	0x200019a8
 8003970:	40013000 	.word	0x40013000

08003974 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b088      	sub	sp, #32
 8003978:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800397a:	f107 030c 	add.w	r3, r7, #12
 800397e:	2200      	movs	r2, #0
 8003980:	601a      	str	r2, [r3, #0]
 8003982:	605a      	str	r2, [r3, #4]
 8003984:	609a      	str	r2, [r3, #8]
 8003986:	60da      	str	r2, [r3, #12]
 8003988:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800398a:	4b30      	ldr	r3, [pc, #192]	@ (8003a4c <MX_GPIO_Init+0xd8>)
 800398c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800398e:	4a2f      	ldr	r2, [pc, #188]	@ (8003a4c <MX_GPIO_Init+0xd8>)
 8003990:	f043 0304 	orr.w	r3, r3, #4
 8003994:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003996:	4b2d      	ldr	r3, [pc, #180]	@ (8003a4c <MX_GPIO_Init+0xd8>)
 8003998:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800399a:	f003 0304 	and.w	r3, r3, #4
 800399e:	60bb      	str	r3, [r7, #8]
 80039a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80039a2:	4b2a      	ldr	r3, [pc, #168]	@ (8003a4c <MX_GPIO_Init+0xd8>)
 80039a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039a6:	4a29      	ldr	r2, [pc, #164]	@ (8003a4c <MX_GPIO_Init+0xd8>)
 80039a8:	f043 0301 	orr.w	r3, r3, #1
 80039ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80039ae:	4b27      	ldr	r3, [pc, #156]	@ (8003a4c <MX_GPIO_Init+0xd8>)
 80039b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039b2:	f003 0301 	and.w	r3, r3, #1
 80039b6:	607b      	str	r3, [r7, #4]
 80039b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80039ba:	4b24      	ldr	r3, [pc, #144]	@ (8003a4c <MX_GPIO_Init+0xd8>)
 80039bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039be:	4a23      	ldr	r2, [pc, #140]	@ (8003a4c <MX_GPIO_Init+0xd8>)
 80039c0:	f043 0302 	orr.w	r3, r3, #2
 80039c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80039c6:	4b21      	ldr	r3, [pc, #132]	@ (8003a4c <MX_GPIO_Init+0xd8>)
 80039c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039ca:	f003 0302 	and.w	r3, r3, #2
 80039ce:	603b      	str	r3, [r7, #0]
 80039d0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_RESET);
 80039d2:	2200      	movs	r2, #0
 80039d4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80039d8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80039dc:	f002 f8ba 	bl	8005b54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|CS_Pin|DC_Pin, GPIO_PIN_RESET);
 80039e0:	2200      	movs	r2, #0
 80039e2:	2138      	movs	r1, #56	@ 0x38
 80039e4:	481a      	ldr	r0, [pc, #104]	@ (8003a50 <MX_GPIO_Init+0xdc>)
 80039e6:	f002 f8b5 	bl	8005b54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_BTN_1_Pin */
  GPIO_InitStruct.Pin = USER_BTN_1_Pin;
 80039ea:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80039ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80039f0:	2300      	movs	r3, #0
 80039f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80039f4:	2302      	movs	r3, #2
 80039f6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(USER_BTN_1_GPIO_Port, &GPIO_InitStruct);
 80039f8:	f107 030c 	add.w	r3, r7, #12
 80039fc:	4619      	mov	r1, r3
 80039fe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003a02:	f001 ff25 	bl	8005850 <HAL_GPIO_Init>

  /*Configure GPIO pin : RST_Pin */
  GPIO_InitStruct.Pin = RST_Pin;
 8003a06:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003a0a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a10:	2300      	movs	r3, #0
 8003a12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a14:	2300      	movs	r3, #0
 8003a16:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 8003a18:	f107 030c 	add.w	r3, r7, #12
 8003a1c:	4619      	mov	r1, r3
 8003a1e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003a22:	f001 ff15 	bl	8005850 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin CS_Pin DC_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|CS_Pin|DC_Pin;
 8003a26:	2338      	movs	r3, #56	@ 0x38
 8003a28:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a32:	2300      	movs	r3, #0
 8003a34:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a36:	f107 030c 	add.w	r3, r7, #12
 8003a3a:	4619      	mov	r1, r3
 8003a3c:	4804      	ldr	r0, [pc, #16]	@ (8003a50 <MX_GPIO_Init+0xdc>)
 8003a3e:	f001 ff07 	bl	8005850 <HAL_GPIO_Init>

}
 8003a42:	bf00      	nop
 8003a44:	3720      	adds	r7, #32
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}
 8003a4a:	bf00      	nop
 8003a4c:	40021000 	.word	0x40021000
 8003a50:	48000400 	.word	0x48000400

08003a54 <update_backgrand>:
{
	Game_Add_Background(&g_singleton);
}

void update_backgrand(void)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	af00      	add	r7, sp, #0

	Game_Update_Backgrand(&g_singleton);
 8003a58:	4802      	ldr	r0, [pc, #8]	@ (8003a64 <update_backgrand+0x10>)
 8003a5a:	f7fe ffdd 	bl	8002a18 <Game_Update_Backgrand>
}
 8003a5e:	bf00      	nop
 8003a60:	bd80      	pop	{r7, pc}
 8003a62:	bf00      	nop
 8003a64:	20000098 	.word	0x20000098

08003a68 <update_lvl>:

void update_lvl(void)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	af00      	add	r7, sp, #0
	Game_Level_Update(&g_singleton);
 8003a6c:	4802      	ldr	r0, [pc, #8]	@ (8003a78 <update_lvl+0x10>)
 8003a6e:	f7fe ff07 	bl	8002880 <Game_Level_Update>
}
 8003a72:	bf00      	nop
 8003a74:	bd80      	pop	{r7, pc}
 8003a76:	bf00      	nop
 8003a78:	20000098 	.word	0x20000098

08003a7c <run_dead>:

void run_dead(void)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b082      	sub	sp, #8
 8003a80:	af02      	add	r7, sp, #8
	 */

	static int x = 0, dx = 1;


	x += dx;
 8003a82:	4b24      	ldr	r3, [pc, #144]	@ (8003b14 <run_dead+0x98>)
 8003a84:	681a      	ldr	r2, [r3, #0]
 8003a86:	4b24      	ldr	r3, [pc, #144]	@ (8003b18 <run_dead+0x9c>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4413      	add	r3, r2
 8003a8c:	4a21      	ldr	r2, [pc, #132]	@ (8003b14 <run_dead+0x98>)
 8003a8e:	6013      	str	r3, [r2, #0]
	if (x < 1 || x > 55) dx = -dx;
 8003a90:	4b20      	ldr	r3, [pc, #128]	@ (8003b14 <run_dead+0x98>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	dd03      	ble.n	8003aa0 <run_dead+0x24>
 8003a98:	4b1e      	ldr	r3, [pc, #120]	@ (8003b14 <run_dead+0x98>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	2b37      	cmp	r3, #55	@ 0x37
 8003a9e:	dd04      	ble.n	8003aaa <run_dead+0x2e>
 8003aa0:	4b1d      	ldr	r3, [pc, #116]	@ (8003b18 <run_dead+0x9c>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	425b      	negs	r3, r3
 8003aa6:	4a1c      	ldr	r2, [pc, #112]	@ (8003b18 <run_dead+0x9c>)
 8003aa8:	6013      	str	r3, [r2, #0]
	ssd1327_CLR();
 8003aaa:	f000 fa17 	bl	8003edc <ssd1327_CLR>
	GFX_DrowBitMap_P(x,(screen_height/2) - 4,Defeated_map,67,16,1);
 8003aae:	4b19      	ldr	r3, [pc, #100]	@ (8003b14 <run_dead+0x98>)
 8003ab0:	6818      	ldr	r0, [r3, #0]
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	9301      	str	r3, [sp, #4]
 8003ab6:	2310      	movs	r3, #16
 8003ab8:	9300      	str	r3, [sp, #0]
 8003aba:	2343      	movs	r3, #67	@ 0x43
 8003abc:	4a17      	ldr	r2, [pc, #92]	@ (8003b1c <run_dead+0xa0>)
 8003abe:	213c      	movs	r1, #60	@ 0x3c
 8003ac0:	f7fd f974 	bl	8000dac <GFX_DrowBitMap_P>
	GFX_DrowBitMap_P(35,(screen_height/2) + 24,Score_map,37,10,1);
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	9301      	str	r3, [sp, #4]
 8003ac8:	230a      	movs	r3, #10
 8003aca:	9300      	str	r3, [sp, #0]
 8003acc:	2325      	movs	r3, #37	@ 0x25
 8003ace:	4a14      	ldr	r2, [pc, #80]	@ (8003b20 <run_dead+0xa4>)
 8003ad0:	2158      	movs	r1, #88	@ 0x58
 8003ad2:	2023      	movs	r0, #35	@ 0x23
 8003ad4:	f7fd f96a 	bl	8000dac <GFX_DrowBitMap_P>
	GFX_PutInt(73,(screen_height/2) + 27,Game_Get_Palyer_Score(&g_singleton),1,1,0);
 8003ad8:	4812      	ldr	r0, [pc, #72]	@ (8003b24 <run_dead+0xa8>)
 8003ada:	f7ff fd93 	bl	8003604 <Game_Get_Palyer_Score>
 8003ade:	4602      	mov	r2, r0
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	9301      	str	r3, [sp, #4]
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	9300      	str	r3, [sp, #0]
 8003ae8:	2301      	movs	r3, #1
 8003aea:	215b      	movs	r1, #91	@ 0x5b
 8003aec:	2049      	movs	r0, #73	@ 0x49
 8003aee:	f7fd faef 	bl	80010d0 <GFX_PutInt>
	ssd1327_display();
 8003af2:	f000 f9bb 	bl	8003e6c <ssd1327_display>

	if(button_pressed())
 8003af6:	f000 f8c5 	bl	8003c84 <button_pressed>
 8003afa:	4603      	mov	r3, r0
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d005      	beq.n	8003b0c <run_dead+0x90>
	{
		play_dead_anim();
 8003b00:	f000 f812 	bl	8003b28 <play_dead_anim>
		Game_Set_State(&g_singleton, st_menu);//state = st_menu;
 8003b04:	2100      	movs	r1, #0
 8003b06:	4807      	ldr	r0, [pc, #28]	@ (8003b24 <run_dead+0xa8>)
 8003b08:	f7ff fd5a 	bl	80035c0 <Game_Set_State>
	}
}
 8003b0c:	bf00      	nop
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}
 8003b12:	bf00      	nop
 8003b14:	20001a10 	.word	0x20001a10
 8003b18:	20000004 	.word	0x20000004
 8003b1c:	0800999c 	.word	0x0800999c
 8003b20:	08009968 	.word	0x08009968
 8003b24:	20000098 	.word	0x20000098

08003b28 <play_dead_anim>:

void play_dead_anim(void)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b084      	sub	sp, #16
 8003b2c:	af02      	add	r7, sp, #8
	/*
	 * Animation between separate screens. Gives the illusion of an old game.
	 */
	uint8_t i;

	for (i = 0; i < 10; ++i)
 8003b2e:	2300      	movs	r3, #0
 8003b30:	71fb      	strb	r3, [r7, #7]
 8003b32:	e012      	b.n	8003b5a <play_dead_anim+0x32>
	{
		ssd1327_CLR();
 8003b34:	f000 f9d2 	bl	8003edc <ssd1327_CLR>
		GFX_FillRect(0,0,128,128,1);
 8003b38:	2301      	movs	r3, #1
 8003b3a:	9300      	str	r3, [sp, #0]
 8003b3c:	2380      	movs	r3, #128	@ 0x80
 8003b3e:	2280      	movs	r2, #128	@ 0x80
 8003b40:	2100      	movs	r1, #0
 8003b42:	2000      	movs	r0, #0
 8003b44:	f7fd fa3a 	bl	8000fbc <GFX_FillRect>
		ssd1327_display();
 8003b48:	f000 f990 	bl	8003e6c <ssd1327_display>

		ssd1327_CLR();
 8003b4c:	f000 f9c6 	bl	8003edc <ssd1327_CLR>
		ssd1327_display();
 8003b50:	f000 f98c 	bl	8003e6c <ssd1327_display>
	for (i = 0; i < 10; ++i)
 8003b54:	79fb      	ldrb	r3, [r7, #7]
 8003b56:	3301      	adds	r3, #1
 8003b58:	71fb      	strb	r3, [r7, #7]
 8003b5a:	79fb      	ldrb	r3, [r7, #7]
 8003b5c:	2b09      	cmp	r3, #9
 8003b5e:	d9e9      	bls.n	8003b34 <play_dead_anim+0xc>

	}
}
 8003b60:	bf00      	nop
 8003b62:	bf00      	nop
 8003b64:	3708      	adds	r7, #8
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}
	...

08003b6c <update_scene>:
{
	Game_Shot_Boss(&g_singleton);
}

void update_scene(void)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	af00      	add	r7, sp, #0
	Game_Tick(&g_singleton);
 8003b70:	4802      	ldr	r0, [pc, #8]	@ (8003b7c <update_scene+0x10>)
 8003b72:	f7fd fbf5 	bl	8001360 <Game_Tick>
}
 8003b76:	bf00      	nop
 8003b78:	bd80      	pop	{r7, pc}
 8003b7a:	bf00      	nop
 8003b7c:	20000098 	.word	0x20000098

08003b80 <run_game>:

void run_game (void)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	af00      	add	r7, sp, #0
	/*
	 * The main loop of the game, executing the relevant functions one by one
	 */
	drow_game();
 8003b84:	f000 f86a 	bl	8003c5c <drow_game>
	ssd1327_display();
 8003b88:	f000 f970 	bl	8003e6c <ssd1327_display>
	ssd1327_CLR();
 8003b8c:	f000 f9a6 	bl	8003edc <ssd1327_CLR>

	update_lvl();
 8003b90:	f7ff ff6a 	bl	8003a68 <update_lvl>
	update_scene();
 8003b94:	f7ff ffea 	bl	8003b6c <update_scene>
	update_backgrand();
 8003b98:	f7ff ff5c 	bl	8003a54 <update_backgrand>
	update_bonus();
 8003b9c:	f000 f868 	bl	8003c70 <update_bonus>

}
 8003ba0:	bf00      	nop
 8003ba2:	bd80      	pop	{r7, pc}

08003ba4 <run_menu>:

void run_menu (void)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b082      	sub	sp, #8
 8003ba8:	af02      	add	r7, sp, #8
	/*
	 * Start screen, basic information for the player at the beginning
	 */
	static int x = 0, dx = 1;
	x += dx;
 8003baa:	4b22      	ldr	r3, [pc, #136]	@ (8003c34 <run_menu+0x90>)
 8003bac:	681a      	ldr	r2, [r3, #0]
 8003bae:	4b22      	ldr	r3, [pc, #136]	@ (8003c38 <run_menu+0x94>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4413      	add	r3, r2
 8003bb4:	4a1f      	ldr	r2, [pc, #124]	@ (8003c34 <run_menu+0x90>)
 8003bb6:	6013      	str	r3, [r2, #0]
	if (x < 1 || x > 65) dx = -dx;
 8003bb8:	4b1e      	ldr	r3, [pc, #120]	@ (8003c34 <run_menu+0x90>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	dd03      	ble.n	8003bc8 <run_menu+0x24>
 8003bc0:	4b1c      	ldr	r3, [pc, #112]	@ (8003c34 <run_menu+0x90>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	2b41      	cmp	r3, #65	@ 0x41
 8003bc6:	dd04      	ble.n	8003bd2 <run_menu+0x2e>
 8003bc8:	4b1b      	ldr	r3, [pc, #108]	@ (8003c38 <run_menu+0x94>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	425b      	negs	r3, r3
 8003bce:	4a1a      	ldr	r2, [pc, #104]	@ (8003c38 <run_menu+0x94>)
 8003bd0:	6013      	str	r3, [r2, #0]
	ssd1327_CLR();
 8003bd2:	f000 f983 	bl	8003edc <ssd1327_CLR>

	GFX_DrowBitMap_P(x,(screen_height/2) - 10,uGalaxy_map,54,16,1);
 8003bd6:	4b17      	ldr	r3, [pc, #92]	@ (8003c34 <run_menu+0x90>)
 8003bd8:	6818      	ldr	r0, [r3, #0]
 8003bda:	2301      	movs	r3, #1
 8003bdc:	9301      	str	r3, [sp, #4]
 8003bde:	2310      	movs	r3, #16
 8003be0:	9300      	str	r3, [sp, #0]
 8003be2:	2336      	movs	r3, #54	@ 0x36
 8003be4:	4a15      	ldr	r2, [pc, #84]	@ (8003c3c <run_menu+0x98>)
 8003be6:	2136      	movs	r1, #54	@ 0x36
 8003be8:	f7fd f8e0 	bl	8000dac <GFX_DrowBitMap_P>
	GFX_DrowRoundRect(15,(screen_height/2) + 34,93,20,8,1);
 8003bec:	2301      	movs	r3, #1
 8003bee:	9301      	str	r3, [sp, #4]
 8003bf0:	2308      	movs	r3, #8
 8003bf2:	9300      	str	r3, [sp, #0]
 8003bf4:	2314      	movs	r3, #20
 8003bf6:	225d      	movs	r2, #93	@ 0x5d
 8003bf8:	2162      	movs	r1, #98	@ 0x62
 8003bfa:	200f      	movs	r0, #15
 8003bfc:	f7fd fa88 	bl	8001110 <GFX_DrowRoundRect>
	GFX_DrowBitMap_P(26, (screen_height/2)+ 37, PressToStart_map, 66,10,1);
 8003c00:	2301      	movs	r3, #1
 8003c02:	9301      	str	r3, [sp, #4]
 8003c04:	230a      	movs	r3, #10
 8003c06:	9300      	str	r3, [sp, #0]
 8003c08:	2342      	movs	r3, #66	@ 0x42
 8003c0a:	4a0d      	ldr	r2, [pc, #52]	@ (8003c40 <run_menu+0x9c>)
 8003c0c:	2165      	movs	r1, #101	@ 0x65
 8003c0e:	201a      	movs	r0, #26
 8003c10:	f7fd f8cc 	bl	8000dac <GFX_DrowBitMap_P>

	if(button_pressed())
 8003c14:	f000 f836 	bl	8003c84 <button_pressed>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d005      	beq.n	8003c2a <run_menu+0x86>
	{
		start_game();
 8003c1e:	f000 f813 	bl	8003c48 <start_game>
		Game_Set_State(&g_singleton, st_playing);//state = st_playing;
 8003c22:	2101      	movs	r1, #1
 8003c24:	4807      	ldr	r0, [pc, #28]	@ (8003c44 <run_menu+0xa0>)
 8003c26:	f7ff fccb 	bl	80035c0 <Game_Set_State>
	}
	ssd1327_display();
 8003c2a:	f000 f91f 	bl	8003e6c <ssd1327_display>

}
 8003c2e:	bf00      	nop
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bd80      	pop	{r7, pc}
 8003c34:	20001a14 	.word	0x20001a14
 8003c38:	20000008 	.word	0x20000008
 8003c3c:	08009a2c 	.word	0x08009a2c
 8003c40:	08009a9c 	.word	0x08009a9c
 8003c44:	20000098 	.word	0x20000098

08003c48 <start_game>:

void start_game(void)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	af00      	add	r7, sp, #0
	Game_Init(&g_singleton);
 8003c4c:	4802      	ldr	r0, [pc, #8]	@ (8003c58 <start_game+0x10>)
 8003c4e:	f7fd fad8 	bl	8001202 <Game_Init>
}
 8003c52:	bf00      	nop
 8003c54:	bd80      	pop	{r7, pc}
 8003c56:	bf00      	nop
 8003c58:	20000098 	.word	0x20000098

08003c5c <drow_game>:
void add_enemy(void)
{
	Game_Add_Enemy(&g_singleton);
}

void drow_game(void) {
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	af00      	add	r7, sp, #0
	Game_Draw(&g_singleton);
 8003c60:	4802      	ldr	r0, [pc, #8]	@ (8003c6c <drow_game+0x10>)
 8003c62:	f7fe fbc1 	bl	80023e8 <Game_Draw>
}
 8003c66:	bf00      	nop
 8003c68:	bd80      	pop	{r7, pc}
 8003c6a:	bf00      	nop
 8003c6c:	20000098 	.word	0x20000098

08003c70 <update_bonus>:
{
	Game_Add_Bonus(&g_singleton, x , y);
}

void update_bonus(void)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	af00      	add	r7, sp, #0
	Game_Update_Bonus(&g_singleton);
 8003c74:	4802      	ldr	r0, [pc, #8]	@ (8003c80 <update_bonus+0x10>)
 8003c76:	f7ff f87b 	bl	8002d70 <Game_Update_Bonus>
}
 8003c7a:	bf00      	nop
 8003c7c:	bd80      	pop	{r7, pc}
 8003c7e:	bf00      	nop
 8003c80:	20000098 	.word	0x20000098

08003c84 <button_pressed>:

uint8_t button_pressed (void)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	af00      	add	r7, sp, #0
	/*
	 * Checking whether a button has been pressed. Prevention of repetition.
	 */

	if((HAL_GPIO_ReadPin(USER_BTN_1_GPIO_Port, USER_BTN_1_Pin) == GPIO_PIN_SET) && btn_prev == 0)
 8003c88:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003c8c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003c90:	f001 ff48 	bl	8005b24 <HAL_GPIO_ReadPin>
 8003c94:	4603      	mov	r3, r0
 8003c96:	2b01      	cmp	r3, #1
 8003c98:	d108      	bne.n	8003cac <button_pressed+0x28>
 8003c9a:	4b0c      	ldr	r3, [pc, #48]	@ (8003ccc <button_pressed+0x48>)
 8003c9c:	781b      	ldrb	r3, [r3, #0]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d104      	bne.n	8003cac <button_pressed+0x28>
	{
		btn_prev = 1;
 8003ca2:	4b0a      	ldr	r3, [pc, #40]	@ (8003ccc <button_pressed+0x48>)
 8003ca4:	2201      	movs	r2, #1
 8003ca6:	701a      	strb	r2, [r3, #0]
		return 1;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	e00c      	b.n	8003cc6 <button_pressed+0x42>
	}

	if(HAL_GPIO_ReadPin(USER_BTN_1_GPIO_Port, USER_BTN_1_Pin) == GPIO_PIN_RESET)
 8003cac:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003cb0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003cb4:	f001 ff36 	bl	8005b24 <HAL_GPIO_ReadPin>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d102      	bne.n	8003cc4 <button_pressed+0x40>
	{
		btn_prev = 0;
 8003cbe:	4b03      	ldr	r3, [pc, #12]	@ (8003ccc <button_pressed+0x48>)
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	701a      	strb	r2, [r3, #0]
	}
	return 0;
 8003cc4:	2300      	movs	r3, #0
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	bd80      	pop	{r7, pc}
 8003cca:	bf00      	nop
 8003ccc:	20001a0c 	.word	0x20001a0c

08003cd0 <joystick_value_y>:

int joystick_value_y (void){
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	af00      	add	r7, sp, #0
	return HAL_ADC_GetValue(&hadc1);
 8003cd4:	4802      	ldr	r0, [pc, #8]	@ (8003ce0 <joystick_value_y+0x10>)
 8003cd6:	f000 ff76 	bl	8004bc6 <HAL_ADC_GetValue>
 8003cda:	4603      	mov	r3, r0
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	bd80      	pop	{r7, pc}
 8003ce0:	20001944 	.word	0x20001944

08003ce4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003ce8:	b672      	cpsid	i
}
 8003cea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003cec:	bf00      	nop
 8003cee:	e7fd      	b.n	8003cec <Error_Handler+0x8>

08003cf0 <ssd1327_cmd>:
SPI_HandleTypeDef *ssd1337_spi;

static uint8_t buffer[BUF_SIZE];


void ssd1327_cmd (uint8_t cmd){
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b082      	sub	sp, #8
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(DC_PORT, DC, GPIO_PIN_RESET);
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	2120      	movs	r1, #32
 8003cfe:	480c      	ldr	r0, [pc, #48]	@ (8003d30 <ssd1327_cmd+0x40>)
 8003d00:	f001 ff28 	bl	8005b54 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS_PORT, CS, GPIO_PIN_RESET);
 8003d04:	2200      	movs	r2, #0
 8003d06:	2110      	movs	r1, #16
 8003d08:	4809      	ldr	r0, [pc, #36]	@ (8003d30 <ssd1327_cmd+0x40>)
 8003d0a:	f001 ff23 	bl	8005b54 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(ssd1337_spi, &cmd, 1, 10);
 8003d0e:	4b09      	ldr	r3, [pc, #36]	@ (8003d34 <ssd1327_cmd+0x44>)
 8003d10:	6818      	ldr	r0, [r3, #0]
 8003d12:	1df9      	adds	r1, r7, #7
 8003d14:	230a      	movs	r3, #10
 8003d16:	2201      	movs	r2, #1
 8003d18:	f003 f943 	bl	8006fa2 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CS_PORT, CS, GPIO_PIN_SET);
 8003d1c:	2201      	movs	r2, #1
 8003d1e:	2110      	movs	r1, #16
 8003d20:	4803      	ldr	r0, [pc, #12]	@ (8003d30 <ssd1327_cmd+0x40>)
 8003d22:	f001 ff17 	bl	8005b54 <HAL_GPIO_WritePin>

}
 8003d26:	bf00      	nop
 8003d28:	3708      	adds	r7, #8
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}
 8003d2e:	bf00      	nop
 8003d30:	48000400 	.word	0x48000400
 8003d34:	20001a18 	.word	0x20001a18

08003d38 <ssd1327_Reset>:
{
	ssd1327_cmd(SSD1327_SETCONTRASTCURRENT);	// Set Contrast Control
	ssd1327_cmd(Contrast);
}

void ssd1327_Reset(void){
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(RST_PORT, RST, GPIO_PIN_RESET);
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003d42:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003d46:	f001 ff05 	bl	8005b54 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8003d4a:	2014      	movs	r0, #20
 8003d4c:	f000 fb92 	bl	8004474 <HAL_Delay>
	HAL_GPIO_WritePin(RST_PORT, RST, GPIO_PIN_SET);
 8003d50:	2201      	movs	r2, #1
 8003d52:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003d56:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003d5a:	f001 fefb 	bl	8005b54 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8003d5e:	2014      	movs	r0, #20
 8003d60:	f000 fb88 	bl	8004474 <HAL_Delay>

}
 8003d64:	bf00      	nop
 8003d66:	bd80      	pop	{r7, pc}

08003d68 <ssd1327_SpiInit>:

void ssd1327_SpiInit(SPI_HandleTypeDef *spi){
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b082      	sub	sp, #8
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]

	ssd1337_spi = spi;
 8003d70:	4a05      	ldr	r2, [pc, #20]	@ (8003d88 <ssd1327_SpiInit+0x20>)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6013      	str	r3, [r2, #0]

	ssd1327_Reset();
 8003d76:	f7ff ffdf 	bl	8003d38 <ssd1327_Reset>
	ssd1327_Init();
 8003d7a:	f000 f807 	bl	8003d8c <ssd1327_Init>

}
 8003d7e:	bf00      	nop
 8003d80:	3708      	adds	r7, #8
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}
 8003d86:	bf00      	nop
 8003d88:	20001a18 	.word	0x20001a18

08003d8c <ssd1327_Init>:

void ssd1327_Init (void){
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	af00      	add	r7, sp, #0

	ssd1327_cmd(0xae);	// Turn off oled panel
 8003d90:	20ae      	movs	r0, #174	@ 0xae
 8003d92:	f7ff ffad 	bl	8003cf0 <ssd1327_cmd>

	ssd1327_cmd(0x15);  // Set column addresses
 8003d96:	2015      	movs	r0, #21
 8003d98:	f7ff ffaa 	bl	8003cf0 <ssd1327_cmd>
	ssd1327_cmd(0x00);  // Start column  0
 8003d9c:	2000      	movs	r0, #0
 8003d9e:	f7ff ffa7 	bl	8003cf0 <ssd1327_cmd>
	ssd1327_cmd(0x7f);  // End column  127
 8003da2:	207f      	movs	r0, #127	@ 0x7f
 8003da4:	f7ff ffa4 	bl	8003cf0 <ssd1327_cmd>

	ssd1327_cmd(0x75);  // Set row addresses
 8003da8:	2075      	movs	r0, #117	@ 0x75
 8003daa:	f7ff ffa1 	bl	8003cf0 <ssd1327_cmd>
	ssd1327_cmd(0x00);  // Start row  0
 8003dae:	2000      	movs	r0, #0
 8003db0:	f7ff ff9e 	bl	8003cf0 <ssd1327_cmd>
	ssd1327_cmd(0x7f);  // End row  127
 8003db4:	207f      	movs	r0, #127	@ 0x7f
 8003db6:	f7ff ff9b 	bl	8003cf0 <ssd1327_cmd>

	ssd1327_cmd(0x81);  // Set contrast control
 8003dba:	2081      	movs	r0, #129	@ 0x81
 8003dbc:	f7ff ff98 	bl	8003cf0 <ssd1327_cmd>
	ssd1327_cmd(0x80);  // 50% (128/255) def.0x80
 8003dc0:	2080      	movs	r0, #128	@ 0x80
 8003dc2:	f7ff ff95 	bl	8003cf0 <ssd1327_cmd>

	ssd1327_cmd(0xa0);  // Gment remap
 8003dc6:	20a0      	movs	r0, #160	@ 0xa0
 8003dc8:	f7ff ff92 	bl	8003cf0 <ssd1327_cmd>
	ssd1327_cmd(0x51);  // 51 (To my understanding, this is orientation
 8003dcc:	2051      	movs	r0, #81	@ 0x51
 8003dce:	f7ff ff8f 	bl	8003cf0 <ssd1327_cmd>

	ssd1327_cmd(0xa1);  // Start line
 8003dd2:	20a1      	movs	r0, #161	@ 0xa1
 8003dd4:	f7ff ff8c 	bl	8003cf0 <ssd1327_cmd>
	ssd1327_cmd(0x00);
 8003dd8:	2000      	movs	r0, #0
 8003dda:	f7ff ff89 	bl	8003cf0 <ssd1327_cmd>

	ssd1327_cmd(0xa2);  // Display offset
 8003dde:	20a2      	movs	r0, #162	@ 0xa2
 8003de0:	f7ff ff86 	bl	8003cf0 <ssd1327_cmd>
	ssd1327_cmd(0x00);
 8003de4:	2000      	movs	r0, #0
 8003de6:	f7ff ff83 	bl	8003cf0 <ssd1327_cmd>

	ssd1327_cmd(0xa4);  // rmal display
 8003dea:	20a4      	movs	r0, #164	@ 0xa4
 8003dec:	f7ff ff80 	bl	8003cf0 <ssd1327_cmd>
	ssd1327_cmd(0xa8);  // Set multiplex ratio
 8003df0:	20a8      	movs	r0, #168	@ 0xa8
 8003df2:	f7ff ff7d 	bl	8003cf0 <ssd1327_cmd>
	ssd1327_cmd(0x7f);
 8003df6:	207f      	movs	r0, #127	@ 0x7f
 8003df8:	f7ff ff7a 	bl	8003cf0 <ssd1327_cmd>

	ssd1327_cmd(0xb1);  // Set phase leghth
 8003dfc:	20b1      	movs	r0, #177	@ 0xb1
 8003dfe:	f7ff ff77 	bl	8003cf0 <ssd1327_cmd>
	ssd1327_cmd(0xf1);
 8003e02:	20f1      	movs	r0, #241	@ 0xf1
 8003e04:	f7ff ff74 	bl	8003cf0 <ssd1327_cmd>

	ssd1327_cmd(0xb3);  // Set dclk
 8003e08:	20b3      	movs	r0, #179	@ 0xb3
 8003e0a:	f7ff ff71 	bl	8003cf0 <ssd1327_cmd>
	ssd1327_cmd(0x00);  // 80Hz:0xc1 90Hz:0xe1  100Hz:0x00  110Hz:0x30 120Hz:0x50  130Hz:0x70   01
 8003e0e:	2000      	movs	r0, #0
 8003e10:	f7ff ff6e 	bl	8003cf0 <ssd1327_cmd>

	ssd1327_cmd(0xab);  // Enable vReg
 8003e14:	20ab      	movs	r0, #171	@ 0xab
 8003e16:	f7ff ff6b 	bl	8003cf0 <ssd1327_cmd>
	ssd1327_cmd(0x01);
 8003e1a:	2001      	movs	r0, #1
 8003e1c:	f7ff ff68 	bl	8003cf0 <ssd1327_cmd>

	ssd1327_cmd(0xb6);  // Set phase leghth
 8003e20:	20b6      	movs	r0, #182	@ 0xb6
 8003e22:	f7ff ff65 	bl	8003cf0 <ssd1327_cmd>
	ssd1327_cmd(0x0f);
 8003e26:	200f      	movs	r0, #15
 8003e28:	f7ff ff62 	bl	8003cf0 <ssd1327_cmd>

	ssd1327_cmd(0xbe); 	// Set vcomh voltage
 8003e2c:	20be      	movs	r0, #190	@ 0xbe
 8003e2e:	f7ff ff5f 	bl	8003cf0 <ssd1327_cmd>
	ssd1327_cmd(0x0f);
 8003e32:	200f      	movs	r0, #15
 8003e34:	f7ff ff5c 	bl	8003cf0 <ssd1327_cmd>

	ssd1327_cmd(0xbc); 	// Set pre-charge voltage
 8003e38:	20bc      	movs	r0, #188	@ 0xbc
 8003e3a:	f7ff ff59 	bl	8003cf0 <ssd1327_cmd>
	ssd1327_cmd(0x08);
 8003e3e:	2008      	movs	r0, #8
 8003e40:	f7ff ff56 	bl	8003cf0 <ssd1327_cmd>

	ssd1327_cmd(0xd5); 	// Second precharge period
 8003e44:	20d5      	movs	r0, #213	@ 0xd5
 8003e46:	f7ff ff53 	bl	8003cf0 <ssd1327_cmd>
	ssd1327_cmd(0x62);
 8003e4a:	2062      	movs	r0, #98	@ 0x62
 8003e4c:	f7ff ff50 	bl	8003cf0 <ssd1327_cmd>

	ssd1327_cmd(0xfd); 	// Unlock commands
 8003e50:	20fd      	movs	r0, #253	@ 0xfd
 8003e52:	f7ff ff4d 	bl	8003cf0 <ssd1327_cmd>
	ssd1327_cmd(0x12);
 8003e56:	2012      	movs	r0, #18
 8003e58:	f7ff ff4a 	bl	8003cf0 <ssd1327_cmd>

	ssd1327_cmd(0xA4);
 8003e5c:	20a4      	movs	r0, #164	@ 0xa4
 8003e5e:	f7ff ff47 	bl	8003cf0 <ssd1327_cmd>

	ssd1327_cmd(SSD1327_DISPLAYON);
 8003e62:	20af      	movs	r0, #175	@ 0xaf
 8003e64:	f7ff ff44 	bl	8003cf0 <ssd1327_cmd>
}
 8003e68:	bf00      	nop
 8003e6a:	bd80      	pop	{r7, pc}

08003e6c <ssd1327_display>:

void ssd1327_display (void){
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	af00      	add	r7, sp, #0

	ssd1327_cmd(SSD1327_SETCOLUMNADDRESS);
 8003e70:	2015      	movs	r0, #21
 8003e72:	f7ff ff3d 	bl	8003cf0 <ssd1327_cmd>
	ssd1327_cmd(0x00);
 8003e76:	2000      	movs	r0, #0
 8003e78:	f7ff ff3a 	bl	8003cf0 <ssd1327_cmd>
	ssd1327_cmd(0x7F);
 8003e7c:	207f      	movs	r0, #127	@ 0x7f
 8003e7e:	f7ff ff37 	bl	8003cf0 <ssd1327_cmd>

	ssd1327_cmd(SSD1327_SETROWADDRESS);
 8003e82:	2075      	movs	r0, #117	@ 0x75
 8003e84:	f7ff ff34 	bl	8003cf0 <ssd1327_cmd>
	ssd1327_cmd(0x00);
 8003e88:	2000      	movs	r0, #0
 8003e8a:	f7ff ff31 	bl	8003cf0 <ssd1327_cmd>
	ssd1327_cmd(0x7F);
 8003e8e:	207f      	movs	r0, #127	@ 0x7f
 8003e90:	f7ff ff2e 	bl	8003cf0 <ssd1327_cmd>

	HAL_GPIO_WritePin(CS_PORT, CS, GPIO_PIN_RESET);
 8003e94:	2200      	movs	r2, #0
 8003e96:	2110      	movs	r1, #16
 8003e98:	480d      	ldr	r0, [pc, #52]	@ (8003ed0 <ssd1327_display+0x64>)
 8003e9a:	f001 fe5b 	bl	8005b54 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DC_PORT, DC, GPIO_PIN_SET);
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	2120      	movs	r1, #32
 8003ea2:	480b      	ldr	r0, [pc, #44]	@ (8003ed0 <ssd1327_display+0x64>)
 8003ea4:	f001 fe56 	bl	8005b54 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS_PORT, CS, GPIO_PIN_RESET);
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	2110      	movs	r1, #16
 8003eac:	4808      	ldr	r0, [pc, #32]	@ (8003ed0 <ssd1327_display+0x64>)
 8003eae:	f001 fe51 	bl	8005b54 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(ssd1337_spi, (uint8_t*)&buffer, BUF_SIZE, 100);
 8003eb2:	4b08      	ldr	r3, [pc, #32]	@ (8003ed4 <ssd1327_display+0x68>)
 8003eb4:	6818      	ldr	r0, [r3, #0]
 8003eb6:	2364      	movs	r3, #100	@ 0x64
 8003eb8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003ebc:	4906      	ldr	r1, [pc, #24]	@ (8003ed8 <ssd1327_display+0x6c>)
 8003ebe:	f003 f870 	bl	8006fa2 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CS_PORT, CS, GPIO_PIN_SET);
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	2110      	movs	r1, #16
 8003ec6:	4802      	ldr	r0, [pc, #8]	@ (8003ed0 <ssd1327_display+0x64>)
 8003ec8:	f001 fe44 	bl	8005b54 <HAL_GPIO_WritePin>

}
 8003ecc:	bf00      	nop
 8003ece:	bd80      	pop	{r7, pc}
 8003ed0:	48000400 	.word	0x48000400
 8003ed4:	20001a18 	.word	0x20001a18
 8003ed8:	20001a1c 	.word	0x20001a1c

08003edc <ssd1327_CLR>:

void ssd1327_CLR(void){
 8003edc:	b580      	push	{r7, lr}
 8003ede:	af00      	add	r7, sp, #0
		memset(buffer, (0 << 4 | 0), BUF_SIZE);
 8003ee0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003ee4:	2100      	movs	r1, #0
 8003ee6:	4802      	ldr	r0, [pc, #8]	@ (8003ef0 <ssd1327_CLR+0x14>)
 8003ee8:	f003 fc71 	bl	80077ce <memset>
}
 8003eec:	bf00      	nop
 8003eee:	bd80      	pop	{r7, pc}
 8003ef0:	20001a1c 	.word	0x20001a1c

08003ef4 <ssd1327_setPixel>:

void ssd1327_setPixel( int x , int y , uint8_t bw){
 8003ef4:	b480      	push	{r7}
 8003ef6:	b087      	sub	sp, #28
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	60f8      	str	r0, [r7, #12]
 8003efc:	60b9      	str	r1, [r7, #8]
 8003efe:	4613      	mov	r3, r2
 8003f00:	71fb      	strb	r3, [r7, #7]
	if ((x < 0) || (x >= SSD1327_WIDTH) || (y < 0) || (y >= SSD1327_HEIGHT))
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	db3d      	blt.n	8003f84 <ssd1327_setPixel+0x90>
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	2b7f      	cmp	r3, #127	@ 0x7f
 8003f0c:	dc3a      	bgt.n	8003f84 <ssd1327_setPixel+0x90>
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	db37      	blt.n	8003f84 <ssd1327_setPixel+0x90>
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	2b7f      	cmp	r3, #127	@ 0x7f
 8003f18:	dc34      	bgt.n	8003f84 <ssd1327_setPixel+0x90>
		return;

	uint8_t SelectedCell = buffer[x/2 + y*(SSD1327_WIDTH/2)];
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	0fda      	lsrs	r2, r3, #31
 8003f1e:	4413      	add	r3, r2
 8003f20:	105b      	asrs	r3, r3, #1
 8003f22:	461a      	mov	r2, r3
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	019b      	lsls	r3, r3, #6
 8003f28:	4413      	add	r3, r2
 8003f2a:	4a19      	ldr	r2, [pc, #100]	@ (8003f90 <ssd1327_setPixel+0x9c>)
 8003f2c:	5cd3      	ldrb	r3, [r2, r3]
 8003f2e:	75fb      	strb	r3, [r7, #23]

	if(x % 2)
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	f003 0301 	and.w	r3, r3, #1
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d00b      	beq.n	8003f52 <ssd1327_setPixel+0x5e>
	{
		SelectedCell &= ~(0x0F);
 8003f3a:	7dfb      	ldrb	r3, [r7, #23]
 8003f3c:	f023 030f 	bic.w	r3, r3, #15
 8003f40:	75fb      	strb	r3, [r7, #23]
		SelectedCell |= (0x0F & bw);
 8003f42:	79fb      	ldrb	r3, [r7, #7]
 8003f44:	f003 030f 	and.w	r3, r3, #15
 8003f48:	b2da      	uxtb	r2, r3
 8003f4a:	7dfb      	ldrb	r3, [r7, #23]
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	75fb      	strb	r3, [r7, #23]
 8003f50:	e00c      	b.n	8003f6c <ssd1327_setPixel+0x78>
	}
	else
	{
		SelectedCell &= ~(0xF0);
 8003f52:	7dfb      	ldrb	r3, [r7, #23]
 8003f54:	f003 030f 	and.w	r3, r3, #15
 8003f58:	75fb      	strb	r3, [r7, #23]
		SelectedCell |= (0xF0 & (bw<<4));
 8003f5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f5e:	011b      	lsls	r3, r3, #4
 8003f60:	b25a      	sxtb	r2, r3
 8003f62:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003f66:	4313      	orrs	r3, r2
 8003f68:	b25b      	sxtb	r3, r3
 8003f6a:	75fb      	strb	r3, [r7, #23]
	}

	buffer[x/2 + y*(SSD1327_WIDTH/2)] = SelectedCell;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	0fda      	lsrs	r2, r3, #31
 8003f70:	4413      	add	r3, r2
 8003f72:	105b      	asrs	r3, r3, #1
 8003f74:	461a      	mov	r2, r3
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	019b      	lsls	r3, r3, #6
 8003f7a:	4413      	add	r3, r2
 8003f7c:	4904      	ldr	r1, [pc, #16]	@ (8003f90 <ssd1327_setPixel+0x9c>)
 8003f7e:	7dfa      	ldrb	r2, [r7, #23]
 8003f80:	54ca      	strb	r2, [r1, r3]
 8003f82:	e000      	b.n	8003f86 <ssd1327_setPixel+0x92>
		return;
 8003f84:	bf00      	nop

//	if ((x < 0) || (x >= SSD1327_WIDTH) || (y < 0) || (y >= SSD1327_HEIGHT))
//		return;
//	if (bw) buffer[x + (y/4)*SSD1327_WIDTH] |= (1<<(y%4));
//	else buffer[x + (y/4)*SSD1327_WIDTH] &= ~(1<<(y%4));
}
 8003f86:	371c      	adds	r7, #28
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8e:	4770      	bx	lr
 8003f90:	20001a1c 	.word	0x20001a1c

08003f94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b083      	sub	sp, #12
 8003f98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f9a:	4b0f      	ldr	r3, [pc, #60]	@ (8003fd8 <HAL_MspInit+0x44>)
 8003f9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f9e:	4a0e      	ldr	r2, [pc, #56]	@ (8003fd8 <HAL_MspInit+0x44>)
 8003fa0:	f043 0301 	orr.w	r3, r3, #1
 8003fa4:	6613      	str	r3, [r2, #96]	@ 0x60
 8003fa6:	4b0c      	ldr	r3, [pc, #48]	@ (8003fd8 <HAL_MspInit+0x44>)
 8003fa8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003faa:	f003 0301 	and.w	r3, r3, #1
 8003fae:	607b      	str	r3, [r7, #4]
 8003fb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003fb2:	4b09      	ldr	r3, [pc, #36]	@ (8003fd8 <HAL_MspInit+0x44>)
 8003fb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fb6:	4a08      	ldr	r2, [pc, #32]	@ (8003fd8 <HAL_MspInit+0x44>)
 8003fb8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003fbc:	6593      	str	r3, [r2, #88]	@ 0x58
 8003fbe:	4b06      	ldr	r3, [pc, #24]	@ (8003fd8 <HAL_MspInit+0x44>)
 8003fc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fc2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fc6:	603b      	str	r3, [r7, #0]
 8003fc8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003fca:	bf00      	nop
 8003fcc:	370c      	adds	r7, #12
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd4:	4770      	bx	lr
 8003fd6:	bf00      	nop
 8003fd8:	40021000 	.word	0x40021000

08003fdc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b09e      	sub	sp, #120	@ 0x78
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fe4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003fe8:	2200      	movs	r2, #0
 8003fea:	601a      	str	r2, [r3, #0]
 8003fec:	605a      	str	r2, [r3, #4]
 8003fee:	609a      	str	r2, [r3, #8]
 8003ff0:	60da      	str	r2, [r3, #12]
 8003ff2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003ff4:	f107 0310 	add.w	r3, r7, #16
 8003ff8:	2254      	movs	r2, #84	@ 0x54
 8003ffa:	2100      	movs	r1, #0
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	f003 fbe6 	bl	80077ce <memset>
  if(hadc->Instance==ADC1)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a25      	ldr	r2, [pc, #148]	@ (800409c <HAL_ADC_MspInit+0xc0>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d143      	bne.n	8004094 <HAL_ADC_MspInit+0xb8>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800400c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004010:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8004012:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8004016:	65bb      	str	r3, [r7, #88]	@ 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8004018:	2301      	movs	r3, #1
 800401a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800401c:	2301      	movs	r3, #1
 800401e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8004020:	2310      	movs	r3, #16
 8004022:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8004024:	2307      	movs	r3, #7
 8004026:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8004028:	2302      	movs	r3, #2
 800402a:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800402c:	2302      	movs	r3, #2
 800402e:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8004030:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004034:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004036:	f107 0310 	add.w	r3, r7, #16
 800403a:	4618      	mov	r0, r3
 800403c:	f002 fc16 	bl	800686c <HAL_RCCEx_PeriphCLKConfig>
 8004040:	4603      	mov	r3, r0
 8004042:	2b00      	cmp	r3, #0
 8004044:	d001      	beq.n	800404a <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8004046:	f7ff fe4d 	bl	8003ce4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800404a:	4b15      	ldr	r3, [pc, #84]	@ (80040a0 <HAL_ADC_MspInit+0xc4>)
 800404c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800404e:	4a14      	ldr	r2, [pc, #80]	@ (80040a0 <HAL_ADC_MspInit+0xc4>)
 8004050:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004054:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004056:	4b12      	ldr	r3, [pc, #72]	@ (80040a0 <HAL_ADC_MspInit+0xc4>)
 8004058:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800405a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800405e:	60fb      	str	r3, [r7, #12]
 8004060:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004062:	4b0f      	ldr	r3, [pc, #60]	@ (80040a0 <HAL_ADC_MspInit+0xc4>)
 8004064:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004066:	4a0e      	ldr	r2, [pc, #56]	@ (80040a0 <HAL_ADC_MspInit+0xc4>)
 8004068:	f043 0301 	orr.w	r3, r3, #1
 800406c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800406e:	4b0c      	ldr	r3, [pc, #48]	@ (80040a0 <HAL_ADC_MspInit+0xc4>)
 8004070:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004072:	f003 0301 	and.w	r3, r3, #1
 8004076:	60bb      	str	r3, [r7, #8]
 8004078:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800407a:	2301      	movs	r3, #1
 800407c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800407e:	230b      	movs	r3, #11
 8004080:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004082:	2300      	movs	r3, #0
 8004084:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004086:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800408a:	4619      	mov	r1, r3
 800408c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004090:	f001 fbde 	bl	8005850 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004094:	bf00      	nop
 8004096:	3778      	adds	r7, #120	@ 0x78
 8004098:	46bd      	mov	sp, r7
 800409a:	bd80      	pop	{r7, pc}
 800409c:	50040000 	.word	0x50040000
 80040a0:	40021000 	.word	0x40021000

080040a4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b08a      	sub	sp, #40	@ 0x28
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040ac:	f107 0314 	add.w	r3, r7, #20
 80040b0:	2200      	movs	r2, #0
 80040b2:	601a      	str	r2, [r3, #0]
 80040b4:	605a      	str	r2, [r3, #4]
 80040b6:	609a      	str	r2, [r3, #8]
 80040b8:	60da      	str	r2, [r3, #12]
 80040ba:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a17      	ldr	r2, [pc, #92]	@ (8004120 <HAL_SPI_MspInit+0x7c>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d128      	bne.n	8004118 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80040c6:	4b17      	ldr	r3, [pc, #92]	@ (8004124 <HAL_SPI_MspInit+0x80>)
 80040c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040ca:	4a16      	ldr	r2, [pc, #88]	@ (8004124 <HAL_SPI_MspInit+0x80>)
 80040cc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80040d0:	6613      	str	r3, [r2, #96]	@ 0x60
 80040d2:	4b14      	ldr	r3, [pc, #80]	@ (8004124 <HAL_SPI_MspInit+0x80>)
 80040d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040d6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80040da:	613b      	str	r3, [r7, #16]
 80040dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80040de:	4b11      	ldr	r3, [pc, #68]	@ (8004124 <HAL_SPI_MspInit+0x80>)
 80040e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040e2:	4a10      	ldr	r2, [pc, #64]	@ (8004124 <HAL_SPI_MspInit+0x80>)
 80040e4:	f043 0301 	orr.w	r3, r3, #1
 80040e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80040ea:	4b0e      	ldr	r3, [pc, #56]	@ (8004124 <HAL_SPI_MspInit+0x80>)
 80040ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040ee:	f003 0301 	and.w	r3, r3, #1
 80040f2:	60fb      	str	r3, [r7, #12]
 80040f4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_7;
 80040f6:	2382      	movs	r3, #130	@ 0x82
 80040f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040fa:	2302      	movs	r3, #2
 80040fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040fe:	2300      	movs	r3, #0
 8004100:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004102:	2303      	movs	r3, #3
 8004104:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004106:	2305      	movs	r3, #5
 8004108:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800410a:	f107 0314 	add.w	r3, r7, #20
 800410e:	4619      	mov	r1, r3
 8004110:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004114:	f001 fb9c 	bl	8005850 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8004118:	bf00      	nop
 800411a:	3728      	adds	r7, #40	@ 0x28
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}
 8004120:	40013000 	.word	0x40013000
 8004124:	40021000 	.word	0x40021000

08004128 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004128:	b480      	push	{r7}
 800412a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800412c:	bf00      	nop
 800412e:	e7fd      	b.n	800412c <NMI_Handler+0x4>

08004130 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004130:	b480      	push	{r7}
 8004132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004134:	bf00      	nop
 8004136:	e7fd      	b.n	8004134 <HardFault_Handler+0x4>

08004138 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004138:	b480      	push	{r7}
 800413a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800413c:	bf00      	nop
 800413e:	e7fd      	b.n	800413c <MemManage_Handler+0x4>

08004140 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004140:	b480      	push	{r7}
 8004142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004144:	bf00      	nop
 8004146:	e7fd      	b.n	8004144 <BusFault_Handler+0x4>

08004148 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004148:	b480      	push	{r7}
 800414a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800414c:	bf00      	nop
 800414e:	e7fd      	b.n	800414c <UsageFault_Handler+0x4>

08004150 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004150:	b480      	push	{r7}
 8004152:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004154:	bf00      	nop
 8004156:	46bd      	mov	sp, r7
 8004158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415c:	4770      	bx	lr

0800415e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800415e:	b480      	push	{r7}
 8004160:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004162:	bf00      	nop
 8004164:	46bd      	mov	sp, r7
 8004166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416a:	4770      	bx	lr

0800416c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800416c:	b480      	push	{r7}
 800416e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004170:	bf00      	nop
 8004172:	46bd      	mov	sp, r7
 8004174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004178:	4770      	bx	lr

0800417a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800417a:	b580      	push	{r7, lr}
 800417c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800417e:	f000 f959 	bl	8004434 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004182:	bf00      	nop
 8004184:	bd80      	pop	{r7, pc}

08004186 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004186:	b480      	push	{r7}
 8004188:	af00      	add	r7, sp, #0
	return 1;
 800418a:	2301      	movs	r3, #1
}
 800418c:	4618      	mov	r0, r3
 800418e:	46bd      	mov	sp, r7
 8004190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004194:	4770      	bx	lr

08004196 <_kill>:

int _kill(int pid, int sig)
{
 8004196:	b580      	push	{r7, lr}
 8004198:	b082      	sub	sp, #8
 800419a:	af00      	add	r7, sp, #0
 800419c:	6078      	str	r0, [r7, #4]
 800419e:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80041a0:	f003 fb64 	bl	800786c <__errno>
 80041a4:	4603      	mov	r3, r0
 80041a6:	2216      	movs	r2, #22
 80041a8:	601a      	str	r2, [r3, #0]
	return -1;
 80041aa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	3708      	adds	r7, #8
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}

080041b6 <_exit>:

void _exit (int status)
{
 80041b6:	b580      	push	{r7, lr}
 80041b8:	b082      	sub	sp, #8
 80041ba:	af00      	add	r7, sp, #0
 80041bc:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80041be:	f04f 31ff 	mov.w	r1, #4294967295
 80041c2:	6878      	ldr	r0, [r7, #4]
 80041c4:	f7ff ffe7 	bl	8004196 <_kill>
	while (1) {}		/* Make sure we hang here */
 80041c8:	bf00      	nop
 80041ca:	e7fd      	b.n	80041c8 <_exit+0x12>

080041cc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b086      	sub	sp, #24
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	60f8      	str	r0, [r7, #12]
 80041d4:	60b9      	str	r1, [r7, #8]
 80041d6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80041d8:	2300      	movs	r3, #0
 80041da:	617b      	str	r3, [r7, #20]
 80041dc:	e00a      	b.n	80041f4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80041de:	f3af 8000 	nop.w
 80041e2:	4601      	mov	r1, r0
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	1c5a      	adds	r2, r3, #1
 80041e8:	60ba      	str	r2, [r7, #8]
 80041ea:	b2ca      	uxtb	r2, r1
 80041ec:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	3301      	adds	r3, #1
 80041f2:	617b      	str	r3, [r7, #20]
 80041f4:	697a      	ldr	r2, [r7, #20]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	429a      	cmp	r2, r3
 80041fa:	dbf0      	blt.n	80041de <_read+0x12>
	}

return len;
 80041fc:	687b      	ldr	r3, [r7, #4]
}
 80041fe:	4618      	mov	r0, r3
 8004200:	3718      	adds	r7, #24
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}

08004206 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004206:	b580      	push	{r7, lr}
 8004208:	b086      	sub	sp, #24
 800420a:	af00      	add	r7, sp, #0
 800420c:	60f8      	str	r0, [r7, #12]
 800420e:	60b9      	str	r1, [r7, #8]
 8004210:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004212:	2300      	movs	r3, #0
 8004214:	617b      	str	r3, [r7, #20]
 8004216:	e009      	b.n	800422c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	1c5a      	adds	r2, r3, #1
 800421c:	60ba      	str	r2, [r7, #8]
 800421e:	781b      	ldrb	r3, [r3, #0]
 8004220:	4618      	mov	r0, r3
 8004222:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004226:	697b      	ldr	r3, [r7, #20]
 8004228:	3301      	adds	r3, #1
 800422a:	617b      	str	r3, [r7, #20]
 800422c:	697a      	ldr	r2, [r7, #20]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	429a      	cmp	r2, r3
 8004232:	dbf1      	blt.n	8004218 <_write+0x12>
	}
	return len;
 8004234:	687b      	ldr	r3, [r7, #4]
}
 8004236:	4618      	mov	r0, r3
 8004238:	3718      	adds	r7, #24
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}

0800423e <_close>:

int _close(int file)
{
 800423e:	b480      	push	{r7}
 8004240:	b083      	sub	sp, #12
 8004242:	af00      	add	r7, sp, #0
 8004244:	6078      	str	r0, [r7, #4]
	return -1;
 8004246:	f04f 33ff 	mov.w	r3, #4294967295
}
 800424a:	4618      	mov	r0, r3
 800424c:	370c      	adds	r7, #12
 800424e:	46bd      	mov	sp, r7
 8004250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004254:	4770      	bx	lr

08004256 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004256:	b480      	push	{r7}
 8004258:	b083      	sub	sp, #12
 800425a:	af00      	add	r7, sp, #0
 800425c:	6078      	str	r0, [r7, #4]
 800425e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004266:	605a      	str	r2, [r3, #4]
	return 0;
 8004268:	2300      	movs	r3, #0
}
 800426a:	4618      	mov	r0, r3
 800426c:	370c      	adds	r7, #12
 800426e:	46bd      	mov	sp, r7
 8004270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004274:	4770      	bx	lr

08004276 <_isatty>:

int _isatty(int file)
{
 8004276:	b480      	push	{r7}
 8004278:	b083      	sub	sp, #12
 800427a:	af00      	add	r7, sp, #0
 800427c:	6078      	str	r0, [r7, #4]
	return 1;
 800427e:	2301      	movs	r3, #1
}
 8004280:	4618      	mov	r0, r3
 8004282:	370c      	adds	r7, #12
 8004284:	46bd      	mov	sp, r7
 8004286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428a:	4770      	bx	lr

0800428c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800428c:	b480      	push	{r7}
 800428e:	b085      	sub	sp, #20
 8004290:	af00      	add	r7, sp, #0
 8004292:	60f8      	str	r0, [r7, #12]
 8004294:	60b9      	str	r1, [r7, #8]
 8004296:	607a      	str	r2, [r7, #4]
	return 0;
 8004298:	2300      	movs	r3, #0
}
 800429a:	4618      	mov	r0, r3
 800429c:	3714      	adds	r7, #20
 800429e:	46bd      	mov	sp, r7
 80042a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a4:	4770      	bx	lr
	...

080042a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b086      	sub	sp, #24
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80042b0:	4a14      	ldr	r2, [pc, #80]	@ (8004304 <_sbrk+0x5c>)
 80042b2:	4b15      	ldr	r3, [pc, #84]	@ (8004308 <_sbrk+0x60>)
 80042b4:	1ad3      	subs	r3, r2, r3
 80042b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80042bc:	4b13      	ldr	r3, [pc, #76]	@ (800430c <_sbrk+0x64>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d102      	bne.n	80042ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80042c4:	4b11      	ldr	r3, [pc, #68]	@ (800430c <_sbrk+0x64>)
 80042c6:	4a12      	ldr	r2, [pc, #72]	@ (8004310 <_sbrk+0x68>)
 80042c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80042ca:	4b10      	ldr	r3, [pc, #64]	@ (800430c <_sbrk+0x64>)
 80042cc:	681a      	ldr	r2, [r3, #0]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	4413      	add	r3, r2
 80042d2:	693a      	ldr	r2, [r7, #16]
 80042d4:	429a      	cmp	r2, r3
 80042d6:	d207      	bcs.n	80042e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80042d8:	f003 fac8 	bl	800786c <__errno>
 80042dc:	4603      	mov	r3, r0
 80042de:	220c      	movs	r2, #12
 80042e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80042e2:	f04f 33ff 	mov.w	r3, #4294967295
 80042e6:	e009      	b.n	80042fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80042e8:	4b08      	ldr	r3, [pc, #32]	@ (800430c <_sbrk+0x64>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80042ee:	4b07      	ldr	r3, [pc, #28]	@ (800430c <_sbrk+0x64>)
 80042f0:	681a      	ldr	r2, [r3, #0]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	4413      	add	r3, r2
 80042f6:	4a05      	ldr	r2, [pc, #20]	@ (800430c <_sbrk+0x64>)
 80042f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80042fa:	68fb      	ldr	r3, [r7, #12]
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	3718      	adds	r7, #24
 8004300:	46bd      	mov	sp, r7
 8004302:	bd80      	pop	{r7, pc}
 8004304:	20010000 	.word	0x20010000
 8004308:	00000400 	.word	0x00000400
 800430c:	20003a1c 	.word	0x20003a1c
 8004310:	20003b70 	.word	0x20003b70

08004314 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8004314:	b480      	push	{r7}
 8004316:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8004318:	4b06      	ldr	r3, [pc, #24]	@ (8004334 <SystemInit+0x20>)
 800431a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800431e:	4a05      	ldr	r2, [pc, #20]	@ (8004334 <SystemInit+0x20>)
 8004320:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004324:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8004328:	bf00      	nop
 800432a:	46bd      	mov	sp, r7
 800432c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004330:	4770      	bx	lr
 8004332:	bf00      	nop
 8004334:	e000ed00 	.word	0xe000ed00

08004338 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8004338:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004370 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800433c:	f7ff ffea 	bl	8004314 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004340:	480c      	ldr	r0, [pc, #48]	@ (8004374 <LoopForever+0x6>)
  ldr r1, =_edata
 8004342:	490d      	ldr	r1, [pc, #52]	@ (8004378 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004344:	4a0d      	ldr	r2, [pc, #52]	@ (800437c <LoopForever+0xe>)
  movs r3, #0
 8004346:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004348:	e002      	b.n	8004350 <LoopCopyDataInit>

0800434a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800434a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800434c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800434e:	3304      	adds	r3, #4

08004350 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004350:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004352:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004354:	d3f9      	bcc.n	800434a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004356:	4a0a      	ldr	r2, [pc, #40]	@ (8004380 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004358:	4c0a      	ldr	r4, [pc, #40]	@ (8004384 <LoopForever+0x16>)
  movs r3, #0
 800435a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800435c:	e001      	b.n	8004362 <LoopFillZerobss>

0800435e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800435e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004360:	3204      	adds	r2, #4

08004362 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004362:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004364:	d3fb      	bcc.n	800435e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004366:	f003 fa87 	bl	8007878 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800436a:	f7ff f9c5 	bl	80036f8 <main>

0800436e <LoopForever>:

LoopForever:
    b LoopForever
 800436e:	e7fe      	b.n	800436e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8004370:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8004374:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004378:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 800437c:	08009d20 	.word	0x08009d20
  ldr r2, =_sbss
 8004380:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8004384:	20003b70 	.word	0x20003b70

08004388 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004388:	e7fe      	b.n	8004388 <ADC1_IRQHandler>

0800438a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800438a:	b580      	push	{r7, lr}
 800438c:	b082      	sub	sp, #8
 800438e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004390:	2300      	movs	r3, #0
 8004392:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004394:	2003      	movs	r0, #3
 8004396:	f001 fa27 	bl	80057e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800439a:	200f      	movs	r0, #15
 800439c:	f000 f80e 	bl	80043bc <HAL_InitTick>
 80043a0:	4603      	mov	r3, r0
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d002      	beq.n	80043ac <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80043a6:	2301      	movs	r3, #1
 80043a8:	71fb      	strb	r3, [r7, #7]
 80043aa:	e001      	b.n	80043b0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80043ac:	f7ff fdf2 	bl	8003f94 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80043b0:	79fb      	ldrb	r3, [r7, #7]
}
 80043b2:	4618      	mov	r0, r3
 80043b4:	3708      	adds	r7, #8
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bd80      	pop	{r7, pc}
	...

080043bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b084      	sub	sp, #16
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80043c4:	2300      	movs	r3, #0
 80043c6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80043c8:	4b17      	ldr	r3, [pc, #92]	@ (8004428 <HAL_InitTick+0x6c>)
 80043ca:	781b      	ldrb	r3, [r3, #0]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d023      	beq.n	8004418 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80043d0:	4b16      	ldr	r3, [pc, #88]	@ (800442c <HAL_InitTick+0x70>)
 80043d2:	681a      	ldr	r2, [r3, #0]
 80043d4:	4b14      	ldr	r3, [pc, #80]	@ (8004428 <HAL_InitTick+0x6c>)
 80043d6:	781b      	ldrb	r3, [r3, #0]
 80043d8:	4619      	mov	r1, r3
 80043da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80043de:	fbb3 f3f1 	udiv	r3, r3, r1
 80043e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80043e6:	4618      	mov	r0, r3
 80043e8:	f001 fa25 	bl	8005836 <HAL_SYSTICK_Config>
 80043ec:	4603      	mov	r3, r0
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d10f      	bne.n	8004412 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2b0f      	cmp	r3, #15
 80043f6:	d809      	bhi.n	800440c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80043f8:	2200      	movs	r2, #0
 80043fa:	6879      	ldr	r1, [r7, #4]
 80043fc:	f04f 30ff 	mov.w	r0, #4294967295
 8004400:	f001 f9fd 	bl	80057fe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004404:	4a0a      	ldr	r2, [pc, #40]	@ (8004430 <HAL_InitTick+0x74>)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6013      	str	r3, [r2, #0]
 800440a:	e007      	b.n	800441c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800440c:	2301      	movs	r3, #1
 800440e:	73fb      	strb	r3, [r7, #15]
 8004410:	e004      	b.n	800441c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004412:	2301      	movs	r3, #1
 8004414:	73fb      	strb	r3, [r7, #15]
 8004416:	e001      	b.n	800441c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004418:	2301      	movs	r3, #1
 800441a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800441c:	7bfb      	ldrb	r3, [r7, #15]
}
 800441e:	4618      	mov	r0, r3
 8004420:	3710      	adds	r7, #16
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}
 8004426:	bf00      	nop
 8004428:	20000014 	.word	0x20000014
 800442c:	2000000c 	.word	0x2000000c
 8004430:	20000010 	.word	0x20000010

08004434 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004434:	b480      	push	{r7}
 8004436:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004438:	4b06      	ldr	r3, [pc, #24]	@ (8004454 <HAL_IncTick+0x20>)
 800443a:	781b      	ldrb	r3, [r3, #0]
 800443c:	461a      	mov	r2, r3
 800443e:	4b06      	ldr	r3, [pc, #24]	@ (8004458 <HAL_IncTick+0x24>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4413      	add	r3, r2
 8004444:	4a04      	ldr	r2, [pc, #16]	@ (8004458 <HAL_IncTick+0x24>)
 8004446:	6013      	str	r3, [r2, #0]
}
 8004448:	bf00      	nop
 800444a:	46bd      	mov	sp, r7
 800444c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004450:	4770      	bx	lr
 8004452:	bf00      	nop
 8004454:	20000014 	.word	0x20000014
 8004458:	20003a20 	.word	0x20003a20

0800445c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800445c:	b480      	push	{r7}
 800445e:	af00      	add	r7, sp, #0
  return uwTick;
 8004460:	4b03      	ldr	r3, [pc, #12]	@ (8004470 <HAL_GetTick+0x14>)
 8004462:	681b      	ldr	r3, [r3, #0]
}
 8004464:	4618      	mov	r0, r3
 8004466:	46bd      	mov	sp, r7
 8004468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446c:	4770      	bx	lr
 800446e:	bf00      	nop
 8004470:	20003a20 	.word	0x20003a20

08004474 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b084      	sub	sp, #16
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800447c:	f7ff ffee 	bl	800445c <HAL_GetTick>
 8004480:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	f1b3 3fff 	cmp.w	r3, #4294967295
 800448c:	d005      	beq.n	800449a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800448e:	4b0a      	ldr	r3, [pc, #40]	@ (80044b8 <HAL_Delay+0x44>)
 8004490:	781b      	ldrb	r3, [r3, #0]
 8004492:	461a      	mov	r2, r3
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	4413      	add	r3, r2
 8004498:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800449a:	bf00      	nop
 800449c:	f7ff ffde 	bl	800445c <HAL_GetTick>
 80044a0:	4602      	mov	r2, r0
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	1ad3      	subs	r3, r2, r3
 80044a6:	68fa      	ldr	r2, [r7, #12]
 80044a8:	429a      	cmp	r2, r3
 80044aa:	d8f7      	bhi.n	800449c <HAL_Delay+0x28>
  {
  }
}
 80044ac:	bf00      	nop
 80044ae:	bf00      	nop
 80044b0:	3710      	adds	r7, #16
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bd80      	pop	{r7, pc}
 80044b6:	bf00      	nop
 80044b8:	20000014 	.word	0x20000014

080044bc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80044bc:	b480      	push	{r7}
 80044be:	b083      	sub	sp, #12
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
 80044c4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	689b      	ldr	r3, [r3, #8]
 80044ca:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	431a      	orrs	r2, r3
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	609a      	str	r2, [r3, #8]
}
 80044d6:	bf00      	nop
 80044d8:	370c      	adds	r7, #12
 80044da:	46bd      	mov	sp, r7
 80044dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e0:	4770      	bx	lr

080044e2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80044e2:	b480      	push	{r7}
 80044e4:	b083      	sub	sp, #12
 80044e6:	af00      	add	r7, sp, #0
 80044e8:	6078      	str	r0, [r7, #4]
 80044ea:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	689b      	ldr	r3, [r3, #8]
 80044f0:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	431a      	orrs	r2, r3
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	609a      	str	r2, [r3, #8]
}
 80044fc:	bf00      	nop
 80044fe:	370c      	adds	r7, #12
 8004500:	46bd      	mov	sp, r7
 8004502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004506:	4770      	bx	lr

08004508 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004508:	b480      	push	{r7}
 800450a:	b083      	sub	sp, #12
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	689b      	ldr	r3, [r3, #8]
 8004514:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8004518:	4618      	mov	r0, r3
 800451a:	370c      	adds	r7, #12
 800451c:	46bd      	mov	sp, r7
 800451e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004522:	4770      	bx	lr

08004524 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004524:	b480      	push	{r7}
 8004526:	b087      	sub	sp, #28
 8004528:	af00      	add	r7, sp, #0
 800452a:	60f8      	str	r0, [r7, #12]
 800452c:	60b9      	str	r1, [r7, #8]
 800452e:	607a      	str	r2, [r7, #4]
 8004530:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	3360      	adds	r3, #96	@ 0x60
 8004536:	461a      	mov	r2, r3
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	009b      	lsls	r3, r3, #2
 800453c:	4413      	add	r3, r2
 800453e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004540:	697b      	ldr	r3, [r7, #20]
 8004542:	681a      	ldr	r2, [r3, #0]
 8004544:	4b08      	ldr	r3, [pc, #32]	@ (8004568 <LL_ADC_SetOffset+0x44>)
 8004546:	4013      	ands	r3, r2
 8004548:	687a      	ldr	r2, [r7, #4]
 800454a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800454e:	683a      	ldr	r2, [r7, #0]
 8004550:	430a      	orrs	r2, r1
 8004552:	4313      	orrs	r3, r2
 8004554:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800455c:	bf00      	nop
 800455e:	371c      	adds	r7, #28
 8004560:	46bd      	mov	sp, r7
 8004562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004566:	4770      	bx	lr
 8004568:	03fff000 	.word	0x03fff000

0800456c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800456c:	b480      	push	{r7}
 800456e:	b085      	sub	sp, #20
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
 8004574:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	3360      	adds	r3, #96	@ 0x60
 800457a:	461a      	mov	r2, r3
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	009b      	lsls	r3, r3, #2
 8004580:	4413      	add	r3, r2
 8004582:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 800458c:	4618      	mov	r0, r3
 800458e:	3714      	adds	r7, #20
 8004590:	46bd      	mov	sp, r7
 8004592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004596:	4770      	bx	lr

08004598 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8004598:	b480      	push	{r7}
 800459a:	b087      	sub	sp, #28
 800459c:	af00      	add	r7, sp, #0
 800459e:	60f8      	str	r0, [r7, #12]
 80045a0:	60b9      	str	r1, [r7, #8]
 80045a2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	3360      	adds	r3, #96	@ 0x60
 80045a8:	461a      	mov	r2, r3
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	009b      	lsls	r3, r3, #2
 80045ae:	4413      	add	r3, r2
 80045b0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	431a      	orrs	r2, r3
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80045c2:	bf00      	nop
 80045c4:	371c      	adds	r7, #28
 80045c6:	46bd      	mov	sp, r7
 80045c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045cc:	4770      	bx	lr

080045ce <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80045ce:	b480      	push	{r7}
 80045d0:	b087      	sub	sp, #28
 80045d2:	af00      	add	r7, sp, #0
 80045d4:	60f8      	str	r0, [r7, #12]
 80045d6:	60b9      	str	r1, [r7, #8]
 80045d8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	3330      	adds	r3, #48	@ 0x30
 80045de:	461a      	mov	r2, r3
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	0a1b      	lsrs	r3, r3, #8
 80045e4:	009b      	lsls	r3, r3, #2
 80045e6:	f003 030c 	and.w	r3, r3, #12
 80045ea:	4413      	add	r3, r2
 80045ec:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80045ee:	697b      	ldr	r3, [r7, #20]
 80045f0:	681a      	ldr	r2, [r3, #0]
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	f003 031f 	and.w	r3, r3, #31
 80045f8:	211f      	movs	r1, #31
 80045fa:	fa01 f303 	lsl.w	r3, r1, r3
 80045fe:	43db      	mvns	r3, r3
 8004600:	401a      	ands	r2, r3
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	0e9b      	lsrs	r3, r3, #26
 8004606:	f003 011f 	and.w	r1, r3, #31
 800460a:	68bb      	ldr	r3, [r7, #8]
 800460c:	f003 031f 	and.w	r3, r3, #31
 8004610:	fa01 f303 	lsl.w	r3, r1, r3
 8004614:	431a      	orrs	r2, r3
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800461a:	bf00      	nop
 800461c:	371c      	adds	r7, #28
 800461e:	46bd      	mov	sp, r7
 8004620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004624:	4770      	bx	lr

08004626 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004626:	b480      	push	{r7}
 8004628:	b087      	sub	sp, #28
 800462a:	af00      	add	r7, sp, #0
 800462c:	60f8      	str	r0, [r7, #12]
 800462e:	60b9      	str	r1, [r7, #8]
 8004630:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	3314      	adds	r3, #20
 8004636:	461a      	mov	r2, r3
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	0e5b      	lsrs	r3, r3, #25
 800463c:	009b      	lsls	r3, r3, #2
 800463e:	f003 0304 	and.w	r3, r3, #4
 8004642:	4413      	add	r3, r2
 8004644:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	681a      	ldr	r2, [r3, #0]
 800464a:	68bb      	ldr	r3, [r7, #8]
 800464c:	0d1b      	lsrs	r3, r3, #20
 800464e:	f003 031f 	and.w	r3, r3, #31
 8004652:	2107      	movs	r1, #7
 8004654:	fa01 f303 	lsl.w	r3, r1, r3
 8004658:	43db      	mvns	r3, r3
 800465a:	401a      	ands	r2, r3
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	0d1b      	lsrs	r3, r3, #20
 8004660:	f003 031f 	and.w	r3, r3, #31
 8004664:	6879      	ldr	r1, [r7, #4]
 8004666:	fa01 f303 	lsl.w	r3, r1, r3
 800466a:	431a      	orrs	r2, r3
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004670:	bf00      	nop
 8004672:	371c      	adds	r7, #28
 8004674:	46bd      	mov	sp, r7
 8004676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467a:	4770      	bx	lr

0800467c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800467c:	b480      	push	{r7}
 800467e:	b085      	sub	sp, #20
 8004680:	af00      	add	r7, sp, #0
 8004682:	60f8      	str	r0, [r7, #12]
 8004684:	60b9      	str	r1, [r7, #8]
 8004686:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800468e:	68bb      	ldr	r3, [r7, #8]
 8004690:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004694:	43db      	mvns	r3, r3
 8004696:	401a      	ands	r2, r3
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	f003 0318 	and.w	r3, r3, #24
 800469e:	4908      	ldr	r1, [pc, #32]	@ (80046c0 <LL_ADC_SetChannelSingleDiff+0x44>)
 80046a0:	40d9      	lsrs	r1, r3
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	400b      	ands	r3, r1
 80046a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046aa:	431a      	orrs	r2, r3
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80046b2:	bf00      	nop
 80046b4:	3714      	adds	r7, #20
 80046b6:	46bd      	mov	sp, r7
 80046b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046bc:	4770      	bx	lr
 80046be:	bf00      	nop
 80046c0:	0007ffff 	.word	0x0007ffff

080046c4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80046c4:	b480      	push	{r7}
 80046c6:	b083      	sub	sp, #12
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	689b      	ldr	r3, [r3, #8]
 80046d0:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80046d4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80046d8:	687a      	ldr	r2, [r7, #4]
 80046da:	6093      	str	r3, [r2, #8]
}
 80046dc:	bf00      	nop
 80046de:	370c      	adds	r7, #12
 80046e0:	46bd      	mov	sp, r7
 80046e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e6:	4770      	bx	lr

080046e8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80046e8:	b480      	push	{r7}
 80046ea:	b083      	sub	sp, #12
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	689b      	ldr	r3, [r3, #8]
 80046f4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80046f8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80046fc:	d101      	bne.n	8004702 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80046fe:	2301      	movs	r3, #1
 8004700:	e000      	b.n	8004704 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8004702:	2300      	movs	r3, #0
}
 8004704:	4618      	mov	r0, r3
 8004706:	370c      	adds	r7, #12
 8004708:	46bd      	mov	sp, r7
 800470a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470e:	4770      	bx	lr

08004710 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004710:	b480      	push	{r7}
 8004712:	b083      	sub	sp, #12
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	689b      	ldr	r3, [r3, #8]
 800471c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8004720:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004724:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800472c:	bf00      	nop
 800472e:	370c      	adds	r7, #12
 8004730:	46bd      	mov	sp, r7
 8004732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004736:	4770      	bx	lr

08004738 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8004738:	b480      	push	{r7}
 800473a:	b083      	sub	sp, #12
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	689b      	ldr	r3, [r3, #8]
 8004744:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004748:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800474c:	d101      	bne.n	8004752 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800474e:	2301      	movs	r3, #1
 8004750:	e000      	b.n	8004754 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004752:	2300      	movs	r3, #0
}
 8004754:	4618      	mov	r0, r3
 8004756:	370c      	adds	r7, #12
 8004758:	46bd      	mov	sp, r7
 800475a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475e:	4770      	bx	lr

08004760 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004760:	b480      	push	{r7}
 8004762:	b083      	sub	sp, #12
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	689b      	ldr	r3, [r3, #8]
 800476c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004770:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004774:	f043 0201 	orr.w	r2, r3, #1
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800477c:	bf00      	nop
 800477e:	370c      	adds	r7, #12
 8004780:	46bd      	mov	sp, r7
 8004782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004786:	4770      	bx	lr

08004788 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8004788:	b480      	push	{r7}
 800478a:	b083      	sub	sp, #12
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	689b      	ldr	r3, [r3, #8]
 8004794:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004798:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800479c:	f043 0202 	orr.w	r2, r3, #2
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80047a4:	bf00      	nop
 80047a6:	370c      	adds	r7, #12
 80047a8:	46bd      	mov	sp, r7
 80047aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ae:	4770      	bx	lr

080047b0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b083      	sub	sp, #12
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	689b      	ldr	r3, [r3, #8]
 80047bc:	f003 0301 	and.w	r3, r3, #1
 80047c0:	2b01      	cmp	r3, #1
 80047c2:	d101      	bne.n	80047c8 <LL_ADC_IsEnabled+0x18>
 80047c4:	2301      	movs	r3, #1
 80047c6:	e000      	b.n	80047ca <LL_ADC_IsEnabled+0x1a>
 80047c8:	2300      	movs	r3, #0
}
 80047ca:	4618      	mov	r0, r3
 80047cc:	370c      	adds	r7, #12
 80047ce:	46bd      	mov	sp, r7
 80047d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d4:	4770      	bx	lr

080047d6 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80047d6:	b480      	push	{r7}
 80047d8:	b083      	sub	sp, #12
 80047da:	af00      	add	r7, sp, #0
 80047dc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	689b      	ldr	r3, [r3, #8]
 80047e2:	f003 0302 	and.w	r3, r3, #2
 80047e6:	2b02      	cmp	r3, #2
 80047e8:	d101      	bne.n	80047ee <LL_ADC_IsDisableOngoing+0x18>
 80047ea:	2301      	movs	r3, #1
 80047ec:	e000      	b.n	80047f0 <LL_ADC_IsDisableOngoing+0x1a>
 80047ee:	2300      	movs	r3, #0
}
 80047f0:	4618      	mov	r0, r3
 80047f2:	370c      	adds	r7, #12
 80047f4:	46bd      	mov	sp, r7
 80047f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fa:	4770      	bx	lr

080047fc <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b083      	sub	sp, #12
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800480c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004810:	f043 0204 	orr.w	r2, r3, #4
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8004818:	bf00      	nop
 800481a:	370c      	adds	r7, #12
 800481c:	46bd      	mov	sp, r7
 800481e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004822:	4770      	bx	lr

08004824 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004824:	b480      	push	{r7}
 8004826:	b083      	sub	sp, #12
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	689b      	ldr	r3, [r3, #8]
 8004830:	f003 0304 	and.w	r3, r3, #4
 8004834:	2b04      	cmp	r3, #4
 8004836:	d101      	bne.n	800483c <LL_ADC_REG_IsConversionOngoing+0x18>
 8004838:	2301      	movs	r3, #1
 800483a:	e000      	b.n	800483e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800483c:	2300      	movs	r3, #0
}
 800483e:	4618      	mov	r0, r3
 8004840:	370c      	adds	r7, #12
 8004842:	46bd      	mov	sp, r7
 8004844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004848:	4770      	bx	lr

0800484a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800484a:	b480      	push	{r7}
 800484c:	b083      	sub	sp, #12
 800484e:	af00      	add	r7, sp, #0
 8004850:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	689b      	ldr	r3, [r3, #8]
 8004856:	f003 0308 	and.w	r3, r3, #8
 800485a:	2b08      	cmp	r3, #8
 800485c:	d101      	bne.n	8004862 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800485e:	2301      	movs	r3, #1
 8004860:	e000      	b.n	8004864 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004862:	2300      	movs	r3, #0
}
 8004864:	4618      	mov	r0, r3
 8004866:	370c      	adds	r7, #12
 8004868:	46bd      	mov	sp, r7
 800486a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486e:	4770      	bx	lr

08004870 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b088      	sub	sp, #32
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004878:	2300      	movs	r3, #0
 800487a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800487c:	2300      	movs	r3, #0
 800487e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d101      	bne.n	800488a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004886:	2301      	movs	r3, #1
 8004888:	e12c      	b.n	8004ae4 <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	691b      	ldr	r3, [r3, #16]
 800488e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004894:	2b00      	cmp	r3, #0
 8004896:	d109      	bne.n	80048ac <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004898:	6878      	ldr	r0, [r7, #4]
 800489a:	f7ff fb9f 	bl	8003fdc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2200      	movs	r2, #0
 80048a2:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2200      	movs	r2, #0
 80048a8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4618      	mov	r0, r3
 80048b2:	f7ff ff19 	bl	80046e8 <LL_ADC_IsDeepPowerDownEnabled>
 80048b6:	4603      	mov	r3, r0
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d004      	beq.n	80048c6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4618      	mov	r0, r3
 80048c2:	f7ff feff 	bl	80046c4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4618      	mov	r0, r3
 80048cc:	f7ff ff34 	bl	8004738 <LL_ADC_IsInternalRegulatorEnabled>
 80048d0:	4603      	mov	r3, r0
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d115      	bne.n	8004902 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4618      	mov	r0, r3
 80048dc:	f7ff ff18 	bl	8004710 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80048e0:	4b82      	ldr	r3, [pc, #520]	@ (8004aec <HAL_ADC_Init+0x27c>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	099b      	lsrs	r3, r3, #6
 80048e6:	4a82      	ldr	r2, [pc, #520]	@ (8004af0 <HAL_ADC_Init+0x280>)
 80048e8:	fba2 2303 	umull	r2, r3, r2, r3
 80048ec:	099b      	lsrs	r3, r3, #6
 80048ee:	3301      	adds	r3, #1
 80048f0:	005b      	lsls	r3, r3, #1
 80048f2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80048f4:	e002      	b.n	80048fc <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80048f6:	68bb      	ldr	r3, [r7, #8]
 80048f8:	3b01      	subs	r3, #1
 80048fa:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80048fc:	68bb      	ldr	r3, [r7, #8]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d1f9      	bne.n	80048f6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4618      	mov	r0, r3
 8004908:	f7ff ff16 	bl	8004738 <LL_ADC_IsInternalRegulatorEnabled>
 800490c:	4603      	mov	r3, r0
 800490e:	2b00      	cmp	r3, #0
 8004910:	d10d      	bne.n	800492e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004916:	f043 0210 	orr.w	r2, r3, #16
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004922:	f043 0201 	orr.w	r2, r3, #1
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800492a:	2301      	movs	r3, #1
 800492c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4618      	mov	r0, r3
 8004934:	f7ff ff76 	bl	8004824 <LL_ADC_REG_IsConversionOngoing>
 8004938:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800493e:	f003 0310 	and.w	r3, r3, #16
 8004942:	2b00      	cmp	r3, #0
 8004944:	f040 80c5 	bne.w	8004ad2 <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8004948:	697b      	ldr	r3, [r7, #20]
 800494a:	2b00      	cmp	r3, #0
 800494c:	f040 80c1 	bne.w	8004ad2 <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004954:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8004958:	f043 0202 	orr.w	r2, r3, #2
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4618      	mov	r0, r3
 8004966:	f7ff ff23 	bl	80047b0 <LL_ADC_IsEnabled>
 800496a:	4603      	mov	r3, r0
 800496c:	2b00      	cmp	r3, #0
 800496e:	d10b      	bne.n	8004988 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004970:	4860      	ldr	r0, [pc, #384]	@ (8004af4 <HAL_ADC_Init+0x284>)
 8004972:	f7ff ff1d 	bl	80047b0 <LL_ADC_IsEnabled>
 8004976:	4603      	mov	r3, r0
 8004978:	2b00      	cmp	r3, #0
 800497a:	d105      	bne.n	8004988 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	4619      	mov	r1, r3
 8004982:	485d      	ldr	r0, [pc, #372]	@ (8004af8 <HAL_ADC_Init+0x288>)
 8004984:	f7ff fd9a 	bl	80044bc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	7e5b      	ldrb	r3, [r3, #25]
 800498c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004992:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8004998:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800499e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80049a6:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80049a8:	4313      	orrs	r3, r2
 80049aa:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	f893 3020 	ldrb.w	r3, [r3, #32]
 80049b2:	2b01      	cmp	r3, #1
 80049b4:	d106      	bne.n	80049c4 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049ba:	3b01      	subs	r3, #1
 80049bc:	045b      	lsls	r3, r3, #17
 80049be:	69ba      	ldr	r2, [r7, #24]
 80049c0:	4313      	orrs	r3, r2
 80049c2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d009      	beq.n	80049e0 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049d0:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049d8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80049da:	69ba      	ldr	r2, [r7, #24]
 80049dc:	4313      	orrs	r3, r2
 80049de:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	68da      	ldr	r2, [r3, #12]
 80049e6:	4b45      	ldr	r3, [pc, #276]	@ (8004afc <HAL_ADC_Init+0x28c>)
 80049e8:	4013      	ands	r3, r2
 80049ea:	687a      	ldr	r2, [r7, #4]
 80049ec:	6812      	ldr	r2, [r2, #0]
 80049ee:	69b9      	ldr	r1, [r7, #24]
 80049f0:	430b      	orrs	r3, r1
 80049f2:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4618      	mov	r0, r3
 80049fa:	f7ff ff13 	bl	8004824 <LL_ADC_REG_IsConversionOngoing>
 80049fe:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4618      	mov	r0, r3
 8004a06:	f7ff ff20 	bl	800484a <LL_ADC_INJ_IsConversionOngoing>
 8004a0a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004a0c:	693b      	ldr	r3, [r7, #16]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d13d      	bne.n	8004a8e <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d13a      	bne.n	8004a8e <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8004a1c:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004a24:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8004a26:	4313      	orrs	r3, r2
 8004a28:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	68db      	ldr	r3, [r3, #12]
 8004a30:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004a34:	f023 0302 	bic.w	r3, r3, #2
 8004a38:	687a      	ldr	r2, [r7, #4]
 8004a3a:	6812      	ldr	r2, [r2, #0]
 8004a3c:	69b9      	ldr	r1, [r7, #24]
 8004a3e:	430b      	orrs	r3, r1
 8004a40:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004a48:	2b01      	cmp	r3, #1
 8004a4a:	d118      	bne.n	8004a7e <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	691b      	ldr	r3, [r3, #16]
 8004a52:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004a56:	f023 0304 	bic.w	r3, r3, #4
 8004a5a:	687a      	ldr	r2, [r7, #4]
 8004a5c:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8004a5e:	687a      	ldr	r2, [r7, #4]
 8004a60:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004a62:	4311      	orrs	r1, r2
 8004a64:	687a      	ldr	r2, [r7, #4]
 8004a66:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8004a68:	4311      	orrs	r1, r2
 8004a6a:	687a      	ldr	r2, [r7, #4]
 8004a6c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004a6e:	430a      	orrs	r2, r1
 8004a70:	431a      	orrs	r2, r3
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f042 0201 	orr.w	r2, r2, #1
 8004a7a:	611a      	str	r2, [r3, #16]
 8004a7c:	e007      	b.n	8004a8e <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	691a      	ldr	r2, [r3, #16]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f022 0201 	bic.w	r2, r2, #1
 8004a8c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	691b      	ldr	r3, [r3, #16]
 8004a92:	2b01      	cmp	r3, #1
 8004a94:	d10c      	bne.n	8004ab0 <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a9c:	f023 010f 	bic.w	r1, r3, #15
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	69db      	ldr	r3, [r3, #28]
 8004aa4:	1e5a      	subs	r2, r3, #1
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	430a      	orrs	r2, r1
 8004aac:	631a      	str	r2, [r3, #48]	@ 0x30
 8004aae:	e007      	b.n	8004ac0 <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f022 020f 	bic.w	r2, r2, #15
 8004abe:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ac4:	f023 0303 	bic.w	r3, r3, #3
 8004ac8:	f043 0201 	orr.w	r2, r3, #1
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	655a      	str	r2, [r3, #84]	@ 0x54
 8004ad0:	e007      	b.n	8004ae2 <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ad6:	f043 0210 	orr.w	r2, r3, #16
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004ae2:	7ffb      	ldrb	r3, [r7, #31]
}
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	3720      	adds	r7, #32
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bd80      	pop	{r7, pc}
 8004aec:	2000000c 	.word	0x2000000c
 8004af0:	053e2d63 	.word	0x053e2d63
 8004af4:	50040000 	.word	0x50040000
 8004af8:	50040300 	.word	0x50040300
 8004afc:	fff0c007 	.word	0xfff0c007

08004b00 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b084      	sub	sp, #16
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	f7ff fe89 	bl	8004824 <LL_ADC_REG_IsConversionOngoing>
 8004b12:	4603      	mov	r3, r0
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d14f      	bne.n	8004bb8 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004b1e:	2b01      	cmp	r3, #1
 8004b20:	d101      	bne.n	8004b26 <HAL_ADC_Start+0x26>
 8004b22:	2302      	movs	r3, #2
 8004b24:	e04b      	b.n	8004bbe <HAL_ADC_Start+0xbe>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2201      	movs	r2, #1
 8004b2a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f000 fc36 	bl	80053a0 <ADC_Enable>
 8004b34:	4603      	mov	r3, r0
 8004b36:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8004b38:	7bfb      	ldrb	r3, [r7, #15]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d137      	bne.n	8004bae <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b42:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004b46:	f023 0301 	bic.w	r3, r3, #1
 8004b4a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	655a      	str	r2, [r3, #84]	@ 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b56:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004b5a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b5e:	d106      	bne.n	8004b6e <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b64:	f023 0206 	bic.w	r2, r3, #6
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	659a      	str	r2, [r3, #88]	@ 0x58
 8004b6c:	e002      	b.n	8004b74 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2200      	movs	r2, #0
 8004b72:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	221c      	movs	r2, #28
 8004b7a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	68db      	ldr	r3, [r3, #12]
 8004b8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d007      	beq.n	8004ba2 <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b96:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8004b9a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	655a      	str	r2, [r3, #84]	@ 0x54
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	f7ff fe28 	bl	80047fc <LL_ADC_REG_StartConversion>
 8004bac:	e006      	b.n	8004bbc <HAL_ADC_Start+0xbc>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8004bb6:	e001      	b.n	8004bbc <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004bb8:	2302      	movs	r3, #2
 8004bba:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8004bbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	3710      	adds	r7, #16
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bd80      	pop	{r7, pc}

08004bc6 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8004bc6:	b480      	push	{r7}
 8004bc8:	b083      	sub	sp, #12
 8004bca:	af00      	add	r7, sp, #0
 8004bcc:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	370c      	adds	r7, #12
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bde:	4770      	bx	lr

08004be0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b0b6      	sub	sp, #216	@ 0xd8
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
 8004be8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004bea:	2300      	movs	r3, #0
 8004bec:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004bfa:	2b01      	cmp	r3, #1
 8004bfc:	d101      	bne.n	8004c02 <HAL_ADC_ConfigChannel+0x22>
 8004bfe:	2302      	movs	r3, #2
 8004c00:	e3b9      	b.n	8005376 <HAL_ADC_ConfigChannel+0x796>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2201      	movs	r2, #1
 8004c06:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4618      	mov	r0, r3
 8004c10:	f7ff fe08 	bl	8004824 <LL_ADC_REG_IsConversionOngoing>
 8004c14:	4603      	mov	r3, r0
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	f040 839e 	bne.w	8005358 <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	2b05      	cmp	r3, #5
 8004c22:	d824      	bhi.n	8004c6e <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	685b      	ldr	r3, [r3, #4]
 8004c28:	3b02      	subs	r3, #2
 8004c2a:	2b03      	cmp	r3, #3
 8004c2c:	d81b      	bhi.n	8004c66 <HAL_ADC_ConfigChannel+0x86>
 8004c2e:	a201      	add	r2, pc, #4	@ (adr r2, 8004c34 <HAL_ADC_ConfigChannel+0x54>)
 8004c30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c34:	08004c45 	.word	0x08004c45
 8004c38:	08004c4d 	.word	0x08004c4d
 8004c3c:	08004c55 	.word	0x08004c55
 8004c40:	08004c5d 	.word	0x08004c5d
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	220c      	movs	r2, #12
 8004c48:	605a      	str	r2, [r3, #4]
          break;
 8004c4a:	e010      	b.n	8004c6e <HAL_ADC_ConfigChannel+0x8e>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	2212      	movs	r2, #18
 8004c50:	605a      	str	r2, [r3, #4]
          break;
 8004c52:	e00c      	b.n	8004c6e <HAL_ADC_ConfigChannel+0x8e>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	2218      	movs	r2, #24
 8004c58:	605a      	str	r2, [r3, #4]
          break;
 8004c5a:	e008      	b.n	8004c6e <HAL_ADC_ConfigChannel+0x8e>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004c62:	605a      	str	r2, [r3, #4]
          break;
 8004c64:	e003      	b.n	8004c6e <HAL_ADC_ConfigChannel+0x8e>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	2206      	movs	r2, #6
 8004c6a:	605a      	str	r2, [r3, #4]
          break;
 8004c6c:	bf00      	nop
      }
    }
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6818      	ldr	r0, [r3, #0]
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	6859      	ldr	r1, [r3, #4]
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	461a      	mov	r2, r3
 8004c7c:	f7ff fca7 	bl	80045ce <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4618      	mov	r0, r3
 8004c86:	f7ff fdcd 	bl	8004824 <LL_ADC_REG_IsConversionOngoing>
 8004c8a:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4618      	mov	r0, r3
 8004c94:	f7ff fdd9 	bl	800484a <LL_ADC_INJ_IsConversionOngoing>
 8004c98:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004c9c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	f040 81a6 	bne.w	8004ff2 <HAL_ADC_ConfigChannel+0x412>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004ca6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	f040 81a1 	bne.w	8004ff2 <HAL_ADC_ConfigChannel+0x412>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6818      	ldr	r0, [r3, #0]
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	6819      	ldr	r1, [r3, #0]
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	689b      	ldr	r3, [r3, #8]
 8004cbc:	461a      	mov	r2, r3
 8004cbe:	f7ff fcb2 	bl	8004626 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	695a      	ldr	r2, [r3, #20]
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	68db      	ldr	r3, [r3, #12]
 8004ccc:	08db      	lsrs	r3, r3, #3
 8004cce:	f003 0303 	and.w	r3, r3, #3
 8004cd2:	005b      	lsls	r3, r3, #1
 8004cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8004cd8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	691b      	ldr	r3, [r3, #16]
 8004ce0:	2b04      	cmp	r3, #4
 8004ce2:	d00a      	beq.n	8004cfa <HAL_ADC_ConfigChannel+0x11a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6818      	ldr	r0, [r3, #0]
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	6919      	ldr	r1, [r3, #16]
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	681a      	ldr	r2, [r3, #0]
 8004cf0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004cf4:	f7ff fc16 	bl	8004524 <LL_ADC_SetOffset>
 8004cf8:	e17b      	b.n	8004ff2 <HAL_ADC_ConfigChannel+0x412>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	2100      	movs	r1, #0
 8004d00:	4618      	mov	r0, r3
 8004d02:	f7ff fc33 	bl	800456c <LL_ADC_GetOffsetChannel>
 8004d06:	4603      	mov	r3, r0
 8004d08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d10a      	bne.n	8004d26 <HAL_ADC_ConfigChannel+0x146>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	2100      	movs	r1, #0
 8004d16:	4618      	mov	r0, r3
 8004d18:	f7ff fc28 	bl	800456c <LL_ADC_GetOffsetChannel>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	0e9b      	lsrs	r3, r3, #26
 8004d20:	f003 021f 	and.w	r2, r3, #31
 8004d24:	e01e      	b.n	8004d64 <HAL_ADC_ConfigChannel+0x184>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	2100      	movs	r1, #0
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	f7ff fc1d 	bl	800456c <LL_ADC_GetOffsetChannel>
 8004d32:	4603      	mov	r3, r0
 8004d34:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d38:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004d3c:	fa93 f3a3 	rbit	r3, r3
 8004d40:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004d44:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004d48:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004d4c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d101      	bne.n	8004d58 <HAL_ADC_ConfigChannel+0x178>
  {
    return 32U;
 8004d54:	2320      	movs	r3, #32
 8004d56:	e004      	b.n	8004d62 <HAL_ADC_ConfigChannel+0x182>
  }
  return __builtin_clz(value);
 8004d58:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004d5c:	fab3 f383 	clz	r3, r3
 8004d60:	b2db      	uxtb	r3, r3
 8004d62:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d105      	bne.n	8004d7c <HAL_ADC_ConfigChannel+0x19c>
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	0e9b      	lsrs	r3, r3, #26
 8004d76:	f003 031f 	and.w	r3, r3, #31
 8004d7a:	e018      	b.n	8004dae <HAL_ADC_ConfigChannel+0x1ce>
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d84:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004d88:	fa93 f3a3 	rbit	r3, r3
 8004d8c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8004d90:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004d94:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8004d98:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d101      	bne.n	8004da4 <HAL_ADC_ConfigChannel+0x1c4>
    return 32U;
 8004da0:	2320      	movs	r3, #32
 8004da2:	e004      	b.n	8004dae <HAL_ADC_ConfigChannel+0x1ce>
  return __builtin_clz(value);
 8004da4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004da8:	fab3 f383 	clz	r3, r3
 8004dac:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004dae:	429a      	cmp	r2, r3
 8004db0:	d106      	bne.n	8004dc0 <HAL_ADC_ConfigChannel+0x1e0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	2200      	movs	r2, #0
 8004db8:	2100      	movs	r1, #0
 8004dba:	4618      	mov	r0, r3
 8004dbc:	f7ff fbec 	bl	8004598 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	2101      	movs	r1, #1
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	f7ff fbd0 	bl	800456c <LL_ADC_GetOffsetChannel>
 8004dcc:	4603      	mov	r3, r0
 8004dce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d10a      	bne.n	8004dec <HAL_ADC_ConfigChannel+0x20c>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	2101      	movs	r1, #1
 8004ddc:	4618      	mov	r0, r3
 8004dde:	f7ff fbc5 	bl	800456c <LL_ADC_GetOffsetChannel>
 8004de2:	4603      	mov	r3, r0
 8004de4:	0e9b      	lsrs	r3, r3, #26
 8004de6:	f003 021f 	and.w	r2, r3, #31
 8004dea:	e01e      	b.n	8004e2a <HAL_ADC_ConfigChannel+0x24a>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	2101      	movs	r1, #1
 8004df2:	4618      	mov	r0, r3
 8004df4:	f7ff fbba 	bl	800456c <LL_ADC_GetOffsetChannel>
 8004df8:	4603      	mov	r3, r0
 8004dfa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dfe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004e02:	fa93 f3a3 	rbit	r3, r3
 8004e06:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8004e0a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004e0e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8004e12:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d101      	bne.n	8004e1e <HAL_ADC_ConfigChannel+0x23e>
    return 32U;
 8004e1a:	2320      	movs	r3, #32
 8004e1c:	e004      	b.n	8004e28 <HAL_ADC_ConfigChannel+0x248>
  return __builtin_clz(value);
 8004e1e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004e22:	fab3 f383 	clz	r3, r3
 8004e26:	b2db      	uxtb	r3, r3
 8004e28:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d105      	bne.n	8004e42 <HAL_ADC_ConfigChannel+0x262>
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	0e9b      	lsrs	r3, r3, #26
 8004e3c:	f003 031f 	and.w	r3, r3, #31
 8004e40:	e018      	b.n	8004e74 <HAL_ADC_ConfigChannel+0x294>
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e4a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004e4e:	fa93 f3a3 	rbit	r3, r3
 8004e52:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8004e56:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004e5a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8004e5e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d101      	bne.n	8004e6a <HAL_ADC_ConfigChannel+0x28a>
    return 32U;
 8004e66:	2320      	movs	r3, #32
 8004e68:	e004      	b.n	8004e74 <HAL_ADC_ConfigChannel+0x294>
  return __builtin_clz(value);
 8004e6a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004e6e:	fab3 f383 	clz	r3, r3
 8004e72:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004e74:	429a      	cmp	r2, r3
 8004e76:	d106      	bne.n	8004e86 <HAL_ADC_ConfigChannel+0x2a6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	2101      	movs	r1, #1
 8004e80:	4618      	mov	r0, r3
 8004e82:	f7ff fb89 	bl	8004598 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	2102      	movs	r1, #2
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	f7ff fb6d 	bl	800456c <LL_ADC_GetOffsetChannel>
 8004e92:	4603      	mov	r3, r0
 8004e94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d10a      	bne.n	8004eb2 <HAL_ADC_ConfigChannel+0x2d2>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	2102      	movs	r1, #2
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	f7ff fb62 	bl	800456c <LL_ADC_GetOffsetChannel>
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	0e9b      	lsrs	r3, r3, #26
 8004eac:	f003 021f 	and.w	r2, r3, #31
 8004eb0:	e01e      	b.n	8004ef0 <HAL_ADC_ConfigChannel+0x310>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	2102      	movs	r1, #2
 8004eb8:	4618      	mov	r0, r3
 8004eba:	f7ff fb57 	bl	800456c <LL_ADC_GetOffsetChannel>
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ec4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004ec8:	fa93 f3a3 	rbit	r3, r3
 8004ecc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8004ed0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004ed4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8004ed8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d101      	bne.n	8004ee4 <HAL_ADC_ConfigChannel+0x304>
    return 32U;
 8004ee0:	2320      	movs	r3, #32
 8004ee2:	e004      	b.n	8004eee <HAL_ADC_ConfigChannel+0x30e>
  return __builtin_clz(value);
 8004ee4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004ee8:	fab3 f383 	clz	r3, r3
 8004eec:	b2db      	uxtb	r3, r3
 8004eee:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d105      	bne.n	8004f08 <HAL_ADC_ConfigChannel+0x328>
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	0e9b      	lsrs	r3, r3, #26
 8004f02:	f003 031f 	and.w	r3, r3, #31
 8004f06:	e016      	b.n	8004f36 <HAL_ADC_ConfigChannel+0x356>
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f10:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004f14:	fa93 f3a3 	rbit	r3, r3
 8004f18:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8004f1a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004f1c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8004f20:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d101      	bne.n	8004f2c <HAL_ADC_ConfigChannel+0x34c>
    return 32U;
 8004f28:	2320      	movs	r3, #32
 8004f2a:	e004      	b.n	8004f36 <HAL_ADC_ConfigChannel+0x356>
  return __builtin_clz(value);
 8004f2c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004f30:	fab3 f383 	clz	r3, r3
 8004f34:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004f36:	429a      	cmp	r2, r3
 8004f38:	d106      	bne.n	8004f48 <HAL_ADC_ConfigChannel+0x368>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	2102      	movs	r1, #2
 8004f42:	4618      	mov	r0, r3
 8004f44:	f7ff fb28 	bl	8004598 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	2103      	movs	r1, #3
 8004f4e:	4618      	mov	r0, r3
 8004f50:	f7ff fb0c 	bl	800456c <LL_ADC_GetOffsetChannel>
 8004f54:	4603      	mov	r3, r0
 8004f56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d10a      	bne.n	8004f74 <HAL_ADC_ConfigChannel+0x394>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	2103      	movs	r1, #3
 8004f64:	4618      	mov	r0, r3
 8004f66:	f7ff fb01 	bl	800456c <LL_ADC_GetOffsetChannel>
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	0e9b      	lsrs	r3, r3, #26
 8004f6e:	f003 021f 	and.w	r2, r3, #31
 8004f72:	e017      	b.n	8004fa4 <HAL_ADC_ConfigChannel+0x3c4>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	2103      	movs	r1, #3
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	f7ff faf6 	bl	800456c <LL_ADC_GetOffsetChannel>
 8004f80:	4603      	mov	r3, r0
 8004f82:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f84:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004f86:	fa93 f3a3 	rbit	r3, r3
 8004f8a:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8004f8c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004f8e:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8004f90:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d101      	bne.n	8004f9a <HAL_ADC_ConfigChannel+0x3ba>
    return 32U;
 8004f96:	2320      	movs	r3, #32
 8004f98:	e003      	b.n	8004fa2 <HAL_ADC_ConfigChannel+0x3c2>
  return __builtin_clz(value);
 8004f9a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004f9c:	fab3 f383 	clz	r3, r3
 8004fa0:	b2db      	uxtb	r3, r3
 8004fa2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d105      	bne.n	8004fbc <HAL_ADC_ConfigChannel+0x3dc>
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	0e9b      	lsrs	r3, r3, #26
 8004fb6:	f003 031f 	and.w	r3, r3, #31
 8004fba:	e011      	b.n	8004fe0 <HAL_ADC_ConfigChannel+0x400>
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fc2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004fc4:	fa93 f3a3 	rbit	r3, r3
 8004fc8:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8004fca:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004fcc:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8004fce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d101      	bne.n	8004fd8 <HAL_ADC_ConfigChannel+0x3f8>
    return 32U;
 8004fd4:	2320      	movs	r3, #32
 8004fd6:	e003      	b.n	8004fe0 <HAL_ADC_ConfigChannel+0x400>
  return __builtin_clz(value);
 8004fd8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004fda:	fab3 f383 	clz	r3, r3
 8004fde:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004fe0:	429a      	cmp	r2, r3
 8004fe2:	d106      	bne.n	8004ff2 <HAL_ADC_ConfigChannel+0x412>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	2103      	movs	r1, #3
 8004fec:	4618      	mov	r0, r3
 8004fee:	f7ff fad3 	bl	8004598 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	f7ff fbda 	bl	80047b0 <LL_ADC_IsEnabled>
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	f040 8140 	bne.w	8005284 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6818      	ldr	r0, [r3, #0]
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	6819      	ldr	r1, [r3, #0]
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	68db      	ldr	r3, [r3, #12]
 8005010:	461a      	mov	r2, r3
 8005012:	f7ff fb33 	bl	800467c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	68db      	ldr	r3, [r3, #12]
 800501a:	4a8f      	ldr	r2, [pc, #572]	@ (8005258 <HAL_ADC_ConfigChannel+0x678>)
 800501c:	4293      	cmp	r3, r2
 800501e:	f040 8131 	bne.w	8005284 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800502e:	2b00      	cmp	r3, #0
 8005030:	d10b      	bne.n	800504a <HAL_ADC_ConfigChannel+0x46a>
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	0e9b      	lsrs	r3, r3, #26
 8005038:	3301      	adds	r3, #1
 800503a:	f003 031f 	and.w	r3, r3, #31
 800503e:	2b09      	cmp	r3, #9
 8005040:	bf94      	ite	ls
 8005042:	2301      	movls	r3, #1
 8005044:	2300      	movhi	r3, #0
 8005046:	b2db      	uxtb	r3, r3
 8005048:	e019      	b.n	800507e <HAL_ADC_ConfigChannel+0x49e>
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005050:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005052:	fa93 f3a3 	rbit	r3, r3
 8005056:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8005058:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800505a:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 800505c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800505e:	2b00      	cmp	r3, #0
 8005060:	d101      	bne.n	8005066 <HAL_ADC_ConfigChannel+0x486>
    return 32U;
 8005062:	2320      	movs	r3, #32
 8005064:	e003      	b.n	800506e <HAL_ADC_ConfigChannel+0x48e>
  return __builtin_clz(value);
 8005066:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005068:	fab3 f383 	clz	r3, r3
 800506c:	b2db      	uxtb	r3, r3
 800506e:	3301      	adds	r3, #1
 8005070:	f003 031f 	and.w	r3, r3, #31
 8005074:	2b09      	cmp	r3, #9
 8005076:	bf94      	ite	ls
 8005078:	2301      	movls	r3, #1
 800507a:	2300      	movhi	r3, #0
 800507c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800507e:	2b00      	cmp	r3, #0
 8005080:	d079      	beq.n	8005176 <HAL_ADC_ConfigChannel+0x596>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800508a:	2b00      	cmp	r3, #0
 800508c:	d107      	bne.n	800509e <HAL_ADC_ConfigChannel+0x4be>
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	0e9b      	lsrs	r3, r3, #26
 8005094:	3301      	adds	r3, #1
 8005096:	069b      	lsls	r3, r3, #26
 8005098:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800509c:	e015      	b.n	80050ca <HAL_ADC_ConfigChannel+0x4ea>
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80050a6:	fa93 f3a3 	rbit	r3, r3
 80050aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80050ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80050ae:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80050b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d101      	bne.n	80050ba <HAL_ADC_ConfigChannel+0x4da>
    return 32U;
 80050b6:	2320      	movs	r3, #32
 80050b8:	e003      	b.n	80050c2 <HAL_ADC_ConfigChannel+0x4e2>
  return __builtin_clz(value);
 80050ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80050bc:	fab3 f383 	clz	r3, r3
 80050c0:	b2db      	uxtb	r3, r3
 80050c2:	3301      	adds	r3, #1
 80050c4:	069b      	lsls	r3, r3, #26
 80050c6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d109      	bne.n	80050ea <HAL_ADC_ConfigChannel+0x50a>
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	0e9b      	lsrs	r3, r3, #26
 80050dc:	3301      	adds	r3, #1
 80050de:	f003 031f 	and.w	r3, r3, #31
 80050e2:	2101      	movs	r1, #1
 80050e4:	fa01 f303 	lsl.w	r3, r1, r3
 80050e8:	e017      	b.n	800511a <HAL_ADC_ConfigChannel+0x53a>
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80050f2:	fa93 f3a3 	rbit	r3, r3
 80050f6:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80050f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80050fa:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80050fc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d101      	bne.n	8005106 <HAL_ADC_ConfigChannel+0x526>
    return 32U;
 8005102:	2320      	movs	r3, #32
 8005104:	e003      	b.n	800510e <HAL_ADC_ConfigChannel+0x52e>
  return __builtin_clz(value);
 8005106:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005108:	fab3 f383 	clz	r3, r3
 800510c:	b2db      	uxtb	r3, r3
 800510e:	3301      	adds	r3, #1
 8005110:	f003 031f 	and.w	r3, r3, #31
 8005114:	2101      	movs	r1, #1
 8005116:	fa01 f303 	lsl.w	r3, r1, r3
 800511a:	ea42 0103 	orr.w	r1, r2, r3
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005126:	2b00      	cmp	r3, #0
 8005128:	d10a      	bne.n	8005140 <HAL_ADC_ConfigChannel+0x560>
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	0e9b      	lsrs	r3, r3, #26
 8005130:	3301      	adds	r3, #1
 8005132:	f003 021f 	and.w	r2, r3, #31
 8005136:	4613      	mov	r3, r2
 8005138:	005b      	lsls	r3, r3, #1
 800513a:	4413      	add	r3, r2
 800513c:	051b      	lsls	r3, r3, #20
 800513e:	e018      	b.n	8005172 <HAL_ADC_ConfigChannel+0x592>
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005146:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005148:	fa93 f3a3 	rbit	r3, r3
 800514c:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800514e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005150:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8005152:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005154:	2b00      	cmp	r3, #0
 8005156:	d101      	bne.n	800515c <HAL_ADC_ConfigChannel+0x57c>
    return 32U;
 8005158:	2320      	movs	r3, #32
 800515a:	e003      	b.n	8005164 <HAL_ADC_ConfigChannel+0x584>
  return __builtin_clz(value);
 800515c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800515e:	fab3 f383 	clz	r3, r3
 8005162:	b2db      	uxtb	r3, r3
 8005164:	3301      	adds	r3, #1
 8005166:	f003 021f 	and.w	r2, r3, #31
 800516a:	4613      	mov	r3, r2
 800516c:	005b      	lsls	r3, r3, #1
 800516e:	4413      	add	r3, r2
 8005170:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005172:	430b      	orrs	r3, r1
 8005174:	e081      	b.n	800527a <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800517e:	2b00      	cmp	r3, #0
 8005180:	d107      	bne.n	8005192 <HAL_ADC_ConfigChannel+0x5b2>
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	0e9b      	lsrs	r3, r3, #26
 8005188:	3301      	adds	r3, #1
 800518a:	069b      	lsls	r3, r3, #26
 800518c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005190:	e015      	b.n	80051be <HAL_ADC_ConfigChannel+0x5de>
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005198:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800519a:	fa93 f3a3 	rbit	r3, r3
 800519e:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80051a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051a2:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80051a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d101      	bne.n	80051ae <HAL_ADC_ConfigChannel+0x5ce>
    return 32U;
 80051aa:	2320      	movs	r3, #32
 80051ac:	e003      	b.n	80051b6 <HAL_ADC_ConfigChannel+0x5d6>
  return __builtin_clz(value);
 80051ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051b0:	fab3 f383 	clz	r3, r3
 80051b4:	b2db      	uxtb	r3, r3
 80051b6:	3301      	adds	r3, #1
 80051b8:	069b      	lsls	r3, r3, #26
 80051ba:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d109      	bne.n	80051de <HAL_ADC_ConfigChannel+0x5fe>
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	0e9b      	lsrs	r3, r3, #26
 80051d0:	3301      	adds	r3, #1
 80051d2:	f003 031f 	and.w	r3, r3, #31
 80051d6:	2101      	movs	r1, #1
 80051d8:	fa01 f303 	lsl.w	r3, r1, r3
 80051dc:	e017      	b.n	800520e <HAL_ADC_ConfigChannel+0x62e>
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051e4:	6a3b      	ldr	r3, [r7, #32]
 80051e6:	fa93 f3a3 	rbit	r3, r3
 80051ea:	61fb      	str	r3, [r7, #28]
  return result;
 80051ec:	69fb      	ldr	r3, [r7, #28]
 80051ee:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80051f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d101      	bne.n	80051fa <HAL_ADC_ConfigChannel+0x61a>
    return 32U;
 80051f6:	2320      	movs	r3, #32
 80051f8:	e003      	b.n	8005202 <HAL_ADC_ConfigChannel+0x622>
  return __builtin_clz(value);
 80051fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051fc:	fab3 f383 	clz	r3, r3
 8005200:	b2db      	uxtb	r3, r3
 8005202:	3301      	adds	r3, #1
 8005204:	f003 031f 	and.w	r3, r3, #31
 8005208:	2101      	movs	r1, #1
 800520a:	fa01 f303 	lsl.w	r3, r1, r3
 800520e:	ea42 0103 	orr.w	r1, r2, r3
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800521a:	2b00      	cmp	r3, #0
 800521c:	d10d      	bne.n	800523a <HAL_ADC_ConfigChannel+0x65a>
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	0e9b      	lsrs	r3, r3, #26
 8005224:	3301      	adds	r3, #1
 8005226:	f003 021f 	and.w	r2, r3, #31
 800522a:	4613      	mov	r3, r2
 800522c:	005b      	lsls	r3, r3, #1
 800522e:	4413      	add	r3, r2
 8005230:	3b1e      	subs	r3, #30
 8005232:	051b      	lsls	r3, r3, #20
 8005234:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005238:	e01e      	b.n	8005278 <HAL_ADC_ConfigChannel+0x698>
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005240:	697b      	ldr	r3, [r7, #20]
 8005242:	fa93 f3a3 	rbit	r3, r3
 8005246:	613b      	str	r3, [r7, #16]
  return result;
 8005248:	693b      	ldr	r3, [r7, #16]
 800524a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800524c:	69bb      	ldr	r3, [r7, #24]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d104      	bne.n	800525c <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8005252:	2320      	movs	r3, #32
 8005254:	e006      	b.n	8005264 <HAL_ADC_ConfigChannel+0x684>
 8005256:	bf00      	nop
 8005258:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800525c:	69bb      	ldr	r3, [r7, #24]
 800525e:	fab3 f383 	clz	r3, r3
 8005262:	b2db      	uxtb	r3, r3
 8005264:	3301      	adds	r3, #1
 8005266:	f003 021f 	and.w	r2, r3, #31
 800526a:	4613      	mov	r3, r2
 800526c:	005b      	lsls	r3, r3, #1
 800526e:	4413      	add	r3, r2
 8005270:	3b1e      	subs	r3, #30
 8005272:	051b      	lsls	r3, r3, #20
 8005274:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005278:	430b      	orrs	r3, r1
 800527a:	683a      	ldr	r2, [r7, #0]
 800527c:	6892      	ldr	r2, [r2, #8]
 800527e:	4619      	mov	r1, r3
 8005280:	f7ff f9d1 	bl	8004626 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	681a      	ldr	r2, [r3, #0]
 8005288:	4b3d      	ldr	r3, [pc, #244]	@ (8005380 <HAL_ADC_ConfigChannel+0x7a0>)
 800528a:	4013      	ands	r3, r2
 800528c:	2b00      	cmp	r3, #0
 800528e:	d06c      	beq.n	800536a <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005290:	483c      	ldr	r0, [pc, #240]	@ (8005384 <HAL_ADC_ConfigChannel+0x7a4>)
 8005292:	f7ff f939 	bl	8004508 <LL_ADC_GetCommonPathInternalCh>
 8005296:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4a3a      	ldr	r2, [pc, #232]	@ (8005388 <HAL_ADC_ConfigChannel+0x7a8>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d127      	bne.n	80052f4 <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80052a4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80052a8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d121      	bne.n	80052f4 <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a35      	ldr	r2, [pc, #212]	@ (800538c <HAL_ADC_ConfigChannel+0x7ac>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d157      	bne.n	800536a <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80052ba:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80052be:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80052c2:	4619      	mov	r1, r3
 80052c4:	482f      	ldr	r0, [pc, #188]	@ (8005384 <HAL_ADC_ConfigChannel+0x7a4>)
 80052c6:	f7ff f90c 	bl	80044e2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80052ca:	4b31      	ldr	r3, [pc, #196]	@ (8005390 <HAL_ADC_ConfigChannel+0x7b0>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	099b      	lsrs	r3, r3, #6
 80052d0:	4a30      	ldr	r2, [pc, #192]	@ (8005394 <HAL_ADC_ConfigChannel+0x7b4>)
 80052d2:	fba2 2303 	umull	r2, r3, r2, r3
 80052d6:	099b      	lsrs	r3, r3, #6
 80052d8:	1c5a      	adds	r2, r3, #1
 80052da:	4613      	mov	r3, r2
 80052dc:	005b      	lsls	r3, r3, #1
 80052de:	4413      	add	r3, r2
 80052e0:	009b      	lsls	r3, r3, #2
 80052e2:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80052e4:	e002      	b.n	80052ec <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	3b01      	subs	r3, #1
 80052ea:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d1f9      	bne.n	80052e6 <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80052f2:	e03a      	b.n	800536a <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a27      	ldr	r2, [pc, #156]	@ (8005398 <HAL_ADC_ConfigChannel+0x7b8>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d113      	bne.n	8005326 <HAL_ADC_ConfigChannel+0x746>
 80052fe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005302:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005306:	2b00      	cmp	r3, #0
 8005308:	d10d      	bne.n	8005326 <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	4a1f      	ldr	r2, [pc, #124]	@ (800538c <HAL_ADC_ConfigChannel+0x7ac>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d12a      	bne.n	800536a <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005314:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005318:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800531c:	4619      	mov	r1, r3
 800531e:	4819      	ldr	r0, [pc, #100]	@ (8005384 <HAL_ADC_ConfigChannel+0x7a4>)
 8005320:	f7ff f8df 	bl	80044e2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005324:	e021      	b.n	800536a <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4a1c      	ldr	r2, [pc, #112]	@ (800539c <HAL_ADC_ConfigChannel+0x7bc>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d11c      	bne.n	800536a <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005330:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005334:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005338:	2b00      	cmp	r3, #0
 800533a:	d116      	bne.n	800536a <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a12      	ldr	r2, [pc, #72]	@ (800538c <HAL_ADC_ConfigChannel+0x7ac>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d111      	bne.n	800536a <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005346:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800534a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800534e:	4619      	mov	r1, r3
 8005350:	480c      	ldr	r0, [pc, #48]	@ (8005384 <HAL_ADC_ConfigChannel+0x7a4>)
 8005352:	f7ff f8c6 	bl	80044e2 <LL_ADC_SetCommonPathInternalCh>
 8005356:	e008      	b.n	800536a <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800535c:	f043 0220 	orr.w	r2, r3, #32
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8005364:	2301      	movs	r3, #1
 8005366:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2200      	movs	r2, #0
 800536e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8005372:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8005376:	4618      	mov	r0, r3
 8005378:	37d8      	adds	r7, #216	@ 0xd8
 800537a:	46bd      	mov	sp, r7
 800537c:	bd80      	pop	{r7, pc}
 800537e:	bf00      	nop
 8005380:	80080000 	.word	0x80080000
 8005384:	50040300 	.word	0x50040300
 8005388:	c7520000 	.word	0xc7520000
 800538c:	50040000 	.word	0x50040000
 8005390:	2000000c 	.word	0x2000000c
 8005394:	053e2d63 	.word	0x053e2d63
 8005398:	cb840000 	.word	0xcb840000
 800539c:	80000001 	.word	0x80000001

080053a0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b084      	sub	sp, #16
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80053a8:	2300      	movs	r3, #0
 80053aa:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4618      	mov	r0, r3
 80053b2:	f7ff f9fd 	bl	80047b0 <LL_ADC_IsEnabled>
 80053b6:	4603      	mov	r3, r0
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d169      	bne.n	8005490 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	689a      	ldr	r2, [r3, #8]
 80053c2:	4b36      	ldr	r3, [pc, #216]	@ (800549c <ADC_Enable+0xfc>)
 80053c4:	4013      	ands	r3, r2
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d00d      	beq.n	80053e6 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053ce:	f043 0210 	orr.w	r2, r3, #16
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053da:	f043 0201 	orr.w	r2, r3, #1
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 80053e2:	2301      	movs	r3, #1
 80053e4:	e055      	b.n	8005492 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4618      	mov	r0, r3
 80053ec:	f7ff f9b8 	bl	8004760 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80053f0:	482b      	ldr	r0, [pc, #172]	@ (80054a0 <ADC_Enable+0x100>)
 80053f2:	f7ff f889 	bl	8004508 <LL_ADC_GetCommonPathInternalCh>
 80053f6:	4603      	mov	r3, r0
 80053f8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d013      	beq.n	8005428 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005400:	4b28      	ldr	r3, [pc, #160]	@ (80054a4 <ADC_Enable+0x104>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	099b      	lsrs	r3, r3, #6
 8005406:	4a28      	ldr	r2, [pc, #160]	@ (80054a8 <ADC_Enable+0x108>)
 8005408:	fba2 2303 	umull	r2, r3, r2, r3
 800540c:	099b      	lsrs	r3, r3, #6
 800540e:	1c5a      	adds	r2, r3, #1
 8005410:	4613      	mov	r3, r2
 8005412:	005b      	lsls	r3, r3, #1
 8005414:	4413      	add	r3, r2
 8005416:	009b      	lsls	r3, r3, #2
 8005418:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800541a:	e002      	b.n	8005422 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 800541c:	68bb      	ldr	r3, [r7, #8]
 800541e:	3b01      	subs	r3, #1
 8005420:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8005422:	68bb      	ldr	r3, [r7, #8]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d1f9      	bne.n	800541c <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8005428:	f7ff f818 	bl	800445c <HAL_GetTick>
 800542c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800542e:	e028      	b.n	8005482 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4618      	mov	r0, r3
 8005436:	f7ff f9bb 	bl	80047b0 <LL_ADC_IsEnabled>
 800543a:	4603      	mov	r3, r0
 800543c:	2b00      	cmp	r3, #0
 800543e:	d104      	bne.n	800544a <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4618      	mov	r0, r3
 8005446:	f7ff f98b 	bl	8004760 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800544a:	f7ff f807 	bl	800445c <HAL_GetTick>
 800544e:	4602      	mov	r2, r0
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	1ad3      	subs	r3, r2, r3
 8005454:	2b02      	cmp	r3, #2
 8005456:	d914      	bls.n	8005482 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f003 0301 	and.w	r3, r3, #1
 8005462:	2b01      	cmp	r3, #1
 8005464:	d00d      	beq.n	8005482 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800546a:	f043 0210 	orr.w	r2, r3, #16
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005476:	f043 0201 	orr.w	r2, r3, #1
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800547e:	2301      	movs	r3, #1
 8005480:	e007      	b.n	8005492 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f003 0301 	and.w	r3, r3, #1
 800548c:	2b01      	cmp	r3, #1
 800548e:	d1cf      	bne.n	8005430 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005490:	2300      	movs	r3, #0
}
 8005492:	4618      	mov	r0, r3
 8005494:	3710      	adds	r7, #16
 8005496:	46bd      	mov	sp, r7
 8005498:	bd80      	pop	{r7, pc}
 800549a:	bf00      	nop
 800549c:	8000003f 	.word	0x8000003f
 80054a0:	50040300 	.word	0x50040300
 80054a4:	2000000c 	.word	0x2000000c
 80054a8:	053e2d63 	.word	0x053e2d63

080054ac <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b084      	sub	sp, #16
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4618      	mov	r0, r3
 80054ba:	f7ff f98c 	bl	80047d6 <LL_ADC_IsDisableOngoing>
 80054be:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4618      	mov	r0, r3
 80054c6:	f7ff f973 	bl	80047b0 <LL_ADC_IsEnabled>
 80054ca:	4603      	mov	r3, r0
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d047      	beq.n	8005560 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d144      	bne.n	8005560 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	689b      	ldr	r3, [r3, #8]
 80054dc:	f003 030d 	and.w	r3, r3, #13
 80054e0:	2b01      	cmp	r3, #1
 80054e2:	d10c      	bne.n	80054fe <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4618      	mov	r0, r3
 80054ea:	f7ff f94d 	bl	8004788 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	2203      	movs	r2, #3
 80054f4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80054f6:	f7fe ffb1 	bl	800445c <HAL_GetTick>
 80054fa:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80054fc:	e029      	b.n	8005552 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005502:	f043 0210 	orr.w	r2, r3, #16
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800550e:	f043 0201 	orr.w	r2, r3, #1
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 8005516:	2301      	movs	r3, #1
 8005518:	e023      	b.n	8005562 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800551a:	f7fe ff9f 	bl	800445c <HAL_GetTick>
 800551e:	4602      	mov	r2, r0
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	1ad3      	subs	r3, r2, r3
 8005524:	2b02      	cmp	r3, #2
 8005526:	d914      	bls.n	8005552 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	689b      	ldr	r3, [r3, #8]
 800552e:	f003 0301 	and.w	r3, r3, #1
 8005532:	2b00      	cmp	r3, #0
 8005534:	d00d      	beq.n	8005552 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800553a:	f043 0210 	orr.w	r2, r3, #16
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005546:	f043 0201 	orr.w	r2, r3, #1
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800554e:	2301      	movs	r3, #1
 8005550:	e007      	b.n	8005562 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	689b      	ldr	r3, [r3, #8]
 8005558:	f003 0301 	and.w	r3, r3, #1
 800555c:	2b00      	cmp	r3, #0
 800555e:	d1dc      	bne.n	800551a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005560:	2300      	movs	r3, #0
}
 8005562:	4618      	mov	r0, r3
 8005564:	3710      	adds	r7, #16
 8005566:	46bd      	mov	sp, r7
 8005568:	bd80      	pop	{r7, pc}

0800556a <LL_ADC_StartCalibration>:
{
 800556a:	b480      	push	{r7}
 800556c:	b083      	sub	sp, #12
 800556e:	af00      	add	r7, sp, #0
 8005570:	6078      	str	r0, [r7, #4]
 8005572:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	689b      	ldr	r3, [r3, #8]
 8005578:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 800557c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005580:	683a      	ldr	r2, [r7, #0]
 8005582:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8005586:	4313      	orrs	r3, r2
 8005588:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	609a      	str	r2, [r3, #8]
}
 8005590:	bf00      	nop
 8005592:	370c      	adds	r7, #12
 8005594:	46bd      	mov	sp, r7
 8005596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559a:	4770      	bx	lr

0800559c <LL_ADC_IsCalibrationOnGoing>:
{
 800559c:	b480      	push	{r7}
 800559e:	b083      	sub	sp, #12
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	689b      	ldr	r3, [r3, #8]
 80055a8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80055ac:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80055b0:	d101      	bne.n	80055b6 <LL_ADC_IsCalibrationOnGoing+0x1a>
 80055b2:	2301      	movs	r3, #1
 80055b4:	e000      	b.n	80055b8 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80055b6:	2300      	movs	r3, #0
}
 80055b8:	4618      	mov	r0, r3
 80055ba:	370c      	adds	r7, #12
 80055bc:	46bd      	mov	sp, r7
 80055be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c2:	4770      	bx	lr

080055c4 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b084      	sub	sp, #16
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
 80055cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80055ce:	2300      	movs	r3, #0
 80055d0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80055d8:	2b01      	cmp	r3, #1
 80055da:	d101      	bne.n	80055e0 <HAL_ADCEx_Calibration_Start+0x1c>
 80055dc:	2302      	movs	r3, #2
 80055de:	e04d      	b.n	800567c <HAL_ADCEx_Calibration_Start+0xb8>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2201      	movs	r2, #1
 80055e4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80055e8:	6878      	ldr	r0, [r7, #4]
 80055ea:	f7ff ff5f 	bl	80054ac <ADC_Disable>
 80055ee:	4603      	mov	r3, r0
 80055f0:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80055f2:	7bfb      	ldrb	r3, [r7, #15]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d136      	bne.n	8005666 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055fc:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8005600:	f023 0302 	bic.w	r3, r3, #2
 8005604:	f043 0202 	orr.w	r2, r3, #2
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	655a      	str	r2, [r3, #84]	@ 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	6839      	ldr	r1, [r7, #0]
 8005612:	4618      	mov	r0, r3
 8005614:	f7ff ffa9 	bl	800556a <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005618:	e014      	b.n	8005644 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	3301      	adds	r3, #1
 800561e:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	f5b3 2f91 	cmp.w	r3, #296960	@ 0x48800
 8005626:	d30d      	bcc.n	8005644 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800562c:	f023 0312 	bic.w	r3, r3, #18
 8005630:	f043 0210 	orr.w	r2, r3, #16
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2200      	movs	r2, #0
 800563c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_ERROR;
 8005640:	2301      	movs	r3, #1
 8005642:	e01b      	b.n	800567c <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4618      	mov	r0, r3
 800564a:	f7ff ffa7 	bl	800559c <LL_ADC_IsCalibrationOnGoing>
 800564e:	4603      	mov	r3, r0
 8005650:	2b00      	cmp	r3, #0
 8005652:	d1e2      	bne.n	800561a <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005658:	f023 0303 	bic.w	r3, r3, #3
 800565c:	f043 0201 	orr.w	r2, r3, #1
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	655a      	str	r2, [r3, #84]	@ 0x54
 8005664:	e005      	b.n	8005672 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800566a:	f043 0210 	orr.w	r2, r3, #16
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2200      	movs	r2, #0
 8005676:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800567a:	7bfb      	ldrb	r3, [r7, #15]
}
 800567c:	4618      	mov	r0, r3
 800567e:	3710      	adds	r7, #16
 8005680:	46bd      	mov	sp, r7
 8005682:	bd80      	pop	{r7, pc}

08005684 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005684:	b480      	push	{r7}
 8005686:	b085      	sub	sp, #20
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	f003 0307 	and.w	r3, r3, #7
 8005692:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005694:	4b0c      	ldr	r3, [pc, #48]	@ (80056c8 <__NVIC_SetPriorityGrouping+0x44>)
 8005696:	68db      	ldr	r3, [r3, #12]
 8005698:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800569a:	68ba      	ldr	r2, [r7, #8]
 800569c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80056a0:	4013      	ands	r3, r2
 80056a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80056ac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80056b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80056b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80056b6:	4a04      	ldr	r2, [pc, #16]	@ (80056c8 <__NVIC_SetPriorityGrouping+0x44>)
 80056b8:	68bb      	ldr	r3, [r7, #8]
 80056ba:	60d3      	str	r3, [r2, #12]
}
 80056bc:	bf00      	nop
 80056be:	3714      	adds	r7, #20
 80056c0:	46bd      	mov	sp, r7
 80056c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c6:	4770      	bx	lr
 80056c8:	e000ed00 	.word	0xe000ed00

080056cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80056cc:	b480      	push	{r7}
 80056ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80056d0:	4b04      	ldr	r3, [pc, #16]	@ (80056e4 <__NVIC_GetPriorityGrouping+0x18>)
 80056d2:	68db      	ldr	r3, [r3, #12]
 80056d4:	0a1b      	lsrs	r3, r3, #8
 80056d6:	f003 0307 	and.w	r3, r3, #7
}
 80056da:	4618      	mov	r0, r3
 80056dc:	46bd      	mov	sp, r7
 80056de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e2:	4770      	bx	lr
 80056e4:	e000ed00 	.word	0xe000ed00

080056e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80056e8:	b480      	push	{r7}
 80056ea:	b083      	sub	sp, #12
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	4603      	mov	r3, r0
 80056f0:	6039      	str	r1, [r7, #0]
 80056f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80056f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	db0a      	blt.n	8005712 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	b2da      	uxtb	r2, r3
 8005700:	490c      	ldr	r1, [pc, #48]	@ (8005734 <__NVIC_SetPriority+0x4c>)
 8005702:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005706:	0112      	lsls	r2, r2, #4
 8005708:	b2d2      	uxtb	r2, r2
 800570a:	440b      	add	r3, r1
 800570c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005710:	e00a      	b.n	8005728 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	b2da      	uxtb	r2, r3
 8005716:	4908      	ldr	r1, [pc, #32]	@ (8005738 <__NVIC_SetPriority+0x50>)
 8005718:	79fb      	ldrb	r3, [r7, #7]
 800571a:	f003 030f 	and.w	r3, r3, #15
 800571e:	3b04      	subs	r3, #4
 8005720:	0112      	lsls	r2, r2, #4
 8005722:	b2d2      	uxtb	r2, r2
 8005724:	440b      	add	r3, r1
 8005726:	761a      	strb	r2, [r3, #24]
}
 8005728:	bf00      	nop
 800572a:	370c      	adds	r7, #12
 800572c:	46bd      	mov	sp, r7
 800572e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005732:	4770      	bx	lr
 8005734:	e000e100 	.word	0xe000e100
 8005738:	e000ed00 	.word	0xe000ed00

0800573c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800573c:	b480      	push	{r7}
 800573e:	b089      	sub	sp, #36	@ 0x24
 8005740:	af00      	add	r7, sp, #0
 8005742:	60f8      	str	r0, [r7, #12]
 8005744:	60b9      	str	r1, [r7, #8]
 8005746:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	f003 0307 	and.w	r3, r3, #7
 800574e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005750:	69fb      	ldr	r3, [r7, #28]
 8005752:	f1c3 0307 	rsb	r3, r3, #7
 8005756:	2b04      	cmp	r3, #4
 8005758:	bf28      	it	cs
 800575a:	2304      	movcs	r3, #4
 800575c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800575e:	69fb      	ldr	r3, [r7, #28]
 8005760:	3304      	adds	r3, #4
 8005762:	2b06      	cmp	r3, #6
 8005764:	d902      	bls.n	800576c <NVIC_EncodePriority+0x30>
 8005766:	69fb      	ldr	r3, [r7, #28]
 8005768:	3b03      	subs	r3, #3
 800576a:	e000      	b.n	800576e <NVIC_EncodePriority+0x32>
 800576c:	2300      	movs	r3, #0
 800576e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005770:	f04f 32ff 	mov.w	r2, #4294967295
 8005774:	69bb      	ldr	r3, [r7, #24]
 8005776:	fa02 f303 	lsl.w	r3, r2, r3
 800577a:	43da      	mvns	r2, r3
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	401a      	ands	r2, r3
 8005780:	697b      	ldr	r3, [r7, #20]
 8005782:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005784:	f04f 31ff 	mov.w	r1, #4294967295
 8005788:	697b      	ldr	r3, [r7, #20]
 800578a:	fa01 f303 	lsl.w	r3, r1, r3
 800578e:	43d9      	mvns	r1, r3
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005794:	4313      	orrs	r3, r2
         );
}
 8005796:	4618      	mov	r0, r3
 8005798:	3724      	adds	r7, #36	@ 0x24
 800579a:	46bd      	mov	sp, r7
 800579c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a0:	4770      	bx	lr
	...

080057a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b082      	sub	sp, #8
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	3b01      	subs	r3, #1
 80057b0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80057b4:	d301      	bcc.n	80057ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80057b6:	2301      	movs	r3, #1
 80057b8:	e00f      	b.n	80057da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80057ba:	4a0a      	ldr	r2, [pc, #40]	@ (80057e4 <SysTick_Config+0x40>)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	3b01      	subs	r3, #1
 80057c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80057c2:	210f      	movs	r1, #15
 80057c4:	f04f 30ff 	mov.w	r0, #4294967295
 80057c8:	f7ff ff8e 	bl	80056e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80057cc:	4b05      	ldr	r3, [pc, #20]	@ (80057e4 <SysTick_Config+0x40>)
 80057ce:	2200      	movs	r2, #0
 80057d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80057d2:	4b04      	ldr	r3, [pc, #16]	@ (80057e4 <SysTick_Config+0x40>)
 80057d4:	2207      	movs	r2, #7
 80057d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80057d8:	2300      	movs	r3, #0
}
 80057da:	4618      	mov	r0, r3
 80057dc:	3708      	adds	r7, #8
 80057de:	46bd      	mov	sp, r7
 80057e0:	bd80      	pop	{r7, pc}
 80057e2:	bf00      	nop
 80057e4:	e000e010 	.word	0xe000e010

080057e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b082      	sub	sp, #8
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80057f0:	6878      	ldr	r0, [r7, #4]
 80057f2:	f7ff ff47 	bl	8005684 <__NVIC_SetPriorityGrouping>
}
 80057f6:	bf00      	nop
 80057f8:	3708      	adds	r7, #8
 80057fa:	46bd      	mov	sp, r7
 80057fc:	bd80      	pop	{r7, pc}

080057fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80057fe:	b580      	push	{r7, lr}
 8005800:	b086      	sub	sp, #24
 8005802:	af00      	add	r7, sp, #0
 8005804:	4603      	mov	r3, r0
 8005806:	60b9      	str	r1, [r7, #8]
 8005808:	607a      	str	r2, [r7, #4]
 800580a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800580c:	2300      	movs	r3, #0
 800580e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005810:	f7ff ff5c 	bl	80056cc <__NVIC_GetPriorityGrouping>
 8005814:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005816:	687a      	ldr	r2, [r7, #4]
 8005818:	68b9      	ldr	r1, [r7, #8]
 800581a:	6978      	ldr	r0, [r7, #20]
 800581c:	f7ff ff8e 	bl	800573c <NVIC_EncodePriority>
 8005820:	4602      	mov	r2, r0
 8005822:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005826:	4611      	mov	r1, r2
 8005828:	4618      	mov	r0, r3
 800582a:	f7ff ff5d 	bl	80056e8 <__NVIC_SetPriority>
}
 800582e:	bf00      	nop
 8005830:	3718      	adds	r7, #24
 8005832:	46bd      	mov	sp, r7
 8005834:	bd80      	pop	{r7, pc}

08005836 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005836:	b580      	push	{r7, lr}
 8005838:	b082      	sub	sp, #8
 800583a:	af00      	add	r7, sp, #0
 800583c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800583e:	6878      	ldr	r0, [r7, #4]
 8005840:	f7ff ffb0 	bl	80057a4 <SysTick_Config>
 8005844:	4603      	mov	r3, r0
}
 8005846:	4618      	mov	r0, r3
 8005848:	3708      	adds	r7, #8
 800584a:	46bd      	mov	sp, r7
 800584c:	bd80      	pop	{r7, pc}
	...

08005850 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005850:	b480      	push	{r7}
 8005852:	b087      	sub	sp, #28
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
 8005858:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800585a:	2300      	movs	r3, #0
 800585c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800585e:	e148      	b.n	8005af2 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	681a      	ldr	r2, [r3, #0]
 8005864:	2101      	movs	r1, #1
 8005866:	697b      	ldr	r3, [r7, #20]
 8005868:	fa01 f303 	lsl.w	r3, r1, r3
 800586c:	4013      	ands	r3, r2
 800586e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	2b00      	cmp	r3, #0
 8005874:	f000 813a 	beq.w	8005aec <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	685b      	ldr	r3, [r3, #4]
 800587c:	f003 0303 	and.w	r3, r3, #3
 8005880:	2b01      	cmp	r3, #1
 8005882:	d005      	beq.n	8005890 <HAL_GPIO_Init+0x40>
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	685b      	ldr	r3, [r3, #4]
 8005888:	f003 0303 	and.w	r3, r3, #3
 800588c:	2b02      	cmp	r3, #2
 800588e:	d130      	bne.n	80058f2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	689b      	ldr	r3, [r3, #8]
 8005894:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005896:	697b      	ldr	r3, [r7, #20]
 8005898:	005b      	lsls	r3, r3, #1
 800589a:	2203      	movs	r2, #3
 800589c:	fa02 f303 	lsl.w	r3, r2, r3
 80058a0:	43db      	mvns	r3, r3
 80058a2:	693a      	ldr	r2, [r7, #16]
 80058a4:	4013      	ands	r3, r2
 80058a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	68da      	ldr	r2, [r3, #12]
 80058ac:	697b      	ldr	r3, [r7, #20]
 80058ae:	005b      	lsls	r3, r3, #1
 80058b0:	fa02 f303 	lsl.w	r3, r2, r3
 80058b4:	693a      	ldr	r2, [r7, #16]
 80058b6:	4313      	orrs	r3, r2
 80058b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	693a      	ldr	r2, [r7, #16]
 80058be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	685b      	ldr	r3, [r3, #4]
 80058c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80058c6:	2201      	movs	r2, #1
 80058c8:	697b      	ldr	r3, [r7, #20]
 80058ca:	fa02 f303 	lsl.w	r3, r2, r3
 80058ce:	43db      	mvns	r3, r3
 80058d0:	693a      	ldr	r2, [r7, #16]
 80058d2:	4013      	ands	r3, r2
 80058d4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	685b      	ldr	r3, [r3, #4]
 80058da:	091b      	lsrs	r3, r3, #4
 80058dc:	f003 0201 	and.w	r2, r3, #1
 80058e0:	697b      	ldr	r3, [r7, #20]
 80058e2:	fa02 f303 	lsl.w	r3, r2, r3
 80058e6:	693a      	ldr	r2, [r7, #16]
 80058e8:	4313      	orrs	r3, r2
 80058ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	693a      	ldr	r2, [r7, #16]
 80058f0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	685b      	ldr	r3, [r3, #4]
 80058f6:	f003 0303 	and.w	r3, r3, #3
 80058fa:	2b03      	cmp	r3, #3
 80058fc:	d017      	beq.n	800592e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	68db      	ldr	r3, [r3, #12]
 8005902:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005904:	697b      	ldr	r3, [r7, #20]
 8005906:	005b      	lsls	r3, r3, #1
 8005908:	2203      	movs	r2, #3
 800590a:	fa02 f303 	lsl.w	r3, r2, r3
 800590e:	43db      	mvns	r3, r3
 8005910:	693a      	ldr	r2, [r7, #16]
 8005912:	4013      	ands	r3, r2
 8005914:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	689a      	ldr	r2, [r3, #8]
 800591a:	697b      	ldr	r3, [r7, #20]
 800591c:	005b      	lsls	r3, r3, #1
 800591e:	fa02 f303 	lsl.w	r3, r2, r3
 8005922:	693a      	ldr	r2, [r7, #16]
 8005924:	4313      	orrs	r3, r2
 8005926:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	693a      	ldr	r2, [r7, #16]
 800592c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	f003 0303 	and.w	r3, r3, #3
 8005936:	2b02      	cmp	r3, #2
 8005938:	d123      	bne.n	8005982 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800593a:	697b      	ldr	r3, [r7, #20]
 800593c:	08da      	lsrs	r2, r3, #3
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	3208      	adds	r2, #8
 8005942:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005946:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	f003 0307 	and.w	r3, r3, #7
 800594e:	009b      	lsls	r3, r3, #2
 8005950:	220f      	movs	r2, #15
 8005952:	fa02 f303 	lsl.w	r3, r2, r3
 8005956:	43db      	mvns	r3, r3
 8005958:	693a      	ldr	r2, [r7, #16]
 800595a:	4013      	ands	r3, r2
 800595c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	691a      	ldr	r2, [r3, #16]
 8005962:	697b      	ldr	r3, [r7, #20]
 8005964:	f003 0307 	and.w	r3, r3, #7
 8005968:	009b      	lsls	r3, r3, #2
 800596a:	fa02 f303 	lsl.w	r3, r2, r3
 800596e:	693a      	ldr	r2, [r7, #16]
 8005970:	4313      	orrs	r3, r2
 8005972:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005974:	697b      	ldr	r3, [r7, #20]
 8005976:	08da      	lsrs	r2, r3, #3
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	3208      	adds	r2, #8
 800597c:	6939      	ldr	r1, [r7, #16]
 800597e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005988:	697b      	ldr	r3, [r7, #20]
 800598a:	005b      	lsls	r3, r3, #1
 800598c:	2203      	movs	r2, #3
 800598e:	fa02 f303 	lsl.w	r3, r2, r3
 8005992:	43db      	mvns	r3, r3
 8005994:	693a      	ldr	r2, [r7, #16]
 8005996:	4013      	ands	r3, r2
 8005998:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	685b      	ldr	r3, [r3, #4]
 800599e:	f003 0203 	and.w	r2, r3, #3
 80059a2:	697b      	ldr	r3, [r7, #20]
 80059a4:	005b      	lsls	r3, r3, #1
 80059a6:	fa02 f303 	lsl.w	r3, r2, r3
 80059aa:	693a      	ldr	r2, [r7, #16]
 80059ac:	4313      	orrs	r3, r2
 80059ae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	693a      	ldr	r2, [r7, #16]
 80059b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	685b      	ldr	r3, [r3, #4]
 80059ba:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80059be:	2b00      	cmp	r3, #0
 80059c0:	f000 8094 	beq.w	8005aec <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80059c4:	4b52      	ldr	r3, [pc, #328]	@ (8005b10 <HAL_GPIO_Init+0x2c0>)
 80059c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80059c8:	4a51      	ldr	r2, [pc, #324]	@ (8005b10 <HAL_GPIO_Init+0x2c0>)
 80059ca:	f043 0301 	orr.w	r3, r3, #1
 80059ce:	6613      	str	r3, [r2, #96]	@ 0x60
 80059d0:	4b4f      	ldr	r3, [pc, #316]	@ (8005b10 <HAL_GPIO_Init+0x2c0>)
 80059d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80059d4:	f003 0301 	and.w	r3, r3, #1
 80059d8:	60bb      	str	r3, [r7, #8]
 80059da:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80059dc:	4a4d      	ldr	r2, [pc, #308]	@ (8005b14 <HAL_GPIO_Init+0x2c4>)
 80059de:	697b      	ldr	r3, [r7, #20]
 80059e0:	089b      	lsrs	r3, r3, #2
 80059e2:	3302      	adds	r3, #2
 80059e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80059e8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80059ea:	697b      	ldr	r3, [r7, #20]
 80059ec:	f003 0303 	and.w	r3, r3, #3
 80059f0:	009b      	lsls	r3, r3, #2
 80059f2:	220f      	movs	r2, #15
 80059f4:	fa02 f303 	lsl.w	r3, r2, r3
 80059f8:	43db      	mvns	r3, r3
 80059fa:	693a      	ldr	r2, [r7, #16]
 80059fc:	4013      	ands	r3, r2
 80059fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8005a06:	d00d      	beq.n	8005a24 <HAL_GPIO_Init+0x1d4>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	4a43      	ldr	r2, [pc, #268]	@ (8005b18 <HAL_GPIO_Init+0x2c8>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d007      	beq.n	8005a20 <HAL_GPIO_Init+0x1d0>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	4a42      	ldr	r2, [pc, #264]	@ (8005b1c <HAL_GPIO_Init+0x2cc>)
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d101      	bne.n	8005a1c <HAL_GPIO_Init+0x1cc>
 8005a18:	2302      	movs	r3, #2
 8005a1a:	e004      	b.n	8005a26 <HAL_GPIO_Init+0x1d6>
 8005a1c:	2307      	movs	r3, #7
 8005a1e:	e002      	b.n	8005a26 <HAL_GPIO_Init+0x1d6>
 8005a20:	2301      	movs	r3, #1
 8005a22:	e000      	b.n	8005a26 <HAL_GPIO_Init+0x1d6>
 8005a24:	2300      	movs	r3, #0
 8005a26:	697a      	ldr	r2, [r7, #20]
 8005a28:	f002 0203 	and.w	r2, r2, #3
 8005a2c:	0092      	lsls	r2, r2, #2
 8005a2e:	4093      	lsls	r3, r2
 8005a30:	693a      	ldr	r2, [r7, #16]
 8005a32:	4313      	orrs	r3, r2
 8005a34:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005a36:	4937      	ldr	r1, [pc, #220]	@ (8005b14 <HAL_GPIO_Init+0x2c4>)
 8005a38:	697b      	ldr	r3, [r7, #20]
 8005a3a:	089b      	lsrs	r3, r3, #2
 8005a3c:	3302      	adds	r3, #2
 8005a3e:	693a      	ldr	r2, [r7, #16]
 8005a40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005a44:	4b36      	ldr	r3, [pc, #216]	@ (8005b20 <HAL_GPIO_Init+0x2d0>)
 8005a46:	689b      	ldr	r3, [r3, #8]
 8005a48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	43db      	mvns	r3, r3
 8005a4e:	693a      	ldr	r2, [r7, #16]
 8005a50:	4013      	ands	r3, r2
 8005a52:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	685b      	ldr	r3, [r3, #4]
 8005a58:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d003      	beq.n	8005a68 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8005a60:	693a      	ldr	r2, [r7, #16]
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	4313      	orrs	r3, r2
 8005a66:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005a68:	4a2d      	ldr	r2, [pc, #180]	@ (8005b20 <HAL_GPIO_Init+0x2d0>)
 8005a6a:	693b      	ldr	r3, [r7, #16]
 8005a6c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005a6e:	4b2c      	ldr	r3, [pc, #176]	@ (8005b20 <HAL_GPIO_Init+0x2d0>)
 8005a70:	68db      	ldr	r3, [r3, #12]
 8005a72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	43db      	mvns	r3, r3
 8005a78:	693a      	ldr	r2, [r7, #16]
 8005a7a:	4013      	ands	r3, r2
 8005a7c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	685b      	ldr	r3, [r3, #4]
 8005a82:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d003      	beq.n	8005a92 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8005a8a:	693a      	ldr	r2, [r7, #16]
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	4313      	orrs	r3, r2
 8005a90:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005a92:	4a23      	ldr	r2, [pc, #140]	@ (8005b20 <HAL_GPIO_Init+0x2d0>)
 8005a94:	693b      	ldr	r3, [r7, #16]
 8005a96:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8005a98:	4b21      	ldr	r3, [pc, #132]	@ (8005b20 <HAL_GPIO_Init+0x2d0>)
 8005a9a:	685b      	ldr	r3, [r3, #4]
 8005a9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	43db      	mvns	r3, r3
 8005aa2:	693a      	ldr	r2, [r7, #16]
 8005aa4:	4013      	ands	r3, r2
 8005aa6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	685b      	ldr	r3, [r3, #4]
 8005aac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d003      	beq.n	8005abc <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8005ab4:	693a      	ldr	r2, [r7, #16]
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	4313      	orrs	r3, r2
 8005aba:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005abc:	4a18      	ldr	r2, [pc, #96]	@ (8005b20 <HAL_GPIO_Init+0x2d0>)
 8005abe:	693b      	ldr	r3, [r7, #16]
 8005ac0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8005ac2:	4b17      	ldr	r3, [pc, #92]	@ (8005b20 <HAL_GPIO_Init+0x2d0>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	43db      	mvns	r3, r3
 8005acc:	693a      	ldr	r2, [r7, #16]
 8005ace:	4013      	ands	r3, r2
 8005ad0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	685b      	ldr	r3, [r3, #4]
 8005ad6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d003      	beq.n	8005ae6 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8005ade:	693a      	ldr	r2, [r7, #16]
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	4313      	orrs	r3, r2
 8005ae4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005ae6:	4a0e      	ldr	r2, [pc, #56]	@ (8005b20 <HAL_GPIO_Init+0x2d0>)
 8005ae8:	693b      	ldr	r3, [r7, #16]
 8005aea:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005aec:	697b      	ldr	r3, [r7, #20]
 8005aee:	3301      	adds	r3, #1
 8005af0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	681a      	ldr	r2, [r3, #0]
 8005af6:	697b      	ldr	r3, [r7, #20]
 8005af8:	fa22 f303 	lsr.w	r3, r2, r3
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	f47f aeaf 	bne.w	8005860 <HAL_GPIO_Init+0x10>
  }
}
 8005b02:	bf00      	nop
 8005b04:	bf00      	nop
 8005b06:	371c      	adds	r7, #28
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0e:	4770      	bx	lr
 8005b10:	40021000 	.word	0x40021000
 8005b14:	40010000 	.word	0x40010000
 8005b18:	48000400 	.word	0x48000400
 8005b1c:	48000800 	.word	0x48000800
 8005b20:	40010400 	.word	0x40010400

08005b24 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005b24:	b480      	push	{r7}
 8005b26:	b085      	sub	sp, #20
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
 8005b2c:	460b      	mov	r3, r1
 8005b2e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	691a      	ldr	r2, [r3, #16]
 8005b34:	887b      	ldrh	r3, [r7, #2]
 8005b36:	4013      	ands	r3, r2
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d002      	beq.n	8005b42 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	73fb      	strb	r3, [r7, #15]
 8005b40:	e001      	b.n	8005b46 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005b42:	2300      	movs	r3, #0
 8005b44:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005b46:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b48:	4618      	mov	r0, r3
 8005b4a:	3714      	adds	r7, #20
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b52:	4770      	bx	lr

08005b54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005b54:	b480      	push	{r7}
 8005b56:	b083      	sub	sp, #12
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
 8005b5c:	460b      	mov	r3, r1
 8005b5e:	807b      	strh	r3, [r7, #2]
 8005b60:	4613      	mov	r3, r2
 8005b62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005b64:	787b      	ldrb	r3, [r7, #1]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d003      	beq.n	8005b72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005b6a:	887a      	ldrh	r2, [r7, #2]
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005b70:	e002      	b.n	8005b78 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005b72:	887a      	ldrh	r2, [r7, #2]
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005b78:	bf00      	nop
 8005b7a:	370c      	adds	r7, #12
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b82:	4770      	bx	lr

08005b84 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005b84:	b480      	push	{r7}
 8005b86:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005b88:	4b05      	ldr	r3, [pc, #20]	@ (8005ba0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	4a04      	ldr	r2, [pc, #16]	@ (8005ba0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005b8e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005b92:	6013      	str	r3, [r2, #0]
}
 8005b94:	bf00      	nop
 8005b96:	46bd      	mov	sp, r7
 8005b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9c:	4770      	bx	lr
 8005b9e:	bf00      	nop
 8005ba0:	40007000 	.word	0x40007000

08005ba4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005ba4:	b480      	push	{r7}
 8005ba6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005ba8:	4b04      	ldr	r3, [pc, #16]	@ (8005bbc <HAL_PWREx_GetVoltageRange+0x18>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb8:	4770      	bx	lr
 8005bba:	bf00      	nop
 8005bbc:	40007000 	.word	0x40007000

08005bc0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005bc0:	b480      	push	{r7}
 8005bc2:	b085      	sub	sp, #20
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005bce:	d130      	bne.n	8005c32 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005bd0:	4b23      	ldr	r3, [pc, #140]	@ (8005c60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005bd8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005bdc:	d038      	beq.n	8005c50 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005bde:	4b20      	ldr	r3, [pc, #128]	@ (8005c60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005be6:	4a1e      	ldr	r2, [pc, #120]	@ (8005c60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005be8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005bec:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005bee:	4b1d      	ldr	r3, [pc, #116]	@ (8005c64 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	2232      	movs	r2, #50	@ 0x32
 8005bf4:	fb02 f303 	mul.w	r3, r2, r3
 8005bf8:	4a1b      	ldr	r2, [pc, #108]	@ (8005c68 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8005bfa:	fba2 2303 	umull	r2, r3, r2, r3
 8005bfe:	0c9b      	lsrs	r3, r3, #18
 8005c00:	3301      	adds	r3, #1
 8005c02:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005c04:	e002      	b.n	8005c0c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	3b01      	subs	r3, #1
 8005c0a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005c0c:	4b14      	ldr	r3, [pc, #80]	@ (8005c60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005c0e:	695b      	ldr	r3, [r3, #20]
 8005c10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005c14:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c18:	d102      	bne.n	8005c20 <HAL_PWREx_ControlVoltageScaling+0x60>
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d1f2      	bne.n	8005c06 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005c20:	4b0f      	ldr	r3, [pc, #60]	@ (8005c60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005c22:	695b      	ldr	r3, [r3, #20]
 8005c24:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005c28:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c2c:	d110      	bne.n	8005c50 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8005c2e:	2303      	movs	r3, #3
 8005c30:	e00f      	b.n	8005c52 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8005c32:	4b0b      	ldr	r3, [pc, #44]	@ (8005c60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005c3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c3e:	d007      	beq.n	8005c50 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005c40:	4b07      	ldr	r3, [pc, #28]	@ (8005c60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005c48:	4a05      	ldr	r2, [pc, #20]	@ (8005c60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005c4a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005c4e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005c50:	2300      	movs	r3, #0
}
 8005c52:	4618      	mov	r0, r3
 8005c54:	3714      	adds	r7, #20
 8005c56:	46bd      	mov	sp, r7
 8005c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5c:	4770      	bx	lr
 8005c5e:	bf00      	nop
 8005c60:	40007000 	.word	0x40007000
 8005c64:	2000000c 	.word	0x2000000c
 8005c68:	431bde83 	.word	0x431bde83

08005c6c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b088      	sub	sp, #32
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d102      	bne.n	8005c80 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	f000 bc02 	b.w	8006484 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005c80:	4b96      	ldr	r3, [pc, #600]	@ (8005edc <HAL_RCC_OscConfig+0x270>)
 8005c82:	689b      	ldr	r3, [r3, #8]
 8005c84:	f003 030c 	and.w	r3, r3, #12
 8005c88:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005c8a:	4b94      	ldr	r3, [pc, #592]	@ (8005edc <HAL_RCC_OscConfig+0x270>)
 8005c8c:	68db      	ldr	r3, [r3, #12]
 8005c8e:	f003 0303 	and.w	r3, r3, #3
 8005c92:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f003 0310 	and.w	r3, r3, #16
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	f000 80e4 	beq.w	8005e6a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005ca2:	69bb      	ldr	r3, [r7, #24]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d007      	beq.n	8005cb8 <HAL_RCC_OscConfig+0x4c>
 8005ca8:	69bb      	ldr	r3, [r7, #24]
 8005caa:	2b0c      	cmp	r3, #12
 8005cac:	f040 808b 	bne.w	8005dc6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005cb0:	697b      	ldr	r3, [r7, #20]
 8005cb2:	2b01      	cmp	r3, #1
 8005cb4:	f040 8087 	bne.w	8005dc6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005cb8:	4b88      	ldr	r3, [pc, #544]	@ (8005edc <HAL_RCC_OscConfig+0x270>)
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f003 0302 	and.w	r3, r3, #2
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d005      	beq.n	8005cd0 <HAL_RCC_OscConfig+0x64>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	699b      	ldr	r3, [r3, #24]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d101      	bne.n	8005cd0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8005ccc:	2301      	movs	r3, #1
 8005cce:	e3d9      	b.n	8006484 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6a1a      	ldr	r2, [r3, #32]
 8005cd4:	4b81      	ldr	r3, [pc, #516]	@ (8005edc <HAL_RCC_OscConfig+0x270>)
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f003 0308 	and.w	r3, r3, #8
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d004      	beq.n	8005cea <HAL_RCC_OscConfig+0x7e>
 8005ce0:	4b7e      	ldr	r3, [pc, #504]	@ (8005edc <HAL_RCC_OscConfig+0x270>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005ce8:	e005      	b.n	8005cf6 <HAL_RCC_OscConfig+0x8a>
 8005cea:	4b7c      	ldr	r3, [pc, #496]	@ (8005edc <HAL_RCC_OscConfig+0x270>)
 8005cec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005cf0:	091b      	lsrs	r3, r3, #4
 8005cf2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d223      	bcs.n	8005d42 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6a1b      	ldr	r3, [r3, #32]
 8005cfe:	4618      	mov	r0, r3
 8005d00:	f000 fd54 	bl	80067ac <RCC_SetFlashLatencyFromMSIRange>
 8005d04:	4603      	mov	r3, r0
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d001      	beq.n	8005d0e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	e3ba      	b.n	8006484 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005d0e:	4b73      	ldr	r3, [pc, #460]	@ (8005edc <HAL_RCC_OscConfig+0x270>)
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	4a72      	ldr	r2, [pc, #456]	@ (8005edc <HAL_RCC_OscConfig+0x270>)
 8005d14:	f043 0308 	orr.w	r3, r3, #8
 8005d18:	6013      	str	r3, [r2, #0]
 8005d1a:	4b70      	ldr	r3, [pc, #448]	@ (8005edc <HAL_RCC_OscConfig+0x270>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6a1b      	ldr	r3, [r3, #32]
 8005d26:	496d      	ldr	r1, [pc, #436]	@ (8005edc <HAL_RCC_OscConfig+0x270>)
 8005d28:	4313      	orrs	r3, r2
 8005d2a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005d2c:	4b6b      	ldr	r3, [pc, #428]	@ (8005edc <HAL_RCC_OscConfig+0x270>)
 8005d2e:	685b      	ldr	r3, [r3, #4]
 8005d30:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	69db      	ldr	r3, [r3, #28]
 8005d38:	021b      	lsls	r3, r3, #8
 8005d3a:	4968      	ldr	r1, [pc, #416]	@ (8005edc <HAL_RCC_OscConfig+0x270>)
 8005d3c:	4313      	orrs	r3, r2
 8005d3e:	604b      	str	r3, [r1, #4]
 8005d40:	e025      	b.n	8005d8e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005d42:	4b66      	ldr	r3, [pc, #408]	@ (8005edc <HAL_RCC_OscConfig+0x270>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4a65      	ldr	r2, [pc, #404]	@ (8005edc <HAL_RCC_OscConfig+0x270>)
 8005d48:	f043 0308 	orr.w	r3, r3, #8
 8005d4c:	6013      	str	r3, [r2, #0]
 8005d4e:	4b63      	ldr	r3, [pc, #396]	@ (8005edc <HAL_RCC_OscConfig+0x270>)
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6a1b      	ldr	r3, [r3, #32]
 8005d5a:	4960      	ldr	r1, [pc, #384]	@ (8005edc <HAL_RCC_OscConfig+0x270>)
 8005d5c:	4313      	orrs	r3, r2
 8005d5e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005d60:	4b5e      	ldr	r3, [pc, #376]	@ (8005edc <HAL_RCC_OscConfig+0x270>)
 8005d62:	685b      	ldr	r3, [r3, #4]
 8005d64:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	69db      	ldr	r3, [r3, #28]
 8005d6c:	021b      	lsls	r3, r3, #8
 8005d6e:	495b      	ldr	r1, [pc, #364]	@ (8005edc <HAL_RCC_OscConfig+0x270>)
 8005d70:	4313      	orrs	r3, r2
 8005d72:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005d74:	69bb      	ldr	r3, [r7, #24]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d109      	bne.n	8005d8e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6a1b      	ldr	r3, [r3, #32]
 8005d7e:	4618      	mov	r0, r3
 8005d80:	f000 fd14 	bl	80067ac <RCC_SetFlashLatencyFromMSIRange>
 8005d84:	4603      	mov	r3, r0
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d001      	beq.n	8005d8e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8005d8a:	2301      	movs	r3, #1
 8005d8c:	e37a      	b.n	8006484 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005d8e:	f000 fc81 	bl	8006694 <HAL_RCC_GetSysClockFreq>
 8005d92:	4602      	mov	r2, r0
 8005d94:	4b51      	ldr	r3, [pc, #324]	@ (8005edc <HAL_RCC_OscConfig+0x270>)
 8005d96:	689b      	ldr	r3, [r3, #8]
 8005d98:	091b      	lsrs	r3, r3, #4
 8005d9a:	f003 030f 	and.w	r3, r3, #15
 8005d9e:	4950      	ldr	r1, [pc, #320]	@ (8005ee0 <HAL_RCC_OscConfig+0x274>)
 8005da0:	5ccb      	ldrb	r3, [r1, r3]
 8005da2:	f003 031f 	and.w	r3, r3, #31
 8005da6:	fa22 f303 	lsr.w	r3, r2, r3
 8005daa:	4a4e      	ldr	r2, [pc, #312]	@ (8005ee4 <HAL_RCC_OscConfig+0x278>)
 8005dac:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005dae:	4b4e      	ldr	r3, [pc, #312]	@ (8005ee8 <HAL_RCC_OscConfig+0x27c>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	4618      	mov	r0, r3
 8005db4:	f7fe fb02 	bl	80043bc <HAL_InitTick>
 8005db8:	4603      	mov	r3, r0
 8005dba:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005dbc:	7bfb      	ldrb	r3, [r7, #15]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d052      	beq.n	8005e68 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8005dc2:	7bfb      	ldrb	r3, [r7, #15]
 8005dc4:	e35e      	b.n	8006484 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	699b      	ldr	r3, [r3, #24]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d032      	beq.n	8005e34 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005dce:	4b43      	ldr	r3, [pc, #268]	@ (8005edc <HAL_RCC_OscConfig+0x270>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	4a42      	ldr	r2, [pc, #264]	@ (8005edc <HAL_RCC_OscConfig+0x270>)
 8005dd4:	f043 0301 	orr.w	r3, r3, #1
 8005dd8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005dda:	f7fe fb3f 	bl	800445c <HAL_GetTick>
 8005dde:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005de0:	e008      	b.n	8005df4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005de2:	f7fe fb3b 	bl	800445c <HAL_GetTick>
 8005de6:	4602      	mov	r2, r0
 8005de8:	693b      	ldr	r3, [r7, #16]
 8005dea:	1ad3      	subs	r3, r2, r3
 8005dec:	2b02      	cmp	r3, #2
 8005dee:	d901      	bls.n	8005df4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8005df0:	2303      	movs	r3, #3
 8005df2:	e347      	b.n	8006484 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005df4:	4b39      	ldr	r3, [pc, #228]	@ (8005edc <HAL_RCC_OscConfig+0x270>)
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f003 0302 	and.w	r3, r3, #2
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d0f0      	beq.n	8005de2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005e00:	4b36      	ldr	r3, [pc, #216]	@ (8005edc <HAL_RCC_OscConfig+0x270>)
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4a35      	ldr	r2, [pc, #212]	@ (8005edc <HAL_RCC_OscConfig+0x270>)
 8005e06:	f043 0308 	orr.w	r3, r3, #8
 8005e0a:	6013      	str	r3, [r2, #0]
 8005e0c:	4b33      	ldr	r3, [pc, #204]	@ (8005edc <HAL_RCC_OscConfig+0x270>)
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6a1b      	ldr	r3, [r3, #32]
 8005e18:	4930      	ldr	r1, [pc, #192]	@ (8005edc <HAL_RCC_OscConfig+0x270>)
 8005e1a:	4313      	orrs	r3, r2
 8005e1c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005e1e:	4b2f      	ldr	r3, [pc, #188]	@ (8005edc <HAL_RCC_OscConfig+0x270>)
 8005e20:	685b      	ldr	r3, [r3, #4]
 8005e22:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	69db      	ldr	r3, [r3, #28]
 8005e2a:	021b      	lsls	r3, r3, #8
 8005e2c:	492b      	ldr	r1, [pc, #172]	@ (8005edc <HAL_RCC_OscConfig+0x270>)
 8005e2e:	4313      	orrs	r3, r2
 8005e30:	604b      	str	r3, [r1, #4]
 8005e32:	e01a      	b.n	8005e6a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005e34:	4b29      	ldr	r3, [pc, #164]	@ (8005edc <HAL_RCC_OscConfig+0x270>)
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	4a28      	ldr	r2, [pc, #160]	@ (8005edc <HAL_RCC_OscConfig+0x270>)
 8005e3a:	f023 0301 	bic.w	r3, r3, #1
 8005e3e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005e40:	f7fe fb0c 	bl	800445c <HAL_GetTick>
 8005e44:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005e46:	e008      	b.n	8005e5a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005e48:	f7fe fb08 	bl	800445c <HAL_GetTick>
 8005e4c:	4602      	mov	r2, r0
 8005e4e:	693b      	ldr	r3, [r7, #16]
 8005e50:	1ad3      	subs	r3, r2, r3
 8005e52:	2b02      	cmp	r3, #2
 8005e54:	d901      	bls.n	8005e5a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8005e56:	2303      	movs	r3, #3
 8005e58:	e314      	b.n	8006484 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005e5a:	4b20      	ldr	r3, [pc, #128]	@ (8005edc <HAL_RCC_OscConfig+0x270>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f003 0302 	and.w	r3, r3, #2
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d1f0      	bne.n	8005e48 <HAL_RCC_OscConfig+0x1dc>
 8005e66:	e000      	b.n	8005e6a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005e68:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f003 0301 	and.w	r3, r3, #1
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d073      	beq.n	8005f5e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005e76:	69bb      	ldr	r3, [r7, #24]
 8005e78:	2b08      	cmp	r3, #8
 8005e7a:	d005      	beq.n	8005e88 <HAL_RCC_OscConfig+0x21c>
 8005e7c:	69bb      	ldr	r3, [r7, #24]
 8005e7e:	2b0c      	cmp	r3, #12
 8005e80:	d10e      	bne.n	8005ea0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005e82:	697b      	ldr	r3, [r7, #20]
 8005e84:	2b03      	cmp	r3, #3
 8005e86:	d10b      	bne.n	8005ea0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e88:	4b14      	ldr	r3, [pc, #80]	@ (8005edc <HAL_RCC_OscConfig+0x270>)
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d063      	beq.n	8005f5c <HAL_RCC_OscConfig+0x2f0>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	685b      	ldr	r3, [r3, #4]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d15f      	bne.n	8005f5c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005e9c:	2301      	movs	r3, #1
 8005e9e:	e2f1      	b.n	8006484 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	685b      	ldr	r3, [r3, #4]
 8005ea4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ea8:	d106      	bne.n	8005eb8 <HAL_RCC_OscConfig+0x24c>
 8005eaa:	4b0c      	ldr	r3, [pc, #48]	@ (8005edc <HAL_RCC_OscConfig+0x270>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	4a0b      	ldr	r2, [pc, #44]	@ (8005edc <HAL_RCC_OscConfig+0x270>)
 8005eb0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005eb4:	6013      	str	r3, [r2, #0]
 8005eb6:	e025      	b.n	8005f04 <HAL_RCC_OscConfig+0x298>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	685b      	ldr	r3, [r3, #4]
 8005ebc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005ec0:	d114      	bne.n	8005eec <HAL_RCC_OscConfig+0x280>
 8005ec2:	4b06      	ldr	r3, [pc, #24]	@ (8005edc <HAL_RCC_OscConfig+0x270>)
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4a05      	ldr	r2, [pc, #20]	@ (8005edc <HAL_RCC_OscConfig+0x270>)
 8005ec8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005ecc:	6013      	str	r3, [r2, #0]
 8005ece:	4b03      	ldr	r3, [pc, #12]	@ (8005edc <HAL_RCC_OscConfig+0x270>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	4a02      	ldr	r2, [pc, #8]	@ (8005edc <HAL_RCC_OscConfig+0x270>)
 8005ed4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005ed8:	6013      	str	r3, [r2, #0]
 8005eda:	e013      	b.n	8005f04 <HAL_RCC_OscConfig+0x298>
 8005edc:	40021000 	.word	0x40021000
 8005ee0:	08009bb0 	.word	0x08009bb0
 8005ee4:	2000000c 	.word	0x2000000c
 8005ee8:	20000010 	.word	0x20000010
 8005eec:	4ba0      	ldr	r3, [pc, #640]	@ (8006170 <HAL_RCC_OscConfig+0x504>)
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	4a9f      	ldr	r2, [pc, #636]	@ (8006170 <HAL_RCC_OscConfig+0x504>)
 8005ef2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005ef6:	6013      	str	r3, [r2, #0]
 8005ef8:	4b9d      	ldr	r3, [pc, #628]	@ (8006170 <HAL_RCC_OscConfig+0x504>)
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	4a9c      	ldr	r2, [pc, #624]	@ (8006170 <HAL_RCC_OscConfig+0x504>)
 8005efe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005f02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	685b      	ldr	r3, [r3, #4]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d013      	beq.n	8005f34 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f0c:	f7fe faa6 	bl	800445c <HAL_GetTick>
 8005f10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005f12:	e008      	b.n	8005f26 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005f14:	f7fe faa2 	bl	800445c <HAL_GetTick>
 8005f18:	4602      	mov	r2, r0
 8005f1a:	693b      	ldr	r3, [r7, #16]
 8005f1c:	1ad3      	subs	r3, r2, r3
 8005f1e:	2b64      	cmp	r3, #100	@ 0x64
 8005f20:	d901      	bls.n	8005f26 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8005f22:	2303      	movs	r3, #3
 8005f24:	e2ae      	b.n	8006484 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005f26:	4b92      	ldr	r3, [pc, #584]	@ (8006170 <HAL_RCC_OscConfig+0x504>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d0f0      	beq.n	8005f14 <HAL_RCC_OscConfig+0x2a8>
 8005f32:	e014      	b.n	8005f5e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f34:	f7fe fa92 	bl	800445c <HAL_GetTick>
 8005f38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005f3a:	e008      	b.n	8005f4e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005f3c:	f7fe fa8e 	bl	800445c <HAL_GetTick>
 8005f40:	4602      	mov	r2, r0
 8005f42:	693b      	ldr	r3, [r7, #16]
 8005f44:	1ad3      	subs	r3, r2, r3
 8005f46:	2b64      	cmp	r3, #100	@ 0x64
 8005f48:	d901      	bls.n	8005f4e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005f4a:	2303      	movs	r3, #3
 8005f4c:	e29a      	b.n	8006484 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005f4e:	4b88      	ldr	r3, [pc, #544]	@ (8006170 <HAL_RCC_OscConfig+0x504>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d1f0      	bne.n	8005f3c <HAL_RCC_OscConfig+0x2d0>
 8005f5a:	e000      	b.n	8005f5e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f003 0302 	and.w	r3, r3, #2
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d060      	beq.n	800602c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005f6a:	69bb      	ldr	r3, [r7, #24]
 8005f6c:	2b04      	cmp	r3, #4
 8005f6e:	d005      	beq.n	8005f7c <HAL_RCC_OscConfig+0x310>
 8005f70:	69bb      	ldr	r3, [r7, #24]
 8005f72:	2b0c      	cmp	r3, #12
 8005f74:	d119      	bne.n	8005faa <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005f76:	697b      	ldr	r3, [r7, #20]
 8005f78:	2b02      	cmp	r3, #2
 8005f7a:	d116      	bne.n	8005faa <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005f7c:	4b7c      	ldr	r3, [pc, #496]	@ (8006170 <HAL_RCC_OscConfig+0x504>)
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d005      	beq.n	8005f94 <HAL_RCC_OscConfig+0x328>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	68db      	ldr	r3, [r3, #12]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d101      	bne.n	8005f94 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005f90:	2301      	movs	r3, #1
 8005f92:	e277      	b.n	8006484 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f94:	4b76      	ldr	r3, [pc, #472]	@ (8006170 <HAL_RCC_OscConfig+0x504>)
 8005f96:	685b      	ldr	r3, [r3, #4]
 8005f98:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	691b      	ldr	r3, [r3, #16]
 8005fa0:	061b      	lsls	r3, r3, #24
 8005fa2:	4973      	ldr	r1, [pc, #460]	@ (8006170 <HAL_RCC_OscConfig+0x504>)
 8005fa4:	4313      	orrs	r3, r2
 8005fa6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005fa8:	e040      	b.n	800602c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	68db      	ldr	r3, [r3, #12]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d023      	beq.n	8005ffa <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005fb2:	4b6f      	ldr	r3, [pc, #444]	@ (8006170 <HAL_RCC_OscConfig+0x504>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4a6e      	ldr	r2, [pc, #440]	@ (8006170 <HAL_RCC_OscConfig+0x504>)
 8005fb8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005fbc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fbe:	f7fe fa4d 	bl	800445c <HAL_GetTick>
 8005fc2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005fc4:	e008      	b.n	8005fd8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005fc6:	f7fe fa49 	bl	800445c <HAL_GetTick>
 8005fca:	4602      	mov	r2, r0
 8005fcc:	693b      	ldr	r3, [r7, #16]
 8005fce:	1ad3      	subs	r3, r2, r3
 8005fd0:	2b02      	cmp	r3, #2
 8005fd2:	d901      	bls.n	8005fd8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005fd4:	2303      	movs	r3, #3
 8005fd6:	e255      	b.n	8006484 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005fd8:	4b65      	ldr	r3, [pc, #404]	@ (8006170 <HAL_RCC_OscConfig+0x504>)
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d0f0      	beq.n	8005fc6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005fe4:	4b62      	ldr	r3, [pc, #392]	@ (8006170 <HAL_RCC_OscConfig+0x504>)
 8005fe6:	685b      	ldr	r3, [r3, #4]
 8005fe8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	691b      	ldr	r3, [r3, #16]
 8005ff0:	061b      	lsls	r3, r3, #24
 8005ff2:	495f      	ldr	r1, [pc, #380]	@ (8006170 <HAL_RCC_OscConfig+0x504>)
 8005ff4:	4313      	orrs	r3, r2
 8005ff6:	604b      	str	r3, [r1, #4]
 8005ff8:	e018      	b.n	800602c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005ffa:	4b5d      	ldr	r3, [pc, #372]	@ (8006170 <HAL_RCC_OscConfig+0x504>)
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	4a5c      	ldr	r2, [pc, #368]	@ (8006170 <HAL_RCC_OscConfig+0x504>)
 8006000:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006004:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006006:	f7fe fa29 	bl	800445c <HAL_GetTick>
 800600a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800600c:	e008      	b.n	8006020 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800600e:	f7fe fa25 	bl	800445c <HAL_GetTick>
 8006012:	4602      	mov	r2, r0
 8006014:	693b      	ldr	r3, [r7, #16]
 8006016:	1ad3      	subs	r3, r2, r3
 8006018:	2b02      	cmp	r3, #2
 800601a:	d901      	bls.n	8006020 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800601c:	2303      	movs	r3, #3
 800601e:	e231      	b.n	8006484 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006020:	4b53      	ldr	r3, [pc, #332]	@ (8006170 <HAL_RCC_OscConfig+0x504>)
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006028:	2b00      	cmp	r3, #0
 800602a:	d1f0      	bne.n	800600e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f003 0308 	and.w	r3, r3, #8
 8006034:	2b00      	cmp	r3, #0
 8006036:	d03c      	beq.n	80060b2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	695b      	ldr	r3, [r3, #20]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d01c      	beq.n	800607a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006040:	4b4b      	ldr	r3, [pc, #300]	@ (8006170 <HAL_RCC_OscConfig+0x504>)
 8006042:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006046:	4a4a      	ldr	r2, [pc, #296]	@ (8006170 <HAL_RCC_OscConfig+0x504>)
 8006048:	f043 0301 	orr.w	r3, r3, #1
 800604c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006050:	f7fe fa04 	bl	800445c <HAL_GetTick>
 8006054:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006056:	e008      	b.n	800606a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006058:	f7fe fa00 	bl	800445c <HAL_GetTick>
 800605c:	4602      	mov	r2, r0
 800605e:	693b      	ldr	r3, [r7, #16]
 8006060:	1ad3      	subs	r3, r2, r3
 8006062:	2b02      	cmp	r3, #2
 8006064:	d901      	bls.n	800606a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8006066:	2303      	movs	r3, #3
 8006068:	e20c      	b.n	8006484 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800606a:	4b41      	ldr	r3, [pc, #260]	@ (8006170 <HAL_RCC_OscConfig+0x504>)
 800606c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006070:	f003 0302 	and.w	r3, r3, #2
 8006074:	2b00      	cmp	r3, #0
 8006076:	d0ef      	beq.n	8006058 <HAL_RCC_OscConfig+0x3ec>
 8006078:	e01b      	b.n	80060b2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800607a:	4b3d      	ldr	r3, [pc, #244]	@ (8006170 <HAL_RCC_OscConfig+0x504>)
 800607c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006080:	4a3b      	ldr	r2, [pc, #236]	@ (8006170 <HAL_RCC_OscConfig+0x504>)
 8006082:	f023 0301 	bic.w	r3, r3, #1
 8006086:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800608a:	f7fe f9e7 	bl	800445c <HAL_GetTick>
 800608e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006090:	e008      	b.n	80060a4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006092:	f7fe f9e3 	bl	800445c <HAL_GetTick>
 8006096:	4602      	mov	r2, r0
 8006098:	693b      	ldr	r3, [r7, #16]
 800609a:	1ad3      	subs	r3, r2, r3
 800609c:	2b02      	cmp	r3, #2
 800609e:	d901      	bls.n	80060a4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80060a0:	2303      	movs	r3, #3
 80060a2:	e1ef      	b.n	8006484 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80060a4:	4b32      	ldr	r3, [pc, #200]	@ (8006170 <HAL_RCC_OscConfig+0x504>)
 80060a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80060aa:	f003 0302 	and.w	r3, r3, #2
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d1ef      	bne.n	8006092 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f003 0304 	and.w	r3, r3, #4
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	f000 80a6 	beq.w	800620c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80060c0:	2300      	movs	r3, #0
 80060c2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80060c4:	4b2a      	ldr	r3, [pc, #168]	@ (8006170 <HAL_RCC_OscConfig+0x504>)
 80060c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d10d      	bne.n	80060ec <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80060d0:	4b27      	ldr	r3, [pc, #156]	@ (8006170 <HAL_RCC_OscConfig+0x504>)
 80060d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060d4:	4a26      	ldr	r2, [pc, #152]	@ (8006170 <HAL_RCC_OscConfig+0x504>)
 80060d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80060da:	6593      	str	r3, [r2, #88]	@ 0x58
 80060dc:	4b24      	ldr	r3, [pc, #144]	@ (8006170 <HAL_RCC_OscConfig+0x504>)
 80060de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80060e4:	60bb      	str	r3, [r7, #8]
 80060e6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80060e8:	2301      	movs	r3, #1
 80060ea:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80060ec:	4b21      	ldr	r3, [pc, #132]	@ (8006174 <HAL_RCC_OscConfig+0x508>)
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d118      	bne.n	800612a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80060f8:	4b1e      	ldr	r3, [pc, #120]	@ (8006174 <HAL_RCC_OscConfig+0x508>)
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	4a1d      	ldr	r2, [pc, #116]	@ (8006174 <HAL_RCC_OscConfig+0x508>)
 80060fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006102:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006104:	f7fe f9aa 	bl	800445c <HAL_GetTick>
 8006108:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800610a:	e008      	b.n	800611e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800610c:	f7fe f9a6 	bl	800445c <HAL_GetTick>
 8006110:	4602      	mov	r2, r0
 8006112:	693b      	ldr	r3, [r7, #16]
 8006114:	1ad3      	subs	r3, r2, r3
 8006116:	2b02      	cmp	r3, #2
 8006118:	d901      	bls.n	800611e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800611a:	2303      	movs	r3, #3
 800611c:	e1b2      	b.n	8006484 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800611e:	4b15      	ldr	r3, [pc, #84]	@ (8006174 <HAL_RCC_OscConfig+0x508>)
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006126:	2b00      	cmp	r3, #0
 8006128:	d0f0      	beq.n	800610c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	689b      	ldr	r3, [r3, #8]
 800612e:	2b01      	cmp	r3, #1
 8006130:	d108      	bne.n	8006144 <HAL_RCC_OscConfig+0x4d8>
 8006132:	4b0f      	ldr	r3, [pc, #60]	@ (8006170 <HAL_RCC_OscConfig+0x504>)
 8006134:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006138:	4a0d      	ldr	r2, [pc, #52]	@ (8006170 <HAL_RCC_OscConfig+0x504>)
 800613a:	f043 0301 	orr.w	r3, r3, #1
 800613e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006142:	e029      	b.n	8006198 <HAL_RCC_OscConfig+0x52c>
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	689b      	ldr	r3, [r3, #8]
 8006148:	2b05      	cmp	r3, #5
 800614a:	d115      	bne.n	8006178 <HAL_RCC_OscConfig+0x50c>
 800614c:	4b08      	ldr	r3, [pc, #32]	@ (8006170 <HAL_RCC_OscConfig+0x504>)
 800614e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006152:	4a07      	ldr	r2, [pc, #28]	@ (8006170 <HAL_RCC_OscConfig+0x504>)
 8006154:	f043 0304 	orr.w	r3, r3, #4
 8006158:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800615c:	4b04      	ldr	r3, [pc, #16]	@ (8006170 <HAL_RCC_OscConfig+0x504>)
 800615e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006162:	4a03      	ldr	r2, [pc, #12]	@ (8006170 <HAL_RCC_OscConfig+0x504>)
 8006164:	f043 0301 	orr.w	r3, r3, #1
 8006168:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800616c:	e014      	b.n	8006198 <HAL_RCC_OscConfig+0x52c>
 800616e:	bf00      	nop
 8006170:	40021000 	.word	0x40021000
 8006174:	40007000 	.word	0x40007000
 8006178:	4b9a      	ldr	r3, [pc, #616]	@ (80063e4 <HAL_RCC_OscConfig+0x778>)
 800617a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800617e:	4a99      	ldr	r2, [pc, #612]	@ (80063e4 <HAL_RCC_OscConfig+0x778>)
 8006180:	f023 0301 	bic.w	r3, r3, #1
 8006184:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006188:	4b96      	ldr	r3, [pc, #600]	@ (80063e4 <HAL_RCC_OscConfig+0x778>)
 800618a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800618e:	4a95      	ldr	r2, [pc, #596]	@ (80063e4 <HAL_RCC_OscConfig+0x778>)
 8006190:	f023 0304 	bic.w	r3, r3, #4
 8006194:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	689b      	ldr	r3, [r3, #8]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d016      	beq.n	80061ce <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061a0:	f7fe f95c 	bl	800445c <HAL_GetTick>
 80061a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80061a6:	e00a      	b.n	80061be <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80061a8:	f7fe f958 	bl	800445c <HAL_GetTick>
 80061ac:	4602      	mov	r2, r0
 80061ae:	693b      	ldr	r3, [r7, #16]
 80061b0:	1ad3      	subs	r3, r2, r3
 80061b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d901      	bls.n	80061be <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80061ba:	2303      	movs	r3, #3
 80061bc:	e162      	b.n	8006484 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80061be:	4b89      	ldr	r3, [pc, #548]	@ (80063e4 <HAL_RCC_OscConfig+0x778>)
 80061c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80061c4:	f003 0302 	and.w	r3, r3, #2
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d0ed      	beq.n	80061a8 <HAL_RCC_OscConfig+0x53c>
 80061cc:	e015      	b.n	80061fa <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061ce:	f7fe f945 	bl	800445c <HAL_GetTick>
 80061d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80061d4:	e00a      	b.n	80061ec <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80061d6:	f7fe f941 	bl	800445c <HAL_GetTick>
 80061da:	4602      	mov	r2, r0
 80061dc:	693b      	ldr	r3, [r7, #16]
 80061de:	1ad3      	subs	r3, r2, r3
 80061e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80061e4:	4293      	cmp	r3, r2
 80061e6:	d901      	bls.n	80061ec <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80061e8:	2303      	movs	r3, #3
 80061ea:	e14b      	b.n	8006484 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80061ec:	4b7d      	ldr	r3, [pc, #500]	@ (80063e4 <HAL_RCC_OscConfig+0x778>)
 80061ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80061f2:	f003 0302 	and.w	r3, r3, #2
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d1ed      	bne.n	80061d6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80061fa:	7ffb      	ldrb	r3, [r7, #31]
 80061fc:	2b01      	cmp	r3, #1
 80061fe:	d105      	bne.n	800620c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006200:	4b78      	ldr	r3, [pc, #480]	@ (80063e4 <HAL_RCC_OscConfig+0x778>)
 8006202:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006204:	4a77      	ldr	r2, [pc, #476]	@ (80063e4 <HAL_RCC_OscConfig+0x778>)
 8006206:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800620a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f003 0320 	and.w	r3, r3, #32
 8006214:	2b00      	cmp	r3, #0
 8006216:	d03c      	beq.n	8006292 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800621c:	2b00      	cmp	r3, #0
 800621e:	d01c      	beq.n	800625a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006220:	4b70      	ldr	r3, [pc, #448]	@ (80063e4 <HAL_RCC_OscConfig+0x778>)
 8006222:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006226:	4a6f      	ldr	r2, [pc, #444]	@ (80063e4 <HAL_RCC_OscConfig+0x778>)
 8006228:	f043 0301 	orr.w	r3, r3, #1
 800622c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006230:	f7fe f914 	bl	800445c <HAL_GetTick>
 8006234:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006236:	e008      	b.n	800624a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006238:	f7fe f910 	bl	800445c <HAL_GetTick>
 800623c:	4602      	mov	r2, r0
 800623e:	693b      	ldr	r3, [r7, #16]
 8006240:	1ad3      	subs	r3, r2, r3
 8006242:	2b02      	cmp	r3, #2
 8006244:	d901      	bls.n	800624a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8006246:	2303      	movs	r3, #3
 8006248:	e11c      	b.n	8006484 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800624a:	4b66      	ldr	r3, [pc, #408]	@ (80063e4 <HAL_RCC_OscConfig+0x778>)
 800624c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006250:	f003 0302 	and.w	r3, r3, #2
 8006254:	2b00      	cmp	r3, #0
 8006256:	d0ef      	beq.n	8006238 <HAL_RCC_OscConfig+0x5cc>
 8006258:	e01b      	b.n	8006292 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800625a:	4b62      	ldr	r3, [pc, #392]	@ (80063e4 <HAL_RCC_OscConfig+0x778>)
 800625c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006260:	4a60      	ldr	r2, [pc, #384]	@ (80063e4 <HAL_RCC_OscConfig+0x778>)
 8006262:	f023 0301 	bic.w	r3, r3, #1
 8006266:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800626a:	f7fe f8f7 	bl	800445c <HAL_GetTick>
 800626e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006270:	e008      	b.n	8006284 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006272:	f7fe f8f3 	bl	800445c <HAL_GetTick>
 8006276:	4602      	mov	r2, r0
 8006278:	693b      	ldr	r3, [r7, #16]
 800627a:	1ad3      	subs	r3, r2, r3
 800627c:	2b02      	cmp	r3, #2
 800627e:	d901      	bls.n	8006284 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8006280:	2303      	movs	r3, #3
 8006282:	e0ff      	b.n	8006484 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006284:	4b57      	ldr	r3, [pc, #348]	@ (80063e4 <HAL_RCC_OscConfig+0x778>)
 8006286:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800628a:	f003 0302 	and.w	r3, r3, #2
 800628e:	2b00      	cmp	r3, #0
 8006290:	d1ef      	bne.n	8006272 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006296:	2b00      	cmp	r3, #0
 8006298:	f000 80f3 	beq.w	8006482 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062a0:	2b02      	cmp	r3, #2
 80062a2:	f040 80c9 	bne.w	8006438 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80062a6:	4b4f      	ldr	r3, [pc, #316]	@ (80063e4 <HAL_RCC_OscConfig+0x778>)
 80062a8:	68db      	ldr	r3, [r3, #12]
 80062aa:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80062ac:	697b      	ldr	r3, [r7, #20]
 80062ae:	f003 0203 	and.w	r2, r3, #3
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062b6:	429a      	cmp	r2, r3
 80062b8:	d12c      	bne.n	8006314 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80062ba:	697b      	ldr	r3, [r7, #20]
 80062bc:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062c4:	3b01      	subs	r3, #1
 80062c6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80062c8:	429a      	cmp	r2, r3
 80062ca:	d123      	bne.n	8006314 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80062cc:	697b      	ldr	r3, [r7, #20]
 80062ce:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80062d6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80062d8:	429a      	cmp	r2, r3
 80062da:	d11b      	bne.n	8006314 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80062dc:	697b      	ldr	r3, [r7, #20]
 80062de:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062e6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80062e8:	429a      	cmp	r2, r3
 80062ea:	d113      	bne.n	8006314 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80062ec:	697b      	ldr	r3, [r7, #20]
 80062ee:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062f6:	085b      	lsrs	r3, r3, #1
 80062f8:	3b01      	subs	r3, #1
 80062fa:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80062fc:	429a      	cmp	r2, r3
 80062fe:	d109      	bne.n	8006314 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006300:	697b      	ldr	r3, [r7, #20]
 8006302:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800630a:	085b      	lsrs	r3, r3, #1
 800630c:	3b01      	subs	r3, #1
 800630e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006310:	429a      	cmp	r2, r3
 8006312:	d06b      	beq.n	80063ec <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006314:	69bb      	ldr	r3, [r7, #24]
 8006316:	2b0c      	cmp	r3, #12
 8006318:	d062      	beq.n	80063e0 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800631a:	4b32      	ldr	r3, [pc, #200]	@ (80063e4 <HAL_RCC_OscConfig+0x778>)
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006322:	2b00      	cmp	r3, #0
 8006324:	d001      	beq.n	800632a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8006326:	2301      	movs	r3, #1
 8006328:	e0ac      	b.n	8006484 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800632a:	4b2e      	ldr	r3, [pc, #184]	@ (80063e4 <HAL_RCC_OscConfig+0x778>)
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	4a2d      	ldr	r2, [pc, #180]	@ (80063e4 <HAL_RCC_OscConfig+0x778>)
 8006330:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006334:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006336:	f7fe f891 	bl	800445c <HAL_GetTick>
 800633a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800633c:	e008      	b.n	8006350 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800633e:	f7fe f88d 	bl	800445c <HAL_GetTick>
 8006342:	4602      	mov	r2, r0
 8006344:	693b      	ldr	r3, [r7, #16]
 8006346:	1ad3      	subs	r3, r2, r3
 8006348:	2b02      	cmp	r3, #2
 800634a:	d901      	bls.n	8006350 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800634c:	2303      	movs	r3, #3
 800634e:	e099      	b.n	8006484 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006350:	4b24      	ldr	r3, [pc, #144]	@ (80063e4 <HAL_RCC_OscConfig+0x778>)
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006358:	2b00      	cmp	r3, #0
 800635a:	d1f0      	bne.n	800633e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800635c:	4b21      	ldr	r3, [pc, #132]	@ (80063e4 <HAL_RCC_OscConfig+0x778>)
 800635e:	68da      	ldr	r2, [r3, #12]
 8006360:	4b21      	ldr	r3, [pc, #132]	@ (80063e8 <HAL_RCC_OscConfig+0x77c>)
 8006362:	4013      	ands	r3, r2
 8006364:	687a      	ldr	r2, [r7, #4]
 8006366:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8006368:	687a      	ldr	r2, [r7, #4]
 800636a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800636c:	3a01      	subs	r2, #1
 800636e:	0112      	lsls	r2, r2, #4
 8006370:	4311      	orrs	r1, r2
 8006372:	687a      	ldr	r2, [r7, #4]
 8006374:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006376:	0212      	lsls	r2, r2, #8
 8006378:	4311      	orrs	r1, r2
 800637a:	687a      	ldr	r2, [r7, #4]
 800637c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800637e:	0852      	lsrs	r2, r2, #1
 8006380:	3a01      	subs	r2, #1
 8006382:	0552      	lsls	r2, r2, #21
 8006384:	4311      	orrs	r1, r2
 8006386:	687a      	ldr	r2, [r7, #4]
 8006388:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800638a:	0852      	lsrs	r2, r2, #1
 800638c:	3a01      	subs	r2, #1
 800638e:	0652      	lsls	r2, r2, #25
 8006390:	4311      	orrs	r1, r2
 8006392:	687a      	ldr	r2, [r7, #4]
 8006394:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006396:	06d2      	lsls	r2, r2, #27
 8006398:	430a      	orrs	r2, r1
 800639a:	4912      	ldr	r1, [pc, #72]	@ (80063e4 <HAL_RCC_OscConfig+0x778>)
 800639c:	4313      	orrs	r3, r2
 800639e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80063a0:	4b10      	ldr	r3, [pc, #64]	@ (80063e4 <HAL_RCC_OscConfig+0x778>)
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	4a0f      	ldr	r2, [pc, #60]	@ (80063e4 <HAL_RCC_OscConfig+0x778>)
 80063a6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80063aa:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80063ac:	4b0d      	ldr	r3, [pc, #52]	@ (80063e4 <HAL_RCC_OscConfig+0x778>)
 80063ae:	68db      	ldr	r3, [r3, #12]
 80063b0:	4a0c      	ldr	r2, [pc, #48]	@ (80063e4 <HAL_RCC_OscConfig+0x778>)
 80063b2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80063b6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80063b8:	f7fe f850 	bl	800445c <HAL_GetTick>
 80063bc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80063be:	e008      	b.n	80063d2 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80063c0:	f7fe f84c 	bl	800445c <HAL_GetTick>
 80063c4:	4602      	mov	r2, r0
 80063c6:	693b      	ldr	r3, [r7, #16]
 80063c8:	1ad3      	subs	r3, r2, r3
 80063ca:	2b02      	cmp	r3, #2
 80063cc:	d901      	bls.n	80063d2 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80063ce:	2303      	movs	r3, #3
 80063d0:	e058      	b.n	8006484 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80063d2:	4b04      	ldr	r3, [pc, #16]	@ (80063e4 <HAL_RCC_OscConfig+0x778>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d0f0      	beq.n	80063c0 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80063de:	e050      	b.n	8006482 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80063e0:	2301      	movs	r3, #1
 80063e2:	e04f      	b.n	8006484 <HAL_RCC_OscConfig+0x818>
 80063e4:	40021000 	.word	0x40021000
 80063e8:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80063ec:	4b27      	ldr	r3, [pc, #156]	@ (800648c <HAL_RCC_OscConfig+0x820>)
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d144      	bne.n	8006482 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80063f8:	4b24      	ldr	r3, [pc, #144]	@ (800648c <HAL_RCC_OscConfig+0x820>)
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	4a23      	ldr	r2, [pc, #140]	@ (800648c <HAL_RCC_OscConfig+0x820>)
 80063fe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006402:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006404:	4b21      	ldr	r3, [pc, #132]	@ (800648c <HAL_RCC_OscConfig+0x820>)
 8006406:	68db      	ldr	r3, [r3, #12]
 8006408:	4a20      	ldr	r2, [pc, #128]	@ (800648c <HAL_RCC_OscConfig+0x820>)
 800640a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800640e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006410:	f7fe f824 	bl	800445c <HAL_GetTick>
 8006414:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006416:	e008      	b.n	800642a <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006418:	f7fe f820 	bl	800445c <HAL_GetTick>
 800641c:	4602      	mov	r2, r0
 800641e:	693b      	ldr	r3, [r7, #16]
 8006420:	1ad3      	subs	r3, r2, r3
 8006422:	2b02      	cmp	r3, #2
 8006424:	d901      	bls.n	800642a <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8006426:	2303      	movs	r3, #3
 8006428:	e02c      	b.n	8006484 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800642a:	4b18      	ldr	r3, [pc, #96]	@ (800648c <HAL_RCC_OscConfig+0x820>)
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006432:	2b00      	cmp	r3, #0
 8006434:	d0f0      	beq.n	8006418 <HAL_RCC_OscConfig+0x7ac>
 8006436:	e024      	b.n	8006482 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006438:	69bb      	ldr	r3, [r7, #24]
 800643a:	2b0c      	cmp	r3, #12
 800643c:	d01f      	beq.n	800647e <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800643e:	4b13      	ldr	r3, [pc, #76]	@ (800648c <HAL_RCC_OscConfig+0x820>)
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	4a12      	ldr	r2, [pc, #72]	@ (800648c <HAL_RCC_OscConfig+0x820>)
 8006444:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006448:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800644a:	f7fe f807 	bl	800445c <HAL_GetTick>
 800644e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006450:	e008      	b.n	8006464 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006452:	f7fe f803 	bl	800445c <HAL_GetTick>
 8006456:	4602      	mov	r2, r0
 8006458:	693b      	ldr	r3, [r7, #16]
 800645a:	1ad3      	subs	r3, r2, r3
 800645c:	2b02      	cmp	r3, #2
 800645e:	d901      	bls.n	8006464 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8006460:	2303      	movs	r3, #3
 8006462:	e00f      	b.n	8006484 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006464:	4b09      	ldr	r3, [pc, #36]	@ (800648c <HAL_RCC_OscConfig+0x820>)
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800646c:	2b00      	cmp	r3, #0
 800646e:	d1f0      	bne.n	8006452 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8006470:	4b06      	ldr	r3, [pc, #24]	@ (800648c <HAL_RCC_OscConfig+0x820>)
 8006472:	68da      	ldr	r2, [r3, #12]
 8006474:	4905      	ldr	r1, [pc, #20]	@ (800648c <HAL_RCC_OscConfig+0x820>)
 8006476:	4b06      	ldr	r3, [pc, #24]	@ (8006490 <HAL_RCC_OscConfig+0x824>)
 8006478:	4013      	ands	r3, r2
 800647a:	60cb      	str	r3, [r1, #12]
 800647c:	e001      	b.n	8006482 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800647e:	2301      	movs	r3, #1
 8006480:	e000      	b.n	8006484 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8006482:	2300      	movs	r3, #0
}
 8006484:	4618      	mov	r0, r3
 8006486:	3720      	adds	r7, #32
 8006488:	46bd      	mov	sp, r7
 800648a:	bd80      	pop	{r7, pc}
 800648c:	40021000 	.word	0x40021000
 8006490:	feeefffc 	.word	0xfeeefffc

08006494 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b084      	sub	sp, #16
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
 800649c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d101      	bne.n	80064a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80064a4:	2301      	movs	r3, #1
 80064a6:	e0e7      	b.n	8006678 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80064a8:	4b75      	ldr	r3, [pc, #468]	@ (8006680 <HAL_RCC_ClockConfig+0x1ec>)
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f003 0307 	and.w	r3, r3, #7
 80064b0:	683a      	ldr	r2, [r7, #0]
 80064b2:	429a      	cmp	r2, r3
 80064b4:	d910      	bls.n	80064d8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80064b6:	4b72      	ldr	r3, [pc, #456]	@ (8006680 <HAL_RCC_ClockConfig+0x1ec>)
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f023 0207 	bic.w	r2, r3, #7
 80064be:	4970      	ldr	r1, [pc, #448]	@ (8006680 <HAL_RCC_ClockConfig+0x1ec>)
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	4313      	orrs	r3, r2
 80064c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80064c6:	4b6e      	ldr	r3, [pc, #440]	@ (8006680 <HAL_RCC_ClockConfig+0x1ec>)
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f003 0307 	and.w	r3, r3, #7
 80064ce:	683a      	ldr	r2, [r7, #0]
 80064d0:	429a      	cmp	r2, r3
 80064d2:	d001      	beq.n	80064d8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80064d4:	2301      	movs	r3, #1
 80064d6:	e0cf      	b.n	8006678 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f003 0302 	and.w	r3, r3, #2
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d010      	beq.n	8006506 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	689a      	ldr	r2, [r3, #8]
 80064e8:	4b66      	ldr	r3, [pc, #408]	@ (8006684 <HAL_RCC_ClockConfig+0x1f0>)
 80064ea:	689b      	ldr	r3, [r3, #8]
 80064ec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80064f0:	429a      	cmp	r2, r3
 80064f2:	d908      	bls.n	8006506 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80064f4:	4b63      	ldr	r3, [pc, #396]	@ (8006684 <HAL_RCC_ClockConfig+0x1f0>)
 80064f6:	689b      	ldr	r3, [r3, #8]
 80064f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	689b      	ldr	r3, [r3, #8]
 8006500:	4960      	ldr	r1, [pc, #384]	@ (8006684 <HAL_RCC_ClockConfig+0x1f0>)
 8006502:	4313      	orrs	r3, r2
 8006504:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f003 0301 	and.w	r3, r3, #1
 800650e:	2b00      	cmp	r3, #0
 8006510:	d04c      	beq.n	80065ac <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	685b      	ldr	r3, [r3, #4]
 8006516:	2b03      	cmp	r3, #3
 8006518:	d107      	bne.n	800652a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800651a:	4b5a      	ldr	r3, [pc, #360]	@ (8006684 <HAL_RCC_ClockConfig+0x1f0>)
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006522:	2b00      	cmp	r3, #0
 8006524:	d121      	bne.n	800656a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8006526:	2301      	movs	r3, #1
 8006528:	e0a6      	b.n	8006678 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	685b      	ldr	r3, [r3, #4]
 800652e:	2b02      	cmp	r3, #2
 8006530:	d107      	bne.n	8006542 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006532:	4b54      	ldr	r3, [pc, #336]	@ (8006684 <HAL_RCC_ClockConfig+0x1f0>)
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800653a:	2b00      	cmp	r3, #0
 800653c:	d115      	bne.n	800656a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800653e:	2301      	movs	r3, #1
 8006540:	e09a      	b.n	8006678 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	685b      	ldr	r3, [r3, #4]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d107      	bne.n	800655a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800654a:	4b4e      	ldr	r3, [pc, #312]	@ (8006684 <HAL_RCC_ClockConfig+0x1f0>)
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f003 0302 	and.w	r3, r3, #2
 8006552:	2b00      	cmp	r3, #0
 8006554:	d109      	bne.n	800656a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006556:	2301      	movs	r3, #1
 8006558:	e08e      	b.n	8006678 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800655a:	4b4a      	ldr	r3, [pc, #296]	@ (8006684 <HAL_RCC_ClockConfig+0x1f0>)
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006562:	2b00      	cmp	r3, #0
 8006564:	d101      	bne.n	800656a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006566:	2301      	movs	r3, #1
 8006568:	e086      	b.n	8006678 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800656a:	4b46      	ldr	r3, [pc, #280]	@ (8006684 <HAL_RCC_ClockConfig+0x1f0>)
 800656c:	689b      	ldr	r3, [r3, #8]
 800656e:	f023 0203 	bic.w	r2, r3, #3
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	685b      	ldr	r3, [r3, #4]
 8006576:	4943      	ldr	r1, [pc, #268]	@ (8006684 <HAL_RCC_ClockConfig+0x1f0>)
 8006578:	4313      	orrs	r3, r2
 800657a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800657c:	f7fd ff6e 	bl	800445c <HAL_GetTick>
 8006580:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006582:	e00a      	b.n	800659a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006584:	f7fd ff6a 	bl	800445c <HAL_GetTick>
 8006588:	4602      	mov	r2, r0
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	1ad3      	subs	r3, r2, r3
 800658e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006592:	4293      	cmp	r3, r2
 8006594:	d901      	bls.n	800659a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8006596:	2303      	movs	r3, #3
 8006598:	e06e      	b.n	8006678 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800659a:	4b3a      	ldr	r3, [pc, #232]	@ (8006684 <HAL_RCC_ClockConfig+0x1f0>)
 800659c:	689b      	ldr	r3, [r3, #8]
 800659e:	f003 020c 	and.w	r2, r3, #12
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	685b      	ldr	r3, [r3, #4]
 80065a6:	009b      	lsls	r3, r3, #2
 80065a8:	429a      	cmp	r2, r3
 80065aa:	d1eb      	bne.n	8006584 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f003 0302 	and.w	r3, r3, #2
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d010      	beq.n	80065da <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	689a      	ldr	r2, [r3, #8]
 80065bc:	4b31      	ldr	r3, [pc, #196]	@ (8006684 <HAL_RCC_ClockConfig+0x1f0>)
 80065be:	689b      	ldr	r3, [r3, #8]
 80065c0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80065c4:	429a      	cmp	r2, r3
 80065c6:	d208      	bcs.n	80065da <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80065c8:	4b2e      	ldr	r3, [pc, #184]	@ (8006684 <HAL_RCC_ClockConfig+0x1f0>)
 80065ca:	689b      	ldr	r3, [r3, #8]
 80065cc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	689b      	ldr	r3, [r3, #8]
 80065d4:	492b      	ldr	r1, [pc, #172]	@ (8006684 <HAL_RCC_ClockConfig+0x1f0>)
 80065d6:	4313      	orrs	r3, r2
 80065d8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80065da:	4b29      	ldr	r3, [pc, #164]	@ (8006680 <HAL_RCC_ClockConfig+0x1ec>)
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f003 0307 	and.w	r3, r3, #7
 80065e2:	683a      	ldr	r2, [r7, #0]
 80065e4:	429a      	cmp	r2, r3
 80065e6:	d210      	bcs.n	800660a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80065e8:	4b25      	ldr	r3, [pc, #148]	@ (8006680 <HAL_RCC_ClockConfig+0x1ec>)
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f023 0207 	bic.w	r2, r3, #7
 80065f0:	4923      	ldr	r1, [pc, #140]	@ (8006680 <HAL_RCC_ClockConfig+0x1ec>)
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	4313      	orrs	r3, r2
 80065f6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80065f8:	4b21      	ldr	r3, [pc, #132]	@ (8006680 <HAL_RCC_ClockConfig+0x1ec>)
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f003 0307 	and.w	r3, r3, #7
 8006600:	683a      	ldr	r2, [r7, #0]
 8006602:	429a      	cmp	r2, r3
 8006604:	d001      	beq.n	800660a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8006606:	2301      	movs	r3, #1
 8006608:	e036      	b.n	8006678 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f003 0304 	and.w	r3, r3, #4
 8006612:	2b00      	cmp	r3, #0
 8006614:	d008      	beq.n	8006628 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006616:	4b1b      	ldr	r3, [pc, #108]	@ (8006684 <HAL_RCC_ClockConfig+0x1f0>)
 8006618:	689b      	ldr	r3, [r3, #8]
 800661a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	68db      	ldr	r3, [r3, #12]
 8006622:	4918      	ldr	r1, [pc, #96]	@ (8006684 <HAL_RCC_ClockConfig+0x1f0>)
 8006624:	4313      	orrs	r3, r2
 8006626:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f003 0308 	and.w	r3, r3, #8
 8006630:	2b00      	cmp	r3, #0
 8006632:	d009      	beq.n	8006648 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006634:	4b13      	ldr	r3, [pc, #76]	@ (8006684 <HAL_RCC_ClockConfig+0x1f0>)
 8006636:	689b      	ldr	r3, [r3, #8]
 8006638:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	691b      	ldr	r3, [r3, #16]
 8006640:	00db      	lsls	r3, r3, #3
 8006642:	4910      	ldr	r1, [pc, #64]	@ (8006684 <HAL_RCC_ClockConfig+0x1f0>)
 8006644:	4313      	orrs	r3, r2
 8006646:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006648:	f000 f824 	bl	8006694 <HAL_RCC_GetSysClockFreq>
 800664c:	4602      	mov	r2, r0
 800664e:	4b0d      	ldr	r3, [pc, #52]	@ (8006684 <HAL_RCC_ClockConfig+0x1f0>)
 8006650:	689b      	ldr	r3, [r3, #8]
 8006652:	091b      	lsrs	r3, r3, #4
 8006654:	f003 030f 	and.w	r3, r3, #15
 8006658:	490b      	ldr	r1, [pc, #44]	@ (8006688 <HAL_RCC_ClockConfig+0x1f4>)
 800665a:	5ccb      	ldrb	r3, [r1, r3]
 800665c:	f003 031f 	and.w	r3, r3, #31
 8006660:	fa22 f303 	lsr.w	r3, r2, r3
 8006664:	4a09      	ldr	r2, [pc, #36]	@ (800668c <HAL_RCC_ClockConfig+0x1f8>)
 8006666:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006668:	4b09      	ldr	r3, [pc, #36]	@ (8006690 <HAL_RCC_ClockConfig+0x1fc>)
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	4618      	mov	r0, r3
 800666e:	f7fd fea5 	bl	80043bc <HAL_InitTick>
 8006672:	4603      	mov	r3, r0
 8006674:	72fb      	strb	r3, [r7, #11]

  return status;
 8006676:	7afb      	ldrb	r3, [r7, #11]
}
 8006678:	4618      	mov	r0, r3
 800667a:	3710      	adds	r7, #16
 800667c:	46bd      	mov	sp, r7
 800667e:	bd80      	pop	{r7, pc}
 8006680:	40022000 	.word	0x40022000
 8006684:	40021000 	.word	0x40021000
 8006688:	08009bb0 	.word	0x08009bb0
 800668c:	2000000c 	.word	0x2000000c
 8006690:	20000010 	.word	0x20000010

08006694 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006694:	b480      	push	{r7}
 8006696:	b089      	sub	sp, #36	@ 0x24
 8006698:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800669a:	2300      	movs	r3, #0
 800669c:	61fb      	str	r3, [r7, #28]
 800669e:	2300      	movs	r3, #0
 80066a0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80066a2:	4b3e      	ldr	r3, [pc, #248]	@ (800679c <HAL_RCC_GetSysClockFreq+0x108>)
 80066a4:	689b      	ldr	r3, [r3, #8]
 80066a6:	f003 030c 	and.w	r3, r3, #12
 80066aa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80066ac:	4b3b      	ldr	r3, [pc, #236]	@ (800679c <HAL_RCC_GetSysClockFreq+0x108>)
 80066ae:	68db      	ldr	r3, [r3, #12]
 80066b0:	f003 0303 	and.w	r3, r3, #3
 80066b4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80066b6:	693b      	ldr	r3, [r7, #16]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d005      	beq.n	80066c8 <HAL_RCC_GetSysClockFreq+0x34>
 80066bc:	693b      	ldr	r3, [r7, #16]
 80066be:	2b0c      	cmp	r3, #12
 80066c0:	d121      	bne.n	8006706 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	2b01      	cmp	r3, #1
 80066c6:	d11e      	bne.n	8006706 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80066c8:	4b34      	ldr	r3, [pc, #208]	@ (800679c <HAL_RCC_GetSysClockFreq+0x108>)
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f003 0308 	and.w	r3, r3, #8
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d107      	bne.n	80066e4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80066d4:	4b31      	ldr	r3, [pc, #196]	@ (800679c <HAL_RCC_GetSysClockFreq+0x108>)
 80066d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80066da:	0a1b      	lsrs	r3, r3, #8
 80066dc:	f003 030f 	and.w	r3, r3, #15
 80066e0:	61fb      	str	r3, [r7, #28]
 80066e2:	e005      	b.n	80066f0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80066e4:	4b2d      	ldr	r3, [pc, #180]	@ (800679c <HAL_RCC_GetSysClockFreq+0x108>)
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	091b      	lsrs	r3, r3, #4
 80066ea:	f003 030f 	and.w	r3, r3, #15
 80066ee:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80066f0:	4a2b      	ldr	r2, [pc, #172]	@ (80067a0 <HAL_RCC_GetSysClockFreq+0x10c>)
 80066f2:	69fb      	ldr	r3, [r7, #28]
 80066f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80066f8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80066fa:	693b      	ldr	r3, [r7, #16]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d10d      	bne.n	800671c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006700:	69fb      	ldr	r3, [r7, #28]
 8006702:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006704:	e00a      	b.n	800671c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8006706:	693b      	ldr	r3, [r7, #16]
 8006708:	2b04      	cmp	r3, #4
 800670a:	d102      	bne.n	8006712 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800670c:	4b25      	ldr	r3, [pc, #148]	@ (80067a4 <HAL_RCC_GetSysClockFreq+0x110>)
 800670e:	61bb      	str	r3, [r7, #24]
 8006710:	e004      	b.n	800671c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8006712:	693b      	ldr	r3, [r7, #16]
 8006714:	2b08      	cmp	r3, #8
 8006716:	d101      	bne.n	800671c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006718:	4b23      	ldr	r3, [pc, #140]	@ (80067a8 <HAL_RCC_GetSysClockFreq+0x114>)
 800671a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800671c:	693b      	ldr	r3, [r7, #16]
 800671e:	2b0c      	cmp	r3, #12
 8006720:	d134      	bne.n	800678c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006722:	4b1e      	ldr	r3, [pc, #120]	@ (800679c <HAL_RCC_GetSysClockFreq+0x108>)
 8006724:	68db      	ldr	r3, [r3, #12]
 8006726:	f003 0303 	and.w	r3, r3, #3
 800672a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800672c:	68bb      	ldr	r3, [r7, #8]
 800672e:	2b02      	cmp	r3, #2
 8006730:	d003      	beq.n	800673a <HAL_RCC_GetSysClockFreq+0xa6>
 8006732:	68bb      	ldr	r3, [r7, #8]
 8006734:	2b03      	cmp	r3, #3
 8006736:	d003      	beq.n	8006740 <HAL_RCC_GetSysClockFreq+0xac>
 8006738:	e005      	b.n	8006746 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800673a:	4b1a      	ldr	r3, [pc, #104]	@ (80067a4 <HAL_RCC_GetSysClockFreq+0x110>)
 800673c:	617b      	str	r3, [r7, #20]
      break;
 800673e:	e005      	b.n	800674c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006740:	4b19      	ldr	r3, [pc, #100]	@ (80067a8 <HAL_RCC_GetSysClockFreq+0x114>)
 8006742:	617b      	str	r3, [r7, #20]
      break;
 8006744:	e002      	b.n	800674c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8006746:	69fb      	ldr	r3, [r7, #28]
 8006748:	617b      	str	r3, [r7, #20]
      break;
 800674a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800674c:	4b13      	ldr	r3, [pc, #76]	@ (800679c <HAL_RCC_GetSysClockFreq+0x108>)
 800674e:	68db      	ldr	r3, [r3, #12]
 8006750:	091b      	lsrs	r3, r3, #4
 8006752:	f003 0307 	and.w	r3, r3, #7
 8006756:	3301      	adds	r3, #1
 8006758:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800675a:	4b10      	ldr	r3, [pc, #64]	@ (800679c <HAL_RCC_GetSysClockFreq+0x108>)
 800675c:	68db      	ldr	r3, [r3, #12]
 800675e:	0a1b      	lsrs	r3, r3, #8
 8006760:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006764:	697a      	ldr	r2, [r7, #20]
 8006766:	fb03 f202 	mul.w	r2, r3, r2
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006770:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006772:	4b0a      	ldr	r3, [pc, #40]	@ (800679c <HAL_RCC_GetSysClockFreq+0x108>)
 8006774:	68db      	ldr	r3, [r3, #12]
 8006776:	0e5b      	lsrs	r3, r3, #25
 8006778:	f003 0303 	and.w	r3, r3, #3
 800677c:	3301      	adds	r3, #1
 800677e:	005b      	lsls	r3, r3, #1
 8006780:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8006782:	697a      	ldr	r2, [r7, #20]
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	fbb2 f3f3 	udiv	r3, r2, r3
 800678a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800678c:	69bb      	ldr	r3, [r7, #24]
}
 800678e:	4618      	mov	r0, r3
 8006790:	3724      	adds	r7, #36	@ 0x24
 8006792:	46bd      	mov	sp, r7
 8006794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006798:	4770      	bx	lr
 800679a:	bf00      	nop
 800679c:	40021000 	.word	0x40021000
 80067a0:	08009bc0 	.word	0x08009bc0
 80067a4:	00f42400 	.word	0x00f42400
 80067a8:	007a1200 	.word	0x007a1200

080067ac <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b086      	sub	sp, #24
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80067b4:	2300      	movs	r3, #0
 80067b6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80067b8:	4b2a      	ldr	r3, [pc, #168]	@ (8006864 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80067ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80067bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d003      	beq.n	80067cc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80067c4:	f7ff f9ee 	bl	8005ba4 <HAL_PWREx_GetVoltageRange>
 80067c8:	6178      	str	r0, [r7, #20]
 80067ca:	e014      	b.n	80067f6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80067cc:	4b25      	ldr	r3, [pc, #148]	@ (8006864 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80067ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80067d0:	4a24      	ldr	r2, [pc, #144]	@ (8006864 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80067d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80067d6:	6593      	str	r3, [r2, #88]	@ 0x58
 80067d8:	4b22      	ldr	r3, [pc, #136]	@ (8006864 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80067da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80067dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80067e0:	60fb      	str	r3, [r7, #12]
 80067e2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80067e4:	f7ff f9de 	bl	8005ba4 <HAL_PWREx_GetVoltageRange>
 80067e8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80067ea:	4b1e      	ldr	r3, [pc, #120]	@ (8006864 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80067ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80067ee:	4a1d      	ldr	r2, [pc, #116]	@ (8006864 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80067f0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80067f4:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80067f6:	697b      	ldr	r3, [r7, #20]
 80067f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80067fc:	d10b      	bne.n	8006816 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2b80      	cmp	r3, #128	@ 0x80
 8006802:	d919      	bls.n	8006838 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2ba0      	cmp	r3, #160	@ 0xa0
 8006808:	d902      	bls.n	8006810 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800680a:	2302      	movs	r3, #2
 800680c:	613b      	str	r3, [r7, #16]
 800680e:	e013      	b.n	8006838 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006810:	2301      	movs	r3, #1
 8006812:	613b      	str	r3, [r7, #16]
 8006814:	e010      	b.n	8006838 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2b80      	cmp	r3, #128	@ 0x80
 800681a:	d902      	bls.n	8006822 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800681c:	2303      	movs	r3, #3
 800681e:	613b      	str	r3, [r7, #16]
 8006820:	e00a      	b.n	8006838 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2b80      	cmp	r3, #128	@ 0x80
 8006826:	d102      	bne.n	800682e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006828:	2302      	movs	r3, #2
 800682a:	613b      	str	r3, [r7, #16]
 800682c:	e004      	b.n	8006838 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2b70      	cmp	r3, #112	@ 0x70
 8006832:	d101      	bne.n	8006838 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006834:	2301      	movs	r3, #1
 8006836:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006838:	4b0b      	ldr	r3, [pc, #44]	@ (8006868 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f023 0207 	bic.w	r2, r3, #7
 8006840:	4909      	ldr	r1, [pc, #36]	@ (8006868 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006842:	693b      	ldr	r3, [r7, #16]
 8006844:	4313      	orrs	r3, r2
 8006846:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006848:	4b07      	ldr	r3, [pc, #28]	@ (8006868 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f003 0307 	and.w	r3, r3, #7
 8006850:	693a      	ldr	r2, [r7, #16]
 8006852:	429a      	cmp	r2, r3
 8006854:	d001      	beq.n	800685a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8006856:	2301      	movs	r3, #1
 8006858:	e000      	b.n	800685c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800685a:	2300      	movs	r3, #0
}
 800685c:	4618      	mov	r0, r3
 800685e:	3718      	adds	r7, #24
 8006860:	46bd      	mov	sp, r7
 8006862:	bd80      	pop	{r7, pc}
 8006864:	40021000 	.word	0x40021000
 8006868:	40022000 	.word	0x40022000

0800686c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800686c:	b580      	push	{r7, lr}
 800686e:	b086      	sub	sp, #24
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006874:	2300      	movs	r3, #0
 8006876:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006878:	2300      	movs	r3, #0
 800687a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006884:	2b00      	cmp	r3, #0
 8006886:	d031      	beq.n	80068ec <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800688c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8006890:	d01a      	beq.n	80068c8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8006892:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8006896:	d814      	bhi.n	80068c2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006898:	2b00      	cmp	r3, #0
 800689a:	d009      	beq.n	80068b0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800689c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80068a0:	d10f      	bne.n	80068c2 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80068a2:	4b5d      	ldr	r3, [pc, #372]	@ (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80068a4:	68db      	ldr	r3, [r3, #12]
 80068a6:	4a5c      	ldr	r2, [pc, #368]	@ (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80068a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80068ac:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80068ae:	e00c      	b.n	80068ca <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	3304      	adds	r3, #4
 80068b4:	2100      	movs	r1, #0
 80068b6:	4618      	mov	r0, r3
 80068b8:	f000 f9de 	bl	8006c78 <RCCEx_PLLSAI1_Config>
 80068bc:	4603      	mov	r3, r0
 80068be:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80068c0:	e003      	b.n	80068ca <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80068c2:	2301      	movs	r3, #1
 80068c4:	74fb      	strb	r3, [r7, #19]
      break;
 80068c6:	e000      	b.n	80068ca <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80068c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80068ca:	7cfb      	ldrb	r3, [r7, #19]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d10b      	bne.n	80068e8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80068d0:	4b51      	ldr	r3, [pc, #324]	@ (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80068d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80068d6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068de:	494e      	ldr	r1, [pc, #312]	@ (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80068e0:	4313      	orrs	r3, r2
 80068e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80068e6:	e001      	b.n	80068ec <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068e8:	7cfb      	ldrb	r3, [r7, #19]
 80068ea:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	f000 809e 	beq.w	8006a36 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80068fa:	2300      	movs	r3, #0
 80068fc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80068fe:	4b46      	ldr	r3, [pc, #280]	@ (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006900:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006902:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006906:	2b00      	cmp	r3, #0
 8006908:	d101      	bne.n	800690e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800690a:	2301      	movs	r3, #1
 800690c:	e000      	b.n	8006910 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800690e:	2300      	movs	r3, #0
 8006910:	2b00      	cmp	r3, #0
 8006912:	d00d      	beq.n	8006930 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006914:	4b40      	ldr	r3, [pc, #256]	@ (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006916:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006918:	4a3f      	ldr	r2, [pc, #252]	@ (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800691a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800691e:	6593      	str	r3, [r2, #88]	@ 0x58
 8006920:	4b3d      	ldr	r3, [pc, #244]	@ (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006922:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006924:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006928:	60bb      	str	r3, [r7, #8]
 800692a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800692c:	2301      	movs	r3, #1
 800692e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006930:	4b3a      	ldr	r3, [pc, #232]	@ (8006a1c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	4a39      	ldr	r2, [pc, #228]	@ (8006a1c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8006936:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800693a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800693c:	f7fd fd8e 	bl	800445c <HAL_GetTick>
 8006940:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006942:	e009      	b.n	8006958 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006944:	f7fd fd8a 	bl	800445c <HAL_GetTick>
 8006948:	4602      	mov	r2, r0
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	1ad3      	subs	r3, r2, r3
 800694e:	2b02      	cmp	r3, #2
 8006950:	d902      	bls.n	8006958 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8006952:	2303      	movs	r3, #3
 8006954:	74fb      	strb	r3, [r7, #19]
        break;
 8006956:	e005      	b.n	8006964 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006958:	4b30      	ldr	r3, [pc, #192]	@ (8006a1c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006960:	2b00      	cmp	r3, #0
 8006962:	d0ef      	beq.n	8006944 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8006964:	7cfb      	ldrb	r3, [r7, #19]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d15a      	bne.n	8006a20 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800696a:	4b2b      	ldr	r3, [pc, #172]	@ (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800696c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006970:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006974:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006976:	697b      	ldr	r3, [r7, #20]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d01e      	beq.n	80069ba <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006980:	697a      	ldr	r2, [r7, #20]
 8006982:	429a      	cmp	r2, r3
 8006984:	d019      	beq.n	80069ba <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006986:	4b24      	ldr	r3, [pc, #144]	@ (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006988:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800698c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006990:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006992:	4b21      	ldr	r3, [pc, #132]	@ (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006994:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006998:	4a1f      	ldr	r2, [pc, #124]	@ (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800699a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800699e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80069a2:	4b1d      	ldr	r3, [pc, #116]	@ (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80069a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80069a8:	4a1b      	ldr	r2, [pc, #108]	@ (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80069aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80069ae:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80069b2:	4a19      	ldr	r2, [pc, #100]	@ (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80069b4:	697b      	ldr	r3, [r7, #20]
 80069b6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80069ba:	697b      	ldr	r3, [r7, #20]
 80069bc:	f003 0301 	and.w	r3, r3, #1
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d016      	beq.n	80069f2 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069c4:	f7fd fd4a 	bl	800445c <HAL_GetTick>
 80069c8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80069ca:	e00b      	b.n	80069e4 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80069cc:	f7fd fd46 	bl	800445c <HAL_GetTick>
 80069d0:	4602      	mov	r2, r0
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	1ad3      	subs	r3, r2, r3
 80069d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80069da:	4293      	cmp	r3, r2
 80069dc:	d902      	bls.n	80069e4 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80069de:	2303      	movs	r3, #3
 80069e0:	74fb      	strb	r3, [r7, #19]
            break;
 80069e2:	e006      	b.n	80069f2 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80069e4:	4b0c      	ldr	r3, [pc, #48]	@ (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80069e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80069ea:	f003 0302 	and.w	r3, r3, #2
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d0ec      	beq.n	80069cc <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80069f2:	7cfb      	ldrb	r3, [r7, #19]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d10b      	bne.n	8006a10 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80069f8:	4b07      	ldr	r3, [pc, #28]	@ (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80069fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80069fe:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a06:	4904      	ldr	r1, [pc, #16]	@ (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006a08:	4313      	orrs	r3, r2
 8006a0a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8006a0e:	e009      	b.n	8006a24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006a10:	7cfb      	ldrb	r3, [r7, #19]
 8006a12:	74bb      	strb	r3, [r7, #18]
 8006a14:	e006      	b.n	8006a24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8006a16:	bf00      	nop
 8006a18:	40021000 	.word	0x40021000
 8006a1c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a20:	7cfb      	ldrb	r3, [r7, #19]
 8006a22:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006a24:	7c7b      	ldrb	r3, [r7, #17]
 8006a26:	2b01      	cmp	r3, #1
 8006a28:	d105      	bne.n	8006a36 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006a2a:	4b8a      	ldr	r3, [pc, #552]	@ (8006c54 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006a2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a2e:	4a89      	ldr	r2, [pc, #548]	@ (8006c54 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006a30:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006a34:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f003 0301 	and.w	r3, r3, #1
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d00a      	beq.n	8006a58 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006a42:	4b84      	ldr	r3, [pc, #528]	@ (8006c54 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006a44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a48:	f023 0203 	bic.w	r2, r3, #3
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	6a1b      	ldr	r3, [r3, #32]
 8006a50:	4980      	ldr	r1, [pc, #512]	@ (8006c54 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006a52:	4313      	orrs	r3, r2
 8006a54:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f003 0302 	and.w	r3, r3, #2
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d00a      	beq.n	8006a7a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006a64:	4b7b      	ldr	r3, [pc, #492]	@ (8006c54 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006a66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a6a:	f023 020c 	bic.w	r2, r3, #12
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a72:	4978      	ldr	r1, [pc, #480]	@ (8006c54 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006a74:	4313      	orrs	r3, r2
 8006a76:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f003 0320 	and.w	r3, r3, #32
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d00a      	beq.n	8006a9c <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006a86:	4b73      	ldr	r3, [pc, #460]	@ (8006c54 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006a88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a8c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a94:	496f      	ldr	r1, [pc, #444]	@ (8006c54 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006a96:	4313      	orrs	r3, r2
 8006a98:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d00a      	beq.n	8006abe <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006aa8:	4b6a      	ldr	r3, [pc, #424]	@ (8006c54 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006aaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006aae:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ab6:	4967      	ldr	r1, [pc, #412]	@ (8006c54 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006ab8:	4313      	orrs	r3, r2
 8006aba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d00a      	beq.n	8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006aca:	4b62      	ldr	r3, [pc, #392]	@ (8006c54 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006acc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ad0:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ad8:	495e      	ldr	r1, [pc, #376]	@ (8006c54 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006ada:	4313      	orrs	r3, r2
 8006adc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d00a      	beq.n	8006b02 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006aec:	4b59      	ldr	r3, [pc, #356]	@ (8006c54 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006aee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006af2:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006afa:	4956      	ldr	r1, [pc, #344]	@ (8006c54 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006afc:	4313      	orrs	r3, r2
 8006afe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d00a      	beq.n	8006b24 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006b0e:	4b51      	ldr	r3, [pc, #324]	@ (8006c54 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006b10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b14:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b1c:	494d      	ldr	r1, [pc, #308]	@ (8006c54 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006b1e:	4313      	orrs	r3, r2
 8006b20:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d028      	beq.n	8006b82 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006b30:	4b48      	ldr	r3, [pc, #288]	@ (8006c54 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006b32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b36:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b3e:	4945      	ldr	r1, [pc, #276]	@ (8006c54 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006b40:	4313      	orrs	r3, r2
 8006b42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b4a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006b4e:	d106      	bne.n	8006b5e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006b50:	4b40      	ldr	r3, [pc, #256]	@ (8006c54 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006b52:	68db      	ldr	r3, [r3, #12]
 8006b54:	4a3f      	ldr	r2, [pc, #252]	@ (8006c54 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006b56:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006b5a:	60d3      	str	r3, [r2, #12]
 8006b5c:	e011      	b.n	8006b82 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b62:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006b66:	d10c      	bne.n	8006b82 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	3304      	adds	r3, #4
 8006b6c:	2101      	movs	r1, #1
 8006b6e:	4618      	mov	r0, r3
 8006b70:	f000 f882 	bl	8006c78 <RCCEx_PLLSAI1_Config>
 8006b74:	4603      	mov	r3, r0
 8006b76:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006b78:	7cfb      	ldrb	r3, [r7, #19]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d001      	beq.n	8006b82 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8006b7e:	7cfb      	ldrb	r3, [r7, #19]
 8006b80:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d028      	beq.n	8006be0 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006b8e:	4b31      	ldr	r3, [pc, #196]	@ (8006c54 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006b90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b94:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b9c:	492d      	ldr	r1, [pc, #180]	@ (8006c54 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006b9e:	4313      	orrs	r3, r2
 8006ba0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ba8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006bac:	d106      	bne.n	8006bbc <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006bae:	4b29      	ldr	r3, [pc, #164]	@ (8006c54 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006bb0:	68db      	ldr	r3, [r3, #12]
 8006bb2:	4a28      	ldr	r2, [pc, #160]	@ (8006c54 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006bb4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006bb8:	60d3      	str	r3, [r2, #12]
 8006bba:	e011      	b.n	8006be0 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006bc0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006bc4:	d10c      	bne.n	8006be0 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	3304      	adds	r3, #4
 8006bca:	2101      	movs	r1, #1
 8006bcc:	4618      	mov	r0, r3
 8006bce:	f000 f853 	bl	8006c78 <RCCEx_PLLSAI1_Config>
 8006bd2:	4603      	mov	r3, r0
 8006bd4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006bd6:	7cfb      	ldrb	r3, [r7, #19]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d001      	beq.n	8006be0 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8006bdc:	7cfb      	ldrb	r3, [r7, #19]
 8006bde:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d01c      	beq.n	8006c26 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006bec:	4b19      	ldr	r3, [pc, #100]	@ (8006c54 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006bee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006bf2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006bfa:	4916      	ldr	r1, [pc, #88]	@ (8006c54 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006bfc:	4313      	orrs	r3, r2
 8006bfe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006c06:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006c0a:	d10c      	bne.n	8006c26 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	3304      	adds	r3, #4
 8006c10:	2102      	movs	r1, #2
 8006c12:	4618      	mov	r0, r3
 8006c14:	f000 f830 	bl	8006c78 <RCCEx_PLLSAI1_Config>
 8006c18:	4603      	mov	r3, r0
 8006c1a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006c1c:	7cfb      	ldrb	r3, [r7, #19]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d001      	beq.n	8006c26 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8006c22:	7cfb      	ldrb	r3, [r7, #19]
 8006c24:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d00a      	beq.n	8006c48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006c32:	4b08      	ldr	r3, [pc, #32]	@ (8006c54 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006c34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c38:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006c40:	4904      	ldr	r1, [pc, #16]	@ (8006c54 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006c42:	4313      	orrs	r3, r2
 8006c44:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006c48:	7cbb      	ldrb	r3, [r7, #18]
}
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	3718      	adds	r7, #24
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	bd80      	pop	{r7, pc}
 8006c52:	bf00      	nop
 8006c54:	40021000 	.word	0x40021000

08006c58 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8006c58:	b480      	push	{r7}
 8006c5a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8006c5c:	4b05      	ldr	r3, [pc, #20]	@ (8006c74 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	4a04      	ldr	r2, [pc, #16]	@ (8006c74 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8006c62:	f043 0304 	orr.w	r3, r3, #4
 8006c66:	6013      	str	r3, [r2, #0]
}
 8006c68:	bf00      	nop
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c70:	4770      	bx	lr
 8006c72:	bf00      	nop
 8006c74:	40021000 	.word	0x40021000

08006c78 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b084      	sub	sp, #16
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
 8006c80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006c82:	2300      	movs	r3, #0
 8006c84:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006c86:	4b74      	ldr	r3, [pc, #464]	@ (8006e58 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006c88:	68db      	ldr	r3, [r3, #12]
 8006c8a:	f003 0303 	and.w	r3, r3, #3
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d018      	beq.n	8006cc4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006c92:	4b71      	ldr	r3, [pc, #452]	@ (8006e58 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006c94:	68db      	ldr	r3, [r3, #12]
 8006c96:	f003 0203 	and.w	r2, r3, #3
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	429a      	cmp	r2, r3
 8006ca0:	d10d      	bne.n	8006cbe <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
       ||
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d009      	beq.n	8006cbe <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8006caa:	4b6b      	ldr	r3, [pc, #428]	@ (8006e58 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006cac:	68db      	ldr	r3, [r3, #12]
 8006cae:	091b      	lsrs	r3, r3, #4
 8006cb0:	f003 0307 	and.w	r3, r3, #7
 8006cb4:	1c5a      	adds	r2, r3, #1
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	685b      	ldr	r3, [r3, #4]
       ||
 8006cba:	429a      	cmp	r2, r3
 8006cbc:	d047      	beq.n	8006d4e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006cbe:	2301      	movs	r3, #1
 8006cc0:	73fb      	strb	r3, [r7, #15]
 8006cc2:	e044      	b.n	8006d4e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	2b03      	cmp	r3, #3
 8006cca:	d018      	beq.n	8006cfe <RCCEx_PLLSAI1_Config+0x86>
 8006ccc:	2b03      	cmp	r3, #3
 8006cce:	d825      	bhi.n	8006d1c <RCCEx_PLLSAI1_Config+0xa4>
 8006cd0:	2b01      	cmp	r3, #1
 8006cd2:	d002      	beq.n	8006cda <RCCEx_PLLSAI1_Config+0x62>
 8006cd4:	2b02      	cmp	r3, #2
 8006cd6:	d009      	beq.n	8006cec <RCCEx_PLLSAI1_Config+0x74>
 8006cd8:	e020      	b.n	8006d1c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006cda:	4b5f      	ldr	r3, [pc, #380]	@ (8006e58 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f003 0302 	and.w	r3, r3, #2
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d11d      	bne.n	8006d22 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8006ce6:	2301      	movs	r3, #1
 8006ce8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006cea:	e01a      	b.n	8006d22 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006cec:	4b5a      	ldr	r3, [pc, #360]	@ (8006e58 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d116      	bne.n	8006d26 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8006cf8:	2301      	movs	r3, #1
 8006cfa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006cfc:	e013      	b.n	8006d26 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006cfe:	4b56      	ldr	r3, [pc, #344]	@ (8006e58 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d10f      	bne.n	8006d2a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006d0a:	4b53      	ldr	r3, [pc, #332]	@ (8006e58 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d109      	bne.n	8006d2a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8006d16:	2301      	movs	r3, #1
 8006d18:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006d1a:	e006      	b.n	8006d2a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006d1c:	2301      	movs	r3, #1
 8006d1e:	73fb      	strb	r3, [r7, #15]
      break;
 8006d20:	e004      	b.n	8006d2c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006d22:	bf00      	nop
 8006d24:	e002      	b.n	8006d2c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006d26:	bf00      	nop
 8006d28:	e000      	b.n	8006d2c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006d2a:	bf00      	nop
    }

    if(status == HAL_OK)
 8006d2c:	7bfb      	ldrb	r3, [r7, #15]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d10d      	bne.n	8006d4e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006d32:	4b49      	ldr	r3, [pc, #292]	@ (8006e58 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006d34:	68db      	ldr	r3, [r3, #12]
 8006d36:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6819      	ldr	r1, [r3, #0]
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	685b      	ldr	r3, [r3, #4]
 8006d42:	3b01      	subs	r3, #1
 8006d44:	011b      	lsls	r3, r3, #4
 8006d46:	430b      	orrs	r3, r1
 8006d48:	4943      	ldr	r1, [pc, #268]	@ (8006e58 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006d4a:	4313      	orrs	r3, r2
 8006d4c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006d4e:	7bfb      	ldrb	r3, [r7, #15]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d17c      	bne.n	8006e4e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006d54:	4b40      	ldr	r3, [pc, #256]	@ (8006e58 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	4a3f      	ldr	r2, [pc, #252]	@ (8006e58 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006d5a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006d5e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006d60:	f7fd fb7c 	bl	800445c <HAL_GetTick>
 8006d64:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006d66:	e009      	b.n	8006d7c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006d68:	f7fd fb78 	bl	800445c <HAL_GetTick>
 8006d6c:	4602      	mov	r2, r0
 8006d6e:	68bb      	ldr	r3, [r7, #8]
 8006d70:	1ad3      	subs	r3, r2, r3
 8006d72:	2b02      	cmp	r3, #2
 8006d74:	d902      	bls.n	8006d7c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006d76:	2303      	movs	r3, #3
 8006d78:	73fb      	strb	r3, [r7, #15]
        break;
 8006d7a:	e005      	b.n	8006d88 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006d7c:	4b36      	ldr	r3, [pc, #216]	@ (8006e58 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d1ef      	bne.n	8006d68 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006d88:	7bfb      	ldrb	r3, [r7, #15]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d15f      	bne.n	8006e4e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d110      	bne.n	8006db6 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006d94:	4b30      	ldr	r3, [pc, #192]	@ (8006e58 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006d96:	691b      	ldr	r3, [r3, #16]
 8006d98:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8006d9c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8006da0:	687a      	ldr	r2, [r7, #4]
 8006da2:	6892      	ldr	r2, [r2, #8]
 8006da4:	0211      	lsls	r1, r2, #8
 8006da6:	687a      	ldr	r2, [r7, #4]
 8006da8:	68d2      	ldr	r2, [r2, #12]
 8006daa:	06d2      	lsls	r2, r2, #27
 8006dac:	430a      	orrs	r2, r1
 8006dae:	492a      	ldr	r1, [pc, #168]	@ (8006e58 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006db0:	4313      	orrs	r3, r2
 8006db2:	610b      	str	r3, [r1, #16]
 8006db4:	e027      	b.n	8006e06 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	2b01      	cmp	r3, #1
 8006dba:	d112      	bne.n	8006de2 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006dbc:	4b26      	ldr	r3, [pc, #152]	@ (8006e58 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006dbe:	691b      	ldr	r3, [r3, #16]
 8006dc0:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8006dc4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8006dc8:	687a      	ldr	r2, [r7, #4]
 8006dca:	6892      	ldr	r2, [r2, #8]
 8006dcc:	0211      	lsls	r1, r2, #8
 8006dce:	687a      	ldr	r2, [r7, #4]
 8006dd0:	6912      	ldr	r2, [r2, #16]
 8006dd2:	0852      	lsrs	r2, r2, #1
 8006dd4:	3a01      	subs	r2, #1
 8006dd6:	0552      	lsls	r2, r2, #21
 8006dd8:	430a      	orrs	r2, r1
 8006dda:	491f      	ldr	r1, [pc, #124]	@ (8006e58 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006ddc:	4313      	orrs	r3, r2
 8006dde:	610b      	str	r3, [r1, #16]
 8006de0:	e011      	b.n	8006e06 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006de2:	4b1d      	ldr	r3, [pc, #116]	@ (8006e58 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006de4:	691b      	ldr	r3, [r3, #16]
 8006de6:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8006dea:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8006dee:	687a      	ldr	r2, [r7, #4]
 8006df0:	6892      	ldr	r2, [r2, #8]
 8006df2:	0211      	lsls	r1, r2, #8
 8006df4:	687a      	ldr	r2, [r7, #4]
 8006df6:	6952      	ldr	r2, [r2, #20]
 8006df8:	0852      	lsrs	r2, r2, #1
 8006dfa:	3a01      	subs	r2, #1
 8006dfc:	0652      	lsls	r2, r2, #25
 8006dfe:	430a      	orrs	r2, r1
 8006e00:	4915      	ldr	r1, [pc, #84]	@ (8006e58 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006e02:	4313      	orrs	r3, r2
 8006e04:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006e06:	4b14      	ldr	r3, [pc, #80]	@ (8006e58 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	4a13      	ldr	r2, [pc, #76]	@ (8006e58 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006e0c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006e10:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e12:	f7fd fb23 	bl	800445c <HAL_GetTick>
 8006e16:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006e18:	e009      	b.n	8006e2e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006e1a:	f7fd fb1f 	bl	800445c <HAL_GetTick>
 8006e1e:	4602      	mov	r2, r0
 8006e20:	68bb      	ldr	r3, [r7, #8]
 8006e22:	1ad3      	subs	r3, r2, r3
 8006e24:	2b02      	cmp	r3, #2
 8006e26:	d902      	bls.n	8006e2e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8006e28:	2303      	movs	r3, #3
 8006e2a:	73fb      	strb	r3, [r7, #15]
          break;
 8006e2c:	e005      	b.n	8006e3a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006e2e:	4b0a      	ldr	r3, [pc, #40]	@ (8006e58 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d0ef      	beq.n	8006e1a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8006e3a:	7bfb      	ldrb	r3, [r7, #15]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d106      	bne.n	8006e4e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006e40:	4b05      	ldr	r3, [pc, #20]	@ (8006e58 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006e42:	691a      	ldr	r2, [r3, #16]
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	699b      	ldr	r3, [r3, #24]
 8006e48:	4903      	ldr	r1, [pc, #12]	@ (8006e58 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006e4a:	4313      	orrs	r3, r2
 8006e4c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006e4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e50:	4618      	mov	r0, r3
 8006e52:	3710      	adds	r7, #16
 8006e54:	46bd      	mov	sp, r7
 8006e56:	bd80      	pop	{r7, pc}
 8006e58:	40021000 	.word	0x40021000

08006e5c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b084      	sub	sp, #16
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d101      	bne.n	8006e6e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006e6a:	2301      	movs	r3, #1
 8006e6c:	e095      	b.n	8006f9a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d108      	bne.n	8006e88 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	685b      	ldr	r3, [r3, #4]
 8006e7a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006e7e:	d009      	beq.n	8006e94 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2200      	movs	r2, #0
 8006e84:	61da      	str	r2, [r3, #28]
 8006e86:	e005      	b.n	8006e94 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	2200      	movs	r2, #0
 8006e92:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2200      	movs	r2, #0
 8006e98:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006ea0:	b2db      	uxtb	r3, r3
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d106      	bne.n	8006eb4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006eae:	6878      	ldr	r0, [r7, #4]
 8006eb0:	f7fd f8f8 	bl	80040a4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2202      	movs	r2, #2
 8006eb8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	681a      	ldr	r2, [r3, #0]
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006eca:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	68db      	ldr	r3, [r3, #12]
 8006ed0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006ed4:	d902      	bls.n	8006edc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	60fb      	str	r3, [r7, #12]
 8006eda:	e002      	b.n	8006ee2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006edc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006ee0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	68db      	ldr	r3, [r3, #12]
 8006ee6:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8006eea:	d007      	beq.n	8006efc <HAL_SPI_Init+0xa0>
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	68db      	ldr	r3, [r3, #12]
 8006ef0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006ef4:	d002      	beq.n	8006efc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	2200      	movs	r2, #0
 8006efa:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	685b      	ldr	r3, [r3, #4]
 8006f00:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	689b      	ldr	r3, [r3, #8]
 8006f08:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006f0c:	431a      	orrs	r2, r3
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	691b      	ldr	r3, [r3, #16]
 8006f12:	f003 0302 	and.w	r3, r3, #2
 8006f16:	431a      	orrs	r2, r3
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	695b      	ldr	r3, [r3, #20]
 8006f1c:	f003 0301 	and.w	r3, r3, #1
 8006f20:	431a      	orrs	r2, r3
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	699b      	ldr	r3, [r3, #24]
 8006f26:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006f2a:	431a      	orrs	r2, r3
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	69db      	ldr	r3, [r3, #28]
 8006f30:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006f34:	431a      	orrs	r2, r3
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6a1b      	ldr	r3, [r3, #32]
 8006f3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f3e:	ea42 0103 	orr.w	r1, r2, r3
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f46:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	430a      	orrs	r2, r1
 8006f50:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	699b      	ldr	r3, [r3, #24]
 8006f56:	0c1b      	lsrs	r3, r3, #16
 8006f58:	f003 0204 	and.w	r2, r3, #4
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f60:	f003 0310 	and.w	r3, r3, #16
 8006f64:	431a      	orrs	r2, r3
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f6a:	f003 0308 	and.w	r3, r3, #8
 8006f6e:	431a      	orrs	r2, r3
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	68db      	ldr	r3, [r3, #12]
 8006f74:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8006f78:	ea42 0103 	orr.w	r1, r2, r3
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	430a      	orrs	r2, r1
 8006f88:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2201      	movs	r2, #1
 8006f94:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8006f98:	2300      	movs	r3, #0
}
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	3710      	adds	r7, #16
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	bd80      	pop	{r7, pc}

08006fa2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006fa2:	b580      	push	{r7, lr}
 8006fa4:	b088      	sub	sp, #32
 8006fa6:	af00      	add	r7, sp, #0
 8006fa8:	60f8      	str	r0, [r7, #12]
 8006faa:	60b9      	str	r1, [r7, #8]
 8006fac:	603b      	str	r3, [r7, #0]
 8006fae:	4613      	mov	r3, r2
 8006fb0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006fbc:	2b01      	cmp	r3, #1
 8006fbe:	d101      	bne.n	8006fc4 <HAL_SPI_Transmit+0x22>
 8006fc0:	2302      	movs	r3, #2
 8006fc2:	e158      	b.n	8007276 <HAL_SPI_Transmit+0x2d4>
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	2201      	movs	r2, #1
 8006fc8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006fcc:	f7fd fa46 	bl	800445c <HAL_GetTick>
 8006fd0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006fd2:	88fb      	ldrh	r3, [r7, #6]
 8006fd4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006fdc:	b2db      	uxtb	r3, r3
 8006fde:	2b01      	cmp	r3, #1
 8006fe0:	d002      	beq.n	8006fe8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006fe2:	2302      	movs	r3, #2
 8006fe4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006fe6:	e13d      	b.n	8007264 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8006fe8:	68bb      	ldr	r3, [r7, #8]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d002      	beq.n	8006ff4 <HAL_SPI_Transmit+0x52>
 8006fee:	88fb      	ldrh	r3, [r7, #6]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d102      	bne.n	8006ffa <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006ff4:	2301      	movs	r3, #1
 8006ff6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006ff8:	e134      	b.n	8007264 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	2203      	movs	r2, #3
 8006ffe:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	2200      	movs	r2, #0
 8007006:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	68ba      	ldr	r2, [r7, #8]
 800700c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	88fa      	ldrh	r2, [r7, #6]
 8007012:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	88fa      	ldrh	r2, [r7, #6]
 8007018:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	2200      	movs	r2, #0
 800701e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	2200      	movs	r2, #0
 8007024:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	2200      	movs	r2, #0
 800702c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	2200      	movs	r2, #0
 8007034:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	2200      	movs	r2, #0
 800703a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	689b      	ldr	r3, [r3, #8]
 8007040:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007044:	d10f      	bne.n	8007066 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	681a      	ldr	r2, [r3, #0]
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007054:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	681a      	ldr	r2, [r3, #0]
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007064:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007070:	2b40      	cmp	r3, #64	@ 0x40
 8007072:	d007      	beq.n	8007084 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	681a      	ldr	r2, [r3, #0]
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007082:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	68db      	ldr	r3, [r3, #12]
 8007088:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800708c:	d94b      	bls.n	8007126 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	685b      	ldr	r3, [r3, #4]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d002      	beq.n	800709c <HAL_SPI_Transmit+0xfa>
 8007096:	8afb      	ldrh	r3, [r7, #22]
 8007098:	2b01      	cmp	r3, #1
 800709a:	d13e      	bne.n	800711a <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070a0:	881a      	ldrh	r2, [r3, #0]
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070ac:	1c9a      	adds	r2, r3, #2
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80070b6:	b29b      	uxth	r3, r3
 80070b8:	3b01      	subs	r3, #1
 80070ba:	b29a      	uxth	r2, r3
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80070c0:	e02b      	b.n	800711a <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	689b      	ldr	r3, [r3, #8]
 80070c8:	f003 0302 	and.w	r3, r3, #2
 80070cc:	2b02      	cmp	r3, #2
 80070ce:	d112      	bne.n	80070f6 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070d4:	881a      	ldrh	r2, [r3, #0]
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070e0:	1c9a      	adds	r2, r3, #2
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80070ea:	b29b      	uxth	r3, r3
 80070ec:	3b01      	subs	r3, #1
 80070ee:	b29a      	uxth	r2, r3
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80070f4:	e011      	b.n	800711a <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80070f6:	f7fd f9b1 	bl	800445c <HAL_GetTick>
 80070fa:	4602      	mov	r2, r0
 80070fc:	69bb      	ldr	r3, [r7, #24]
 80070fe:	1ad3      	subs	r3, r2, r3
 8007100:	683a      	ldr	r2, [r7, #0]
 8007102:	429a      	cmp	r2, r3
 8007104:	d803      	bhi.n	800710e <HAL_SPI_Transmit+0x16c>
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	f1b3 3fff 	cmp.w	r3, #4294967295
 800710c:	d102      	bne.n	8007114 <HAL_SPI_Transmit+0x172>
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d102      	bne.n	800711a <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8007114:	2303      	movs	r3, #3
 8007116:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007118:	e0a4      	b.n	8007264 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800711e:	b29b      	uxth	r3, r3
 8007120:	2b00      	cmp	r3, #0
 8007122:	d1ce      	bne.n	80070c2 <HAL_SPI_Transmit+0x120>
 8007124:	e07c      	b.n	8007220 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	685b      	ldr	r3, [r3, #4]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d002      	beq.n	8007134 <HAL_SPI_Transmit+0x192>
 800712e:	8afb      	ldrh	r3, [r7, #22]
 8007130:	2b01      	cmp	r3, #1
 8007132:	d170      	bne.n	8007216 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007138:	b29b      	uxth	r3, r3
 800713a:	2b01      	cmp	r3, #1
 800713c:	d912      	bls.n	8007164 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007142:	881a      	ldrh	r2, [r3, #0]
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800714e:	1c9a      	adds	r2, r3, #2
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007158:	b29b      	uxth	r3, r3
 800715a:	3b02      	subs	r3, #2
 800715c:	b29a      	uxth	r2, r3
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007162:	e058      	b.n	8007216 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	330c      	adds	r3, #12
 800716e:	7812      	ldrb	r2, [r2, #0]
 8007170:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007176:	1c5a      	adds	r2, r3, #1
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007180:	b29b      	uxth	r3, r3
 8007182:	3b01      	subs	r3, #1
 8007184:	b29a      	uxth	r2, r3
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800718a:	e044      	b.n	8007216 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	689b      	ldr	r3, [r3, #8]
 8007192:	f003 0302 	and.w	r3, r3, #2
 8007196:	2b02      	cmp	r3, #2
 8007198:	d12b      	bne.n	80071f2 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800719e:	b29b      	uxth	r3, r3
 80071a0:	2b01      	cmp	r3, #1
 80071a2:	d912      	bls.n	80071ca <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071a8:	881a      	ldrh	r2, [r3, #0]
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071b4:	1c9a      	adds	r2, r3, #2
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80071be:	b29b      	uxth	r3, r3
 80071c0:	3b02      	subs	r3, #2
 80071c2:	b29a      	uxth	r2, r3
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80071c8:	e025      	b.n	8007216 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	330c      	adds	r3, #12
 80071d4:	7812      	ldrb	r2, [r2, #0]
 80071d6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071dc:	1c5a      	adds	r2, r3, #1
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80071e6:	b29b      	uxth	r3, r3
 80071e8:	3b01      	subs	r3, #1
 80071ea:	b29a      	uxth	r2, r3
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80071f0:	e011      	b.n	8007216 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80071f2:	f7fd f933 	bl	800445c <HAL_GetTick>
 80071f6:	4602      	mov	r2, r0
 80071f8:	69bb      	ldr	r3, [r7, #24]
 80071fa:	1ad3      	subs	r3, r2, r3
 80071fc:	683a      	ldr	r2, [r7, #0]
 80071fe:	429a      	cmp	r2, r3
 8007200:	d803      	bhi.n	800720a <HAL_SPI_Transmit+0x268>
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007208:	d102      	bne.n	8007210 <HAL_SPI_Transmit+0x26e>
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d102      	bne.n	8007216 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8007210:	2303      	movs	r3, #3
 8007212:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007214:	e026      	b.n	8007264 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800721a:	b29b      	uxth	r3, r3
 800721c:	2b00      	cmp	r3, #0
 800721e:	d1b5      	bne.n	800718c <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007220:	69ba      	ldr	r2, [r7, #24]
 8007222:	6839      	ldr	r1, [r7, #0]
 8007224:	68f8      	ldr	r0, [r7, #12]
 8007226:	f000 f949 	bl	80074bc <SPI_EndRxTxTransaction>
 800722a:	4603      	mov	r3, r0
 800722c:	2b00      	cmp	r3, #0
 800722e:	d002      	beq.n	8007236 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	2220      	movs	r2, #32
 8007234:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	689b      	ldr	r3, [r3, #8]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d10a      	bne.n	8007254 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800723e:	2300      	movs	r3, #0
 8007240:	613b      	str	r3, [r7, #16]
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	68db      	ldr	r3, [r3, #12]
 8007248:	613b      	str	r3, [r7, #16]
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	689b      	ldr	r3, [r3, #8]
 8007250:	613b      	str	r3, [r7, #16]
 8007252:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007258:	2b00      	cmp	r3, #0
 800725a:	d002      	beq.n	8007262 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 800725c:	2301      	movs	r3, #1
 800725e:	77fb      	strb	r3, [r7, #31]
 8007260:	e000      	b.n	8007264 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8007262:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	2201      	movs	r2, #1
 8007268:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	2200      	movs	r2, #0
 8007270:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8007274:	7ffb      	ldrb	r3, [r7, #31]
}
 8007276:	4618      	mov	r0, r3
 8007278:	3720      	adds	r7, #32
 800727a:	46bd      	mov	sp, r7
 800727c:	bd80      	pop	{r7, pc}
	...

08007280 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b088      	sub	sp, #32
 8007284:	af00      	add	r7, sp, #0
 8007286:	60f8      	str	r0, [r7, #12]
 8007288:	60b9      	str	r1, [r7, #8]
 800728a:	603b      	str	r3, [r7, #0]
 800728c:	4613      	mov	r3, r2
 800728e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007290:	f7fd f8e4 	bl	800445c <HAL_GetTick>
 8007294:	4602      	mov	r2, r0
 8007296:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007298:	1a9b      	subs	r3, r3, r2
 800729a:	683a      	ldr	r2, [r7, #0]
 800729c:	4413      	add	r3, r2
 800729e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80072a0:	f7fd f8dc 	bl	800445c <HAL_GetTick>
 80072a4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80072a6:	4b39      	ldr	r3, [pc, #228]	@ (800738c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	015b      	lsls	r3, r3, #5
 80072ac:	0d1b      	lsrs	r3, r3, #20
 80072ae:	69fa      	ldr	r2, [r7, #28]
 80072b0:	fb02 f303 	mul.w	r3, r2, r3
 80072b4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80072b6:	e054      	b.n	8007362 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072be:	d050      	beq.n	8007362 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80072c0:	f7fd f8cc 	bl	800445c <HAL_GetTick>
 80072c4:	4602      	mov	r2, r0
 80072c6:	69bb      	ldr	r3, [r7, #24]
 80072c8:	1ad3      	subs	r3, r2, r3
 80072ca:	69fa      	ldr	r2, [r7, #28]
 80072cc:	429a      	cmp	r2, r3
 80072ce:	d902      	bls.n	80072d6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80072d0:	69fb      	ldr	r3, [r7, #28]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d13d      	bne.n	8007352 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	685a      	ldr	r2, [r3, #4]
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80072e4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	685b      	ldr	r3, [r3, #4]
 80072ea:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80072ee:	d111      	bne.n	8007314 <SPI_WaitFlagStateUntilTimeout+0x94>
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	689b      	ldr	r3, [r3, #8]
 80072f4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80072f8:	d004      	beq.n	8007304 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	689b      	ldr	r3, [r3, #8]
 80072fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007302:	d107      	bne.n	8007314 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	681a      	ldr	r2, [r3, #0]
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007312:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007318:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800731c:	d10f      	bne.n	800733e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	681a      	ldr	r2, [r3, #0]
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800732c:	601a      	str	r2, [r3, #0]
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	681a      	ldr	r2, [r3, #0]
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800733c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	2201      	movs	r2, #1
 8007342:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	2200      	movs	r2, #0
 800734a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800734e:	2303      	movs	r3, #3
 8007350:	e017      	b.n	8007382 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007352:	697b      	ldr	r3, [r7, #20]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d101      	bne.n	800735c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007358:	2300      	movs	r3, #0
 800735a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800735c:	697b      	ldr	r3, [r7, #20]
 800735e:	3b01      	subs	r3, #1
 8007360:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	689a      	ldr	r2, [r3, #8]
 8007368:	68bb      	ldr	r3, [r7, #8]
 800736a:	4013      	ands	r3, r2
 800736c:	68ba      	ldr	r2, [r7, #8]
 800736e:	429a      	cmp	r2, r3
 8007370:	bf0c      	ite	eq
 8007372:	2301      	moveq	r3, #1
 8007374:	2300      	movne	r3, #0
 8007376:	b2db      	uxtb	r3, r3
 8007378:	461a      	mov	r2, r3
 800737a:	79fb      	ldrb	r3, [r7, #7]
 800737c:	429a      	cmp	r2, r3
 800737e:	d19b      	bne.n	80072b8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007380:	2300      	movs	r3, #0
}
 8007382:	4618      	mov	r0, r3
 8007384:	3720      	adds	r7, #32
 8007386:	46bd      	mov	sp, r7
 8007388:	bd80      	pop	{r7, pc}
 800738a:	bf00      	nop
 800738c:	2000000c 	.word	0x2000000c

08007390 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007390:	b580      	push	{r7, lr}
 8007392:	b08a      	sub	sp, #40	@ 0x28
 8007394:	af00      	add	r7, sp, #0
 8007396:	60f8      	str	r0, [r7, #12]
 8007398:	60b9      	str	r1, [r7, #8]
 800739a:	607a      	str	r2, [r7, #4]
 800739c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800739e:	2300      	movs	r3, #0
 80073a0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80073a2:	f7fd f85b 	bl	800445c <HAL_GetTick>
 80073a6:	4602      	mov	r2, r0
 80073a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073aa:	1a9b      	subs	r3, r3, r2
 80073ac:	683a      	ldr	r2, [r7, #0]
 80073ae:	4413      	add	r3, r2
 80073b0:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80073b2:	f7fd f853 	bl	800445c <HAL_GetTick>
 80073b6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	330c      	adds	r3, #12
 80073be:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80073c0:	4b3d      	ldr	r3, [pc, #244]	@ (80074b8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80073c2:	681a      	ldr	r2, [r3, #0]
 80073c4:	4613      	mov	r3, r2
 80073c6:	009b      	lsls	r3, r3, #2
 80073c8:	4413      	add	r3, r2
 80073ca:	00da      	lsls	r2, r3, #3
 80073cc:	1ad3      	subs	r3, r2, r3
 80073ce:	0d1b      	lsrs	r3, r3, #20
 80073d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80073d2:	fb02 f303 	mul.w	r3, r2, r3
 80073d6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80073d8:	e060      	b.n	800749c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80073da:	68bb      	ldr	r3, [r7, #8]
 80073dc:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80073e0:	d107      	bne.n	80073f2 <SPI_WaitFifoStateUntilTimeout+0x62>
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d104      	bne.n	80073f2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80073e8:	69fb      	ldr	r3, [r7, #28]
 80073ea:	781b      	ldrb	r3, [r3, #0]
 80073ec:	b2db      	uxtb	r3, r3
 80073ee:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80073f0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80073f2:	683b      	ldr	r3, [r7, #0]
 80073f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073f8:	d050      	beq.n	800749c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80073fa:	f7fd f82f 	bl	800445c <HAL_GetTick>
 80073fe:	4602      	mov	r2, r0
 8007400:	6a3b      	ldr	r3, [r7, #32]
 8007402:	1ad3      	subs	r3, r2, r3
 8007404:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007406:	429a      	cmp	r2, r3
 8007408:	d902      	bls.n	8007410 <SPI_WaitFifoStateUntilTimeout+0x80>
 800740a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800740c:	2b00      	cmp	r3, #0
 800740e:	d13d      	bne.n	800748c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	685a      	ldr	r2, [r3, #4]
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800741e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	685b      	ldr	r3, [r3, #4]
 8007424:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007428:	d111      	bne.n	800744e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	689b      	ldr	r3, [r3, #8]
 800742e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007432:	d004      	beq.n	800743e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	689b      	ldr	r3, [r3, #8]
 8007438:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800743c:	d107      	bne.n	800744e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	681a      	ldr	r2, [r3, #0]
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800744c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007452:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007456:	d10f      	bne.n	8007478 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	681a      	ldr	r2, [r3, #0]
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007466:	601a      	str	r2, [r3, #0]
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	681a      	ldr	r2, [r3, #0]
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007476:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	2201      	movs	r2, #1
 800747c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	2200      	movs	r2, #0
 8007484:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8007488:	2303      	movs	r3, #3
 800748a:	e010      	b.n	80074ae <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800748c:	69bb      	ldr	r3, [r7, #24]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d101      	bne.n	8007496 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8007492:	2300      	movs	r3, #0
 8007494:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8007496:	69bb      	ldr	r3, [r7, #24]
 8007498:	3b01      	subs	r3, #1
 800749a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	689a      	ldr	r2, [r3, #8]
 80074a2:	68bb      	ldr	r3, [r7, #8]
 80074a4:	4013      	ands	r3, r2
 80074a6:	687a      	ldr	r2, [r7, #4]
 80074a8:	429a      	cmp	r2, r3
 80074aa:	d196      	bne.n	80073da <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80074ac:	2300      	movs	r3, #0
}
 80074ae:	4618      	mov	r0, r3
 80074b0:	3728      	adds	r7, #40	@ 0x28
 80074b2:	46bd      	mov	sp, r7
 80074b4:	bd80      	pop	{r7, pc}
 80074b6:	bf00      	nop
 80074b8:	2000000c 	.word	0x2000000c

080074bc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80074bc:	b580      	push	{r7, lr}
 80074be:	b086      	sub	sp, #24
 80074c0:	af02      	add	r7, sp, #8
 80074c2:	60f8      	str	r0, [r7, #12]
 80074c4:	60b9      	str	r1, [r7, #8]
 80074c6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	9300      	str	r3, [sp, #0]
 80074cc:	68bb      	ldr	r3, [r7, #8]
 80074ce:	2200      	movs	r2, #0
 80074d0:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80074d4:	68f8      	ldr	r0, [r7, #12]
 80074d6:	f7ff ff5b 	bl	8007390 <SPI_WaitFifoStateUntilTimeout>
 80074da:	4603      	mov	r3, r0
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d007      	beq.n	80074f0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80074e4:	f043 0220 	orr.w	r2, r3, #32
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80074ec:	2303      	movs	r3, #3
 80074ee:	e027      	b.n	8007540 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	9300      	str	r3, [sp, #0]
 80074f4:	68bb      	ldr	r3, [r7, #8]
 80074f6:	2200      	movs	r2, #0
 80074f8:	2180      	movs	r1, #128	@ 0x80
 80074fa:	68f8      	ldr	r0, [r7, #12]
 80074fc:	f7ff fec0 	bl	8007280 <SPI_WaitFlagStateUntilTimeout>
 8007500:	4603      	mov	r3, r0
 8007502:	2b00      	cmp	r3, #0
 8007504:	d007      	beq.n	8007516 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800750a:	f043 0220 	orr.w	r2, r3, #32
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007512:	2303      	movs	r3, #3
 8007514:	e014      	b.n	8007540 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	9300      	str	r3, [sp, #0]
 800751a:	68bb      	ldr	r3, [r7, #8]
 800751c:	2200      	movs	r2, #0
 800751e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8007522:	68f8      	ldr	r0, [r7, #12]
 8007524:	f7ff ff34 	bl	8007390 <SPI_WaitFifoStateUntilTimeout>
 8007528:	4603      	mov	r3, r0
 800752a:	2b00      	cmp	r3, #0
 800752c:	d007      	beq.n	800753e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007532:	f043 0220 	orr.w	r2, r3, #32
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800753a:	2303      	movs	r3, #3
 800753c:	e000      	b.n	8007540 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800753e:	2300      	movs	r3, #0
}
 8007540:	4618      	mov	r0, r3
 8007542:	3710      	adds	r7, #16
 8007544:	46bd      	mov	sp, r7
 8007546:	bd80      	pop	{r7, pc}

08007548 <rand>:
 8007548:	4b16      	ldr	r3, [pc, #88]	@ (80075a4 <rand+0x5c>)
 800754a:	b510      	push	{r4, lr}
 800754c:	681c      	ldr	r4, [r3, #0]
 800754e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8007550:	b9b3      	cbnz	r3, 8007580 <rand+0x38>
 8007552:	2018      	movs	r0, #24
 8007554:	f000 fa20 	bl	8007998 <malloc>
 8007558:	4602      	mov	r2, r0
 800755a:	6320      	str	r0, [r4, #48]	@ 0x30
 800755c:	b920      	cbnz	r0, 8007568 <rand+0x20>
 800755e:	4b12      	ldr	r3, [pc, #72]	@ (80075a8 <rand+0x60>)
 8007560:	4812      	ldr	r0, [pc, #72]	@ (80075ac <rand+0x64>)
 8007562:	2152      	movs	r1, #82	@ 0x52
 8007564:	f000 f9b0 	bl	80078c8 <__assert_func>
 8007568:	4911      	ldr	r1, [pc, #68]	@ (80075b0 <rand+0x68>)
 800756a:	4b12      	ldr	r3, [pc, #72]	@ (80075b4 <rand+0x6c>)
 800756c:	e9c0 1300 	strd	r1, r3, [r0]
 8007570:	4b11      	ldr	r3, [pc, #68]	@ (80075b8 <rand+0x70>)
 8007572:	6083      	str	r3, [r0, #8]
 8007574:	230b      	movs	r3, #11
 8007576:	8183      	strh	r3, [r0, #12]
 8007578:	2100      	movs	r1, #0
 800757a:	2001      	movs	r0, #1
 800757c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8007580:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8007582:	480e      	ldr	r0, [pc, #56]	@ (80075bc <rand+0x74>)
 8007584:	690b      	ldr	r3, [r1, #16]
 8007586:	694c      	ldr	r4, [r1, #20]
 8007588:	4a0d      	ldr	r2, [pc, #52]	@ (80075c0 <rand+0x78>)
 800758a:	4358      	muls	r0, r3
 800758c:	fb02 0004 	mla	r0, r2, r4, r0
 8007590:	fba3 3202 	umull	r3, r2, r3, r2
 8007594:	3301      	adds	r3, #1
 8007596:	eb40 0002 	adc.w	r0, r0, r2
 800759a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800759e:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80075a2:	bd10      	pop	{r4, pc}
 80075a4:	20000024 	.word	0x20000024
 80075a8:	08009bf0 	.word	0x08009bf0
 80075ac:	08009c07 	.word	0x08009c07
 80075b0:	abcd330e 	.word	0xabcd330e
 80075b4:	e66d1234 	.word	0xe66d1234
 80075b8:	0005deec 	.word	0x0005deec
 80075bc:	5851f42d 	.word	0x5851f42d
 80075c0:	4c957f2d 	.word	0x4c957f2d

080075c4 <std>:
 80075c4:	2300      	movs	r3, #0
 80075c6:	b510      	push	{r4, lr}
 80075c8:	4604      	mov	r4, r0
 80075ca:	e9c0 3300 	strd	r3, r3, [r0]
 80075ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80075d2:	6083      	str	r3, [r0, #8]
 80075d4:	8181      	strh	r1, [r0, #12]
 80075d6:	6643      	str	r3, [r0, #100]	@ 0x64
 80075d8:	81c2      	strh	r2, [r0, #14]
 80075da:	6183      	str	r3, [r0, #24]
 80075dc:	4619      	mov	r1, r3
 80075de:	2208      	movs	r2, #8
 80075e0:	305c      	adds	r0, #92	@ 0x5c
 80075e2:	f000 f8f4 	bl	80077ce <memset>
 80075e6:	4b0d      	ldr	r3, [pc, #52]	@ (800761c <std+0x58>)
 80075e8:	6263      	str	r3, [r4, #36]	@ 0x24
 80075ea:	4b0d      	ldr	r3, [pc, #52]	@ (8007620 <std+0x5c>)
 80075ec:	62a3      	str	r3, [r4, #40]	@ 0x28
 80075ee:	4b0d      	ldr	r3, [pc, #52]	@ (8007624 <std+0x60>)
 80075f0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80075f2:	4b0d      	ldr	r3, [pc, #52]	@ (8007628 <std+0x64>)
 80075f4:	6323      	str	r3, [r4, #48]	@ 0x30
 80075f6:	4b0d      	ldr	r3, [pc, #52]	@ (800762c <std+0x68>)
 80075f8:	6224      	str	r4, [r4, #32]
 80075fa:	429c      	cmp	r4, r3
 80075fc:	d006      	beq.n	800760c <std+0x48>
 80075fe:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007602:	4294      	cmp	r4, r2
 8007604:	d002      	beq.n	800760c <std+0x48>
 8007606:	33d0      	adds	r3, #208	@ 0xd0
 8007608:	429c      	cmp	r4, r3
 800760a:	d105      	bne.n	8007618 <std+0x54>
 800760c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007610:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007614:	f000 b954 	b.w	80078c0 <__retarget_lock_init_recursive>
 8007618:	bd10      	pop	{r4, pc}
 800761a:	bf00      	nop
 800761c:	08007749 	.word	0x08007749
 8007620:	0800776b 	.word	0x0800776b
 8007624:	080077a3 	.word	0x080077a3
 8007628:	080077c7 	.word	0x080077c7
 800762c:	20003a24 	.word	0x20003a24

08007630 <stdio_exit_handler>:
 8007630:	4a02      	ldr	r2, [pc, #8]	@ (800763c <stdio_exit_handler+0xc>)
 8007632:	4903      	ldr	r1, [pc, #12]	@ (8007640 <stdio_exit_handler+0x10>)
 8007634:	4803      	ldr	r0, [pc, #12]	@ (8007644 <stdio_exit_handler+0x14>)
 8007636:	f000 b869 	b.w	800770c <_fwalk_sglue>
 800763a:	bf00      	nop
 800763c:	20000018 	.word	0x20000018
 8007640:	08007c0d 	.word	0x08007c0d
 8007644:	20000028 	.word	0x20000028

08007648 <cleanup_stdio>:
 8007648:	6841      	ldr	r1, [r0, #4]
 800764a:	4b0c      	ldr	r3, [pc, #48]	@ (800767c <cleanup_stdio+0x34>)
 800764c:	4299      	cmp	r1, r3
 800764e:	b510      	push	{r4, lr}
 8007650:	4604      	mov	r4, r0
 8007652:	d001      	beq.n	8007658 <cleanup_stdio+0x10>
 8007654:	f000 fada 	bl	8007c0c <_fflush_r>
 8007658:	68a1      	ldr	r1, [r4, #8]
 800765a:	4b09      	ldr	r3, [pc, #36]	@ (8007680 <cleanup_stdio+0x38>)
 800765c:	4299      	cmp	r1, r3
 800765e:	d002      	beq.n	8007666 <cleanup_stdio+0x1e>
 8007660:	4620      	mov	r0, r4
 8007662:	f000 fad3 	bl	8007c0c <_fflush_r>
 8007666:	68e1      	ldr	r1, [r4, #12]
 8007668:	4b06      	ldr	r3, [pc, #24]	@ (8007684 <cleanup_stdio+0x3c>)
 800766a:	4299      	cmp	r1, r3
 800766c:	d004      	beq.n	8007678 <cleanup_stdio+0x30>
 800766e:	4620      	mov	r0, r4
 8007670:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007674:	f000 baca 	b.w	8007c0c <_fflush_r>
 8007678:	bd10      	pop	{r4, pc}
 800767a:	bf00      	nop
 800767c:	20003a24 	.word	0x20003a24
 8007680:	20003a8c 	.word	0x20003a8c
 8007684:	20003af4 	.word	0x20003af4

08007688 <global_stdio_init.part.0>:
 8007688:	b510      	push	{r4, lr}
 800768a:	4b0b      	ldr	r3, [pc, #44]	@ (80076b8 <global_stdio_init.part.0+0x30>)
 800768c:	4c0b      	ldr	r4, [pc, #44]	@ (80076bc <global_stdio_init.part.0+0x34>)
 800768e:	4a0c      	ldr	r2, [pc, #48]	@ (80076c0 <global_stdio_init.part.0+0x38>)
 8007690:	601a      	str	r2, [r3, #0]
 8007692:	4620      	mov	r0, r4
 8007694:	2200      	movs	r2, #0
 8007696:	2104      	movs	r1, #4
 8007698:	f7ff ff94 	bl	80075c4 <std>
 800769c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80076a0:	2201      	movs	r2, #1
 80076a2:	2109      	movs	r1, #9
 80076a4:	f7ff ff8e 	bl	80075c4 <std>
 80076a8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80076ac:	2202      	movs	r2, #2
 80076ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80076b2:	2112      	movs	r1, #18
 80076b4:	f7ff bf86 	b.w	80075c4 <std>
 80076b8:	20003b5c 	.word	0x20003b5c
 80076bc:	20003a24 	.word	0x20003a24
 80076c0:	08007631 	.word	0x08007631

080076c4 <__sfp_lock_acquire>:
 80076c4:	4801      	ldr	r0, [pc, #4]	@ (80076cc <__sfp_lock_acquire+0x8>)
 80076c6:	f000 b8fc 	b.w	80078c2 <__retarget_lock_acquire_recursive>
 80076ca:	bf00      	nop
 80076cc:	20003b65 	.word	0x20003b65

080076d0 <__sfp_lock_release>:
 80076d0:	4801      	ldr	r0, [pc, #4]	@ (80076d8 <__sfp_lock_release+0x8>)
 80076d2:	f000 b8f7 	b.w	80078c4 <__retarget_lock_release_recursive>
 80076d6:	bf00      	nop
 80076d8:	20003b65 	.word	0x20003b65

080076dc <__sinit>:
 80076dc:	b510      	push	{r4, lr}
 80076de:	4604      	mov	r4, r0
 80076e0:	f7ff fff0 	bl	80076c4 <__sfp_lock_acquire>
 80076e4:	6a23      	ldr	r3, [r4, #32]
 80076e6:	b11b      	cbz	r3, 80076f0 <__sinit+0x14>
 80076e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80076ec:	f7ff bff0 	b.w	80076d0 <__sfp_lock_release>
 80076f0:	4b04      	ldr	r3, [pc, #16]	@ (8007704 <__sinit+0x28>)
 80076f2:	6223      	str	r3, [r4, #32]
 80076f4:	4b04      	ldr	r3, [pc, #16]	@ (8007708 <__sinit+0x2c>)
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d1f5      	bne.n	80076e8 <__sinit+0xc>
 80076fc:	f7ff ffc4 	bl	8007688 <global_stdio_init.part.0>
 8007700:	e7f2      	b.n	80076e8 <__sinit+0xc>
 8007702:	bf00      	nop
 8007704:	08007649 	.word	0x08007649
 8007708:	20003b5c 	.word	0x20003b5c

0800770c <_fwalk_sglue>:
 800770c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007710:	4607      	mov	r7, r0
 8007712:	4688      	mov	r8, r1
 8007714:	4614      	mov	r4, r2
 8007716:	2600      	movs	r6, #0
 8007718:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800771c:	f1b9 0901 	subs.w	r9, r9, #1
 8007720:	d505      	bpl.n	800772e <_fwalk_sglue+0x22>
 8007722:	6824      	ldr	r4, [r4, #0]
 8007724:	2c00      	cmp	r4, #0
 8007726:	d1f7      	bne.n	8007718 <_fwalk_sglue+0xc>
 8007728:	4630      	mov	r0, r6
 800772a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800772e:	89ab      	ldrh	r3, [r5, #12]
 8007730:	2b01      	cmp	r3, #1
 8007732:	d907      	bls.n	8007744 <_fwalk_sglue+0x38>
 8007734:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007738:	3301      	adds	r3, #1
 800773a:	d003      	beq.n	8007744 <_fwalk_sglue+0x38>
 800773c:	4629      	mov	r1, r5
 800773e:	4638      	mov	r0, r7
 8007740:	47c0      	blx	r8
 8007742:	4306      	orrs	r6, r0
 8007744:	3568      	adds	r5, #104	@ 0x68
 8007746:	e7e9      	b.n	800771c <_fwalk_sglue+0x10>

08007748 <__sread>:
 8007748:	b510      	push	{r4, lr}
 800774a:	460c      	mov	r4, r1
 800774c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007750:	f000 f868 	bl	8007824 <_read_r>
 8007754:	2800      	cmp	r0, #0
 8007756:	bfab      	itete	ge
 8007758:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800775a:	89a3      	ldrhlt	r3, [r4, #12]
 800775c:	181b      	addge	r3, r3, r0
 800775e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007762:	bfac      	ite	ge
 8007764:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007766:	81a3      	strhlt	r3, [r4, #12]
 8007768:	bd10      	pop	{r4, pc}

0800776a <__swrite>:
 800776a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800776e:	461f      	mov	r7, r3
 8007770:	898b      	ldrh	r3, [r1, #12]
 8007772:	05db      	lsls	r3, r3, #23
 8007774:	4605      	mov	r5, r0
 8007776:	460c      	mov	r4, r1
 8007778:	4616      	mov	r6, r2
 800777a:	d505      	bpl.n	8007788 <__swrite+0x1e>
 800777c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007780:	2302      	movs	r3, #2
 8007782:	2200      	movs	r2, #0
 8007784:	f000 f83c 	bl	8007800 <_lseek_r>
 8007788:	89a3      	ldrh	r3, [r4, #12]
 800778a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800778e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007792:	81a3      	strh	r3, [r4, #12]
 8007794:	4632      	mov	r2, r6
 8007796:	463b      	mov	r3, r7
 8007798:	4628      	mov	r0, r5
 800779a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800779e:	f000 b853 	b.w	8007848 <_write_r>

080077a2 <__sseek>:
 80077a2:	b510      	push	{r4, lr}
 80077a4:	460c      	mov	r4, r1
 80077a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077aa:	f000 f829 	bl	8007800 <_lseek_r>
 80077ae:	1c43      	adds	r3, r0, #1
 80077b0:	89a3      	ldrh	r3, [r4, #12]
 80077b2:	bf15      	itete	ne
 80077b4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80077b6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80077ba:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80077be:	81a3      	strheq	r3, [r4, #12]
 80077c0:	bf18      	it	ne
 80077c2:	81a3      	strhne	r3, [r4, #12]
 80077c4:	bd10      	pop	{r4, pc}

080077c6 <__sclose>:
 80077c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077ca:	f000 b809 	b.w	80077e0 <_close_r>

080077ce <memset>:
 80077ce:	4402      	add	r2, r0
 80077d0:	4603      	mov	r3, r0
 80077d2:	4293      	cmp	r3, r2
 80077d4:	d100      	bne.n	80077d8 <memset+0xa>
 80077d6:	4770      	bx	lr
 80077d8:	f803 1b01 	strb.w	r1, [r3], #1
 80077dc:	e7f9      	b.n	80077d2 <memset+0x4>
	...

080077e0 <_close_r>:
 80077e0:	b538      	push	{r3, r4, r5, lr}
 80077e2:	4d06      	ldr	r5, [pc, #24]	@ (80077fc <_close_r+0x1c>)
 80077e4:	2300      	movs	r3, #0
 80077e6:	4604      	mov	r4, r0
 80077e8:	4608      	mov	r0, r1
 80077ea:	602b      	str	r3, [r5, #0]
 80077ec:	f7fc fd27 	bl	800423e <_close>
 80077f0:	1c43      	adds	r3, r0, #1
 80077f2:	d102      	bne.n	80077fa <_close_r+0x1a>
 80077f4:	682b      	ldr	r3, [r5, #0]
 80077f6:	b103      	cbz	r3, 80077fa <_close_r+0x1a>
 80077f8:	6023      	str	r3, [r4, #0]
 80077fa:	bd38      	pop	{r3, r4, r5, pc}
 80077fc:	20003b60 	.word	0x20003b60

08007800 <_lseek_r>:
 8007800:	b538      	push	{r3, r4, r5, lr}
 8007802:	4d07      	ldr	r5, [pc, #28]	@ (8007820 <_lseek_r+0x20>)
 8007804:	4604      	mov	r4, r0
 8007806:	4608      	mov	r0, r1
 8007808:	4611      	mov	r1, r2
 800780a:	2200      	movs	r2, #0
 800780c:	602a      	str	r2, [r5, #0]
 800780e:	461a      	mov	r2, r3
 8007810:	f7fc fd3c 	bl	800428c <_lseek>
 8007814:	1c43      	adds	r3, r0, #1
 8007816:	d102      	bne.n	800781e <_lseek_r+0x1e>
 8007818:	682b      	ldr	r3, [r5, #0]
 800781a:	b103      	cbz	r3, 800781e <_lseek_r+0x1e>
 800781c:	6023      	str	r3, [r4, #0]
 800781e:	bd38      	pop	{r3, r4, r5, pc}
 8007820:	20003b60 	.word	0x20003b60

08007824 <_read_r>:
 8007824:	b538      	push	{r3, r4, r5, lr}
 8007826:	4d07      	ldr	r5, [pc, #28]	@ (8007844 <_read_r+0x20>)
 8007828:	4604      	mov	r4, r0
 800782a:	4608      	mov	r0, r1
 800782c:	4611      	mov	r1, r2
 800782e:	2200      	movs	r2, #0
 8007830:	602a      	str	r2, [r5, #0]
 8007832:	461a      	mov	r2, r3
 8007834:	f7fc fcca 	bl	80041cc <_read>
 8007838:	1c43      	adds	r3, r0, #1
 800783a:	d102      	bne.n	8007842 <_read_r+0x1e>
 800783c:	682b      	ldr	r3, [r5, #0]
 800783e:	b103      	cbz	r3, 8007842 <_read_r+0x1e>
 8007840:	6023      	str	r3, [r4, #0]
 8007842:	bd38      	pop	{r3, r4, r5, pc}
 8007844:	20003b60 	.word	0x20003b60

08007848 <_write_r>:
 8007848:	b538      	push	{r3, r4, r5, lr}
 800784a:	4d07      	ldr	r5, [pc, #28]	@ (8007868 <_write_r+0x20>)
 800784c:	4604      	mov	r4, r0
 800784e:	4608      	mov	r0, r1
 8007850:	4611      	mov	r1, r2
 8007852:	2200      	movs	r2, #0
 8007854:	602a      	str	r2, [r5, #0]
 8007856:	461a      	mov	r2, r3
 8007858:	f7fc fcd5 	bl	8004206 <_write>
 800785c:	1c43      	adds	r3, r0, #1
 800785e:	d102      	bne.n	8007866 <_write_r+0x1e>
 8007860:	682b      	ldr	r3, [r5, #0]
 8007862:	b103      	cbz	r3, 8007866 <_write_r+0x1e>
 8007864:	6023      	str	r3, [r4, #0]
 8007866:	bd38      	pop	{r3, r4, r5, pc}
 8007868:	20003b60 	.word	0x20003b60

0800786c <__errno>:
 800786c:	4b01      	ldr	r3, [pc, #4]	@ (8007874 <__errno+0x8>)
 800786e:	6818      	ldr	r0, [r3, #0]
 8007870:	4770      	bx	lr
 8007872:	bf00      	nop
 8007874:	20000024 	.word	0x20000024

08007878 <__libc_init_array>:
 8007878:	b570      	push	{r4, r5, r6, lr}
 800787a:	4d0d      	ldr	r5, [pc, #52]	@ (80078b0 <__libc_init_array+0x38>)
 800787c:	4c0d      	ldr	r4, [pc, #52]	@ (80078b4 <__libc_init_array+0x3c>)
 800787e:	1b64      	subs	r4, r4, r5
 8007880:	10a4      	asrs	r4, r4, #2
 8007882:	2600      	movs	r6, #0
 8007884:	42a6      	cmp	r6, r4
 8007886:	d109      	bne.n	800789c <__libc_init_array+0x24>
 8007888:	4d0b      	ldr	r5, [pc, #44]	@ (80078b8 <__libc_init_array+0x40>)
 800788a:	4c0c      	ldr	r4, [pc, #48]	@ (80078bc <__libc_init_array+0x44>)
 800788c:	f001 fdc4 	bl	8009418 <_init>
 8007890:	1b64      	subs	r4, r4, r5
 8007892:	10a4      	asrs	r4, r4, #2
 8007894:	2600      	movs	r6, #0
 8007896:	42a6      	cmp	r6, r4
 8007898:	d105      	bne.n	80078a6 <__libc_init_array+0x2e>
 800789a:	bd70      	pop	{r4, r5, r6, pc}
 800789c:	f855 3b04 	ldr.w	r3, [r5], #4
 80078a0:	4798      	blx	r3
 80078a2:	3601      	adds	r6, #1
 80078a4:	e7ee      	b.n	8007884 <__libc_init_array+0xc>
 80078a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80078aa:	4798      	blx	r3
 80078ac:	3601      	adds	r6, #1
 80078ae:	e7f2      	b.n	8007896 <__libc_init_array+0x1e>
 80078b0:	08009d18 	.word	0x08009d18
 80078b4:	08009d18 	.word	0x08009d18
 80078b8:	08009d18 	.word	0x08009d18
 80078bc:	08009d1c 	.word	0x08009d1c

080078c0 <__retarget_lock_init_recursive>:
 80078c0:	4770      	bx	lr

080078c2 <__retarget_lock_acquire_recursive>:
 80078c2:	4770      	bx	lr

080078c4 <__retarget_lock_release_recursive>:
 80078c4:	4770      	bx	lr
	...

080078c8 <__assert_func>:
 80078c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80078ca:	4614      	mov	r4, r2
 80078cc:	461a      	mov	r2, r3
 80078ce:	4b09      	ldr	r3, [pc, #36]	@ (80078f4 <__assert_func+0x2c>)
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	4605      	mov	r5, r0
 80078d4:	68d8      	ldr	r0, [r3, #12]
 80078d6:	b14c      	cbz	r4, 80078ec <__assert_func+0x24>
 80078d8:	4b07      	ldr	r3, [pc, #28]	@ (80078f8 <__assert_func+0x30>)
 80078da:	9100      	str	r1, [sp, #0]
 80078dc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80078e0:	4906      	ldr	r1, [pc, #24]	@ (80078fc <__assert_func+0x34>)
 80078e2:	462b      	mov	r3, r5
 80078e4:	f000 f9ba 	bl	8007c5c <fiprintf>
 80078e8:	f000 f9da 	bl	8007ca0 <abort>
 80078ec:	4b04      	ldr	r3, [pc, #16]	@ (8007900 <__assert_func+0x38>)
 80078ee:	461c      	mov	r4, r3
 80078f0:	e7f3      	b.n	80078da <__assert_func+0x12>
 80078f2:	bf00      	nop
 80078f4:	20000024 	.word	0x20000024
 80078f8:	08009c5f 	.word	0x08009c5f
 80078fc:	08009c6c 	.word	0x08009c6c
 8007900:	08009c9a 	.word	0x08009c9a

08007904 <_free_r>:
 8007904:	b538      	push	{r3, r4, r5, lr}
 8007906:	4605      	mov	r5, r0
 8007908:	2900      	cmp	r1, #0
 800790a:	d041      	beq.n	8007990 <_free_r+0x8c>
 800790c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007910:	1f0c      	subs	r4, r1, #4
 8007912:	2b00      	cmp	r3, #0
 8007914:	bfb8      	it	lt
 8007916:	18e4      	addlt	r4, r4, r3
 8007918:	f000 f8e8 	bl	8007aec <__malloc_lock>
 800791c:	4a1d      	ldr	r2, [pc, #116]	@ (8007994 <_free_r+0x90>)
 800791e:	6813      	ldr	r3, [r2, #0]
 8007920:	b933      	cbnz	r3, 8007930 <_free_r+0x2c>
 8007922:	6063      	str	r3, [r4, #4]
 8007924:	6014      	str	r4, [r2, #0]
 8007926:	4628      	mov	r0, r5
 8007928:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800792c:	f000 b8e4 	b.w	8007af8 <__malloc_unlock>
 8007930:	42a3      	cmp	r3, r4
 8007932:	d908      	bls.n	8007946 <_free_r+0x42>
 8007934:	6820      	ldr	r0, [r4, #0]
 8007936:	1821      	adds	r1, r4, r0
 8007938:	428b      	cmp	r3, r1
 800793a:	bf01      	itttt	eq
 800793c:	6819      	ldreq	r1, [r3, #0]
 800793e:	685b      	ldreq	r3, [r3, #4]
 8007940:	1809      	addeq	r1, r1, r0
 8007942:	6021      	streq	r1, [r4, #0]
 8007944:	e7ed      	b.n	8007922 <_free_r+0x1e>
 8007946:	461a      	mov	r2, r3
 8007948:	685b      	ldr	r3, [r3, #4]
 800794a:	b10b      	cbz	r3, 8007950 <_free_r+0x4c>
 800794c:	42a3      	cmp	r3, r4
 800794e:	d9fa      	bls.n	8007946 <_free_r+0x42>
 8007950:	6811      	ldr	r1, [r2, #0]
 8007952:	1850      	adds	r0, r2, r1
 8007954:	42a0      	cmp	r0, r4
 8007956:	d10b      	bne.n	8007970 <_free_r+0x6c>
 8007958:	6820      	ldr	r0, [r4, #0]
 800795a:	4401      	add	r1, r0
 800795c:	1850      	adds	r0, r2, r1
 800795e:	4283      	cmp	r3, r0
 8007960:	6011      	str	r1, [r2, #0]
 8007962:	d1e0      	bne.n	8007926 <_free_r+0x22>
 8007964:	6818      	ldr	r0, [r3, #0]
 8007966:	685b      	ldr	r3, [r3, #4]
 8007968:	6053      	str	r3, [r2, #4]
 800796a:	4408      	add	r0, r1
 800796c:	6010      	str	r0, [r2, #0]
 800796e:	e7da      	b.n	8007926 <_free_r+0x22>
 8007970:	d902      	bls.n	8007978 <_free_r+0x74>
 8007972:	230c      	movs	r3, #12
 8007974:	602b      	str	r3, [r5, #0]
 8007976:	e7d6      	b.n	8007926 <_free_r+0x22>
 8007978:	6820      	ldr	r0, [r4, #0]
 800797a:	1821      	adds	r1, r4, r0
 800797c:	428b      	cmp	r3, r1
 800797e:	bf04      	itt	eq
 8007980:	6819      	ldreq	r1, [r3, #0]
 8007982:	685b      	ldreq	r3, [r3, #4]
 8007984:	6063      	str	r3, [r4, #4]
 8007986:	bf04      	itt	eq
 8007988:	1809      	addeq	r1, r1, r0
 800798a:	6021      	streq	r1, [r4, #0]
 800798c:	6054      	str	r4, [r2, #4]
 800798e:	e7ca      	b.n	8007926 <_free_r+0x22>
 8007990:	bd38      	pop	{r3, r4, r5, pc}
 8007992:	bf00      	nop
 8007994:	20003b6c 	.word	0x20003b6c

08007998 <malloc>:
 8007998:	4b02      	ldr	r3, [pc, #8]	@ (80079a4 <malloc+0xc>)
 800799a:	4601      	mov	r1, r0
 800799c:	6818      	ldr	r0, [r3, #0]
 800799e:	f000 b825 	b.w	80079ec <_malloc_r>
 80079a2:	bf00      	nop
 80079a4:	20000024 	.word	0x20000024

080079a8 <sbrk_aligned>:
 80079a8:	b570      	push	{r4, r5, r6, lr}
 80079aa:	4e0f      	ldr	r6, [pc, #60]	@ (80079e8 <sbrk_aligned+0x40>)
 80079ac:	460c      	mov	r4, r1
 80079ae:	6831      	ldr	r1, [r6, #0]
 80079b0:	4605      	mov	r5, r0
 80079b2:	b911      	cbnz	r1, 80079ba <sbrk_aligned+0x12>
 80079b4:	f000 f964 	bl	8007c80 <_sbrk_r>
 80079b8:	6030      	str	r0, [r6, #0]
 80079ba:	4621      	mov	r1, r4
 80079bc:	4628      	mov	r0, r5
 80079be:	f000 f95f 	bl	8007c80 <_sbrk_r>
 80079c2:	1c43      	adds	r3, r0, #1
 80079c4:	d103      	bne.n	80079ce <sbrk_aligned+0x26>
 80079c6:	f04f 34ff 	mov.w	r4, #4294967295
 80079ca:	4620      	mov	r0, r4
 80079cc:	bd70      	pop	{r4, r5, r6, pc}
 80079ce:	1cc4      	adds	r4, r0, #3
 80079d0:	f024 0403 	bic.w	r4, r4, #3
 80079d4:	42a0      	cmp	r0, r4
 80079d6:	d0f8      	beq.n	80079ca <sbrk_aligned+0x22>
 80079d8:	1a21      	subs	r1, r4, r0
 80079da:	4628      	mov	r0, r5
 80079dc:	f000 f950 	bl	8007c80 <_sbrk_r>
 80079e0:	3001      	adds	r0, #1
 80079e2:	d1f2      	bne.n	80079ca <sbrk_aligned+0x22>
 80079e4:	e7ef      	b.n	80079c6 <sbrk_aligned+0x1e>
 80079e6:	bf00      	nop
 80079e8:	20003b68 	.word	0x20003b68

080079ec <_malloc_r>:
 80079ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80079f0:	1ccd      	adds	r5, r1, #3
 80079f2:	f025 0503 	bic.w	r5, r5, #3
 80079f6:	3508      	adds	r5, #8
 80079f8:	2d0c      	cmp	r5, #12
 80079fa:	bf38      	it	cc
 80079fc:	250c      	movcc	r5, #12
 80079fe:	2d00      	cmp	r5, #0
 8007a00:	4606      	mov	r6, r0
 8007a02:	db01      	blt.n	8007a08 <_malloc_r+0x1c>
 8007a04:	42a9      	cmp	r1, r5
 8007a06:	d904      	bls.n	8007a12 <_malloc_r+0x26>
 8007a08:	230c      	movs	r3, #12
 8007a0a:	6033      	str	r3, [r6, #0]
 8007a0c:	2000      	movs	r0, #0
 8007a0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a12:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007ae8 <_malloc_r+0xfc>
 8007a16:	f000 f869 	bl	8007aec <__malloc_lock>
 8007a1a:	f8d8 3000 	ldr.w	r3, [r8]
 8007a1e:	461c      	mov	r4, r3
 8007a20:	bb44      	cbnz	r4, 8007a74 <_malloc_r+0x88>
 8007a22:	4629      	mov	r1, r5
 8007a24:	4630      	mov	r0, r6
 8007a26:	f7ff ffbf 	bl	80079a8 <sbrk_aligned>
 8007a2a:	1c43      	adds	r3, r0, #1
 8007a2c:	4604      	mov	r4, r0
 8007a2e:	d158      	bne.n	8007ae2 <_malloc_r+0xf6>
 8007a30:	f8d8 4000 	ldr.w	r4, [r8]
 8007a34:	4627      	mov	r7, r4
 8007a36:	2f00      	cmp	r7, #0
 8007a38:	d143      	bne.n	8007ac2 <_malloc_r+0xd6>
 8007a3a:	2c00      	cmp	r4, #0
 8007a3c:	d04b      	beq.n	8007ad6 <_malloc_r+0xea>
 8007a3e:	6823      	ldr	r3, [r4, #0]
 8007a40:	4639      	mov	r1, r7
 8007a42:	4630      	mov	r0, r6
 8007a44:	eb04 0903 	add.w	r9, r4, r3
 8007a48:	f000 f91a 	bl	8007c80 <_sbrk_r>
 8007a4c:	4581      	cmp	r9, r0
 8007a4e:	d142      	bne.n	8007ad6 <_malloc_r+0xea>
 8007a50:	6821      	ldr	r1, [r4, #0]
 8007a52:	1a6d      	subs	r5, r5, r1
 8007a54:	4629      	mov	r1, r5
 8007a56:	4630      	mov	r0, r6
 8007a58:	f7ff ffa6 	bl	80079a8 <sbrk_aligned>
 8007a5c:	3001      	adds	r0, #1
 8007a5e:	d03a      	beq.n	8007ad6 <_malloc_r+0xea>
 8007a60:	6823      	ldr	r3, [r4, #0]
 8007a62:	442b      	add	r3, r5
 8007a64:	6023      	str	r3, [r4, #0]
 8007a66:	f8d8 3000 	ldr.w	r3, [r8]
 8007a6a:	685a      	ldr	r2, [r3, #4]
 8007a6c:	bb62      	cbnz	r2, 8007ac8 <_malloc_r+0xdc>
 8007a6e:	f8c8 7000 	str.w	r7, [r8]
 8007a72:	e00f      	b.n	8007a94 <_malloc_r+0xa8>
 8007a74:	6822      	ldr	r2, [r4, #0]
 8007a76:	1b52      	subs	r2, r2, r5
 8007a78:	d420      	bmi.n	8007abc <_malloc_r+0xd0>
 8007a7a:	2a0b      	cmp	r2, #11
 8007a7c:	d917      	bls.n	8007aae <_malloc_r+0xc2>
 8007a7e:	1961      	adds	r1, r4, r5
 8007a80:	42a3      	cmp	r3, r4
 8007a82:	6025      	str	r5, [r4, #0]
 8007a84:	bf18      	it	ne
 8007a86:	6059      	strne	r1, [r3, #4]
 8007a88:	6863      	ldr	r3, [r4, #4]
 8007a8a:	bf08      	it	eq
 8007a8c:	f8c8 1000 	streq.w	r1, [r8]
 8007a90:	5162      	str	r2, [r4, r5]
 8007a92:	604b      	str	r3, [r1, #4]
 8007a94:	4630      	mov	r0, r6
 8007a96:	f000 f82f 	bl	8007af8 <__malloc_unlock>
 8007a9a:	f104 000b 	add.w	r0, r4, #11
 8007a9e:	1d23      	adds	r3, r4, #4
 8007aa0:	f020 0007 	bic.w	r0, r0, #7
 8007aa4:	1ac2      	subs	r2, r0, r3
 8007aa6:	bf1c      	itt	ne
 8007aa8:	1a1b      	subne	r3, r3, r0
 8007aaa:	50a3      	strne	r3, [r4, r2]
 8007aac:	e7af      	b.n	8007a0e <_malloc_r+0x22>
 8007aae:	6862      	ldr	r2, [r4, #4]
 8007ab0:	42a3      	cmp	r3, r4
 8007ab2:	bf0c      	ite	eq
 8007ab4:	f8c8 2000 	streq.w	r2, [r8]
 8007ab8:	605a      	strne	r2, [r3, #4]
 8007aba:	e7eb      	b.n	8007a94 <_malloc_r+0xa8>
 8007abc:	4623      	mov	r3, r4
 8007abe:	6864      	ldr	r4, [r4, #4]
 8007ac0:	e7ae      	b.n	8007a20 <_malloc_r+0x34>
 8007ac2:	463c      	mov	r4, r7
 8007ac4:	687f      	ldr	r7, [r7, #4]
 8007ac6:	e7b6      	b.n	8007a36 <_malloc_r+0x4a>
 8007ac8:	461a      	mov	r2, r3
 8007aca:	685b      	ldr	r3, [r3, #4]
 8007acc:	42a3      	cmp	r3, r4
 8007ace:	d1fb      	bne.n	8007ac8 <_malloc_r+0xdc>
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	6053      	str	r3, [r2, #4]
 8007ad4:	e7de      	b.n	8007a94 <_malloc_r+0xa8>
 8007ad6:	230c      	movs	r3, #12
 8007ad8:	6033      	str	r3, [r6, #0]
 8007ada:	4630      	mov	r0, r6
 8007adc:	f000 f80c 	bl	8007af8 <__malloc_unlock>
 8007ae0:	e794      	b.n	8007a0c <_malloc_r+0x20>
 8007ae2:	6005      	str	r5, [r0, #0]
 8007ae4:	e7d6      	b.n	8007a94 <_malloc_r+0xa8>
 8007ae6:	bf00      	nop
 8007ae8:	20003b6c 	.word	0x20003b6c

08007aec <__malloc_lock>:
 8007aec:	4801      	ldr	r0, [pc, #4]	@ (8007af4 <__malloc_lock+0x8>)
 8007aee:	f7ff bee8 	b.w	80078c2 <__retarget_lock_acquire_recursive>
 8007af2:	bf00      	nop
 8007af4:	20003b64 	.word	0x20003b64

08007af8 <__malloc_unlock>:
 8007af8:	4801      	ldr	r0, [pc, #4]	@ (8007b00 <__malloc_unlock+0x8>)
 8007afa:	f7ff bee3 	b.w	80078c4 <__retarget_lock_release_recursive>
 8007afe:	bf00      	nop
 8007b00:	20003b64 	.word	0x20003b64

08007b04 <__sflush_r>:
 8007b04:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007b08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b0c:	0716      	lsls	r6, r2, #28
 8007b0e:	4605      	mov	r5, r0
 8007b10:	460c      	mov	r4, r1
 8007b12:	d454      	bmi.n	8007bbe <__sflush_r+0xba>
 8007b14:	684b      	ldr	r3, [r1, #4]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	dc02      	bgt.n	8007b20 <__sflush_r+0x1c>
 8007b1a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	dd48      	ble.n	8007bb2 <__sflush_r+0xae>
 8007b20:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007b22:	2e00      	cmp	r6, #0
 8007b24:	d045      	beq.n	8007bb2 <__sflush_r+0xae>
 8007b26:	2300      	movs	r3, #0
 8007b28:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007b2c:	682f      	ldr	r7, [r5, #0]
 8007b2e:	6a21      	ldr	r1, [r4, #32]
 8007b30:	602b      	str	r3, [r5, #0]
 8007b32:	d030      	beq.n	8007b96 <__sflush_r+0x92>
 8007b34:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007b36:	89a3      	ldrh	r3, [r4, #12]
 8007b38:	0759      	lsls	r1, r3, #29
 8007b3a:	d505      	bpl.n	8007b48 <__sflush_r+0x44>
 8007b3c:	6863      	ldr	r3, [r4, #4]
 8007b3e:	1ad2      	subs	r2, r2, r3
 8007b40:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007b42:	b10b      	cbz	r3, 8007b48 <__sflush_r+0x44>
 8007b44:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007b46:	1ad2      	subs	r2, r2, r3
 8007b48:	2300      	movs	r3, #0
 8007b4a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007b4c:	6a21      	ldr	r1, [r4, #32]
 8007b4e:	4628      	mov	r0, r5
 8007b50:	47b0      	blx	r6
 8007b52:	1c43      	adds	r3, r0, #1
 8007b54:	89a3      	ldrh	r3, [r4, #12]
 8007b56:	d106      	bne.n	8007b66 <__sflush_r+0x62>
 8007b58:	6829      	ldr	r1, [r5, #0]
 8007b5a:	291d      	cmp	r1, #29
 8007b5c:	d82b      	bhi.n	8007bb6 <__sflush_r+0xb2>
 8007b5e:	4a2a      	ldr	r2, [pc, #168]	@ (8007c08 <__sflush_r+0x104>)
 8007b60:	40ca      	lsrs	r2, r1
 8007b62:	07d6      	lsls	r6, r2, #31
 8007b64:	d527      	bpl.n	8007bb6 <__sflush_r+0xb2>
 8007b66:	2200      	movs	r2, #0
 8007b68:	6062      	str	r2, [r4, #4]
 8007b6a:	04d9      	lsls	r1, r3, #19
 8007b6c:	6922      	ldr	r2, [r4, #16]
 8007b6e:	6022      	str	r2, [r4, #0]
 8007b70:	d504      	bpl.n	8007b7c <__sflush_r+0x78>
 8007b72:	1c42      	adds	r2, r0, #1
 8007b74:	d101      	bne.n	8007b7a <__sflush_r+0x76>
 8007b76:	682b      	ldr	r3, [r5, #0]
 8007b78:	b903      	cbnz	r3, 8007b7c <__sflush_r+0x78>
 8007b7a:	6560      	str	r0, [r4, #84]	@ 0x54
 8007b7c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007b7e:	602f      	str	r7, [r5, #0]
 8007b80:	b1b9      	cbz	r1, 8007bb2 <__sflush_r+0xae>
 8007b82:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007b86:	4299      	cmp	r1, r3
 8007b88:	d002      	beq.n	8007b90 <__sflush_r+0x8c>
 8007b8a:	4628      	mov	r0, r5
 8007b8c:	f7ff feba 	bl	8007904 <_free_r>
 8007b90:	2300      	movs	r3, #0
 8007b92:	6363      	str	r3, [r4, #52]	@ 0x34
 8007b94:	e00d      	b.n	8007bb2 <__sflush_r+0xae>
 8007b96:	2301      	movs	r3, #1
 8007b98:	4628      	mov	r0, r5
 8007b9a:	47b0      	blx	r6
 8007b9c:	4602      	mov	r2, r0
 8007b9e:	1c50      	adds	r0, r2, #1
 8007ba0:	d1c9      	bne.n	8007b36 <__sflush_r+0x32>
 8007ba2:	682b      	ldr	r3, [r5, #0]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d0c6      	beq.n	8007b36 <__sflush_r+0x32>
 8007ba8:	2b1d      	cmp	r3, #29
 8007baa:	d001      	beq.n	8007bb0 <__sflush_r+0xac>
 8007bac:	2b16      	cmp	r3, #22
 8007bae:	d11e      	bne.n	8007bee <__sflush_r+0xea>
 8007bb0:	602f      	str	r7, [r5, #0]
 8007bb2:	2000      	movs	r0, #0
 8007bb4:	e022      	b.n	8007bfc <__sflush_r+0xf8>
 8007bb6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007bba:	b21b      	sxth	r3, r3
 8007bbc:	e01b      	b.n	8007bf6 <__sflush_r+0xf2>
 8007bbe:	690f      	ldr	r7, [r1, #16]
 8007bc0:	2f00      	cmp	r7, #0
 8007bc2:	d0f6      	beq.n	8007bb2 <__sflush_r+0xae>
 8007bc4:	0793      	lsls	r3, r2, #30
 8007bc6:	680e      	ldr	r6, [r1, #0]
 8007bc8:	bf08      	it	eq
 8007bca:	694b      	ldreq	r3, [r1, #20]
 8007bcc:	600f      	str	r7, [r1, #0]
 8007bce:	bf18      	it	ne
 8007bd0:	2300      	movne	r3, #0
 8007bd2:	eba6 0807 	sub.w	r8, r6, r7
 8007bd6:	608b      	str	r3, [r1, #8]
 8007bd8:	f1b8 0f00 	cmp.w	r8, #0
 8007bdc:	dde9      	ble.n	8007bb2 <__sflush_r+0xae>
 8007bde:	6a21      	ldr	r1, [r4, #32]
 8007be0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007be2:	4643      	mov	r3, r8
 8007be4:	463a      	mov	r2, r7
 8007be6:	4628      	mov	r0, r5
 8007be8:	47b0      	blx	r6
 8007bea:	2800      	cmp	r0, #0
 8007bec:	dc08      	bgt.n	8007c00 <__sflush_r+0xfc>
 8007bee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007bf2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007bf6:	81a3      	strh	r3, [r4, #12]
 8007bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8007bfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c00:	4407      	add	r7, r0
 8007c02:	eba8 0800 	sub.w	r8, r8, r0
 8007c06:	e7e7      	b.n	8007bd8 <__sflush_r+0xd4>
 8007c08:	20400001 	.word	0x20400001

08007c0c <_fflush_r>:
 8007c0c:	b538      	push	{r3, r4, r5, lr}
 8007c0e:	690b      	ldr	r3, [r1, #16]
 8007c10:	4605      	mov	r5, r0
 8007c12:	460c      	mov	r4, r1
 8007c14:	b913      	cbnz	r3, 8007c1c <_fflush_r+0x10>
 8007c16:	2500      	movs	r5, #0
 8007c18:	4628      	mov	r0, r5
 8007c1a:	bd38      	pop	{r3, r4, r5, pc}
 8007c1c:	b118      	cbz	r0, 8007c26 <_fflush_r+0x1a>
 8007c1e:	6a03      	ldr	r3, [r0, #32]
 8007c20:	b90b      	cbnz	r3, 8007c26 <_fflush_r+0x1a>
 8007c22:	f7ff fd5b 	bl	80076dc <__sinit>
 8007c26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d0f3      	beq.n	8007c16 <_fflush_r+0xa>
 8007c2e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007c30:	07d0      	lsls	r0, r2, #31
 8007c32:	d404      	bmi.n	8007c3e <_fflush_r+0x32>
 8007c34:	0599      	lsls	r1, r3, #22
 8007c36:	d402      	bmi.n	8007c3e <_fflush_r+0x32>
 8007c38:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007c3a:	f7ff fe42 	bl	80078c2 <__retarget_lock_acquire_recursive>
 8007c3e:	4628      	mov	r0, r5
 8007c40:	4621      	mov	r1, r4
 8007c42:	f7ff ff5f 	bl	8007b04 <__sflush_r>
 8007c46:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007c48:	07da      	lsls	r2, r3, #31
 8007c4a:	4605      	mov	r5, r0
 8007c4c:	d4e4      	bmi.n	8007c18 <_fflush_r+0xc>
 8007c4e:	89a3      	ldrh	r3, [r4, #12]
 8007c50:	059b      	lsls	r3, r3, #22
 8007c52:	d4e1      	bmi.n	8007c18 <_fflush_r+0xc>
 8007c54:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007c56:	f7ff fe35 	bl	80078c4 <__retarget_lock_release_recursive>
 8007c5a:	e7dd      	b.n	8007c18 <_fflush_r+0xc>

08007c5c <fiprintf>:
 8007c5c:	b40e      	push	{r1, r2, r3}
 8007c5e:	b503      	push	{r0, r1, lr}
 8007c60:	4601      	mov	r1, r0
 8007c62:	ab03      	add	r3, sp, #12
 8007c64:	4805      	ldr	r0, [pc, #20]	@ (8007c7c <fiprintf+0x20>)
 8007c66:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c6a:	6800      	ldr	r0, [r0, #0]
 8007c6c:	9301      	str	r3, [sp, #4]
 8007c6e:	f000 f847 	bl	8007d00 <_vfiprintf_r>
 8007c72:	b002      	add	sp, #8
 8007c74:	f85d eb04 	ldr.w	lr, [sp], #4
 8007c78:	b003      	add	sp, #12
 8007c7a:	4770      	bx	lr
 8007c7c:	20000024 	.word	0x20000024

08007c80 <_sbrk_r>:
 8007c80:	b538      	push	{r3, r4, r5, lr}
 8007c82:	4d06      	ldr	r5, [pc, #24]	@ (8007c9c <_sbrk_r+0x1c>)
 8007c84:	2300      	movs	r3, #0
 8007c86:	4604      	mov	r4, r0
 8007c88:	4608      	mov	r0, r1
 8007c8a:	602b      	str	r3, [r5, #0]
 8007c8c:	f7fc fb0c 	bl	80042a8 <_sbrk>
 8007c90:	1c43      	adds	r3, r0, #1
 8007c92:	d102      	bne.n	8007c9a <_sbrk_r+0x1a>
 8007c94:	682b      	ldr	r3, [r5, #0]
 8007c96:	b103      	cbz	r3, 8007c9a <_sbrk_r+0x1a>
 8007c98:	6023      	str	r3, [r4, #0]
 8007c9a:	bd38      	pop	{r3, r4, r5, pc}
 8007c9c:	20003b60 	.word	0x20003b60

08007ca0 <abort>:
 8007ca0:	b508      	push	{r3, lr}
 8007ca2:	2006      	movs	r0, #6
 8007ca4:	f000 fb8c 	bl	80083c0 <raise>
 8007ca8:	2001      	movs	r0, #1
 8007caa:	f7fc fa84 	bl	80041b6 <_exit>

08007cae <__sfputc_r>:
 8007cae:	6893      	ldr	r3, [r2, #8]
 8007cb0:	3b01      	subs	r3, #1
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	b410      	push	{r4}
 8007cb6:	6093      	str	r3, [r2, #8]
 8007cb8:	da08      	bge.n	8007ccc <__sfputc_r+0x1e>
 8007cba:	6994      	ldr	r4, [r2, #24]
 8007cbc:	42a3      	cmp	r3, r4
 8007cbe:	db01      	blt.n	8007cc4 <__sfputc_r+0x16>
 8007cc0:	290a      	cmp	r1, #10
 8007cc2:	d103      	bne.n	8007ccc <__sfputc_r+0x1e>
 8007cc4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007cc8:	f000 babe 	b.w	8008248 <__swbuf_r>
 8007ccc:	6813      	ldr	r3, [r2, #0]
 8007cce:	1c58      	adds	r0, r3, #1
 8007cd0:	6010      	str	r0, [r2, #0]
 8007cd2:	7019      	strb	r1, [r3, #0]
 8007cd4:	4608      	mov	r0, r1
 8007cd6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007cda:	4770      	bx	lr

08007cdc <__sfputs_r>:
 8007cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cde:	4606      	mov	r6, r0
 8007ce0:	460f      	mov	r7, r1
 8007ce2:	4614      	mov	r4, r2
 8007ce4:	18d5      	adds	r5, r2, r3
 8007ce6:	42ac      	cmp	r4, r5
 8007ce8:	d101      	bne.n	8007cee <__sfputs_r+0x12>
 8007cea:	2000      	movs	r0, #0
 8007cec:	e007      	b.n	8007cfe <__sfputs_r+0x22>
 8007cee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007cf2:	463a      	mov	r2, r7
 8007cf4:	4630      	mov	r0, r6
 8007cf6:	f7ff ffda 	bl	8007cae <__sfputc_r>
 8007cfa:	1c43      	adds	r3, r0, #1
 8007cfc:	d1f3      	bne.n	8007ce6 <__sfputs_r+0xa>
 8007cfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007d00 <_vfiprintf_r>:
 8007d00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d04:	460d      	mov	r5, r1
 8007d06:	b09d      	sub	sp, #116	@ 0x74
 8007d08:	4614      	mov	r4, r2
 8007d0a:	4698      	mov	r8, r3
 8007d0c:	4606      	mov	r6, r0
 8007d0e:	b118      	cbz	r0, 8007d18 <_vfiprintf_r+0x18>
 8007d10:	6a03      	ldr	r3, [r0, #32]
 8007d12:	b90b      	cbnz	r3, 8007d18 <_vfiprintf_r+0x18>
 8007d14:	f7ff fce2 	bl	80076dc <__sinit>
 8007d18:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007d1a:	07d9      	lsls	r1, r3, #31
 8007d1c:	d405      	bmi.n	8007d2a <_vfiprintf_r+0x2a>
 8007d1e:	89ab      	ldrh	r3, [r5, #12]
 8007d20:	059a      	lsls	r2, r3, #22
 8007d22:	d402      	bmi.n	8007d2a <_vfiprintf_r+0x2a>
 8007d24:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007d26:	f7ff fdcc 	bl	80078c2 <__retarget_lock_acquire_recursive>
 8007d2a:	89ab      	ldrh	r3, [r5, #12]
 8007d2c:	071b      	lsls	r3, r3, #28
 8007d2e:	d501      	bpl.n	8007d34 <_vfiprintf_r+0x34>
 8007d30:	692b      	ldr	r3, [r5, #16]
 8007d32:	b99b      	cbnz	r3, 8007d5c <_vfiprintf_r+0x5c>
 8007d34:	4629      	mov	r1, r5
 8007d36:	4630      	mov	r0, r6
 8007d38:	f000 fac4 	bl	80082c4 <__swsetup_r>
 8007d3c:	b170      	cbz	r0, 8007d5c <_vfiprintf_r+0x5c>
 8007d3e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007d40:	07dc      	lsls	r4, r3, #31
 8007d42:	d504      	bpl.n	8007d4e <_vfiprintf_r+0x4e>
 8007d44:	f04f 30ff 	mov.w	r0, #4294967295
 8007d48:	b01d      	add	sp, #116	@ 0x74
 8007d4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d4e:	89ab      	ldrh	r3, [r5, #12]
 8007d50:	0598      	lsls	r0, r3, #22
 8007d52:	d4f7      	bmi.n	8007d44 <_vfiprintf_r+0x44>
 8007d54:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007d56:	f7ff fdb5 	bl	80078c4 <__retarget_lock_release_recursive>
 8007d5a:	e7f3      	b.n	8007d44 <_vfiprintf_r+0x44>
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007d60:	2320      	movs	r3, #32
 8007d62:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007d66:	f8cd 800c 	str.w	r8, [sp, #12]
 8007d6a:	2330      	movs	r3, #48	@ 0x30
 8007d6c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007f1c <_vfiprintf_r+0x21c>
 8007d70:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007d74:	f04f 0901 	mov.w	r9, #1
 8007d78:	4623      	mov	r3, r4
 8007d7a:	469a      	mov	sl, r3
 8007d7c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007d80:	b10a      	cbz	r2, 8007d86 <_vfiprintf_r+0x86>
 8007d82:	2a25      	cmp	r2, #37	@ 0x25
 8007d84:	d1f9      	bne.n	8007d7a <_vfiprintf_r+0x7a>
 8007d86:	ebba 0b04 	subs.w	fp, sl, r4
 8007d8a:	d00b      	beq.n	8007da4 <_vfiprintf_r+0xa4>
 8007d8c:	465b      	mov	r3, fp
 8007d8e:	4622      	mov	r2, r4
 8007d90:	4629      	mov	r1, r5
 8007d92:	4630      	mov	r0, r6
 8007d94:	f7ff ffa2 	bl	8007cdc <__sfputs_r>
 8007d98:	3001      	adds	r0, #1
 8007d9a:	f000 80a7 	beq.w	8007eec <_vfiprintf_r+0x1ec>
 8007d9e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007da0:	445a      	add	r2, fp
 8007da2:	9209      	str	r2, [sp, #36]	@ 0x24
 8007da4:	f89a 3000 	ldrb.w	r3, [sl]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	f000 809f 	beq.w	8007eec <_vfiprintf_r+0x1ec>
 8007dae:	2300      	movs	r3, #0
 8007db0:	f04f 32ff 	mov.w	r2, #4294967295
 8007db4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007db8:	f10a 0a01 	add.w	sl, sl, #1
 8007dbc:	9304      	str	r3, [sp, #16]
 8007dbe:	9307      	str	r3, [sp, #28]
 8007dc0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007dc4:	931a      	str	r3, [sp, #104]	@ 0x68
 8007dc6:	4654      	mov	r4, sl
 8007dc8:	2205      	movs	r2, #5
 8007dca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007dce:	4853      	ldr	r0, [pc, #332]	@ (8007f1c <_vfiprintf_r+0x21c>)
 8007dd0:	f7f8 f9fe 	bl	80001d0 <memchr>
 8007dd4:	9a04      	ldr	r2, [sp, #16]
 8007dd6:	b9d8      	cbnz	r0, 8007e10 <_vfiprintf_r+0x110>
 8007dd8:	06d1      	lsls	r1, r2, #27
 8007dda:	bf44      	itt	mi
 8007ddc:	2320      	movmi	r3, #32
 8007dde:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007de2:	0713      	lsls	r3, r2, #28
 8007de4:	bf44      	itt	mi
 8007de6:	232b      	movmi	r3, #43	@ 0x2b
 8007de8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007dec:	f89a 3000 	ldrb.w	r3, [sl]
 8007df0:	2b2a      	cmp	r3, #42	@ 0x2a
 8007df2:	d015      	beq.n	8007e20 <_vfiprintf_r+0x120>
 8007df4:	9a07      	ldr	r2, [sp, #28]
 8007df6:	4654      	mov	r4, sl
 8007df8:	2000      	movs	r0, #0
 8007dfa:	f04f 0c0a 	mov.w	ip, #10
 8007dfe:	4621      	mov	r1, r4
 8007e00:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007e04:	3b30      	subs	r3, #48	@ 0x30
 8007e06:	2b09      	cmp	r3, #9
 8007e08:	d94b      	bls.n	8007ea2 <_vfiprintf_r+0x1a2>
 8007e0a:	b1b0      	cbz	r0, 8007e3a <_vfiprintf_r+0x13a>
 8007e0c:	9207      	str	r2, [sp, #28]
 8007e0e:	e014      	b.n	8007e3a <_vfiprintf_r+0x13a>
 8007e10:	eba0 0308 	sub.w	r3, r0, r8
 8007e14:	fa09 f303 	lsl.w	r3, r9, r3
 8007e18:	4313      	orrs	r3, r2
 8007e1a:	9304      	str	r3, [sp, #16]
 8007e1c:	46a2      	mov	sl, r4
 8007e1e:	e7d2      	b.n	8007dc6 <_vfiprintf_r+0xc6>
 8007e20:	9b03      	ldr	r3, [sp, #12]
 8007e22:	1d19      	adds	r1, r3, #4
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	9103      	str	r1, [sp, #12]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	bfbb      	ittet	lt
 8007e2c:	425b      	neglt	r3, r3
 8007e2e:	f042 0202 	orrlt.w	r2, r2, #2
 8007e32:	9307      	strge	r3, [sp, #28]
 8007e34:	9307      	strlt	r3, [sp, #28]
 8007e36:	bfb8      	it	lt
 8007e38:	9204      	strlt	r2, [sp, #16]
 8007e3a:	7823      	ldrb	r3, [r4, #0]
 8007e3c:	2b2e      	cmp	r3, #46	@ 0x2e
 8007e3e:	d10a      	bne.n	8007e56 <_vfiprintf_r+0x156>
 8007e40:	7863      	ldrb	r3, [r4, #1]
 8007e42:	2b2a      	cmp	r3, #42	@ 0x2a
 8007e44:	d132      	bne.n	8007eac <_vfiprintf_r+0x1ac>
 8007e46:	9b03      	ldr	r3, [sp, #12]
 8007e48:	1d1a      	adds	r2, r3, #4
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	9203      	str	r2, [sp, #12]
 8007e4e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007e52:	3402      	adds	r4, #2
 8007e54:	9305      	str	r3, [sp, #20]
 8007e56:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007f2c <_vfiprintf_r+0x22c>
 8007e5a:	7821      	ldrb	r1, [r4, #0]
 8007e5c:	2203      	movs	r2, #3
 8007e5e:	4650      	mov	r0, sl
 8007e60:	f7f8 f9b6 	bl	80001d0 <memchr>
 8007e64:	b138      	cbz	r0, 8007e76 <_vfiprintf_r+0x176>
 8007e66:	9b04      	ldr	r3, [sp, #16]
 8007e68:	eba0 000a 	sub.w	r0, r0, sl
 8007e6c:	2240      	movs	r2, #64	@ 0x40
 8007e6e:	4082      	lsls	r2, r0
 8007e70:	4313      	orrs	r3, r2
 8007e72:	3401      	adds	r4, #1
 8007e74:	9304      	str	r3, [sp, #16]
 8007e76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e7a:	4829      	ldr	r0, [pc, #164]	@ (8007f20 <_vfiprintf_r+0x220>)
 8007e7c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007e80:	2206      	movs	r2, #6
 8007e82:	f7f8 f9a5 	bl	80001d0 <memchr>
 8007e86:	2800      	cmp	r0, #0
 8007e88:	d03f      	beq.n	8007f0a <_vfiprintf_r+0x20a>
 8007e8a:	4b26      	ldr	r3, [pc, #152]	@ (8007f24 <_vfiprintf_r+0x224>)
 8007e8c:	bb1b      	cbnz	r3, 8007ed6 <_vfiprintf_r+0x1d6>
 8007e8e:	9b03      	ldr	r3, [sp, #12]
 8007e90:	3307      	adds	r3, #7
 8007e92:	f023 0307 	bic.w	r3, r3, #7
 8007e96:	3308      	adds	r3, #8
 8007e98:	9303      	str	r3, [sp, #12]
 8007e9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e9c:	443b      	add	r3, r7
 8007e9e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007ea0:	e76a      	b.n	8007d78 <_vfiprintf_r+0x78>
 8007ea2:	fb0c 3202 	mla	r2, ip, r2, r3
 8007ea6:	460c      	mov	r4, r1
 8007ea8:	2001      	movs	r0, #1
 8007eaa:	e7a8      	b.n	8007dfe <_vfiprintf_r+0xfe>
 8007eac:	2300      	movs	r3, #0
 8007eae:	3401      	adds	r4, #1
 8007eb0:	9305      	str	r3, [sp, #20]
 8007eb2:	4619      	mov	r1, r3
 8007eb4:	f04f 0c0a 	mov.w	ip, #10
 8007eb8:	4620      	mov	r0, r4
 8007eba:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007ebe:	3a30      	subs	r2, #48	@ 0x30
 8007ec0:	2a09      	cmp	r2, #9
 8007ec2:	d903      	bls.n	8007ecc <_vfiprintf_r+0x1cc>
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d0c6      	beq.n	8007e56 <_vfiprintf_r+0x156>
 8007ec8:	9105      	str	r1, [sp, #20]
 8007eca:	e7c4      	b.n	8007e56 <_vfiprintf_r+0x156>
 8007ecc:	fb0c 2101 	mla	r1, ip, r1, r2
 8007ed0:	4604      	mov	r4, r0
 8007ed2:	2301      	movs	r3, #1
 8007ed4:	e7f0      	b.n	8007eb8 <_vfiprintf_r+0x1b8>
 8007ed6:	ab03      	add	r3, sp, #12
 8007ed8:	9300      	str	r3, [sp, #0]
 8007eda:	462a      	mov	r2, r5
 8007edc:	4b12      	ldr	r3, [pc, #72]	@ (8007f28 <_vfiprintf_r+0x228>)
 8007ede:	a904      	add	r1, sp, #16
 8007ee0:	4630      	mov	r0, r6
 8007ee2:	f3af 8000 	nop.w
 8007ee6:	4607      	mov	r7, r0
 8007ee8:	1c78      	adds	r0, r7, #1
 8007eea:	d1d6      	bne.n	8007e9a <_vfiprintf_r+0x19a>
 8007eec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007eee:	07d9      	lsls	r1, r3, #31
 8007ef0:	d405      	bmi.n	8007efe <_vfiprintf_r+0x1fe>
 8007ef2:	89ab      	ldrh	r3, [r5, #12]
 8007ef4:	059a      	lsls	r2, r3, #22
 8007ef6:	d402      	bmi.n	8007efe <_vfiprintf_r+0x1fe>
 8007ef8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007efa:	f7ff fce3 	bl	80078c4 <__retarget_lock_release_recursive>
 8007efe:	89ab      	ldrh	r3, [r5, #12]
 8007f00:	065b      	lsls	r3, r3, #25
 8007f02:	f53f af1f 	bmi.w	8007d44 <_vfiprintf_r+0x44>
 8007f06:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007f08:	e71e      	b.n	8007d48 <_vfiprintf_r+0x48>
 8007f0a:	ab03      	add	r3, sp, #12
 8007f0c:	9300      	str	r3, [sp, #0]
 8007f0e:	462a      	mov	r2, r5
 8007f10:	4b05      	ldr	r3, [pc, #20]	@ (8007f28 <_vfiprintf_r+0x228>)
 8007f12:	a904      	add	r1, sp, #16
 8007f14:	4630      	mov	r0, r6
 8007f16:	f000 f879 	bl	800800c <_printf_i>
 8007f1a:	e7e4      	b.n	8007ee6 <_vfiprintf_r+0x1e6>
 8007f1c:	08009c9b 	.word	0x08009c9b
 8007f20:	08009ca5 	.word	0x08009ca5
 8007f24:	00000000 	.word	0x00000000
 8007f28:	08007cdd 	.word	0x08007cdd
 8007f2c:	08009ca1 	.word	0x08009ca1

08007f30 <_printf_common>:
 8007f30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f34:	4616      	mov	r6, r2
 8007f36:	4698      	mov	r8, r3
 8007f38:	688a      	ldr	r2, [r1, #8]
 8007f3a:	690b      	ldr	r3, [r1, #16]
 8007f3c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007f40:	4293      	cmp	r3, r2
 8007f42:	bfb8      	it	lt
 8007f44:	4613      	movlt	r3, r2
 8007f46:	6033      	str	r3, [r6, #0]
 8007f48:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007f4c:	4607      	mov	r7, r0
 8007f4e:	460c      	mov	r4, r1
 8007f50:	b10a      	cbz	r2, 8007f56 <_printf_common+0x26>
 8007f52:	3301      	adds	r3, #1
 8007f54:	6033      	str	r3, [r6, #0]
 8007f56:	6823      	ldr	r3, [r4, #0]
 8007f58:	0699      	lsls	r1, r3, #26
 8007f5a:	bf42      	ittt	mi
 8007f5c:	6833      	ldrmi	r3, [r6, #0]
 8007f5e:	3302      	addmi	r3, #2
 8007f60:	6033      	strmi	r3, [r6, #0]
 8007f62:	6825      	ldr	r5, [r4, #0]
 8007f64:	f015 0506 	ands.w	r5, r5, #6
 8007f68:	d106      	bne.n	8007f78 <_printf_common+0x48>
 8007f6a:	f104 0a19 	add.w	sl, r4, #25
 8007f6e:	68e3      	ldr	r3, [r4, #12]
 8007f70:	6832      	ldr	r2, [r6, #0]
 8007f72:	1a9b      	subs	r3, r3, r2
 8007f74:	42ab      	cmp	r3, r5
 8007f76:	dc26      	bgt.n	8007fc6 <_printf_common+0x96>
 8007f78:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007f7c:	6822      	ldr	r2, [r4, #0]
 8007f7e:	3b00      	subs	r3, #0
 8007f80:	bf18      	it	ne
 8007f82:	2301      	movne	r3, #1
 8007f84:	0692      	lsls	r2, r2, #26
 8007f86:	d42b      	bmi.n	8007fe0 <_printf_common+0xb0>
 8007f88:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007f8c:	4641      	mov	r1, r8
 8007f8e:	4638      	mov	r0, r7
 8007f90:	47c8      	blx	r9
 8007f92:	3001      	adds	r0, #1
 8007f94:	d01e      	beq.n	8007fd4 <_printf_common+0xa4>
 8007f96:	6823      	ldr	r3, [r4, #0]
 8007f98:	6922      	ldr	r2, [r4, #16]
 8007f9a:	f003 0306 	and.w	r3, r3, #6
 8007f9e:	2b04      	cmp	r3, #4
 8007fa0:	bf02      	ittt	eq
 8007fa2:	68e5      	ldreq	r5, [r4, #12]
 8007fa4:	6833      	ldreq	r3, [r6, #0]
 8007fa6:	1aed      	subeq	r5, r5, r3
 8007fa8:	68a3      	ldr	r3, [r4, #8]
 8007faa:	bf0c      	ite	eq
 8007fac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007fb0:	2500      	movne	r5, #0
 8007fb2:	4293      	cmp	r3, r2
 8007fb4:	bfc4      	itt	gt
 8007fb6:	1a9b      	subgt	r3, r3, r2
 8007fb8:	18ed      	addgt	r5, r5, r3
 8007fba:	2600      	movs	r6, #0
 8007fbc:	341a      	adds	r4, #26
 8007fbe:	42b5      	cmp	r5, r6
 8007fc0:	d11a      	bne.n	8007ff8 <_printf_common+0xc8>
 8007fc2:	2000      	movs	r0, #0
 8007fc4:	e008      	b.n	8007fd8 <_printf_common+0xa8>
 8007fc6:	2301      	movs	r3, #1
 8007fc8:	4652      	mov	r2, sl
 8007fca:	4641      	mov	r1, r8
 8007fcc:	4638      	mov	r0, r7
 8007fce:	47c8      	blx	r9
 8007fd0:	3001      	adds	r0, #1
 8007fd2:	d103      	bne.n	8007fdc <_printf_common+0xac>
 8007fd4:	f04f 30ff 	mov.w	r0, #4294967295
 8007fd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fdc:	3501      	adds	r5, #1
 8007fde:	e7c6      	b.n	8007f6e <_printf_common+0x3e>
 8007fe0:	18e1      	adds	r1, r4, r3
 8007fe2:	1c5a      	adds	r2, r3, #1
 8007fe4:	2030      	movs	r0, #48	@ 0x30
 8007fe6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007fea:	4422      	add	r2, r4
 8007fec:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007ff0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007ff4:	3302      	adds	r3, #2
 8007ff6:	e7c7      	b.n	8007f88 <_printf_common+0x58>
 8007ff8:	2301      	movs	r3, #1
 8007ffa:	4622      	mov	r2, r4
 8007ffc:	4641      	mov	r1, r8
 8007ffe:	4638      	mov	r0, r7
 8008000:	47c8      	blx	r9
 8008002:	3001      	adds	r0, #1
 8008004:	d0e6      	beq.n	8007fd4 <_printf_common+0xa4>
 8008006:	3601      	adds	r6, #1
 8008008:	e7d9      	b.n	8007fbe <_printf_common+0x8e>
	...

0800800c <_printf_i>:
 800800c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008010:	7e0f      	ldrb	r7, [r1, #24]
 8008012:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008014:	2f78      	cmp	r7, #120	@ 0x78
 8008016:	4691      	mov	r9, r2
 8008018:	4680      	mov	r8, r0
 800801a:	460c      	mov	r4, r1
 800801c:	469a      	mov	sl, r3
 800801e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008022:	d807      	bhi.n	8008034 <_printf_i+0x28>
 8008024:	2f62      	cmp	r7, #98	@ 0x62
 8008026:	d80a      	bhi.n	800803e <_printf_i+0x32>
 8008028:	2f00      	cmp	r7, #0
 800802a:	f000 80d1 	beq.w	80081d0 <_printf_i+0x1c4>
 800802e:	2f58      	cmp	r7, #88	@ 0x58
 8008030:	f000 80b8 	beq.w	80081a4 <_printf_i+0x198>
 8008034:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008038:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800803c:	e03a      	b.n	80080b4 <_printf_i+0xa8>
 800803e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008042:	2b15      	cmp	r3, #21
 8008044:	d8f6      	bhi.n	8008034 <_printf_i+0x28>
 8008046:	a101      	add	r1, pc, #4	@ (adr r1, 800804c <_printf_i+0x40>)
 8008048:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800804c:	080080a5 	.word	0x080080a5
 8008050:	080080b9 	.word	0x080080b9
 8008054:	08008035 	.word	0x08008035
 8008058:	08008035 	.word	0x08008035
 800805c:	08008035 	.word	0x08008035
 8008060:	08008035 	.word	0x08008035
 8008064:	080080b9 	.word	0x080080b9
 8008068:	08008035 	.word	0x08008035
 800806c:	08008035 	.word	0x08008035
 8008070:	08008035 	.word	0x08008035
 8008074:	08008035 	.word	0x08008035
 8008078:	080081b7 	.word	0x080081b7
 800807c:	080080e3 	.word	0x080080e3
 8008080:	08008171 	.word	0x08008171
 8008084:	08008035 	.word	0x08008035
 8008088:	08008035 	.word	0x08008035
 800808c:	080081d9 	.word	0x080081d9
 8008090:	08008035 	.word	0x08008035
 8008094:	080080e3 	.word	0x080080e3
 8008098:	08008035 	.word	0x08008035
 800809c:	08008035 	.word	0x08008035
 80080a0:	08008179 	.word	0x08008179
 80080a4:	6833      	ldr	r3, [r6, #0]
 80080a6:	1d1a      	adds	r2, r3, #4
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	6032      	str	r2, [r6, #0]
 80080ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80080b0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80080b4:	2301      	movs	r3, #1
 80080b6:	e09c      	b.n	80081f2 <_printf_i+0x1e6>
 80080b8:	6833      	ldr	r3, [r6, #0]
 80080ba:	6820      	ldr	r0, [r4, #0]
 80080bc:	1d19      	adds	r1, r3, #4
 80080be:	6031      	str	r1, [r6, #0]
 80080c0:	0606      	lsls	r6, r0, #24
 80080c2:	d501      	bpl.n	80080c8 <_printf_i+0xbc>
 80080c4:	681d      	ldr	r5, [r3, #0]
 80080c6:	e003      	b.n	80080d0 <_printf_i+0xc4>
 80080c8:	0645      	lsls	r5, r0, #25
 80080ca:	d5fb      	bpl.n	80080c4 <_printf_i+0xb8>
 80080cc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80080d0:	2d00      	cmp	r5, #0
 80080d2:	da03      	bge.n	80080dc <_printf_i+0xd0>
 80080d4:	232d      	movs	r3, #45	@ 0x2d
 80080d6:	426d      	negs	r5, r5
 80080d8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80080dc:	4858      	ldr	r0, [pc, #352]	@ (8008240 <_printf_i+0x234>)
 80080de:	230a      	movs	r3, #10
 80080e0:	e011      	b.n	8008106 <_printf_i+0xfa>
 80080e2:	6821      	ldr	r1, [r4, #0]
 80080e4:	6833      	ldr	r3, [r6, #0]
 80080e6:	0608      	lsls	r0, r1, #24
 80080e8:	f853 5b04 	ldr.w	r5, [r3], #4
 80080ec:	d402      	bmi.n	80080f4 <_printf_i+0xe8>
 80080ee:	0649      	lsls	r1, r1, #25
 80080f0:	bf48      	it	mi
 80080f2:	b2ad      	uxthmi	r5, r5
 80080f4:	2f6f      	cmp	r7, #111	@ 0x6f
 80080f6:	4852      	ldr	r0, [pc, #328]	@ (8008240 <_printf_i+0x234>)
 80080f8:	6033      	str	r3, [r6, #0]
 80080fa:	bf14      	ite	ne
 80080fc:	230a      	movne	r3, #10
 80080fe:	2308      	moveq	r3, #8
 8008100:	2100      	movs	r1, #0
 8008102:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008106:	6866      	ldr	r6, [r4, #4]
 8008108:	60a6      	str	r6, [r4, #8]
 800810a:	2e00      	cmp	r6, #0
 800810c:	db05      	blt.n	800811a <_printf_i+0x10e>
 800810e:	6821      	ldr	r1, [r4, #0]
 8008110:	432e      	orrs	r6, r5
 8008112:	f021 0104 	bic.w	r1, r1, #4
 8008116:	6021      	str	r1, [r4, #0]
 8008118:	d04b      	beq.n	80081b2 <_printf_i+0x1a6>
 800811a:	4616      	mov	r6, r2
 800811c:	fbb5 f1f3 	udiv	r1, r5, r3
 8008120:	fb03 5711 	mls	r7, r3, r1, r5
 8008124:	5dc7      	ldrb	r7, [r0, r7]
 8008126:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800812a:	462f      	mov	r7, r5
 800812c:	42bb      	cmp	r3, r7
 800812e:	460d      	mov	r5, r1
 8008130:	d9f4      	bls.n	800811c <_printf_i+0x110>
 8008132:	2b08      	cmp	r3, #8
 8008134:	d10b      	bne.n	800814e <_printf_i+0x142>
 8008136:	6823      	ldr	r3, [r4, #0]
 8008138:	07df      	lsls	r7, r3, #31
 800813a:	d508      	bpl.n	800814e <_printf_i+0x142>
 800813c:	6923      	ldr	r3, [r4, #16]
 800813e:	6861      	ldr	r1, [r4, #4]
 8008140:	4299      	cmp	r1, r3
 8008142:	bfde      	ittt	le
 8008144:	2330      	movle	r3, #48	@ 0x30
 8008146:	f806 3c01 	strble.w	r3, [r6, #-1]
 800814a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800814e:	1b92      	subs	r2, r2, r6
 8008150:	6122      	str	r2, [r4, #16]
 8008152:	f8cd a000 	str.w	sl, [sp]
 8008156:	464b      	mov	r3, r9
 8008158:	aa03      	add	r2, sp, #12
 800815a:	4621      	mov	r1, r4
 800815c:	4640      	mov	r0, r8
 800815e:	f7ff fee7 	bl	8007f30 <_printf_common>
 8008162:	3001      	adds	r0, #1
 8008164:	d14a      	bne.n	80081fc <_printf_i+0x1f0>
 8008166:	f04f 30ff 	mov.w	r0, #4294967295
 800816a:	b004      	add	sp, #16
 800816c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008170:	6823      	ldr	r3, [r4, #0]
 8008172:	f043 0320 	orr.w	r3, r3, #32
 8008176:	6023      	str	r3, [r4, #0]
 8008178:	4832      	ldr	r0, [pc, #200]	@ (8008244 <_printf_i+0x238>)
 800817a:	2778      	movs	r7, #120	@ 0x78
 800817c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008180:	6823      	ldr	r3, [r4, #0]
 8008182:	6831      	ldr	r1, [r6, #0]
 8008184:	061f      	lsls	r7, r3, #24
 8008186:	f851 5b04 	ldr.w	r5, [r1], #4
 800818a:	d402      	bmi.n	8008192 <_printf_i+0x186>
 800818c:	065f      	lsls	r7, r3, #25
 800818e:	bf48      	it	mi
 8008190:	b2ad      	uxthmi	r5, r5
 8008192:	6031      	str	r1, [r6, #0]
 8008194:	07d9      	lsls	r1, r3, #31
 8008196:	bf44      	itt	mi
 8008198:	f043 0320 	orrmi.w	r3, r3, #32
 800819c:	6023      	strmi	r3, [r4, #0]
 800819e:	b11d      	cbz	r5, 80081a8 <_printf_i+0x19c>
 80081a0:	2310      	movs	r3, #16
 80081a2:	e7ad      	b.n	8008100 <_printf_i+0xf4>
 80081a4:	4826      	ldr	r0, [pc, #152]	@ (8008240 <_printf_i+0x234>)
 80081a6:	e7e9      	b.n	800817c <_printf_i+0x170>
 80081a8:	6823      	ldr	r3, [r4, #0]
 80081aa:	f023 0320 	bic.w	r3, r3, #32
 80081ae:	6023      	str	r3, [r4, #0]
 80081b0:	e7f6      	b.n	80081a0 <_printf_i+0x194>
 80081b2:	4616      	mov	r6, r2
 80081b4:	e7bd      	b.n	8008132 <_printf_i+0x126>
 80081b6:	6833      	ldr	r3, [r6, #0]
 80081b8:	6825      	ldr	r5, [r4, #0]
 80081ba:	6961      	ldr	r1, [r4, #20]
 80081bc:	1d18      	adds	r0, r3, #4
 80081be:	6030      	str	r0, [r6, #0]
 80081c0:	062e      	lsls	r6, r5, #24
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	d501      	bpl.n	80081ca <_printf_i+0x1be>
 80081c6:	6019      	str	r1, [r3, #0]
 80081c8:	e002      	b.n	80081d0 <_printf_i+0x1c4>
 80081ca:	0668      	lsls	r0, r5, #25
 80081cc:	d5fb      	bpl.n	80081c6 <_printf_i+0x1ba>
 80081ce:	8019      	strh	r1, [r3, #0]
 80081d0:	2300      	movs	r3, #0
 80081d2:	6123      	str	r3, [r4, #16]
 80081d4:	4616      	mov	r6, r2
 80081d6:	e7bc      	b.n	8008152 <_printf_i+0x146>
 80081d8:	6833      	ldr	r3, [r6, #0]
 80081da:	1d1a      	adds	r2, r3, #4
 80081dc:	6032      	str	r2, [r6, #0]
 80081de:	681e      	ldr	r6, [r3, #0]
 80081e0:	6862      	ldr	r2, [r4, #4]
 80081e2:	2100      	movs	r1, #0
 80081e4:	4630      	mov	r0, r6
 80081e6:	f7f7 fff3 	bl	80001d0 <memchr>
 80081ea:	b108      	cbz	r0, 80081f0 <_printf_i+0x1e4>
 80081ec:	1b80      	subs	r0, r0, r6
 80081ee:	6060      	str	r0, [r4, #4]
 80081f0:	6863      	ldr	r3, [r4, #4]
 80081f2:	6123      	str	r3, [r4, #16]
 80081f4:	2300      	movs	r3, #0
 80081f6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80081fa:	e7aa      	b.n	8008152 <_printf_i+0x146>
 80081fc:	6923      	ldr	r3, [r4, #16]
 80081fe:	4632      	mov	r2, r6
 8008200:	4649      	mov	r1, r9
 8008202:	4640      	mov	r0, r8
 8008204:	47d0      	blx	sl
 8008206:	3001      	adds	r0, #1
 8008208:	d0ad      	beq.n	8008166 <_printf_i+0x15a>
 800820a:	6823      	ldr	r3, [r4, #0]
 800820c:	079b      	lsls	r3, r3, #30
 800820e:	d413      	bmi.n	8008238 <_printf_i+0x22c>
 8008210:	68e0      	ldr	r0, [r4, #12]
 8008212:	9b03      	ldr	r3, [sp, #12]
 8008214:	4298      	cmp	r0, r3
 8008216:	bfb8      	it	lt
 8008218:	4618      	movlt	r0, r3
 800821a:	e7a6      	b.n	800816a <_printf_i+0x15e>
 800821c:	2301      	movs	r3, #1
 800821e:	4632      	mov	r2, r6
 8008220:	4649      	mov	r1, r9
 8008222:	4640      	mov	r0, r8
 8008224:	47d0      	blx	sl
 8008226:	3001      	adds	r0, #1
 8008228:	d09d      	beq.n	8008166 <_printf_i+0x15a>
 800822a:	3501      	adds	r5, #1
 800822c:	68e3      	ldr	r3, [r4, #12]
 800822e:	9903      	ldr	r1, [sp, #12]
 8008230:	1a5b      	subs	r3, r3, r1
 8008232:	42ab      	cmp	r3, r5
 8008234:	dcf2      	bgt.n	800821c <_printf_i+0x210>
 8008236:	e7eb      	b.n	8008210 <_printf_i+0x204>
 8008238:	2500      	movs	r5, #0
 800823a:	f104 0619 	add.w	r6, r4, #25
 800823e:	e7f5      	b.n	800822c <_printf_i+0x220>
 8008240:	08009cac 	.word	0x08009cac
 8008244:	08009cbd 	.word	0x08009cbd

08008248 <__swbuf_r>:
 8008248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800824a:	460e      	mov	r6, r1
 800824c:	4614      	mov	r4, r2
 800824e:	4605      	mov	r5, r0
 8008250:	b118      	cbz	r0, 800825a <__swbuf_r+0x12>
 8008252:	6a03      	ldr	r3, [r0, #32]
 8008254:	b90b      	cbnz	r3, 800825a <__swbuf_r+0x12>
 8008256:	f7ff fa41 	bl	80076dc <__sinit>
 800825a:	69a3      	ldr	r3, [r4, #24]
 800825c:	60a3      	str	r3, [r4, #8]
 800825e:	89a3      	ldrh	r3, [r4, #12]
 8008260:	071a      	lsls	r2, r3, #28
 8008262:	d501      	bpl.n	8008268 <__swbuf_r+0x20>
 8008264:	6923      	ldr	r3, [r4, #16]
 8008266:	b943      	cbnz	r3, 800827a <__swbuf_r+0x32>
 8008268:	4621      	mov	r1, r4
 800826a:	4628      	mov	r0, r5
 800826c:	f000 f82a 	bl	80082c4 <__swsetup_r>
 8008270:	b118      	cbz	r0, 800827a <__swbuf_r+0x32>
 8008272:	f04f 37ff 	mov.w	r7, #4294967295
 8008276:	4638      	mov	r0, r7
 8008278:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800827a:	6823      	ldr	r3, [r4, #0]
 800827c:	6922      	ldr	r2, [r4, #16]
 800827e:	1a98      	subs	r0, r3, r2
 8008280:	6963      	ldr	r3, [r4, #20]
 8008282:	b2f6      	uxtb	r6, r6
 8008284:	4283      	cmp	r3, r0
 8008286:	4637      	mov	r7, r6
 8008288:	dc05      	bgt.n	8008296 <__swbuf_r+0x4e>
 800828a:	4621      	mov	r1, r4
 800828c:	4628      	mov	r0, r5
 800828e:	f7ff fcbd 	bl	8007c0c <_fflush_r>
 8008292:	2800      	cmp	r0, #0
 8008294:	d1ed      	bne.n	8008272 <__swbuf_r+0x2a>
 8008296:	68a3      	ldr	r3, [r4, #8]
 8008298:	3b01      	subs	r3, #1
 800829a:	60a3      	str	r3, [r4, #8]
 800829c:	6823      	ldr	r3, [r4, #0]
 800829e:	1c5a      	adds	r2, r3, #1
 80082a0:	6022      	str	r2, [r4, #0]
 80082a2:	701e      	strb	r6, [r3, #0]
 80082a4:	6962      	ldr	r2, [r4, #20]
 80082a6:	1c43      	adds	r3, r0, #1
 80082a8:	429a      	cmp	r2, r3
 80082aa:	d004      	beq.n	80082b6 <__swbuf_r+0x6e>
 80082ac:	89a3      	ldrh	r3, [r4, #12]
 80082ae:	07db      	lsls	r3, r3, #31
 80082b0:	d5e1      	bpl.n	8008276 <__swbuf_r+0x2e>
 80082b2:	2e0a      	cmp	r6, #10
 80082b4:	d1df      	bne.n	8008276 <__swbuf_r+0x2e>
 80082b6:	4621      	mov	r1, r4
 80082b8:	4628      	mov	r0, r5
 80082ba:	f7ff fca7 	bl	8007c0c <_fflush_r>
 80082be:	2800      	cmp	r0, #0
 80082c0:	d0d9      	beq.n	8008276 <__swbuf_r+0x2e>
 80082c2:	e7d6      	b.n	8008272 <__swbuf_r+0x2a>

080082c4 <__swsetup_r>:
 80082c4:	b538      	push	{r3, r4, r5, lr}
 80082c6:	4b29      	ldr	r3, [pc, #164]	@ (800836c <__swsetup_r+0xa8>)
 80082c8:	4605      	mov	r5, r0
 80082ca:	6818      	ldr	r0, [r3, #0]
 80082cc:	460c      	mov	r4, r1
 80082ce:	b118      	cbz	r0, 80082d8 <__swsetup_r+0x14>
 80082d0:	6a03      	ldr	r3, [r0, #32]
 80082d2:	b90b      	cbnz	r3, 80082d8 <__swsetup_r+0x14>
 80082d4:	f7ff fa02 	bl	80076dc <__sinit>
 80082d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80082dc:	0719      	lsls	r1, r3, #28
 80082de:	d422      	bmi.n	8008326 <__swsetup_r+0x62>
 80082e0:	06da      	lsls	r2, r3, #27
 80082e2:	d407      	bmi.n	80082f4 <__swsetup_r+0x30>
 80082e4:	2209      	movs	r2, #9
 80082e6:	602a      	str	r2, [r5, #0]
 80082e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80082ec:	81a3      	strh	r3, [r4, #12]
 80082ee:	f04f 30ff 	mov.w	r0, #4294967295
 80082f2:	e033      	b.n	800835c <__swsetup_r+0x98>
 80082f4:	0758      	lsls	r0, r3, #29
 80082f6:	d512      	bpl.n	800831e <__swsetup_r+0x5a>
 80082f8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80082fa:	b141      	cbz	r1, 800830e <__swsetup_r+0x4a>
 80082fc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008300:	4299      	cmp	r1, r3
 8008302:	d002      	beq.n	800830a <__swsetup_r+0x46>
 8008304:	4628      	mov	r0, r5
 8008306:	f7ff fafd 	bl	8007904 <_free_r>
 800830a:	2300      	movs	r3, #0
 800830c:	6363      	str	r3, [r4, #52]	@ 0x34
 800830e:	89a3      	ldrh	r3, [r4, #12]
 8008310:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008314:	81a3      	strh	r3, [r4, #12]
 8008316:	2300      	movs	r3, #0
 8008318:	6063      	str	r3, [r4, #4]
 800831a:	6923      	ldr	r3, [r4, #16]
 800831c:	6023      	str	r3, [r4, #0]
 800831e:	89a3      	ldrh	r3, [r4, #12]
 8008320:	f043 0308 	orr.w	r3, r3, #8
 8008324:	81a3      	strh	r3, [r4, #12]
 8008326:	6923      	ldr	r3, [r4, #16]
 8008328:	b94b      	cbnz	r3, 800833e <__swsetup_r+0x7a>
 800832a:	89a3      	ldrh	r3, [r4, #12]
 800832c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008330:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008334:	d003      	beq.n	800833e <__swsetup_r+0x7a>
 8008336:	4621      	mov	r1, r4
 8008338:	4628      	mov	r0, r5
 800833a:	f000 f883 	bl	8008444 <__smakebuf_r>
 800833e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008342:	f013 0201 	ands.w	r2, r3, #1
 8008346:	d00a      	beq.n	800835e <__swsetup_r+0x9a>
 8008348:	2200      	movs	r2, #0
 800834a:	60a2      	str	r2, [r4, #8]
 800834c:	6962      	ldr	r2, [r4, #20]
 800834e:	4252      	negs	r2, r2
 8008350:	61a2      	str	r2, [r4, #24]
 8008352:	6922      	ldr	r2, [r4, #16]
 8008354:	b942      	cbnz	r2, 8008368 <__swsetup_r+0xa4>
 8008356:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800835a:	d1c5      	bne.n	80082e8 <__swsetup_r+0x24>
 800835c:	bd38      	pop	{r3, r4, r5, pc}
 800835e:	0799      	lsls	r1, r3, #30
 8008360:	bf58      	it	pl
 8008362:	6962      	ldrpl	r2, [r4, #20]
 8008364:	60a2      	str	r2, [r4, #8]
 8008366:	e7f4      	b.n	8008352 <__swsetup_r+0x8e>
 8008368:	2000      	movs	r0, #0
 800836a:	e7f7      	b.n	800835c <__swsetup_r+0x98>
 800836c:	20000024 	.word	0x20000024

08008370 <_raise_r>:
 8008370:	291f      	cmp	r1, #31
 8008372:	b538      	push	{r3, r4, r5, lr}
 8008374:	4605      	mov	r5, r0
 8008376:	460c      	mov	r4, r1
 8008378:	d904      	bls.n	8008384 <_raise_r+0x14>
 800837a:	2316      	movs	r3, #22
 800837c:	6003      	str	r3, [r0, #0]
 800837e:	f04f 30ff 	mov.w	r0, #4294967295
 8008382:	bd38      	pop	{r3, r4, r5, pc}
 8008384:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008386:	b112      	cbz	r2, 800838e <_raise_r+0x1e>
 8008388:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800838c:	b94b      	cbnz	r3, 80083a2 <_raise_r+0x32>
 800838e:	4628      	mov	r0, r5
 8008390:	f000 f830 	bl	80083f4 <_getpid_r>
 8008394:	4622      	mov	r2, r4
 8008396:	4601      	mov	r1, r0
 8008398:	4628      	mov	r0, r5
 800839a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800839e:	f000 b817 	b.w	80083d0 <_kill_r>
 80083a2:	2b01      	cmp	r3, #1
 80083a4:	d00a      	beq.n	80083bc <_raise_r+0x4c>
 80083a6:	1c59      	adds	r1, r3, #1
 80083a8:	d103      	bne.n	80083b2 <_raise_r+0x42>
 80083aa:	2316      	movs	r3, #22
 80083ac:	6003      	str	r3, [r0, #0]
 80083ae:	2001      	movs	r0, #1
 80083b0:	e7e7      	b.n	8008382 <_raise_r+0x12>
 80083b2:	2100      	movs	r1, #0
 80083b4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80083b8:	4620      	mov	r0, r4
 80083ba:	4798      	blx	r3
 80083bc:	2000      	movs	r0, #0
 80083be:	e7e0      	b.n	8008382 <_raise_r+0x12>

080083c0 <raise>:
 80083c0:	4b02      	ldr	r3, [pc, #8]	@ (80083cc <raise+0xc>)
 80083c2:	4601      	mov	r1, r0
 80083c4:	6818      	ldr	r0, [r3, #0]
 80083c6:	f7ff bfd3 	b.w	8008370 <_raise_r>
 80083ca:	bf00      	nop
 80083cc:	20000024 	.word	0x20000024

080083d0 <_kill_r>:
 80083d0:	b538      	push	{r3, r4, r5, lr}
 80083d2:	4d07      	ldr	r5, [pc, #28]	@ (80083f0 <_kill_r+0x20>)
 80083d4:	2300      	movs	r3, #0
 80083d6:	4604      	mov	r4, r0
 80083d8:	4608      	mov	r0, r1
 80083da:	4611      	mov	r1, r2
 80083dc:	602b      	str	r3, [r5, #0]
 80083de:	f7fb feda 	bl	8004196 <_kill>
 80083e2:	1c43      	adds	r3, r0, #1
 80083e4:	d102      	bne.n	80083ec <_kill_r+0x1c>
 80083e6:	682b      	ldr	r3, [r5, #0]
 80083e8:	b103      	cbz	r3, 80083ec <_kill_r+0x1c>
 80083ea:	6023      	str	r3, [r4, #0]
 80083ec:	bd38      	pop	{r3, r4, r5, pc}
 80083ee:	bf00      	nop
 80083f0:	20003b60 	.word	0x20003b60

080083f4 <_getpid_r>:
 80083f4:	f7fb bec7 	b.w	8004186 <_getpid>

080083f8 <__swhatbuf_r>:
 80083f8:	b570      	push	{r4, r5, r6, lr}
 80083fa:	460c      	mov	r4, r1
 80083fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008400:	2900      	cmp	r1, #0
 8008402:	b096      	sub	sp, #88	@ 0x58
 8008404:	4615      	mov	r5, r2
 8008406:	461e      	mov	r6, r3
 8008408:	da0d      	bge.n	8008426 <__swhatbuf_r+0x2e>
 800840a:	89a3      	ldrh	r3, [r4, #12]
 800840c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008410:	f04f 0100 	mov.w	r1, #0
 8008414:	bf14      	ite	ne
 8008416:	2340      	movne	r3, #64	@ 0x40
 8008418:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800841c:	2000      	movs	r0, #0
 800841e:	6031      	str	r1, [r6, #0]
 8008420:	602b      	str	r3, [r5, #0]
 8008422:	b016      	add	sp, #88	@ 0x58
 8008424:	bd70      	pop	{r4, r5, r6, pc}
 8008426:	466a      	mov	r2, sp
 8008428:	f000 f848 	bl	80084bc <_fstat_r>
 800842c:	2800      	cmp	r0, #0
 800842e:	dbec      	blt.n	800840a <__swhatbuf_r+0x12>
 8008430:	9901      	ldr	r1, [sp, #4]
 8008432:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008436:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800843a:	4259      	negs	r1, r3
 800843c:	4159      	adcs	r1, r3
 800843e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008442:	e7eb      	b.n	800841c <__swhatbuf_r+0x24>

08008444 <__smakebuf_r>:
 8008444:	898b      	ldrh	r3, [r1, #12]
 8008446:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008448:	079d      	lsls	r5, r3, #30
 800844a:	4606      	mov	r6, r0
 800844c:	460c      	mov	r4, r1
 800844e:	d507      	bpl.n	8008460 <__smakebuf_r+0x1c>
 8008450:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008454:	6023      	str	r3, [r4, #0]
 8008456:	6123      	str	r3, [r4, #16]
 8008458:	2301      	movs	r3, #1
 800845a:	6163      	str	r3, [r4, #20]
 800845c:	b003      	add	sp, #12
 800845e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008460:	ab01      	add	r3, sp, #4
 8008462:	466a      	mov	r2, sp
 8008464:	f7ff ffc8 	bl	80083f8 <__swhatbuf_r>
 8008468:	9f00      	ldr	r7, [sp, #0]
 800846a:	4605      	mov	r5, r0
 800846c:	4639      	mov	r1, r7
 800846e:	4630      	mov	r0, r6
 8008470:	f7ff fabc 	bl	80079ec <_malloc_r>
 8008474:	b948      	cbnz	r0, 800848a <__smakebuf_r+0x46>
 8008476:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800847a:	059a      	lsls	r2, r3, #22
 800847c:	d4ee      	bmi.n	800845c <__smakebuf_r+0x18>
 800847e:	f023 0303 	bic.w	r3, r3, #3
 8008482:	f043 0302 	orr.w	r3, r3, #2
 8008486:	81a3      	strh	r3, [r4, #12]
 8008488:	e7e2      	b.n	8008450 <__smakebuf_r+0xc>
 800848a:	89a3      	ldrh	r3, [r4, #12]
 800848c:	6020      	str	r0, [r4, #0]
 800848e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008492:	81a3      	strh	r3, [r4, #12]
 8008494:	9b01      	ldr	r3, [sp, #4]
 8008496:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800849a:	b15b      	cbz	r3, 80084b4 <__smakebuf_r+0x70>
 800849c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80084a0:	4630      	mov	r0, r6
 80084a2:	f000 f81d 	bl	80084e0 <_isatty_r>
 80084a6:	b128      	cbz	r0, 80084b4 <__smakebuf_r+0x70>
 80084a8:	89a3      	ldrh	r3, [r4, #12]
 80084aa:	f023 0303 	bic.w	r3, r3, #3
 80084ae:	f043 0301 	orr.w	r3, r3, #1
 80084b2:	81a3      	strh	r3, [r4, #12]
 80084b4:	89a3      	ldrh	r3, [r4, #12]
 80084b6:	431d      	orrs	r5, r3
 80084b8:	81a5      	strh	r5, [r4, #12]
 80084ba:	e7cf      	b.n	800845c <__smakebuf_r+0x18>

080084bc <_fstat_r>:
 80084bc:	b538      	push	{r3, r4, r5, lr}
 80084be:	4d07      	ldr	r5, [pc, #28]	@ (80084dc <_fstat_r+0x20>)
 80084c0:	2300      	movs	r3, #0
 80084c2:	4604      	mov	r4, r0
 80084c4:	4608      	mov	r0, r1
 80084c6:	4611      	mov	r1, r2
 80084c8:	602b      	str	r3, [r5, #0]
 80084ca:	f7fb fec4 	bl	8004256 <_fstat>
 80084ce:	1c43      	adds	r3, r0, #1
 80084d0:	d102      	bne.n	80084d8 <_fstat_r+0x1c>
 80084d2:	682b      	ldr	r3, [r5, #0]
 80084d4:	b103      	cbz	r3, 80084d8 <_fstat_r+0x1c>
 80084d6:	6023      	str	r3, [r4, #0]
 80084d8:	bd38      	pop	{r3, r4, r5, pc}
 80084da:	bf00      	nop
 80084dc:	20003b60 	.word	0x20003b60

080084e0 <_isatty_r>:
 80084e0:	b538      	push	{r3, r4, r5, lr}
 80084e2:	4d06      	ldr	r5, [pc, #24]	@ (80084fc <_isatty_r+0x1c>)
 80084e4:	2300      	movs	r3, #0
 80084e6:	4604      	mov	r4, r0
 80084e8:	4608      	mov	r0, r1
 80084ea:	602b      	str	r3, [r5, #0]
 80084ec:	f7fb fec3 	bl	8004276 <_isatty>
 80084f0:	1c43      	adds	r3, r0, #1
 80084f2:	d102      	bne.n	80084fa <_isatty_r+0x1a>
 80084f4:	682b      	ldr	r3, [r5, #0]
 80084f6:	b103      	cbz	r3, 80084fa <_isatty_r+0x1a>
 80084f8:	6023      	str	r3, [r4, #0]
 80084fa:	bd38      	pop	{r3, r4, r5, pc}
 80084fc:	20003b60 	.word	0x20003b60

08008500 <pow>:
 8008500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008502:	ed2d 8b02 	vpush	{d8}
 8008506:	eeb0 8a40 	vmov.f32	s16, s0
 800850a:	eef0 8a60 	vmov.f32	s17, s1
 800850e:	ec55 4b11 	vmov	r4, r5, d1
 8008512:	f000 f975 	bl	8008800 <__ieee754_pow>
 8008516:	4622      	mov	r2, r4
 8008518:	462b      	mov	r3, r5
 800851a:	4620      	mov	r0, r4
 800851c:	4629      	mov	r1, r5
 800851e:	ec57 6b10 	vmov	r6, r7, d0
 8008522:	f7f8 fafb 	bl	8000b1c <__aeabi_dcmpun>
 8008526:	2800      	cmp	r0, #0
 8008528:	d13b      	bne.n	80085a2 <pow+0xa2>
 800852a:	ec51 0b18 	vmov	r0, r1, d8
 800852e:	2200      	movs	r2, #0
 8008530:	2300      	movs	r3, #0
 8008532:	f7f8 fac1 	bl	8000ab8 <__aeabi_dcmpeq>
 8008536:	b1b8      	cbz	r0, 8008568 <pow+0x68>
 8008538:	2200      	movs	r2, #0
 800853a:	2300      	movs	r3, #0
 800853c:	4620      	mov	r0, r4
 800853e:	4629      	mov	r1, r5
 8008540:	f7f8 faba 	bl	8000ab8 <__aeabi_dcmpeq>
 8008544:	2800      	cmp	r0, #0
 8008546:	d146      	bne.n	80085d6 <pow+0xd6>
 8008548:	ec45 4b10 	vmov	d0, r4, r5
 800854c:	f000 f874 	bl	8008638 <finite>
 8008550:	b338      	cbz	r0, 80085a2 <pow+0xa2>
 8008552:	2200      	movs	r2, #0
 8008554:	2300      	movs	r3, #0
 8008556:	4620      	mov	r0, r4
 8008558:	4629      	mov	r1, r5
 800855a:	f7f8 fab7 	bl	8000acc <__aeabi_dcmplt>
 800855e:	b300      	cbz	r0, 80085a2 <pow+0xa2>
 8008560:	f7ff f984 	bl	800786c <__errno>
 8008564:	2322      	movs	r3, #34	@ 0x22
 8008566:	e01b      	b.n	80085a0 <pow+0xa0>
 8008568:	ec47 6b10 	vmov	d0, r6, r7
 800856c:	f000 f864 	bl	8008638 <finite>
 8008570:	b9e0      	cbnz	r0, 80085ac <pow+0xac>
 8008572:	eeb0 0a48 	vmov.f32	s0, s16
 8008576:	eef0 0a68 	vmov.f32	s1, s17
 800857a:	f000 f85d 	bl	8008638 <finite>
 800857e:	b1a8      	cbz	r0, 80085ac <pow+0xac>
 8008580:	ec45 4b10 	vmov	d0, r4, r5
 8008584:	f000 f858 	bl	8008638 <finite>
 8008588:	b180      	cbz	r0, 80085ac <pow+0xac>
 800858a:	4632      	mov	r2, r6
 800858c:	463b      	mov	r3, r7
 800858e:	4630      	mov	r0, r6
 8008590:	4639      	mov	r1, r7
 8008592:	f7f8 fac3 	bl	8000b1c <__aeabi_dcmpun>
 8008596:	2800      	cmp	r0, #0
 8008598:	d0e2      	beq.n	8008560 <pow+0x60>
 800859a:	f7ff f967 	bl	800786c <__errno>
 800859e:	2321      	movs	r3, #33	@ 0x21
 80085a0:	6003      	str	r3, [r0, #0]
 80085a2:	ecbd 8b02 	vpop	{d8}
 80085a6:	ec47 6b10 	vmov	d0, r6, r7
 80085aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80085ac:	2200      	movs	r2, #0
 80085ae:	2300      	movs	r3, #0
 80085b0:	4630      	mov	r0, r6
 80085b2:	4639      	mov	r1, r7
 80085b4:	f7f8 fa80 	bl	8000ab8 <__aeabi_dcmpeq>
 80085b8:	2800      	cmp	r0, #0
 80085ba:	d0f2      	beq.n	80085a2 <pow+0xa2>
 80085bc:	eeb0 0a48 	vmov.f32	s0, s16
 80085c0:	eef0 0a68 	vmov.f32	s1, s17
 80085c4:	f000 f838 	bl	8008638 <finite>
 80085c8:	2800      	cmp	r0, #0
 80085ca:	d0ea      	beq.n	80085a2 <pow+0xa2>
 80085cc:	ec45 4b10 	vmov	d0, r4, r5
 80085d0:	f000 f832 	bl	8008638 <finite>
 80085d4:	e7c3      	b.n	800855e <pow+0x5e>
 80085d6:	4f01      	ldr	r7, [pc, #4]	@ (80085dc <pow+0xdc>)
 80085d8:	2600      	movs	r6, #0
 80085da:	e7e2      	b.n	80085a2 <pow+0xa2>
 80085dc:	3ff00000 	.word	0x3ff00000

080085e0 <sqrt>:
 80085e0:	b538      	push	{r3, r4, r5, lr}
 80085e2:	ed2d 8b02 	vpush	{d8}
 80085e6:	ec55 4b10 	vmov	r4, r5, d0
 80085ea:	f000 f831 	bl	8008650 <__ieee754_sqrt>
 80085ee:	4622      	mov	r2, r4
 80085f0:	462b      	mov	r3, r5
 80085f2:	4620      	mov	r0, r4
 80085f4:	4629      	mov	r1, r5
 80085f6:	eeb0 8a40 	vmov.f32	s16, s0
 80085fa:	eef0 8a60 	vmov.f32	s17, s1
 80085fe:	f7f8 fa8d 	bl	8000b1c <__aeabi_dcmpun>
 8008602:	b990      	cbnz	r0, 800862a <sqrt+0x4a>
 8008604:	2200      	movs	r2, #0
 8008606:	2300      	movs	r3, #0
 8008608:	4620      	mov	r0, r4
 800860a:	4629      	mov	r1, r5
 800860c:	f7f8 fa5e 	bl	8000acc <__aeabi_dcmplt>
 8008610:	b158      	cbz	r0, 800862a <sqrt+0x4a>
 8008612:	f7ff f92b 	bl	800786c <__errno>
 8008616:	2321      	movs	r3, #33	@ 0x21
 8008618:	6003      	str	r3, [r0, #0]
 800861a:	2200      	movs	r2, #0
 800861c:	2300      	movs	r3, #0
 800861e:	4610      	mov	r0, r2
 8008620:	4619      	mov	r1, r3
 8008622:	f7f8 f90b 	bl	800083c <__aeabi_ddiv>
 8008626:	ec41 0b18 	vmov	d8, r0, r1
 800862a:	eeb0 0a48 	vmov.f32	s0, s16
 800862e:	eef0 0a68 	vmov.f32	s1, s17
 8008632:	ecbd 8b02 	vpop	{d8}
 8008636:	bd38      	pop	{r3, r4, r5, pc}

08008638 <finite>:
 8008638:	b082      	sub	sp, #8
 800863a:	ed8d 0b00 	vstr	d0, [sp]
 800863e:	9801      	ldr	r0, [sp, #4]
 8008640:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8008644:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8008648:	0fc0      	lsrs	r0, r0, #31
 800864a:	b002      	add	sp, #8
 800864c:	4770      	bx	lr
	...

08008650 <__ieee754_sqrt>:
 8008650:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008654:	4a66      	ldr	r2, [pc, #408]	@ (80087f0 <__ieee754_sqrt+0x1a0>)
 8008656:	ec55 4b10 	vmov	r4, r5, d0
 800865a:	43aa      	bics	r2, r5
 800865c:	462b      	mov	r3, r5
 800865e:	4621      	mov	r1, r4
 8008660:	d110      	bne.n	8008684 <__ieee754_sqrt+0x34>
 8008662:	4622      	mov	r2, r4
 8008664:	4620      	mov	r0, r4
 8008666:	4629      	mov	r1, r5
 8008668:	f7f7 ffbe 	bl	80005e8 <__aeabi_dmul>
 800866c:	4602      	mov	r2, r0
 800866e:	460b      	mov	r3, r1
 8008670:	4620      	mov	r0, r4
 8008672:	4629      	mov	r1, r5
 8008674:	f7f7 fe02 	bl	800027c <__adddf3>
 8008678:	4604      	mov	r4, r0
 800867a:	460d      	mov	r5, r1
 800867c:	ec45 4b10 	vmov	d0, r4, r5
 8008680:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008684:	2d00      	cmp	r5, #0
 8008686:	dc0e      	bgt.n	80086a6 <__ieee754_sqrt+0x56>
 8008688:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800868c:	4322      	orrs	r2, r4
 800868e:	d0f5      	beq.n	800867c <__ieee754_sqrt+0x2c>
 8008690:	b19d      	cbz	r5, 80086ba <__ieee754_sqrt+0x6a>
 8008692:	4622      	mov	r2, r4
 8008694:	4620      	mov	r0, r4
 8008696:	4629      	mov	r1, r5
 8008698:	f7f7 fdee 	bl	8000278 <__aeabi_dsub>
 800869c:	4602      	mov	r2, r0
 800869e:	460b      	mov	r3, r1
 80086a0:	f7f8 f8cc 	bl	800083c <__aeabi_ddiv>
 80086a4:	e7e8      	b.n	8008678 <__ieee754_sqrt+0x28>
 80086a6:	152a      	asrs	r2, r5, #20
 80086a8:	d115      	bne.n	80086d6 <__ieee754_sqrt+0x86>
 80086aa:	2000      	movs	r0, #0
 80086ac:	e009      	b.n	80086c2 <__ieee754_sqrt+0x72>
 80086ae:	0acb      	lsrs	r3, r1, #11
 80086b0:	3a15      	subs	r2, #21
 80086b2:	0549      	lsls	r1, r1, #21
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d0fa      	beq.n	80086ae <__ieee754_sqrt+0x5e>
 80086b8:	e7f7      	b.n	80086aa <__ieee754_sqrt+0x5a>
 80086ba:	462a      	mov	r2, r5
 80086bc:	e7fa      	b.n	80086b4 <__ieee754_sqrt+0x64>
 80086be:	005b      	lsls	r3, r3, #1
 80086c0:	3001      	adds	r0, #1
 80086c2:	02dc      	lsls	r4, r3, #11
 80086c4:	d5fb      	bpl.n	80086be <__ieee754_sqrt+0x6e>
 80086c6:	1e44      	subs	r4, r0, #1
 80086c8:	1b12      	subs	r2, r2, r4
 80086ca:	f1c0 0420 	rsb	r4, r0, #32
 80086ce:	fa21 f404 	lsr.w	r4, r1, r4
 80086d2:	4323      	orrs	r3, r4
 80086d4:	4081      	lsls	r1, r0
 80086d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80086da:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 80086de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80086e2:	07d2      	lsls	r2, r2, #31
 80086e4:	bf5c      	itt	pl
 80086e6:	005b      	lslpl	r3, r3, #1
 80086e8:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 80086ec:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80086f0:	bf58      	it	pl
 80086f2:	0049      	lslpl	r1, r1, #1
 80086f4:	2600      	movs	r6, #0
 80086f6:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 80086fa:	107f      	asrs	r7, r7, #1
 80086fc:	0049      	lsls	r1, r1, #1
 80086fe:	2016      	movs	r0, #22
 8008700:	4632      	mov	r2, r6
 8008702:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8008706:	1915      	adds	r5, r2, r4
 8008708:	429d      	cmp	r5, r3
 800870a:	bfde      	ittt	le
 800870c:	192a      	addle	r2, r5, r4
 800870e:	1b5b      	suble	r3, r3, r5
 8008710:	1936      	addle	r6, r6, r4
 8008712:	0fcd      	lsrs	r5, r1, #31
 8008714:	3801      	subs	r0, #1
 8008716:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800871a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800871e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8008722:	d1f0      	bne.n	8008706 <__ieee754_sqrt+0xb6>
 8008724:	4605      	mov	r5, r0
 8008726:	2420      	movs	r4, #32
 8008728:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800872c:	4293      	cmp	r3, r2
 800872e:	eb0c 0e00 	add.w	lr, ip, r0
 8008732:	dc02      	bgt.n	800873a <__ieee754_sqrt+0xea>
 8008734:	d113      	bne.n	800875e <__ieee754_sqrt+0x10e>
 8008736:	458e      	cmp	lr, r1
 8008738:	d811      	bhi.n	800875e <__ieee754_sqrt+0x10e>
 800873a:	f1be 0f00 	cmp.w	lr, #0
 800873e:	eb0e 000c 	add.w	r0, lr, ip
 8008742:	da3f      	bge.n	80087c4 <__ieee754_sqrt+0x174>
 8008744:	2800      	cmp	r0, #0
 8008746:	db3d      	blt.n	80087c4 <__ieee754_sqrt+0x174>
 8008748:	f102 0801 	add.w	r8, r2, #1
 800874c:	1a9b      	subs	r3, r3, r2
 800874e:	458e      	cmp	lr, r1
 8008750:	bf88      	it	hi
 8008752:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8008756:	eba1 010e 	sub.w	r1, r1, lr
 800875a:	4465      	add	r5, ip
 800875c:	4642      	mov	r2, r8
 800875e:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8008762:	3c01      	subs	r4, #1
 8008764:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8008768:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800876c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8008770:	d1dc      	bne.n	800872c <__ieee754_sqrt+0xdc>
 8008772:	4319      	orrs	r1, r3
 8008774:	d01b      	beq.n	80087ae <__ieee754_sqrt+0x15e>
 8008776:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 80087f4 <__ieee754_sqrt+0x1a4>
 800877a:	f8df b07c 	ldr.w	fp, [pc, #124]	@ 80087f8 <__ieee754_sqrt+0x1a8>
 800877e:	e9da 0100 	ldrd	r0, r1, [sl]
 8008782:	e9db 2300 	ldrd	r2, r3, [fp]
 8008786:	f7f7 fd77 	bl	8000278 <__aeabi_dsub>
 800878a:	e9da 8900 	ldrd	r8, r9, [sl]
 800878e:	4602      	mov	r2, r0
 8008790:	460b      	mov	r3, r1
 8008792:	4640      	mov	r0, r8
 8008794:	4649      	mov	r1, r9
 8008796:	f7f8 f9a3 	bl	8000ae0 <__aeabi_dcmple>
 800879a:	b140      	cbz	r0, 80087ae <__ieee754_sqrt+0x15e>
 800879c:	f1b5 3fff 	cmp.w	r5, #4294967295
 80087a0:	e9da 0100 	ldrd	r0, r1, [sl]
 80087a4:	e9db 2300 	ldrd	r2, r3, [fp]
 80087a8:	d10e      	bne.n	80087c8 <__ieee754_sqrt+0x178>
 80087aa:	3601      	adds	r6, #1
 80087ac:	4625      	mov	r5, r4
 80087ae:	1073      	asrs	r3, r6, #1
 80087b0:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 80087b4:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 80087b8:	eb03 5107 	add.w	r1, r3, r7, lsl #20
 80087bc:	086b      	lsrs	r3, r5, #1
 80087be:	ea43 70c6 	orr.w	r0, r3, r6, lsl #31
 80087c2:	e759      	b.n	8008678 <__ieee754_sqrt+0x28>
 80087c4:	4690      	mov	r8, r2
 80087c6:	e7c1      	b.n	800874c <__ieee754_sqrt+0xfc>
 80087c8:	f7f7 fd58 	bl	800027c <__adddf3>
 80087cc:	e9da 8900 	ldrd	r8, r9, [sl]
 80087d0:	4602      	mov	r2, r0
 80087d2:	460b      	mov	r3, r1
 80087d4:	4640      	mov	r0, r8
 80087d6:	4649      	mov	r1, r9
 80087d8:	f7f8 f978 	bl	8000acc <__aeabi_dcmplt>
 80087dc:	b120      	cbz	r0, 80087e8 <__ieee754_sqrt+0x198>
 80087de:	1cab      	adds	r3, r5, #2
 80087e0:	bf08      	it	eq
 80087e2:	3601      	addeq	r6, #1
 80087e4:	3502      	adds	r5, #2
 80087e6:	e7e2      	b.n	80087ae <__ieee754_sqrt+0x15e>
 80087e8:	1c6b      	adds	r3, r5, #1
 80087ea:	f023 0501 	bic.w	r5, r3, #1
 80087ee:	e7de      	b.n	80087ae <__ieee754_sqrt+0x15e>
 80087f0:	7ff00000 	.word	0x7ff00000
 80087f4:	08009cd8 	.word	0x08009cd8
 80087f8:	08009cd0 	.word	0x08009cd0
 80087fc:	00000000 	.word	0x00000000

08008800 <__ieee754_pow>:
 8008800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008804:	b091      	sub	sp, #68	@ 0x44
 8008806:	ed8d 1b00 	vstr	d1, [sp]
 800880a:	e9dd 1900 	ldrd	r1, r9, [sp]
 800880e:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 8008812:	ea5a 0001 	orrs.w	r0, sl, r1
 8008816:	ec57 6b10 	vmov	r6, r7, d0
 800881a:	d113      	bne.n	8008844 <__ieee754_pow+0x44>
 800881c:	19b3      	adds	r3, r6, r6
 800881e:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 8008822:	4152      	adcs	r2, r2
 8008824:	4298      	cmp	r0, r3
 8008826:	4b9a      	ldr	r3, [pc, #616]	@ (8008a90 <__ieee754_pow+0x290>)
 8008828:	4193      	sbcs	r3, r2
 800882a:	f080 84ee 	bcs.w	800920a <__ieee754_pow+0xa0a>
 800882e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008832:	4630      	mov	r0, r6
 8008834:	4639      	mov	r1, r7
 8008836:	f7f7 fd21 	bl	800027c <__adddf3>
 800883a:	ec41 0b10 	vmov	d0, r0, r1
 800883e:	b011      	add	sp, #68	@ 0x44
 8008840:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008844:	4a93      	ldr	r2, [pc, #588]	@ (8008a94 <__ieee754_pow+0x294>)
 8008846:	f027 4500 	bic.w	r5, r7, #2147483648	@ 0x80000000
 800884a:	4295      	cmp	r5, r2
 800884c:	46b8      	mov	r8, r7
 800884e:	4633      	mov	r3, r6
 8008850:	d80a      	bhi.n	8008868 <__ieee754_pow+0x68>
 8008852:	d104      	bne.n	800885e <__ieee754_pow+0x5e>
 8008854:	2e00      	cmp	r6, #0
 8008856:	d1ea      	bne.n	800882e <__ieee754_pow+0x2e>
 8008858:	45aa      	cmp	sl, r5
 800885a:	d8e8      	bhi.n	800882e <__ieee754_pow+0x2e>
 800885c:	e001      	b.n	8008862 <__ieee754_pow+0x62>
 800885e:	4592      	cmp	sl, r2
 8008860:	d802      	bhi.n	8008868 <__ieee754_pow+0x68>
 8008862:	4592      	cmp	sl, r2
 8008864:	d10f      	bne.n	8008886 <__ieee754_pow+0x86>
 8008866:	b171      	cbz	r1, 8008886 <__ieee754_pow+0x86>
 8008868:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 800886c:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8008870:	ea58 0803 	orrs.w	r8, r8, r3
 8008874:	d1db      	bne.n	800882e <__ieee754_pow+0x2e>
 8008876:	e9dd 3200 	ldrd	r3, r2, [sp]
 800887a:	18db      	adds	r3, r3, r3
 800887c:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8008880:	4152      	adcs	r2, r2
 8008882:	4598      	cmp	r8, r3
 8008884:	e7cf      	b.n	8008826 <__ieee754_pow+0x26>
 8008886:	f1b8 0f00 	cmp.w	r8, #0
 800888a:	46ab      	mov	fp, r5
 800888c:	da43      	bge.n	8008916 <__ieee754_pow+0x116>
 800888e:	4a82      	ldr	r2, [pc, #520]	@ (8008a98 <__ieee754_pow+0x298>)
 8008890:	4592      	cmp	sl, r2
 8008892:	d856      	bhi.n	8008942 <__ieee754_pow+0x142>
 8008894:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8008898:	4592      	cmp	sl, r2
 800889a:	f240 84c5 	bls.w	8009228 <__ieee754_pow+0xa28>
 800889e:	ea4f 522a 	mov.w	r2, sl, asr #20
 80088a2:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 80088a6:	2a14      	cmp	r2, #20
 80088a8:	dd18      	ble.n	80088dc <__ieee754_pow+0xdc>
 80088aa:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 80088ae:	fa21 f402 	lsr.w	r4, r1, r2
 80088b2:	fa04 f202 	lsl.w	r2, r4, r2
 80088b6:	428a      	cmp	r2, r1
 80088b8:	f040 84b6 	bne.w	8009228 <__ieee754_pow+0xa28>
 80088bc:	f004 0401 	and.w	r4, r4, #1
 80088c0:	f1c4 0402 	rsb	r4, r4, #2
 80088c4:	2900      	cmp	r1, #0
 80088c6:	d159      	bne.n	800897c <__ieee754_pow+0x17c>
 80088c8:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 80088cc:	d148      	bne.n	8008960 <__ieee754_pow+0x160>
 80088ce:	4632      	mov	r2, r6
 80088d0:	463b      	mov	r3, r7
 80088d2:	4630      	mov	r0, r6
 80088d4:	4639      	mov	r1, r7
 80088d6:	f7f7 fe87 	bl	80005e8 <__aeabi_dmul>
 80088da:	e7ae      	b.n	800883a <__ieee754_pow+0x3a>
 80088dc:	2900      	cmp	r1, #0
 80088de:	d14c      	bne.n	800897a <__ieee754_pow+0x17a>
 80088e0:	f1c2 0214 	rsb	r2, r2, #20
 80088e4:	fa4a f402 	asr.w	r4, sl, r2
 80088e8:	fa04 f202 	lsl.w	r2, r4, r2
 80088ec:	4552      	cmp	r2, sl
 80088ee:	f040 8498 	bne.w	8009222 <__ieee754_pow+0xa22>
 80088f2:	f004 0401 	and.w	r4, r4, #1
 80088f6:	f1c4 0402 	rsb	r4, r4, #2
 80088fa:	4a68      	ldr	r2, [pc, #416]	@ (8008a9c <__ieee754_pow+0x29c>)
 80088fc:	4592      	cmp	sl, r2
 80088fe:	d1e3      	bne.n	80088c8 <__ieee754_pow+0xc8>
 8008900:	f1b9 0f00 	cmp.w	r9, #0
 8008904:	f280 8489 	bge.w	800921a <__ieee754_pow+0xa1a>
 8008908:	4964      	ldr	r1, [pc, #400]	@ (8008a9c <__ieee754_pow+0x29c>)
 800890a:	4632      	mov	r2, r6
 800890c:	463b      	mov	r3, r7
 800890e:	2000      	movs	r0, #0
 8008910:	f7f7 ff94 	bl	800083c <__aeabi_ddiv>
 8008914:	e791      	b.n	800883a <__ieee754_pow+0x3a>
 8008916:	2400      	movs	r4, #0
 8008918:	bb81      	cbnz	r1, 800897c <__ieee754_pow+0x17c>
 800891a:	4a5e      	ldr	r2, [pc, #376]	@ (8008a94 <__ieee754_pow+0x294>)
 800891c:	4592      	cmp	sl, r2
 800891e:	d1ec      	bne.n	80088fa <__ieee754_pow+0xfa>
 8008920:	f105 4240 	add.w	r2, r5, #3221225472	@ 0xc0000000
 8008924:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 8008928:	431a      	orrs	r2, r3
 800892a:	f000 846e 	beq.w	800920a <__ieee754_pow+0xa0a>
 800892e:	4b5c      	ldr	r3, [pc, #368]	@ (8008aa0 <__ieee754_pow+0x2a0>)
 8008930:	429d      	cmp	r5, r3
 8008932:	d908      	bls.n	8008946 <__ieee754_pow+0x146>
 8008934:	f1b9 0f00 	cmp.w	r9, #0
 8008938:	f280 846b 	bge.w	8009212 <__ieee754_pow+0xa12>
 800893c:	2000      	movs	r0, #0
 800893e:	2100      	movs	r1, #0
 8008940:	e77b      	b.n	800883a <__ieee754_pow+0x3a>
 8008942:	2402      	movs	r4, #2
 8008944:	e7e8      	b.n	8008918 <__ieee754_pow+0x118>
 8008946:	f1b9 0f00 	cmp.w	r9, #0
 800894a:	f04f 0000 	mov.w	r0, #0
 800894e:	f04f 0100 	mov.w	r1, #0
 8008952:	f6bf af72 	bge.w	800883a <__ieee754_pow+0x3a>
 8008956:	e9dd 0300 	ldrd	r0, r3, [sp]
 800895a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800895e:	e76c      	b.n	800883a <__ieee754_pow+0x3a>
 8008960:	4a50      	ldr	r2, [pc, #320]	@ (8008aa4 <__ieee754_pow+0x2a4>)
 8008962:	4591      	cmp	r9, r2
 8008964:	d10a      	bne.n	800897c <__ieee754_pow+0x17c>
 8008966:	f1b8 0f00 	cmp.w	r8, #0
 800896a:	db07      	blt.n	800897c <__ieee754_pow+0x17c>
 800896c:	ec47 6b10 	vmov	d0, r6, r7
 8008970:	b011      	add	sp, #68	@ 0x44
 8008972:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008976:	f7ff be6b 	b.w	8008650 <__ieee754_sqrt>
 800897a:	2400      	movs	r4, #0
 800897c:	ec47 6b10 	vmov	d0, r6, r7
 8008980:	9302      	str	r3, [sp, #8]
 8008982:	f000 fc87 	bl	8009294 <fabs>
 8008986:	9b02      	ldr	r3, [sp, #8]
 8008988:	ec51 0b10 	vmov	r0, r1, d0
 800898c:	bb43      	cbnz	r3, 80089e0 <__ieee754_pow+0x1e0>
 800898e:	4b43      	ldr	r3, [pc, #268]	@ (8008a9c <__ieee754_pow+0x29c>)
 8008990:	f028 4240 	bic.w	r2, r8, #3221225472	@ 0xc0000000
 8008994:	429a      	cmp	r2, r3
 8008996:	d000      	beq.n	800899a <__ieee754_pow+0x19a>
 8008998:	bb15      	cbnz	r5, 80089e0 <__ieee754_pow+0x1e0>
 800899a:	f1b9 0f00 	cmp.w	r9, #0
 800899e:	da05      	bge.n	80089ac <__ieee754_pow+0x1ac>
 80089a0:	4602      	mov	r2, r0
 80089a2:	460b      	mov	r3, r1
 80089a4:	2000      	movs	r0, #0
 80089a6:	493d      	ldr	r1, [pc, #244]	@ (8008a9c <__ieee754_pow+0x29c>)
 80089a8:	f7f7 ff48 	bl	800083c <__aeabi_ddiv>
 80089ac:	f1b8 0f00 	cmp.w	r8, #0
 80089b0:	f6bf af43 	bge.w	800883a <__ieee754_pow+0x3a>
 80089b4:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 80089b8:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 80089bc:	4325      	orrs	r5, r4
 80089be:	d108      	bne.n	80089d2 <__ieee754_pow+0x1d2>
 80089c0:	4602      	mov	r2, r0
 80089c2:	460b      	mov	r3, r1
 80089c4:	4610      	mov	r0, r2
 80089c6:	4619      	mov	r1, r3
 80089c8:	f7f7 fc56 	bl	8000278 <__aeabi_dsub>
 80089cc:	4602      	mov	r2, r0
 80089ce:	460b      	mov	r3, r1
 80089d0:	e79e      	b.n	8008910 <__ieee754_pow+0x110>
 80089d2:	2c01      	cmp	r4, #1
 80089d4:	f47f af31 	bne.w	800883a <__ieee754_pow+0x3a>
 80089d8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80089dc:	4619      	mov	r1, r3
 80089de:	e72c      	b.n	800883a <__ieee754_pow+0x3a>
 80089e0:	ea4f 73d8 	mov.w	r3, r8, lsr #31
 80089e4:	3b01      	subs	r3, #1
 80089e6:	ea53 0204 	orrs.w	r2, r3, r4
 80089ea:	d102      	bne.n	80089f2 <__ieee754_pow+0x1f2>
 80089ec:	4632      	mov	r2, r6
 80089ee:	463b      	mov	r3, r7
 80089f0:	e7e8      	b.n	80089c4 <__ieee754_pow+0x1c4>
 80089f2:	3c01      	subs	r4, #1
 80089f4:	431c      	orrs	r4, r3
 80089f6:	d016      	beq.n	8008a26 <__ieee754_pow+0x226>
 80089f8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8008a80 <__ieee754_pow+0x280>
 80089fc:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 8008a00:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008a04:	f240 8110 	bls.w	8008c28 <__ieee754_pow+0x428>
 8008a08:	4b27      	ldr	r3, [pc, #156]	@ (8008aa8 <__ieee754_pow+0x2a8>)
 8008a0a:	459a      	cmp	sl, r3
 8008a0c:	4b24      	ldr	r3, [pc, #144]	@ (8008aa0 <__ieee754_pow+0x2a0>)
 8008a0e:	d916      	bls.n	8008a3e <__ieee754_pow+0x23e>
 8008a10:	429d      	cmp	r5, r3
 8008a12:	d80b      	bhi.n	8008a2c <__ieee754_pow+0x22c>
 8008a14:	f1b9 0f00 	cmp.w	r9, #0
 8008a18:	da0b      	bge.n	8008a32 <__ieee754_pow+0x232>
 8008a1a:	2000      	movs	r0, #0
 8008a1c:	b011      	add	sp, #68	@ 0x44
 8008a1e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a22:	f000 bcf1 	b.w	8009408 <__math_oflow>
 8008a26:	ed9f 7b18 	vldr	d7, [pc, #96]	@ 8008a88 <__ieee754_pow+0x288>
 8008a2a:	e7e7      	b.n	80089fc <__ieee754_pow+0x1fc>
 8008a2c:	f1b9 0f00 	cmp.w	r9, #0
 8008a30:	dcf3      	bgt.n	8008a1a <__ieee754_pow+0x21a>
 8008a32:	2000      	movs	r0, #0
 8008a34:	b011      	add	sp, #68	@ 0x44
 8008a36:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a3a:	f000 bcdd 	b.w	80093f8 <__math_uflow>
 8008a3e:	429d      	cmp	r5, r3
 8008a40:	d20c      	bcs.n	8008a5c <__ieee754_pow+0x25c>
 8008a42:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008a46:	2200      	movs	r2, #0
 8008a48:	2300      	movs	r3, #0
 8008a4a:	f7f8 f83f 	bl	8000acc <__aeabi_dcmplt>
 8008a4e:	3800      	subs	r0, #0
 8008a50:	bf18      	it	ne
 8008a52:	2001      	movne	r0, #1
 8008a54:	f1b9 0f00 	cmp.w	r9, #0
 8008a58:	daec      	bge.n	8008a34 <__ieee754_pow+0x234>
 8008a5a:	e7df      	b.n	8008a1c <__ieee754_pow+0x21c>
 8008a5c:	4b0f      	ldr	r3, [pc, #60]	@ (8008a9c <__ieee754_pow+0x29c>)
 8008a5e:	429d      	cmp	r5, r3
 8008a60:	f04f 0200 	mov.w	r2, #0
 8008a64:	d922      	bls.n	8008aac <__ieee754_pow+0x2ac>
 8008a66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	f7f8 f82e 	bl	8000acc <__aeabi_dcmplt>
 8008a70:	3800      	subs	r0, #0
 8008a72:	bf18      	it	ne
 8008a74:	2001      	movne	r0, #1
 8008a76:	f1b9 0f00 	cmp.w	r9, #0
 8008a7a:	dccf      	bgt.n	8008a1c <__ieee754_pow+0x21c>
 8008a7c:	e7da      	b.n	8008a34 <__ieee754_pow+0x234>
 8008a7e:	bf00      	nop
 8008a80:	00000000 	.word	0x00000000
 8008a84:	3ff00000 	.word	0x3ff00000
 8008a88:	00000000 	.word	0x00000000
 8008a8c:	bff00000 	.word	0xbff00000
 8008a90:	fff00000 	.word	0xfff00000
 8008a94:	7ff00000 	.word	0x7ff00000
 8008a98:	433fffff 	.word	0x433fffff
 8008a9c:	3ff00000 	.word	0x3ff00000
 8008aa0:	3fefffff 	.word	0x3fefffff
 8008aa4:	3fe00000 	.word	0x3fe00000
 8008aa8:	43f00000 	.word	0x43f00000
 8008aac:	4b5a      	ldr	r3, [pc, #360]	@ (8008c18 <__ieee754_pow+0x418>)
 8008aae:	f7f7 fbe3 	bl	8000278 <__aeabi_dsub>
 8008ab2:	a351      	add	r3, pc, #324	@ (adr r3, 8008bf8 <__ieee754_pow+0x3f8>)
 8008ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ab8:	4604      	mov	r4, r0
 8008aba:	460d      	mov	r5, r1
 8008abc:	f7f7 fd94 	bl	80005e8 <__aeabi_dmul>
 8008ac0:	a34f      	add	r3, pc, #316	@ (adr r3, 8008c00 <__ieee754_pow+0x400>)
 8008ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ac6:	4606      	mov	r6, r0
 8008ac8:	460f      	mov	r7, r1
 8008aca:	4620      	mov	r0, r4
 8008acc:	4629      	mov	r1, r5
 8008ace:	f7f7 fd8b 	bl	80005e8 <__aeabi_dmul>
 8008ad2:	4b52      	ldr	r3, [pc, #328]	@ (8008c1c <__ieee754_pow+0x41c>)
 8008ad4:	4682      	mov	sl, r0
 8008ad6:	468b      	mov	fp, r1
 8008ad8:	2200      	movs	r2, #0
 8008ada:	4620      	mov	r0, r4
 8008adc:	4629      	mov	r1, r5
 8008ade:	f7f7 fd83 	bl	80005e8 <__aeabi_dmul>
 8008ae2:	4602      	mov	r2, r0
 8008ae4:	460b      	mov	r3, r1
 8008ae6:	a148      	add	r1, pc, #288	@ (adr r1, 8008c08 <__ieee754_pow+0x408>)
 8008ae8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008aec:	f7f7 fbc4 	bl	8000278 <__aeabi_dsub>
 8008af0:	4622      	mov	r2, r4
 8008af2:	462b      	mov	r3, r5
 8008af4:	f7f7 fd78 	bl	80005e8 <__aeabi_dmul>
 8008af8:	4602      	mov	r2, r0
 8008afa:	460b      	mov	r3, r1
 8008afc:	2000      	movs	r0, #0
 8008afe:	4948      	ldr	r1, [pc, #288]	@ (8008c20 <__ieee754_pow+0x420>)
 8008b00:	f7f7 fbba 	bl	8000278 <__aeabi_dsub>
 8008b04:	4622      	mov	r2, r4
 8008b06:	4680      	mov	r8, r0
 8008b08:	4689      	mov	r9, r1
 8008b0a:	462b      	mov	r3, r5
 8008b0c:	4620      	mov	r0, r4
 8008b0e:	4629      	mov	r1, r5
 8008b10:	f7f7 fd6a 	bl	80005e8 <__aeabi_dmul>
 8008b14:	4602      	mov	r2, r0
 8008b16:	460b      	mov	r3, r1
 8008b18:	4640      	mov	r0, r8
 8008b1a:	4649      	mov	r1, r9
 8008b1c:	f7f7 fd64 	bl	80005e8 <__aeabi_dmul>
 8008b20:	a33b      	add	r3, pc, #236	@ (adr r3, 8008c10 <__ieee754_pow+0x410>)
 8008b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b26:	f7f7 fd5f 	bl	80005e8 <__aeabi_dmul>
 8008b2a:	4602      	mov	r2, r0
 8008b2c:	460b      	mov	r3, r1
 8008b2e:	4650      	mov	r0, sl
 8008b30:	4659      	mov	r1, fp
 8008b32:	f7f7 fba1 	bl	8000278 <__aeabi_dsub>
 8008b36:	4602      	mov	r2, r0
 8008b38:	460b      	mov	r3, r1
 8008b3a:	4680      	mov	r8, r0
 8008b3c:	4689      	mov	r9, r1
 8008b3e:	4630      	mov	r0, r6
 8008b40:	4639      	mov	r1, r7
 8008b42:	f7f7 fb9b 	bl	800027c <__adddf3>
 8008b46:	2400      	movs	r4, #0
 8008b48:	4632      	mov	r2, r6
 8008b4a:	463b      	mov	r3, r7
 8008b4c:	4620      	mov	r0, r4
 8008b4e:	460d      	mov	r5, r1
 8008b50:	f7f7 fb92 	bl	8000278 <__aeabi_dsub>
 8008b54:	4602      	mov	r2, r0
 8008b56:	460b      	mov	r3, r1
 8008b58:	4640      	mov	r0, r8
 8008b5a:	4649      	mov	r1, r9
 8008b5c:	f7f7 fb8c 	bl	8000278 <__aeabi_dsub>
 8008b60:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008b64:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008b68:	2300      	movs	r3, #0
 8008b6a:	9304      	str	r3, [sp, #16]
 8008b6c:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8008b70:	4606      	mov	r6, r0
 8008b72:	460f      	mov	r7, r1
 8008b74:	465b      	mov	r3, fp
 8008b76:	4652      	mov	r2, sl
 8008b78:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008b7c:	f7f7 fb7c 	bl	8000278 <__aeabi_dsub>
 8008b80:	4622      	mov	r2, r4
 8008b82:	462b      	mov	r3, r5
 8008b84:	f7f7 fd30 	bl	80005e8 <__aeabi_dmul>
 8008b88:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008b8c:	4680      	mov	r8, r0
 8008b8e:	4689      	mov	r9, r1
 8008b90:	4630      	mov	r0, r6
 8008b92:	4639      	mov	r1, r7
 8008b94:	f7f7 fd28 	bl	80005e8 <__aeabi_dmul>
 8008b98:	4602      	mov	r2, r0
 8008b9a:	460b      	mov	r3, r1
 8008b9c:	4640      	mov	r0, r8
 8008b9e:	4649      	mov	r1, r9
 8008ba0:	f7f7 fb6c 	bl	800027c <__adddf3>
 8008ba4:	465b      	mov	r3, fp
 8008ba6:	4606      	mov	r6, r0
 8008ba8:	460f      	mov	r7, r1
 8008baa:	4652      	mov	r2, sl
 8008bac:	4620      	mov	r0, r4
 8008bae:	4629      	mov	r1, r5
 8008bb0:	f7f7 fd1a 	bl	80005e8 <__aeabi_dmul>
 8008bb4:	460b      	mov	r3, r1
 8008bb6:	4602      	mov	r2, r0
 8008bb8:	4680      	mov	r8, r0
 8008bba:	4689      	mov	r9, r1
 8008bbc:	4630      	mov	r0, r6
 8008bbe:	4639      	mov	r1, r7
 8008bc0:	f7f7 fb5c 	bl	800027c <__adddf3>
 8008bc4:	4b17      	ldr	r3, [pc, #92]	@ (8008c24 <__ieee754_pow+0x424>)
 8008bc6:	4299      	cmp	r1, r3
 8008bc8:	4604      	mov	r4, r0
 8008bca:	460d      	mov	r5, r1
 8008bcc:	468b      	mov	fp, r1
 8008bce:	f340 820b 	ble.w	8008fe8 <__ieee754_pow+0x7e8>
 8008bd2:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8008bd6:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8008bda:	4303      	orrs	r3, r0
 8008bdc:	f000 81ea 	beq.w	8008fb4 <__ieee754_pow+0x7b4>
 8008be0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008be4:	2200      	movs	r2, #0
 8008be6:	2300      	movs	r3, #0
 8008be8:	f7f7 ff70 	bl	8000acc <__aeabi_dcmplt>
 8008bec:	3800      	subs	r0, #0
 8008bee:	bf18      	it	ne
 8008bf0:	2001      	movne	r0, #1
 8008bf2:	e713      	b.n	8008a1c <__ieee754_pow+0x21c>
 8008bf4:	f3af 8000 	nop.w
 8008bf8:	60000000 	.word	0x60000000
 8008bfc:	3ff71547 	.word	0x3ff71547
 8008c00:	f85ddf44 	.word	0xf85ddf44
 8008c04:	3e54ae0b 	.word	0x3e54ae0b
 8008c08:	55555555 	.word	0x55555555
 8008c0c:	3fd55555 	.word	0x3fd55555
 8008c10:	652b82fe 	.word	0x652b82fe
 8008c14:	3ff71547 	.word	0x3ff71547
 8008c18:	3ff00000 	.word	0x3ff00000
 8008c1c:	3fd00000 	.word	0x3fd00000
 8008c20:	3fe00000 	.word	0x3fe00000
 8008c24:	408fffff 	.word	0x408fffff
 8008c28:	4bd5      	ldr	r3, [pc, #852]	@ (8008f80 <__ieee754_pow+0x780>)
 8008c2a:	ea08 0303 	and.w	r3, r8, r3
 8008c2e:	2200      	movs	r2, #0
 8008c30:	b92b      	cbnz	r3, 8008c3e <__ieee754_pow+0x43e>
 8008c32:	4bd4      	ldr	r3, [pc, #848]	@ (8008f84 <__ieee754_pow+0x784>)
 8008c34:	f7f7 fcd8 	bl	80005e8 <__aeabi_dmul>
 8008c38:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 8008c3c:	468b      	mov	fp, r1
 8008c3e:	ea4f 532b 	mov.w	r3, fp, asr #20
 8008c42:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8008c46:	4413      	add	r3, r2
 8008c48:	930a      	str	r3, [sp, #40]	@ 0x28
 8008c4a:	4bcf      	ldr	r3, [pc, #828]	@ (8008f88 <__ieee754_pow+0x788>)
 8008c4c:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 8008c50:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 8008c54:	459b      	cmp	fp, r3
 8008c56:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8008c5a:	dd08      	ble.n	8008c6e <__ieee754_pow+0x46e>
 8008c5c:	4bcb      	ldr	r3, [pc, #812]	@ (8008f8c <__ieee754_pow+0x78c>)
 8008c5e:	459b      	cmp	fp, r3
 8008c60:	f340 81a5 	ble.w	8008fae <__ieee754_pow+0x7ae>
 8008c64:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008c66:	3301      	adds	r3, #1
 8008c68:	930a      	str	r3, [sp, #40]	@ 0x28
 8008c6a:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8008c6e:	f04f 0a00 	mov.w	sl, #0
 8008c72:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8008c76:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008c78:	4bc5      	ldr	r3, [pc, #788]	@ (8008f90 <__ieee754_pow+0x790>)
 8008c7a:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008c7e:	ed93 7b00 	vldr	d7, [r3]
 8008c82:	4629      	mov	r1, r5
 8008c84:	ec53 2b17 	vmov	r2, r3, d7
 8008c88:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008c8c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008c90:	f7f7 faf2 	bl	8000278 <__aeabi_dsub>
 8008c94:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008c98:	4606      	mov	r6, r0
 8008c9a:	460f      	mov	r7, r1
 8008c9c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008ca0:	f7f7 faec 	bl	800027c <__adddf3>
 8008ca4:	4602      	mov	r2, r0
 8008ca6:	460b      	mov	r3, r1
 8008ca8:	2000      	movs	r0, #0
 8008caa:	49ba      	ldr	r1, [pc, #744]	@ (8008f94 <__ieee754_pow+0x794>)
 8008cac:	f7f7 fdc6 	bl	800083c <__aeabi_ddiv>
 8008cb0:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8008cb4:	4602      	mov	r2, r0
 8008cb6:	460b      	mov	r3, r1
 8008cb8:	4630      	mov	r0, r6
 8008cba:	4639      	mov	r1, r7
 8008cbc:	f7f7 fc94 	bl	80005e8 <__aeabi_dmul>
 8008cc0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008cc4:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 8008cc8:	106d      	asrs	r5, r5, #1
 8008cca:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8008cce:	f04f 0b00 	mov.w	fp, #0
 8008cd2:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8008cd6:	4661      	mov	r1, ip
 8008cd8:	2200      	movs	r2, #0
 8008cda:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8008cde:	4658      	mov	r0, fp
 8008ce0:	46e1      	mov	r9, ip
 8008ce2:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 8008ce6:	4614      	mov	r4, r2
 8008ce8:	461d      	mov	r5, r3
 8008cea:	f7f7 fc7d 	bl	80005e8 <__aeabi_dmul>
 8008cee:	4602      	mov	r2, r0
 8008cf0:	460b      	mov	r3, r1
 8008cf2:	4630      	mov	r0, r6
 8008cf4:	4639      	mov	r1, r7
 8008cf6:	f7f7 fabf 	bl	8000278 <__aeabi_dsub>
 8008cfa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008cfe:	4606      	mov	r6, r0
 8008d00:	460f      	mov	r7, r1
 8008d02:	4620      	mov	r0, r4
 8008d04:	4629      	mov	r1, r5
 8008d06:	f7f7 fab7 	bl	8000278 <__aeabi_dsub>
 8008d0a:	4602      	mov	r2, r0
 8008d0c:	460b      	mov	r3, r1
 8008d0e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008d12:	f7f7 fab1 	bl	8000278 <__aeabi_dsub>
 8008d16:	465a      	mov	r2, fp
 8008d18:	464b      	mov	r3, r9
 8008d1a:	f7f7 fc65 	bl	80005e8 <__aeabi_dmul>
 8008d1e:	4602      	mov	r2, r0
 8008d20:	460b      	mov	r3, r1
 8008d22:	4630      	mov	r0, r6
 8008d24:	4639      	mov	r1, r7
 8008d26:	f7f7 faa7 	bl	8000278 <__aeabi_dsub>
 8008d2a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8008d2e:	f7f7 fc5b 	bl	80005e8 <__aeabi_dmul>
 8008d32:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008d36:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008d3a:	4610      	mov	r0, r2
 8008d3c:	4619      	mov	r1, r3
 8008d3e:	f7f7 fc53 	bl	80005e8 <__aeabi_dmul>
 8008d42:	a37d      	add	r3, pc, #500	@ (adr r3, 8008f38 <__ieee754_pow+0x738>)
 8008d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d48:	4604      	mov	r4, r0
 8008d4a:	460d      	mov	r5, r1
 8008d4c:	f7f7 fc4c 	bl	80005e8 <__aeabi_dmul>
 8008d50:	a37b      	add	r3, pc, #492	@ (adr r3, 8008f40 <__ieee754_pow+0x740>)
 8008d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d56:	f7f7 fa91 	bl	800027c <__adddf3>
 8008d5a:	4622      	mov	r2, r4
 8008d5c:	462b      	mov	r3, r5
 8008d5e:	f7f7 fc43 	bl	80005e8 <__aeabi_dmul>
 8008d62:	a379      	add	r3, pc, #484	@ (adr r3, 8008f48 <__ieee754_pow+0x748>)
 8008d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d68:	f7f7 fa88 	bl	800027c <__adddf3>
 8008d6c:	4622      	mov	r2, r4
 8008d6e:	462b      	mov	r3, r5
 8008d70:	f7f7 fc3a 	bl	80005e8 <__aeabi_dmul>
 8008d74:	a376      	add	r3, pc, #472	@ (adr r3, 8008f50 <__ieee754_pow+0x750>)
 8008d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d7a:	f7f7 fa7f 	bl	800027c <__adddf3>
 8008d7e:	4622      	mov	r2, r4
 8008d80:	462b      	mov	r3, r5
 8008d82:	f7f7 fc31 	bl	80005e8 <__aeabi_dmul>
 8008d86:	a374      	add	r3, pc, #464	@ (adr r3, 8008f58 <__ieee754_pow+0x758>)
 8008d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d8c:	f7f7 fa76 	bl	800027c <__adddf3>
 8008d90:	4622      	mov	r2, r4
 8008d92:	462b      	mov	r3, r5
 8008d94:	f7f7 fc28 	bl	80005e8 <__aeabi_dmul>
 8008d98:	a371      	add	r3, pc, #452	@ (adr r3, 8008f60 <__ieee754_pow+0x760>)
 8008d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d9e:	f7f7 fa6d 	bl	800027c <__adddf3>
 8008da2:	4622      	mov	r2, r4
 8008da4:	4606      	mov	r6, r0
 8008da6:	460f      	mov	r7, r1
 8008da8:	462b      	mov	r3, r5
 8008daa:	4620      	mov	r0, r4
 8008dac:	4629      	mov	r1, r5
 8008dae:	f7f7 fc1b 	bl	80005e8 <__aeabi_dmul>
 8008db2:	4602      	mov	r2, r0
 8008db4:	460b      	mov	r3, r1
 8008db6:	4630      	mov	r0, r6
 8008db8:	4639      	mov	r1, r7
 8008dba:	f7f7 fc15 	bl	80005e8 <__aeabi_dmul>
 8008dbe:	465a      	mov	r2, fp
 8008dc0:	4604      	mov	r4, r0
 8008dc2:	460d      	mov	r5, r1
 8008dc4:	464b      	mov	r3, r9
 8008dc6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008dca:	f7f7 fa57 	bl	800027c <__adddf3>
 8008dce:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008dd2:	f7f7 fc09 	bl	80005e8 <__aeabi_dmul>
 8008dd6:	4622      	mov	r2, r4
 8008dd8:	462b      	mov	r3, r5
 8008dda:	f7f7 fa4f 	bl	800027c <__adddf3>
 8008dde:	465a      	mov	r2, fp
 8008de0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008de4:	464b      	mov	r3, r9
 8008de6:	4658      	mov	r0, fp
 8008de8:	4649      	mov	r1, r9
 8008dea:	f7f7 fbfd 	bl	80005e8 <__aeabi_dmul>
 8008dee:	4b6a      	ldr	r3, [pc, #424]	@ (8008f98 <__ieee754_pow+0x798>)
 8008df0:	2200      	movs	r2, #0
 8008df2:	4606      	mov	r6, r0
 8008df4:	460f      	mov	r7, r1
 8008df6:	f7f7 fa41 	bl	800027c <__adddf3>
 8008dfa:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008dfe:	f7f7 fa3d 	bl	800027c <__adddf3>
 8008e02:	46d8      	mov	r8, fp
 8008e04:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 8008e08:	460d      	mov	r5, r1
 8008e0a:	465a      	mov	r2, fp
 8008e0c:	460b      	mov	r3, r1
 8008e0e:	4640      	mov	r0, r8
 8008e10:	4649      	mov	r1, r9
 8008e12:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 8008e16:	f7f7 fbe7 	bl	80005e8 <__aeabi_dmul>
 8008e1a:	465c      	mov	r4, fp
 8008e1c:	4680      	mov	r8, r0
 8008e1e:	4689      	mov	r9, r1
 8008e20:	4b5d      	ldr	r3, [pc, #372]	@ (8008f98 <__ieee754_pow+0x798>)
 8008e22:	2200      	movs	r2, #0
 8008e24:	4620      	mov	r0, r4
 8008e26:	4629      	mov	r1, r5
 8008e28:	f7f7 fa26 	bl	8000278 <__aeabi_dsub>
 8008e2c:	4632      	mov	r2, r6
 8008e2e:	463b      	mov	r3, r7
 8008e30:	f7f7 fa22 	bl	8000278 <__aeabi_dsub>
 8008e34:	4602      	mov	r2, r0
 8008e36:	460b      	mov	r3, r1
 8008e38:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008e3c:	f7f7 fa1c 	bl	8000278 <__aeabi_dsub>
 8008e40:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008e44:	f7f7 fbd0 	bl	80005e8 <__aeabi_dmul>
 8008e48:	4622      	mov	r2, r4
 8008e4a:	4606      	mov	r6, r0
 8008e4c:	460f      	mov	r7, r1
 8008e4e:	462b      	mov	r3, r5
 8008e50:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008e54:	f7f7 fbc8 	bl	80005e8 <__aeabi_dmul>
 8008e58:	4602      	mov	r2, r0
 8008e5a:	460b      	mov	r3, r1
 8008e5c:	4630      	mov	r0, r6
 8008e5e:	4639      	mov	r1, r7
 8008e60:	f7f7 fa0c 	bl	800027c <__adddf3>
 8008e64:	4606      	mov	r6, r0
 8008e66:	460f      	mov	r7, r1
 8008e68:	4602      	mov	r2, r0
 8008e6a:	460b      	mov	r3, r1
 8008e6c:	4640      	mov	r0, r8
 8008e6e:	4649      	mov	r1, r9
 8008e70:	f7f7 fa04 	bl	800027c <__adddf3>
 8008e74:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 8008e78:	a33b      	add	r3, pc, #236	@ (adr r3, 8008f68 <__ieee754_pow+0x768>)
 8008e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e7e:	4658      	mov	r0, fp
 8008e80:	e9cd bc08 	strd	fp, ip, [sp, #32]
 8008e84:	460d      	mov	r5, r1
 8008e86:	f7f7 fbaf 	bl	80005e8 <__aeabi_dmul>
 8008e8a:	465c      	mov	r4, fp
 8008e8c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008e90:	4642      	mov	r2, r8
 8008e92:	464b      	mov	r3, r9
 8008e94:	4620      	mov	r0, r4
 8008e96:	4629      	mov	r1, r5
 8008e98:	f7f7 f9ee 	bl	8000278 <__aeabi_dsub>
 8008e9c:	4602      	mov	r2, r0
 8008e9e:	460b      	mov	r3, r1
 8008ea0:	4630      	mov	r0, r6
 8008ea2:	4639      	mov	r1, r7
 8008ea4:	f7f7 f9e8 	bl	8000278 <__aeabi_dsub>
 8008ea8:	a331      	add	r3, pc, #196	@ (adr r3, 8008f70 <__ieee754_pow+0x770>)
 8008eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eae:	f7f7 fb9b 	bl	80005e8 <__aeabi_dmul>
 8008eb2:	a331      	add	r3, pc, #196	@ (adr r3, 8008f78 <__ieee754_pow+0x778>)
 8008eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eb8:	4606      	mov	r6, r0
 8008eba:	460f      	mov	r7, r1
 8008ebc:	4620      	mov	r0, r4
 8008ebe:	4629      	mov	r1, r5
 8008ec0:	f7f7 fb92 	bl	80005e8 <__aeabi_dmul>
 8008ec4:	4602      	mov	r2, r0
 8008ec6:	460b      	mov	r3, r1
 8008ec8:	4630      	mov	r0, r6
 8008eca:	4639      	mov	r1, r7
 8008ecc:	f7f7 f9d6 	bl	800027c <__adddf3>
 8008ed0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008ed2:	4b32      	ldr	r3, [pc, #200]	@ (8008f9c <__ieee754_pow+0x79c>)
 8008ed4:	4413      	add	r3, r2
 8008ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eda:	f7f7 f9cf 	bl	800027c <__adddf3>
 8008ede:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008ee2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008ee4:	f7f7 fb16 	bl	8000514 <__aeabi_i2d>
 8008ee8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008eea:	4b2d      	ldr	r3, [pc, #180]	@ (8008fa0 <__ieee754_pow+0x7a0>)
 8008eec:	4413      	add	r3, r2
 8008eee:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008ef2:	4606      	mov	r6, r0
 8008ef4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008ef8:	460f      	mov	r7, r1
 8008efa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008efe:	f7f7 f9bd 	bl	800027c <__adddf3>
 8008f02:	4642      	mov	r2, r8
 8008f04:	464b      	mov	r3, r9
 8008f06:	f7f7 f9b9 	bl	800027c <__adddf3>
 8008f0a:	4632      	mov	r2, r6
 8008f0c:	463b      	mov	r3, r7
 8008f0e:	f7f7 f9b5 	bl	800027c <__adddf3>
 8008f12:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 8008f16:	4632      	mov	r2, r6
 8008f18:	463b      	mov	r3, r7
 8008f1a:	4658      	mov	r0, fp
 8008f1c:	460d      	mov	r5, r1
 8008f1e:	f7f7 f9ab 	bl	8000278 <__aeabi_dsub>
 8008f22:	4642      	mov	r2, r8
 8008f24:	464b      	mov	r3, r9
 8008f26:	f7f7 f9a7 	bl	8000278 <__aeabi_dsub>
 8008f2a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008f2e:	f7f7 f9a3 	bl	8000278 <__aeabi_dsub>
 8008f32:	465c      	mov	r4, fp
 8008f34:	e036      	b.n	8008fa4 <__ieee754_pow+0x7a4>
 8008f36:	bf00      	nop
 8008f38:	4a454eef 	.word	0x4a454eef
 8008f3c:	3fca7e28 	.word	0x3fca7e28
 8008f40:	93c9db65 	.word	0x93c9db65
 8008f44:	3fcd864a 	.word	0x3fcd864a
 8008f48:	a91d4101 	.word	0xa91d4101
 8008f4c:	3fd17460 	.word	0x3fd17460
 8008f50:	518f264d 	.word	0x518f264d
 8008f54:	3fd55555 	.word	0x3fd55555
 8008f58:	db6fabff 	.word	0xdb6fabff
 8008f5c:	3fdb6db6 	.word	0x3fdb6db6
 8008f60:	33333303 	.word	0x33333303
 8008f64:	3fe33333 	.word	0x3fe33333
 8008f68:	e0000000 	.word	0xe0000000
 8008f6c:	3feec709 	.word	0x3feec709
 8008f70:	dc3a03fd 	.word	0xdc3a03fd
 8008f74:	3feec709 	.word	0x3feec709
 8008f78:	145b01f5 	.word	0x145b01f5
 8008f7c:	be3e2fe0 	.word	0xbe3e2fe0
 8008f80:	7ff00000 	.word	0x7ff00000
 8008f84:	43400000 	.word	0x43400000
 8008f88:	0003988e 	.word	0x0003988e
 8008f8c:	000bb679 	.word	0x000bb679
 8008f90:	08009d00 	.word	0x08009d00
 8008f94:	3ff00000 	.word	0x3ff00000
 8008f98:	40080000 	.word	0x40080000
 8008f9c:	08009ce0 	.word	0x08009ce0
 8008fa0:	08009cf0 	.word	0x08009cf0
 8008fa4:	4602      	mov	r2, r0
 8008fa6:	460b      	mov	r3, r1
 8008fa8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008fac:	e5d6      	b.n	8008b5c <__ieee754_pow+0x35c>
 8008fae:	f04f 0a01 	mov.w	sl, #1
 8008fb2:	e65e      	b.n	8008c72 <__ieee754_pow+0x472>
 8008fb4:	a3b5      	add	r3, pc, #724	@ (adr r3, 800928c <__ieee754_pow+0xa8c>)
 8008fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fba:	4630      	mov	r0, r6
 8008fbc:	4639      	mov	r1, r7
 8008fbe:	f7f7 f95d 	bl	800027c <__adddf3>
 8008fc2:	4642      	mov	r2, r8
 8008fc4:	e9cd 0100 	strd	r0, r1, [sp]
 8008fc8:	464b      	mov	r3, r9
 8008fca:	4620      	mov	r0, r4
 8008fcc:	4629      	mov	r1, r5
 8008fce:	f7f7 f953 	bl	8000278 <__aeabi_dsub>
 8008fd2:	4602      	mov	r2, r0
 8008fd4:	460b      	mov	r3, r1
 8008fd6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008fda:	f7f7 fd95 	bl	8000b08 <__aeabi_dcmpgt>
 8008fde:	2800      	cmp	r0, #0
 8008fe0:	f47f adfe 	bne.w	8008be0 <__ieee754_pow+0x3e0>
 8008fe4:	4ba2      	ldr	r3, [pc, #648]	@ (8009270 <__ieee754_pow+0xa70>)
 8008fe6:	e022      	b.n	800902e <__ieee754_pow+0x82e>
 8008fe8:	4ca2      	ldr	r4, [pc, #648]	@ (8009274 <__ieee754_pow+0xa74>)
 8008fea:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8008fee:	42a3      	cmp	r3, r4
 8008ff0:	d919      	bls.n	8009026 <__ieee754_pow+0x826>
 8008ff2:	4ba1      	ldr	r3, [pc, #644]	@ (8009278 <__ieee754_pow+0xa78>)
 8008ff4:	440b      	add	r3, r1
 8008ff6:	4303      	orrs	r3, r0
 8008ff8:	d009      	beq.n	800900e <__ieee754_pow+0x80e>
 8008ffa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008ffe:	2200      	movs	r2, #0
 8009000:	2300      	movs	r3, #0
 8009002:	f7f7 fd63 	bl	8000acc <__aeabi_dcmplt>
 8009006:	3800      	subs	r0, #0
 8009008:	bf18      	it	ne
 800900a:	2001      	movne	r0, #1
 800900c:	e512      	b.n	8008a34 <__ieee754_pow+0x234>
 800900e:	4642      	mov	r2, r8
 8009010:	464b      	mov	r3, r9
 8009012:	f7f7 f931 	bl	8000278 <__aeabi_dsub>
 8009016:	4632      	mov	r2, r6
 8009018:	463b      	mov	r3, r7
 800901a:	f7f7 fd6b 	bl	8000af4 <__aeabi_dcmpge>
 800901e:	2800      	cmp	r0, #0
 8009020:	d1eb      	bne.n	8008ffa <__ieee754_pow+0x7fa>
 8009022:	4b96      	ldr	r3, [pc, #600]	@ (800927c <__ieee754_pow+0xa7c>)
 8009024:	e003      	b.n	800902e <__ieee754_pow+0x82e>
 8009026:	4a96      	ldr	r2, [pc, #600]	@ (8009280 <__ieee754_pow+0xa80>)
 8009028:	4293      	cmp	r3, r2
 800902a:	f240 80e7 	bls.w	80091fc <__ieee754_pow+0x9fc>
 800902e:	151b      	asrs	r3, r3, #20
 8009030:	f2a3 33fe 	subw	r3, r3, #1022	@ 0x3fe
 8009034:	f44f 1a80 	mov.w	sl, #1048576	@ 0x100000
 8009038:	fa4a fa03 	asr.w	sl, sl, r3
 800903c:	44da      	add	sl, fp
 800903e:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8009042:	4890      	ldr	r0, [pc, #576]	@ (8009284 <__ieee754_pow+0xa84>)
 8009044:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8009048:	4108      	asrs	r0, r1
 800904a:	ea00 030a 	and.w	r3, r0, sl
 800904e:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8009052:	f1c1 0114 	rsb	r1, r1, #20
 8009056:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800905a:	fa4a fa01 	asr.w	sl, sl, r1
 800905e:	f1bb 0f00 	cmp.w	fp, #0
 8009062:	4640      	mov	r0, r8
 8009064:	4649      	mov	r1, r9
 8009066:	f04f 0200 	mov.w	r2, #0
 800906a:	bfb8      	it	lt
 800906c:	f1ca 0a00 	rsblt	sl, sl, #0
 8009070:	f7f7 f902 	bl	8000278 <__aeabi_dsub>
 8009074:	4680      	mov	r8, r0
 8009076:	4689      	mov	r9, r1
 8009078:	4632      	mov	r2, r6
 800907a:	463b      	mov	r3, r7
 800907c:	4640      	mov	r0, r8
 800907e:	4649      	mov	r1, r9
 8009080:	f7f7 f8fc 	bl	800027c <__adddf3>
 8009084:	2400      	movs	r4, #0
 8009086:	a36a      	add	r3, pc, #424	@ (adr r3, 8009230 <__ieee754_pow+0xa30>)
 8009088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800908c:	4620      	mov	r0, r4
 800908e:	460d      	mov	r5, r1
 8009090:	f7f7 faaa 	bl	80005e8 <__aeabi_dmul>
 8009094:	4642      	mov	r2, r8
 8009096:	e9cd 0100 	strd	r0, r1, [sp]
 800909a:	464b      	mov	r3, r9
 800909c:	4620      	mov	r0, r4
 800909e:	4629      	mov	r1, r5
 80090a0:	f7f7 f8ea 	bl	8000278 <__aeabi_dsub>
 80090a4:	4602      	mov	r2, r0
 80090a6:	460b      	mov	r3, r1
 80090a8:	4630      	mov	r0, r6
 80090aa:	4639      	mov	r1, r7
 80090ac:	f7f7 f8e4 	bl	8000278 <__aeabi_dsub>
 80090b0:	a361      	add	r3, pc, #388	@ (adr r3, 8009238 <__ieee754_pow+0xa38>)
 80090b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090b6:	f7f7 fa97 	bl	80005e8 <__aeabi_dmul>
 80090ba:	a361      	add	r3, pc, #388	@ (adr r3, 8009240 <__ieee754_pow+0xa40>)
 80090bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090c0:	4680      	mov	r8, r0
 80090c2:	4689      	mov	r9, r1
 80090c4:	4620      	mov	r0, r4
 80090c6:	4629      	mov	r1, r5
 80090c8:	f7f7 fa8e 	bl	80005e8 <__aeabi_dmul>
 80090cc:	4602      	mov	r2, r0
 80090ce:	460b      	mov	r3, r1
 80090d0:	4640      	mov	r0, r8
 80090d2:	4649      	mov	r1, r9
 80090d4:	f7f7 f8d2 	bl	800027c <__adddf3>
 80090d8:	4604      	mov	r4, r0
 80090da:	460d      	mov	r5, r1
 80090dc:	4602      	mov	r2, r0
 80090de:	460b      	mov	r3, r1
 80090e0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80090e4:	f7f7 f8ca 	bl	800027c <__adddf3>
 80090e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80090ec:	4680      	mov	r8, r0
 80090ee:	4689      	mov	r9, r1
 80090f0:	f7f7 f8c2 	bl	8000278 <__aeabi_dsub>
 80090f4:	4602      	mov	r2, r0
 80090f6:	460b      	mov	r3, r1
 80090f8:	4620      	mov	r0, r4
 80090fa:	4629      	mov	r1, r5
 80090fc:	f7f7 f8bc 	bl	8000278 <__aeabi_dsub>
 8009100:	4642      	mov	r2, r8
 8009102:	4606      	mov	r6, r0
 8009104:	460f      	mov	r7, r1
 8009106:	464b      	mov	r3, r9
 8009108:	4640      	mov	r0, r8
 800910a:	4649      	mov	r1, r9
 800910c:	f7f7 fa6c 	bl	80005e8 <__aeabi_dmul>
 8009110:	a34d      	add	r3, pc, #308	@ (adr r3, 8009248 <__ieee754_pow+0xa48>)
 8009112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009116:	4604      	mov	r4, r0
 8009118:	460d      	mov	r5, r1
 800911a:	f7f7 fa65 	bl	80005e8 <__aeabi_dmul>
 800911e:	a34c      	add	r3, pc, #304	@ (adr r3, 8009250 <__ieee754_pow+0xa50>)
 8009120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009124:	f7f7 f8a8 	bl	8000278 <__aeabi_dsub>
 8009128:	4622      	mov	r2, r4
 800912a:	462b      	mov	r3, r5
 800912c:	f7f7 fa5c 	bl	80005e8 <__aeabi_dmul>
 8009130:	a349      	add	r3, pc, #292	@ (adr r3, 8009258 <__ieee754_pow+0xa58>)
 8009132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009136:	f7f7 f8a1 	bl	800027c <__adddf3>
 800913a:	4622      	mov	r2, r4
 800913c:	462b      	mov	r3, r5
 800913e:	f7f7 fa53 	bl	80005e8 <__aeabi_dmul>
 8009142:	a347      	add	r3, pc, #284	@ (adr r3, 8009260 <__ieee754_pow+0xa60>)
 8009144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009148:	f7f7 f896 	bl	8000278 <__aeabi_dsub>
 800914c:	4622      	mov	r2, r4
 800914e:	462b      	mov	r3, r5
 8009150:	f7f7 fa4a 	bl	80005e8 <__aeabi_dmul>
 8009154:	a344      	add	r3, pc, #272	@ (adr r3, 8009268 <__ieee754_pow+0xa68>)
 8009156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800915a:	f7f7 f88f 	bl	800027c <__adddf3>
 800915e:	4622      	mov	r2, r4
 8009160:	462b      	mov	r3, r5
 8009162:	f7f7 fa41 	bl	80005e8 <__aeabi_dmul>
 8009166:	4602      	mov	r2, r0
 8009168:	460b      	mov	r3, r1
 800916a:	4640      	mov	r0, r8
 800916c:	4649      	mov	r1, r9
 800916e:	f7f7 f883 	bl	8000278 <__aeabi_dsub>
 8009172:	4604      	mov	r4, r0
 8009174:	460d      	mov	r5, r1
 8009176:	4602      	mov	r2, r0
 8009178:	460b      	mov	r3, r1
 800917a:	4640      	mov	r0, r8
 800917c:	4649      	mov	r1, r9
 800917e:	f7f7 fa33 	bl	80005e8 <__aeabi_dmul>
 8009182:	2200      	movs	r2, #0
 8009184:	e9cd 0100 	strd	r0, r1, [sp]
 8009188:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800918c:	4620      	mov	r0, r4
 800918e:	4629      	mov	r1, r5
 8009190:	f7f7 f872 	bl	8000278 <__aeabi_dsub>
 8009194:	4602      	mov	r2, r0
 8009196:	460b      	mov	r3, r1
 8009198:	e9dd 0100 	ldrd	r0, r1, [sp]
 800919c:	f7f7 fb4e 	bl	800083c <__aeabi_ddiv>
 80091a0:	4632      	mov	r2, r6
 80091a2:	4604      	mov	r4, r0
 80091a4:	460d      	mov	r5, r1
 80091a6:	463b      	mov	r3, r7
 80091a8:	4640      	mov	r0, r8
 80091aa:	4649      	mov	r1, r9
 80091ac:	f7f7 fa1c 	bl	80005e8 <__aeabi_dmul>
 80091b0:	4632      	mov	r2, r6
 80091b2:	463b      	mov	r3, r7
 80091b4:	f7f7 f862 	bl	800027c <__adddf3>
 80091b8:	4602      	mov	r2, r0
 80091ba:	460b      	mov	r3, r1
 80091bc:	4620      	mov	r0, r4
 80091be:	4629      	mov	r1, r5
 80091c0:	f7f7 f85a 	bl	8000278 <__aeabi_dsub>
 80091c4:	4642      	mov	r2, r8
 80091c6:	464b      	mov	r3, r9
 80091c8:	f7f7 f856 	bl	8000278 <__aeabi_dsub>
 80091cc:	460b      	mov	r3, r1
 80091ce:	4602      	mov	r2, r0
 80091d0:	492d      	ldr	r1, [pc, #180]	@ (8009288 <__ieee754_pow+0xa88>)
 80091d2:	2000      	movs	r0, #0
 80091d4:	f7f7 f850 	bl	8000278 <__aeabi_dsub>
 80091d8:	ec41 0b10 	vmov	d0, r0, r1
 80091dc:	ee10 3a90 	vmov	r3, s1
 80091e0:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80091e4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80091e8:	da0b      	bge.n	8009202 <__ieee754_pow+0xa02>
 80091ea:	4650      	mov	r0, sl
 80091ec:	f000 f85c 	bl	80092a8 <scalbn>
 80091f0:	ec51 0b10 	vmov	r0, r1, d0
 80091f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80091f8:	f7ff bb6d 	b.w	80088d6 <__ieee754_pow+0xd6>
 80091fc:	f8dd a010 	ldr.w	sl, [sp, #16]
 8009200:	e73a      	b.n	8009078 <__ieee754_pow+0x878>
 8009202:	ec51 0b10 	vmov	r0, r1, d0
 8009206:	4619      	mov	r1, r3
 8009208:	e7f4      	b.n	80091f4 <__ieee754_pow+0x9f4>
 800920a:	491f      	ldr	r1, [pc, #124]	@ (8009288 <__ieee754_pow+0xa88>)
 800920c:	2000      	movs	r0, #0
 800920e:	f7ff bb14 	b.w	800883a <__ieee754_pow+0x3a>
 8009212:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009216:	f7ff bb10 	b.w	800883a <__ieee754_pow+0x3a>
 800921a:	4630      	mov	r0, r6
 800921c:	4639      	mov	r1, r7
 800921e:	f7ff bb0c 	b.w	800883a <__ieee754_pow+0x3a>
 8009222:	460c      	mov	r4, r1
 8009224:	f7ff bb69 	b.w	80088fa <__ieee754_pow+0xfa>
 8009228:	2400      	movs	r4, #0
 800922a:	f7ff bb4b 	b.w	80088c4 <__ieee754_pow+0xc4>
 800922e:	bf00      	nop
 8009230:	00000000 	.word	0x00000000
 8009234:	3fe62e43 	.word	0x3fe62e43
 8009238:	fefa39ef 	.word	0xfefa39ef
 800923c:	3fe62e42 	.word	0x3fe62e42
 8009240:	0ca86c39 	.word	0x0ca86c39
 8009244:	be205c61 	.word	0xbe205c61
 8009248:	72bea4d0 	.word	0x72bea4d0
 800924c:	3e663769 	.word	0x3e663769
 8009250:	c5d26bf1 	.word	0xc5d26bf1
 8009254:	3ebbbd41 	.word	0x3ebbbd41
 8009258:	af25de2c 	.word	0xaf25de2c
 800925c:	3f11566a 	.word	0x3f11566a
 8009260:	16bebd93 	.word	0x16bebd93
 8009264:	3f66c16c 	.word	0x3f66c16c
 8009268:	5555553e 	.word	0x5555553e
 800926c:	3fc55555 	.word	0x3fc55555
 8009270:	40900000 	.word	0x40900000
 8009274:	4090cbff 	.word	0x4090cbff
 8009278:	3f6f3400 	.word	0x3f6f3400
 800927c:	4090cc00 	.word	0x4090cc00
 8009280:	3fe00000 	.word	0x3fe00000
 8009284:	fff00000 	.word	0xfff00000
 8009288:	3ff00000 	.word	0x3ff00000
 800928c:	652b82fe 	.word	0x652b82fe
 8009290:	3c971547 	.word	0x3c971547

08009294 <fabs>:
 8009294:	ec51 0b10 	vmov	r0, r1, d0
 8009298:	4602      	mov	r2, r0
 800929a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800929e:	ec43 2b10 	vmov	d0, r2, r3
 80092a2:	4770      	bx	lr
 80092a4:	0000      	movs	r0, r0
	...

080092a8 <scalbn>:
 80092a8:	b570      	push	{r4, r5, r6, lr}
 80092aa:	ec55 4b10 	vmov	r4, r5, d0
 80092ae:	f3c5 510a 	ubfx	r1, r5, #20, #11
 80092b2:	4606      	mov	r6, r0
 80092b4:	462b      	mov	r3, r5
 80092b6:	b991      	cbnz	r1, 80092de <scalbn+0x36>
 80092b8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 80092bc:	4323      	orrs	r3, r4
 80092be:	d03b      	beq.n	8009338 <scalbn+0x90>
 80092c0:	4b33      	ldr	r3, [pc, #204]	@ (8009390 <scalbn+0xe8>)
 80092c2:	4620      	mov	r0, r4
 80092c4:	4629      	mov	r1, r5
 80092c6:	2200      	movs	r2, #0
 80092c8:	f7f7 f98e 	bl	80005e8 <__aeabi_dmul>
 80092cc:	4b31      	ldr	r3, [pc, #196]	@ (8009394 <scalbn+0xec>)
 80092ce:	429e      	cmp	r6, r3
 80092d0:	4604      	mov	r4, r0
 80092d2:	460d      	mov	r5, r1
 80092d4:	da0f      	bge.n	80092f6 <scalbn+0x4e>
 80092d6:	a326      	add	r3, pc, #152	@ (adr r3, 8009370 <scalbn+0xc8>)
 80092d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092dc:	e01e      	b.n	800931c <scalbn+0x74>
 80092de:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80092e2:	4291      	cmp	r1, r2
 80092e4:	d10b      	bne.n	80092fe <scalbn+0x56>
 80092e6:	4622      	mov	r2, r4
 80092e8:	4620      	mov	r0, r4
 80092ea:	4629      	mov	r1, r5
 80092ec:	f7f6 ffc6 	bl	800027c <__adddf3>
 80092f0:	4604      	mov	r4, r0
 80092f2:	460d      	mov	r5, r1
 80092f4:	e020      	b.n	8009338 <scalbn+0x90>
 80092f6:	460b      	mov	r3, r1
 80092f8:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80092fc:	3936      	subs	r1, #54	@ 0x36
 80092fe:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8009302:	4296      	cmp	r6, r2
 8009304:	dd0d      	ble.n	8009322 <scalbn+0x7a>
 8009306:	2d00      	cmp	r5, #0
 8009308:	a11b      	add	r1, pc, #108	@ (adr r1, 8009378 <scalbn+0xd0>)
 800930a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800930e:	da02      	bge.n	8009316 <scalbn+0x6e>
 8009310:	a11b      	add	r1, pc, #108	@ (adr r1, 8009380 <scalbn+0xd8>)
 8009312:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009316:	a318      	add	r3, pc, #96	@ (adr r3, 8009378 <scalbn+0xd0>)
 8009318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800931c:	f7f7 f964 	bl	80005e8 <__aeabi_dmul>
 8009320:	e7e6      	b.n	80092f0 <scalbn+0x48>
 8009322:	1872      	adds	r2, r6, r1
 8009324:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8009328:	428a      	cmp	r2, r1
 800932a:	dcec      	bgt.n	8009306 <scalbn+0x5e>
 800932c:	2a00      	cmp	r2, #0
 800932e:	dd06      	ble.n	800933e <scalbn+0x96>
 8009330:	f36f 531e 	bfc	r3, #20, #11
 8009334:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009338:	ec45 4b10 	vmov	d0, r4, r5
 800933c:	bd70      	pop	{r4, r5, r6, pc}
 800933e:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8009342:	da08      	bge.n	8009356 <scalbn+0xae>
 8009344:	2d00      	cmp	r5, #0
 8009346:	a10a      	add	r1, pc, #40	@ (adr r1, 8009370 <scalbn+0xc8>)
 8009348:	e9d1 0100 	ldrd	r0, r1, [r1]
 800934c:	dac3      	bge.n	80092d6 <scalbn+0x2e>
 800934e:	a10e      	add	r1, pc, #56	@ (adr r1, 8009388 <scalbn+0xe0>)
 8009350:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009354:	e7bf      	b.n	80092d6 <scalbn+0x2e>
 8009356:	3236      	adds	r2, #54	@ 0x36
 8009358:	f36f 531e 	bfc	r3, #20, #11
 800935c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009360:	4620      	mov	r0, r4
 8009362:	4b0d      	ldr	r3, [pc, #52]	@ (8009398 <scalbn+0xf0>)
 8009364:	4629      	mov	r1, r5
 8009366:	2200      	movs	r2, #0
 8009368:	e7d8      	b.n	800931c <scalbn+0x74>
 800936a:	bf00      	nop
 800936c:	f3af 8000 	nop.w
 8009370:	c2f8f359 	.word	0xc2f8f359
 8009374:	01a56e1f 	.word	0x01a56e1f
 8009378:	8800759c 	.word	0x8800759c
 800937c:	7e37e43c 	.word	0x7e37e43c
 8009380:	8800759c 	.word	0x8800759c
 8009384:	fe37e43c 	.word	0xfe37e43c
 8009388:	c2f8f359 	.word	0xc2f8f359
 800938c:	81a56e1f 	.word	0x81a56e1f
 8009390:	43500000 	.word	0x43500000
 8009394:	ffff3cb0 	.word	0xffff3cb0
 8009398:	3c900000 	.word	0x3c900000

0800939c <with_errno>:
 800939c:	b510      	push	{r4, lr}
 800939e:	ed2d 8b02 	vpush	{d8}
 80093a2:	eeb0 8a40 	vmov.f32	s16, s0
 80093a6:	eef0 8a60 	vmov.f32	s17, s1
 80093aa:	4604      	mov	r4, r0
 80093ac:	f7fe fa5e 	bl	800786c <__errno>
 80093b0:	eeb0 0a48 	vmov.f32	s0, s16
 80093b4:	eef0 0a68 	vmov.f32	s1, s17
 80093b8:	ecbd 8b02 	vpop	{d8}
 80093bc:	6004      	str	r4, [r0, #0]
 80093be:	bd10      	pop	{r4, pc}

080093c0 <xflow>:
 80093c0:	4603      	mov	r3, r0
 80093c2:	b507      	push	{r0, r1, r2, lr}
 80093c4:	ec51 0b10 	vmov	r0, r1, d0
 80093c8:	b183      	cbz	r3, 80093ec <xflow+0x2c>
 80093ca:	4602      	mov	r2, r0
 80093cc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80093d0:	e9cd 2300 	strd	r2, r3, [sp]
 80093d4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80093d8:	f7f7 f906 	bl	80005e8 <__aeabi_dmul>
 80093dc:	ec41 0b10 	vmov	d0, r0, r1
 80093e0:	2022      	movs	r0, #34	@ 0x22
 80093e2:	b003      	add	sp, #12
 80093e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80093e8:	f7ff bfd8 	b.w	800939c <with_errno>
 80093ec:	4602      	mov	r2, r0
 80093ee:	460b      	mov	r3, r1
 80093f0:	e7ee      	b.n	80093d0 <xflow+0x10>
 80093f2:	0000      	movs	r0, r0
 80093f4:	0000      	movs	r0, r0
	...

080093f8 <__math_uflow>:
 80093f8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8009400 <__math_uflow+0x8>
 80093fc:	f7ff bfe0 	b.w	80093c0 <xflow>
 8009400:	00000000 	.word	0x00000000
 8009404:	10000000 	.word	0x10000000

08009408 <__math_oflow>:
 8009408:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8009410 <__math_oflow+0x8>
 800940c:	f7ff bfd8 	b.w	80093c0 <xflow>
 8009410:	00000000 	.word	0x00000000
 8009414:	70000000 	.word	0x70000000

08009418 <_init>:
 8009418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800941a:	bf00      	nop
 800941c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800941e:	bc08      	pop	{r3}
 8009420:	469e      	mov	lr, r3
 8009422:	4770      	bx	lr

08009424 <_fini>:
 8009424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009426:	bf00      	nop
 8009428:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800942a:	bc08      	pop	{r3}
 800942c:	469e      	mov	lr, r3
 800942e:	4770      	bx	lr
