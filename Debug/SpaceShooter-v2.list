
SpaceShooter-v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a518  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008e0  0800a6a8  0800a6a8  0000b6a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800af88  0800af88  0000c07c  2**0
                  CONTENTS
  4 .ARM          00000008  0800af88  0800af88  0000bf88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800af90  0800af90  0000c07c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800af90  0800af90  0000bf90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800af94  0800af94  0000bf94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  0800af98  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004d98  2000007c  0800b014  0000c07c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004e14  0800b014  0000ce14  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c07c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000155e0  00000000  00000000  0000c0ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003434  00000000  00000000  0002168c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001580  00000000  00000000  00024ac0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000106d  00000000  00000000  00026040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024444  00000000  00000000  000270ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018ab4  00000000  00000000  0004b4f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000db0a7  00000000  00000000  00063fa5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013f04c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000067c4  00000000  00000000  0013f090  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  00145854  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000007c 	.word	0x2000007c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a690 	.word	0x0800a690

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000080 	.word	0x20000080
 80001cc:	0800a690 	.word	0x0800a690

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	@ 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmpun>:
 8000b1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b24:	d102      	bne.n	8000b2c <__aeabi_dcmpun+0x10>
 8000b26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b2a:	d10a      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x20>
 8000b36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b3a:	d102      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	f04f 0001 	mov.w	r0, #1
 8000b46:	4770      	bx	lr

08000b48 <GFX_DrowLine>:
	        }
	   }
}

//Bresenham's algorithm - Wikipedia
void GFX_DrowLine(int X1, int Y1,int X2,int Y2,int I_O) {
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b08e      	sub	sp, #56	@ 0x38
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	60f8      	str	r0, [r7, #12]
 8000b50:	60b9      	str	r1, [r7, #8]
 8000b52:	607a      	str	r2, [r7, #4]
 8000b54:	603b      	str	r3, [r7, #0]
	int CurrentX, CurrentY, Xinc, Yinc,
		Dx, Dy, TwoDx, TwoDy,
		TwoDxAccumulatedError, TwoDyAccumulatedError;

	Dx = (X2-X1);
 8000b56:	687a      	ldr	r2, [r7, #4]
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	1ad3      	subs	r3, r2, r3
 8000b5c:	627b      	str	r3, [r7, #36]	@ 0x24
	Dy = (Y2-Y1);
 8000b5e:	683a      	ldr	r2, [r7, #0]
 8000b60:	68bb      	ldr	r3, [r7, #8]
 8000b62:	1ad3      	subs	r3, r2, r3
 8000b64:	623b      	str	r3, [r7, #32]

	TwoDx = Dx + Dx;
 8000b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b68:	005b      	lsls	r3, r3, #1
 8000b6a:	61fb      	str	r3, [r7, #28]
	TwoDy = Dy + Dy;
 8000b6c:	6a3b      	ldr	r3, [r7, #32]
 8000b6e:	005b      	lsls	r3, r3, #1
 8000b70:	61bb      	str	r3, [r7, #24]

	CurrentX = X1;
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	637b      	str	r3, [r7, #52]	@ 0x34
	CurrentY = Y1;
 8000b76:	68bb      	ldr	r3, [r7, #8]
 8000b78:	633b      	str	r3, [r7, #48]	@ 0x30

	Xinc = 1;
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	Yinc = 1;
 8000b7e:	2301      	movs	r3, #1
 8000b80:	62bb      	str	r3, [r7, #40]	@ 0x28

	if(Dx < 0) {
 8000b82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	da08      	bge.n	8000b9a <GFX_DrowLine+0x52>

		Xinc = -1;
 8000b88:	f04f 33ff 	mov.w	r3, #4294967295
 8000b8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
		Dx = -Dx;
 8000b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b90:	425b      	negs	r3, r3
 8000b92:	627b      	str	r3, [r7, #36]	@ 0x24
		TwoDx = -TwoDx;
 8000b94:	69fb      	ldr	r3, [r7, #28]
 8000b96:	425b      	negs	r3, r3
 8000b98:	61fb      	str	r3, [r7, #28]
	}

	if (Dy < 0) {
 8000b9a:	6a3b      	ldr	r3, [r7, #32]
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	da08      	bge.n	8000bb2 <GFX_DrowLine+0x6a>
		Yinc = -1;
 8000ba0:	f04f 33ff 	mov.w	r3, #4294967295
 8000ba4:	62bb      	str	r3, [r7, #40]	@ 0x28
		Dy = -Dy;
 8000ba6:	6a3b      	ldr	r3, [r7, #32]
 8000ba8:	425b      	negs	r3, r3
 8000baa:	623b      	str	r3, [r7, #32]
		TwoDy = -TwoDy;
 8000bac:	69bb      	ldr	r3, [r7, #24]
 8000bae:	425b      	negs	r3, r3
 8000bb0:	61bb      	str	r3, [r7, #24]
	}

	SSD1327_SetPixel(X1,Y1,I_O);
 8000bb2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000bb4:	b2db      	uxtb	r3, r3
 8000bb6:	461a      	mov	r2, r3
 8000bb8:	68b9      	ldr	r1, [r7, #8]
 8000bba:	68f8      	ldr	r0, [r7, #12]
 8000bbc:	f003 fa7a 	bl	80040b4 <SSD1327_SetPixel>

	if ((Dx != 0) || (Dy != 0)) {
 8000bc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d102      	bne.n	8000bcc <GFX_DrowLine+0x84>
 8000bc6:	6a3b      	ldr	r3, [r7, #32]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d046      	beq.n	8000c5a <GFX_DrowLine+0x112>

		if (Dy <= Dx) {
 8000bcc:	6a3a      	ldr	r2, [r7, #32]
 8000bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bd0:	429a      	cmp	r2, r3
 8000bd2:	dc21      	bgt.n	8000c18 <GFX_DrowLine+0xd0>
			TwoDxAccumulatedError = 0;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	617b      	str	r3, [r7, #20]
			do {
			    CurrentX += Xinc;
 8000bd8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000bda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000bdc:	4413      	add	r3, r2
 8000bde:	637b      	str	r3, [r7, #52]	@ 0x34
			    TwoDxAccumulatedError += TwoDy;
 8000be0:	697a      	ldr	r2, [r7, #20]
 8000be2:	69bb      	ldr	r3, [r7, #24]
 8000be4:	4413      	add	r3, r2
 8000be6:	617b      	str	r3, [r7, #20]
			    if(TwoDxAccumulatedError > Dx) {
 8000be8:	697a      	ldr	r2, [r7, #20]
 8000bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bec:	429a      	cmp	r2, r3
 8000bee:	dd07      	ble.n	8000c00 <GFX_DrowLine+0xb8>
			        CurrentY += Yinc;
 8000bf0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000bf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000bf4:	4413      	add	r3, r2
 8000bf6:	633b      	str	r3, [r7, #48]	@ 0x30
			        TwoDxAccumulatedError -= TwoDx;
 8000bf8:	697a      	ldr	r2, [r7, #20]
 8000bfa:	69fb      	ldr	r3, [r7, #28]
 8000bfc:	1ad3      	subs	r3, r2, r3
 8000bfe:	617b      	str	r3, [r7, #20]
			    }
			    SSD1327_SetPixel(CurrentX,CurrentY,I_O);
 8000c00:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000c02:	b2db      	uxtb	r3, r3
 8000c04:	461a      	mov	r2, r3
 8000c06:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8000c08:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8000c0a:	f003 fa53 	bl	80040b4 <SSD1327_SetPixel>
			  } while (CurrentX != X2);
 8000c0e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	429a      	cmp	r2, r3
 8000c14:	d1e0      	bne.n	8000bd8 <GFX_DrowLine+0x90>
			      }
			      SSD1327_SetPixel(CurrentX,CurrentY,I_O);
			  } while (CurrentY != Y2);
		  }
	}
}
 8000c16:	e020      	b.n	8000c5a <GFX_DrowLine+0x112>
			  TwoDyAccumulatedError = 0;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	613b      	str	r3, [r7, #16]
			      CurrentY += Yinc;
 8000c1c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000c1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000c20:	4413      	add	r3, r2
 8000c22:	633b      	str	r3, [r7, #48]	@ 0x30
			      TwoDyAccumulatedError += TwoDx;
 8000c24:	693a      	ldr	r2, [r7, #16]
 8000c26:	69fb      	ldr	r3, [r7, #28]
 8000c28:	4413      	add	r3, r2
 8000c2a:	613b      	str	r3, [r7, #16]
			      if(TwoDyAccumulatedError>Dy) {
 8000c2c:	693a      	ldr	r2, [r7, #16]
 8000c2e:	6a3b      	ldr	r3, [r7, #32]
 8000c30:	429a      	cmp	r2, r3
 8000c32:	dd07      	ble.n	8000c44 <GFX_DrowLine+0xfc>
				      CurrentX += Xinc;
 8000c34:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000c36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c38:	4413      	add	r3, r2
 8000c3a:	637b      	str	r3, [r7, #52]	@ 0x34
				      TwoDyAccumulatedError -= TwoDy;
 8000c3c:	693a      	ldr	r2, [r7, #16]
 8000c3e:	69bb      	ldr	r3, [r7, #24]
 8000c40:	1ad3      	subs	r3, r2, r3
 8000c42:	613b      	str	r3, [r7, #16]
			      SSD1327_SetPixel(CurrentX,CurrentY,I_O);
 8000c44:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000c46:	b2db      	uxtb	r3, r3
 8000c48:	461a      	mov	r2, r3
 8000c4a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8000c4c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8000c4e:	f003 fa31 	bl	80040b4 <SSD1327_SetPixel>
			  } while (CurrentY != Y2);
 8000c52:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	429a      	cmp	r2, r3
 8000c58:	d1e0      	bne.n	8000c1c <GFX_DrowLine+0xd4>
}
 8000c5a:	bf00      	nop
 8000c5c:	3738      	adds	r7, #56	@ 0x38
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}

08000c62 <GFX_DrowCircleHelper>:
		}
	}
}

void GFX_DrowCircleHelper(int x0, int y0, int r, uint8_t cornername, uint8_t color )
{
 8000c62:	b580      	push	{r7, lr}
 8000c64:	b08a      	sub	sp, #40	@ 0x28
 8000c66:	af00      	add	r7, sp, #0
 8000c68:	60f8      	str	r0, [r7, #12]
 8000c6a:	60b9      	str	r1, [r7, #8]
 8000c6c:	607a      	str	r2, [r7, #4]
 8000c6e:	70fb      	strb	r3, [r7, #3]
	int f 		= 1 - r;
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	f1c3 0301 	rsb	r3, r3, #1
 8000c76:	627b      	str	r3, [r7, #36]	@ 0x24
	int ddF_x 	= 1;
 8000c78:	2301      	movs	r3, #1
 8000c7a:	623b      	str	r3, [r7, #32]
	int ddF_y	= -2 * r;
 8000c7c:	687a      	ldr	r2, [r7, #4]
 8000c7e:	4613      	mov	r3, r2
 8000c80:	07db      	lsls	r3, r3, #31
 8000c82:	1a9b      	subs	r3, r3, r2
 8000c84:	005b      	lsls	r3, r3, #1
 8000c86:	61fb      	str	r3, [r7, #28]
	int x		= 0;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	61bb      	str	r3, [r7, #24]
	int y		= r;
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	617b      	str	r3, [r7, #20]

	while(x<y)
 8000c90:	e082      	b.n	8000d98 <GFX_DrowCircleHelper+0x136>
	{
		if(f >= 0)
 8000c92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	db09      	blt.n	8000cac <GFX_DrowCircleHelper+0x4a>
		{
			y--;
 8000c98:	697b      	ldr	r3, [r7, #20]
 8000c9a:	3b01      	subs	r3, #1
 8000c9c:	617b      	str	r3, [r7, #20]
			ddF_y += 2;
 8000c9e:	69fb      	ldr	r3, [r7, #28]
 8000ca0:	3302      	adds	r3, #2
 8000ca2:	61fb      	str	r3, [r7, #28]
			f += ddF_y;
 8000ca4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000ca6:	69fb      	ldr	r3, [r7, #28]
 8000ca8:	4413      	add	r3, r2
 8000caa:	627b      	str	r3, [r7, #36]	@ 0x24
		}
		x++;
 8000cac:	69bb      	ldr	r3, [r7, #24]
 8000cae:	3301      	adds	r3, #1
 8000cb0:	61bb      	str	r3, [r7, #24]
		ddF_x += 2;
 8000cb2:	6a3b      	ldr	r3, [r7, #32]
 8000cb4:	3302      	adds	r3, #2
 8000cb6:	623b      	str	r3, [r7, #32]
		f += ddF_x;
 8000cb8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000cba:	6a3b      	ldr	r3, [r7, #32]
 8000cbc:	4413      	add	r3, r2
 8000cbe:	627b      	str	r3, [r7, #36]	@ 0x24

		if(cornername & 0x4)
 8000cc0:	78fb      	ldrb	r3, [r7, #3]
 8000cc2:	f003 0304 	and.w	r3, r3, #4
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d015      	beq.n	8000cf6 <GFX_DrowCircleHelper+0x94>
		{
			SSD1327_SetPixel(x0 + x, y0 + y, color);
 8000cca:	68fa      	ldr	r2, [r7, #12]
 8000ccc:	69bb      	ldr	r3, [r7, #24]
 8000cce:	18d0      	adds	r0, r2, r3
 8000cd0:	68ba      	ldr	r2, [r7, #8]
 8000cd2:	697b      	ldr	r3, [r7, #20]
 8000cd4:	4413      	add	r3, r2
 8000cd6:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8000cda:	4619      	mov	r1, r3
 8000cdc:	f003 f9ea 	bl	80040b4 <SSD1327_SetPixel>
			SSD1327_SetPixel(x0 + y, y0 + x, color);
 8000ce0:	68fa      	ldr	r2, [r7, #12]
 8000ce2:	697b      	ldr	r3, [r7, #20]
 8000ce4:	18d0      	adds	r0, r2, r3
 8000ce6:	68ba      	ldr	r2, [r7, #8]
 8000ce8:	69bb      	ldr	r3, [r7, #24]
 8000cea:	4413      	add	r3, r2
 8000cec:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	f003 f9df 	bl	80040b4 <SSD1327_SetPixel>
		}
		if(cornername & 0x2)
 8000cf6:	78fb      	ldrb	r3, [r7, #3]
 8000cf8:	f003 0302 	and.w	r3, r3, #2
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d015      	beq.n	8000d2c <GFX_DrowCircleHelper+0xca>
		{
			SSD1327_SetPixel(x0 + x, y0 - y, color);
 8000d00:	68fa      	ldr	r2, [r7, #12]
 8000d02:	69bb      	ldr	r3, [r7, #24]
 8000d04:	18d0      	adds	r0, r2, r3
 8000d06:	68ba      	ldr	r2, [r7, #8]
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	1ad3      	subs	r3, r2, r3
 8000d0c:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8000d10:	4619      	mov	r1, r3
 8000d12:	f003 f9cf 	bl	80040b4 <SSD1327_SetPixel>
			SSD1327_SetPixel(x0 + y, y0 - x, color);
 8000d16:	68fa      	ldr	r2, [r7, #12]
 8000d18:	697b      	ldr	r3, [r7, #20]
 8000d1a:	18d0      	adds	r0, r2, r3
 8000d1c:	68ba      	ldr	r2, [r7, #8]
 8000d1e:	69bb      	ldr	r3, [r7, #24]
 8000d20:	1ad3      	subs	r3, r2, r3
 8000d22:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8000d26:	4619      	mov	r1, r3
 8000d28:	f003 f9c4 	bl	80040b4 <SSD1327_SetPixel>
		}
		if(cornername & 0x8)
 8000d2c:	78fb      	ldrb	r3, [r7, #3]
 8000d2e:	f003 0308 	and.w	r3, r3, #8
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d015      	beq.n	8000d62 <GFX_DrowCircleHelper+0x100>
		{
			SSD1327_SetPixel(x0 - x, y0 + y, color);
 8000d36:	68fa      	ldr	r2, [r7, #12]
 8000d38:	69bb      	ldr	r3, [r7, #24]
 8000d3a:	1ad0      	subs	r0, r2, r3
 8000d3c:	68ba      	ldr	r2, [r7, #8]
 8000d3e:	697b      	ldr	r3, [r7, #20]
 8000d40:	4413      	add	r3, r2
 8000d42:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8000d46:	4619      	mov	r1, r3
 8000d48:	f003 f9b4 	bl	80040b4 <SSD1327_SetPixel>
			SSD1327_SetPixel(x0 - y, y0 + x, color);
 8000d4c:	68fa      	ldr	r2, [r7, #12]
 8000d4e:	697b      	ldr	r3, [r7, #20]
 8000d50:	1ad0      	subs	r0, r2, r3
 8000d52:	68ba      	ldr	r2, [r7, #8]
 8000d54:	69bb      	ldr	r3, [r7, #24]
 8000d56:	4413      	add	r3, r2
 8000d58:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	f003 f9a9 	bl	80040b4 <SSD1327_SetPixel>
		}
		if(cornername & 0x1)
 8000d62:	78fb      	ldrb	r3, [r7, #3]
 8000d64:	f003 0301 	and.w	r3, r3, #1
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d015      	beq.n	8000d98 <GFX_DrowCircleHelper+0x136>
		{
			SSD1327_SetPixel(x0 - x, y0 - y, color);
 8000d6c:	68fa      	ldr	r2, [r7, #12]
 8000d6e:	69bb      	ldr	r3, [r7, #24]
 8000d70:	1ad0      	subs	r0, r2, r3
 8000d72:	68ba      	ldr	r2, [r7, #8]
 8000d74:	697b      	ldr	r3, [r7, #20]
 8000d76:	1ad3      	subs	r3, r2, r3
 8000d78:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	f003 f999 	bl	80040b4 <SSD1327_SetPixel>
			SSD1327_SetPixel(x0 - y, y0 - x, color);
 8000d82:	68fa      	ldr	r2, [r7, #12]
 8000d84:	697b      	ldr	r3, [r7, #20]
 8000d86:	1ad0      	subs	r0, r2, r3
 8000d88:	68ba      	ldr	r2, [r7, #8]
 8000d8a:	69bb      	ldr	r3, [r7, #24]
 8000d8c:	1ad3      	subs	r3, r2, r3
 8000d8e:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8000d92:	4619      	mov	r1, r3
 8000d94:	f003 f98e 	bl	80040b4 <SSD1327_SetPixel>
	while(x<y)
 8000d98:	69ba      	ldr	r2, [r7, #24]
 8000d9a:	697b      	ldr	r3, [r7, #20]
 8000d9c:	429a      	cmp	r2, r3
 8000d9e:	f6ff af78 	blt.w	8000c92 <GFX_DrowCircleHelper+0x30>
		}
	}
}
 8000da2:	bf00      	nop
 8000da4:	bf00      	nop
 8000da6:	3728      	adds	r7, #40	@ 0x28
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}

08000dac <GFX_DrowBitMap_P>:
		GFX_DrowLine(x0-y, y0+x, x0-y, y0-x,I_O);
  	}
}

void GFX_DrowBitMap_P (int x, int y, const uint8_t *bitmap, uint8_t w, uint8_t h, uint8_t color)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b086      	sub	sp, #24
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	60f8      	str	r0, [r7, #12]
 8000db4:	60b9      	str	r1, [r7, #8]
 8000db6:	607a      	str	r2, [r7, #4]
 8000db8:	70fb      	strb	r3, [r7, #3]
//
//			ssd1327_setPixel(x+i, y+j, );
//		}
//	}

	uint8_t i, j, byteWidth = (w+7)/8;
 8000dba:	78fb      	ldrb	r3, [r7, #3]
 8000dbc:	3307      	adds	r3, #7
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	da00      	bge.n	8000dc4 <GFX_DrowBitMap_P+0x18>
 8000dc2:	3307      	adds	r3, #7
 8000dc4:	10db      	asrs	r3, r3, #3
 8000dc6:	757b      	strb	r3, [r7, #21]

	for(j = 0; j < h; j++)
 8000dc8:	2300      	movs	r3, #0
 8000dca:	75bb      	strb	r3, [r7, #22]
 8000dcc:	e02d      	b.n	8000e2a <GFX_DrowBitMap_P+0x7e>
	{
		for(i = 0; i < w; i++)
 8000dce:	2300      	movs	r3, #0
 8000dd0:	75fb      	strb	r3, [r7, #23]
 8000dd2:	e023      	b.n	8000e1c <GFX_DrowBitMap_P+0x70>
		{
			if(*(bitmap + j *byteWidth + i /8) & (128 >> (i&7)) )
 8000dd4:	7dbb      	ldrb	r3, [r7, #22]
 8000dd6:	7d7a      	ldrb	r2, [r7, #21]
 8000dd8:	fb02 f303 	mul.w	r3, r2, r3
 8000ddc:	461a      	mov	r2, r3
 8000dde:	7dfb      	ldrb	r3, [r7, #23]
 8000de0:	08db      	lsrs	r3, r3, #3
 8000de2:	b2db      	uxtb	r3, r3
 8000de4:	4413      	add	r3, r2
 8000de6:	687a      	ldr	r2, [r7, #4]
 8000de8:	4413      	add	r3, r2
 8000dea:	781b      	ldrb	r3, [r3, #0]
 8000dec:	4619      	mov	r1, r3
 8000dee:	7dfb      	ldrb	r3, [r7, #23]
 8000df0:	f003 0307 	and.w	r3, r3, #7
 8000df4:	2280      	movs	r2, #128	@ 0x80
 8000df6:	fa42 f303 	asr.w	r3, r2, r3
 8000dfa:	400b      	ands	r3, r1
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d00a      	beq.n	8000e16 <GFX_DrowBitMap_P+0x6a>
				SSD1327_SetPixel(x+i, y+j, color);
 8000e00:	7dfa      	ldrb	r2, [r7, #23]
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	18d0      	adds	r0, r2, r3
 8000e06:	7dba      	ldrb	r2, [r7, #22]
 8000e08:	68bb      	ldr	r3, [r7, #8]
 8000e0a:	4413      	add	r3, r2
 8000e0c:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8000e10:	4619      	mov	r1, r3
 8000e12:	f003 f94f 	bl	80040b4 <SSD1327_SetPixel>
		for(i = 0; i < w; i++)
 8000e16:	7dfb      	ldrb	r3, [r7, #23]
 8000e18:	3301      	adds	r3, #1
 8000e1a:	75fb      	strb	r3, [r7, #23]
 8000e1c:	7dfa      	ldrb	r2, [r7, #23]
 8000e1e:	78fb      	ldrb	r3, [r7, #3]
 8000e20:	429a      	cmp	r2, r3
 8000e22:	d3d7      	bcc.n	8000dd4 <GFX_DrowBitMap_P+0x28>
	for(j = 0; j < h; j++)
 8000e24:	7dbb      	ldrb	r3, [r7, #22]
 8000e26:	3301      	adds	r3, #1
 8000e28:	75bb      	strb	r3, [r7, #22]
 8000e2a:	7dba      	ldrb	r2, [r7, #22]
 8000e2c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000e30:	429a      	cmp	r2, r3
 8000e32:	d3cc      	bcc.n	8000dce <GFX_DrowBitMap_P+0x22>
		}
	}

}
 8000e34:	bf00      	nop
 8000e36:	bf00      	nop
 8000e38:	3718      	adds	r7, #24
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
	...

08000e40 <GFX_DrowChar>:

void GFX_DrowChar(int x, int y, char c, uint8_t color, uint8_t bg, uint8_t size)
{
 8000e40:	b590      	push	{r4, r7, lr}
 8000e42:	b089      	sub	sp, #36	@ 0x24
 8000e44:	af02      	add	r7, sp, #8
 8000e46:	60f8      	str	r0, [r7, #12]
 8000e48:	60b9      	str	r1, [r7, #8]
 8000e4a:	4611      	mov	r1, r2
 8000e4c:	461a      	mov	r2, r3
 8000e4e:	460b      	mov	r3, r1
 8000e50:	71fb      	strb	r3, [r7, #7]
 8000e52:	4613      	mov	r3, r2
 8000e54:	71bb      	strb	r3, [r7, #6]

	  uint8_t line;
	  int8_t i,j;
	  if((x >= SSD1327_WIDTH)            || // Clip right
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	2b7f      	cmp	r3, #127	@ 0x7f
 8000e5a:	f300 80a9 	bgt.w	8000fb0 <GFX_DrowChar+0x170>
 8000e5e:	68bb      	ldr	r3, [r7, #8]
 8000e60:	2b7f      	cmp	r3, #127	@ 0x7f
 8000e62:	f300 80a5 	bgt.w	8000fb0 <GFX_DrowChar+0x170>
	     (y >= SSD1327_HEIGHT)           || // Clip bottom
	     ((x + 6 * size - 1) < 0) || // Clip left
 8000e66:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8000e6a:	4613      	mov	r3, r2
 8000e6c:	005b      	lsls	r3, r3, #1
 8000e6e:	4413      	add	r3, r2
 8000e70:	005b      	lsls	r3, r3, #1
 8000e72:	461a      	mov	r2, r3
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	4413      	add	r3, r2
	     (y >= SSD1327_HEIGHT)           || // Clip bottom
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	f340 8099 	ble.w	8000fb0 <GFX_DrowChar+0x170>
	     ((y + 8 * size - 1) < 0))   // Clip top
 8000e7e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000e82:	00da      	lsls	r2, r3, #3
 8000e84:	68bb      	ldr	r3, [r7, #8]
 8000e86:	4413      	add	r3, r2
	     ((x + 6 * size - 1) < 0) || // Clip left
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	f340 8091 	ble.w	8000fb0 <GFX_DrowChar+0x170>
	    return;

	  for  (i=0; i<6; i++ ) {
 8000e8e:	2300      	movs	r3, #0
 8000e90:	75bb      	strb	r3, [r7, #22]
 8000e92:	e087      	b.n	8000fa4 <GFX_DrowChar+0x164>
	    if (i == 5)
 8000e94:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8000e98:	2b05      	cmp	r3, #5
 8000e9a:	d102      	bne.n	8000ea2 <GFX_DrowChar+0x62>
	      line = 0x0;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	75fb      	strb	r3, [r7, #23]
 8000ea0:	e009      	b.n	8000eb6 <GFX_DrowChar+0x76>
	    else
	      //line = pgm_read_byte(font+(c*5)+i);
	    	line = (font[(c*5)+i]);
 8000ea2:	79fa      	ldrb	r2, [r7, #7]
 8000ea4:	4613      	mov	r3, r2
 8000ea6:	009b      	lsls	r3, r3, #2
 8000ea8:	441a      	add	r2, r3
 8000eaa:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8000eae:	4413      	add	r3, r2
 8000eb0:	4a41      	ldr	r2, [pc, #260]	@ (8000fb8 <GFX_DrowChar+0x178>)
 8000eb2:	5cd3      	ldrb	r3, [r2, r3]
 8000eb4:	75fb      	strb	r3, [r7, #23]
	    for (j = 0; j<8; j++) {
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	757b      	strb	r3, [r7, #21]
 8000eba:	e069      	b.n	8000f90 <GFX_DrowChar+0x150>
	      if (line & 0x1) {
 8000ebc:	7dfb      	ldrb	r3, [r7, #23]
 8000ebe:	f003 0301 	and.w	r3, r3, #1
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d02a      	beq.n	8000f1c <GFX_DrowChar+0xdc>
	        if (size == 1) // default size
 8000ec6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000eca:	2b01      	cmp	r3, #1
 8000ecc:	d10c      	bne.n	8000ee8 <GFX_DrowChar+0xa8>
	        	SSD1327_SetPixel(x+i, y+j, color);
 8000ece:	f997 2016 	ldrsb.w	r2, [r7, #22]
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	18d0      	adds	r0, r2, r3
 8000ed6:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8000eda:	68bb      	ldr	r3, [r7, #8]
 8000edc:	4413      	add	r3, r2
 8000ede:	79ba      	ldrb	r2, [r7, #6]
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	f003 f8e7 	bl	80040b4 <SSD1327_SetPixel>
 8000ee6:	e04a      	b.n	8000f7e <GFX_DrowChar+0x13e>
	        else {  // big size
	        	GFX_FillRect(x+(i*size), y+(j*size), size, size, color);
 8000ee8:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8000eec:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8000ef0:	fb03 f202 	mul.w	r2, r3, r2
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	18d0      	adds	r0, r2, r3
 8000ef8:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000efc:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8000f00:	fb03 f202 	mul.w	r2, r3, r2
 8000f04:	68bb      	ldr	r3, [r7, #8]
 8000f06:	18d1      	adds	r1, r2, r3
 8000f08:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8000f0c:	f897 402c 	ldrb.w	r4, [r7, #44]	@ 0x2c
 8000f10:	79bb      	ldrb	r3, [r7, #6]
 8000f12:	9300      	str	r3, [sp, #0]
 8000f14:	4623      	mov	r3, r4
 8000f16:	f000 f851 	bl	8000fbc <GFX_FillRect>
 8000f1a:	e030      	b.n	8000f7e <GFX_DrowChar+0x13e>
	        }
	      } else if (bg != color) {
 8000f1c:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8000f20:	79bb      	ldrb	r3, [r7, #6]
 8000f22:	429a      	cmp	r2, r3
 8000f24:	d02b      	beq.n	8000f7e <GFX_DrowChar+0x13e>
	        if (size == 1) // default size
 8000f26:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000f2a:	2b01      	cmp	r3, #1
 8000f2c:	d10d      	bne.n	8000f4a <GFX_DrowChar+0x10a>
	        	SSD1327_SetPixel(x+i, y+j, bg);
 8000f2e:	f997 2016 	ldrsb.w	r2, [r7, #22]
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	18d0      	adds	r0, r2, r3
 8000f36:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8000f3a:	68bb      	ldr	r3, [r7, #8]
 8000f3c:	4413      	add	r3, r2
 8000f3e:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8000f42:	4619      	mov	r1, r3
 8000f44:	f003 f8b6 	bl	80040b4 <SSD1327_SetPixel>
 8000f48:	e019      	b.n	8000f7e <GFX_DrowChar+0x13e>
	        else {  // big size
	        	GFX_FillRect(x+i*size, y+j*size, size, size, bg);
 8000f4a:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8000f4e:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8000f52:	fb03 f202 	mul.w	r2, r3, r2
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	18d0      	adds	r0, r2, r3
 8000f5a:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000f5e:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8000f62:	fb03 f202 	mul.w	r2, r3, r2
 8000f66:	68bb      	ldr	r3, [r7, #8]
 8000f68:	18d1      	adds	r1, r2, r3
 8000f6a:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8000f6e:	f897 402c 	ldrb.w	r4, [r7, #44]	@ 0x2c
 8000f72:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000f76:	9300      	str	r3, [sp, #0]
 8000f78:	4623      	mov	r3, r4
 8000f7a:	f000 f81f 	bl	8000fbc <GFX_FillRect>
	        }
	      }
	      line >>= 1;
 8000f7e:	7dfb      	ldrb	r3, [r7, #23]
 8000f80:	085b      	lsrs	r3, r3, #1
 8000f82:	75fb      	strb	r3, [r7, #23]
	    for (j = 0; j<8; j++) {
 8000f84:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000f88:	b2db      	uxtb	r3, r3
 8000f8a:	3301      	adds	r3, #1
 8000f8c:	b2db      	uxtb	r3, r3
 8000f8e:	757b      	strb	r3, [r7, #21]
 8000f90:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000f94:	2b07      	cmp	r3, #7
 8000f96:	dd91      	ble.n	8000ebc <GFX_DrowChar+0x7c>
	  for  (i=0; i<6; i++ ) {
 8000f98:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8000f9c:	b2db      	uxtb	r3, r3
 8000f9e:	3301      	adds	r3, #1
 8000fa0:	b2db      	uxtb	r3, r3
 8000fa2:	75bb      	strb	r3, [r7, #22]
 8000fa4:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8000fa8:	2b05      	cmp	r3, #5
 8000faa:	f77f af73 	ble.w	8000e94 <GFX_DrowChar+0x54>
 8000fae:	e000      	b.n	8000fb2 <GFX_DrowChar+0x172>
	    return;
 8000fb0:	bf00      	nop
	    }
	  }
}
 8000fb2:	371c      	adds	r7, #28
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd90      	pop	{r4, r7, pc}
 8000fb8:	0800a6a8 	.word	0x0800a6a8

08000fbc <GFX_FillRect>:

void GFX_FillRect (int x, int y, int w, int h, uint8_t color )
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b086      	sub	sp, #24
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	60f8      	str	r0, [r7, #12]
 8000fc4:	60b9      	str	r1, [r7, #8]
 8000fc6:	607a      	str	r2, [r7, #4]
 8000fc8:	603b      	str	r3, [r7, #0]
	int16_t i;
	for(i=x; i <x+w; i++)
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	82fb      	strh	r3, [r7, #22]
 8000fce:	e00d      	b.n	8000fec <GFX_FillRect+0x30>
	{
		GFX_DrowFastVLine(i, y, h, color);
 8000fd0:	f9b7 0016 	ldrsh.w	r0, [r7, #22]
 8000fd4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000fd8:	683a      	ldr	r2, [r7, #0]
 8000fda:	68b9      	ldr	r1, [r7, #8]
 8000fdc:	f000 f812 	bl	8001004 <GFX_DrowFastVLine>
	for(i=x; i <x+w; i++)
 8000fe0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000fe4:	b29b      	uxth	r3, r3
 8000fe6:	3301      	adds	r3, #1
 8000fe8:	b29b      	uxth	r3, r3
 8000fea:	82fb      	strh	r3, [r7, #22]
 8000fec:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8000ff0:	68f9      	ldr	r1, [r7, #12]
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	440b      	add	r3, r1
 8000ff6:	429a      	cmp	r2, r3
 8000ff8:	dbea      	blt.n	8000fd0 <GFX_FillRect+0x14>
	}
}
 8000ffa:	bf00      	nop
 8000ffc:	bf00      	nop
 8000ffe:	3718      	adds	r7, #24
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}

08001004 <GFX_DrowFastVLine>:

void GFX_DrowFastVLine(int x, int y, int h, uint8_t color)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b086      	sub	sp, #24
 8001008:	af02      	add	r7, sp, #8
 800100a:	60f8      	str	r0, [r7, #12]
 800100c:	60b9      	str	r1, [r7, #8]
 800100e:	607a      	str	r2, [r7, #4]
 8001010:	70fb      	strb	r3, [r7, #3]
	GFX_DrowLine(x, y, x, y+h-1, color);
 8001012:	68ba      	ldr	r2, [r7, #8]
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	4413      	add	r3, r2
 8001018:	1e5a      	subs	r2, r3, #1
 800101a:	78fb      	ldrb	r3, [r7, #3]
 800101c:	9300      	str	r3, [sp, #0]
 800101e:	4613      	mov	r3, r2
 8001020:	68fa      	ldr	r2, [r7, #12]
 8001022:	68b9      	ldr	r1, [r7, #8]
 8001024:	68f8      	ldr	r0, [r7, #12]
 8001026:	f7ff fd8f 	bl	8000b48 <GFX_DrowLine>
}
 800102a:	bf00      	nop
 800102c:	3710      	adds	r7, #16
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}

08001032 <GFX_DrowFastHLine>:

void GFX_DrowFastHLine(int x, int y, int w, uint8_t color)
{
 8001032:	b580      	push	{r7, lr}
 8001034:	b086      	sub	sp, #24
 8001036:	af02      	add	r7, sp, #8
 8001038:	60f8      	str	r0, [r7, #12]
 800103a:	60b9      	str	r1, [r7, #8]
 800103c:	607a      	str	r2, [r7, #4]
 800103e:	70fb      	strb	r3, [r7, #3]
	GFX_DrowLine(x, y, x+w-1 ,y , color);
 8001040:	68fa      	ldr	r2, [r7, #12]
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	4413      	add	r3, r2
 8001046:	1e5a      	subs	r2, r3, #1
 8001048:	78fb      	ldrb	r3, [r7, #3]
 800104a:	9300      	str	r3, [sp, #0]
 800104c:	68bb      	ldr	r3, [r7, #8]
 800104e:	68b9      	ldr	r1, [r7, #8]
 8001050:	68f8      	ldr	r0, [r7, #12]
 8001052:	f7ff fd79 	bl	8000b48 <GFX_DrowLine>
}
 8001056:	bf00      	nop
 8001058:	3710      	adds	r7, #16
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
	...

08001060 <GFX_PutString>:

void GFX_PutString(int x, int y, char* str, uint8_t txt_size, uint8_t color, uint8_t bg)
{
 8001060:	b590      	push	{r4, r7, lr}
 8001062:	b087      	sub	sp, #28
 8001064:	af02      	add	r7, sp, #8
 8001066:	60f8      	str	r0, [r7, #12]
 8001068:	60b9      	str	r1, [r7, #8]
 800106a:	607a      	str	r2, [r7, #4]
 800106c:	70fb      	strb	r3, [r7, #3]
	cursor_x = x;
 800106e:	4a16      	ldr	r2, [pc, #88]	@ (80010c8 <GFX_PutString+0x68>)
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	6013      	str	r3, [r2, #0]
	cursor_y = y;
 8001074:	4a15      	ldr	r2, [pc, #84]	@ (80010cc <GFX_PutString+0x6c>)
 8001076:	68bb      	ldr	r3, [r7, #8]
 8001078:	6013      	str	r3, [r2, #0]

	while(*str)		//do kiedy jest cos w stringu
 800107a:	e01c      	b.n	80010b6 <GFX_PutString+0x56>
	{
		GFX_DrowChar(cursor_x,cursor_y, *str++, color, bg, txt_size);
 800107c:	4b12      	ldr	r3, [pc, #72]	@ (80010c8 <GFX_PutString+0x68>)
 800107e:	6818      	ldr	r0, [r3, #0]
 8001080:	4b12      	ldr	r3, [pc, #72]	@ (80010cc <GFX_PutString+0x6c>)
 8001082:	6819      	ldr	r1, [r3, #0]
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	1c5a      	adds	r2, r3, #1
 8001088:	607a      	str	r2, [r7, #4]
 800108a:	781a      	ldrb	r2, [r3, #0]
 800108c:	f897 4020 	ldrb.w	r4, [r7, #32]
 8001090:	78fb      	ldrb	r3, [r7, #3]
 8001092:	9301      	str	r3, [sp, #4]
 8001094:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001098:	9300      	str	r3, [sp, #0]
 800109a:	4623      	mov	r3, r4
 800109c:	f7ff fed0 	bl	8000e40 <GFX_DrowChar>
		cursor_x += txt_size*6; // tylko pod dany font trzeba potem to korygowa�
 80010a0:	78fa      	ldrb	r2, [r7, #3]
 80010a2:	4613      	mov	r3, r2
 80010a4:	005b      	lsls	r3, r3, #1
 80010a6:	4413      	add	r3, r2
 80010a8:	005b      	lsls	r3, r3, #1
 80010aa:	461a      	mov	r2, r3
 80010ac:	4b06      	ldr	r3, [pc, #24]	@ (80010c8 <GFX_PutString+0x68>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4413      	add	r3, r2
 80010b2:	4a05      	ldr	r2, [pc, #20]	@ (80010c8 <GFX_PutString+0x68>)
 80010b4:	6013      	str	r3, [r2, #0]
	while(*str)		//do kiedy jest cos w stringu
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	781b      	ldrb	r3, [r3, #0]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d1de      	bne.n	800107c <GFX_PutString+0x1c>
	}
}
 80010be:	bf00      	nop
 80010c0:	bf00      	nop
 80010c2:	3714      	adds	r7, #20
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd90      	pop	{r4, r7, pc}
 80010c8:	20000098 	.word	0x20000098
 80010cc:	2000009c 	.word	0x2000009c

080010d0 <GFX_PutInt>:

void GFX_PutInt (int x, int y, int data, uint8_t txt_size, uint8_t color, uint8_t bg)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b08a      	sub	sp, #40	@ 0x28
 80010d4:	af02      	add	r7, sp, #8
 80010d6:	60f8      	str	r0, [r7, #12]
 80010d8:	60b9      	str	r1, [r7, #8]
 80010da:	607a      	str	r2, [r7, #4]
 80010dc:	70fb      	strb	r3, [r7, #3]
	char buf[16];
	GFX_PutString(x, y, itoa(data, buf,10), txt_size, color, bg);
 80010de:	f107 0310 	add.w	r3, r7, #16
 80010e2:	220a      	movs	r2, #10
 80010e4:	4619      	mov	r1, r3
 80010e6:	6878      	ldr	r0, [r7, #4]
 80010e8:	f002 fa52 	bl	8003590 <itoa>
 80010ec:	4601      	mov	r1, r0
 80010ee:	78fa      	ldrb	r2, [r7, #3]
 80010f0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80010f4:	9301      	str	r3, [sp, #4]
 80010f6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80010fa:	9300      	str	r3, [sp, #0]
 80010fc:	4613      	mov	r3, r2
 80010fe:	460a      	mov	r2, r1
 8001100:	68b9      	ldr	r1, [r7, #8]
 8001102:	68f8      	ldr	r0, [r7, #12]
 8001104:	f7ff ffac 	bl	8001060 <GFX_PutString>
	//GFX_PutString(x, y, dtoa((double)data,1,1,1,1,buf), txt_size, color, bg);
	//itoa(data,buf);
	//GFX_PutString(x, y, buf , txt_size, color, bg);
}
 8001108:	bf00      	nop
 800110a:	3720      	adds	r7, #32
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}

08001110 <GFX_DrowRoundRect>:

void GFX_DrowRoundRect(int x, int y, int w, int h, uint8_t r, uint8_t color)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b086      	sub	sp, #24
 8001114:	af02      	add	r7, sp, #8
 8001116:	60f8      	str	r0, [r7, #12]
 8001118:	60b9      	str	r1, [r7, #8]
 800111a:	607a      	str	r2, [r7, #4]
 800111c:	603b      	str	r3, [r7, #0]
	// r - to jest wielkosc zaokraglonego naro�nika
	GFX_DrowFastHLine(x+r	,y		,w-2*r	,color );
 800111e:	7e3a      	ldrb	r2, [r7, #24]
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	18d0      	adds	r0, r2, r3
 8001124:	7e3b      	ldrb	r3, [r7, #24]
 8001126:	005b      	lsls	r3, r3, #1
 8001128:	687a      	ldr	r2, [r7, #4]
 800112a:	1ad2      	subs	r2, r2, r3
 800112c:	7f3b      	ldrb	r3, [r7, #28]
 800112e:	68b9      	ldr	r1, [r7, #8]
 8001130:	f7ff ff7f 	bl	8001032 <GFX_DrowFastHLine>
	GFX_DrowFastHLine(x+r	,y+h-1	,w-2*r	,color );
 8001134:	7e3a      	ldrb	r2, [r7, #24]
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	18d0      	adds	r0, r2, r3
 800113a:	68ba      	ldr	r2, [r7, #8]
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	4413      	add	r3, r2
 8001140:	1e59      	subs	r1, r3, #1
 8001142:	7e3b      	ldrb	r3, [r7, #24]
 8001144:	005b      	lsls	r3, r3, #1
 8001146:	687a      	ldr	r2, [r7, #4]
 8001148:	1ad2      	subs	r2, r2, r3
 800114a:	7f3b      	ldrb	r3, [r7, #28]
 800114c:	f7ff ff71 	bl	8001032 <GFX_DrowFastHLine>
	GFX_DrowFastVLine(x		,y+r	,h-2*r	,color );
 8001150:	7e3a      	ldrb	r2, [r7, #24]
 8001152:	68bb      	ldr	r3, [r7, #8]
 8001154:	18d1      	adds	r1, r2, r3
 8001156:	7e3b      	ldrb	r3, [r7, #24]
 8001158:	005b      	lsls	r3, r3, #1
 800115a:	683a      	ldr	r2, [r7, #0]
 800115c:	1ad2      	subs	r2, r2, r3
 800115e:	7f3b      	ldrb	r3, [r7, #28]
 8001160:	68f8      	ldr	r0, [r7, #12]
 8001162:	f7ff ff4f 	bl	8001004 <GFX_DrowFastVLine>
	GFX_DrowFastVLine(x+w-1	,y+r	,h-2*r	,color );
 8001166:	68fa      	ldr	r2, [r7, #12]
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	4413      	add	r3, r2
 800116c:	1e58      	subs	r0, r3, #1
 800116e:	7e3a      	ldrb	r2, [r7, #24]
 8001170:	68bb      	ldr	r3, [r7, #8]
 8001172:	18d1      	adds	r1, r2, r3
 8001174:	7e3b      	ldrb	r3, [r7, #24]
 8001176:	005b      	lsls	r3, r3, #1
 8001178:	683a      	ldr	r2, [r7, #0]
 800117a:	1ad2      	subs	r2, r2, r3
 800117c:	7f3b      	ldrb	r3, [r7, #28]
 800117e:	f7ff ff41 	bl	8001004 <GFX_DrowFastVLine>

	GFX_DrowCircleHelper(x+r	,y+r	,r	,1	,color);
 8001182:	7e3a      	ldrb	r2, [r7, #24]
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	18d0      	adds	r0, r2, r3
 8001188:	7e3a      	ldrb	r2, [r7, #24]
 800118a:	68bb      	ldr	r3, [r7, #8]
 800118c:	18d1      	adds	r1, r2, r3
 800118e:	7e3a      	ldrb	r2, [r7, #24]
 8001190:	7f3b      	ldrb	r3, [r7, #28]
 8001192:	9300      	str	r3, [sp, #0]
 8001194:	2301      	movs	r3, #1
 8001196:	f7ff fd64 	bl	8000c62 <GFX_DrowCircleHelper>
	GFX_DrowCircleHelper(x+w-r-1,y+r	,r	,2	,color);
 800119a:	68fa      	ldr	r2, [r7, #12]
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	441a      	add	r2, r3
 80011a0:	7e3b      	ldrb	r3, [r7, #24]
 80011a2:	1ad3      	subs	r3, r2, r3
 80011a4:	1e58      	subs	r0, r3, #1
 80011a6:	7e3a      	ldrb	r2, [r7, #24]
 80011a8:	68bb      	ldr	r3, [r7, #8]
 80011aa:	18d1      	adds	r1, r2, r3
 80011ac:	7e3a      	ldrb	r2, [r7, #24]
 80011ae:	7f3b      	ldrb	r3, [r7, #28]
 80011b0:	9300      	str	r3, [sp, #0]
 80011b2:	2302      	movs	r3, #2
 80011b4:	f7ff fd55 	bl	8000c62 <GFX_DrowCircleHelper>
	GFX_DrowCircleHelper(x+w-r-1,y+h-r-1,r	,4	,color);
 80011b8:	68fa      	ldr	r2, [r7, #12]
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	441a      	add	r2, r3
 80011be:	7e3b      	ldrb	r3, [r7, #24]
 80011c0:	1ad3      	subs	r3, r2, r3
 80011c2:	1e58      	subs	r0, r3, #1
 80011c4:	68ba      	ldr	r2, [r7, #8]
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	441a      	add	r2, r3
 80011ca:	7e3b      	ldrb	r3, [r7, #24]
 80011cc:	1ad3      	subs	r3, r2, r3
 80011ce:	1e59      	subs	r1, r3, #1
 80011d0:	7e3a      	ldrb	r2, [r7, #24]
 80011d2:	7f3b      	ldrb	r3, [r7, #28]
 80011d4:	9300      	str	r3, [sp, #0]
 80011d6:	2304      	movs	r3, #4
 80011d8:	f7ff fd43 	bl	8000c62 <GFX_DrowCircleHelper>
	GFX_DrowCircleHelper(x+r	,y+h-r-1,r	,8	,color);
 80011dc:	7e3a      	ldrb	r2, [r7, #24]
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	18d0      	adds	r0, r2, r3
 80011e2:	68ba      	ldr	r2, [r7, #8]
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	441a      	add	r2, r3
 80011e8:	7e3b      	ldrb	r3, [r7, #24]
 80011ea:	1ad3      	subs	r3, r2, r3
 80011ec:	1e59      	subs	r1, r3, #1
 80011ee:	7e3a      	ldrb	r2, [r7, #24]
 80011f0:	7f3b      	ldrb	r3, [r7, #28]
 80011f2:	9300      	str	r3, [sp, #0]
 80011f4:	2308      	movs	r3, #8
 80011f6:	f7ff fd34 	bl	8000c62 <GFX_DrowCircleHelper>
}
 80011fa:	bf00      	nop
 80011fc:	3710      	adds	r7, #16
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}

08001202 <GameInit>:
#include <stdlib.h>
#include <math.h>

GameCtx g_singleton;

void GameInit(GameCtx *g) {
 8001202:	b480      	push	{r7}
 8001204:	b085      	sub	sp, #20
 8001206:	af00      	add	r7, sp, #0
 8001208:	6078      	str	r0, [r7, #4]
	 * the player and the first boss. Furthermore, it "resets"
	 * the arrays of shot, opponents and bonuses.
	 */
	uint8_t i;
	//Player initial settings
	g->player.lives = INITIAL_LIVES;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	2203      	movs	r2, #3
 800120e:	611a      	str	r2, [r3, #16]
	g->player.score = INITIAL_SCORE;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2200      	movs	r2, #0
 8001214:	609a      	str	r2, [r3, #8]
	g->player.x = INITIAL_X;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	2202      	movs	r2, #2
 800121a:	601a      	str	r2, [r3, #0]
	g->player.y = INITIAL_Y;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	2240      	movs	r2, #64	@ 0x40
 8001220:	605a      	str	r2, [r3, #4]
	g->player.level = INITIAL_LEVEL;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	2201      	movs	r2, #1
 8001226:	615a      	str	r2, [r3, #20]
	g->player.gameProgres = INITIAL_GAME_PROGRES;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	2200      	movs	r2, #0
 800122c:	619a      	str	r2, [r3, #24]
	g->player.shootType = ST_Normal;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	2200      	movs	r2, #0
 8001232:	771a      	strb	r2, [r3, #28]

	//Deactivation of player shots
	for (i = 0; i < NUMBER_SHOTS; ++i)
 8001234:	2300      	movs	r3, #0
 8001236:	73fb      	strb	r3, [r7, #15]
 8001238:	e00c      	b.n	8001254 <GameInit+0x52>
		g->shots[i].active = false;
 800123a:	7bfa      	ldrb	r2, [r7, #15]
 800123c:	6879      	ldr	r1, [r7, #4]
 800123e:	4613      	mov	r3, r2
 8001240:	009b      	lsls	r3, r3, #2
 8001242:	4413      	add	r3, r2
 8001244:	009b      	lsls	r3, r3, #2
 8001246:	440b      	add	r3, r1
 8001248:	3324      	adds	r3, #36	@ 0x24
 800124a:	2200      	movs	r2, #0
 800124c:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < NUMBER_SHOTS; ++i)
 800124e:	7bfb      	ldrb	r3, [r7, #15]
 8001250:	3301      	adds	r3, #1
 8001252:	73fb      	strb	r3, [r7, #15]
 8001254:	7bfb      	ldrb	r3, [r7, #15]
 8001256:	2b18      	cmp	r3, #24
 8001258:	d9ef      	bls.n	800123a <GameInit+0x38>

	//Deactivation of boss shots
	for (i = 0; i < NUMBER_BOSS_SHOTS; ++i)
 800125a:	2300      	movs	r3, #0
 800125c:	73fb      	strb	r3, [r7, #15]
 800125e:	e00d      	b.n	800127c <GameInit+0x7a>
		g->bossShots[i].active = false;
 8001260:	7bfa      	ldrb	r2, [r7, #15]
 8001262:	6879      	ldr	r1, [r7, #4]
 8001264:	4613      	mov	r3, r2
 8001266:	009b      	lsls	r3, r3, #2
 8001268:	4413      	add	r3, r2
 800126a:	009b      	lsls	r3, r3, #2
 800126c:	440b      	add	r3, r1
 800126e:	f503 7306 	add.w	r3, r3, #536	@ 0x218
 8001272:	2200      	movs	r2, #0
 8001274:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < NUMBER_BOSS_SHOTS; ++i)
 8001276:	7bfb      	ldrb	r3, [r7, #15]
 8001278:	3301      	adds	r3, #1
 800127a:	73fb      	strb	r3, [r7, #15]
 800127c:	7bfb      	ldrb	r3, [r7, #15]
 800127e:	2b04      	cmp	r3, #4
 8001280:	d9ee      	bls.n	8001260 <GameInit+0x5e>

	//Deactivation enemies
	for (i = 0; i < NUMBER_ENEMIES; i++) {
 8001282:	2300      	movs	r3, #0
 8001284:	73fb      	strb	r3, [r7, #15]
 8001286:	e023      	b.n	80012d0 <GameInit+0xce>
		g->enemies[i].active = false;
 8001288:	7bfa      	ldrb	r2, [r7, #15]
 800128a:	6879      	ldr	r1, [r7, #4]
 800128c:	4613      	mov	r3, r2
 800128e:	00db      	lsls	r3, r3, #3
 8001290:	4413      	add	r3, r2
 8001292:	009b      	lsls	r3, r3, #2
 8001294:	440b      	add	r3, r1
 8001296:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 800129a:	2200      	movs	r2, #0
 800129c:	701a      	strb	r2, [r3, #0]
		g->enemies[i].trackNumber = 0;
 800129e:	7bfa      	ldrb	r2, [r7, #15]
 80012a0:	6879      	ldr	r1, [r7, #4]
 80012a2:	4613      	mov	r3, r2
 80012a4:	00db      	lsls	r3, r3, #3
 80012a6:	4413      	add	r3, r2
 80012a8:	009b      	lsls	r3, r3, #2
 80012aa:	440b      	add	r3, r1
 80012ac:	f503 7327 	add.w	r3, r3, #668	@ 0x29c
 80012b0:	2200      	movs	r2, #0
 80012b2:	601a      	str	r2, [r3, #0]
		g->enemies[i].trackedByMissile = false;
 80012b4:	7bfa      	ldrb	r2, [r7, #15]
 80012b6:	6879      	ldr	r1, [r7, #4]
 80012b8:	4613      	mov	r3, r2
 80012ba:	00db      	lsls	r3, r3, #3
 80012bc:	4413      	add	r3, r2
 80012be:	009b      	lsls	r3, r3, #2
 80012c0:	440b      	add	r3, r1
 80012c2:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 80012c6:	2200      	movs	r2, #0
 80012c8:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < NUMBER_ENEMIES; i++) {
 80012ca:	7bfb      	ldrb	r3, [r7, #15]
 80012cc:	3301      	adds	r3, #1
 80012ce:	73fb      	strb	r3, [r7, #15]
 80012d0:	7bfb      	ldrb	r3, [r7, #15]
 80012d2:	2b09      	cmp	r3, #9
 80012d4:	d9d8      	bls.n	8001288 <GameInit+0x86>
	}

	//Deactivation bonuses
	for (i = 0; i < NUMBER_BONUS; i++)
 80012d6:	2300      	movs	r3, #0
 80012d8:	73fb      	strb	r3, [r7, #15]
 80012da:	e00d      	b.n	80012f8 <GameInit+0xf6>
		g->bonuses[i].active = false;
 80012dc:	7bfa      	ldrb	r2, [r7, #15]
 80012de:	6879      	ldr	r1, [r7, #4]
 80012e0:	4613      	mov	r3, r2
 80012e2:	00db      	lsls	r3, r3, #3
 80012e4:	1a9b      	subs	r3, r3, r2
 80012e6:	009b      	lsls	r3, r3, #2
 80012e8:	440b      	add	r3, r1
 80012ea:	f503 6324 	add.w	r3, r3, #2624	@ 0xa40
 80012ee:	2200      	movs	r2, #0
 80012f0:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < NUMBER_BONUS; i++)
 80012f2:	7bfb      	ldrb	r3, [r7, #15]
 80012f4:	3301      	adds	r3, #1
 80012f6:	73fb      	strb	r3, [r7, #15]
 80012f8:	7bfb      	ldrb	r3, [r7, #15]
 80012fa:	2b02      	cmp	r3, #2
 80012fc:	d9ee      	bls.n	80012dc <GameInit+0xda>

	//Deactivation boss
	g->boss.active = false;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	2200      	movs	r2, #0
 8001302:	f883 2a24 	strb.w	r2, [r3, #2596]	@ 0xa24
	g->boss.x = INITIAL_BOSS_X;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	228c      	movs	r2, #140	@ 0x8c
 800130a:	f8c3 2a28 	str.w	r2, [r3, #2600]	@ 0xa28
	g->boss.y = INITIAL_BOSS_Y;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	2240      	movs	r2, #64	@ 0x40
 8001312:	f8c3 2a2c 	str.w	r2, [r3, #2604]	@ 0xa2c
	g->boss.updateDelay = INITIAL_BOSS_UPDATE_DELAY;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	2203      	movs	r2, #3
 800131a:	f8c3 2a34 	str.w	r2, [r3, #2612]	@ 0xa34
}
 800131e:	bf00      	nop
 8001320:	3714      	adds	r7, #20
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
	...

0800132c <GameTick>:

void GameTick(GameCtx *g, InputSnapshot* in) {
 800132c:	b5b0      	push	{r4, r5, r7, lr}
 800132e:	b088      	sub	sp, #32
 8001330:	af02      	add	r7, sp, #8
 8001332:	6078      	str	r0, [r7, #4]
 8001334:	6039      	str	r1, [r7, #0]
	 */
	uint8_t i, j;

	static uint8_t y = 0, dy = 1;
	// Read analog stick
	int stick = in->joystickYValue;
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	60bb      	str	r3, [r7, #8]

	if (stick < 1000)
 800133c:	68bb      	ldr	r3, [r7, #8]
 800133e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001342:	da05      	bge.n	8001350 <GameTick+0x24>
		g->player.y -= 1;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	1e5a      	subs	r2, r3, #1
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	605a      	str	r2, [r3, #4]
 800134e:	e009      	b.n	8001364 <GameTick+0x38>
	else if (stick > 3500)
 8001350:	68bb      	ldr	r3, [r7, #8]
 8001352:	f640 52ac 	movw	r2, #3500	@ 0xdac
 8001356:	4293      	cmp	r3, r2
 8001358:	dd04      	ble.n	8001364 <GameTick+0x38>
		g->player.y += 1;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	1c5a      	adds	r2, r3, #1
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	605a      	str	r2, [r3, #4]

	// Keeping the player within the screen
	if (g->player.y < 10)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	2b09      	cmp	r3, #9
 800136a:	dc02      	bgt.n	8001372 <GameTick+0x46>
		g->player.y = 10;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	220a      	movs	r2, #10
 8001370:	605a      	str	r2, [r3, #4]
	if (g->player.y > (SCREEN_HEIGHT - 14))
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	2b72      	cmp	r3, #114	@ 0x72
 8001378:	dd02      	ble.n	8001380 <GameTick+0x54>
		g->player.y = (SCREEN_HEIGHT - 14);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2272      	movs	r2, #114	@ 0x72
 800137e:	605a      	str	r2, [r3, #4]

	// Shifting shots forward
	bool shoot_updated = false;
 8001380:	2300      	movs	r3, #0
 8001382:	757b      	strb	r3, [r7, #21]

	for (i = 0; i < NUMBER_SHOTS; ++i) {
 8001384:	2300      	movs	r3, #0
 8001386:	75fb      	strb	r3, [r7, #23]
 8001388:	e151      	b.n	800162e <GameTick+0x302>
		switch (g->shots[i].type) {
 800138a:	7dfa      	ldrb	r2, [r7, #23]
 800138c:	6879      	ldr	r1, [r7, #4]
 800138e:	4613      	mov	r3, r2
 8001390:	009b      	lsls	r3, r3, #2
 8001392:	4413      	add	r3, r2
 8001394:	009b      	lsls	r3, r3, #2
 8001396:	440b      	add	r3, r1
 8001398:	3330      	adds	r3, #48	@ 0x30
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d002      	beq.n	80013a6 <GameTick+0x7a>
 80013a0:	2b01      	cmp	r3, #1
 80013a2:	d034      	beq.n	800140e <GameTick+0xe2>
 80013a4:	e140      	b.n	8001628 <GameTick+0x2fc>
		case ST_Normal:
			if (g->shots[i].active)
 80013a6:	7dfa      	ldrb	r2, [r7, #23]
 80013a8:	6879      	ldr	r1, [r7, #4]
 80013aa:	4613      	mov	r3, r2
 80013ac:	009b      	lsls	r3, r3, #2
 80013ae:	4413      	add	r3, r2
 80013b0:	009b      	lsls	r3, r3, #2
 80013b2:	440b      	add	r3, r1
 80013b4:	3324      	adds	r3, #36	@ 0x24
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d011      	beq.n	80013e0 <GameTick+0xb4>
				g->shots[i].x++;
 80013bc:	7dfa      	ldrb	r2, [r7, #23]
 80013be:	6879      	ldr	r1, [r7, #4]
 80013c0:	4613      	mov	r3, r2
 80013c2:	009b      	lsls	r3, r3, #2
 80013c4:	4413      	add	r3, r2
 80013c6:	009b      	lsls	r3, r3, #2
 80013c8:	440b      	add	r3, r1
 80013ca:	3328      	adds	r3, #40	@ 0x28
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	1c59      	adds	r1, r3, #1
 80013d0:	6878      	ldr	r0, [r7, #4]
 80013d2:	4613      	mov	r3, r2
 80013d4:	009b      	lsls	r3, r3, #2
 80013d6:	4413      	add	r3, r2
 80013d8:	009b      	lsls	r3, r3, #2
 80013da:	4403      	add	r3, r0
 80013dc:	3328      	adds	r3, #40	@ 0x28
 80013de:	6019      	str	r1, [r3, #0]
			if (g->shots[i].x > SCREEN_WIDTH)
 80013e0:	7dfa      	ldrb	r2, [r7, #23]
 80013e2:	6879      	ldr	r1, [r7, #4]
 80013e4:	4613      	mov	r3, r2
 80013e6:	009b      	lsls	r3, r3, #2
 80013e8:	4413      	add	r3, r2
 80013ea:	009b      	lsls	r3, r3, #2
 80013ec:	440b      	add	r3, r1
 80013ee:	3328      	adds	r3, #40	@ 0x28
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	2b80      	cmp	r3, #128	@ 0x80
 80013f4:	f340 8115 	ble.w	8001622 <GameTick+0x2f6>
				g->shots[i].active = false;
 80013f8:	7dfa      	ldrb	r2, [r7, #23]
 80013fa:	6879      	ldr	r1, [r7, #4]
 80013fc:	4613      	mov	r3, r2
 80013fe:	009b      	lsls	r3, r3, #2
 8001400:	4413      	add	r3, r2
 8001402:	009b      	lsls	r3, r3, #2
 8001404:	440b      	add	r3, r1
 8001406:	3324      	adds	r3, #36	@ 0x24
 8001408:	2200      	movs	r2, #0
 800140a:	701a      	strb	r2, [r3, #0]
			break;
 800140c:	e109      	b.n	8001622 <GameTick+0x2f6>
		case ST_Tracker:

			for (int j = 0; j < NUMBER_ENEMIES; j++) {
 800140e:	2300      	movs	r3, #0
 8001410:	613b      	str	r3, [r7, #16]
 8001412:	e0bb      	b.n	800158c <GameTick+0x260>
				if (g->shots[i].trackNumber == g->enemies[j].trackNumber) {
 8001414:	7dfa      	ldrb	r2, [r7, #23]
 8001416:	6879      	ldr	r1, [r7, #4]
 8001418:	4613      	mov	r3, r2
 800141a:	009b      	lsls	r3, r3, #2
 800141c:	4413      	add	r3, r2
 800141e:	009b      	lsls	r3, r3, #2
 8001420:	440b      	add	r3, r1
 8001422:	3334      	adds	r3, #52	@ 0x34
 8001424:	6819      	ldr	r1, [r3, #0]
 8001426:	6878      	ldr	r0, [r7, #4]
 8001428:	693a      	ldr	r2, [r7, #16]
 800142a:	4613      	mov	r3, r2
 800142c:	00db      	lsls	r3, r3, #3
 800142e:	4413      	add	r3, r2
 8001430:	009b      	lsls	r3, r3, #2
 8001432:	4403      	add	r3, r0
 8001434:	f503 7327 	add.w	r3, r3, #668	@ 0x29c
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4299      	cmp	r1, r3
 800143c:	f040 80a3 	bne.w	8001586 <GameTick+0x25a>
					if (g->shots[i].x > g->enemies[j].x)
 8001440:	7dfa      	ldrb	r2, [r7, #23]
 8001442:	6879      	ldr	r1, [r7, #4]
 8001444:	4613      	mov	r3, r2
 8001446:	009b      	lsls	r3, r3, #2
 8001448:	4413      	add	r3, r2
 800144a:	009b      	lsls	r3, r3, #2
 800144c:	440b      	add	r3, r1
 800144e:	3328      	adds	r3, #40	@ 0x28
 8001450:	6819      	ldr	r1, [r3, #0]
 8001452:	6878      	ldr	r0, [r7, #4]
 8001454:	693a      	ldr	r2, [r7, #16]
 8001456:	4613      	mov	r3, r2
 8001458:	00db      	lsls	r3, r3, #3
 800145a:	4413      	add	r3, r2
 800145c:	009b      	lsls	r3, r3, #2
 800145e:	4403      	add	r3, r0
 8001460:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4299      	cmp	r1, r3
 8001468:	dd12      	ble.n	8001490 <GameTick+0x164>
						g->shots[i].x -= 2;
 800146a:	7dfa      	ldrb	r2, [r7, #23]
 800146c:	6879      	ldr	r1, [r7, #4]
 800146e:	4613      	mov	r3, r2
 8001470:	009b      	lsls	r3, r3, #2
 8001472:	4413      	add	r3, r2
 8001474:	009b      	lsls	r3, r3, #2
 8001476:	440b      	add	r3, r1
 8001478:	3328      	adds	r3, #40	@ 0x28
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	7dfa      	ldrb	r2, [r7, #23]
 800147e:	1e99      	subs	r1, r3, #2
 8001480:	6878      	ldr	r0, [r7, #4]
 8001482:	4613      	mov	r3, r2
 8001484:	009b      	lsls	r3, r3, #2
 8001486:	4413      	add	r3, r2
 8001488:	009b      	lsls	r3, r3, #2
 800148a:	4403      	add	r3, r0
 800148c:	3328      	adds	r3, #40	@ 0x28
 800148e:	6019      	str	r1, [r3, #0]
					if (g->shots[i].x < g->enemies[j].x)
 8001490:	7dfa      	ldrb	r2, [r7, #23]
 8001492:	6879      	ldr	r1, [r7, #4]
 8001494:	4613      	mov	r3, r2
 8001496:	009b      	lsls	r3, r3, #2
 8001498:	4413      	add	r3, r2
 800149a:	009b      	lsls	r3, r3, #2
 800149c:	440b      	add	r3, r1
 800149e:	3328      	adds	r3, #40	@ 0x28
 80014a0:	6819      	ldr	r1, [r3, #0]
 80014a2:	6878      	ldr	r0, [r7, #4]
 80014a4:	693a      	ldr	r2, [r7, #16]
 80014a6:	4613      	mov	r3, r2
 80014a8:	00db      	lsls	r3, r3, #3
 80014aa:	4413      	add	r3, r2
 80014ac:	009b      	lsls	r3, r3, #2
 80014ae:	4403      	add	r3, r0
 80014b0:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4299      	cmp	r1, r3
 80014b8:	da12      	bge.n	80014e0 <GameTick+0x1b4>
						g->shots[i].x += 2;
 80014ba:	7dfa      	ldrb	r2, [r7, #23]
 80014bc:	6879      	ldr	r1, [r7, #4]
 80014be:	4613      	mov	r3, r2
 80014c0:	009b      	lsls	r3, r3, #2
 80014c2:	4413      	add	r3, r2
 80014c4:	009b      	lsls	r3, r3, #2
 80014c6:	440b      	add	r3, r1
 80014c8:	3328      	adds	r3, #40	@ 0x28
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	7dfa      	ldrb	r2, [r7, #23]
 80014ce:	1c99      	adds	r1, r3, #2
 80014d0:	6878      	ldr	r0, [r7, #4]
 80014d2:	4613      	mov	r3, r2
 80014d4:	009b      	lsls	r3, r3, #2
 80014d6:	4413      	add	r3, r2
 80014d8:	009b      	lsls	r3, r3, #2
 80014da:	4403      	add	r3, r0
 80014dc:	3328      	adds	r3, #40	@ 0x28
 80014de:	6019      	str	r1, [r3, #0]
					if (g->shots[i].y > g->enemies[j].y)
 80014e0:	7dfa      	ldrb	r2, [r7, #23]
 80014e2:	6879      	ldr	r1, [r7, #4]
 80014e4:	4613      	mov	r3, r2
 80014e6:	009b      	lsls	r3, r3, #2
 80014e8:	4413      	add	r3, r2
 80014ea:	009b      	lsls	r3, r3, #2
 80014ec:	440b      	add	r3, r1
 80014ee:	332c      	adds	r3, #44	@ 0x2c
 80014f0:	6819      	ldr	r1, [r3, #0]
 80014f2:	6878      	ldr	r0, [r7, #4]
 80014f4:	693a      	ldr	r2, [r7, #16]
 80014f6:	4613      	mov	r3, r2
 80014f8:	00db      	lsls	r3, r3, #3
 80014fa:	4413      	add	r3, r2
 80014fc:	009b      	lsls	r3, r3, #2
 80014fe:	4403      	add	r3, r0
 8001500:	f503 7321 	add.w	r3, r3, #644	@ 0x284
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4299      	cmp	r1, r3
 8001508:	dd12      	ble.n	8001530 <GameTick+0x204>
						g->shots[i].y -= 2;
 800150a:	7dfa      	ldrb	r2, [r7, #23]
 800150c:	6879      	ldr	r1, [r7, #4]
 800150e:	4613      	mov	r3, r2
 8001510:	009b      	lsls	r3, r3, #2
 8001512:	4413      	add	r3, r2
 8001514:	009b      	lsls	r3, r3, #2
 8001516:	440b      	add	r3, r1
 8001518:	332c      	adds	r3, #44	@ 0x2c
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	7dfa      	ldrb	r2, [r7, #23]
 800151e:	1e99      	subs	r1, r3, #2
 8001520:	6878      	ldr	r0, [r7, #4]
 8001522:	4613      	mov	r3, r2
 8001524:	009b      	lsls	r3, r3, #2
 8001526:	4413      	add	r3, r2
 8001528:	009b      	lsls	r3, r3, #2
 800152a:	4403      	add	r3, r0
 800152c:	332c      	adds	r3, #44	@ 0x2c
 800152e:	6019      	str	r1, [r3, #0]
					if (g->shots[i].y < g->enemies[j].y)
 8001530:	7dfa      	ldrb	r2, [r7, #23]
 8001532:	6879      	ldr	r1, [r7, #4]
 8001534:	4613      	mov	r3, r2
 8001536:	009b      	lsls	r3, r3, #2
 8001538:	4413      	add	r3, r2
 800153a:	009b      	lsls	r3, r3, #2
 800153c:	440b      	add	r3, r1
 800153e:	332c      	adds	r3, #44	@ 0x2c
 8001540:	6819      	ldr	r1, [r3, #0]
 8001542:	6878      	ldr	r0, [r7, #4]
 8001544:	693a      	ldr	r2, [r7, #16]
 8001546:	4613      	mov	r3, r2
 8001548:	00db      	lsls	r3, r3, #3
 800154a:	4413      	add	r3, r2
 800154c:	009b      	lsls	r3, r3, #2
 800154e:	4403      	add	r3, r0
 8001550:	f503 7321 	add.w	r3, r3, #644	@ 0x284
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4299      	cmp	r1, r3
 8001558:	da12      	bge.n	8001580 <GameTick+0x254>
						g->shots[i].y += 2;
 800155a:	7dfa      	ldrb	r2, [r7, #23]
 800155c:	6879      	ldr	r1, [r7, #4]
 800155e:	4613      	mov	r3, r2
 8001560:	009b      	lsls	r3, r3, #2
 8001562:	4413      	add	r3, r2
 8001564:	009b      	lsls	r3, r3, #2
 8001566:	440b      	add	r3, r1
 8001568:	332c      	adds	r3, #44	@ 0x2c
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	7dfa      	ldrb	r2, [r7, #23]
 800156e:	1c99      	adds	r1, r3, #2
 8001570:	6878      	ldr	r0, [r7, #4]
 8001572:	4613      	mov	r3, r2
 8001574:	009b      	lsls	r3, r3, #2
 8001576:	4413      	add	r3, r2
 8001578:	009b      	lsls	r3, r3, #2
 800157a:	4403      	add	r3, r0
 800157c:	332c      	adds	r3, #44	@ 0x2c
 800157e:	6019      	str	r1, [r3, #0]
					shoot_updated = true;
 8001580:	2301      	movs	r3, #1
 8001582:	757b      	strb	r3, [r7, #21]
					break;
 8001584:	e006      	b.n	8001594 <GameTick+0x268>
			for (int j = 0; j < NUMBER_ENEMIES; j++) {
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	3301      	adds	r3, #1
 800158a:	613b      	str	r3, [r7, #16]
 800158c:	693b      	ldr	r3, [r7, #16]
 800158e:	2b09      	cmp	r3, #9
 8001590:	f77f af40 	ble.w	8001414 <GameTick+0xe8>
				}
			}
			//Remove tracking missiles that have no target
			if (!shoot_updated && g->shots[i].type == ST_Tracker) {
 8001594:	7d7b      	ldrb	r3, [r7, #21]
 8001596:	f083 0301 	eor.w	r3, r3, #1
 800159a:	b2db      	uxtb	r3, r3
 800159c:	2b00      	cmp	r3, #0
 800159e:	d020      	beq.n	80015e2 <GameTick+0x2b6>
 80015a0:	7dfa      	ldrb	r2, [r7, #23]
 80015a2:	6879      	ldr	r1, [r7, #4]
 80015a4:	4613      	mov	r3, r2
 80015a6:	009b      	lsls	r3, r3, #2
 80015a8:	4413      	add	r3, r2
 80015aa:	009b      	lsls	r3, r3, #2
 80015ac:	440b      	add	r3, r1
 80015ae:	3330      	adds	r3, #48	@ 0x30
 80015b0:	781b      	ldrb	r3, [r3, #0]
 80015b2:	2b01      	cmp	r3, #1
 80015b4:	d115      	bne.n	80015e2 <GameTick+0x2b6>
				g->shots[i].active = false;
 80015b6:	7dfa      	ldrb	r2, [r7, #23]
 80015b8:	6879      	ldr	r1, [r7, #4]
 80015ba:	4613      	mov	r3, r2
 80015bc:	009b      	lsls	r3, r3, #2
 80015be:	4413      	add	r3, r2
 80015c0:	009b      	lsls	r3, r3, #2
 80015c2:	440b      	add	r3, r1
 80015c4:	3324      	adds	r3, #36	@ 0x24
 80015c6:	2200      	movs	r2, #0
 80015c8:	701a      	strb	r2, [r3, #0]
				g->shots[i].trackNumber = 0;
 80015ca:	7dfa      	ldrb	r2, [r7, #23]
 80015cc:	6879      	ldr	r1, [r7, #4]
 80015ce:	4613      	mov	r3, r2
 80015d0:	009b      	lsls	r3, r3, #2
 80015d2:	4413      	add	r3, r2
 80015d4:	009b      	lsls	r3, r3, #2
 80015d6:	440b      	add	r3, r1
 80015d8:	3334      	adds	r3, #52	@ 0x34
 80015da:	2200      	movs	r2, #0
 80015dc:	601a      	str	r2, [r3, #0]
				shoot_updated = false;
 80015de:	2300      	movs	r3, #0
 80015e0:	757b      	strb	r3, [r7, #21]
			}

			//Remove off-map shots
			if (g->shots[i].x > SCREEN_WIDTH) {
 80015e2:	7dfa      	ldrb	r2, [r7, #23]
 80015e4:	6879      	ldr	r1, [r7, #4]
 80015e6:	4613      	mov	r3, r2
 80015e8:	009b      	lsls	r3, r3, #2
 80015ea:	4413      	add	r3, r2
 80015ec:	009b      	lsls	r3, r3, #2
 80015ee:	440b      	add	r3, r1
 80015f0:	3328      	adds	r3, #40	@ 0x28
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	2b80      	cmp	r3, #128	@ 0x80
 80015f6:	dd16      	ble.n	8001626 <GameTick+0x2fa>
				g->shots[i].active = false;
 80015f8:	7dfa      	ldrb	r2, [r7, #23]
 80015fa:	6879      	ldr	r1, [r7, #4]
 80015fc:	4613      	mov	r3, r2
 80015fe:	009b      	lsls	r3, r3, #2
 8001600:	4413      	add	r3, r2
 8001602:	009b      	lsls	r3, r3, #2
 8001604:	440b      	add	r3, r1
 8001606:	3324      	adds	r3, #36	@ 0x24
 8001608:	2200      	movs	r2, #0
 800160a:	701a      	strb	r2, [r3, #0]
				g->shots[i].trackNumber = 0;
 800160c:	7dfa      	ldrb	r2, [r7, #23]
 800160e:	6879      	ldr	r1, [r7, #4]
 8001610:	4613      	mov	r3, r2
 8001612:	009b      	lsls	r3, r3, #2
 8001614:	4413      	add	r3, r2
 8001616:	009b      	lsls	r3, r3, #2
 8001618:	440b      	add	r3, r1
 800161a:	3334      	adds	r3, #52	@ 0x34
 800161c:	2200      	movs	r2, #0
 800161e:	601a      	str	r2, [r3, #0]
			}
			break;
 8001620:	e001      	b.n	8001626 <GameTick+0x2fa>
			break;
 8001622:	bf00      	nop
 8001624:	e000      	b.n	8001628 <GameTick+0x2fc>
			break;
 8001626:	bf00      	nop
	for (i = 0; i < NUMBER_SHOTS; ++i) {
 8001628:	7dfb      	ldrb	r3, [r7, #23]
 800162a:	3301      	adds	r3, #1
 800162c:	75fb      	strb	r3, [r7, #23]
 800162e:	7dfb      	ldrb	r3, [r7, #23]
 8001630:	2b18      	cmp	r3, #24
 8001632:	f67f aeaa 	bls.w	800138a <GameTick+0x5e>

	}

	//Remove the markers on enemies whose shots have been used on others
	bool is_there_a_missile;
	for (i = 0; i < NUMBER_ENEMIES; i++) {
 8001636:	2300      	movs	r3, #0
 8001638:	75fb      	strb	r3, [r7, #23]
 800163a:	e035      	b.n	80016a8 <GameTick+0x37c>
		is_there_a_missile = false;
 800163c:	2300      	movs	r3, #0
 800163e:	73fb      	strb	r3, [r7, #15]

		for (j = 0; j < NUMBER_SHOTS; j++) {
 8001640:	2300      	movs	r3, #0
 8001642:	75bb      	strb	r3, [r7, #22]
 8001644:	e019      	b.n	800167a <GameTick+0x34e>
			if (g->enemies[i].trackNumber == g->shots[j].trackNumber)
 8001646:	7dfa      	ldrb	r2, [r7, #23]
 8001648:	6879      	ldr	r1, [r7, #4]
 800164a:	4613      	mov	r3, r2
 800164c:	00db      	lsls	r3, r3, #3
 800164e:	4413      	add	r3, r2
 8001650:	009b      	lsls	r3, r3, #2
 8001652:	440b      	add	r3, r1
 8001654:	f503 7327 	add.w	r3, r3, #668	@ 0x29c
 8001658:	6819      	ldr	r1, [r3, #0]
 800165a:	7dba      	ldrb	r2, [r7, #22]
 800165c:	6878      	ldr	r0, [r7, #4]
 800165e:	4613      	mov	r3, r2
 8001660:	009b      	lsls	r3, r3, #2
 8001662:	4413      	add	r3, r2
 8001664:	009b      	lsls	r3, r3, #2
 8001666:	4403      	add	r3, r0
 8001668:	3334      	adds	r3, #52	@ 0x34
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4299      	cmp	r1, r3
 800166e:	d101      	bne.n	8001674 <GameTick+0x348>
				is_there_a_missile = true;
 8001670:	2301      	movs	r3, #1
 8001672:	73fb      	strb	r3, [r7, #15]
		for (j = 0; j < NUMBER_SHOTS; j++) {
 8001674:	7dbb      	ldrb	r3, [r7, #22]
 8001676:	3301      	adds	r3, #1
 8001678:	75bb      	strb	r3, [r7, #22]
 800167a:	7dbb      	ldrb	r3, [r7, #22]
 800167c:	2b18      	cmp	r3, #24
 800167e:	d9e2      	bls.n	8001646 <GameTick+0x31a>
		}

		if (!is_there_a_missile)
 8001680:	7bfb      	ldrb	r3, [r7, #15]
 8001682:	f083 0301 	eor.w	r3, r3, #1
 8001686:	b2db      	uxtb	r3, r3
 8001688:	2b00      	cmp	r3, #0
 800168a:	d00a      	beq.n	80016a2 <GameTick+0x376>
			g->enemies[i].trackNumber = 0;
 800168c:	7dfa      	ldrb	r2, [r7, #23]
 800168e:	6879      	ldr	r1, [r7, #4]
 8001690:	4613      	mov	r3, r2
 8001692:	00db      	lsls	r3, r3, #3
 8001694:	4413      	add	r3, r2
 8001696:	009b      	lsls	r3, r3, #2
 8001698:	440b      	add	r3, r1
 800169a:	f503 7327 	add.w	r3, r3, #668	@ 0x29c
 800169e:	2200      	movs	r2, #0
 80016a0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < NUMBER_ENEMIES; i++) {
 80016a2:	7dfb      	ldrb	r3, [r7, #23]
 80016a4:	3301      	adds	r3, #1
 80016a6:	75fb      	strb	r3, [r7, #23]
 80016a8:	7dfb      	ldrb	r3, [r7, #23]
 80016aa:	2b09      	cmp	r3, #9
 80016ac:	d9c6      	bls.n	800163c <GameTick+0x310>
	}

	// Updated enemies
	for (i = 0; i < NUMBER_ENEMIES; ++i) {
 80016ae:	2300      	movs	r3, #0
 80016b0:	75fb      	strb	r3, [r7, #23]
 80016b2:	e29f      	b.n	8001bf4 <GameTick+0x8c8>

		if (g->enemies[i].active) {
 80016b4:	7dfa      	ldrb	r2, [r7, #23]
 80016b6:	6879      	ldr	r1, [r7, #4]
 80016b8:	4613      	mov	r3, r2
 80016ba:	00db      	lsls	r3, r3, #3
 80016bc:	4413      	add	r3, r2
 80016be:	009b      	lsls	r3, r3, #2
 80016c0:	440b      	add	r3, r1
 80016c2:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	f000 8290 	beq.w	8001bee <GameTick+0x8c2>
			g->enemies[i].nextUpdate -= 1;
 80016ce:	7dfa      	ldrb	r2, [r7, #23]
 80016d0:	6879      	ldr	r1, [r7, #4]
 80016d2:	4613      	mov	r3, r2
 80016d4:	00db      	lsls	r3, r3, #3
 80016d6:	4413      	add	r3, r2
 80016d8:	009b      	lsls	r3, r3, #2
 80016da:	440b      	add	r3, r1
 80016dc:	f503 7324 	add.w	r3, r3, #656	@ 0x290
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	7dfa      	ldrb	r2, [r7, #23]
 80016e4:	1e59      	subs	r1, r3, #1
 80016e6:	6878      	ldr	r0, [r7, #4]
 80016e8:	4613      	mov	r3, r2
 80016ea:	00db      	lsls	r3, r3, #3
 80016ec:	4413      	add	r3, r2
 80016ee:	009b      	lsls	r3, r3, #2
 80016f0:	4403      	add	r3, r0
 80016f2:	f503 7324 	add.w	r3, r3, #656	@ 0x290
 80016f6:	6019      	str	r1, [r3, #0]
			if (g->enemies[i].nextUpdate <= 0) {
 80016f8:	7dfa      	ldrb	r2, [r7, #23]
 80016fa:	6879      	ldr	r1, [r7, #4]
 80016fc:	4613      	mov	r3, r2
 80016fe:	00db      	lsls	r3, r3, #3
 8001700:	4413      	add	r3, r2
 8001702:	009b      	lsls	r3, r3, #2
 8001704:	440b      	add	r3, r1
 8001706:	f503 7324 	add.w	r3, r3, #656	@ 0x290
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	2b00      	cmp	r3, #0
 800170e:	f300 826e 	bgt.w	8001bee <GameTick+0x8c2>
				if (g->enemies[i].active) {
 8001712:	7dfa      	ldrb	r2, [r7, #23]
 8001714:	6879      	ldr	r1, [r7, #4]
 8001716:	4613      	mov	r3, r2
 8001718:	00db      	lsls	r3, r3, #3
 800171a:	4413      	add	r3, r2
 800171c:	009b      	lsls	r3, r3, #2
 800171e:	440b      	add	r3, r1
 8001720:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	2b00      	cmp	r3, #0
 8001728:	f000 8261 	beq.w	8001bee <GameTick+0x8c2>

					g->enemies[i].nextUpdate = g->enemies[i].updateDelay;
 800172c:	7df9      	ldrb	r1, [r7, #23]
 800172e:	7dfa      	ldrb	r2, [r7, #23]
 8001730:	6878      	ldr	r0, [r7, #4]
 8001732:	460b      	mov	r3, r1
 8001734:	00db      	lsls	r3, r3, #3
 8001736:	440b      	add	r3, r1
 8001738:	009b      	lsls	r3, r3, #2
 800173a:	4403      	add	r3, r0
 800173c:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 8001740:	6819      	ldr	r1, [r3, #0]
 8001742:	6878      	ldr	r0, [r7, #4]
 8001744:	4613      	mov	r3, r2
 8001746:	00db      	lsls	r3, r3, #3
 8001748:	4413      	add	r3, r2
 800174a:	009b      	lsls	r3, r3, #2
 800174c:	4403      	add	r3, r0
 800174e:	f503 7324 	add.w	r3, r3, #656	@ 0x290
 8001752:	6019      	str	r1, [r3, #0]

					//Checking for collisions between opponents and the player
					if (Colliding(g->enemies[i].x, g->enemies[i].y, g->player.x,
 8001754:	7dfa      	ldrb	r2, [r7, #23]
 8001756:	6879      	ldr	r1, [r7, #4]
 8001758:	4613      	mov	r3, r2
 800175a:	00db      	lsls	r3, r3, #3
 800175c:	4413      	add	r3, r2
 800175e:	009b      	lsls	r3, r3, #2
 8001760:	440b      	add	r3, r1
 8001762:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8001766:	6818      	ldr	r0, [r3, #0]
 8001768:	7dfa      	ldrb	r2, [r7, #23]
 800176a:	6879      	ldr	r1, [r7, #4]
 800176c:	4613      	mov	r3, r2
 800176e:	00db      	lsls	r3, r3, #3
 8001770:	4413      	add	r3, r2
 8001772:	009b      	lsls	r3, r3, #2
 8001774:	440b      	add	r3, r1
 8001776:	f503 7321 	add.w	r3, r3, #644	@ 0x284
 800177a:	6819      	ldr	r1, [r3, #0]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681a      	ldr	r2, [r3, #0]
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	f001 fd36 	bl	80031f4 <Colliding>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d15a      	bne.n	8001844 <GameTick+0x518>
							g->player.y)
							|| Colliding(g->enemies[i].x, g->enemies[i].y,
 800178e:	7dfa      	ldrb	r2, [r7, #23]
 8001790:	6879      	ldr	r1, [r7, #4]
 8001792:	4613      	mov	r3, r2
 8001794:	00db      	lsls	r3, r3, #3
 8001796:	4413      	add	r3, r2
 8001798:	009b      	lsls	r3, r3, #2
 800179a:	440b      	add	r3, r1
 800179c:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 80017a0:	6818      	ldr	r0, [r3, #0]
 80017a2:	7dfa      	ldrb	r2, [r7, #23]
 80017a4:	6879      	ldr	r1, [r7, #4]
 80017a6:	4613      	mov	r3, r2
 80017a8:	00db      	lsls	r3, r3, #3
 80017aa:	4413      	add	r3, r2
 80017ac:	009b      	lsls	r3, r3, #2
 80017ae:	440b      	add	r3, r1
 80017b0:	f503 7321 	add.w	r3, r3, #644	@ 0x284
 80017b4:	6819      	ldr	r1, [r3, #0]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681a      	ldr	r2, [r3, #0]
									g->player.x, g->player.y + 5)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	685b      	ldr	r3, [r3, #4]
							|| Colliding(g->enemies[i].x, g->enemies[i].y,
 80017be:	3305      	adds	r3, #5
 80017c0:	f001 fd18 	bl	80031f4 <Colliding>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d13c      	bne.n	8001844 <GameTick+0x518>
							|| Colliding(g->enemies[i].x, g->enemies[i].y,
 80017ca:	7dfa      	ldrb	r2, [r7, #23]
 80017cc:	6879      	ldr	r1, [r7, #4]
 80017ce:	4613      	mov	r3, r2
 80017d0:	00db      	lsls	r3, r3, #3
 80017d2:	4413      	add	r3, r2
 80017d4:	009b      	lsls	r3, r3, #2
 80017d6:	440b      	add	r3, r1
 80017d8:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 80017dc:	6818      	ldr	r0, [r3, #0]
 80017de:	7dfa      	ldrb	r2, [r7, #23]
 80017e0:	6879      	ldr	r1, [r7, #4]
 80017e2:	4613      	mov	r3, r2
 80017e4:	00db      	lsls	r3, r3, #3
 80017e6:	4413      	add	r3, r2
 80017e8:	009b      	lsls	r3, r3, #2
 80017ea:	440b      	add	r3, r1
 80017ec:	f503 7321 	add.w	r3, r3, #644	@ 0x284
 80017f0:	6819      	ldr	r1, [r3, #0]
									g->player.x + 7, g->player.y)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
							|| Colliding(g->enemies[i].x, g->enemies[i].y,
 80017f6:	1dda      	adds	r2, r3, #7
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	f001 fcfa 	bl	80031f4 <Colliding>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d11e      	bne.n	8001844 <GameTick+0x518>
							|| Colliding(g->enemies[i].x, g->enemies[i].y,
 8001806:	7dfa      	ldrb	r2, [r7, #23]
 8001808:	6879      	ldr	r1, [r7, #4]
 800180a:	4613      	mov	r3, r2
 800180c:	00db      	lsls	r3, r3, #3
 800180e:	4413      	add	r3, r2
 8001810:	009b      	lsls	r3, r3, #2
 8001812:	440b      	add	r3, r1
 8001814:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8001818:	6818      	ldr	r0, [r3, #0]
 800181a:	7dfa      	ldrb	r2, [r7, #23]
 800181c:	6879      	ldr	r1, [r7, #4]
 800181e:	4613      	mov	r3, r2
 8001820:	00db      	lsls	r3, r3, #3
 8001822:	4413      	add	r3, r2
 8001824:	009b      	lsls	r3, r3, #2
 8001826:	440b      	add	r3, r1
 8001828:	f503 7321 	add.w	r3, r3, #644	@ 0x284
 800182c:	6819      	ldr	r1, [r3, #0]
									g->player.x + 7, g->player.y + 5)) {
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
							|| Colliding(g->enemies[i].x, g->enemies[i].y,
 8001832:	1dda      	adds	r2, r3, #7
									g->player.x + 7, g->player.y + 5)) {
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	685b      	ldr	r3, [r3, #4]
							|| Colliding(g->enemies[i].x, g->enemies[i].y,
 8001838:	3305      	adds	r3, #5
 800183a:	f001 fcdb 	bl	80031f4 <Colliding>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d067      	beq.n	8001914 <GameTick+0x5e8>
						g->player.lives -= 1;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	691b      	ldr	r3, [r3, #16]
 8001848:	1e5a      	subs	r2, r3, #1
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	611a      	str	r2, [r3, #16]
						;
						g->enemies[i].active = false;
 800184e:	7dfa      	ldrb	r2, [r7, #23]
 8001850:	6879      	ldr	r1, [r7, #4]
 8001852:	4613      	mov	r3, r2
 8001854:	00db      	lsls	r3, r3, #3
 8001856:	4413      	add	r3, r2
 8001858:	009b      	lsls	r3, r3, #2
 800185a:	440b      	add	r3, r1
 800185c:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 8001860:	2200      	movs	r2, #0
 8001862:	701a      	strb	r2, [r3, #0]
						g->enemies[i].trackedByMissile = false;
 8001864:	7dfa      	ldrb	r2, [r7, #23]
 8001866:	6879      	ldr	r1, [r7, #4]
 8001868:	4613      	mov	r3, r2
 800186a:	00db      	lsls	r3, r3, #3
 800186c:	4413      	add	r3, r2
 800186e:	009b      	lsls	r3, r3, #2
 8001870:	440b      	add	r3, r1
 8001872:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8001876:	2200      	movs	r2, #0
 8001878:	701a      	strb	r2, [r3, #0]
						g->enemies[i].trackNumber = 0;
 800187a:	7dfa      	ldrb	r2, [r7, #23]
 800187c:	6879      	ldr	r1, [r7, #4]
 800187e:	4613      	mov	r3, r2
 8001880:	00db      	lsls	r3, r3, #3
 8001882:	4413      	add	r3, r2
 8001884:	009b      	lsls	r3, r3, #2
 8001886:	440b      	add	r3, r1
 8001888:	f503 7327 	add.w	r3, r3, #668	@ 0x29c
 800188c:	2200      	movs	r2, #0
 800188e:	601a      	str	r2, [r3, #0]
						GFX_DrowBitMap_P(g->enemies[i].x + 2, g->enemies[i].y,
 8001890:	7dfa      	ldrb	r2, [r7, #23]
 8001892:	6879      	ldr	r1, [r7, #4]
 8001894:	4613      	mov	r3, r2
 8001896:	00db      	lsls	r3, r3, #3
 8001898:	4413      	add	r3, r2
 800189a:	009b      	lsls	r3, r3, #2
 800189c:	440b      	add	r3, r1
 800189e:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	1c98      	adds	r0, r3, #2
 80018a6:	7dfa      	ldrb	r2, [r7, #23]
 80018a8:	6879      	ldr	r1, [r7, #4]
 80018aa:	4613      	mov	r3, r2
 80018ac:	00db      	lsls	r3, r3, #3
 80018ae:	4413      	add	r3, r2
 80018b0:	009b      	lsls	r3, r3, #2
 80018b2:	440b      	add	r3, r1
 80018b4:	f503 7321 	add.w	r3, r3, #644	@ 0x284
 80018b8:	6819      	ldr	r1, [r3, #0]
 80018ba:	2301      	movs	r3, #1
 80018bc:	9301      	str	r3, [sp, #4]
 80018be:	230a      	movs	r3, #10
 80018c0:	9300      	str	r3, [sp, #0]
 80018c2:	230a      	movs	r3, #10
 80018c4:	4aaf      	ldr	r2, [pc, #700]	@ (8001b84 <GameTick+0x858>)
 80018c6:	f7ff fa71 	bl	8000dac <GFX_DrowBitMap_P>
								explosion_map, 10, 10, 1);
						GFX_DrowBitMap_P(g->player.x + 8, g->player.y - 2,
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f103 0008 	add.w	r0, r3, #8
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	1e99      	subs	r1, r3, #2
 80018d8:	2301      	movs	r3, #1
 80018da:	9301      	str	r3, [sp, #4]
 80018dc:	2310      	movs	r3, #16
 80018de:	9300      	str	r3, [sp, #0]
 80018e0:	230a      	movs	r3, #10
 80018e2:	4aa9      	ldr	r2, [pc, #676]	@ (8001b88 <GameTick+0x85c>)
 80018e4:	f7ff fa62 	bl	8000dac <GFX_DrowBitMap_P>
								player_shield_map, 10, 16, 1);
						GFX_DrowBitMap_P(g->player.x, g->player.y, player_map,
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6818      	ldr	r0, [r3, #0]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6859      	ldr	r1, [r3, #4]
 80018f0:	2301      	movs	r3, #1
 80018f2:	9301      	str	r3, [sp, #4]
 80018f4:	230b      	movs	r3, #11
 80018f6:	9300      	str	r3, [sp, #0]
 80018f8:	230b      	movs	r3, #11
 80018fa:	4aa4      	ldr	r2, [pc, #656]	@ (8001b8c <GameTick+0x860>)
 80018fc:	f7ff fa56 	bl	8000dac <GFX_DrowBitMap_P>
								11, 11, 1);

						//SSD1327_Display();
						if (g->player.lives <= 0) {
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	691b      	ldr	r3, [r3, #16]
 8001904:	2b00      	cmp	r3, #0
 8001906:	dc05      	bgt.n	8001914 <GameTick+0x5e8>
							PlayDeadAnim();
 8001908:	f002 f9c4 	bl	8003c94 <PlayDeadAnim>
							g->state = GS_Dead;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2202      	movs	r2, #2
 8001910:	f883 2a94 	strb.w	r2, [r3, #2708]	@ 0xa94
						}
					}

					// Moving to the left and making special moves
					g->enemies[i].x -= 1;
 8001914:	7dfa      	ldrb	r2, [r7, #23]
 8001916:	6879      	ldr	r1, [r7, #4]
 8001918:	4613      	mov	r3, r2
 800191a:	00db      	lsls	r3, r3, #3
 800191c:	4413      	add	r3, r2
 800191e:	009b      	lsls	r3, r3, #2
 8001920:	440b      	add	r3, r1
 8001922:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	7dfa      	ldrb	r2, [r7, #23]
 800192a:	1e59      	subs	r1, r3, #1
 800192c:	6878      	ldr	r0, [r7, #4]
 800192e:	4613      	mov	r3, r2
 8001930:	00db      	lsls	r3, r3, #3
 8001932:	4413      	add	r3, r2
 8001934:	009b      	lsls	r3, r3, #2
 8001936:	4403      	add	r3, r0
 8001938:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 800193c:	6019      	str	r1, [r3, #0]

					switch (g->enemies[i].type) {
 800193e:	7dfa      	ldrb	r2, [r7, #23]
 8001940:	6879      	ldr	r1, [r7, #4]
 8001942:	4613      	mov	r3, r2
 8001944:	00db      	lsls	r3, r3, #3
 8001946:	4413      	add	r3, r2
 8001948:	009b      	lsls	r3, r3, #2
 800194a:	440b      	add	r3, r1
 800194c:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 8001950:	781b      	ldrb	r3, [r3, #0]
 8001952:	2b02      	cmp	r3, #2
 8001954:	d05d      	beq.n	8001a12 <GameTick+0x6e6>
 8001956:	2b02      	cmp	r3, #2
 8001958:	f300 811b 	bgt.w	8001b92 <GameTick+0x866>
 800195c:	2b00      	cmp	r3, #0
 800195e:	f000 810d 	beq.w	8001b7c <GameTick+0x850>
 8001962:	2b01      	cmp	r3, #1
 8001964:	f040 8115 	bne.w	8001b92 <GameTick+0x866>
					case ET_Tracker:
						if (g->enemies[i].x < 70) {
 8001968:	7dfa      	ldrb	r2, [r7, #23]
 800196a:	6879      	ldr	r1, [r7, #4]
 800196c:	4613      	mov	r3, r2
 800196e:	00db      	lsls	r3, r3, #3
 8001970:	4413      	add	r3, r2
 8001972:	009b      	lsls	r3, r3, #2
 8001974:	440b      	add	r3, r1
 8001976:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	2b45      	cmp	r3, #69	@ 0x45
 800197e:	f300 80ff 	bgt.w	8001b80 <GameTick+0x854>
							if (g->player.y > g->enemies[i].y)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6859      	ldr	r1, [r3, #4]
 8001986:	7dfa      	ldrb	r2, [r7, #23]
 8001988:	6878      	ldr	r0, [r7, #4]
 800198a:	4613      	mov	r3, r2
 800198c:	00db      	lsls	r3, r3, #3
 800198e:	4413      	add	r3, r2
 8001990:	009b      	lsls	r3, r3, #2
 8001992:	4403      	add	r3, r0
 8001994:	f503 7321 	add.w	r3, r3, #644	@ 0x284
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4299      	cmp	r1, r3
 800199c:	dd14      	ble.n	80019c8 <GameTick+0x69c>
								g->enemies[i].y += 1;
 800199e:	7dfa      	ldrb	r2, [r7, #23]
 80019a0:	6879      	ldr	r1, [r7, #4]
 80019a2:	4613      	mov	r3, r2
 80019a4:	00db      	lsls	r3, r3, #3
 80019a6:	4413      	add	r3, r2
 80019a8:	009b      	lsls	r3, r3, #2
 80019aa:	440b      	add	r3, r1
 80019ac:	f503 7321 	add.w	r3, r3, #644	@ 0x284
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	7dfa      	ldrb	r2, [r7, #23]
 80019b4:	1c59      	adds	r1, r3, #1
 80019b6:	6878      	ldr	r0, [r7, #4]
 80019b8:	4613      	mov	r3, r2
 80019ba:	00db      	lsls	r3, r3, #3
 80019bc:	4413      	add	r3, r2
 80019be:	009b      	lsls	r3, r3, #2
 80019c0:	4403      	add	r3, r0
 80019c2:	f503 7321 	add.w	r3, r3, #644	@ 0x284
 80019c6:	6019      	str	r1, [r3, #0]
							if (g->player.y < g->enemies[i].y)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6859      	ldr	r1, [r3, #4]
 80019cc:	7dfa      	ldrb	r2, [r7, #23]
 80019ce:	6878      	ldr	r0, [r7, #4]
 80019d0:	4613      	mov	r3, r2
 80019d2:	00db      	lsls	r3, r3, #3
 80019d4:	4413      	add	r3, r2
 80019d6:	009b      	lsls	r3, r3, #2
 80019d8:	4403      	add	r3, r0
 80019da:	f503 7321 	add.w	r3, r3, #644	@ 0x284
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4299      	cmp	r1, r3
 80019e2:	f280 80cd 	bge.w	8001b80 <GameTick+0x854>
								g->enemies[i].y -= 1;
 80019e6:	7dfa      	ldrb	r2, [r7, #23]
 80019e8:	6879      	ldr	r1, [r7, #4]
 80019ea:	4613      	mov	r3, r2
 80019ec:	00db      	lsls	r3, r3, #3
 80019ee:	4413      	add	r3, r2
 80019f0:	009b      	lsls	r3, r3, #2
 80019f2:	440b      	add	r3, r1
 80019f4:	f503 7321 	add.w	r3, r3, #644	@ 0x284
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	7dfa      	ldrb	r2, [r7, #23]
 80019fc:	1e59      	subs	r1, r3, #1
 80019fe:	6878      	ldr	r0, [r7, #4]
 8001a00:	4613      	mov	r3, r2
 8001a02:	00db      	lsls	r3, r3, #3
 8001a04:	4413      	add	r3, r2
 8001a06:	009b      	lsls	r3, r3, #2
 8001a08:	4403      	add	r3, r0
 8001a0a:	f503 7321 	add.w	r3, r3, #644	@ 0x284
 8001a0e:	6019      	str	r1, [r3, #0]
						}
						break;
 8001a10:	e0b6      	b.n	8001b80 <GameTick+0x854>
					case ET_Diver:
						break;
					case ET_Bobber:
						if ((g->enemies[i].x % 4 == 0)
 8001a12:	7dfa      	ldrb	r2, [r7, #23]
 8001a14:	6879      	ldr	r1, [r7, #4]
 8001a16:	4613      	mov	r3, r2
 8001a18:	00db      	lsls	r3, r3, #3
 8001a1a:	4413      	add	r3, r2
 8001a1c:	009b      	lsls	r3, r3, #2
 8001a1e:	440b      	add	r3, r1
 8001a20:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f003 0303 	and.w	r3, r3, #3
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d122      	bne.n	8001a74 <GameTick+0x748>
								&& (g->enemies[i].x % 8 == 0))
 8001a2e:	7dfa      	ldrb	r2, [r7, #23]
 8001a30:	6879      	ldr	r1, [r7, #4]
 8001a32:	4613      	mov	r3, r2
 8001a34:	00db      	lsls	r3, r3, #3
 8001a36:	4413      	add	r3, r2
 8001a38:	009b      	lsls	r3, r3, #2
 8001a3a:	440b      	add	r3, r1
 8001a3c:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f003 0307 	and.w	r3, r3, #7
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d114      	bne.n	8001a74 <GameTick+0x748>
							g->enemies[i].y += 4;
 8001a4a:	7dfa      	ldrb	r2, [r7, #23]
 8001a4c:	6879      	ldr	r1, [r7, #4]
 8001a4e:	4613      	mov	r3, r2
 8001a50:	00db      	lsls	r3, r3, #3
 8001a52:	4413      	add	r3, r2
 8001a54:	009b      	lsls	r3, r3, #2
 8001a56:	440b      	add	r3, r1
 8001a58:	f503 7321 	add.w	r3, r3, #644	@ 0x284
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	7dfa      	ldrb	r2, [r7, #23]
 8001a60:	1d19      	adds	r1, r3, #4
 8001a62:	6878      	ldr	r0, [r7, #4]
 8001a64:	4613      	mov	r3, r2
 8001a66:	00db      	lsls	r3, r3, #3
 8001a68:	4413      	add	r3, r2
 8001a6a:	009b      	lsls	r3, r3, #2
 8001a6c:	4403      	add	r3, r0
 8001a6e:	f503 7321 	add.w	r3, r3, #644	@ 0x284
 8001a72:	6019      	str	r1, [r3, #0]
						if ((g->enemies[i].x % 4 == 0)
 8001a74:	7dfa      	ldrb	r2, [r7, #23]
 8001a76:	6879      	ldr	r1, [r7, #4]
 8001a78:	4613      	mov	r3, r2
 8001a7a:	00db      	lsls	r3, r3, #3
 8001a7c:	4413      	add	r3, r2
 8001a7e:	009b      	lsls	r3, r3, #2
 8001a80:	440b      	add	r3, r1
 8001a82:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f003 0303 	and.w	r3, r3, #3
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d122      	bne.n	8001ad6 <GameTick+0x7aa>
								&& !(g->enemies[i].x % 8 == 0))
 8001a90:	7dfa      	ldrb	r2, [r7, #23]
 8001a92:	6879      	ldr	r1, [r7, #4]
 8001a94:	4613      	mov	r3, r2
 8001a96:	00db      	lsls	r3, r3, #3
 8001a98:	4413      	add	r3, r2
 8001a9a:	009b      	lsls	r3, r3, #2
 8001a9c:	440b      	add	r3, r1
 8001a9e:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f003 0307 	and.w	r3, r3, #7
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d014      	beq.n	8001ad6 <GameTick+0x7aa>
							g->enemies[i].y -= 4;
 8001aac:	7dfa      	ldrb	r2, [r7, #23]
 8001aae:	6879      	ldr	r1, [r7, #4]
 8001ab0:	4613      	mov	r3, r2
 8001ab2:	00db      	lsls	r3, r3, #3
 8001ab4:	4413      	add	r3, r2
 8001ab6:	009b      	lsls	r3, r3, #2
 8001ab8:	440b      	add	r3, r1
 8001aba:	f503 7321 	add.w	r3, r3, #644	@ 0x284
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	7dfa      	ldrb	r2, [r7, #23]
 8001ac2:	1f19      	subs	r1, r3, #4
 8001ac4:	6878      	ldr	r0, [r7, #4]
 8001ac6:	4613      	mov	r3, r2
 8001ac8:	00db      	lsls	r3, r3, #3
 8001aca:	4413      	add	r3, r2
 8001acc:	009b      	lsls	r3, r3, #2
 8001ace:	4403      	add	r3, r0
 8001ad0:	f503 7321 	add.w	r3, r3, #644	@ 0x284
 8001ad4:	6019      	str	r1, [r3, #0]
						if (g->enemies[i].x < 70) {
 8001ad6:	7dfa      	ldrb	r2, [r7, #23]
 8001ad8:	6879      	ldr	r1, [r7, #4]
 8001ada:	4613      	mov	r3, r2
 8001adc:	00db      	lsls	r3, r3, #3
 8001ade:	4413      	add	r3, r2
 8001ae0:	009b      	lsls	r3, r3, #2
 8001ae2:	440b      	add	r3, r1
 8001ae4:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	2b45      	cmp	r3, #69	@ 0x45
 8001aec:	dc50      	bgt.n	8001b90 <GameTick+0x864>
							if (g->player.y > g->enemies[i].y)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6859      	ldr	r1, [r3, #4]
 8001af2:	7dfa      	ldrb	r2, [r7, #23]
 8001af4:	6878      	ldr	r0, [r7, #4]
 8001af6:	4613      	mov	r3, r2
 8001af8:	00db      	lsls	r3, r3, #3
 8001afa:	4413      	add	r3, r2
 8001afc:	009b      	lsls	r3, r3, #2
 8001afe:	4403      	add	r3, r0
 8001b00:	f503 7321 	add.w	r3, r3, #644	@ 0x284
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4299      	cmp	r1, r3
 8001b08:	dd14      	ble.n	8001b34 <GameTick+0x808>
								g->enemies[i].y += 1;
 8001b0a:	7dfa      	ldrb	r2, [r7, #23]
 8001b0c:	6879      	ldr	r1, [r7, #4]
 8001b0e:	4613      	mov	r3, r2
 8001b10:	00db      	lsls	r3, r3, #3
 8001b12:	4413      	add	r3, r2
 8001b14:	009b      	lsls	r3, r3, #2
 8001b16:	440b      	add	r3, r1
 8001b18:	f503 7321 	add.w	r3, r3, #644	@ 0x284
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	7dfa      	ldrb	r2, [r7, #23]
 8001b20:	1c59      	adds	r1, r3, #1
 8001b22:	6878      	ldr	r0, [r7, #4]
 8001b24:	4613      	mov	r3, r2
 8001b26:	00db      	lsls	r3, r3, #3
 8001b28:	4413      	add	r3, r2
 8001b2a:	009b      	lsls	r3, r3, #2
 8001b2c:	4403      	add	r3, r0
 8001b2e:	f503 7321 	add.w	r3, r3, #644	@ 0x284
 8001b32:	6019      	str	r1, [r3, #0]
							if (g->player.y < g->enemies[i].y)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6859      	ldr	r1, [r3, #4]
 8001b38:	7dfa      	ldrb	r2, [r7, #23]
 8001b3a:	6878      	ldr	r0, [r7, #4]
 8001b3c:	4613      	mov	r3, r2
 8001b3e:	00db      	lsls	r3, r3, #3
 8001b40:	4413      	add	r3, r2
 8001b42:	009b      	lsls	r3, r3, #2
 8001b44:	4403      	add	r3, r0
 8001b46:	f503 7321 	add.w	r3, r3, #644	@ 0x284
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4299      	cmp	r1, r3
 8001b4e:	da1f      	bge.n	8001b90 <GameTick+0x864>
								g->enemies[i].y -= 1;
 8001b50:	7dfa      	ldrb	r2, [r7, #23]
 8001b52:	6879      	ldr	r1, [r7, #4]
 8001b54:	4613      	mov	r3, r2
 8001b56:	00db      	lsls	r3, r3, #3
 8001b58:	4413      	add	r3, r2
 8001b5a:	009b      	lsls	r3, r3, #2
 8001b5c:	440b      	add	r3, r1
 8001b5e:	f503 7321 	add.w	r3, r3, #644	@ 0x284
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	7dfa      	ldrb	r2, [r7, #23]
 8001b66:	1e59      	subs	r1, r3, #1
 8001b68:	6878      	ldr	r0, [r7, #4]
 8001b6a:	4613      	mov	r3, r2
 8001b6c:	00db      	lsls	r3, r3, #3
 8001b6e:	4413      	add	r3, r2
 8001b70:	009b      	lsls	r3, r3, #2
 8001b72:	4403      	add	r3, r0
 8001b74:	f503 7321 	add.w	r3, r3, #644	@ 0x284
 8001b78:	6019      	str	r1, [r3, #0]
						}
						break;
 8001b7a:	e009      	b.n	8001b90 <GameTick+0x864>
						break;
 8001b7c:	bf00      	nop
 8001b7e:	e008      	b.n	8001b92 <GameTick+0x866>
						break;
 8001b80:	bf00      	nop
 8001b82:	e006      	b.n	8001b92 <GameTick+0x866>
 8001b84:	0800ada8 	.word	0x0800ada8
 8001b88:	0800ad70 	.word	0x0800ad70
 8001b8c:	0800aba8 	.word	0x0800aba8
						break;
 8001b90:	bf00      	nop
					}

					// If off-screen, deactivation
					if (g->enemies[i].x < -4) {
 8001b92:	7dfa      	ldrb	r2, [r7, #23]
 8001b94:	6879      	ldr	r1, [r7, #4]
 8001b96:	4613      	mov	r3, r2
 8001b98:	00db      	lsls	r3, r3, #3
 8001b9a:	4413      	add	r3, r2
 8001b9c:	009b      	lsls	r3, r3, #2
 8001b9e:	440b      	add	r3, r1
 8001ba0:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f113 0f04 	cmn.w	r3, #4
 8001baa:	da20      	bge.n	8001bee <GameTick+0x8c2>
						g->enemies[i].active = false;
 8001bac:	7dfa      	ldrb	r2, [r7, #23]
 8001bae:	6879      	ldr	r1, [r7, #4]
 8001bb0:	4613      	mov	r3, r2
 8001bb2:	00db      	lsls	r3, r3, #3
 8001bb4:	4413      	add	r3, r2
 8001bb6:	009b      	lsls	r3, r3, #2
 8001bb8:	440b      	add	r3, r1
 8001bba:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	701a      	strb	r2, [r3, #0]
						g->enemies[i].trackedByMissile = false;
 8001bc2:	7dfa      	ldrb	r2, [r7, #23]
 8001bc4:	6879      	ldr	r1, [r7, #4]
 8001bc6:	4613      	mov	r3, r2
 8001bc8:	00db      	lsls	r3, r3, #3
 8001bca:	4413      	add	r3, r2
 8001bcc:	009b      	lsls	r3, r3, #2
 8001bce:	440b      	add	r3, r1
 8001bd0:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	701a      	strb	r2, [r3, #0]
						g->enemies[i].trackNumber = 0;
 8001bd8:	7dfa      	ldrb	r2, [r7, #23]
 8001bda:	6879      	ldr	r1, [r7, #4]
 8001bdc:	4613      	mov	r3, r2
 8001bde:	00db      	lsls	r3, r3, #3
 8001be0:	4413      	add	r3, r2
 8001be2:	009b      	lsls	r3, r3, #2
 8001be4:	440b      	add	r3, r1
 8001be6:	f503 7327 	add.w	r3, r3, #668	@ 0x29c
 8001bea:	2200      	movs	r2, #0
 8001bec:	601a      	str	r2, [r3, #0]
	for (i = 0; i < NUMBER_ENEMIES; ++i) {
 8001bee:	7dfb      	ldrb	r3, [r7, #23]
 8001bf0:	3301      	adds	r3, #1
 8001bf2:	75fb      	strb	r3, [r7, #23]
 8001bf4:	7dfb      	ldrb	r3, [r7, #23]
 8001bf6:	2b09      	cmp	r3, #9
 8001bf8:	f67f ad5c 	bls.w	80016b4 <GameTick+0x388>
			}
		}
	}

	//------------- Boss service ---------------
	if (g->boss.active) {
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	f893 3a24 	ldrb.w	r3, [r3, #2596]	@ 0xa24
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	f000 8249 	beq.w	800209a <GameTick+0xd6e>
		g->boss.nextUpdate -= 1;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	f8d3 3a30 	ldr.w	r3, [r3, #2608]	@ 0xa30
 8001c0e:	1e5a      	subs	r2, r3, #1
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	f8c3 2a30 	str.w	r2, [r3, #2608]	@ 0xa30

		//Boss position
		if (g->boss.nextUpdate <= 0) {
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	f8d3 3a30 	ldr.w	r3, [r3, #2608]	@ 0xa30
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	dc43      	bgt.n	8001ca8 <GameTick+0x97c>
			g->boss.nextUpdate = g->boss.updateDelay;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	f8d3 2a34 	ldr.w	r2, [r3, #2612]	@ 0xa34
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	f8c3 2a30 	str.w	r2, [r3, #2608]	@ 0xa30

			y += dy;
 8001c2c:	4b4c      	ldr	r3, [pc, #304]	@ (8001d60 <GameTick+0xa34>)
 8001c2e:	781a      	ldrb	r2, [r3, #0]
 8001c30:	4b4c      	ldr	r3, [pc, #304]	@ (8001d64 <GameTick+0xa38>)
 8001c32:	781b      	ldrb	r3, [r3, #0]
 8001c34:	4413      	add	r3, r2
 8001c36:	b2da      	uxtb	r2, r3
 8001c38:	4b49      	ldr	r3, [pc, #292]	@ (8001d60 <GameTick+0xa34>)
 8001c3a:	701a      	strb	r2, [r3, #0]
			if (y < 1 || y > (SCREEN_HEIGHT - 24))
 8001c3c:	4b48      	ldr	r3, [pc, #288]	@ (8001d60 <GameTick+0xa34>)
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d003      	beq.n	8001c4c <GameTick+0x920>
 8001c44:	4b46      	ldr	r3, [pc, #280]	@ (8001d60 <GameTick+0xa34>)
 8001c46:	781b      	ldrb	r3, [r3, #0]
 8001c48:	2b68      	cmp	r3, #104	@ 0x68
 8001c4a:	d905      	bls.n	8001c58 <GameTick+0x92c>
				dy = -dy;
 8001c4c:	4b45      	ldr	r3, [pc, #276]	@ (8001d64 <GameTick+0xa38>)
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	425b      	negs	r3, r3
 8001c52:	b2da      	uxtb	r2, r3
 8001c54:	4b43      	ldr	r3, [pc, #268]	@ (8001d64 <GameTick+0xa38>)
 8001c56:	701a      	strb	r2, [r3, #0]

			g->boss.y = y;
 8001c58:	4b41      	ldr	r3, [pc, #260]	@ (8001d60 <GameTick+0xa34>)
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	461a      	mov	r2, r3
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	f8c3 2a2c 	str.w	r2, [r3, #2604]	@ 0xa2c

			if (g->boss.y < 10)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	f8d3 3a2c 	ldr.w	r3, [r3, #2604]	@ 0xa2c
 8001c6a:	2b09      	cmp	r3, #9
 8001c6c:	dc03      	bgt.n	8001c76 <GameTick+0x94a>
				g->boss.y = 10;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	220a      	movs	r2, #10
 8001c72:	f8c3 2a2c 	str.w	r2, [r3, #2604]	@ 0xa2c
			if (g->boss.y > (SCREEN_HEIGHT - 24))
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	f8d3 3a2c 	ldr.w	r3, [r3, #2604]	@ 0xa2c
 8001c7c:	2b68      	cmp	r3, #104	@ 0x68
 8001c7e:	dd03      	ble.n	8001c88 <GameTick+0x95c>
				g->boss.y = (SCREEN_HEIGHT - 24);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2268      	movs	r2, #104	@ 0x68
 8001c84:	f8c3 2a2c 	str.w	r2, [r3, #2604]	@ 0xa2c

			g->boss.x -= 1;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	f8d3 3a28 	ldr.w	r3, [r3, #2600]	@ 0xa28
 8001c8e:	1e5a      	subs	r2, r3, #1
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	f8c3 2a28 	str.w	r2, [r3, #2600]	@ 0xa28
			if (g->boss.x < 100)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	f8d3 3a28 	ldr.w	r3, [r3, #2600]	@ 0xa28
 8001c9c:	2b63      	cmp	r3, #99	@ 0x63
 8001c9e:	dc03      	bgt.n	8001ca8 <GameTick+0x97c>
				g->boss.x = 100;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2264      	movs	r2, #100	@ 0x64
 8001ca4:	f8c3 2a28 	str.w	r2, [r3, #2600]	@ 0xa28
		}

		//Frequency of boss shots
		if ((rand() % 100) < (g->boss.level * 5))
 8001ca8:	f006 fd8a 	bl	80087c0 <rand>
 8001cac:	4602      	mov	r2, r0
 8001cae:	4b2e      	ldr	r3, [pc, #184]	@ (8001d68 <GameTick+0xa3c>)
 8001cb0:	fb83 1302 	smull	r1, r3, r3, r2
 8001cb4:	1159      	asrs	r1, r3, #5
 8001cb6:	17d3      	asrs	r3, r2, #31
 8001cb8:	1acb      	subs	r3, r1, r3
 8001cba:	2164      	movs	r1, #100	@ 0x64
 8001cbc:	fb01 f303 	mul.w	r3, r1, r3
 8001cc0:	1ad3      	subs	r3, r2, r3
 8001cc2:	687a      	ldr	r2, [r7, #4]
 8001cc4:	f8d2 1a3c 	ldr.w	r1, [r2, #2620]	@ 0xa3c
 8001cc8:	460a      	mov	r2, r1
 8001cca:	0092      	lsls	r2, r2, #2
 8001ccc:	440a      	add	r2, r1
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	da02      	bge.n	8001cd8 <GameTick+0x9ac>
			GameShotBoss(g);
 8001cd2:	6878      	ldr	r0, [r7, #4]
 8001cd4:	f001 fa46 	bl	8003164 <GameShotBoss>


		for (i = 0; i < NUMBER_BOSS_SHOTS; ++i) {
 8001cd8:	2300      	movs	r3, #0
 8001cda:	75fb      	strb	r3, [r7, #23]
 8001cdc:	e03a      	b.n	8001d54 <GameTick+0xa28>
			if (g->bossShots[i].active)
 8001cde:	7dfa      	ldrb	r2, [r7, #23]
 8001ce0:	6879      	ldr	r1, [r7, #4]
 8001ce2:	4613      	mov	r3, r2
 8001ce4:	009b      	lsls	r3, r3, #2
 8001ce6:	4413      	add	r3, r2
 8001ce8:	009b      	lsls	r3, r3, #2
 8001cea:	440b      	add	r3, r1
 8001cec:	f503 7306 	add.w	r3, r3, #536	@ 0x218
 8001cf0:	781b      	ldrb	r3, [r3, #0]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d013      	beq.n	8001d1e <GameTick+0x9f2>
				g->bossShots[i].x--;
 8001cf6:	7dfa      	ldrb	r2, [r7, #23]
 8001cf8:	6879      	ldr	r1, [r7, #4]
 8001cfa:	4613      	mov	r3, r2
 8001cfc:	009b      	lsls	r3, r3, #2
 8001cfe:	4413      	add	r3, r2
 8001d00:	009b      	lsls	r3, r3, #2
 8001d02:	440b      	add	r3, r1
 8001d04:	f503 7307 	add.w	r3, r3, #540	@ 0x21c
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	1e59      	subs	r1, r3, #1
 8001d0c:	6878      	ldr	r0, [r7, #4]
 8001d0e:	4613      	mov	r3, r2
 8001d10:	009b      	lsls	r3, r3, #2
 8001d12:	4413      	add	r3, r2
 8001d14:	009b      	lsls	r3, r3, #2
 8001d16:	4403      	add	r3, r0
 8001d18:	f503 7307 	add.w	r3, r3, #540	@ 0x21c
 8001d1c:	6019      	str	r1, [r3, #0]
			if (g->bossShots[i].x < -4)
 8001d1e:	7dfa      	ldrb	r2, [r7, #23]
 8001d20:	6879      	ldr	r1, [r7, #4]
 8001d22:	4613      	mov	r3, r2
 8001d24:	009b      	lsls	r3, r3, #2
 8001d26:	4413      	add	r3, r2
 8001d28:	009b      	lsls	r3, r3, #2
 8001d2a:	440b      	add	r3, r1
 8001d2c:	f503 7307 	add.w	r3, r3, #540	@ 0x21c
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f113 0f04 	cmn.w	r3, #4
 8001d36:	da0a      	bge.n	8001d4e <GameTick+0xa22>
				g->bossShots[i].active = false;
 8001d38:	7dfa      	ldrb	r2, [r7, #23]
 8001d3a:	6879      	ldr	r1, [r7, #4]
 8001d3c:	4613      	mov	r3, r2
 8001d3e:	009b      	lsls	r3, r3, #2
 8001d40:	4413      	add	r3, r2
 8001d42:	009b      	lsls	r3, r3, #2
 8001d44:	440b      	add	r3, r1
 8001d46:	f503 7306 	add.w	r3, r3, #536	@ 0x218
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < NUMBER_BOSS_SHOTS; ++i) {
 8001d4e:	7dfb      	ldrb	r3, [r7, #23]
 8001d50:	3301      	adds	r3, #1
 8001d52:	75fb      	strb	r3, [r7, #23]
 8001d54:	7dfb      	ldrb	r3, [r7, #23]
 8001d56:	2b04      	cmp	r3, #4
 8001d58:	d9c1      	bls.n	8001cde <GameTick+0x9b2>
		}

		for (i = 0; i < NUMBER_BOSS_SHOTS; i++) {
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	75fb      	strb	r3, [r7, #23]
 8001d5e:	e0df      	b.n	8001f20 <GameTick+0xbf4>
 8001d60:	20000b38 	.word	0x20000b38
 8001d64:	20000000 	.word	0x20000000
 8001d68:	51eb851f 	.word	0x51eb851f
			if (g->bossShots[i].active) {
 8001d6c:	7dfa      	ldrb	r2, [r7, #23]
 8001d6e:	6879      	ldr	r1, [r7, #4]
 8001d70:	4613      	mov	r3, r2
 8001d72:	009b      	lsls	r3, r3, #2
 8001d74:	4413      	add	r3, r2
 8001d76:	009b      	lsls	r3, r3, #2
 8001d78:	440b      	add	r3, r1
 8001d7a:	f503 7306 	add.w	r3, r3, #536	@ 0x218
 8001d7e:	781b      	ldrb	r3, [r3, #0]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	f000 80ca 	beq.w	8001f1a <GameTick+0xbee>
				if (Colliding(g->bossShots[i].x, g->bossShots[i].y,
 8001d86:	7dfa      	ldrb	r2, [r7, #23]
 8001d88:	6879      	ldr	r1, [r7, #4]
 8001d8a:	4613      	mov	r3, r2
 8001d8c:	009b      	lsls	r3, r3, #2
 8001d8e:	4413      	add	r3, r2
 8001d90:	009b      	lsls	r3, r3, #2
 8001d92:	440b      	add	r3, r1
 8001d94:	f503 7307 	add.w	r3, r3, #540	@ 0x21c
 8001d98:	6818      	ldr	r0, [r3, #0]
 8001d9a:	7dfa      	ldrb	r2, [r7, #23]
 8001d9c:	6879      	ldr	r1, [r7, #4]
 8001d9e:	4613      	mov	r3, r2
 8001da0:	009b      	lsls	r3, r3, #2
 8001da2:	4413      	add	r3, r2
 8001da4:	009b      	lsls	r3, r3, #2
 8001da6:	440b      	add	r3, r1
 8001da8:	f503 7308 	add.w	r3, r3, #544	@ 0x220
 8001dac:	6819      	ldr	r1, [r3, #0]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681a      	ldr	r2, [r3, #0]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	f001 fa1d 	bl	80031f4 <Colliding>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d15a      	bne.n	8001e76 <GameTick+0xb4a>
						g->player.x, g->player.y)
						|| Colliding(g->bossShots[i].x, g->bossShots[i].y,
 8001dc0:	7dfa      	ldrb	r2, [r7, #23]
 8001dc2:	6879      	ldr	r1, [r7, #4]
 8001dc4:	4613      	mov	r3, r2
 8001dc6:	009b      	lsls	r3, r3, #2
 8001dc8:	4413      	add	r3, r2
 8001dca:	009b      	lsls	r3, r3, #2
 8001dcc:	440b      	add	r3, r1
 8001dce:	f503 7307 	add.w	r3, r3, #540	@ 0x21c
 8001dd2:	6818      	ldr	r0, [r3, #0]
 8001dd4:	7dfa      	ldrb	r2, [r7, #23]
 8001dd6:	6879      	ldr	r1, [r7, #4]
 8001dd8:	4613      	mov	r3, r2
 8001dda:	009b      	lsls	r3, r3, #2
 8001ddc:	4413      	add	r3, r2
 8001dde:	009b      	lsls	r3, r3, #2
 8001de0:	440b      	add	r3, r1
 8001de2:	f503 7308 	add.w	r3, r3, #544	@ 0x220
 8001de6:	6819      	ldr	r1, [r3, #0]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681a      	ldr	r2, [r3, #0]
								g->player.x, g->player.y + 5)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	685b      	ldr	r3, [r3, #4]
						|| Colliding(g->bossShots[i].x, g->bossShots[i].y,
 8001df0:	3305      	adds	r3, #5
 8001df2:	f001 f9ff 	bl	80031f4 <Colliding>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d13c      	bne.n	8001e76 <GameTick+0xb4a>
						|| Colliding(g->bossShots[i].x, g->bossShots[i].y,
 8001dfc:	7dfa      	ldrb	r2, [r7, #23]
 8001dfe:	6879      	ldr	r1, [r7, #4]
 8001e00:	4613      	mov	r3, r2
 8001e02:	009b      	lsls	r3, r3, #2
 8001e04:	4413      	add	r3, r2
 8001e06:	009b      	lsls	r3, r3, #2
 8001e08:	440b      	add	r3, r1
 8001e0a:	f503 7307 	add.w	r3, r3, #540	@ 0x21c
 8001e0e:	6818      	ldr	r0, [r3, #0]
 8001e10:	7dfa      	ldrb	r2, [r7, #23]
 8001e12:	6879      	ldr	r1, [r7, #4]
 8001e14:	4613      	mov	r3, r2
 8001e16:	009b      	lsls	r3, r3, #2
 8001e18:	4413      	add	r3, r2
 8001e1a:	009b      	lsls	r3, r3, #2
 8001e1c:	440b      	add	r3, r1
 8001e1e:	f503 7308 	add.w	r3, r3, #544	@ 0x220
 8001e22:	6819      	ldr	r1, [r3, #0]
								g->player.x + 7, g->player.y)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
						|| Colliding(g->bossShots[i].x, g->bossShots[i].y,
 8001e28:	1dda      	adds	r2, r3, #7
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	f001 f9e1 	bl	80031f4 <Colliding>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d11e      	bne.n	8001e76 <GameTick+0xb4a>
						|| Colliding(g->bossShots[i].x, g->bossShots[i].y,
 8001e38:	7dfa      	ldrb	r2, [r7, #23]
 8001e3a:	6879      	ldr	r1, [r7, #4]
 8001e3c:	4613      	mov	r3, r2
 8001e3e:	009b      	lsls	r3, r3, #2
 8001e40:	4413      	add	r3, r2
 8001e42:	009b      	lsls	r3, r3, #2
 8001e44:	440b      	add	r3, r1
 8001e46:	f503 7307 	add.w	r3, r3, #540	@ 0x21c
 8001e4a:	6818      	ldr	r0, [r3, #0]
 8001e4c:	7dfa      	ldrb	r2, [r7, #23]
 8001e4e:	6879      	ldr	r1, [r7, #4]
 8001e50:	4613      	mov	r3, r2
 8001e52:	009b      	lsls	r3, r3, #2
 8001e54:	4413      	add	r3, r2
 8001e56:	009b      	lsls	r3, r3, #2
 8001e58:	440b      	add	r3, r1
 8001e5a:	f503 7308 	add.w	r3, r3, #544	@ 0x220
 8001e5e:	6819      	ldr	r1, [r3, #0]
								g->player.x + 7, g->player.y + 5)) {
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
						|| Colliding(g->bossShots[i].x, g->bossShots[i].y,
 8001e64:	1dda      	adds	r2, r3, #7
								g->player.x + 7, g->player.y + 5)) {
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	685b      	ldr	r3, [r3, #4]
						|| Colliding(g->bossShots[i].x, g->bossShots[i].y,
 8001e6a:	3305      	adds	r3, #5
 8001e6c:	f001 f9c2 	bl	80031f4 <Colliding>
 8001e70:	4603      	mov	r3, r0
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d051      	beq.n	8001f1a <GameTick+0xbee>
					g->player.lives -= 1;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	691b      	ldr	r3, [r3, #16]
 8001e7a:	1e5a      	subs	r2, r3, #1
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	611a      	str	r2, [r3, #16]
					;
					g->bossShots[i].active = false;
 8001e80:	7dfa      	ldrb	r2, [r7, #23]
 8001e82:	6879      	ldr	r1, [r7, #4]
 8001e84:	4613      	mov	r3, r2
 8001e86:	009b      	lsls	r3, r3, #2
 8001e88:	4413      	add	r3, r2
 8001e8a:	009b      	lsls	r3, r3, #2
 8001e8c:	440b      	add	r3, r1
 8001e8e:	f503 7306 	add.w	r3, r3, #536	@ 0x218
 8001e92:	2200      	movs	r2, #0
 8001e94:	701a      	strb	r2, [r3, #0]
					GFX_DrowBitMap_P(g->bossShots[i].x + 2, g->bossShots[i].y,
 8001e96:	7dfa      	ldrb	r2, [r7, #23]
 8001e98:	6879      	ldr	r1, [r7, #4]
 8001e9a:	4613      	mov	r3, r2
 8001e9c:	009b      	lsls	r3, r3, #2
 8001e9e:	4413      	add	r3, r2
 8001ea0:	009b      	lsls	r3, r3, #2
 8001ea2:	440b      	add	r3, r1
 8001ea4:	f503 7307 	add.w	r3, r3, #540	@ 0x21c
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	1c98      	adds	r0, r3, #2
 8001eac:	7dfa      	ldrb	r2, [r7, #23]
 8001eae:	6879      	ldr	r1, [r7, #4]
 8001eb0:	4613      	mov	r3, r2
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	4413      	add	r3, r2
 8001eb6:	009b      	lsls	r3, r3, #2
 8001eb8:	440b      	add	r3, r1
 8001eba:	f503 7308 	add.w	r3, r3, #544	@ 0x220
 8001ebe:	6819      	ldr	r1, [r3, #0]
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	9301      	str	r3, [sp, #4]
 8001ec4:	230a      	movs	r3, #10
 8001ec6:	9300      	str	r3, [sp, #0]
 8001ec8:	230a      	movs	r3, #10
 8001eca:	4a9c      	ldr	r2, [pc, #624]	@ (800213c <GameTick+0xe10>)
 8001ecc:	f7fe ff6e 	bl	8000dac <GFX_DrowBitMap_P>
							explosion_map, 10, 10, 1);
					GFX_DrowBitMap_P(g->player.x + 8, g->player.y - 2,
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f103 0008 	add.w	r0, r3, #8
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	1e99      	subs	r1, r3, #2
 8001ede:	2301      	movs	r3, #1
 8001ee0:	9301      	str	r3, [sp, #4]
 8001ee2:	2310      	movs	r3, #16
 8001ee4:	9300      	str	r3, [sp, #0]
 8001ee6:	230a      	movs	r3, #10
 8001ee8:	4a95      	ldr	r2, [pc, #596]	@ (8002140 <GameTick+0xe14>)
 8001eea:	f7fe ff5f 	bl	8000dac <GFX_DrowBitMap_P>
							player_shield_map, 10, 16, 1);
					GFX_DrowBitMap_P(g->player.x, g->player.y, player_map, 11,
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6818      	ldr	r0, [r3, #0]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6859      	ldr	r1, [r3, #4]
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	9301      	str	r3, [sp, #4]
 8001efa:	230b      	movs	r3, #11
 8001efc:	9300      	str	r3, [sp, #0]
 8001efe:	230b      	movs	r3, #11
 8001f00:	4a90      	ldr	r2, [pc, #576]	@ (8002144 <GameTick+0xe18>)
 8001f02:	f7fe ff53 	bl	8000dac <GFX_DrowBitMap_P>
							11, 1);

					//SSD1327_Display();
					if (g->player.lives <= 0) {
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	691b      	ldr	r3, [r3, #16]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	dc05      	bgt.n	8001f1a <GameTick+0xbee>
						PlayDeadAnim();
 8001f0e:	f001 fec1 	bl	8003c94 <PlayDeadAnim>
						g->state = GS_Dead;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2202      	movs	r2, #2
 8001f16:	f883 2a94 	strb.w	r2, [r3, #2708]	@ 0xa94
		for (i = 0; i < NUMBER_BOSS_SHOTS; i++) {
 8001f1a:	7dfb      	ldrb	r3, [r7, #23]
 8001f1c:	3301      	adds	r3, #1
 8001f1e:	75fb      	strb	r3, [r7, #23]
 8001f20:	7dfb      	ldrb	r3, [r7, #23]
 8001f22:	2b04      	cmp	r3, #4
 8001f24:	f67f af22 	bls.w	8001d6c <GameTick+0xa40>
				}
			}
		}

		// Player's shots to the boss
		for (i = 0; i < NUMBER_SHOTS; i++) {
 8001f28:	2300      	movs	r3, #0
 8001f2a:	75fb      	strb	r3, [r7, #23]
 8001f2c:	e0b1      	b.n	8002092 <GameTick+0xd66>
			if (g->shots[i].active) {
 8001f2e:	7dfa      	ldrb	r2, [r7, #23]
 8001f30:	6879      	ldr	r1, [r7, #4]
 8001f32:	4613      	mov	r3, r2
 8001f34:	009b      	lsls	r3, r3, #2
 8001f36:	4413      	add	r3, r2
 8001f38:	009b      	lsls	r3, r3, #2
 8001f3a:	440b      	add	r3, r1
 8001f3c:	3324      	adds	r3, #36	@ 0x24
 8001f3e:	781b      	ldrb	r3, [r3, #0]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	f000 80a3 	beq.w	800208c <GameTick+0xd60>
				if (Colliding(g->boss.x, g->boss.y, g->shots[i].x,
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	f8d3 0a28 	ldr.w	r0, [r3, #2600]	@ 0xa28
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	f8d3 4a2c 	ldr.w	r4, [r3, #2604]	@ 0xa2c
 8001f52:	7dfa      	ldrb	r2, [r7, #23]
 8001f54:	6879      	ldr	r1, [r7, #4]
 8001f56:	4613      	mov	r3, r2
 8001f58:	009b      	lsls	r3, r3, #2
 8001f5a:	4413      	add	r3, r2
 8001f5c:	009b      	lsls	r3, r3, #2
 8001f5e:	440b      	add	r3, r1
 8001f60:	3328      	adds	r3, #40	@ 0x28
 8001f62:	681d      	ldr	r5, [r3, #0]
 8001f64:	7dfa      	ldrb	r2, [r7, #23]
 8001f66:	6879      	ldr	r1, [r7, #4]
 8001f68:	4613      	mov	r3, r2
 8001f6a:	009b      	lsls	r3, r3, #2
 8001f6c:	4413      	add	r3, r2
 8001f6e:	009b      	lsls	r3, r3, #2
 8001f70:	440b      	add	r3, r1
 8001f72:	332c      	adds	r3, #44	@ 0x2c
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	462a      	mov	r2, r5
 8001f78:	4621      	mov	r1, r4
 8001f7a:	f001 f93b 	bl	80031f4 <Colliding>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d140      	bne.n	8002006 <GameTick+0xcda>
						g->shots[i].y)
						|| Colliding(g->boss.x, g->boss.y + 6, g->shots[i].x,
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	f8d3 0a28 	ldr.w	r0, [r3, #2600]	@ 0xa28
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	f8d3 3a2c 	ldr.w	r3, [r3, #2604]	@ 0xa2c
 8001f90:	1d9c      	adds	r4, r3, #6
 8001f92:	7dfa      	ldrb	r2, [r7, #23]
 8001f94:	6879      	ldr	r1, [r7, #4]
 8001f96:	4613      	mov	r3, r2
 8001f98:	009b      	lsls	r3, r3, #2
 8001f9a:	4413      	add	r3, r2
 8001f9c:	009b      	lsls	r3, r3, #2
 8001f9e:	440b      	add	r3, r1
 8001fa0:	3328      	adds	r3, #40	@ 0x28
 8001fa2:	681d      	ldr	r5, [r3, #0]
 8001fa4:	7dfa      	ldrb	r2, [r7, #23]
 8001fa6:	6879      	ldr	r1, [r7, #4]
 8001fa8:	4613      	mov	r3, r2
 8001faa:	009b      	lsls	r3, r3, #2
 8001fac:	4413      	add	r3, r2
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	440b      	add	r3, r1
 8001fb2:	332c      	adds	r3, #44	@ 0x2c
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	462a      	mov	r2, r5
 8001fb8:	4621      	mov	r1, r4
 8001fba:	f001 f91b 	bl	80031f4 <Colliding>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d120      	bne.n	8002006 <GameTick+0xcda>
								g->shots[i].y)
						|| Colliding(g->boss.x, g->boss.y + 12, g->shots[i].x,
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	f8d3 0a28 	ldr.w	r0, [r3, #2600]	@ 0xa28
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	f8d3 3a2c 	ldr.w	r3, [r3, #2604]	@ 0xa2c
 8001fd0:	f103 040c 	add.w	r4, r3, #12
 8001fd4:	7dfa      	ldrb	r2, [r7, #23]
 8001fd6:	6879      	ldr	r1, [r7, #4]
 8001fd8:	4613      	mov	r3, r2
 8001fda:	009b      	lsls	r3, r3, #2
 8001fdc:	4413      	add	r3, r2
 8001fde:	009b      	lsls	r3, r3, #2
 8001fe0:	440b      	add	r3, r1
 8001fe2:	3328      	adds	r3, #40	@ 0x28
 8001fe4:	681d      	ldr	r5, [r3, #0]
 8001fe6:	7dfa      	ldrb	r2, [r7, #23]
 8001fe8:	6879      	ldr	r1, [r7, #4]
 8001fea:	4613      	mov	r3, r2
 8001fec:	009b      	lsls	r3, r3, #2
 8001fee:	4413      	add	r3, r2
 8001ff0:	009b      	lsls	r3, r3, #2
 8001ff2:	440b      	add	r3, r1
 8001ff4:	332c      	adds	r3, #44	@ 0x2c
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	462a      	mov	r2, r5
 8001ffa:	4621      	mov	r1, r4
 8001ffc:	f001 f8fa 	bl	80031f4 <Colliding>
 8002000:	4603      	mov	r3, r0
 8002002:	2b00      	cmp	r3, #0
 8002004:	d042      	beq.n	800208c <GameTick+0xd60>
								g->shots[i].y)) {
					g->boss.lives -= 1;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	f8d3 3a38 	ldr.w	r3, [r3, #2616]	@ 0xa38
 800200c:	1e5a      	subs	r2, r3, #1
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	f8c3 2a38 	str.w	r2, [r3, #2616]	@ 0xa38
					g->shots[i].active = false;
 8002014:	7dfa      	ldrb	r2, [r7, #23]
 8002016:	6879      	ldr	r1, [r7, #4]
 8002018:	4613      	mov	r3, r2
 800201a:	009b      	lsls	r3, r3, #2
 800201c:	4413      	add	r3, r2
 800201e:	009b      	lsls	r3, r3, #2
 8002020:	440b      	add	r3, r1
 8002022:	3324      	adds	r3, #36	@ 0x24
 8002024:	2200      	movs	r2, #0
 8002026:	701a      	strb	r2, [r3, #0]
					g->shots[i].trackNumber = 0;
 8002028:	7dfa      	ldrb	r2, [r7, #23]
 800202a:	6879      	ldr	r1, [r7, #4]
 800202c:	4613      	mov	r3, r2
 800202e:	009b      	lsls	r3, r3, #2
 8002030:	4413      	add	r3, r2
 8002032:	009b      	lsls	r3, r3, #2
 8002034:	440b      	add	r3, r1
 8002036:	3334      	adds	r3, #52	@ 0x34
 8002038:	2200      	movs	r2, #0
 800203a:	601a      	str	r2, [r3, #0]
					GFX_DrowBitMap_P(g->shots[i].x, g->shots[i].y,
 800203c:	7dfa      	ldrb	r2, [r7, #23]
 800203e:	6879      	ldr	r1, [r7, #4]
 8002040:	4613      	mov	r3, r2
 8002042:	009b      	lsls	r3, r3, #2
 8002044:	4413      	add	r3, r2
 8002046:	009b      	lsls	r3, r3, #2
 8002048:	440b      	add	r3, r1
 800204a:	3328      	adds	r3, #40	@ 0x28
 800204c:	6818      	ldr	r0, [r3, #0]
 800204e:	7dfa      	ldrb	r2, [r7, #23]
 8002050:	6879      	ldr	r1, [r7, #4]
 8002052:	4613      	mov	r3, r2
 8002054:	009b      	lsls	r3, r3, #2
 8002056:	4413      	add	r3, r2
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	440b      	add	r3, r1
 800205c:	332c      	adds	r3, #44	@ 0x2c
 800205e:	6819      	ldr	r1, [r3, #0]
 8002060:	2301      	movs	r3, #1
 8002062:	9301      	str	r3, [sp, #4]
 8002064:	230a      	movs	r3, #10
 8002066:	9300      	str	r3, [sp, #0]
 8002068:	230a      	movs	r3, #10
 800206a:	4a34      	ldr	r2, [pc, #208]	@ (800213c <GameTick+0xe10>)
 800206c:	f7fe fe9e 	bl	8000dac <GFX_DrowBitMap_P>
							explosion_map, 10, 10, 1);

					if (g->boss.lives <= 0) {
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	f8d3 3a38 	ldr.w	r3, [r3, #2616]	@ 0xa38
 8002076:	2b00      	cmp	r3, #0
 8002078:	dc08      	bgt.n	800208c <GameTick+0xd60>
						g->boss.active = false;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2200      	movs	r2, #0
 800207e:	f883 2a24 	strb.w	r2, [r3, #2596]	@ 0xa24
						g->boss.lives = 0;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2200      	movs	r2, #0
 8002086:	f8c3 2a38 	str.w	r2, [r3, #2616]	@ 0xa38
						break;
 800208a:	e006      	b.n	800209a <GameTick+0xd6e>
		for (i = 0; i < NUMBER_SHOTS; i++) {
 800208c:	7dfb      	ldrb	r3, [r7, #23]
 800208e:	3301      	adds	r3, #1
 8002090:	75fb      	strb	r3, [r7, #23]
 8002092:	7dfb      	ldrb	r3, [r7, #23]
 8002094:	2b18      	cmp	r3, #24
 8002096:	f67f af4a 	bls.w	8001f2e <GameTick+0xc02>
			}
		}
	}

	//Painting over and deactivating shots left over from the boss
	if (!g->boss.active) {
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	f893 3a24 	ldrb.w	r3, [r3, #2596]	@ 0xa24
 80020a0:	f083 0301 	eor.w	r3, r3, #1
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d03b      	beq.n	8002122 <GameTick+0xdf6>
		for (i = 0; i < NUMBER_BOSS_SHOTS; i++) {
 80020aa:	2300      	movs	r3, #0
 80020ac:	75fb      	strb	r3, [r7, #23]
 80020ae:	e035      	b.n	800211c <GameTick+0xdf0>
			if (g->bossShots[i].active) {
 80020b0:	7dfa      	ldrb	r2, [r7, #23]
 80020b2:	6879      	ldr	r1, [r7, #4]
 80020b4:	4613      	mov	r3, r2
 80020b6:	009b      	lsls	r3, r3, #2
 80020b8:	4413      	add	r3, r2
 80020ba:	009b      	lsls	r3, r3, #2
 80020bc:	440b      	add	r3, r1
 80020be:	f503 7306 	add.w	r3, r3, #536	@ 0x218
 80020c2:	781b      	ldrb	r3, [r3, #0]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d026      	beq.n	8002116 <GameTick+0xdea>
				g->bossShots[i].active = false;
 80020c8:	7dfa      	ldrb	r2, [r7, #23]
 80020ca:	6879      	ldr	r1, [r7, #4]
 80020cc:	4613      	mov	r3, r2
 80020ce:	009b      	lsls	r3, r3, #2
 80020d0:	4413      	add	r3, r2
 80020d2:	009b      	lsls	r3, r3, #2
 80020d4:	440b      	add	r3, r1
 80020d6:	f503 7306 	add.w	r3, r3, #536	@ 0x218
 80020da:	2200      	movs	r2, #0
 80020dc:	701a      	strb	r2, [r3, #0]
				GFX_DrowBitMap_P(g->bossShots[i].x, g->bossShots[i].y,
 80020de:	7dfa      	ldrb	r2, [r7, #23]
 80020e0:	6879      	ldr	r1, [r7, #4]
 80020e2:	4613      	mov	r3, r2
 80020e4:	009b      	lsls	r3, r3, #2
 80020e6:	4413      	add	r3, r2
 80020e8:	009b      	lsls	r3, r3, #2
 80020ea:	440b      	add	r3, r1
 80020ec:	f503 7307 	add.w	r3, r3, #540	@ 0x21c
 80020f0:	6818      	ldr	r0, [r3, #0]
 80020f2:	7dfa      	ldrb	r2, [r7, #23]
 80020f4:	6879      	ldr	r1, [r7, #4]
 80020f6:	4613      	mov	r3, r2
 80020f8:	009b      	lsls	r3, r3, #2
 80020fa:	4413      	add	r3, r2
 80020fc:	009b      	lsls	r3, r3, #2
 80020fe:	440b      	add	r3, r1
 8002100:	f503 7308 	add.w	r3, r3, #544	@ 0x220
 8002104:	6819      	ldr	r1, [r3, #0]
 8002106:	2300      	movs	r3, #0
 8002108:	9301      	str	r3, [sp, #4]
 800210a:	2301      	movs	r3, #1
 800210c:	9300      	str	r3, [sp, #0]
 800210e:	2304      	movs	r3, #4
 8002110:	4a0d      	ldr	r2, [pc, #52]	@ (8002148 <GameTick+0xe1c>)
 8002112:	f7fe fe4b 	bl	8000dac <GFX_DrowBitMap_P>
		for (i = 0; i < NUMBER_BOSS_SHOTS; i++) {
 8002116:	7dfb      	ldrb	r3, [r7, #23]
 8002118:	3301      	adds	r3, #1
 800211a:	75fb      	strb	r3, [r7, #23]
 800211c:	7dfb      	ldrb	r3, [r7, #23]
 800211e:	2b04      	cmp	r3, #4
 8002120:	d9c6      	bls.n	80020b0 <GameTick+0xd84>
			}
		}
	}
	//-------------------------------------------

	if (in->btn1State == GPIO_PIN_SET)
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	791b      	ldrb	r3, [r3, #4]
 8002126:	2b01      	cmp	r3, #1
 8002128:	d102      	bne.n	8002130 <GameTick+0xe04>
		GameShot(g);//shot();
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	f000 fef4 	bl	8002f18 <GameShot>

	// Checking the collision of a player's shots with opponents. Adding Bonuses
	for (i = 0; i < NUMBER_SHOTS; ++i) {
 8002130:	2300      	movs	r3, #0
 8002132:	75fb      	strb	r3, [r7, #23]
 8002134:	e0ce      	b.n	80022d4 <GameTick+0xfa8>
		for (j = 0; j < NUMBER_ENEMIES; ++j) {
 8002136:	2300      	movs	r3, #0
 8002138:	75bb      	strb	r3, [r7, #22]
 800213a:	e0c4      	b.n	80022c6 <GameTick+0xf9a>
 800213c:	0800ada8 	.word	0x0800ada8
 8002140:	0800ad70 	.word	0x0800ad70
 8002144:	0800aba8 	.word	0x0800aba8
 8002148:	0800aba4 	.word	0x0800aba4
			if (g->shots[i].active && g->enemies[j].active) {
 800214c:	7dfa      	ldrb	r2, [r7, #23]
 800214e:	6879      	ldr	r1, [r7, #4]
 8002150:	4613      	mov	r3, r2
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	4413      	add	r3, r2
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	440b      	add	r3, r1
 800215a:	3324      	adds	r3, #36	@ 0x24
 800215c:	781b      	ldrb	r3, [r3, #0]
 800215e:	2b00      	cmp	r3, #0
 8002160:	f000 80ae 	beq.w	80022c0 <GameTick+0xf94>
 8002164:	7dba      	ldrb	r2, [r7, #22]
 8002166:	6879      	ldr	r1, [r7, #4]
 8002168:	4613      	mov	r3, r2
 800216a:	00db      	lsls	r3, r3, #3
 800216c:	4413      	add	r3, r2
 800216e:	009b      	lsls	r3, r3, #2
 8002170:	440b      	add	r3, r1
 8002172:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 8002176:	781b      	ldrb	r3, [r3, #0]
 8002178:	2b00      	cmp	r3, #0
 800217a:	f000 80a1 	beq.w	80022c0 <GameTick+0xf94>
				if (Colliding(g->enemies[j].x, g->enemies[j].y, g->shots[i].x,
 800217e:	7dba      	ldrb	r2, [r7, #22]
 8002180:	6879      	ldr	r1, [r7, #4]
 8002182:	4613      	mov	r3, r2
 8002184:	00db      	lsls	r3, r3, #3
 8002186:	4413      	add	r3, r2
 8002188:	009b      	lsls	r3, r3, #2
 800218a:	440b      	add	r3, r1
 800218c:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8002190:	6818      	ldr	r0, [r3, #0]
 8002192:	7dba      	ldrb	r2, [r7, #22]
 8002194:	6879      	ldr	r1, [r7, #4]
 8002196:	4613      	mov	r3, r2
 8002198:	00db      	lsls	r3, r3, #3
 800219a:	4413      	add	r3, r2
 800219c:	009b      	lsls	r3, r3, #2
 800219e:	440b      	add	r3, r1
 80021a0:	f503 7321 	add.w	r3, r3, #644	@ 0x284
 80021a4:	681c      	ldr	r4, [r3, #0]
 80021a6:	7dfa      	ldrb	r2, [r7, #23]
 80021a8:	6879      	ldr	r1, [r7, #4]
 80021aa:	4613      	mov	r3, r2
 80021ac:	009b      	lsls	r3, r3, #2
 80021ae:	4413      	add	r3, r2
 80021b0:	009b      	lsls	r3, r3, #2
 80021b2:	440b      	add	r3, r1
 80021b4:	3328      	adds	r3, #40	@ 0x28
 80021b6:	681d      	ldr	r5, [r3, #0]
 80021b8:	7dfa      	ldrb	r2, [r7, #23]
 80021ba:	6879      	ldr	r1, [r7, #4]
 80021bc:	4613      	mov	r3, r2
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	4413      	add	r3, r2
 80021c2:	009b      	lsls	r3, r3, #2
 80021c4:	440b      	add	r3, r1
 80021c6:	332c      	adds	r3, #44	@ 0x2c
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	462a      	mov	r2, r5
 80021cc:	4621      	mov	r1, r4
 80021ce:	f001 f811 	bl	80031f4 <Colliding>
 80021d2:	4603      	mov	r3, r0
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d073      	beq.n	80022c0 <GameTick+0xf94>
						g->shots[i].y)) {
					g->enemies[j].active = false;
 80021d8:	7dba      	ldrb	r2, [r7, #22]
 80021da:	6879      	ldr	r1, [r7, #4]
 80021dc:	4613      	mov	r3, r2
 80021de:	00db      	lsls	r3, r3, #3
 80021e0:	4413      	add	r3, r2
 80021e2:	009b      	lsls	r3, r3, #2
 80021e4:	440b      	add	r3, r1
 80021e6:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 80021ea:	2200      	movs	r2, #0
 80021ec:	701a      	strb	r2, [r3, #0]
					g->enemies[j].trackedByMissile = false;
 80021ee:	7dba      	ldrb	r2, [r7, #22]
 80021f0:	6879      	ldr	r1, [r7, #4]
 80021f2:	4613      	mov	r3, r2
 80021f4:	00db      	lsls	r3, r3, #3
 80021f6:	4413      	add	r3, r2
 80021f8:	009b      	lsls	r3, r3, #2
 80021fa:	440b      	add	r3, r1
 80021fc:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8002200:	2200      	movs	r2, #0
 8002202:	701a      	strb	r2, [r3, #0]
					g->enemies[j].trackNumber = 0;
 8002204:	7dba      	ldrb	r2, [r7, #22]
 8002206:	6879      	ldr	r1, [r7, #4]
 8002208:	4613      	mov	r3, r2
 800220a:	00db      	lsls	r3, r3, #3
 800220c:	4413      	add	r3, r2
 800220e:	009b      	lsls	r3, r3, #2
 8002210:	440b      	add	r3, r1
 8002212:	f503 7327 	add.w	r3, r3, #668	@ 0x29c
 8002216:	2200      	movs	r2, #0
 8002218:	601a      	str	r2, [r3, #0]
					g->shots[i].active = false;
 800221a:	7dfa      	ldrb	r2, [r7, #23]
 800221c:	6879      	ldr	r1, [r7, #4]
 800221e:	4613      	mov	r3, r2
 8002220:	009b      	lsls	r3, r3, #2
 8002222:	4413      	add	r3, r2
 8002224:	009b      	lsls	r3, r3, #2
 8002226:	440b      	add	r3, r1
 8002228:	3324      	adds	r3, #36	@ 0x24
 800222a:	2200      	movs	r2, #0
 800222c:	701a      	strb	r2, [r3, #0]
					g->player.score += 1;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	1c5a      	adds	r2, r3, #1
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	609a      	str	r2, [r3, #8]
					GFX_DrowBitMap_P(g->enemies[j].x, g->enemies[j].y,
 8002238:	7dba      	ldrb	r2, [r7, #22]
 800223a:	6879      	ldr	r1, [r7, #4]
 800223c:	4613      	mov	r3, r2
 800223e:	00db      	lsls	r3, r3, #3
 8002240:	4413      	add	r3, r2
 8002242:	009b      	lsls	r3, r3, #2
 8002244:	440b      	add	r3, r1
 8002246:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 800224a:	6818      	ldr	r0, [r3, #0]
 800224c:	7dba      	ldrb	r2, [r7, #22]
 800224e:	6879      	ldr	r1, [r7, #4]
 8002250:	4613      	mov	r3, r2
 8002252:	00db      	lsls	r3, r3, #3
 8002254:	4413      	add	r3, r2
 8002256:	009b      	lsls	r3, r3, #2
 8002258:	440b      	add	r3, r1
 800225a:	f503 7321 	add.w	r3, r3, #644	@ 0x284
 800225e:	6819      	ldr	r1, [r3, #0]
 8002260:	2301      	movs	r3, #1
 8002262:	9301      	str	r3, [sp, #4]
 8002264:	230a      	movs	r3, #10
 8002266:	9300      	str	r3, [sp, #0]
 8002268:	230a      	movs	r3, #10
 800226a:	4a2d      	ldr	r2, [pc, #180]	@ (8002320 <GameTick+0xff4>)
 800226c:	f7fe fd9e 	bl	8000dac <GFX_DrowBitMap_P>
							explosion_map, 10, 10, 1);

					//Dodanie bonusa w miejscu zestrzelenia
					if ((rand() % 100) < BONUS_FREQUENCY)
 8002270:	f006 faa6 	bl	80087c0 <rand>
 8002274:	4602      	mov	r2, r0
 8002276:	4b2b      	ldr	r3, [pc, #172]	@ (8002324 <GameTick+0xff8>)
 8002278:	fb83 1302 	smull	r1, r3, r3, r2
 800227c:	1159      	asrs	r1, r3, #5
 800227e:	17d3      	asrs	r3, r2, #31
 8002280:	1acb      	subs	r3, r1, r3
 8002282:	2164      	movs	r1, #100	@ 0x64
 8002284:	fb01 f303 	mul.w	r3, r1, r3
 8002288:	1ad3      	subs	r3, r2, r3
 800228a:	2b0e      	cmp	r3, #14
 800228c:	dc18      	bgt.n	80022c0 <GameTick+0xf94>
						GameAddBonus(g, g->enemies[j].x, g->enemies[j].y);//add_bonus(g->enemies[j].x, g->enemies[j].y);
 800228e:	7dba      	ldrb	r2, [r7, #22]
 8002290:	6879      	ldr	r1, [r7, #4]
 8002292:	4613      	mov	r3, r2
 8002294:	00db      	lsls	r3, r3, #3
 8002296:	4413      	add	r3, r2
 8002298:	009b      	lsls	r3, r3, #2
 800229a:	440b      	add	r3, r1
 800229c:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 80022a0:	6818      	ldr	r0, [r3, #0]
 80022a2:	7dba      	ldrb	r2, [r7, #22]
 80022a4:	6879      	ldr	r1, [r7, #4]
 80022a6:	4613      	mov	r3, r2
 80022a8:	00db      	lsls	r3, r3, #3
 80022aa:	4413      	add	r3, r2
 80022ac:	009b      	lsls	r3, r3, #2
 80022ae:	440b      	add	r3, r1
 80022b0:	f503 7321 	add.w	r3, r3, #644	@ 0x284
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	461a      	mov	r2, r3
 80022b8:	4601      	mov	r1, r0
 80022ba:	6878      	ldr	r0, [r7, #4]
 80022bc:	f000 fc3c 	bl	8002b38 <GameAddBonus>
		for (j = 0; j < NUMBER_ENEMIES; ++j) {
 80022c0:	7dbb      	ldrb	r3, [r7, #22]
 80022c2:	3301      	adds	r3, #1
 80022c4:	75bb      	strb	r3, [r7, #22]
 80022c6:	7dbb      	ldrb	r3, [r7, #22]
 80022c8:	2b09      	cmp	r3, #9
 80022ca:	f67f af3f 	bls.w	800214c <GameTick+0xe20>
	for (i = 0; i < NUMBER_SHOTS; ++i) {
 80022ce:	7dfb      	ldrb	r3, [r7, #23]
 80022d0:	3301      	adds	r3, #1
 80022d2:	75fb      	strb	r3, [r7, #23]
 80022d4:	7dfb      	ldrb	r3, [r7, #23]
 80022d6:	2b18      	cmp	r3, #24
 80022d8:	f67f af2d 	bls.w	8002136 <GameTick+0xe0a>
				}
			}
		}
	}
	if ((rand() % 100) < (g->player.level * 2) && !(g->boss.active)) //Frequency of adding opponents according to level
 80022dc:	f006 fa70 	bl	80087c0 <rand>
 80022e0:	4602      	mov	r2, r0
 80022e2:	4b10      	ldr	r3, [pc, #64]	@ (8002324 <GameTick+0xff8>)
 80022e4:	fb83 1302 	smull	r1, r3, r3, r2
 80022e8:	1159      	asrs	r1, r3, #5
 80022ea:	17d3      	asrs	r3, r2, #31
 80022ec:	1acb      	subs	r3, r1, r3
 80022ee:	2164      	movs	r1, #100	@ 0x64
 80022f0:	fb01 f303 	mul.w	r3, r1, r3
 80022f4:	1ad3      	subs	r3, r2, r3
 80022f6:	687a      	ldr	r2, [r7, #4]
 80022f8:	6952      	ldr	r2, [r2, #20]
 80022fa:	0052      	lsls	r2, r2, #1
 80022fc:	4293      	cmp	r3, r2
 80022fe:	da0a      	bge.n	8002316 <GameTick+0xfea>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	f893 3a24 	ldrb.w	r3, [r3, #2596]	@ 0xa24
 8002306:	f083 0301 	eor.w	r3, r3, #1
 800230a:	b2db      	uxtb	r3, r3
 800230c:	2b00      	cmp	r3, #0
 800230e:	d002      	beq.n	8002316 <GameTick+0xfea>
		GameAddEnemy(g);//add_enemy();
 8002310:	6878      	ldr	r0, [r7, #4]
 8002312:	f000 ff97 	bl	8003244 <GameAddEnemy>
}
 8002316:	bf00      	nop
 8002318:	3718      	adds	r7, #24
 800231a:	46bd      	mov	sp, r7
 800231c:	bdb0      	pop	{r4, r5, r7, pc}
 800231e:	bf00      	nop
 8002320:	0800ada8 	.word	0x0800ada8
 8002324:	51eb851f 	.word	0x51eb851f

08002328 <GameDraw>:

void GameDraw(GameCtx *g, InputSnapshot* in) {
 8002328:	b5b0      	push	{r4, r5, r7, lr}
 800232a:	b086      	sub	sp, #24
 800232c:	af02      	add	r7, sp, #8
 800232e:	6078      	str	r0, [r7, #4]
 8002330:	6039      	str	r1, [r7, #0]
	 * Drawing all game graphics
	 */
	uint8_t i;

	//Drowing the game information
	GFX_PutInt(5, 0, g->player.score, 1, 1, 0);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	689a      	ldr	r2, [r3, #8]
 8002336:	2300      	movs	r3, #0
 8002338:	9301      	str	r3, [sp, #4]
 800233a:	2301      	movs	r3, #1
 800233c:	9300      	str	r3, [sp, #0]
 800233e:	2301      	movs	r3, #1
 8002340:	2100      	movs	r1, #0
 8002342:	2005      	movs	r0, #5
 8002344:	f7fe fec4 	bl	80010d0 <GFX_PutInt>
	GFX_DrowBitMap_P(102, 0, lives_map, 8, 6, 1);
 8002348:	2301      	movs	r3, #1
 800234a:	9301      	str	r3, [sp, #4]
 800234c:	2306      	movs	r3, #6
 800234e:	9300      	str	r3, [sp, #0]
 8002350:	2308      	movs	r3, #8
 8002352:	4aa2      	ldr	r2, [pc, #648]	@ (80025dc <GameDraw+0x2b4>)
 8002354:	2100      	movs	r1, #0
 8002356:	2066      	movs	r0, #102	@ 0x66
 8002358:	f7fe fd28 	bl	8000dac <GFX_DrowBitMap_P>
	GFX_PutInt(114, 0, g->player.lives, 1, 1, 0);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	691a      	ldr	r2, [r3, #16]
 8002360:	2300      	movs	r3, #0
 8002362:	9301      	str	r3, [sp, #4]
 8002364:	2301      	movs	r3, #1
 8002366:	9300      	str	r3, [sp, #0]
 8002368:	2301      	movs	r3, #1
 800236a:	2100      	movs	r1, #0
 800236c:	2072      	movs	r0, #114	@ 0x72
 800236e:	f7fe feaf 	bl	80010d0 <GFX_PutInt>
	GFX_DrowBitMap_P(50, 0, Level_map, 20, 7, 1);
 8002372:	2301      	movs	r3, #1
 8002374:	9301      	str	r3, [sp, #4]
 8002376:	2307      	movs	r3, #7
 8002378:	9300      	str	r3, [sp, #0]
 800237a:	2314      	movs	r3, #20
 800237c:	4a98      	ldr	r2, [pc, #608]	@ (80025e0 <GameDraw+0x2b8>)
 800237e:	2100      	movs	r1, #0
 8002380:	2032      	movs	r0, #50	@ 0x32
 8002382:	f7fe fd13 	bl	8000dac <GFX_DrowBitMap_P>
	GFX_PutInt(80, 0, g->player.level, 1, 1, 0);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	695a      	ldr	r2, [r3, #20]
 800238a:	2300      	movs	r3, #0
 800238c:	9301      	str	r3, [sp, #4]
 800238e:	2301      	movs	r3, #1
 8002390:	9300      	str	r3, [sp, #0]
 8002392:	2301      	movs	r3, #1
 8002394:	2100      	movs	r1, #0
 8002396:	2050      	movs	r0, #80	@ 0x50
 8002398:	f7fe fe9a 	bl	80010d0 <GFX_PutInt>

	//Drawing graphics of a player's shot
	for (i = 0; i < NUMBER_SHOTS; i++) {
 800239c:	2300      	movs	r3, #0
 800239e:	73fb      	strb	r3, [r7, #15]
 80023a0:	e027      	b.n	80023f2 <GameDraw+0xca>
		if (g->shots[i].active) {
 80023a2:	7bfa      	ldrb	r2, [r7, #15]
 80023a4:	6879      	ldr	r1, [r7, #4]
 80023a6:	4613      	mov	r3, r2
 80023a8:	009b      	lsls	r3, r3, #2
 80023aa:	4413      	add	r3, r2
 80023ac:	009b      	lsls	r3, r3, #2
 80023ae:	440b      	add	r3, r1
 80023b0:	3324      	adds	r3, #36	@ 0x24
 80023b2:	781b      	ldrb	r3, [r3, #0]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d019      	beq.n	80023ec <GameDraw+0xc4>
			GFX_DrowBitMap_P(g->shots[i].x, g->shots[i].y, player_shot_map, 4, 1, 1);
 80023b8:	7bfa      	ldrb	r2, [r7, #15]
 80023ba:	6879      	ldr	r1, [r7, #4]
 80023bc:	4613      	mov	r3, r2
 80023be:	009b      	lsls	r3, r3, #2
 80023c0:	4413      	add	r3, r2
 80023c2:	009b      	lsls	r3, r3, #2
 80023c4:	440b      	add	r3, r1
 80023c6:	3328      	adds	r3, #40	@ 0x28
 80023c8:	6818      	ldr	r0, [r3, #0]
 80023ca:	7bfa      	ldrb	r2, [r7, #15]
 80023cc:	6879      	ldr	r1, [r7, #4]
 80023ce:	4613      	mov	r3, r2
 80023d0:	009b      	lsls	r3, r3, #2
 80023d2:	4413      	add	r3, r2
 80023d4:	009b      	lsls	r3, r3, #2
 80023d6:	440b      	add	r3, r1
 80023d8:	332c      	adds	r3, #44	@ 0x2c
 80023da:	6819      	ldr	r1, [r3, #0]
 80023dc:	2301      	movs	r3, #1
 80023de:	9301      	str	r3, [sp, #4]
 80023e0:	2301      	movs	r3, #1
 80023e2:	9300      	str	r3, [sp, #0]
 80023e4:	2304      	movs	r3, #4
 80023e6:	4a7f      	ldr	r2, [pc, #508]	@ (80025e4 <GameDraw+0x2bc>)
 80023e8:	f7fe fce0 	bl	8000dac <GFX_DrowBitMap_P>
	for (i = 0; i < NUMBER_SHOTS; i++) {
 80023ec:	7bfb      	ldrb	r3, [r7, #15]
 80023ee:	3301      	adds	r3, #1
 80023f0:	73fb      	strb	r3, [r7, #15]
 80023f2:	7bfb      	ldrb	r3, [r7, #15]
 80023f4:	2b18      	cmp	r3, #24
 80023f6:	d9d4      	bls.n	80023a2 <GameDraw+0x7a>
		}
	}

	//Drawing graphics of a boss shot
	if (g->boss.active) {
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	f893 3a24 	ldrb.w	r3, [r3, #2596]	@ 0xa24
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d030      	beq.n	8002464 <GameDraw+0x13c>
		for (i = 0; i < NUMBER_BOSS_SHOTS; i++) {
 8002402:	2300      	movs	r3, #0
 8002404:	73fb      	strb	r3, [r7, #15]
 8002406:	e02a      	b.n	800245e <GameDraw+0x136>
			if (g->bossShots[i].active) {
 8002408:	7bfa      	ldrb	r2, [r7, #15]
 800240a:	6879      	ldr	r1, [r7, #4]
 800240c:	4613      	mov	r3, r2
 800240e:	009b      	lsls	r3, r3, #2
 8002410:	4413      	add	r3, r2
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	440b      	add	r3, r1
 8002416:	f503 7306 	add.w	r3, r3, #536	@ 0x218
 800241a:	781b      	ldrb	r3, [r3, #0]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d01b      	beq.n	8002458 <GameDraw+0x130>
				GFX_DrowBitMap_P(g->bossShots[i].x, g->bossShots[i].y,
 8002420:	7bfa      	ldrb	r2, [r7, #15]
 8002422:	6879      	ldr	r1, [r7, #4]
 8002424:	4613      	mov	r3, r2
 8002426:	009b      	lsls	r3, r3, #2
 8002428:	4413      	add	r3, r2
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	440b      	add	r3, r1
 800242e:	f503 7307 	add.w	r3, r3, #540	@ 0x21c
 8002432:	6818      	ldr	r0, [r3, #0]
 8002434:	7bfa      	ldrb	r2, [r7, #15]
 8002436:	6879      	ldr	r1, [r7, #4]
 8002438:	4613      	mov	r3, r2
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	4413      	add	r3, r2
 800243e:	009b      	lsls	r3, r3, #2
 8002440:	440b      	add	r3, r1
 8002442:	f503 7308 	add.w	r3, r3, #544	@ 0x220
 8002446:	6819      	ldr	r1, [r3, #0]
 8002448:	2301      	movs	r3, #1
 800244a:	9301      	str	r3, [sp, #4]
 800244c:	2301      	movs	r3, #1
 800244e:	9300      	str	r3, [sp, #0]
 8002450:	2304      	movs	r3, #4
 8002452:	4a64      	ldr	r2, [pc, #400]	@ (80025e4 <GameDraw+0x2bc>)
 8002454:	f7fe fcaa 	bl	8000dac <GFX_DrowBitMap_P>
		for (i = 0; i < NUMBER_BOSS_SHOTS; i++) {
 8002458:	7bfb      	ldrb	r3, [r7, #15]
 800245a:	3301      	adds	r3, #1
 800245c:	73fb      	strb	r3, [r7, #15]
 800245e:	7bfb      	ldrb	r3, [r7, #15]
 8002460:	2b04      	cmp	r3, #4
 8002462:	d9d1      	bls.n	8002408 <GameDraw+0xe0>
			}
		}
	}

	//Drawing graphics of enemies
	for (i = 0; i < NUMBER_ENEMIES; i++) {
 8002464:	2300      	movs	r3, #0
 8002466:	73fb      	strb	r3, [r7, #15]
 8002468:	e0a5      	b.n	80025b6 <GameDraw+0x28e>
		if (g->enemies[i].active) {
 800246a:	7bfa      	ldrb	r2, [r7, #15]
 800246c:	6879      	ldr	r1, [r7, #4]
 800246e:	4613      	mov	r3, r2
 8002470:	00db      	lsls	r3, r3, #3
 8002472:	4413      	add	r3, r2
 8002474:	009b      	lsls	r3, r3, #2
 8002476:	440b      	add	r3, r1
 8002478:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 800247c:	781b      	ldrb	r3, [r3, #0]
 800247e:	2b00      	cmp	r3, #0
 8002480:	f000 8096 	beq.w	80025b0 <GameDraw+0x288>
			if (g->enemies[i].type == ET_Tracker)
 8002484:	7bfa      	ldrb	r2, [r7, #15]
 8002486:	6879      	ldr	r1, [r7, #4]
 8002488:	4613      	mov	r3, r2
 800248a:	00db      	lsls	r3, r3, #3
 800248c:	4413      	add	r3, r2
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	440b      	add	r3, r1
 8002492:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 8002496:	781b      	ldrb	r3, [r3, #0]
 8002498:	2b01      	cmp	r3, #1
 800249a:	d125      	bne.n	80024e8 <GameDraw+0x1c0>
				GFX_DrowBitMap_P(g->enemies[i].x, g->enemies[i].y, g->enemies[i].bitMap,
 800249c:	7bfa      	ldrb	r2, [r7, #15]
 800249e:	6879      	ldr	r1, [r7, #4]
 80024a0:	4613      	mov	r3, r2
 80024a2:	00db      	lsls	r3, r3, #3
 80024a4:	4413      	add	r3, r2
 80024a6:	009b      	lsls	r3, r3, #2
 80024a8:	440b      	add	r3, r1
 80024aa:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 80024ae:	6818      	ldr	r0, [r3, #0]
 80024b0:	7bfa      	ldrb	r2, [r7, #15]
 80024b2:	6879      	ldr	r1, [r7, #4]
 80024b4:	4613      	mov	r3, r2
 80024b6:	00db      	lsls	r3, r3, #3
 80024b8:	4413      	add	r3, r2
 80024ba:	009b      	lsls	r3, r3, #2
 80024bc:	440b      	add	r3, r1
 80024be:	f503 7321 	add.w	r3, r3, #644	@ 0x284
 80024c2:	681c      	ldr	r4, [r3, #0]
 80024c4:	7bfa      	ldrb	r2, [r7, #15]
 80024c6:	6879      	ldr	r1, [r7, #4]
 80024c8:	4613      	mov	r3, r2
 80024ca:	00db      	lsls	r3, r3, #3
 80024cc:	4413      	add	r3, r2
 80024ce:	009b      	lsls	r3, r3, #2
 80024d0:	440b      	add	r3, r1
 80024d2:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 80024d6:	681a      	ldr	r2, [r3, #0]
 80024d8:	2301      	movs	r3, #1
 80024da:	9301      	str	r3, [sp, #4]
 80024dc:	2305      	movs	r3, #5
 80024de:	9300      	str	r3, [sp, #0]
 80024e0:	2305      	movs	r3, #5
 80024e2:	4621      	mov	r1, r4
 80024e4:	f7fe fc62 	bl	8000dac <GFX_DrowBitMap_P>
						5, 5, 1);
			if (g->enemies[i].type == ET_Diver)
 80024e8:	7bfa      	ldrb	r2, [r7, #15]
 80024ea:	6879      	ldr	r1, [r7, #4]
 80024ec:	4613      	mov	r3, r2
 80024ee:	00db      	lsls	r3, r3, #3
 80024f0:	4413      	add	r3, r2
 80024f2:	009b      	lsls	r3, r3, #2
 80024f4:	440b      	add	r3, r1
 80024f6:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 80024fa:	781b      	ldrb	r3, [r3, #0]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d125      	bne.n	800254c <GameDraw+0x224>
				GFX_DrowBitMap_P(g->enemies[i].x, g->enemies[i].y, g->enemies[i].bitMap,
 8002500:	7bfa      	ldrb	r2, [r7, #15]
 8002502:	6879      	ldr	r1, [r7, #4]
 8002504:	4613      	mov	r3, r2
 8002506:	00db      	lsls	r3, r3, #3
 8002508:	4413      	add	r3, r2
 800250a:	009b      	lsls	r3, r3, #2
 800250c:	440b      	add	r3, r1
 800250e:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8002512:	6818      	ldr	r0, [r3, #0]
 8002514:	7bfa      	ldrb	r2, [r7, #15]
 8002516:	6879      	ldr	r1, [r7, #4]
 8002518:	4613      	mov	r3, r2
 800251a:	00db      	lsls	r3, r3, #3
 800251c:	4413      	add	r3, r2
 800251e:	009b      	lsls	r3, r3, #2
 8002520:	440b      	add	r3, r1
 8002522:	f503 7321 	add.w	r3, r3, #644	@ 0x284
 8002526:	681c      	ldr	r4, [r3, #0]
 8002528:	7bfa      	ldrb	r2, [r7, #15]
 800252a:	6879      	ldr	r1, [r7, #4]
 800252c:	4613      	mov	r3, r2
 800252e:	00db      	lsls	r3, r3, #3
 8002530:	4413      	add	r3, r2
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	440b      	add	r3, r1
 8002536:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	2301      	movs	r3, #1
 800253e:	9301      	str	r3, [sp, #4]
 8002540:	2307      	movs	r3, #7
 8002542:	9300      	str	r3, [sp, #0]
 8002544:	2303      	movs	r3, #3
 8002546:	4621      	mov	r1, r4
 8002548:	f7fe fc30 	bl	8000dac <GFX_DrowBitMap_P>
						3, 7, 1);
			if (g->enemies[i].type == ET_Bobber)
 800254c:	7bfa      	ldrb	r2, [r7, #15]
 800254e:	6879      	ldr	r1, [r7, #4]
 8002550:	4613      	mov	r3, r2
 8002552:	00db      	lsls	r3, r3, #3
 8002554:	4413      	add	r3, r2
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	440b      	add	r3, r1
 800255a:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 800255e:	781b      	ldrb	r3, [r3, #0]
 8002560:	2b02      	cmp	r3, #2
 8002562:	d125      	bne.n	80025b0 <GameDraw+0x288>
				GFX_DrowBitMap_P(g->enemies[i].x, g->enemies[i].y, g->enemies[i].bitMap,
 8002564:	7bfa      	ldrb	r2, [r7, #15]
 8002566:	6879      	ldr	r1, [r7, #4]
 8002568:	4613      	mov	r3, r2
 800256a:	00db      	lsls	r3, r3, #3
 800256c:	4413      	add	r3, r2
 800256e:	009b      	lsls	r3, r3, #2
 8002570:	440b      	add	r3, r1
 8002572:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8002576:	6818      	ldr	r0, [r3, #0]
 8002578:	7bfa      	ldrb	r2, [r7, #15]
 800257a:	6879      	ldr	r1, [r7, #4]
 800257c:	4613      	mov	r3, r2
 800257e:	00db      	lsls	r3, r3, #3
 8002580:	4413      	add	r3, r2
 8002582:	009b      	lsls	r3, r3, #2
 8002584:	440b      	add	r3, r1
 8002586:	f503 7321 	add.w	r3, r3, #644	@ 0x284
 800258a:	681c      	ldr	r4, [r3, #0]
 800258c:	7bfa      	ldrb	r2, [r7, #15]
 800258e:	6879      	ldr	r1, [r7, #4]
 8002590:	4613      	mov	r3, r2
 8002592:	00db      	lsls	r3, r3, #3
 8002594:	4413      	add	r3, r2
 8002596:	009b      	lsls	r3, r3, #2
 8002598:	440b      	add	r3, r1
 800259a:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 800259e:	681a      	ldr	r2, [r3, #0]
 80025a0:	2301      	movs	r3, #1
 80025a2:	9301      	str	r3, [sp, #4]
 80025a4:	2305      	movs	r3, #5
 80025a6:	9300      	str	r3, [sp, #0]
 80025a8:	2305      	movs	r3, #5
 80025aa:	4621      	mov	r1, r4
 80025ac:	f7fe fbfe 	bl	8000dac <GFX_DrowBitMap_P>
	for (i = 0; i < NUMBER_ENEMIES; i++) {
 80025b0:	7bfb      	ldrb	r3, [r7, #15]
 80025b2:	3301      	adds	r3, #1
 80025b4:	73fb      	strb	r3, [r7, #15]
 80025b6:	7bfb      	ldrb	r3, [r7, #15]
 80025b8:	2b09      	cmp	r3, #9
 80025ba:	f67f af56 	bls.w	800246a <GameDraw+0x142>
						5, 5, 1);
		}
	}

	//Drawing the player's graphics
	GFX_DrowBitMap_P(g->player.x, g->player.y, player_map, 11, 11, 1);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6818      	ldr	r0, [r3, #0]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6859      	ldr	r1, [r3, #4]
 80025c6:	2301      	movs	r3, #1
 80025c8:	9301      	str	r3, [sp, #4]
 80025ca:	230b      	movs	r3, #11
 80025cc:	9300      	str	r3, [sp, #0]
 80025ce:	230b      	movs	r3, #11
 80025d0:	4a05      	ldr	r2, [pc, #20]	@ (80025e8 <GameDraw+0x2c0>)
 80025d2:	f7fe fbeb 	bl	8000dac <GFX_DrowBitMap_P>

	//Drawing a background
	for (i = 0; i < NUMBER_BACKGROUND; i++) {
 80025d6:	2300      	movs	r3, #0
 80025d8:	73fb      	strb	r3, [r7, #15]
 80025da:	e03e      	b.n	800265a <GameDraw+0x332>
 80025dc:	0800abd8 	.word	0x0800abd8
 80025e0:	0800abc0 	.word	0x0800abc0
 80025e4:	0800aba4 	.word	0x0800aba4
 80025e8:	0800aba8 	.word	0x0800aba8
		if (g->background[i].active) {
 80025ec:	7bfa      	ldrb	r2, [r7, #15]
 80025ee:	6879      	ldr	r1, [r7, #4]
 80025f0:	4613      	mov	r3, r2
 80025f2:	009b      	lsls	r3, r3, #2
 80025f4:	4413      	add	r3, r2
 80025f6:	009b      	lsls	r3, r3, #2
 80025f8:	440b      	add	r3, r1
 80025fa:	f503 7379 	add.w	r3, r3, #996	@ 0x3e4
 80025fe:	781b      	ldrb	r3, [r3, #0]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d027      	beq.n	8002654 <GameDraw+0x32c>
			SSD1327_SetPixel(g->background[i].x, g->background[i].y, (rand() % 15));
 8002604:	7bfa      	ldrb	r2, [r7, #15]
 8002606:	6879      	ldr	r1, [r7, #4]
 8002608:	4613      	mov	r3, r2
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	4413      	add	r3, r2
 800260e:	009b      	lsls	r3, r3, #2
 8002610:	440b      	add	r3, r1
 8002612:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8002616:	681c      	ldr	r4, [r3, #0]
 8002618:	7bfa      	ldrb	r2, [r7, #15]
 800261a:	6879      	ldr	r1, [r7, #4]
 800261c:	4613      	mov	r3, r2
 800261e:	009b      	lsls	r3, r3, #2
 8002620:	4413      	add	r3, r2
 8002622:	009b      	lsls	r3, r3, #2
 8002624:	440b      	add	r3, r1
 8002626:	f503 737b 	add.w	r3, r3, #1004	@ 0x3ec
 800262a:	681d      	ldr	r5, [r3, #0]
 800262c:	f006 f8c8 	bl	80087c0 <rand>
 8002630:	4602      	mov	r2, r0
 8002632:	4b54      	ldr	r3, [pc, #336]	@ (8002784 <GameDraw+0x45c>)
 8002634:	fb83 1302 	smull	r1, r3, r3, r2
 8002638:	4413      	add	r3, r2
 800263a:	10d9      	asrs	r1, r3, #3
 800263c:	17d3      	asrs	r3, r2, #31
 800263e:	1ac9      	subs	r1, r1, r3
 8002640:	460b      	mov	r3, r1
 8002642:	011b      	lsls	r3, r3, #4
 8002644:	1a5b      	subs	r3, r3, r1
 8002646:	1ad1      	subs	r1, r2, r3
 8002648:	b2cb      	uxtb	r3, r1
 800264a:	461a      	mov	r2, r3
 800264c:	4629      	mov	r1, r5
 800264e:	4620      	mov	r0, r4
 8002650:	f001 fd30 	bl	80040b4 <SSD1327_SetPixel>
	for (i = 0; i < NUMBER_BACKGROUND; i++) {
 8002654:	7bfb      	ldrb	r3, [r7, #15]
 8002656:	3301      	adds	r3, #1
 8002658:	73fb      	strb	r3, [r7, #15]
 800265a:	7bfb      	ldrb	r3, [r7, #15]
 800265c:	2b4f      	cmp	r3, #79	@ 0x4f
 800265e:	d9c5      	bls.n	80025ec <GameDraw+0x2c4>
		}
	}

	//Drawing Boss
	if (g->boss.active && g->player.gameProgres == 30)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	f893 3a24 	ldrb.w	r3, [r3, #2596]	@ 0xa24
 8002666:	2b00      	cmp	r3, #0
 8002668:	d011      	beq.n	800268e <GameDraw+0x366>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	699b      	ldr	r3, [r3, #24]
 800266e:	2b1e      	cmp	r3, #30
 8002670:	d10d      	bne.n	800268e <GameDraw+0x366>
		GFX_DrowBitMap_P(g->boss.x, g->boss.y, boss_map_1, 10, 18, 1);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	f8d3 0a28 	ldr.w	r0, [r3, #2600]	@ 0xa28
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	f8d3 1a2c 	ldr.w	r1, [r3, #2604]	@ 0xa2c
 800267e:	2301      	movs	r3, #1
 8002680:	9301      	str	r3, [sp, #4]
 8002682:	2312      	movs	r3, #18
 8002684:	9300      	str	r3, [sp, #0]
 8002686:	230a      	movs	r3, #10
 8002688:	4a3f      	ldr	r2, [pc, #252]	@ (8002788 <GameDraw+0x460>)
 800268a:	f7fe fb8f 	bl	8000dac <GFX_DrowBitMap_P>
	if (g->boss.active && g->player.gameProgres == 60)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	f893 3a24 	ldrb.w	r3, [r3, #2596]	@ 0xa24
 8002694:	2b00      	cmp	r3, #0
 8002696:	d011      	beq.n	80026bc <GameDraw+0x394>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	699b      	ldr	r3, [r3, #24]
 800269c:	2b3c      	cmp	r3, #60	@ 0x3c
 800269e:	d10d      	bne.n	80026bc <GameDraw+0x394>
		GFX_DrowBitMap_P(g->boss.x, g->boss.y, boss_map_2, 10, 18, 1);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	f8d3 0a28 	ldr.w	r0, [r3, #2600]	@ 0xa28
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	f8d3 1a2c 	ldr.w	r1, [r3, #2604]	@ 0xa2c
 80026ac:	2301      	movs	r3, #1
 80026ae:	9301      	str	r3, [sp, #4]
 80026b0:	2312      	movs	r3, #18
 80026b2:	9300      	str	r3, [sp, #0]
 80026b4:	230a      	movs	r3, #10
 80026b6:	4a35      	ldr	r2, [pc, #212]	@ (800278c <GameDraw+0x464>)
 80026b8:	f7fe fb78 	bl	8000dac <GFX_DrowBitMap_P>

	//Drawing bonuses
	for (i = 0; i < NUMBER_BONUS; i++) {
 80026bc:	2300      	movs	r3, #0
 80026be:	73fb      	strb	r3, [r7, #15]
 80026c0:	e057      	b.n	8002772 <GameDraw+0x44a>
		if (g->bonuses[i].active) {
 80026c2:	7bfa      	ldrb	r2, [r7, #15]
 80026c4:	6879      	ldr	r1, [r7, #4]
 80026c6:	4613      	mov	r3, r2
 80026c8:	00db      	lsls	r3, r3, #3
 80026ca:	1a9b      	subs	r3, r3, r2
 80026cc:	009b      	lsls	r3, r3, #2
 80026ce:	440b      	add	r3, r1
 80026d0:	f503 6324 	add.w	r3, r3, #2624	@ 0xa40
 80026d4:	781b      	ldrb	r3, [r3, #0]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d048      	beq.n	800276c <GameDraw+0x444>
			switch (g->bonuses[i].type) {
 80026da:	7bfa      	ldrb	r2, [r7, #15]
 80026dc:	6879      	ldr	r1, [r7, #4]
 80026de:	4613      	mov	r3, r2
 80026e0:	00db      	lsls	r3, r3, #3
 80026e2:	1a9b      	subs	r3, r3, r2
 80026e4:	009b      	lsls	r3, r3, #2
 80026e6:	440b      	add	r3, r1
 80026e8:	f603 234c 	addw	r3, r3, #2636	@ 0xa4c
 80026ec:	781b      	ldrb	r3, [r3, #0]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d002      	beq.n	80026f8 <GameDraw+0x3d0>
 80026f2:	2b01      	cmp	r3, #1
 80026f4:	d01d      	beq.n	8002732 <GameDraw+0x40a>
 80026f6:	e039      	b.n	800276c <GameDraw+0x444>
			case BT_Live:
				GFX_DrowBitMap_P(g->bonuses[i].x, g->bonuses[i].y, bonus_live_map, 7,
 80026f8:	7bfa      	ldrb	r2, [r7, #15]
 80026fa:	6879      	ldr	r1, [r7, #4]
 80026fc:	4613      	mov	r3, r2
 80026fe:	00db      	lsls	r3, r3, #3
 8002700:	1a9b      	subs	r3, r3, r2
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	440b      	add	r3, r1
 8002706:	f603 2344 	addw	r3, r3, #2628	@ 0xa44
 800270a:	6818      	ldr	r0, [r3, #0]
 800270c:	7bfa      	ldrb	r2, [r7, #15]
 800270e:	6879      	ldr	r1, [r7, #4]
 8002710:	4613      	mov	r3, r2
 8002712:	00db      	lsls	r3, r3, #3
 8002714:	1a9b      	subs	r3, r3, r2
 8002716:	009b      	lsls	r3, r3, #2
 8002718:	440b      	add	r3, r1
 800271a:	f603 2348 	addw	r3, r3, #2632	@ 0xa48
 800271e:	6819      	ldr	r1, [r3, #0]
 8002720:	2301      	movs	r3, #1
 8002722:	9301      	str	r3, [sp, #4]
 8002724:	2307      	movs	r3, #7
 8002726:	9300      	str	r3, [sp, #0]
 8002728:	2307      	movs	r3, #7
 800272a:	4a19      	ldr	r2, [pc, #100]	@ (8002790 <GameDraw+0x468>)
 800272c:	f7fe fb3e 	bl	8000dac <GFX_DrowBitMap_P>
						7, 1);
				break;
 8002730:	e01c      	b.n	800276c <GameDraw+0x444>
			case BT_TrackerShot:
				GFX_DrowBitMap_P(g->bonuses[i].x, g->bonuses[i].y,
 8002732:	7bfa      	ldrb	r2, [r7, #15]
 8002734:	6879      	ldr	r1, [r7, #4]
 8002736:	4613      	mov	r3, r2
 8002738:	00db      	lsls	r3, r3, #3
 800273a:	1a9b      	subs	r3, r3, r2
 800273c:	009b      	lsls	r3, r3, #2
 800273e:	440b      	add	r3, r1
 8002740:	f603 2344 	addw	r3, r3, #2628	@ 0xa44
 8002744:	6818      	ldr	r0, [r3, #0]
 8002746:	7bfa      	ldrb	r2, [r7, #15]
 8002748:	6879      	ldr	r1, [r7, #4]
 800274a:	4613      	mov	r3, r2
 800274c:	00db      	lsls	r3, r3, #3
 800274e:	1a9b      	subs	r3, r3, r2
 8002750:	009b      	lsls	r3, r3, #2
 8002752:	440b      	add	r3, r1
 8002754:	f603 2348 	addw	r3, r3, #2632	@ 0xa48
 8002758:	6819      	ldr	r1, [r3, #0]
 800275a:	2301      	movs	r3, #1
 800275c:	9301      	str	r3, [sp, #4]
 800275e:	2307      	movs	r3, #7
 8002760:	9300      	str	r3, [sp, #0]
 8002762:	2307      	movs	r3, #7
 8002764:	4a0b      	ldr	r2, [pc, #44]	@ (8002794 <GameDraw+0x46c>)
 8002766:	f7fe fb21 	bl	8000dac <GFX_DrowBitMap_P>
						bonus_tracker_shoot_map, 7, 7, 1);
				break;
 800276a:	bf00      	nop
	for (i = 0; i < NUMBER_BONUS; i++) {
 800276c:	7bfb      	ldrb	r3, [r7, #15]
 800276e:	3301      	adds	r3, #1
 8002770:	73fb      	strb	r3, [r7, #15]
 8002772:	7bfb      	ldrb	r3, [r7, #15]
 8002774:	2b02      	cmp	r3, #2
 8002776:	d9a4      	bls.n	80026c2 <GameDraw+0x39a>
			}
		}
	}

}
 8002778:	bf00      	nop
 800277a:	bf00      	nop
 800277c:	3710      	adds	r7, #16
 800277e:	46bd      	mov	sp, r7
 8002780:	bdb0      	pop	{r4, r5, r7, pc}
 8002782:	bf00      	nop
 8002784:	88888889 	.word	0x88888889
 8002788:	0800adbc 	.word	0x0800adbc
 800278c:	0800ade0 	.word	0x0800ade0
 8002790:	0800ae04 	.word	0x0800ae04
 8002794:	0800ae0c 	.word	0x0800ae0c

08002798 <GameLevelUpdate>:

void GameLevelUpdate(GameCtx* g) {
 8002798:	b480      	push	{r7}
 800279a:	b083      	sub	sp, #12
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
		 * their initial parameters and adjusts the level of play to its progress.
		 */
		static uint8_t i = 0;

		//Calculation of game progress
		if(i > 70)
 80027a0:	4b5d      	ldr	r3, [pc, #372]	@ (8002918 <GameLevelUpdate+0x180>)
 80027a2:	781b      	ldrb	r3, [r3, #0]
 80027a4:	2b46      	cmp	r3, #70	@ 0x46
 80027a6:	d907      	bls.n	80027b8 <GameLevelUpdate+0x20>
		{
			g->player.gameProgres += 1;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	699b      	ldr	r3, [r3, #24]
 80027ac:	1c5a      	adds	r2, r3, #1
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	619a      	str	r2, [r3, #24]
			i = 0;
 80027b2:	4b59      	ldr	r3, [pc, #356]	@ (8002918 <GameLevelUpdate+0x180>)
 80027b4:	2200      	movs	r2, #0
 80027b6:	701a      	strb	r2, [r3, #0]
		}

		//If the boss is not active count the progress
		if(!g->boss.active) i++;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	f893 3a24 	ldrb.w	r3, [r3, #2596]	@ 0xa24
 80027be:	f083 0301 	eor.w	r3, r3, #1
 80027c2:	b2db      	uxtb	r3, r3
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d005      	beq.n	80027d4 <GameLevelUpdate+0x3c>
 80027c8:	4b53      	ldr	r3, [pc, #332]	@ (8002918 <GameLevelUpdate+0x180>)
 80027ca:	781b      	ldrb	r3, [r3, #0]
 80027cc:	3301      	adds	r3, #1
 80027ce:	b2da      	uxtb	r2, r3
 80027d0:	4b51      	ldr	r3, [pc, #324]	@ (8002918 <GameLevelUpdate+0x180>)
 80027d2:	701a      	strb	r2, [r3, #0]

		//---- Moments of boss appearance -----
		if(g->player.gameProgres == 29)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	699b      	ldr	r3, [r3, #24]
 80027d8:	2b1d      	cmp	r3, #29
 80027da:	d114      	bne.n	8002806 <GameLevelUpdate+0x6e>
		{
			g->boss.active = true;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2201      	movs	r2, #1
 80027e0:	f883 2a24 	strb.w	r2, [r3, #2596]	@ 0xa24
			g->boss.lives = 3;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2203      	movs	r2, #3
 80027e8:	f8c3 2a38 	str.w	r2, [r3, #2616]	@ 0xa38
			g->boss.level = 3;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2203      	movs	r2, #3
 80027f0:	f8c3 2a3c 	str.w	r2, [r3, #2620]	@ 0xa3c
			g->boss.updateDelay = 4;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2204      	movs	r2, #4
 80027f8:	f8c3 2a34 	str.w	r2, [r3, #2612]	@ 0xa34
			g->player.gameProgres += 1;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	699b      	ldr	r3, [r3, #24]
 8002800:	1c5a      	adds	r2, r3, #1
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	619a      	str	r2, [r3, #24]

		}
		if(g->player.gameProgres == 59)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	699b      	ldr	r3, [r3, #24]
 800280a:	2b3b      	cmp	r3, #59	@ 0x3b
 800280c:	d114      	bne.n	8002838 <GameLevelUpdate+0xa0>
		{
			g->boss.active = true;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2201      	movs	r2, #1
 8002812:	f883 2a24 	strb.w	r2, [r3, #2596]	@ 0xa24
			g->boss.lives = 6;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2206      	movs	r2, #6
 800281a:	f8c3 2a38 	str.w	r2, [r3, #2616]	@ 0xa38
			g->boss.level = 6;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2206      	movs	r2, #6
 8002822:	f8c3 2a3c 	str.w	r2, [r3, #2620]	@ 0xa3c
			g->boss.updateDelay = 2;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2202      	movs	r2, #2
 800282a:	f8c3 2a34 	str.w	r2, [r3, #2612]	@ 0xa34
			g->player.gameProgres += 1;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	699b      	ldr	r3, [r3, #24]
 8002832:	1c5a      	adds	r2, r3, #1
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	619a      	str	r2, [r3, #24]
		}
		//--------------------------------------

		//Next levels
		if(g->player.gameProgres > 9 && g->player.gameProgres < 10 )
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	699b      	ldr	r3, [r3, #24]
 800283c:	2b09      	cmp	r3, #9
 800283e:	dd06      	ble.n	800284e <GameLevelUpdate+0xb6>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	699b      	ldr	r3, [r3, #24]
 8002844:	2b09      	cmp	r3, #9
 8002846:	dc02      	bgt.n	800284e <GameLevelUpdate+0xb6>
			g->player.level = 1;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2201      	movs	r2, #1
 800284c:	615a      	str	r2, [r3, #20]
		if(g->player.gameProgres > 10 && g->player.gameProgres < 19)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	699b      	ldr	r3, [r3, #24]
 8002852:	2b0a      	cmp	r3, #10
 8002854:	dd06      	ble.n	8002864 <GameLevelUpdate+0xcc>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	699b      	ldr	r3, [r3, #24]
 800285a:	2b12      	cmp	r3, #18
 800285c:	dc02      	bgt.n	8002864 <GameLevelUpdate+0xcc>
			g->player.level = 2;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2202      	movs	r2, #2
 8002862:	615a      	str	r2, [r3, #20]
		if(g->player.gameProgres > 20 && g->player.gameProgres < 29)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	699b      	ldr	r3, [r3, #24]
 8002868:	2b14      	cmp	r3, #20
 800286a:	dd06      	ble.n	800287a <GameLevelUpdate+0xe2>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	699b      	ldr	r3, [r3, #24]
 8002870:	2b1c      	cmp	r3, #28
 8002872:	dc02      	bgt.n	800287a <GameLevelUpdate+0xe2>
			g->player.level = 3;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2203      	movs	r2, #3
 8002878:	615a      	str	r2, [r3, #20]
		if(g->player.gameProgres > 30 && g->player.gameProgres < 39)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	699b      	ldr	r3, [r3, #24]
 800287e:	2b1e      	cmp	r3, #30
 8002880:	dd06      	ble.n	8002890 <GameLevelUpdate+0xf8>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	699b      	ldr	r3, [r3, #24]
 8002886:	2b26      	cmp	r3, #38	@ 0x26
 8002888:	dc02      	bgt.n	8002890 <GameLevelUpdate+0xf8>
			g->player.level = 4;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2204      	movs	r2, #4
 800288e:	615a      	str	r2, [r3, #20]
		if(g->player.gameProgres > 40 && g->player.gameProgres < 49)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	699b      	ldr	r3, [r3, #24]
 8002894:	2b28      	cmp	r3, #40	@ 0x28
 8002896:	dd06      	ble.n	80028a6 <GameLevelUpdate+0x10e>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	699b      	ldr	r3, [r3, #24]
 800289c:	2b30      	cmp	r3, #48	@ 0x30
 800289e:	dc02      	bgt.n	80028a6 <GameLevelUpdate+0x10e>
			g->player.level = 5;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2205      	movs	r2, #5
 80028a4:	615a      	str	r2, [r3, #20]
		if(g->player.gameProgres > 50 && g->player.gameProgres < 59)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	699b      	ldr	r3, [r3, #24]
 80028aa:	2b32      	cmp	r3, #50	@ 0x32
 80028ac:	dd06      	ble.n	80028bc <GameLevelUpdate+0x124>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	699b      	ldr	r3, [r3, #24]
 80028b2:	2b3a      	cmp	r3, #58	@ 0x3a
 80028b4:	dc02      	bgt.n	80028bc <GameLevelUpdate+0x124>
			g->player.level = 6;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2206      	movs	r2, #6
 80028ba:	615a      	str	r2, [r3, #20]
		if(g->player.gameProgres > 60 && g->player.gameProgres < 69)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	699b      	ldr	r3, [r3, #24]
 80028c0:	2b3c      	cmp	r3, #60	@ 0x3c
 80028c2:	dd06      	ble.n	80028d2 <GameLevelUpdate+0x13a>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	699b      	ldr	r3, [r3, #24]
 80028c8:	2b44      	cmp	r3, #68	@ 0x44
 80028ca:	dc02      	bgt.n	80028d2 <GameLevelUpdate+0x13a>
			g->player.level = 7;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2207      	movs	r2, #7
 80028d0:	615a      	str	r2, [r3, #20]
		if(g->player.gameProgres > 70 && g->player.gameProgres < 79)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	699b      	ldr	r3, [r3, #24]
 80028d6:	2b46      	cmp	r3, #70	@ 0x46
 80028d8:	dd06      	ble.n	80028e8 <GameLevelUpdate+0x150>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	699b      	ldr	r3, [r3, #24]
 80028de:	2b4e      	cmp	r3, #78	@ 0x4e
 80028e0:	dc02      	bgt.n	80028e8 <GameLevelUpdate+0x150>
			g->player.level = 8;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2208      	movs	r2, #8
 80028e6:	615a      	str	r2, [r3, #20]
		if(g->player.gameProgres > 80 && g->player.gameProgres < 89)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	699b      	ldr	r3, [r3, #24]
 80028ec:	2b50      	cmp	r3, #80	@ 0x50
 80028ee:	dd06      	ble.n	80028fe <GameLevelUpdate+0x166>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	699b      	ldr	r3, [r3, #24]
 80028f4:	2b58      	cmp	r3, #88	@ 0x58
 80028f6:	dc02      	bgt.n	80028fe <GameLevelUpdate+0x166>
			g->player.level = 9;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2209      	movs	r2, #9
 80028fc:	615a      	str	r2, [r3, #20]
		if(g->player.gameProgres > 90)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	699b      	ldr	r3, [r3, #24]
 8002902:	2b5a      	cmp	r3, #90	@ 0x5a
 8002904:	dd02      	ble.n	800290c <GameLevelUpdate+0x174>
			g->player.level = 10;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	220a      	movs	r2, #10
 800290a:	615a      	str	r2, [r3, #20]

}
 800290c:	bf00      	nop
 800290e:	370c      	adds	r7, #12
 8002910:	46bd      	mov	sp, r7
 8002912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002916:	4770      	bx	lr
 8002918:	20000b39 	.word	0x20000b39

0800291c <GameUpdateBackgrand>:

void GameUpdateBackgrand(GameCtx* g) {
 800291c:	b580      	push	{r7, lr}
 800291e:	b084      	sub	sp, #16
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
	 * Refreshes the background effect, stars.
	 * Moves elements and randomises when a new element have to be added.
	 */
	uint8_t i;

	for(i = 0; i < NUMBER_BACKGROUND; i++)
 8002924:	2300      	movs	r3, #0
 8002926:	73fb      	strb	r3, [r7, #15]
 8002928:	e07c      	b.n	8002a24 <GameUpdateBackgrand+0x108>
	{
		if(g->background[i].active)
 800292a:	7bfa      	ldrb	r2, [r7, #15]
 800292c:	6879      	ldr	r1, [r7, #4]
 800292e:	4613      	mov	r3, r2
 8002930:	009b      	lsls	r3, r3, #2
 8002932:	4413      	add	r3, r2
 8002934:	009b      	lsls	r3, r3, #2
 8002936:	440b      	add	r3, r1
 8002938:	f503 7379 	add.w	r3, r3, #996	@ 0x3e4
 800293c:	781b      	ldrb	r3, [r3, #0]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d06d      	beq.n	8002a1e <GameUpdateBackgrand+0x102>
		{
			g->background[i].nextUpdate -= 1;
 8002942:	7bfa      	ldrb	r2, [r7, #15]
 8002944:	6879      	ldr	r1, [r7, #4]
 8002946:	4613      	mov	r3, r2
 8002948:	009b      	lsls	r3, r3, #2
 800294a:	4413      	add	r3, r2
 800294c:	009b      	lsls	r3, r3, #2
 800294e:	440b      	add	r3, r1
 8002950:	f503 737c 	add.w	r3, r3, #1008	@ 0x3f0
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	7bfa      	ldrb	r2, [r7, #15]
 8002958:	1e59      	subs	r1, r3, #1
 800295a:	6878      	ldr	r0, [r7, #4]
 800295c:	4613      	mov	r3, r2
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	4413      	add	r3, r2
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	4403      	add	r3, r0
 8002966:	f503 737c 	add.w	r3, r3, #1008	@ 0x3f0
 800296a:	6019      	str	r1, [r3, #0]
			if(g->background[i].nextUpdate <= 0)
 800296c:	7bfa      	ldrb	r2, [r7, #15]
 800296e:	6879      	ldr	r1, [r7, #4]
 8002970:	4613      	mov	r3, r2
 8002972:	009b      	lsls	r3, r3, #2
 8002974:	4413      	add	r3, r2
 8002976:	009b      	lsls	r3, r3, #2
 8002978:	440b      	add	r3, r1
 800297a:	f503 737c 	add.w	r3, r3, #1008	@ 0x3f0
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	2b00      	cmp	r3, #0
 8002982:	dc4c      	bgt.n	8002a1e <GameUpdateBackgrand+0x102>
			{
				g->background[i].nextUpdate = g->background[i].updateDelay;
 8002984:	7bf9      	ldrb	r1, [r7, #15]
 8002986:	7bfa      	ldrb	r2, [r7, #15]
 8002988:	6878      	ldr	r0, [r7, #4]
 800298a:	460b      	mov	r3, r1
 800298c:	009b      	lsls	r3, r3, #2
 800298e:	440b      	add	r3, r1
 8002990:	009b      	lsls	r3, r3, #2
 8002992:	4403      	add	r3, r0
 8002994:	f503 737d 	add.w	r3, r3, #1012	@ 0x3f4
 8002998:	6819      	ldr	r1, [r3, #0]
 800299a:	6878      	ldr	r0, [r7, #4]
 800299c:	4613      	mov	r3, r2
 800299e:	009b      	lsls	r3, r3, #2
 80029a0:	4413      	add	r3, r2
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	4403      	add	r3, r0
 80029a6:	f503 737c 	add.w	r3, r3, #1008	@ 0x3f0
 80029aa:	6019      	str	r1, [r3, #0]
				if(g->background[i].active)
 80029ac:	7bfa      	ldrb	r2, [r7, #15]
 80029ae:	6879      	ldr	r1, [r7, #4]
 80029b0:	4613      	mov	r3, r2
 80029b2:	009b      	lsls	r3, r3, #2
 80029b4:	4413      	add	r3, r2
 80029b6:	009b      	lsls	r3, r3, #2
 80029b8:	440b      	add	r3, r1
 80029ba:	f503 7379 	add.w	r3, r3, #996	@ 0x3e4
 80029be:	781b      	ldrb	r3, [r3, #0]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d02c      	beq.n	8002a1e <GameUpdateBackgrand+0x102>
				{
					g->background[i].x -= 1;
 80029c4:	7bfa      	ldrb	r2, [r7, #15]
 80029c6:	6879      	ldr	r1, [r7, #4]
 80029c8:	4613      	mov	r3, r2
 80029ca:	009b      	lsls	r3, r3, #2
 80029cc:	4413      	add	r3, r2
 80029ce:	009b      	lsls	r3, r3, #2
 80029d0:	440b      	add	r3, r1
 80029d2:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	7bfa      	ldrb	r2, [r7, #15]
 80029da:	1e59      	subs	r1, r3, #1
 80029dc:	6878      	ldr	r0, [r7, #4]
 80029de:	4613      	mov	r3, r2
 80029e0:	009b      	lsls	r3, r3, #2
 80029e2:	4413      	add	r3, r2
 80029e4:	009b      	lsls	r3, r3, #2
 80029e6:	4403      	add	r3, r0
 80029e8:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80029ec:	6019      	str	r1, [r3, #0]

					if(g->background[i].x <= -2)
 80029ee:	7bfa      	ldrb	r2, [r7, #15]
 80029f0:	6879      	ldr	r1, [r7, #4]
 80029f2:	4613      	mov	r3, r2
 80029f4:	009b      	lsls	r3, r3, #2
 80029f6:	4413      	add	r3, r2
 80029f8:	009b      	lsls	r3, r3, #2
 80029fa:	440b      	add	r3, r1
 80029fc:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a06:	da0a      	bge.n	8002a1e <GameUpdateBackgrand+0x102>
						g->background[i].active = false;
 8002a08:	7bfa      	ldrb	r2, [r7, #15]
 8002a0a:	6879      	ldr	r1, [r7, #4]
 8002a0c:	4613      	mov	r3, r2
 8002a0e:	009b      	lsls	r3, r3, #2
 8002a10:	4413      	add	r3, r2
 8002a12:	009b      	lsls	r3, r3, #2
 8002a14:	440b      	add	r3, r1
 8002a16:	f503 7379 	add.w	r3, r3, #996	@ 0x3e4
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < NUMBER_BACKGROUND; i++)
 8002a1e:	7bfb      	ldrb	r3, [r7, #15]
 8002a20:	3301      	adds	r3, #1
 8002a22:	73fb      	strb	r3, [r7, #15]
 8002a24:	7bfb      	ldrb	r3, [r7, #15]
 8002a26:	2b4f      	cmp	r3, #79	@ 0x4f
 8002a28:	f67f af7f 	bls.w	800292a <GameUpdateBackgrand+0xe>
				}
			}
		}
	}

	if ((rand()%100) < NUMBER_BACKGROUND_FREQ) 		//Frequency of background additions
 8002a2c:	f005 fec8 	bl	80087c0 <rand>
 8002a30:	4602      	mov	r2, r0
 8002a32:	4b09      	ldr	r3, [pc, #36]	@ (8002a58 <GameUpdateBackgrand+0x13c>)
 8002a34:	fb83 1302 	smull	r1, r3, r3, r2
 8002a38:	1159      	asrs	r1, r3, #5
 8002a3a:	17d3      	asrs	r3, r2, #31
 8002a3c:	1acb      	subs	r3, r1, r3
 8002a3e:	2164      	movs	r1, #100	@ 0x64
 8002a40:	fb01 f303 	mul.w	r3, r1, r3
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	2b0b      	cmp	r3, #11
 8002a48:	dc02      	bgt.n	8002a50 <GameUpdateBackgrand+0x134>
		GameAddBackground(g);//add_background();
 8002a4a:	6878      	ldr	r0, [r7, #4]
 8002a4c:	f000 f806 	bl	8002a5c <GameAddBackground>

}
 8002a50:	bf00      	nop
 8002a52:	3710      	adds	r7, #16
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}
 8002a58:	51eb851f 	.word	0x51eb851f

08002a5c <GameAddBackground>:

void GameAddBackground(GameCtx* g){
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b084      	sub	sp, #16
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
	 * In addition, it sets the random parameters for its
	 * refreshment and a random position on the Y axis.
	 */
	uint8_t i;

	for(i = 0; i < NUMBER_BACKGROUND; i++)
 8002a64:	2300      	movs	r3, #0
 8002a66:	73fb      	strb	r3, [r7, #15]
 8002a68:	e059      	b.n	8002b1e <GameAddBackground+0xc2>
	{
		if(!g->background[i].active)
 8002a6a:	7bfa      	ldrb	r2, [r7, #15]
 8002a6c:	6879      	ldr	r1, [r7, #4]
 8002a6e:	4613      	mov	r3, r2
 8002a70:	009b      	lsls	r3, r3, #2
 8002a72:	4413      	add	r3, r2
 8002a74:	009b      	lsls	r3, r3, #2
 8002a76:	440b      	add	r3, r1
 8002a78:	f503 7379 	add.w	r3, r3, #996	@ 0x3e4
 8002a7c:	781b      	ldrb	r3, [r3, #0]
 8002a7e:	f083 0301 	eor.w	r3, r3, #1
 8002a82:	b2db      	uxtb	r3, r3
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d047      	beq.n	8002b18 <GameAddBackground+0xbc>
		{
			g->background[i].active 		= true;
 8002a88:	7bfa      	ldrb	r2, [r7, #15]
 8002a8a:	6879      	ldr	r1, [r7, #4]
 8002a8c:	4613      	mov	r3, r2
 8002a8e:	009b      	lsls	r3, r3, #2
 8002a90:	4413      	add	r3, r2
 8002a92:	009b      	lsls	r3, r3, #2
 8002a94:	440b      	add	r3, r1
 8002a96:	f503 7379 	add.w	r3, r3, #996	@ 0x3e4
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	701a      	strb	r2, [r3, #0]
			g->background[i].x 				= SCREEN_WIDTH;
 8002a9e:	7bfa      	ldrb	r2, [r7, #15]
 8002aa0:	6879      	ldr	r1, [r7, #4]
 8002aa2:	4613      	mov	r3, r2
 8002aa4:	009b      	lsls	r3, r3, #2
 8002aa6:	4413      	add	r3, r2
 8002aa8:	009b      	lsls	r3, r3, #2
 8002aaa:	440b      	add	r3, r1
 8002aac:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8002ab0:	2280      	movs	r2, #128	@ 0x80
 8002ab2:	601a      	str	r2, [r3, #0]
			g->background[i].y				= (rand()%(SCREEN_HEIGHT-10)) +10;
 8002ab4:	f005 fe84 	bl	80087c0 <rand>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	4b1d      	ldr	r3, [pc, #116]	@ (8002b30 <GameAddBackground+0xd4>)
 8002abc:	fb83 1302 	smull	r1, r3, r3, r2
 8002ac0:	1119      	asrs	r1, r3, #4
 8002ac2:	17d3      	asrs	r3, r2, #31
 8002ac4:	1acb      	subs	r3, r1, r3
 8002ac6:	2176      	movs	r1, #118	@ 0x76
 8002ac8:	fb01 f303 	mul.w	r3, r1, r3
 8002acc:	1ad3      	subs	r3, r2, r3
 8002ace:	7bfa      	ldrb	r2, [r7, #15]
 8002ad0:	f103 010a 	add.w	r1, r3, #10
 8002ad4:	6878      	ldr	r0, [r7, #4]
 8002ad6:	4613      	mov	r3, r2
 8002ad8:	009b      	lsls	r3, r3, #2
 8002ada:	4413      	add	r3, r2
 8002adc:	009b      	lsls	r3, r3, #2
 8002ade:	4403      	add	r3, r0
 8002ae0:	f503 737b 	add.w	r3, r3, #1004	@ 0x3ec
 8002ae4:	6019      	str	r1, [r3, #0]
			g->background[i].updateDelay 	= (rand()%6)+2; // def. (rand()%4)+2;
 8002ae6:	f005 fe6b 	bl	80087c0 <rand>
 8002aea:	4601      	mov	r1, r0
 8002aec:	4b11      	ldr	r3, [pc, #68]	@ (8002b34 <GameAddBackground+0xd8>)
 8002aee:	fb83 3201 	smull	r3, r2, r3, r1
 8002af2:	17cb      	asrs	r3, r1, #31
 8002af4:	1ad2      	subs	r2, r2, r3
 8002af6:	4613      	mov	r3, r2
 8002af8:	005b      	lsls	r3, r3, #1
 8002afa:	4413      	add	r3, r2
 8002afc:	005b      	lsls	r3, r3, #1
 8002afe:	1aca      	subs	r2, r1, r3
 8002b00:	7bf9      	ldrb	r1, [r7, #15]
 8002b02:	3202      	adds	r2, #2
 8002b04:	6878      	ldr	r0, [r7, #4]
 8002b06:	460b      	mov	r3, r1
 8002b08:	009b      	lsls	r3, r3, #2
 8002b0a:	440b      	add	r3, r1
 8002b0c:	009b      	lsls	r3, r3, #2
 8002b0e:	4403      	add	r3, r0
 8002b10:	f503 737d 	add.w	r3, r3, #1012	@ 0x3f4
 8002b14:	601a      	str	r2, [r3, #0]

			break;
 8002b16:	e006      	b.n	8002b26 <GameAddBackground+0xca>
	for(i = 0; i < NUMBER_BACKGROUND; i++)
 8002b18:	7bfb      	ldrb	r3, [r7, #15]
 8002b1a:	3301      	adds	r3, #1
 8002b1c:	73fb      	strb	r3, [r7, #15]
 8002b1e:	7bfb      	ldrb	r3, [r7, #15]
 8002b20:	2b4f      	cmp	r3, #79	@ 0x4f
 8002b22:	d9a2      	bls.n	8002a6a <GameAddBackground+0xe>
		}
	}
}
 8002b24:	bf00      	nop
 8002b26:	bf00      	nop
 8002b28:	3710      	adds	r7, #16
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}
 8002b2e:	bf00      	nop
 8002b30:	22b63cbf 	.word	0x22b63cbf
 8002b34:	2aaaaaab 	.word	0x2aaaaaab

08002b38 <GameAddBonus>:

void GameAddBonus(GameCtx* g, int x, int y){
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b086      	sub	sp, #24
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	60f8      	str	r0, [r7, #12]
 8002b40:	60b9      	str	r1, [r7, #8]
 8002b42:	607a      	str	r2, [r7, #4]
	 */

	uint8_t i;
	int bonus_type;

	for (i = 0; i < NUMBER_BONUS; i++)
 8002b44:	2300      	movs	r3, #0
 8002b46:	75fb      	strb	r3, [r7, #23]
 8002b48:	e07e      	b.n	8002c48 <GameAddBonus+0x110>
	{
		if (!g->bonuses[i].active)
 8002b4a:	7dfa      	ldrb	r2, [r7, #23]
 8002b4c:	68f9      	ldr	r1, [r7, #12]
 8002b4e:	4613      	mov	r3, r2
 8002b50:	00db      	lsls	r3, r3, #3
 8002b52:	1a9b      	subs	r3, r3, r2
 8002b54:	009b      	lsls	r3, r3, #2
 8002b56:	440b      	add	r3, r1
 8002b58:	f503 6324 	add.w	r3, r3, #2624	@ 0xa40
 8002b5c:	781b      	ldrb	r3, [r3, #0]
 8002b5e:	f083 0301 	eor.w	r3, r3, #1
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d06c      	beq.n	8002c42 <GameAddBonus+0x10a>
		{
			g->bonuses[i].active = true;
 8002b68:	7dfa      	ldrb	r2, [r7, #23]
 8002b6a:	68f9      	ldr	r1, [r7, #12]
 8002b6c:	4613      	mov	r3, r2
 8002b6e:	00db      	lsls	r3, r3, #3
 8002b70:	1a9b      	subs	r3, r3, r2
 8002b72:	009b      	lsls	r3, r3, #2
 8002b74:	440b      	add	r3, r1
 8002b76:	f503 6324 	add.w	r3, r3, #2624	@ 0xa40
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	701a      	strb	r2, [r3, #0]
			g->bonuses[i].x = x;
 8002b7e:	7dfa      	ldrb	r2, [r7, #23]
 8002b80:	68f9      	ldr	r1, [r7, #12]
 8002b82:	4613      	mov	r3, r2
 8002b84:	00db      	lsls	r3, r3, #3
 8002b86:	1a9b      	subs	r3, r3, r2
 8002b88:	009b      	lsls	r3, r3, #2
 8002b8a:	440b      	add	r3, r1
 8002b8c:	f603 2344 	addw	r3, r3, #2628	@ 0xa44
 8002b90:	68ba      	ldr	r2, [r7, #8]
 8002b92:	601a      	str	r2, [r3, #0]
			g->bonuses[i].y = y;
 8002b94:	7dfa      	ldrb	r2, [r7, #23]
 8002b96:	68f9      	ldr	r1, [r7, #12]
 8002b98:	4613      	mov	r3, r2
 8002b9a:	00db      	lsls	r3, r3, #3
 8002b9c:	1a9b      	subs	r3, r3, r2
 8002b9e:	009b      	lsls	r3, r3, #2
 8002ba0:	440b      	add	r3, r1
 8002ba2:	f603 2348 	addw	r3, r3, #2632	@ 0xa48
 8002ba6:	687a      	ldr	r2, [r7, #4]
 8002ba8:	601a      	str	r2, [r3, #0]
			g->bonuses[i].updateDelay = 3;
 8002baa:	7dfa      	ldrb	r2, [r7, #23]
 8002bac:	68f9      	ldr	r1, [r7, #12]
 8002bae:	4613      	mov	r3, r2
 8002bb0:	00db      	lsls	r3, r3, #3
 8002bb2:	1a9b      	subs	r3, r3, r2
 8002bb4:	009b      	lsls	r3, r3, #2
 8002bb6:	440b      	add	r3, r1
 8002bb8:	f603 2358 	addw	r3, r3, #2648	@ 0xa58
 8002bbc:	2203      	movs	r2, #3
 8002bbe:	601a      	str	r2, [r3, #0]

			bonus_type = rand()%100;
 8002bc0:	f005 fdfe 	bl	80087c0 <rand>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	4a25      	ldr	r2, [pc, #148]	@ (8002c5c <GameAddBonus+0x124>)
 8002bc8:	fb82 1203 	smull	r1, r2, r2, r3
 8002bcc:	1151      	asrs	r1, r2, #5
 8002bce:	17da      	asrs	r2, r3, #31
 8002bd0:	1a8a      	subs	r2, r1, r2
 8002bd2:	2164      	movs	r1, #100	@ 0x64
 8002bd4:	fb01 f202 	mul.w	r2, r1, r2
 8002bd8:	1a9b      	subs	r3, r3, r2
 8002bda:	613b      	str	r3, [r7, #16]

			if(bonus_type > 30)
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	2b1e      	cmp	r3, #30
 8002be0:	dd15      	ble.n	8002c0e <GameAddBonus+0xd6>
			{
				g->bonuses[i].bitMap = bonus_live_map;
 8002be2:	7dfa      	ldrb	r2, [r7, #23]
 8002be4:	68f9      	ldr	r1, [r7, #12]
 8002be6:	4613      	mov	r3, r2
 8002be8:	00db      	lsls	r3, r3, #3
 8002bea:	1a9b      	subs	r3, r3, r2
 8002bec:	009b      	lsls	r3, r3, #2
 8002bee:	440b      	add	r3, r1
 8002bf0:	f503 6325 	add.w	r3, r3, #2640	@ 0xa50
 8002bf4:	4a1a      	ldr	r2, [pc, #104]	@ (8002c60 <GameAddBonus+0x128>)
 8002bf6:	601a      	str	r2, [r3, #0]
				g->bonuses[i].type = ST_Normal;
 8002bf8:	7dfa      	ldrb	r2, [r7, #23]
 8002bfa:	68f9      	ldr	r1, [r7, #12]
 8002bfc:	4613      	mov	r3, r2
 8002bfe:	00db      	lsls	r3, r3, #3
 8002c00:	1a9b      	subs	r3, r3, r2
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	440b      	add	r3, r1
 8002c06:	f603 234c 	addw	r3, r3, #2636	@ 0xa4c
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	701a      	strb	r2, [r3, #0]
			}
			if(bonus_type < 30)
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	2b1d      	cmp	r3, #29
 8002c12:	dc1e      	bgt.n	8002c52 <GameAddBonus+0x11a>
			{
				g->bonuses[i].bitMap = bonus_tracker_shoot_map;
 8002c14:	7dfa      	ldrb	r2, [r7, #23]
 8002c16:	68f9      	ldr	r1, [r7, #12]
 8002c18:	4613      	mov	r3, r2
 8002c1a:	00db      	lsls	r3, r3, #3
 8002c1c:	1a9b      	subs	r3, r3, r2
 8002c1e:	009b      	lsls	r3, r3, #2
 8002c20:	440b      	add	r3, r1
 8002c22:	f503 6325 	add.w	r3, r3, #2640	@ 0xa50
 8002c26:	4a0f      	ldr	r2, [pc, #60]	@ (8002c64 <GameAddBonus+0x12c>)
 8002c28:	601a      	str	r2, [r3, #0]
				g->bonuses[i].type = ST_Tracker;
 8002c2a:	7dfa      	ldrb	r2, [r7, #23]
 8002c2c:	68f9      	ldr	r1, [r7, #12]
 8002c2e:	4613      	mov	r3, r2
 8002c30:	00db      	lsls	r3, r3, #3
 8002c32:	1a9b      	subs	r3, r3, r2
 8002c34:	009b      	lsls	r3, r3, #2
 8002c36:	440b      	add	r3, r1
 8002c38:	f603 234c 	addw	r3, r3, #2636	@ 0xa4c
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	701a      	strb	r2, [r3, #0]
			}
			return;
 8002c40:	e007      	b.n	8002c52 <GameAddBonus+0x11a>
	for (i = 0; i < NUMBER_BONUS; i++)
 8002c42:	7dfb      	ldrb	r3, [r7, #23]
 8002c44:	3301      	adds	r3, #1
 8002c46:	75fb      	strb	r3, [r7, #23]
 8002c48:	7dfb      	ldrb	r3, [r7, #23]
 8002c4a:	2b02      	cmp	r3, #2
 8002c4c:	f67f af7d 	bls.w	8002b4a <GameAddBonus+0x12>
 8002c50:	e000      	b.n	8002c54 <GameAddBonus+0x11c>
			return;
 8002c52:	bf00      	nop
		}
	}
}
 8002c54:	3718      	adds	r7, #24
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	bf00      	nop
 8002c5c:	51eb851f 	.word	0x51eb851f
 8002c60:	0800ae04 	.word	0x0800ae04
 8002c64:	0800ae0c 	.word	0x0800ae0c

08002c68 <GameUpdateBonus>:

void GameUpdateBonus(GameCtx* g){
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b084      	sub	sp, #16
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
	/*
		 * Checking whether a player has hovered over a bonus.
		 * Moving a bonus on the map
		 * */
		int i = 0;
 8002c70:	2300      	movs	r3, #0
 8002c72:	60fb      	str	r3, [r7, #12]

		//Check duration of st_tracekr if active

		if(g->player.bonusDuration > 0)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6a1b      	ldr	r3, [r3, #32]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	dd04      	ble.n	8002c86 <GameUpdateBonus+0x1e>
			g->player.bonusDuration -= 1;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6a1b      	ldr	r3, [r3, #32]
 8002c80:	1e5a      	subs	r2, r3, #1
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	621a      	str	r2, [r3, #32]
		if(g->player.bonusDuration == 0 && g->player.shootType == ST_Tracker)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6a1b      	ldr	r3, [r3, #32]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d106      	bne.n	8002c9c <GameUpdateBonus+0x34>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	7f1b      	ldrb	r3, [r3, #28]
 8002c92:	2b01      	cmp	r3, #1
 8002c94:	d102      	bne.n	8002c9c <GameUpdateBonus+0x34>
			g->player.shootType = ST_Normal;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	771a      	strb	r2, [r3, #28]

		// Checking whether a player has hovered over a bonus
		for (i = 0; i < NUMBER_BONUS; i++)
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	60fb      	str	r3, [r7, #12]
 8002ca0:	e12f      	b.n	8002f02 <GameUpdateBonus+0x29a>
		{
			if(g->bonuses[i].active)
 8002ca2:	6879      	ldr	r1, [r7, #4]
 8002ca4:	68fa      	ldr	r2, [r7, #12]
 8002ca6:	4613      	mov	r3, r2
 8002ca8:	00db      	lsls	r3, r3, #3
 8002caa:	1a9b      	subs	r3, r3, r2
 8002cac:	009b      	lsls	r3, r3, #2
 8002cae:	440b      	add	r3, r1
 8002cb0:	f503 6324 	add.w	r3, r3, #2624	@ 0xa40
 8002cb4:	781b      	ldrb	r3, [r3, #0]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	f000 8120 	beq.w	8002efc <GameUpdateBonus+0x294>
			{
				g->bonuses[i].nextUpdate -= 1;
 8002cbc:	6879      	ldr	r1, [r7, #4]
 8002cbe:	68fa      	ldr	r2, [r7, #12]
 8002cc0:	4613      	mov	r3, r2
 8002cc2:	00db      	lsls	r3, r3, #3
 8002cc4:	1a9b      	subs	r3, r3, r2
 8002cc6:	009b      	lsls	r3, r3, #2
 8002cc8:	440b      	add	r3, r1
 8002cca:	f603 2354 	addw	r3, r3, #2644	@ 0xa54
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	1e59      	subs	r1, r3, #1
 8002cd2:	6878      	ldr	r0, [r7, #4]
 8002cd4:	68fa      	ldr	r2, [r7, #12]
 8002cd6:	4613      	mov	r3, r2
 8002cd8:	00db      	lsls	r3, r3, #3
 8002cda:	1a9b      	subs	r3, r3, r2
 8002cdc:	009b      	lsls	r3, r3, #2
 8002cde:	4403      	add	r3, r0
 8002ce0:	f603 2354 	addw	r3, r3, #2644	@ 0xa54
 8002ce4:	6019      	str	r1, [r3, #0]
				if(g->bonuses[i].nextUpdate <= 0)
 8002ce6:	6879      	ldr	r1, [r7, #4]
 8002ce8:	68fa      	ldr	r2, [r7, #12]
 8002cea:	4613      	mov	r3, r2
 8002cec:	00db      	lsls	r3, r3, #3
 8002cee:	1a9b      	subs	r3, r3, r2
 8002cf0:	009b      	lsls	r3, r3, #2
 8002cf2:	440b      	add	r3, r1
 8002cf4:	f603 2354 	addw	r3, r3, #2644	@ 0xa54
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	f300 80fe 	bgt.w	8002efc <GameUpdateBonus+0x294>
				{
					if(g->bonuses[i].active)
 8002d00:	6879      	ldr	r1, [r7, #4]
 8002d02:	68fa      	ldr	r2, [r7, #12]
 8002d04:	4613      	mov	r3, r2
 8002d06:	00db      	lsls	r3, r3, #3
 8002d08:	1a9b      	subs	r3, r3, r2
 8002d0a:	009b      	lsls	r3, r3, #2
 8002d0c:	440b      	add	r3, r1
 8002d0e:	f503 6324 	add.w	r3, r3, #2624	@ 0xa40
 8002d12:	781b      	ldrb	r3, [r3, #0]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	f000 80f1 	beq.w	8002efc <GameUpdateBonus+0x294>
					{
						g->bonuses[i].nextUpdate = g->bonuses[i].updateDelay;
 8002d1a:	6879      	ldr	r1, [r7, #4]
 8002d1c:	68fa      	ldr	r2, [r7, #12]
 8002d1e:	4613      	mov	r3, r2
 8002d20:	00db      	lsls	r3, r3, #3
 8002d22:	1a9b      	subs	r3, r3, r2
 8002d24:	009b      	lsls	r3, r3, #2
 8002d26:	440b      	add	r3, r1
 8002d28:	f603 2358 	addw	r3, r3, #2648	@ 0xa58
 8002d2c:	6819      	ldr	r1, [r3, #0]
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	68fa      	ldr	r2, [r7, #12]
 8002d32:	4613      	mov	r3, r2
 8002d34:	00db      	lsls	r3, r3, #3
 8002d36:	1a9b      	subs	r3, r3, r2
 8002d38:	009b      	lsls	r3, r3, #2
 8002d3a:	4403      	add	r3, r0
 8002d3c:	f603 2354 	addw	r3, r3, #2644	@ 0xa54
 8002d40:	6019      	str	r1, [r3, #0]

						if (Colliding(g->bonuses[i].x,g->bonuses[i].y, g->player.x, g->player.y) 	||
 8002d42:	6879      	ldr	r1, [r7, #4]
 8002d44:	68fa      	ldr	r2, [r7, #12]
 8002d46:	4613      	mov	r3, r2
 8002d48:	00db      	lsls	r3, r3, #3
 8002d4a:	1a9b      	subs	r3, r3, r2
 8002d4c:	009b      	lsls	r3, r3, #2
 8002d4e:	440b      	add	r3, r1
 8002d50:	f603 2344 	addw	r3, r3, #2628	@ 0xa44
 8002d54:	6818      	ldr	r0, [r3, #0]
 8002d56:	6879      	ldr	r1, [r7, #4]
 8002d58:	68fa      	ldr	r2, [r7, #12]
 8002d5a:	4613      	mov	r3, r2
 8002d5c:	00db      	lsls	r3, r3, #3
 8002d5e:	1a9b      	subs	r3, r3, r2
 8002d60:	009b      	lsls	r3, r3, #2
 8002d62:	440b      	add	r3, r1
 8002d64:	f603 2348 	addw	r3, r3, #2632	@ 0xa48
 8002d68:	6819      	ldr	r1, [r3, #0]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	f000 fa3f 	bl	80031f4 <Colliding>
 8002d76:	4603      	mov	r3, r0
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d15a      	bne.n	8002e32 <GameUpdateBonus+0x1ca>
							Colliding(g->bonuses[i].x,g->bonuses[i].y, g->player.x, g->player.y+5) 	||
 8002d7c:	6879      	ldr	r1, [r7, #4]
 8002d7e:	68fa      	ldr	r2, [r7, #12]
 8002d80:	4613      	mov	r3, r2
 8002d82:	00db      	lsls	r3, r3, #3
 8002d84:	1a9b      	subs	r3, r3, r2
 8002d86:	009b      	lsls	r3, r3, #2
 8002d88:	440b      	add	r3, r1
 8002d8a:	f603 2344 	addw	r3, r3, #2628	@ 0xa44
 8002d8e:	6818      	ldr	r0, [r3, #0]
 8002d90:	6879      	ldr	r1, [r7, #4]
 8002d92:	68fa      	ldr	r2, [r7, #12]
 8002d94:	4613      	mov	r3, r2
 8002d96:	00db      	lsls	r3, r3, #3
 8002d98:	1a9b      	subs	r3, r3, r2
 8002d9a:	009b      	lsls	r3, r3, #2
 8002d9c:	440b      	add	r3, r1
 8002d9e:	f603 2348 	addw	r3, r3, #2632	@ 0xa48
 8002da2:	6819      	ldr	r1, [r3, #0]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681a      	ldr	r2, [r3, #0]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	3305      	adds	r3, #5
 8002dae:	f000 fa21 	bl	80031f4 <Colliding>
 8002db2:	4603      	mov	r3, r0
						if (Colliding(g->bonuses[i].x,g->bonuses[i].y, g->player.x, g->player.y) 	||
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d13c      	bne.n	8002e32 <GameUpdateBonus+0x1ca>
							Colliding(g->bonuses[i].x,g->bonuses[i].y, g->player.x+7, g->player.y)	||
 8002db8:	6879      	ldr	r1, [r7, #4]
 8002dba:	68fa      	ldr	r2, [r7, #12]
 8002dbc:	4613      	mov	r3, r2
 8002dbe:	00db      	lsls	r3, r3, #3
 8002dc0:	1a9b      	subs	r3, r3, r2
 8002dc2:	009b      	lsls	r3, r3, #2
 8002dc4:	440b      	add	r3, r1
 8002dc6:	f603 2344 	addw	r3, r3, #2628	@ 0xa44
 8002dca:	6818      	ldr	r0, [r3, #0]
 8002dcc:	6879      	ldr	r1, [r7, #4]
 8002dce:	68fa      	ldr	r2, [r7, #12]
 8002dd0:	4613      	mov	r3, r2
 8002dd2:	00db      	lsls	r3, r3, #3
 8002dd4:	1a9b      	subs	r3, r3, r2
 8002dd6:	009b      	lsls	r3, r3, #2
 8002dd8:	440b      	add	r3, r1
 8002dda:	f603 2348 	addw	r3, r3, #2632	@ 0xa48
 8002dde:	6819      	ldr	r1, [r3, #0]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	1dda      	adds	r2, r3, #7
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	f000 fa03 	bl	80031f4 <Colliding>
 8002dee:	4603      	mov	r3, r0
							Colliding(g->bonuses[i].x,g->bonuses[i].y, g->player.x, g->player.y+5) 	||
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d11e      	bne.n	8002e32 <GameUpdateBonus+0x1ca>
							Colliding(g->bonuses[i].x,g->bonuses[i].y, g->player.x+7, g->player.y+5)
 8002df4:	6879      	ldr	r1, [r7, #4]
 8002df6:	68fa      	ldr	r2, [r7, #12]
 8002df8:	4613      	mov	r3, r2
 8002dfa:	00db      	lsls	r3, r3, #3
 8002dfc:	1a9b      	subs	r3, r3, r2
 8002dfe:	009b      	lsls	r3, r3, #2
 8002e00:	440b      	add	r3, r1
 8002e02:	f603 2344 	addw	r3, r3, #2628	@ 0xa44
 8002e06:	6818      	ldr	r0, [r3, #0]
 8002e08:	6879      	ldr	r1, [r7, #4]
 8002e0a:	68fa      	ldr	r2, [r7, #12]
 8002e0c:	4613      	mov	r3, r2
 8002e0e:	00db      	lsls	r3, r3, #3
 8002e10:	1a9b      	subs	r3, r3, r2
 8002e12:	009b      	lsls	r3, r3, #2
 8002e14:	440b      	add	r3, r1
 8002e16:	f603 2348 	addw	r3, r3, #2632	@ 0xa48
 8002e1a:	6819      	ldr	r1, [r3, #0]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	1dda      	adds	r2, r3, #7
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	3305      	adds	r3, #5
 8002e28:	f000 f9e4 	bl	80031f4 <Colliding>
 8002e2c:	4603      	mov	r3, r0
							Colliding(g->bonuses[i].x,g->bonuses[i].y, g->player.x+7, g->player.y)	||
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d037      	beq.n	8002ea2 <GameUpdateBonus+0x23a>
							)
						{
							switch(g->bonuses[i].type)
 8002e32:	6879      	ldr	r1, [r7, #4]
 8002e34:	68fa      	ldr	r2, [r7, #12]
 8002e36:	4613      	mov	r3, r2
 8002e38:	00db      	lsls	r3, r3, #3
 8002e3a:	1a9b      	subs	r3, r3, r2
 8002e3c:	009b      	lsls	r3, r3, #2
 8002e3e:	440b      	add	r3, r1
 8002e40:	f603 234c 	addw	r3, r3, #2636	@ 0xa4c
 8002e44:	781b      	ldrb	r3, [r3, #0]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d002      	beq.n	8002e50 <GameUpdateBonus+0x1e8>
 8002e4a:	2b01      	cmp	r3, #1
 8002e4c:	d011      	beq.n	8002e72 <GameUpdateBonus+0x20a>
 8002e4e:	e028      	b.n	8002ea2 <GameUpdateBonus+0x23a>
							{
							case BT_Live:
								g->player.lives += 1;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	691b      	ldr	r3, [r3, #16]
 8002e54:	1c5a      	adds	r2, r3, #1
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	611a      	str	r2, [r3, #16]
								g->bonuses[i].active = false;
 8002e5a:	6879      	ldr	r1, [r7, #4]
 8002e5c:	68fa      	ldr	r2, [r7, #12]
 8002e5e:	4613      	mov	r3, r2
 8002e60:	00db      	lsls	r3, r3, #3
 8002e62:	1a9b      	subs	r3, r3, r2
 8002e64:	009b      	lsls	r3, r3, #2
 8002e66:	440b      	add	r3, r1
 8002e68:	f503 6324 	add.w	r3, r3, #2624	@ 0xa40
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	701a      	strb	r2, [r3, #0]
								break;
 8002e70:	e017      	b.n	8002ea2 <GameUpdateBonus+0x23a>
							case BT_TrackerShot:
								g->player.shootType = ST_Tracker;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2201      	movs	r2, #1
 8002e76:	771a      	strb	r2, [r3, #28]
								g->player.bonusDuration = BONUS_DURATION + (g->player.level * 50);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	695b      	ldr	r3, [r3, #20]
 8002e7c:	2232      	movs	r2, #50	@ 0x32
 8002e7e:	fb02 f303 	mul.w	r3, r2, r3
 8002e82:	f103 0296 	add.w	r2, r3, #150	@ 0x96
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	621a      	str	r2, [r3, #32]
								g->bonuses[i].active = false;
 8002e8a:	6879      	ldr	r1, [r7, #4]
 8002e8c:	68fa      	ldr	r2, [r7, #12]
 8002e8e:	4613      	mov	r3, r2
 8002e90:	00db      	lsls	r3, r3, #3
 8002e92:	1a9b      	subs	r3, r3, r2
 8002e94:	009b      	lsls	r3, r3, #2
 8002e96:	440b      	add	r3, r1
 8002e98:	f503 6324 	add.w	r3, r3, #2624	@ 0xa40
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	701a      	strb	r2, [r3, #0]
								break;
 8002ea0:	bf00      	nop
							}

						}

						g->bonuses[i].x -= 1;
 8002ea2:	6879      	ldr	r1, [r7, #4]
 8002ea4:	68fa      	ldr	r2, [r7, #12]
 8002ea6:	4613      	mov	r3, r2
 8002ea8:	00db      	lsls	r3, r3, #3
 8002eaa:	1a9b      	subs	r3, r3, r2
 8002eac:	009b      	lsls	r3, r3, #2
 8002eae:	440b      	add	r3, r1
 8002eb0:	f603 2344 	addw	r3, r3, #2628	@ 0xa44
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	1e59      	subs	r1, r3, #1
 8002eb8:	6878      	ldr	r0, [r7, #4]
 8002eba:	68fa      	ldr	r2, [r7, #12]
 8002ebc:	4613      	mov	r3, r2
 8002ebe:	00db      	lsls	r3, r3, #3
 8002ec0:	1a9b      	subs	r3, r3, r2
 8002ec2:	009b      	lsls	r3, r3, #2
 8002ec4:	4403      	add	r3, r0
 8002ec6:	f603 2344 	addw	r3, r3, #2628	@ 0xa44
 8002eca:	6019      	str	r1, [r3, #0]
						if(g->bonuses[i].x <= -2){
 8002ecc:	6879      	ldr	r1, [r7, #4]
 8002ece:	68fa      	ldr	r2, [r7, #12]
 8002ed0:	4613      	mov	r3, r2
 8002ed2:	00db      	lsls	r3, r3, #3
 8002ed4:	1a9b      	subs	r3, r3, r2
 8002ed6:	009b      	lsls	r3, r3, #2
 8002ed8:	440b      	add	r3, r1
 8002eda:	f603 2344 	addw	r3, r3, #2628	@ 0xa44
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ee4:	da0a      	bge.n	8002efc <GameUpdateBonus+0x294>
							g->bonuses[i].active = false;
 8002ee6:	6879      	ldr	r1, [r7, #4]
 8002ee8:	68fa      	ldr	r2, [r7, #12]
 8002eea:	4613      	mov	r3, r2
 8002eec:	00db      	lsls	r3, r3, #3
 8002eee:	1a9b      	subs	r3, r3, r2
 8002ef0:	009b      	lsls	r3, r3, #2
 8002ef2:	440b      	add	r3, r1
 8002ef4:	f503 6324 	add.w	r3, r3, #2624	@ 0xa40
 8002ef8:	2200      	movs	r2, #0
 8002efa:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < NUMBER_BONUS; i++)
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	3301      	adds	r3, #1
 8002f00:	60fb      	str	r3, [r7, #12]
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	2b02      	cmp	r3, #2
 8002f06:	f77f aecc 	ble.w	8002ca2 <GameUpdateBonus+0x3a>
						}
					}
				}
			}
		}
}
 8002f0a:	bf00      	nop
 8002f0c:	bf00      	nop
 8002f0e:	3710      	adds	r7, #16
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}
 8002f14:	0000      	movs	r0, r0
	...

08002f18 <GameShot>:

void GameShot(GameCtx* g){
 8002f18:	b5b0      	push	{r4, r5, r7, lr}
 8002f1a:	b08a      	sub	sp, #40	@ 0x28
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
	/*
		 * Activate the shot in the player's shot table and set the initial parameters.
		 */
		uint8_t i;

		bool is_any_enemies_active = false;
 8002f20:	2300      	movs	r3, #0
 8002f22:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

		int closest_enemy_number;
		double temp_distance;
		double smolest_distance = 500;
 8002f26:	f04f 0200 	mov.w	r2, #0
 8002f2a:	4b8d      	ldr	r3, [pc, #564]	@ (8003160 <GameShot+0x248>)
 8002f2c:	e9c7 2306 	strd	r2, r3, [r7, #24]
		int random_tracking_number;

		for (i = 0; i < NUMBER_SHOTS; ++i)
 8002f30:	2300      	movs	r3, #0
 8002f32:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8002f36:	e105      	b.n	8003144 <GameShot+0x22c>
		{
			if (!g->shots[i].active)
 8002f38:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8002f3c:	6879      	ldr	r1, [r7, #4]
 8002f3e:	4613      	mov	r3, r2
 8002f40:	009b      	lsls	r3, r3, #2
 8002f42:	4413      	add	r3, r2
 8002f44:	009b      	lsls	r3, r3, #2
 8002f46:	440b      	add	r3, r1
 8002f48:	3324      	adds	r3, #36	@ 0x24
 8002f4a:	781b      	ldrb	r3, [r3, #0]
 8002f4c:	f083 0301 	eor.w	r3, r3, #1
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	f000 80f1 	beq.w	800313a <GameShot+0x222>
			{
				g->shots[i].active = true;
 8002f58:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8002f5c:	6879      	ldr	r1, [r7, #4]
 8002f5e:	4613      	mov	r3, r2
 8002f60:	009b      	lsls	r3, r3, #2
 8002f62:	4413      	add	r3, r2
 8002f64:	009b      	lsls	r3, r3, #2
 8002f66:	440b      	add	r3, r1
 8002f68:	3324      	adds	r3, #36	@ 0x24
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	701a      	strb	r2, [r3, #0]
				g->shots[i].x = 11;
 8002f6e:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8002f72:	6879      	ldr	r1, [r7, #4]
 8002f74:	4613      	mov	r3, r2
 8002f76:	009b      	lsls	r3, r3, #2
 8002f78:	4413      	add	r3, r2
 8002f7a:	009b      	lsls	r3, r3, #2
 8002f7c:	440b      	add	r3, r1
 8002f7e:	3328      	adds	r3, #40	@ 0x28
 8002f80:	220b      	movs	r2, #11
 8002f82:	601a      	str	r2, [r3, #0]
				g->shots[i].y = g->player.y + 5;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8002f8c:	1d59      	adds	r1, r3, #5
 8002f8e:	6878      	ldr	r0, [r7, #4]
 8002f90:	4613      	mov	r3, r2
 8002f92:	009b      	lsls	r3, r3, #2
 8002f94:	4413      	add	r3, r2
 8002f96:	009b      	lsls	r3, r3, #2
 8002f98:	4403      	add	r3, r0
 8002f9a:	332c      	adds	r3, #44	@ 0x2c
 8002f9c:	6019      	str	r1, [r3, #0]

				//Setting the type of shot
				switch(g->player.shootType)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	7f1b      	ldrb	r3, [r3, #28]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d002      	beq.n	8002fac <GameShot+0x94>
 8002fa6:	2b01      	cmp	r3, #1
 8002fa8:	d00c      	beq.n	8002fc4 <GameShot+0xac>
						// If you haven't found a target act like a normal shot
						g->shots[i].type = ST_Normal;
					}
					break;
				}
				return;
 8002faa:	e0d0      	b.n	800314e <GameShot+0x236>
					g->shots[i].type = ST_Normal;
 8002fac:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8002fb0:	6879      	ldr	r1, [r7, #4]
 8002fb2:	4613      	mov	r3, r2
 8002fb4:	009b      	lsls	r3, r3, #2
 8002fb6:	4413      	add	r3, r2
 8002fb8:	009b      	lsls	r3, r3, #2
 8002fba:	440b      	add	r3, r1
 8002fbc:	3330      	adds	r3, #48	@ 0x30
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	701a      	strb	r2, [r3, #0]
					break;
 8002fc2:	e0b9      	b.n	8003138 <GameShot+0x220>
					for(int j = 0; j < NUMBER_ENEMIES; j++)
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	617b      	str	r3, [r7, #20]
 8002fc8:	e073      	b.n	80030b2 <GameShot+0x19a>
						if(g->enemies[j].active && !g->enemies[j].trackedByMissile)
 8002fca:	6879      	ldr	r1, [r7, #4]
 8002fcc:	697a      	ldr	r2, [r7, #20]
 8002fce:	4613      	mov	r3, r2
 8002fd0:	00db      	lsls	r3, r3, #3
 8002fd2:	4413      	add	r3, r2
 8002fd4:	009b      	lsls	r3, r3, #2
 8002fd6:	440b      	add	r3, r1
 8002fd8:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 8002fdc:	781b      	ldrb	r3, [r3, #0]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d064      	beq.n	80030ac <GameShot+0x194>
 8002fe2:	6879      	ldr	r1, [r7, #4]
 8002fe4:	697a      	ldr	r2, [r7, #20]
 8002fe6:	4613      	mov	r3, r2
 8002fe8:	00db      	lsls	r3, r3, #3
 8002fea:	4413      	add	r3, r2
 8002fec:	009b      	lsls	r3, r3, #2
 8002fee:	440b      	add	r3, r1
 8002ff0:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8002ff4:	781b      	ldrb	r3, [r3, #0]
 8002ff6:	f083 0301 	eor.w	r3, r3, #1
 8002ffa:	b2db      	uxtb	r3, r3
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d055      	beq.n	80030ac <GameShot+0x194>
							is_any_enemies_active = true;
 8003000:	2301      	movs	r3, #1
 8003002:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
							temp_distance = sqrt(pow(g->enemies[j].x - g->player.x, 2) + pow(g->enemies[j].y - g->player.y, 2));
 8003006:	6879      	ldr	r1, [r7, #4]
 8003008:	697a      	ldr	r2, [r7, #20]
 800300a:	4613      	mov	r3, r2
 800300c:	00db      	lsls	r3, r3, #3
 800300e:	4413      	add	r3, r2
 8003010:	009b      	lsls	r3, r3, #2
 8003012:	440b      	add	r3, r1
 8003014:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8003018:	681a      	ldr	r2, [r3, #0]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	1ad3      	subs	r3, r2, r3
 8003020:	4618      	mov	r0, r3
 8003022:	f7fd fa77 	bl	8000514 <__aeabi_i2d>
 8003026:	4602      	mov	r2, r0
 8003028:	460b      	mov	r3, r1
 800302a:	ed9f 1b4b 	vldr	d1, [pc, #300]	@ 8003158 <GameShot+0x240>
 800302e:	ec43 2b10 	vmov	d0, r2, r3
 8003032:	f006 fba1 	bl	8009778 <pow>
 8003036:	ec55 4b10 	vmov	r4, r5, d0
 800303a:	6879      	ldr	r1, [r7, #4]
 800303c:	697a      	ldr	r2, [r7, #20]
 800303e:	4613      	mov	r3, r2
 8003040:	00db      	lsls	r3, r3, #3
 8003042:	4413      	add	r3, r2
 8003044:	009b      	lsls	r3, r3, #2
 8003046:	440b      	add	r3, r1
 8003048:	f503 7321 	add.w	r3, r3, #644	@ 0x284
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	1ad3      	subs	r3, r2, r3
 8003054:	4618      	mov	r0, r3
 8003056:	f7fd fa5d 	bl	8000514 <__aeabi_i2d>
 800305a:	4602      	mov	r2, r0
 800305c:	460b      	mov	r3, r1
 800305e:	ed9f 1b3e 	vldr	d1, [pc, #248]	@ 8003158 <GameShot+0x240>
 8003062:	ec43 2b10 	vmov	d0, r2, r3
 8003066:	f006 fb87 	bl	8009778 <pow>
 800306a:	ec53 2b10 	vmov	r2, r3, d0
 800306e:	4620      	mov	r0, r4
 8003070:	4629      	mov	r1, r5
 8003072:	f7fd f903 	bl	800027c <__adddf3>
 8003076:	4602      	mov	r2, r0
 8003078:	460b      	mov	r3, r1
 800307a:	ec43 2b17 	vmov	d7, r2, r3
 800307e:	eeb0 0a47 	vmov.f32	s0, s14
 8003082:	eef0 0a67 	vmov.f32	s1, s15
 8003086:	f006 fbe7 	bl	8009858 <sqrt>
 800308a:	ed87 0b02 	vstr	d0, [r7, #8]
							if (temp_distance < smolest_distance)
 800308e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003092:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003096:	f7fd fd19 	bl	8000acc <__aeabi_dcmplt>
 800309a:	4603      	mov	r3, r0
 800309c:	2b00      	cmp	r3, #0
 800309e:	d005      	beq.n	80030ac <GameShot+0x194>
								smolest_distance = temp_distance;
 80030a0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80030a4:	e9c7 2306 	strd	r2, r3, [r7, #24]
								closest_enemy_number = j;
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	623b      	str	r3, [r7, #32]
					for(int j = 0; j < NUMBER_ENEMIES; j++)
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	3301      	adds	r3, #1
 80030b0:	617b      	str	r3, [r7, #20]
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	2b09      	cmp	r3, #9
 80030b6:	dd88      	ble.n	8002fca <GameShot+0xb2>
					if(is_any_enemies_active)
 80030b8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d02f      	beq.n	8003120 <GameShot+0x208>
						random_tracking_number = rand();
 80030c0:	f005 fb7e 	bl	80087c0 <rand>
 80030c4:	6138      	str	r0, [r7, #16]
						g->enemies[closest_enemy_number].trackNumber = random_tracking_number;
 80030c6:	6879      	ldr	r1, [r7, #4]
 80030c8:	6a3a      	ldr	r2, [r7, #32]
 80030ca:	4613      	mov	r3, r2
 80030cc:	00db      	lsls	r3, r3, #3
 80030ce:	4413      	add	r3, r2
 80030d0:	009b      	lsls	r3, r3, #2
 80030d2:	440b      	add	r3, r1
 80030d4:	f503 7327 	add.w	r3, r3, #668	@ 0x29c
 80030d8:	693a      	ldr	r2, [r7, #16]
 80030da:	601a      	str	r2, [r3, #0]
						g->enemies[closest_enemy_number].trackedByMissile = true;
 80030dc:	6879      	ldr	r1, [r7, #4]
 80030de:	6a3a      	ldr	r2, [r7, #32]
 80030e0:	4613      	mov	r3, r2
 80030e2:	00db      	lsls	r3, r3, #3
 80030e4:	4413      	add	r3, r2
 80030e6:	009b      	lsls	r3, r3, #2
 80030e8:	440b      	add	r3, r1
 80030ea:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 80030ee:	2201      	movs	r2, #1
 80030f0:	701a      	strb	r2, [r3, #0]
						g->shots[i].type = ST_Tracker;
 80030f2:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80030f6:	6879      	ldr	r1, [r7, #4]
 80030f8:	4613      	mov	r3, r2
 80030fa:	009b      	lsls	r3, r3, #2
 80030fc:	4413      	add	r3, r2
 80030fe:	009b      	lsls	r3, r3, #2
 8003100:	440b      	add	r3, r1
 8003102:	3330      	adds	r3, #48	@ 0x30
 8003104:	2201      	movs	r2, #1
 8003106:	701a      	strb	r2, [r3, #0]
						g->shots[i].trackNumber = random_tracking_number;
 8003108:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800310c:	6879      	ldr	r1, [r7, #4]
 800310e:	4613      	mov	r3, r2
 8003110:	009b      	lsls	r3, r3, #2
 8003112:	4413      	add	r3, r2
 8003114:	009b      	lsls	r3, r3, #2
 8003116:	440b      	add	r3, r1
 8003118:	3334      	adds	r3, #52	@ 0x34
 800311a:	693a      	ldr	r2, [r7, #16]
 800311c:	601a      	str	r2, [r3, #0]
					break;
 800311e:	e00a      	b.n	8003136 <GameShot+0x21e>
						g->shots[i].type = ST_Normal;
 8003120:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8003124:	6879      	ldr	r1, [r7, #4]
 8003126:	4613      	mov	r3, r2
 8003128:	009b      	lsls	r3, r3, #2
 800312a:	4413      	add	r3, r2
 800312c:	009b      	lsls	r3, r3, #2
 800312e:	440b      	add	r3, r1
 8003130:	3330      	adds	r3, #48	@ 0x30
 8003132:	2200      	movs	r2, #0
 8003134:	701a      	strb	r2, [r3, #0]
					break;
 8003136:	bf00      	nop
				return;
 8003138:	e009      	b.n	800314e <GameShot+0x236>
		for (i = 0; i < NUMBER_SHOTS; ++i)
 800313a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800313e:	3301      	adds	r3, #1
 8003140:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8003144:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003148:	2b18      	cmp	r3, #24
 800314a:	f67f aef5 	bls.w	8002f38 <GameShot+0x20>
			}
		}
}
 800314e:	3728      	adds	r7, #40	@ 0x28
 8003150:	46bd      	mov	sp, r7
 8003152:	bdb0      	pop	{r4, r5, r7, pc}
 8003154:	f3af 8000 	nop.w
 8003158:	00000000 	.word	0x00000000
 800315c:	40000000 	.word	0x40000000
 8003160:	407f4000 	.word	0x407f4000

08003164 <GameShotBoss>:

void GameShotBoss(GameCtx* g){
 8003164:	b480      	push	{r7}
 8003166:	b085      	sub	sp, #20
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
	/*
		 * Handling boss shots.
		 */
		uint8_t i;

		for (i = 0; i < NUMBER_BOSS_SHOTS; ++i)
 800316c:	2300      	movs	r3, #0
 800316e:	73fb      	strb	r3, [r7, #15]
 8003170:	e038      	b.n	80031e4 <GameShotBoss+0x80>
		{
			if (!g->bossShots[i].active)
 8003172:	7bfa      	ldrb	r2, [r7, #15]
 8003174:	6879      	ldr	r1, [r7, #4]
 8003176:	4613      	mov	r3, r2
 8003178:	009b      	lsls	r3, r3, #2
 800317a:	4413      	add	r3, r2
 800317c:	009b      	lsls	r3, r3, #2
 800317e:	440b      	add	r3, r1
 8003180:	f503 7306 	add.w	r3, r3, #536	@ 0x218
 8003184:	781b      	ldrb	r3, [r3, #0]
 8003186:	f083 0301 	eor.w	r3, r3, #1
 800318a:	b2db      	uxtb	r3, r3
 800318c:	2b00      	cmp	r3, #0
 800318e:	d026      	beq.n	80031de <GameShotBoss+0x7a>
			{
				g->bossShots[i].active = true;
 8003190:	7bfa      	ldrb	r2, [r7, #15]
 8003192:	6879      	ldr	r1, [r7, #4]
 8003194:	4613      	mov	r3, r2
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	4413      	add	r3, r2
 800319a:	009b      	lsls	r3, r3, #2
 800319c:	440b      	add	r3, r1
 800319e:	f503 7306 	add.w	r3, r3, #536	@ 0x218
 80031a2:	2201      	movs	r2, #1
 80031a4:	701a      	strb	r2, [r3, #0]
				g->bossShots[i].x = g->boss.x;
 80031a6:	7bfa      	ldrb	r2, [r7, #15]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	f8d3 1a28 	ldr.w	r1, [r3, #2600]	@ 0xa28
 80031ae:	6878      	ldr	r0, [r7, #4]
 80031b0:	4613      	mov	r3, r2
 80031b2:	009b      	lsls	r3, r3, #2
 80031b4:	4413      	add	r3, r2
 80031b6:	009b      	lsls	r3, r3, #2
 80031b8:	4403      	add	r3, r0
 80031ba:	f503 7307 	add.w	r3, r3, #540	@ 0x21c
 80031be:	6019      	str	r1, [r3, #0]
				g->bossShots[i].y = g->boss.y + 5;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	f8d3 3a2c 	ldr.w	r3, [r3, #2604]	@ 0xa2c
 80031c6:	7bfa      	ldrb	r2, [r7, #15]
 80031c8:	1d59      	adds	r1, r3, #5
 80031ca:	6878      	ldr	r0, [r7, #4]
 80031cc:	4613      	mov	r3, r2
 80031ce:	009b      	lsls	r3, r3, #2
 80031d0:	4413      	add	r3, r2
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	4403      	add	r3, r0
 80031d6:	f503 7308 	add.w	r3, r3, #544	@ 0x220
 80031da:	6019      	str	r1, [r3, #0]
				return;
 80031dc:	e005      	b.n	80031ea <GameShotBoss+0x86>
		for (i = 0; i < NUMBER_BOSS_SHOTS; ++i)
 80031de:	7bfb      	ldrb	r3, [r7, #15]
 80031e0:	3301      	adds	r3, #1
 80031e2:	73fb      	strb	r3, [r7, #15]
 80031e4:	7bfb      	ldrb	r3, [r7, #15]
 80031e6:	2b04      	cmp	r3, #4
 80031e8:	d9c3      	bls.n	8003172 <GameShotBoss+0xe>
			}
		}
}
 80031ea:	3714      	adds	r7, #20
 80031ec:	46bd      	mov	sp, r7
 80031ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f2:	4770      	bx	lr

080031f4 <Colliding>:

bool Colliding(int x0, int y0, int x1, int y1){
 80031f4:	b480      	push	{r7}
 80031f6:	b087      	sub	sp, #28
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	60f8      	str	r0, [r7, #12]
 80031fc:	60b9      	str	r1, [r7, #8]
 80031fe:	607a      	str	r2, [r7, #4]
 8003200:	603b      	str	r3, [r7, #0]
	/*
		 * Checking whether objects collide with each other.
		 */
		int dx = abs(x0 - x1);
 8003202:	68fa      	ldr	r2, [r7, #12]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	1ad3      	subs	r3, r2, r3
 8003208:	2b00      	cmp	r3, #0
 800320a:	bfb8      	it	lt
 800320c:	425b      	neglt	r3, r3
 800320e:	617b      	str	r3, [r7, #20]
		int dy = abs(y0 - y1);
 8003210:	68ba      	ldr	r2, [r7, #8]
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	1ad3      	subs	r3, r2, r3
 8003216:	2b00      	cmp	r3, #0
 8003218:	bfb8      	it	lt
 800321a:	425b      	neglt	r3, r3
 800321c:	613b      	str	r3, [r7, #16]
		return dx < 6 && dy < 9;
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	2b05      	cmp	r3, #5
 8003222:	dc04      	bgt.n	800322e <Colliding+0x3a>
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	2b08      	cmp	r3, #8
 8003228:	dc01      	bgt.n	800322e <Colliding+0x3a>
 800322a:	2301      	movs	r3, #1
 800322c:	e000      	b.n	8003230 <Colliding+0x3c>
 800322e:	2300      	movs	r3, #0
 8003230:	f003 0301 	and.w	r3, r3, #1
 8003234:	b2db      	uxtb	r3, r3
}
 8003236:	4618      	mov	r0, r3
 8003238:	371c      	adds	r7, #28
 800323a:	46bd      	mov	sp, r7
 800323c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003240:	4770      	bx	lr
	...

08003244 <GameAddEnemy>:

void GameAddEnemy(GameCtx* g){
 8003244:	b580      	push	{r7, lr}
 8003246:	b084      	sub	sp, #16
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
		 * Setting its initial parameters, i.e. position, refreshment, graphics, type.
		 */
		uint8_t i;
		uint8_t enemy_type;

		for(i = 0; i < g->player.level; i++)
 800324c:	2300      	movs	r3, #0
 800324e:	73fb      	strb	r3, [r7, #15]
 8003250:	e101      	b.n	8003456 <GameAddEnemy+0x212>
		{
			if(!g->enemies[i].active)
 8003252:	7bfa      	ldrb	r2, [r7, #15]
 8003254:	6879      	ldr	r1, [r7, #4]
 8003256:	4613      	mov	r3, r2
 8003258:	00db      	lsls	r3, r3, #3
 800325a:	4413      	add	r3, r2
 800325c:	009b      	lsls	r3, r3, #2
 800325e:	440b      	add	r3, r1
 8003260:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 8003264:	781b      	ldrb	r3, [r3, #0]
 8003266:	f083 0301 	eor.w	r3, r3, #1
 800326a:	b2db      	uxtb	r3, r3
 800326c:	2b00      	cmp	r3, #0
 800326e:	f000 80ef 	beq.w	8003450 <GameAddEnemy+0x20c>
			{
				g->enemies[i].active = true;
 8003272:	7bfa      	ldrb	r2, [r7, #15]
 8003274:	6879      	ldr	r1, [r7, #4]
 8003276:	4613      	mov	r3, r2
 8003278:	00db      	lsls	r3, r3, #3
 800327a:	4413      	add	r3, r2
 800327c:	009b      	lsls	r3, r3, #2
 800327e:	440b      	add	r3, r1
 8003280:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 8003284:	2201      	movs	r2, #1
 8003286:	701a      	strb	r2, [r3, #0]
				g->enemies[i].x = SCREEN_WIDTH + 12;
 8003288:	7bfa      	ldrb	r2, [r7, #15]
 800328a:	6879      	ldr	r1, [r7, #4]
 800328c:	4613      	mov	r3, r2
 800328e:	00db      	lsls	r3, r3, #3
 8003290:	4413      	add	r3, r2
 8003292:	009b      	lsls	r3, r3, #2
 8003294:	440b      	add	r3, r1
 8003296:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 800329a:	228c      	movs	r2, #140	@ 0x8c
 800329c:	601a      	str	r2, [r3, #0]
				g->enemies[i].y = ((rand()%(SCREEN_HEIGHT - 10))+10);
 800329e:	f005 fa8f 	bl	80087c0 <rand>
 80032a2:	4602      	mov	r2, r0
 80032a4:	4b72      	ldr	r3, [pc, #456]	@ (8003470 <GameAddEnemy+0x22c>)
 80032a6:	fb83 1302 	smull	r1, r3, r3, r2
 80032aa:	1119      	asrs	r1, r3, #4
 80032ac:	17d3      	asrs	r3, r2, #31
 80032ae:	1acb      	subs	r3, r1, r3
 80032b0:	2176      	movs	r1, #118	@ 0x76
 80032b2:	fb01 f303 	mul.w	r3, r1, r3
 80032b6:	1ad3      	subs	r3, r2, r3
 80032b8:	7bfa      	ldrb	r2, [r7, #15]
 80032ba:	f103 010a 	add.w	r1, r3, #10
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	4613      	mov	r3, r2
 80032c2:	00db      	lsls	r3, r3, #3
 80032c4:	4413      	add	r3, r2
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	4403      	add	r3, r0
 80032ca:	f503 7321 	add.w	r3, r3, #644	@ 0x284
 80032ce:	6019      	str	r1, [r3, #0]
				g->enemies[i].trackedByMissile = false;
 80032d0:	7bfa      	ldrb	r2, [r7, #15]
 80032d2:	6879      	ldr	r1, [r7, #4]
 80032d4:	4613      	mov	r3, r2
 80032d6:	00db      	lsls	r3, r3, #3
 80032d8:	4413      	add	r3, r2
 80032da:	009b      	lsls	r3, r3, #2
 80032dc:	440b      	add	r3, r1
 80032de:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 80032e2:	2200      	movs	r2, #0
 80032e4:	701a      	strb	r2, [r3, #0]
				g->enemies[i].trackNumber = 0;
 80032e6:	7bfa      	ldrb	r2, [r7, #15]
 80032e8:	6879      	ldr	r1, [r7, #4]
 80032ea:	4613      	mov	r3, r2
 80032ec:	00db      	lsls	r3, r3, #3
 80032ee:	4413      	add	r3, r2
 80032f0:	009b      	lsls	r3, r3, #2
 80032f2:	440b      	add	r3, r1
 80032f4:	f503 7327 	add.w	r3, r3, #668	@ 0x29c
 80032f8:	2200      	movs	r2, #0
 80032fa:	601a      	str	r2, [r3, #0]

				enemy_type = (rand()%100);
 80032fc:	f005 fa60 	bl	80087c0 <rand>
 8003300:	4603      	mov	r3, r0
 8003302:	4a5c      	ldr	r2, [pc, #368]	@ (8003474 <GameAddEnemy+0x230>)
 8003304:	fb82 1203 	smull	r1, r2, r2, r3
 8003308:	1151      	asrs	r1, r2, #5
 800330a:	17da      	asrs	r2, r3, #31
 800330c:	1a8a      	subs	r2, r1, r2
 800330e:	2164      	movs	r1, #100	@ 0x64
 8003310:	fb01 f202 	mul.w	r2, r1, r2
 8003314:	1a9a      	subs	r2, r3, r2
 8003316:	4613      	mov	r3, r2
 8003318:	73bb      	strb	r3, [r7, #14]

				if((enemy_type > 50))
 800331a:	7bbb      	ldrb	r3, [r7, #14]
 800331c:	2b32      	cmp	r3, #50	@ 0x32
 800331e:	d92b      	bls.n	8003378 <GameAddEnemy+0x134>
				{

					g->enemies[i].type = ET_Diver;
 8003320:	7bfa      	ldrb	r2, [r7, #15]
 8003322:	6879      	ldr	r1, [r7, #4]
 8003324:	4613      	mov	r3, r2
 8003326:	00db      	lsls	r3, r3, #3
 8003328:	4413      	add	r3, r2
 800332a:	009b      	lsls	r3, r3, #2
 800332c:	440b      	add	r3, r1
 800332e:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 8003332:	2200      	movs	r2, #0
 8003334:	701a      	strb	r2, [r3, #0]
					g->enemies[i].updateDelay = (rand()%3);	//Speed setting (less = faster)
 8003336:	f005 fa43 	bl	80087c0 <rand>
 800333a:	4601      	mov	r1, r0
 800333c:	7bf8      	ldrb	r0, [r7, #15]
 800333e:	4b4e      	ldr	r3, [pc, #312]	@ (8003478 <GameAddEnemy+0x234>)
 8003340:	fb83 3201 	smull	r3, r2, r3, r1
 8003344:	17cb      	asrs	r3, r1, #31
 8003346:	1ad2      	subs	r2, r2, r3
 8003348:	4613      	mov	r3, r2
 800334a:	005b      	lsls	r3, r3, #1
 800334c:	4413      	add	r3, r2
 800334e:	1aca      	subs	r2, r1, r3
 8003350:	6879      	ldr	r1, [r7, #4]
 8003352:	4603      	mov	r3, r0
 8003354:	00db      	lsls	r3, r3, #3
 8003356:	4403      	add	r3, r0
 8003358:	009b      	lsls	r3, r3, #2
 800335a:	440b      	add	r3, r1
 800335c:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 8003360:	601a      	str	r2, [r3, #0]
					g->enemies[i].bitMap = driver_map;
 8003362:	7bfa      	ldrb	r2, [r7, #15]
 8003364:	6879      	ldr	r1, [r7, #4]
 8003366:	4613      	mov	r3, r2
 8003368:	00db      	lsls	r3, r3, #3
 800336a:	4413      	add	r3, r2
 800336c:	009b      	lsls	r3, r3, #2
 800336e:	440b      	add	r3, r1
 8003370:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 8003374:	4a41      	ldr	r2, [pc, #260]	@ (800347c <GameAddEnemy+0x238>)
 8003376:	601a      	str	r2, [r3, #0]
				}
				if((enemy_type > 20 && enemy_type < 50) && (g->player.level > 4))
 8003378:	7bbb      	ldrb	r3, [r7, #14]
 800337a:	2b14      	cmp	r3, #20
 800337c:	d933      	bls.n	80033e6 <GameAddEnemy+0x1a2>
 800337e:	7bbb      	ldrb	r3, [r7, #14]
 8003380:	2b31      	cmp	r3, #49	@ 0x31
 8003382:	d830      	bhi.n	80033e6 <GameAddEnemy+0x1a2>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	695b      	ldr	r3, [r3, #20]
 8003388:	2b04      	cmp	r3, #4
 800338a:	dd2c      	ble.n	80033e6 <GameAddEnemy+0x1a2>
				{
					g->enemies[i].type = ET_Tracker;
 800338c:	7bfa      	ldrb	r2, [r7, #15]
 800338e:	6879      	ldr	r1, [r7, #4]
 8003390:	4613      	mov	r3, r2
 8003392:	00db      	lsls	r3, r3, #3
 8003394:	4413      	add	r3, r2
 8003396:	009b      	lsls	r3, r3, #2
 8003398:	440b      	add	r3, r1
 800339a:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 800339e:	2201      	movs	r2, #1
 80033a0:	701a      	strb	r2, [r3, #0]
					g->enemies[i].updateDelay = ((rand()%3)+1);
 80033a2:	f005 fa0d 	bl	80087c0 <rand>
 80033a6:	4601      	mov	r1, r0
 80033a8:	4b33      	ldr	r3, [pc, #204]	@ (8003478 <GameAddEnemy+0x234>)
 80033aa:	fb83 3201 	smull	r3, r2, r3, r1
 80033ae:	17cb      	asrs	r3, r1, #31
 80033b0:	1ad2      	subs	r2, r2, r3
 80033b2:	4613      	mov	r3, r2
 80033b4:	005b      	lsls	r3, r3, #1
 80033b6:	4413      	add	r3, r2
 80033b8:	1aca      	subs	r2, r1, r3
 80033ba:	7bf9      	ldrb	r1, [r7, #15]
 80033bc:	3201      	adds	r2, #1
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	460b      	mov	r3, r1
 80033c2:	00db      	lsls	r3, r3, #3
 80033c4:	440b      	add	r3, r1
 80033c6:	009b      	lsls	r3, r3, #2
 80033c8:	4403      	add	r3, r0
 80033ca:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 80033ce:	601a      	str	r2, [r3, #0]
					g->enemies[i].bitMap = tracker_map;
 80033d0:	7bfa      	ldrb	r2, [r7, #15]
 80033d2:	6879      	ldr	r1, [r7, #4]
 80033d4:	4613      	mov	r3, r2
 80033d6:	00db      	lsls	r3, r3, #3
 80033d8:	4413      	add	r3, r2
 80033da:	009b      	lsls	r3, r3, #2
 80033dc:	440b      	add	r3, r1
 80033de:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 80033e2:	4a27      	ldr	r2, [pc, #156]	@ (8003480 <GameAddEnemy+0x23c>)
 80033e4:	601a      	str	r2, [r3, #0]
				}
				if((enemy_type < 20) && (g->player.level > 7))
 80033e6:	7bbb      	ldrb	r3, [r7, #14]
 80033e8:	2b13      	cmp	r3, #19
 80033ea:	d83b      	bhi.n	8003464 <GameAddEnemy+0x220>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	695b      	ldr	r3, [r3, #20]
 80033f0:	2b07      	cmp	r3, #7
 80033f2:	dd37      	ble.n	8003464 <GameAddEnemy+0x220>
				{
					g->enemies[i].type = ET_Bobber;
 80033f4:	7bfa      	ldrb	r2, [r7, #15]
 80033f6:	6879      	ldr	r1, [r7, #4]
 80033f8:	4613      	mov	r3, r2
 80033fa:	00db      	lsls	r3, r3, #3
 80033fc:	4413      	add	r3, r2
 80033fe:	009b      	lsls	r3, r3, #2
 8003400:	440b      	add	r3, r1
 8003402:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 8003406:	2202      	movs	r2, #2
 8003408:	701a      	strb	r2, [r3, #0]
					g->enemies[i].updateDelay = ((rand()%3)+2);
 800340a:	f005 f9d9 	bl	80087c0 <rand>
 800340e:	4601      	mov	r1, r0
 8003410:	4b19      	ldr	r3, [pc, #100]	@ (8003478 <GameAddEnemy+0x234>)
 8003412:	fb83 3201 	smull	r3, r2, r3, r1
 8003416:	17cb      	asrs	r3, r1, #31
 8003418:	1ad2      	subs	r2, r2, r3
 800341a:	4613      	mov	r3, r2
 800341c:	005b      	lsls	r3, r3, #1
 800341e:	4413      	add	r3, r2
 8003420:	1aca      	subs	r2, r1, r3
 8003422:	7bf9      	ldrb	r1, [r7, #15]
 8003424:	3202      	adds	r2, #2
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	460b      	mov	r3, r1
 800342a:	00db      	lsls	r3, r3, #3
 800342c:	440b      	add	r3, r1
 800342e:	009b      	lsls	r3, r3, #2
 8003430:	4403      	add	r3, r0
 8003432:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 8003436:	601a      	str	r2, [r3, #0]
					g->enemies[i].bitMap = bobber_map;
 8003438:	7bfa      	ldrb	r2, [r7, #15]
 800343a:	6879      	ldr	r1, [r7, #4]
 800343c:	4613      	mov	r3, r2
 800343e:	00db      	lsls	r3, r3, #3
 8003440:	4413      	add	r3, r2
 8003442:	009b      	lsls	r3, r3, #2
 8003444:	440b      	add	r3, r1
 8003446:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 800344a:	4a0e      	ldr	r2, [pc, #56]	@ (8003484 <GameAddEnemy+0x240>)
 800344c:	601a      	str	r2, [r3, #0]
				}
				break;
 800344e:	e009      	b.n	8003464 <GameAddEnemy+0x220>
		for(i = 0; i < g->player.level; i++)
 8003450:	7bfb      	ldrb	r3, [r7, #15]
 8003452:	3301      	adds	r3, #1
 8003454:	73fb      	strb	r3, [r7, #15]
 8003456:	7bfa      	ldrb	r2, [r7, #15]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	695b      	ldr	r3, [r3, #20]
 800345c:	429a      	cmp	r2, r3
 800345e:	f6ff aef8 	blt.w	8003252 <GameAddEnemy+0xe>
			}
		}
}
 8003462:	e000      	b.n	8003466 <GameAddEnemy+0x222>
				break;
 8003464:	bf00      	nop
}
 8003466:	bf00      	nop
 8003468:	3710      	adds	r7, #16
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}
 800346e:	bf00      	nop
 8003470:	22b63cbf 	.word	0x22b63cbf
 8003474:	51eb851f 	.word	0x51eb851f
 8003478:	55555556 	.word	0x55555556
 800347c:	0800ad98 	.word	0x0800ad98
 8003480:	0800ad90 	.word	0x0800ad90
 8003484:	0800ada0 	.word	0x0800ada0

08003488 <GameSetState>:

void GameSetState(GameCtx* g, GameState state){
 8003488:	b480      	push	{r7}
 800348a:	b083      	sub	sp, #12
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
 8003490:	460b      	mov	r3, r1
 8003492:	70fb      	strb	r3, [r7, #3]
	/*
	 * Sets the game state in the passed context
	 * */

	g->state = state;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	78fa      	ldrb	r2, [r7, #3]
 8003498:	f883 2a94 	strb.w	r2, [r3, #2708]	@ 0xa94
}
 800349c:	bf00      	nop
 800349e:	370c      	adds	r7, #12
 80034a0:	46bd      	mov	sp, r7
 80034a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a6:	4770      	bx	lr

080034a8 <GameGetState>:

GameState GameGetState(GameCtx* g){
 80034a8:	b480      	push	{r7}
 80034aa:	b083      	sub	sp, #12
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
	/*
	 * Returns the current play status of the passed context.
	 * */

	return g->state;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	f893 3a94 	ldrb.w	r3, [r3, #2708]	@ 0xa94
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	370c      	adds	r7, #12
 80034ba:	46bd      	mov	sp, r7
 80034bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c0:	4770      	bx	lr

080034c2 <GameGetPalyerScore>:

int GameGetPalyerScore(GameCtx* g){
 80034c2:	b480      	push	{r7}
 80034c4:	b083      	sub	sp, #12
 80034c6:	af00      	add	r7, sp, #0
 80034c8:	6078      	str	r0, [r7, #4]
	/*
	 * Returns the player's current score from the passed context.
	 * */

	return g->player.score;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	689b      	ldr	r3, [r3, #8]
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	370c      	adds	r7, #12
 80034d2:	46bd      	mov	sp, r7
 80034d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d8:	4770      	bx	lr
	...

080034dc <InputInit>:

/*
 * @brief Assignment of input data
 *
 */
void InputInit(ADC_HandleTypeDef* hadc, GPIO_TypeDef* btnPort, uint16_t btnPin){
 80034dc:	b480      	push	{r7}
 80034de:	b085      	sub	sp, #20
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	60f8      	str	r0, [r7, #12]
 80034e4:	60b9      	str	r1, [r7, #8]
 80034e6:	4613      	mov	r3, r2
 80034e8:	80fb      	strh	r3, [r7, #6]

	_hadc = hadc;
 80034ea:	4a07      	ldr	r2, [pc, #28]	@ (8003508 <InputInit+0x2c>)
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	6013      	str	r3, [r2, #0]
	_btnPort = btnPort;
 80034f0:	4a06      	ldr	r2, [pc, #24]	@ (800350c <InputInit+0x30>)
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	6013      	str	r3, [r2, #0]
	_btnPin = btnPin;
 80034f6:	4a06      	ldr	r2, [pc, #24]	@ (8003510 <InputInit+0x34>)
 80034f8:	88fb      	ldrh	r3, [r7, #6]
 80034fa:	8013      	strh	r3, [r2, #0]
}
 80034fc:	bf00      	nop
 80034fe:	3714      	adds	r7, #20
 8003500:	46bd      	mov	sp, r7
 8003502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003506:	4770      	bx	lr
 8003508:	20000b3c 	.word	0x20000b3c
 800350c:	20000b40 	.word	0x20000b40
 8003510:	20000b44 	.word	0x20000b44

08003514 <InputRead>:

/*
 * @brief Reading and returning current states
 */
InputSnapshot InputRead (void){
 8003514:	b580      	push	{r7, lr}
 8003516:	b084      	sub	sp, #16
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]

	InputSnapshot snap;
	snap.joystickYValue = HAL_ADC_GetValue(_hadc);
 800351c:	4b17      	ldr	r3, [pc, #92]	@ (800357c <InputRead+0x68>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4618      	mov	r0, r3
 8003522:	f001 fcb6 	bl	8004e92 <HAL_ADC_GetValue>
 8003526:	4603      	mov	r3, r0
 8003528:	60bb      	str	r3, [r7, #8]

	// Removal of button repetition
	_curentBtnState = HAL_GPIO_ReadPin(_btnPort, _btnPin);
 800352a:	4b15      	ldr	r3, [pc, #84]	@ (8003580 <InputRead+0x6c>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a15      	ldr	r2, [pc, #84]	@ (8003584 <InputRead+0x70>)
 8003530:	8812      	ldrh	r2, [r2, #0]
 8003532:	4611      	mov	r1, r2
 8003534:	4618      	mov	r0, r3
 8003536:	f002 fec1 	bl	80062bc <HAL_GPIO_ReadPin>
 800353a:	4603      	mov	r3, r0
 800353c:	461a      	mov	r2, r3
 800353e:	4b12      	ldr	r3, [pc, #72]	@ (8003588 <InputRead+0x74>)
 8003540:	701a      	strb	r2, [r3, #0]

	if(_curentBtnState && !_lastBtnState){
 8003542:	4b11      	ldr	r3, [pc, #68]	@ (8003588 <InputRead+0x74>)
 8003544:	781b      	ldrb	r3, [r3, #0]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d006      	beq.n	8003558 <InputRead+0x44>
 800354a:	4b10      	ldr	r3, [pc, #64]	@ (800358c <InputRead+0x78>)
 800354c:	781b      	ldrb	r3, [r3, #0]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d102      	bne.n	8003558 <InputRead+0x44>
		snap.btn1State = GPIO_PIN_SET;
 8003552:	2301      	movs	r3, #1
 8003554:	733b      	strb	r3, [r7, #12]
 8003556:	e001      	b.n	800355c <InputRead+0x48>
	} else {
		snap.btn1State = GPIO_PIN_RESET;
 8003558:	2300      	movs	r3, #0
 800355a:	733b      	strb	r3, [r7, #12]
	}
	_lastBtnState = _curentBtnState;
 800355c:	4b0a      	ldr	r3, [pc, #40]	@ (8003588 <InputRead+0x74>)
 800355e:	781a      	ldrb	r2, [r3, #0]
 8003560:	4b0a      	ldr	r3, [pc, #40]	@ (800358c <InputRead+0x78>)
 8003562:	701a      	strb	r2, [r3, #0]

	return snap;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	461a      	mov	r2, r3
 8003568:	f107 0308 	add.w	r3, r7, #8
 800356c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003570:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8003574:	6878      	ldr	r0, [r7, #4]
 8003576:	3710      	adds	r7, #16
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}
 800357c:	20000b3c 	.word	0x20000b3c
 8003580:	20000b40 	.word	0x20000b40
 8003584:	20000b44 	.word	0x20000b44
 8003588:	20000b46 	.word	0x20000b46
 800358c:	20000001 	.word	0x20000001

08003590 <itoa>:
* \param [in] base the base of conversion
* \return pointer to \em buffer
*//*-------------------------------------------------------------------------*/

char* itoa(int value, char* buffer, int base)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b088      	sub	sp, #32
 8003594:	af00      	add	r7, sp, #0
 8003596:	60f8      	str	r0, [r7, #12]
 8003598:	60b9      	str	r1, [r7, #8]
 800359a:	607a      	str	r2, [r7, #4]
	static const char digits[]="0123456789abcdef";

	char* buffer_copy=buffer;
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	61bb      	str	r3, [r7, #24]
	int32_t sign=0;
 80035a0:	2300      	movs	r3, #0
 80035a2:	61fb      	str	r3, [r7, #28]
	int32_t quot,rem;

	if ((base>=2)&&(base<=16))				// is the base valid?
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2b01      	cmp	r3, #1
 80035a8:	dd36      	ble.n	8003618 <itoa+0x88>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2b10      	cmp	r3, #16
 80035ae:	dc33      	bgt.n	8003618 <itoa+0x88>
	{
		if (base == 10 && (sign = value) < 0)// negative value and base == 10? store the copy (sign)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2b0a      	cmp	r3, #10
 80035b4:	d107      	bne.n	80035c6 <itoa+0x36>
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	61fb      	str	r3, [r7, #28]
 80035ba:	69fb      	ldr	r3, [r7, #28]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	da02      	bge.n	80035c6 <itoa+0x36>
			value = -value;					// make it positive
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	425b      	negs	r3, r3
 80035c4:	60fb      	str	r3, [r7, #12]

		do
		{
			quot=value/base;				// calculate quotient and remainder
 80035c6:	68fa      	ldr	r2, [r7, #12]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	fb92 f3f3 	sdiv	r3, r2, r3
 80035ce:	617b      	str	r3, [r7, #20]
			rem=value%base;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	687a      	ldr	r2, [r7, #4]
 80035d4:	fb93 f2f2 	sdiv	r2, r3, r2
 80035d8:	6879      	ldr	r1, [r7, #4]
 80035da:	fb01 f202 	mul.w	r2, r1, r2
 80035de:	1a9b      	subs	r3, r3, r2
 80035e0:	613b      	str	r3, [r7, #16]
			*buffer++ = digits[rem];		// append the remainder to the string
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	1c5a      	adds	r2, r3, #1
 80035e6:	60ba      	str	r2, [r7, #8]
 80035e8:	490f      	ldr	r1, [pc, #60]	@ (8003628 <itoa+0x98>)
 80035ea:	693a      	ldr	r2, [r7, #16]
 80035ec:	440a      	add	r2, r1
 80035ee:	7812      	ldrb	r2, [r2, #0]
 80035f0:	701a      	strb	r2, [r3, #0]
		} while ((value=quot));				// loop while there is something to convert
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	60fb      	str	r3, [r7, #12]
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d1e4      	bne.n	80035c6 <itoa+0x36>

		if (sign<0)							// was the value negative?
 80035fc:	69fb      	ldr	r3, [r7, #28]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	da04      	bge.n	800360c <itoa+0x7c>
			*buffer++='-';					// append the sign
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	1c5a      	adds	r2, r3, #1
 8003606:	60ba      	str	r2, [r7, #8]
 8003608:	222d      	movs	r2, #45	@ 0x2d
 800360a:	701a      	strb	r2, [r3, #0]

		__reverse(buffer_copy,buffer-1);		// reverse the string
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	3b01      	subs	r3, #1
 8003610:	4619      	mov	r1, r3
 8003612:	69b8      	ldr	r0, [r7, #24]
 8003614:	f000 f80a 	bl	800362c <__reverse>
	}

	*buffer='\0';
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	2200      	movs	r2, #0
 800361c:	701a      	strb	r2, [r3, #0]
	return buffer_copy;
 800361e:	69bb      	ldr	r3, [r7, #24]
}
 8003620:	4618      	mov	r0, r3
 8003622:	3720      	adds	r7, #32
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}
 8003628:	0800ae14 	.word	0x0800ae14

0800362c <__reverse>:
* \param [in,out] begin pointer to the beginning of the string
* \param [in,out] end pointer to the end of the string
*//*-------------------------------------------------------------------------*/

static void __reverse(char* begin,char* end)
{
 800362c:	b480      	push	{r7}
 800362e:	b085      	sub	sp, #20
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
 8003634:	6039      	str	r1, [r7, #0]
	char temp;

	while (end>begin)
 8003636:	e00d      	b.n	8003654 <__reverse+0x28>
	{
		temp=*end;
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	781b      	ldrb	r3, [r3, #0]
 800363c:	73fb      	strb	r3, [r7, #15]
		*end--=*begin;
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	1e5a      	subs	r2, r3, #1
 8003642:	603a      	str	r2, [r7, #0]
 8003644:	687a      	ldr	r2, [r7, #4]
 8003646:	7812      	ldrb	r2, [r2, #0]
 8003648:	701a      	strb	r2, [r3, #0]
		*begin++=temp;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	1c5a      	adds	r2, r3, #1
 800364e:	607a      	str	r2, [r7, #4]
 8003650:	7bfa      	ldrb	r2, [r7, #15]
 8003652:	701a      	strb	r2, [r3, #0]
	while (end>begin)
 8003654:	683a      	ldr	r2, [r7, #0]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	429a      	cmp	r2, r3
 800365a:	d8ed      	bhi.n	8003638 <__reverse+0xc>
	}
}
 800365c:	bf00      	nop
 800365e:	bf00      	nop
 8003660:	3714      	adds	r7, #20
 8003662:	46bd      	mov	sp, r7
 8003664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003668:	4770      	bx	lr
	...

0800366c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800366c:	b590      	push	{r4, r7, lr}
 800366e:	b083      	sub	sp, #12
 8003670:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003672:	f000 fff6 	bl	8004662 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003676:	f000 f8d3 	bl	8003820 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800367a:	f000 fa3f 	bl	8003afc <MX_GPIO_Init>
  MX_DMA_Init();
 800367e:	f000 fa25 	bl	8003acc <MX_DMA_Init>
  MX_ADC1_Init();
 8003682:	f000 f94b 	bl	800391c <MX_ADC1_Init>
  MX_SPI1_Init();
 8003686:	f000 f9ad 	bl	80039e4 <MX_SPI1_Init>
  MX_TIM6_Init();
 800368a:	f000 f9e9 	bl	8003a60 <MX_TIM6_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 800368e:	f000 f929 	bl	80038e4 <MX_NVIC_Init>

//  // Konfiguracja ADC z DMA
//  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
//  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)value, 2);

  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8003692:	217f      	movs	r1, #127	@ 0x7f
 8003694:	485b      	ldr	r0, [pc, #364]	@ (8003804 <main+0x198>)
 8003696:	f002 f8fd 	bl	8005894 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start(&hadc1);
 800369a:	485a      	ldr	r0, [pc, #360]	@ (8003804 <main+0x198>)
 800369c:	f001 fb96 	bl	8004dcc <HAL_ADC_Start>
  HAL_TIM_Base_Start_IT(&htim6);
 80036a0:	4859      	ldr	r0, [pc, #356]	@ (8003808 <main+0x19c>)
 80036a2:	f004 fe15 	bl	80082d0 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  SSD1327_SpiInit(&hspi1);
 80036a6:	4859      	ldr	r0, [pc, #356]	@ (800380c <main+0x1a0>)
 80036a8:	f000 fbf8 	bl	8003e9c <SSD1327_SpiInit>
  SSD1327_CLR();
 80036ac:	f000 fc7e 	bl	8003fac <SSD1327_CLR>
  SSD1327_Display();
 80036b0:	f000 fc76 	bl	8003fa0 <SSD1327_Display>

  //start_game();
  GameInit(&g_singleton);
 80036b4:	4856      	ldr	r0, [pc, #344]	@ (8003810 <main+0x1a4>)
 80036b6:	f7fd fda4 	bl	8001202 <GameInit>
  InputInit(&hadc1, USER_BTN_1_GPIO_Port, USER_BTN_1_Pin);
 80036ba:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80036be:	f04f 4190 	mov.w	r1, #1207959552	@ 0x48000000
 80036c2:	4850      	ldr	r0, [pc, #320]	@ (8003804 <main+0x198>)
 80036c4:	f7ff ff0a 	bl	80034dc <InputInit>
  //add_enemy();

  while (1)
  {

	  switch(GameGetState(&g_singleton)){
 80036c8:	4851      	ldr	r0, [pc, #324]	@ (8003810 <main+0x1a4>)
 80036ca:	f7ff feed 	bl	80034a8 <GameGetState>
 80036ce:	4603      	mov	r3, r0
 80036d0:	2b02      	cmp	r3, #2
 80036d2:	d063      	beq.n	800379c <main+0x130>
 80036d4:	2b02      	cmp	r3, #2
 80036d6:	dcf7      	bgt.n	80036c8 <main+0x5c>
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d002      	beq.n	80036e2 <main+0x76>
 80036dc:	2b01      	cmp	r3, #1
 80036de:	d02e      	beq.n	800373e <main+0xd2>
 80036e0:	e08f      	b.n	8003802 <main+0x196>

	  case GS_Menu:
		  if(g_logicTick){
 80036e2:	4b4c      	ldr	r3, [pc, #304]	@ (8003814 <main+0x1a8>)
 80036e4:	781b      	ldrb	r3, [r3, #0]
 80036e6:	b2db      	uxtb	r3, r3
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d010      	beq.n	800370e <main+0xa2>
			  g_logicTick = false;
 80036ec:	4b49      	ldr	r3, [pc, #292]	@ (8003814 <main+0x1a8>)
 80036ee:	2200      	movs	r2, #0
 80036f0:	701a      	strb	r2, [r3, #0]
			  input_Snap = InputRead();
 80036f2:	4c49      	ldr	r4, [pc, #292]	@ (8003818 <main+0x1ac>)
 80036f4:	463b      	mov	r3, r7
 80036f6:	4618      	mov	r0, r3
 80036f8:	f7ff ff0c 	bl	8003514 <InputRead>
 80036fc:	4622      	mov	r2, r4
 80036fe:	463b      	mov	r3, r7
 8003700:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003704:	e882 0003 	stmia.w	r2, {r0, r1}
			  RunMenuTick(&input_Snap);
 8003708:	4843      	ldr	r0, [pc, #268]	@ (8003818 <main+0x1ac>)
 800370a:	f000 fb53 	bl	8003db4 <RunMenuTick>
		  }

		  if(g_renderTick && !SSD1327_IsBusy()){
 800370e:	4b43      	ldr	r3, [pc, #268]	@ (800381c <main+0x1b0>)
 8003710:	781b      	ldrb	r3, [r3, #0]
 8003712:	b2db      	uxtb	r3, r3
 8003714:	2b00      	cmp	r3, #0
 8003716:	d06f      	beq.n	80037f8 <main+0x18c>
 8003718:	f000 fc64 	bl	8003fe4 <SSD1327_IsBusy>
 800371c:	4603      	mov	r3, r0
 800371e:	f083 0301 	eor.w	r3, r3, #1
 8003722:	b2db      	uxtb	r3, r3
 8003724:	2b00      	cmp	r3, #0
 8003726:	d067      	beq.n	80037f8 <main+0x18c>
			  g_renderTick = false;
 8003728:	4b3c      	ldr	r3, [pc, #240]	@ (800381c <main+0x1b0>)
 800372a:	2200      	movs	r2, #0
 800372c:	701a      	strb	r2, [r3, #0]

			  SSD1327_BeginFrame();
 800372e:	f000 fc4b 	bl	8003fc8 <SSD1327_BeginFrame>
			  RunMenu(&input_Snap);
 8003732:	4839      	ldr	r0, [pc, #228]	@ (8003818 <main+0x1ac>)
 8003734:	f000 fafa 	bl	8003d2c <RunMenu>
			  SSD1327_Present();
 8003738:	f000 fc96 	bl	8004068 <SSD1327_Present>
		  }
		  break;
 800373c:	e05c      	b.n	80037f8 <main+0x18c>

	  case GS_Playing:
		  if(g_logicTick){
 800373e:	4b35      	ldr	r3, [pc, #212]	@ (8003814 <main+0x1a8>)
 8003740:	781b      	ldrb	r3, [r3, #0]
 8003742:	b2db      	uxtb	r3, r3
 8003744:	2b00      	cmp	r3, #0
 8003746:	d011      	beq.n	800376c <main+0x100>
			  g_logicTick = false;
 8003748:	4b32      	ldr	r3, [pc, #200]	@ (8003814 <main+0x1a8>)
 800374a:	2200      	movs	r2, #0
 800374c:	701a      	strb	r2, [r3, #0]
			  input_Snap = InputRead();
 800374e:	4c32      	ldr	r4, [pc, #200]	@ (8003818 <main+0x1ac>)
 8003750:	463b      	mov	r3, r7
 8003752:	4618      	mov	r0, r3
 8003754:	f7ff fede 	bl	8003514 <InputRead>
 8003758:	4622      	mov	r2, r4
 800375a:	463b      	mov	r3, r7
 800375c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003760:	e882 0003 	stmia.w	r2, {r0, r1}
			  RunGameTick(&input_Snap, &g_singleton);
 8003764:	492a      	ldr	r1, [pc, #168]	@ (8003810 <main+0x1a4>)
 8003766:	482c      	ldr	r0, [pc, #176]	@ (8003818 <main+0x1ac>)
 8003768:	f000 faca 	bl	8003d00 <RunGameTick>
		  }

		  if(g_renderTick && !SSD1327_IsBusy()){
 800376c:	4b2b      	ldr	r3, [pc, #172]	@ (800381c <main+0x1b0>)
 800376e:	781b      	ldrb	r3, [r3, #0]
 8003770:	b2db      	uxtb	r3, r3
 8003772:	2b00      	cmp	r3, #0
 8003774:	d042      	beq.n	80037fc <main+0x190>
 8003776:	f000 fc35 	bl	8003fe4 <SSD1327_IsBusy>
 800377a:	4603      	mov	r3, r0
 800377c:	f083 0301 	eor.w	r3, r3, #1
 8003780:	b2db      	uxtb	r3, r3
 8003782:	2b00      	cmp	r3, #0
 8003784:	d03a      	beq.n	80037fc <main+0x190>
			  g_renderTick = false;
 8003786:	4b25      	ldr	r3, [pc, #148]	@ (800381c <main+0x1b0>)
 8003788:	2200      	movs	r2, #0
 800378a:	701a      	strb	r2, [r3, #0]

			  SSD1327_BeginFrame();
 800378c:	f000 fc1c 	bl	8003fc8 <SSD1327_BeginFrame>
			  RunGame(&input_Snap);
 8003790:	4821      	ldr	r0, [pc, #132]	@ (8003818 <main+0x1ac>)
 8003792:	f000 faa7 	bl	8003ce4 <RunGame>
			  SSD1327_Present();
 8003796:	f000 fc67 	bl	8004068 <SSD1327_Present>
		  }

		  break;
 800379a:	e02f      	b.n	80037fc <main+0x190>

	  case GS_Dead:
		  if(g_logicTick){
 800379c:	4b1d      	ldr	r3, [pc, #116]	@ (8003814 <main+0x1a8>)
 800379e:	781b      	ldrb	r3, [r3, #0]
 80037a0:	b2db      	uxtb	r3, r3
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d010      	beq.n	80037c8 <main+0x15c>
			  g_logicTick = false;
 80037a6:	4b1b      	ldr	r3, [pc, #108]	@ (8003814 <main+0x1a8>)
 80037a8:	2200      	movs	r2, #0
 80037aa:	701a      	strb	r2, [r3, #0]
			  input_Snap = InputRead();
 80037ac:	4c1a      	ldr	r4, [pc, #104]	@ (8003818 <main+0x1ac>)
 80037ae:	463b      	mov	r3, r7
 80037b0:	4618      	mov	r0, r3
 80037b2:	f7ff feaf 	bl	8003514 <InputRead>
 80037b6:	4622      	mov	r2, r4
 80037b8:	463b      	mov	r3, r7
 80037ba:	e893 0003 	ldmia.w	r3, {r0, r1}
 80037be:	e882 0003 	stmia.w	r2, {r0, r1}
			  RunDeadTick(&input_Snap);
 80037c2:	4815      	ldr	r0, [pc, #84]	@ (8003818 <main+0x1ac>)
 80037c4:	f000 fa52 	bl	8003c6c <RunDeadTick>
		  }

		  if(g_renderTick && !SSD1327_IsBusy()){
 80037c8:	4b14      	ldr	r3, [pc, #80]	@ (800381c <main+0x1b0>)
 80037ca:	781b      	ldrb	r3, [r3, #0]
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d016      	beq.n	8003800 <main+0x194>
 80037d2:	f000 fc07 	bl	8003fe4 <SSD1327_IsBusy>
 80037d6:	4603      	mov	r3, r0
 80037d8:	f083 0301 	eor.w	r3, r3, #1
 80037dc:	b2db      	uxtb	r3, r3
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d00e      	beq.n	8003800 <main+0x194>
			  g_renderTick = false;
 80037e2:	4b0e      	ldr	r3, [pc, #56]	@ (800381c <main+0x1b0>)
 80037e4:	2200      	movs	r2, #0
 80037e6:	701a      	strb	r2, [r3, #0]

			  SSD1327_BeginFrame();
 80037e8:	f000 fbee 	bl	8003fc8 <SSD1327_BeginFrame>
			  RunDead(&input_Snap);
 80037ec:	480a      	ldr	r0, [pc, #40]	@ (8003818 <main+0x1ac>)
 80037ee:	f000 f9f5 	bl	8003bdc <RunDead>
			  SSD1327_Present();
 80037f2:	f000 fc39 	bl	8004068 <SSD1327_Present>
		  }

		  break;
 80037f6:	e003      	b.n	8003800 <main+0x194>
		  break;
 80037f8:	bf00      	nop
 80037fa:	e765      	b.n	80036c8 <main+0x5c>
		  break;
 80037fc:	bf00      	nop
 80037fe:	e763      	b.n	80036c8 <main+0x5c>
		  break;
 8003800:	bf00      	nop
	  switch(GameGetState(&g_singleton)){
 8003802:	e761      	b.n	80036c8 <main+0x5c>
 8003804:	20000b48 	.word	0x20000b48
 8003808:	20000c58 	.word	0x20000c58
 800380c:	20000bac 	.word	0x20000bac
 8003810:	200000a0 	.word	0x200000a0
 8003814:	20000cac 	.word	0x20000cac
 8003818:	20000ca4 	.word	0x20000ca4
 800381c:	20000cad 	.word	0x20000cad

08003820 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b096      	sub	sp, #88	@ 0x58
 8003824:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003826:	f107 0314 	add.w	r3, r7, #20
 800382a:	2244      	movs	r2, #68	@ 0x44
 800382c:	2100      	movs	r1, #0
 800382e:	4618      	mov	r0, r3
 8003830:	f005 f909 	bl	8008a46 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003834:	463b      	mov	r3, r7
 8003836:	2200      	movs	r2, #0
 8003838:	601a      	str	r2, [r3, #0]
 800383a:	605a      	str	r2, [r3, #4]
 800383c:	609a      	str	r2, [r3, #8]
 800383e:	60da      	str	r2, [r3, #12]
 8003840:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8003842:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8003846:	f002 fd87 	bl	8006358 <HAL_PWREx_ControlVoltageScaling>
 800384a:	4603      	mov	r3, r0
 800384c:	2b00      	cmp	r3, #0
 800384e:	d001      	beq.n	8003854 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8003850:	f000 fae2 	bl	8003e18 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8003854:	f002 fd62 	bl	800631c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8003858:	4b21      	ldr	r3, [pc, #132]	@ (80038e0 <SystemClock_Config+0xc0>)
 800385a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800385e:	4a20      	ldr	r2, [pc, #128]	@ (80038e0 <SystemClock_Config+0xc0>)
 8003860:	f023 0318 	bic.w	r3, r3, #24
 8003864:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8003868:	2314      	movs	r3, #20
 800386a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800386c:	2301      	movs	r3, #1
 800386e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8003870:	2301      	movs	r3, #1
 8003872:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8003874:	2300      	movs	r3, #0
 8003876:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8003878:	2360      	movs	r3, #96	@ 0x60
 800387a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800387c:	2302      	movs	r3, #2
 800387e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8003880:	2301      	movs	r3, #1
 8003882:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8003884:	2301      	movs	r3, #1
 8003886:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8003888:	2328      	movs	r3, #40	@ 0x28
 800388a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800388c:	2307      	movs	r3, #7
 800388e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003890:	2302      	movs	r3, #2
 8003892:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003894:	2302      	movs	r3, #2
 8003896:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003898:	f107 0314 	add.w	r3, r7, #20
 800389c:	4618      	mov	r0, r3
 800389e:	f002 fdb1 	bl	8006404 <HAL_RCC_OscConfig>
 80038a2:	4603      	mov	r3, r0
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d001      	beq.n	80038ac <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80038a8:	f000 fab6 	bl	8003e18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80038ac:	230f      	movs	r3, #15
 80038ae:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80038b0:	2303      	movs	r3, #3
 80038b2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80038b4:	2300      	movs	r3, #0
 80038b6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80038b8:	2300      	movs	r3, #0
 80038ba:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80038bc:	2300      	movs	r3, #0
 80038be:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80038c0:	463b      	mov	r3, r7
 80038c2:	2104      	movs	r1, #4
 80038c4:	4618      	mov	r0, r3
 80038c6:	f003 f9b1 	bl	8006c2c <HAL_RCC_ClockConfig>
 80038ca:	4603      	mov	r3, r0
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d001      	beq.n	80038d4 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80038d0:	f000 faa2 	bl	8003e18 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80038d4:	f003 fd8c 	bl	80073f0 <HAL_RCCEx_EnableMSIPLLMode>
}
 80038d8:	bf00      	nop
 80038da:	3758      	adds	r7, #88	@ 0x58
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}
 80038e0:	40021000 	.word	0x40021000

080038e4 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	af00      	add	r7, sp, #0
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80038e8:	2200      	movs	r2, #0
 80038ea:	2100      	movs	r1, #0
 80038ec:	200d      	movs	r0, #13
 80038ee:	f002 f90c 	bl	8005b0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80038f2:	200d      	movs	r0, #13
 80038f4:	f002 f925 	bl	8005b42 <HAL_NVIC_EnableIRQ>
  /* SPI1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80038f8:	2200      	movs	r2, #0
 80038fa:	2100      	movs	r1, #0
 80038fc:	2023      	movs	r0, #35	@ 0x23
 80038fe:	f002 f904 	bl	8005b0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8003902:	2023      	movs	r0, #35	@ 0x23
 8003904:	f002 f91d 	bl	8005b42 <HAL_NVIC_EnableIRQ>
  /* TIM6_DAC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 10, 0);
 8003908:	2200      	movs	r2, #0
 800390a:	210a      	movs	r1, #10
 800390c:	2036      	movs	r0, #54	@ 0x36
 800390e:	f002 f8fc 	bl	8005b0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003912:	2036      	movs	r0, #54	@ 0x36
 8003914:	f002 f915 	bl	8005b42 <HAL_NVIC_EnableIRQ>
}
 8003918:	bf00      	nop
 800391a:	bd80      	pop	{r7, pc}

0800391c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b086      	sub	sp, #24
 8003920:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003922:	463b      	mov	r3, r7
 8003924:	2200      	movs	r2, #0
 8003926:	601a      	str	r2, [r3, #0]
 8003928:	605a      	str	r2, [r3, #4]
 800392a:	609a      	str	r2, [r3, #8]
 800392c:	60da      	str	r2, [r3, #12]
 800392e:	611a      	str	r2, [r3, #16]
 8003930:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8003932:	4b29      	ldr	r3, [pc, #164]	@ (80039d8 <MX_ADC1_Init+0xbc>)
 8003934:	4a29      	ldr	r2, [pc, #164]	@ (80039dc <MX_ADC1_Init+0xc0>)
 8003936:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8003938:	4b27      	ldr	r3, [pc, #156]	@ (80039d8 <MX_ADC1_Init+0xbc>)
 800393a:	2200      	movs	r2, #0
 800393c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800393e:	4b26      	ldr	r3, [pc, #152]	@ (80039d8 <MX_ADC1_Init+0xbc>)
 8003940:	2200      	movs	r2, #0
 8003942:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003944:	4b24      	ldr	r3, [pc, #144]	@ (80039d8 <MX_ADC1_Init+0xbc>)
 8003946:	2200      	movs	r2, #0
 8003948:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800394a:	4b23      	ldr	r3, [pc, #140]	@ (80039d8 <MX_ADC1_Init+0xbc>)
 800394c:	2200      	movs	r2, #0
 800394e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003950:	4b21      	ldr	r3, [pc, #132]	@ (80039d8 <MX_ADC1_Init+0xbc>)
 8003952:	2204      	movs	r2, #4
 8003954:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8003956:	4b20      	ldr	r3, [pc, #128]	@ (80039d8 <MX_ADC1_Init+0xbc>)
 8003958:	2200      	movs	r2, #0
 800395a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800395c:	4b1e      	ldr	r3, [pc, #120]	@ (80039d8 <MX_ADC1_Init+0xbc>)
 800395e:	2201      	movs	r2, #1
 8003960:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8003962:	4b1d      	ldr	r3, [pc, #116]	@ (80039d8 <MX_ADC1_Init+0xbc>)
 8003964:	2201      	movs	r2, #1
 8003966:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003968:	4b1b      	ldr	r3, [pc, #108]	@ (80039d8 <MX_ADC1_Init+0xbc>)
 800396a:	2200      	movs	r2, #0
 800396c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003970:	4b19      	ldr	r3, [pc, #100]	@ (80039d8 <MX_ADC1_Init+0xbc>)
 8003972:	2200      	movs	r2, #0
 8003974:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003976:	4b18      	ldr	r3, [pc, #96]	@ (80039d8 <MX_ADC1_Init+0xbc>)
 8003978:	2200      	movs	r2, #0
 800397a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800397c:	4b16      	ldr	r3, [pc, #88]	@ (80039d8 <MX_ADC1_Init+0xbc>)
 800397e:	2200      	movs	r2, #0
 8003980:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8003984:	4b14      	ldr	r3, [pc, #80]	@ (80039d8 <MX_ADC1_Init+0xbc>)
 8003986:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800398a:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800398c:	4b12      	ldr	r3, [pc, #72]	@ (80039d8 <MX_ADC1_Init+0xbc>)
 800398e:	2200      	movs	r2, #0
 8003990:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003994:	4810      	ldr	r0, [pc, #64]	@ (80039d8 <MX_ADC1_Init+0xbc>)
 8003996:	f001 f8d7 	bl	8004b48 <HAL_ADC_Init>
 800399a:	4603      	mov	r3, r0
 800399c:	2b00      	cmp	r3, #0
 800399e:	d001      	beq.n	80039a4 <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 80039a0:	f000 fa3a 	bl	8003e18 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80039a4:	4b0e      	ldr	r3, [pc, #56]	@ (80039e0 <MX_ADC1_Init+0xc4>)
 80039a6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80039a8:	2306      	movs	r3, #6
 80039aa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 80039ac:	2307      	movs	r3, #7
 80039ae:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80039b0:	237f      	movs	r3, #127	@ 0x7f
 80039b2:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80039b4:	2304      	movs	r3, #4
 80039b6:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80039b8:	2300      	movs	r3, #0
 80039ba:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80039bc:	463b      	mov	r3, r7
 80039be:	4619      	mov	r1, r3
 80039c0:	4805      	ldr	r0, [pc, #20]	@ (80039d8 <MX_ADC1_Init+0xbc>)
 80039c2:	f001 fa73 	bl	8004eac <HAL_ADC_ConfigChannel>
 80039c6:	4603      	mov	r3, r0
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d001      	beq.n	80039d0 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 80039cc:	f000 fa24 	bl	8003e18 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80039d0:	bf00      	nop
 80039d2:	3718      	adds	r7, #24
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bd80      	pop	{r7, pc}
 80039d8:	20000b48 	.word	0x20000b48
 80039dc:	50040000 	.word	0x50040000
 80039e0:	14f00020 	.word	0x14f00020

080039e4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80039e8:	4b1b      	ldr	r3, [pc, #108]	@ (8003a58 <MX_SPI1_Init+0x74>)
 80039ea:	4a1c      	ldr	r2, [pc, #112]	@ (8003a5c <MX_SPI1_Init+0x78>)
 80039ec:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80039ee:	4b1a      	ldr	r3, [pc, #104]	@ (8003a58 <MX_SPI1_Init+0x74>)
 80039f0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80039f4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80039f6:	4b18      	ldr	r3, [pc, #96]	@ (8003a58 <MX_SPI1_Init+0x74>)
 80039f8:	2200      	movs	r2, #0
 80039fa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80039fc:	4b16      	ldr	r3, [pc, #88]	@ (8003a58 <MX_SPI1_Init+0x74>)
 80039fe:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8003a02:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003a04:	4b14      	ldr	r3, [pc, #80]	@ (8003a58 <MX_SPI1_Init+0x74>)
 8003a06:	2200      	movs	r2, #0
 8003a08:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003a0a:	4b13      	ldr	r3, [pc, #76]	@ (8003a58 <MX_SPI1_Init+0x74>)
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003a10:	4b11      	ldr	r3, [pc, #68]	@ (8003a58 <MX_SPI1_Init+0x74>)
 8003a12:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003a16:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8003a18:	4b0f      	ldr	r3, [pc, #60]	@ (8003a58 <MX_SPI1_Init+0x74>)
 8003a1a:	2210      	movs	r2, #16
 8003a1c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003a1e:	4b0e      	ldr	r3, [pc, #56]	@ (8003a58 <MX_SPI1_Init+0x74>)
 8003a20:	2200      	movs	r2, #0
 8003a22:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003a24:	4b0c      	ldr	r3, [pc, #48]	@ (8003a58 <MX_SPI1_Init+0x74>)
 8003a26:	2200      	movs	r2, #0
 8003a28:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a2a:	4b0b      	ldr	r3, [pc, #44]	@ (8003a58 <MX_SPI1_Init+0x74>)
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8003a30:	4b09      	ldr	r3, [pc, #36]	@ (8003a58 <MX_SPI1_Init+0x74>)
 8003a32:	2207      	movs	r2, #7
 8003a34:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003a36:	4b08      	ldr	r3, [pc, #32]	@ (8003a58 <MX_SPI1_Init+0x74>)
 8003a38:	2200      	movs	r2, #0
 8003a3a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003a3c:	4b06      	ldr	r3, [pc, #24]	@ (8003a58 <MX_SPI1_Init+0x74>)
 8003a3e:	2208      	movs	r2, #8
 8003a40:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003a42:	4805      	ldr	r0, [pc, #20]	@ (8003a58 <MX_SPI1_Init+0x74>)
 8003a44:	f003 fdd6 	bl	80075f4 <HAL_SPI_Init>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d001      	beq.n	8003a52 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8003a4e:	f000 f9e3 	bl	8003e18 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003a52:	bf00      	nop
 8003a54:	bd80      	pop	{r7, pc}
 8003a56:	bf00      	nop
 8003a58:	20000bac 	.word	0x20000bac
 8003a5c:	40013000 	.word	0x40013000

08003a60 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b084      	sub	sp, #16
 8003a64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003a66:	1d3b      	adds	r3, r7, #4
 8003a68:	2200      	movs	r2, #0
 8003a6a:	601a      	str	r2, [r3, #0]
 8003a6c:	605a      	str	r2, [r3, #4]
 8003a6e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8003a70:	4b14      	ldr	r3, [pc, #80]	@ (8003ac4 <MX_TIM6_Init+0x64>)
 8003a72:	4a15      	ldr	r2, [pc, #84]	@ (8003ac8 <MX_TIM6_Init+0x68>)
 8003a74:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7999;
 8003a76:	4b13      	ldr	r3, [pc, #76]	@ (8003ac4 <MX_TIM6_Init+0x64>)
 8003a78:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8003a7c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a7e:	4b11      	ldr	r3, [pc, #68]	@ (8003ac4 <MX_TIM6_Init+0x64>)
 8003a80:	2200      	movs	r2, #0
 8003a82:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 80;
 8003a84:	4b0f      	ldr	r3, [pc, #60]	@ (8003ac4 <MX_TIM6_Init+0x64>)
 8003a86:	2250      	movs	r2, #80	@ 0x50
 8003a88:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a8a:	4b0e      	ldr	r3, [pc, #56]	@ (8003ac4 <MX_TIM6_Init+0x64>)
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003a90:	480c      	ldr	r0, [pc, #48]	@ (8003ac4 <MX_TIM6_Init+0x64>)
 8003a92:	f004 fbc5 	bl	8008220 <HAL_TIM_Base_Init>
 8003a96:	4603      	mov	r3, r0
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d001      	beq.n	8003aa0 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8003a9c:	f000 f9bc 	bl	8003e18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003aa8:	1d3b      	adds	r3, r7, #4
 8003aaa:	4619      	mov	r1, r3
 8003aac:	4805      	ldr	r0, [pc, #20]	@ (8003ac4 <MX_TIM6_Init+0x64>)
 8003aae:	f004 fe03 	bl	80086b8 <HAL_TIMEx_MasterConfigSynchronization>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d001      	beq.n	8003abc <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8003ab8:	f000 f9ae 	bl	8003e18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8003abc:	bf00      	nop
 8003abe:	3710      	adds	r7, #16
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bd80      	pop	{r7, pc}
 8003ac4:	20000c58 	.word	0x20000c58
 8003ac8:	40001000 	.word	0x40001000

08003acc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003acc:	b480      	push	{r7}
 8003ace:	b083      	sub	sp, #12
 8003ad0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003ad2:	4b09      	ldr	r3, [pc, #36]	@ (8003af8 <MX_DMA_Init+0x2c>)
 8003ad4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ad6:	4a08      	ldr	r2, [pc, #32]	@ (8003af8 <MX_DMA_Init+0x2c>)
 8003ad8:	f043 0301 	orr.w	r3, r3, #1
 8003adc:	6493      	str	r3, [r2, #72]	@ 0x48
 8003ade:	4b06      	ldr	r3, [pc, #24]	@ (8003af8 <MX_DMA_Init+0x2c>)
 8003ae0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ae2:	f003 0301 	and.w	r3, r3, #1
 8003ae6:	607b      	str	r3, [r7, #4]
 8003ae8:	687b      	ldr	r3, [r7, #4]

}
 8003aea:	bf00      	nop
 8003aec:	370c      	adds	r7, #12
 8003aee:	46bd      	mov	sp, r7
 8003af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af4:	4770      	bx	lr
 8003af6:	bf00      	nop
 8003af8:	40021000 	.word	0x40021000

08003afc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b088      	sub	sp, #32
 8003b00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b02:	f107 030c 	add.w	r3, r7, #12
 8003b06:	2200      	movs	r2, #0
 8003b08:	601a      	str	r2, [r3, #0]
 8003b0a:	605a      	str	r2, [r3, #4]
 8003b0c:	609a      	str	r2, [r3, #8]
 8003b0e:	60da      	str	r2, [r3, #12]
 8003b10:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b12:	4b30      	ldr	r3, [pc, #192]	@ (8003bd4 <MX_GPIO_Init+0xd8>)
 8003b14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b16:	4a2f      	ldr	r2, [pc, #188]	@ (8003bd4 <MX_GPIO_Init+0xd8>)
 8003b18:	f043 0304 	orr.w	r3, r3, #4
 8003b1c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003b1e:	4b2d      	ldr	r3, [pc, #180]	@ (8003bd4 <MX_GPIO_Init+0xd8>)
 8003b20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b22:	f003 0304 	and.w	r3, r3, #4
 8003b26:	60bb      	str	r3, [r7, #8]
 8003b28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b2a:	4b2a      	ldr	r3, [pc, #168]	@ (8003bd4 <MX_GPIO_Init+0xd8>)
 8003b2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b2e:	4a29      	ldr	r2, [pc, #164]	@ (8003bd4 <MX_GPIO_Init+0xd8>)
 8003b30:	f043 0301 	orr.w	r3, r3, #1
 8003b34:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003b36:	4b27      	ldr	r3, [pc, #156]	@ (8003bd4 <MX_GPIO_Init+0xd8>)
 8003b38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b3a:	f003 0301 	and.w	r3, r3, #1
 8003b3e:	607b      	str	r3, [r7, #4]
 8003b40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b42:	4b24      	ldr	r3, [pc, #144]	@ (8003bd4 <MX_GPIO_Init+0xd8>)
 8003b44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b46:	4a23      	ldr	r2, [pc, #140]	@ (8003bd4 <MX_GPIO_Init+0xd8>)
 8003b48:	f043 0302 	orr.w	r3, r3, #2
 8003b4c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003b4e:	4b21      	ldr	r3, [pc, #132]	@ (8003bd4 <MX_GPIO_Init+0xd8>)
 8003b50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b52:	f003 0302 	and.w	r3, r3, #2
 8003b56:	603b      	str	r3, [r7, #0]
 8003b58:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_RESET);
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003b60:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003b64:	f002 fbc2 	bl	80062ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|CS_Pin|DC_Pin, GPIO_PIN_RESET);
 8003b68:	2200      	movs	r2, #0
 8003b6a:	2138      	movs	r1, #56	@ 0x38
 8003b6c:	481a      	ldr	r0, [pc, #104]	@ (8003bd8 <MX_GPIO_Init+0xdc>)
 8003b6e:	f002 fbbd 	bl	80062ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_BTN_1_Pin */
  GPIO_InitStruct.Pin = USER_BTN_1_Pin;
 8003b72:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003b76:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003b78:	2300      	movs	r3, #0
 8003b7a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003b7c:	2302      	movs	r3, #2
 8003b7e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(USER_BTN_1_GPIO_Port, &GPIO_InitStruct);
 8003b80:	f107 030c 	add.w	r3, r7, #12
 8003b84:	4619      	mov	r1, r3
 8003b86:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003b8a:	f002 fa2d 	bl	8005fe8 <HAL_GPIO_Init>

  /*Configure GPIO pin : RST_Pin */
  GPIO_InitStruct.Pin = RST_Pin;
 8003b8e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003b92:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b94:	2301      	movs	r3, #1
 8003b96:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b98:	2300      	movs	r3, #0
 8003b9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 8003ba0:	f107 030c 	add.w	r3, r7, #12
 8003ba4:	4619      	mov	r1, r3
 8003ba6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003baa:	f002 fa1d 	bl	8005fe8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin CS_Pin DC_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|CS_Pin|DC_Pin;
 8003bae:	2338      	movs	r3, #56	@ 0x38
 8003bb0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003bbe:	f107 030c 	add.w	r3, r7, #12
 8003bc2:	4619      	mov	r1, r3
 8003bc4:	4804      	ldr	r0, [pc, #16]	@ (8003bd8 <MX_GPIO_Init+0xdc>)
 8003bc6:	f002 fa0f 	bl	8005fe8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8003bca:	bf00      	nop
 8003bcc:	3720      	adds	r7, #32
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}
 8003bd2:	bf00      	nop
 8003bd4:	40021000 	.word	0x40021000
 8003bd8:	48000400 	.word	0x48000400

08003bdc <RunDead>:

/* USER CODE BEGIN 4 */
void RunDead(InputSnapshot* in)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b084      	sub	sp, #16
 8003be0:	af02      	add	r7, sp, #8
 8003be2:	6078      	str	r0, [r7, #4]
	static int x = 0, dx = 1;
	x += dx;
 8003be4:	4b1c      	ldr	r3, [pc, #112]	@ (8003c58 <RunDead+0x7c>)
 8003be6:	681a      	ldr	r2, [r3, #0]
 8003be8:	4b1c      	ldr	r3, [pc, #112]	@ (8003c5c <RunDead+0x80>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4413      	add	r3, r2
 8003bee:	4a1a      	ldr	r2, [pc, #104]	@ (8003c58 <RunDead+0x7c>)
 8003bf0:	6013      	str	r3, [r2, #0]
	if (x < 1 || x > 55) dx = -dx;
 8003bf2:	4b19      	ldr	r3, [pc, #100]	@ (8003c58 <RunDead+0x7c>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	dd03      	ble.n	8003c02 <RunDead+0x26>
 8003bfa:	4b17      	ldr	r3, [pc, #92]	@ (8003c58 <RunDead+0x7c>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	2b37      	cmp	r3, #55	@ 0x37
 8003c00:	dd04      	ble.n	8003c0c <RunDead+0x30>
 8003c02:	4b16      	ldr	r3, [pc, #88]	@ (8003c5c <RunDead+0x80>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	425b      	negs	r3, r3
 8003c08:	4a14      	ldr	r2, [pc, #80]	@ (8003c5c <RunDead+0x80>)
 8003c0a:	6013      	str	r3, [r2, #0]

	GFX_DrowBitMap_P(x,(SCREEN_HEIGHT/2) - 4,Defeated_map,67,16,1);
 8003c0c:	4b12      	ldr	r3, [pc, #72]	@ (8003c58 <RunDead+0x7c>)
 8003c0e:	6818      	ldr	r0, [r3, #0]
 8003c10:	2301      	movs	r3, #1
 8003c12:	9301      	str	r3, [sp, #4]
 8003c14:	2310      	movs	r3, #16
 8003c16:	9300      	str	r3, [sp, #0]
 8003c18:	2343      	movs	r3, #67	@ 0x43
 8003c1a:	4a11      	ldr	r2, [pc, #68]	@ (8003c60 <RunDead+0x84>)
 8003c1c:	213c      	movs	r1, #60	@ 0x3c
 8003c1e:	f7fd f8c5 	bl	8000dac <GFX_DrowBitMap_P>
	GFX_DrowBitMap_P(35,(SCREEN_HEIGHT/2) + 24,Score_map,37,10,1);
 8003c22:	2301      	movs	r3, #1
 8003c24:	9301      	str	r3, [sp, #4]
 8003c26:	230a      	movs	r3, #10
 8003c28:	9300      	str	r3, [sp, #0]
 8003c2a:	2325      	movs	r3, #37	@ 0x25
 8003c2c:	4a0d      	ldr	r2, [pc, #52]	@ (8003c64 <RunDead+0x88>)
 8003c2e:	2158      	movs	r1, #88	@ 0x58
 8003c30:	2023      	movs	r0, #35	@ 0x23
 8003c32:	f7fd f8bb 	bl	8000dac <GFX_DrowBitMap_P>
	GFX_PutInt(73,(SCREEN_HEIGHT/2) + 27,GameGetPalyerScore(&g_singleton),1,1,0);
 8003c36:	480c      	ldr	r0, [pc, #48]	@ (8003c68 <RunDead+0x8c>)
 8003c38:	f7ff fc43 	bl	80034c2 <GameGetPalyerScore>
 8003c3c:	4602      	mov	r2, r0
 8003c3e:	2300      	movs	r3, #0
 8003c40:	9301      	str	r3, [sp, #4]
 8003c42:	2301      	movs	r3, #1
 8003c44:	9300      	str	r3, [sp, #0]
 8003c46:	2301      	movs	r3, #1
 8003c48:	215b      	movs	r1, #91	@ 0x5b
 8003c4a:	2049      	movs	r0, #73	@ 0x49
 8003c4c:	f7fd fa40 	bl	80010d0 <GFX_PutInt>
}
 8003c50:	bf00      	nop
 8003c52:	3708      	adds	r7, #8
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bd80      	pop	{r7, pc}
 8003c58:	20000cb0 	.word	0x20000cb0
 8003c5c:	20000004 	.word	0x20000004
 8003c60:	0800ac14 	.word	0x0800ac14
 8003c64:	0800abe0 	.word	0x0800abe0
 8003c68:	200000a0 	.word	0x200000a0

08003c6c <RunDeadTick>:

void RunDeadTick(InputSnapshot* in){
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b082      	sub	sp, #8
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
	if(in->btn1State == GPIO_PIN_SET)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	791b      	ldrb	r3, [r3, #4]
 8003c78:	2b01      	cmp	r3, #1
 8003c7a:	d105      	bne.n	8003c88 <RunDeadTick+0x1c>
	{
		PlayDeadAnim();
 8003c7c:	f000 f80a 	bl	8003c94 <PlayDeadAnim>
		GameSetState(&g_singleton, GS_Menu);
 8003c80:	2100      	movs	r1, #0
 8003c82:	4803      	ldr	r0, [pc, #12]	@ (8003c90 <RunDeadTick+0x24>)
 8003c84:	f7ff fc00 	bl	8003488 <GameSetState>
	}
}
 8003c88:	bf00      	nop
 8003c8a:	3708      	adds	r7, #8
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bd80      	pop	{r7, pc}
 8003c90:	200000a0 	.word	0x200000a0

08003c94 <PlayDeadAnim>:

void PlayDeadAnim(void)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b084      	sub	sp, #16
 8003c98:	af02      	add	r7, sp, #8
	uint8_t i;

	for (i = 0; i < 10; ++i)
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	71fb      	strb	r3, [r7, #7]
 8003c9e:	e018      	b.n	8003cd2 <PlayDeadAnim+0x3e>
	{
		SSD1327_CLR();
 8003ca0:	f000 f984 	bl	8003fac <SSD1327_CLR>
		GFX_FillRect(0,0,128,128,1);
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	9300      	str	r3, [sp, #0]
 8003ca8:	2380      	movs	r3, #128	@ 0x80
 8003caa:	2280      	movs	r2, #128	@ 0x80
 8003cac:	2100      	movs	r1, #0
 8003cae:	2000      	movs	r0, #0
 8003cb0:	f7fd f984 	bl	8000fbc <GFX_FillRect>
		SSD1327_Display();
 8003cb4:	f000 f974 	bl	8003fa0 <SSD1327_Display>
		HAL_Delay(10);
 8003cb8:	200a      	movs	r0, #10
 8003cba:	f000 fd47 	bl	800474c <HAL_Delay>

		SSD1327_CLR();
 8003cbe:	f000 f975 	bl	8003fac <SSD1327_CLR>
		SSD1327_Display();
 8003cc2:	f000 f96d 	bl	8003fa0 <SSD1327_Display>
		HAL_Delay(10);
 8003cc6:	200a      	movs	r0, #10
 8003cc8:	f000 fd40 	bl	800474c <HAL_Delay>
	for (i = 0; i < 10; ++i)
 8003ccc:	79fb      	ldrb	r3, [r7, #7]
 8003cce:	3301      	adds	r3, #1
 8003cd0:	71fb      	strb	r3, [r7, #7]
 8003cd2:	79fb      	ldrb	r3, [r7, #7]
 8003cd4:	2b09      	cmp	r3, #9
 8003cd6:	d9e3      	bls.n	8003ca0 <PlayDeadAnim+0xc>
	}
}
 8003cd8:	bf00      	nop
 8003cda:	bf00      	nop
 8003cdc:	3708      	adds	r7, #8
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}
	...

08003ce4 <RunGame>:

void RunGame (InputSnapshot* in)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b082      	sub	sp, #8
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
	GameDraw(&g_singleton, in);
 8003cec:	6879      	ldr	r1, [r7, #4]
 8003cee:	4803      	ldr	r0, [pc, #12]	@ (8003cfc <RunGame+0x18>)
 8003cf0:	f7fe fb1a 	bl	8002328 <GameDraw>
}
 8003cf4:	bf00      	nop
 8003cf6:	3708      	adds	r7, #8
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bd80      	pop	{r7, pc}
 8003cfc:	200000a0 	.word	0x200000a0

08003d00 <RunGameTick>:

void RunGameTick(InputSnapshot* in, GameCtx* g){
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b082      	sub	sp, #8
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
 8003d08:	6039      	str	r1, [r7, #0]

	GameLevelUpdate(g);
 8003d0a:	6838      	ldr	r0, [r7, #0]
 8003d0c:	f7fe fd44 	bl	8002798 <GameLevelUpdate>
	GameTick(g, in);
 8003d10:	6879      	ldr	r1, [r7, #4]
 8003d12:	6838      	ldr	r0, [r7, #0]
 8003d14:	f7fd fb0a 	bl	800132c <GameTick>
	GameUpdateBackgrand(g);
 8003d18:	6838      	ldr	r0, [r7, #0]
 8003d1a:	f7fe fdff 	bl	800291c <GameUpdateBackgrand>
	GameUpdateBonus(g);
 8003d1e:	6838      	ldr	r0, [r7, #0]
 8003d20:	f7fe ffa2 	bl	8002c68 <GameUpdateBonus>
}
 8003d24:	bf00      	nop
 8003d26:	3708      	adds	r7, #8
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd80      	pop	{r7, pc}

08003d2c <RunMenu>:

void RunMenu (InputSnapshot* in)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b084      	sub	sp, #16
 8003d30:	af02      	add	r7, sp, #8
 8003d32:	6078      	str	r0, [r7, #4]
	static int x = 0, dx = 1;
	x += dx;
 8003d34:	4b1b      	ldr	r3, [pc, #108]	@ (8003da4 <RunMenu+0x78>)
 8003d36:	681a      	ldr	r2, [r3, #0]
 8003d38:	4b1b      	ldr	r3, [pc, #108]	@ (8003da8 <RunMenu+0x7c>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4413      	add	r3, r2
 8003d3e:	4a19      	ldr	r2, [pc, #100]	@ (8003da4 <RunMenu+0x78>)
 8003d40:	6013      	str	r3, [r2, #0]
	if (x < 1 || x > 65) dx = -dx;
 8003d42:	4b18      	ldr	r3, [pc, #96]	@ (8003da4 <RunMenu+0x78>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	dd03      	ble.n	8003d52 <RunMenu+0x26>
 8003d4a:	4b16      	ldr	r3, [pc, #88]	@ (8003da4 <RunMenu+0x78>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	2b41      	cmp	r3, #65	@ 0x41
 8003d50:	dd04      	ble.n	8003d5c <RunMenu+0x30>
 8003d52:	4b15      	ldr	r3, [pc, #84]	@ (8003da8 <RunMenu+0x7c>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	425b      	negs	r3, r3
 8003d58:	4a13      	ldr	r2, [pc, #76]	@ (8003da8 <RunMenu+0x7c>)
 8003d5a:	6013      	str	r3, [r2, #0]

	GFX_DrowBitMap_P(x,(SCREEN_HEIGHT/2) - 10,uGalaxy_map,54,16,1);
 8003d5c:	4b11      	ldr	r3, [pc, #68]	@ (8003da4 <RunMenu+0x78>)
 8003d5e:	6818      	ldr	r0, [r3, #0]
 8003d60:	2301      	movs	r3, #1
 8003d62:	9301      	str	r3, [sp, #4]
 8003d64:	2310      	movs	r3, #16
 8003d66:	9300      	str	r3, [sp, #0]
 8003d68:	2336      	movs	r3, #54	@ 0x36
 8003d6a:	4a10      	ldr	r2, [pc, #64]	@ (8003dac <RunMenu+0x80>)
 8003d6c:	2136      	movs	r1, #54	@ 0x36
 8003d6e:	f7fd f81d 	bl	8000dac <GFX_DrowBitMap_P>
	GFX_DrowRoundRect(15,(SCREEN_HEIGHT/2) + 34,93,20,8,1);
 8003d72:	2301      	movs	r3, #1
 8003d74:	9301      	str	r3, [sp, #4]
 8003d76:	2308      	movs	r3, #8
 8003d78:	9300      	str	r3, [sp, #0]
 8003d7a:	2314      	movs	r3, #20
 8003d7c:	225d      	movs	r2, #93	@ 0x5d
 8003d7e:	2162      	movs	r1, #98	@ 0x62
 8003d80:	200f      	movs	r0, #15
 8003d82:	f7fd f9c5 	bl	8001110 <GFX_DrowRoundRect>
	GFX_DrowBitMap_P(26, (SCREEN_HEIGHT/2)+ 37, PressToStart_map, 66,10,1);
 8003d86:	2301      	movs	r3, #1
 8003d88:	9301      	str	r3, [sp, #4]
 8003d8a:	230a      	movs	r3, #10
 8003d8c:	9300      	str	r3, [sp, #0]
 8003d8e:	2342      	movs	r3, #66	@ 0x42
 8003d90:	4a07      	ldr	r2, [pc, #28]	@ (8003db0 <RunMenu+0x84>)
 8003d92:	2165      	movs	r1, #101	@ 0x65
 8003d94:	201a      	movs	r0, #26
 8003d96:	f7fd f809 	bl	8000dac <GFX_DrowBitMap_P>

}
 8003d9a:	bf00      	nop
 8003d9c:	3708      	adds	r7, #8
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}
 8003da2:	bf00      	nop
 8003da4:	20000cb4 	.word	0x20000cb4
 8003da8:	20000008 	.word	0x20000008
 8003dac:	0800aca4 	.word	0x0800aca4
 8003db0:	0800ad14 	.word	0x0800ad14

08003db4 <RunMenuTick>:
void RunMenuTick(InputSnapshot* in){
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b082      	sub	sp, #8
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
	if(in->btn1State == GPIO_PIN_SET)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	791b      	ldrb	r3, [r3, #4]
 8003dc0:	2b01      	cmp	r3, #1
 8003dc2:	d106      	bne.n	8003dd2 <RunMenuTick+0x1e>
	{
		GameInit(&g_singleton);
 8003dc4:	4805      	ldr	r0, [pc, #20]	@ (8003ddc <RunMenuTick+0x28>)
 8003dc6:	f7fd fa1c 	bl	8001202 <GameInit>
		GameSetState(&g_singleton, GS_Playing);
 8003dca:	2101      	movs	r1, #1
 8003dcc:	4803      	ldr	r0, [pc, #12]	@ (8003ddc <RunMenuTick+0x28>)
 8003dce:	f7ff fb5b 	bl	8003488 <GameSetState>
	}
}
 8003dd2:	bf00      	nop
 8003dd4:	3708      	adds	r7, #8
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}
 8003dda:	bf00      	nop
 8003ddc:	200000a0 	.word	0x200000a0

08003de0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8003de0:	b480      	push	{r7}
 8003de2:	b083      	sub	sp, #12
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM6)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a07      	ldr	r2, [pc, #28]	@ (8003e0c <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d105      	bne.n	8003dfe <HAL_TIM_PeriodElapsedCallback+0x1e>
    {
        g_logicTick  = true;
 8003df2:	4b07      	ldr	r3, [pc, #28]	@ (8003e10 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8003df4:	2201      	movs	r2, #1
 8003df6:	701a      	strb	r2, [r3, #0]
        g_renderTick = true;
 8003df8:	4b06      	ldr	r3, [pc, #24]	@ (8003e14 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	701a      	strb	r2, [r3, #0]
    }
}
 8003dfe:	bf00      	nop
 8003e00:	370c      	adds	r7, #12
 8003e02:	46bd      	mov	sp, r7
 8003e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e08:	4770      	bx	lr
 8003e0a:	bf00      	nop
 8003e0c:	40001000 	.word	0x40001000
 8003e10:	20000cac 	.word	0x20000cac
 8003e14:	20000cad 	.word	0x20000cad

08003e18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003e1c:	b672      	cpsid	i
}
 8003e1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003e20:	bf00      	nop
 8003e22:	e7fd      	b.n	8003e20 <Error_Handler+0x8>

08003e24 <SSD1327_CMD>:
static uint8_t* _bufferDraw = _bufferBack;
static uint8_t* _bufferTx = _bufferFront;

static volatile bool _ssd1327DMA_Busy = false;

void SSD1327_CMD (uint8_t cmd){
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b082      	sub	sp, #8
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(DC_PORT, DC, GPIO_PIN_RESET);
 8003e2e:	2200      	movs	r2, #0
 8003e30:	2120      	movs	r1, #32
 8003e32:	480c      	ldr	r0, [pc, #48]	@ (8003e64 <SSD1327_CMD+0x40>)
 8003e34:	f002 fa5a 	bl	80062ec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS_PORT, CS, GPIO_PIN_RESET);
 8003e38:	2200      	movs	r2, #0
 8003e3a:	2110      	movs	r1, #16
 8003e3c:	4809      	ldr	r0, [pc, #36]	@ (8003e64 <SSD1327_CMD+0x40>)
 8003e3e:	f002 fa55 	bl	80062ec <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(ssd1327_spi, &cmd, 1, 10);
 8003e42:	4b09      	ldr	r3, [pc, #36]	@ (8003e68 <SSD1327_CMD+0x44>)
 8003e44:	6818      	ldr	r0, [r3, #0]
 8003e46:	1df9      	adds	r1, r7, #7
 8003e48:	230a      	movs	r3, #10
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	f003 fc75 	bl	800773a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CS_PORT, CS, GPIO_PIN_SET);
 8003e50:	2201      	movs	r2, #1
 8003e52:	2110      	movs	r1, #16
 8003e54:	4803      	ldr	r0, [pc, #12]	@ (8003e64 <SSD1327_CMD+0x40>)
 8003e56:	f002 fa49 	bl	80062ec <HAL_GPIO_WritePin>

}
 8003e5a:	bf00      	nop
 8003e5c:	3708      	adds	r7, #8
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}
 8003e62:	bf00      	nop
 8003e64:	48000400 	.word	0x48000400
 8003e68:	20000cb8 	.word	0x20000cb8

08003e6c <SSD1327_Reset>:
{
	SSD1327_CMD(SSD1327_SETCONTRASTCURRENT);	// Set Contrast Control
	SSD1327_CMD(Contrast);
}

void SSD1327_Reset(void){
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(RST_PORT, RST, GPIO_PIN_RESET);
 8003e70:	2200      	movs	r2, #0
 8003e72:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003e76:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003e7a:	f002 fa37 	bl	80062ec <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8003e7e:	2014      	movs	r0, #20
 8003e80:	f000 fc64 	bl	800474c <HAL_Delay>
	HAL_GPIO_WritePin(RST_PORT, RST, GPIO_PIN_SET);
 8003e84:	2201      	movs	r2, #1
 8003e86:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003e8a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003e8e:	f002 fa2d 	bl	80062ec <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8003e92:	2014      	movs	r0, #20
 8003e94:	f000 fc5a 	bl	800474c <HAL_Delay>

}
 8003e98:	bf00      	nop
 8003e9a:	bd80      	pop	{r7, pc}

08003e9c <SSD1327_SpiInit>:

void SSD1327_SpiInit(SPI_HandleTypeDef *spi){
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b082      	sub	sp, #8
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]

	ssd1327_spi = spi;
 8003ea4:	4a05      	ldr	r2, [pc, #20]	@ (8003ebc <SSD1327_SpiInit+0x20>)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6013      	str	r3, [r2, #0]

	SSD1327_Reset();
 8003eaa:	f7ff ffdf 	bl	8003e6c <SSD1327_Reset>
	SSD1327_Init();
 8003eae:	f000 f807 	bl	8003ec0 <SSD1327_Init>

}
 8003eb2:	bf00      	nop
 8003eb4:	3708      	adds	r7, #8
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bd80      	pop	{r7, pc}
 8003eba:	bf00      	nop
 8003ebc:	20000cb8 	.word	0x20000cb8

08003ec0 <SSD1327_Init>:

void SSD1327_Init (void){
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	af00      	add	r7, sp, #0

	SSD1327_CMD(0xae);	// Turn off oled panel
 8003ec4:	20ae      	movs	r0, #174	@ 0xae
 8003ec6:	f7ff ffad 	bl	8003e24 <SSD1327_CMD>

	SSD1327_CMD(0x15);  // Set column addresses
 8003eca:	2015      	movs	r0, #21
 8003ecc:	f7ff ffaa 	bl	8003e24 <SSD1327_CMD>
	SSD1327_CMD(0x00);  // Start column  0
 8003ed0:	2000      	movs	r0, #0
 8003ed2:	f7ff ffa7 	bl	8003e24 <SSD1327_CMD>
	SSD1327_CMD(0x7f);  // End column  127
 8003ed6:	207f      	movs	r0, #127	@ 0x7f
 8003ed8:	f7ff ffa4 	bl	8003e24 <SSD1327_CMD>

	SSD1327_CMD(0x75);  // Set row addresses
 8003edc:	2075      	movs	r0, #117	@ 0x75
 8003ede:	f7ff ffa1 	bl	8003e24 <SSD1327_CMD>
	SSD1327_CMD(0x00);  // Start row  0
 8003ee2:	2000      	movs	r0, #0
 8003ee4:	f7ff ff9e 	bl	8003e24 <SSD1327_CMD>
	SSD1327_CMD(0x7f);  // End row  127
 8003ee8:	207f      	movs	r0, #127	@ 0x7f
 8003eea:	f7ff ff9b 	bl	8003e24 <SSD1327_CMD>

	SSD1327_CMD(0x81);  // Set contrast control
 8003eee:	2081      	movs	r0, #129	@ 0x81
 8003ef0:	f7ff ff98 	bl	8003e24 <SSD1327_CMD>
	SSD1327_CMD(0x80);  // 50% (128/255) def.0x80
 8003ef4:	2080      	movs	r0, #128	@ 0x80
 8003ef6:	f7ff ff95 	bl	8003e24 <SSD1327_CMD>

	SSD1327_CMD(0xa0);  // Gment remap
 8003efa:	20a0      	movs	r0, #160	@ 0xa0
 8003efc:	f7ff ff92 	bl	8003e24 <SSD1327_CMD>
	SSD1327_CMD(0x51);  // 51 (To my understanding, this is orientation
 8003f00:	2051      	movs	r0, #81	@ 0x51
 8003f02:	f7ff ff8f 	bl	8003e24 <SSD1327_CMD>

	SSD1327_CMD(0xa1);  // Start line
 8003f06:	20a1      	movs	r0, #161	@ 0xa1
 8003f08:	f7ff ff8c 	bl	8003e24 <SSD1327_CMD>
	SSD1327_CMD(0x00);
 8003f0c:	2000      	movs	r0, #0
 8003f0e:	f7ff ff89 	bl	8003e24 <SSD1327_CMD>

	SSD1327_CMD(0xa2);  // Display offset
 8003f12:	20a2      	movs	r0, #162	@ 0xa2
 8003f14:	f7ff ff86 	bl	8003e24 <SSD1327_CMD>
	SSD1327_CMD(0x00);
 8003f18:	2000      	movs	r0, #0
 8003f1a:	f7ff ff83 	bl	8003e24 <SSD1327_CMD>

	SSD1327_CMD(0xa4);  // rmal display
 8003f1e:	20a4      	movs	r0, #164	@ 0xa4
 8003f20:	f7ff ff80 	bl	8003e24 <SSD1327_CMD>
	SSD1327_CMD(0xa8);  // Set multiplex ratio
 8003f24:	20a8      	movs	r0, #168	@ 0xa8
 8003f26:	f7ff ff7d 	bl	8003e24 <SSD1327_CMD>
	SSD1327_CMD(0x7f);
 8003f2a:	207f      	movs	r0, #127	@ 0x7f
 8003f2c:	f7ff ff7a 	bl	8003e24 <SSD1327_CMD>

	SSD1327_CMD(0xb1);  // Set phase leghth
 8003f30:	20b1      	movs	r0, #177	@ 0xb1
 8003f32:	f7ff ff77 	bl	8003e24 <SSD1327_CMD>
	SSD1327_CMD(0xf1);
 8003f36:	20f1      	movs	r0, #241	@ 0xf1
 8003f38:	f7ff ff74 	bl	8003e24 <SSD1327_CMD>

	SSD1327_CMD(0xb3);  // Set dclk
 8003f3c:	20b3      	movs	r0, #179	@ 0xb3
 8003f3e:	f7ff ff71 	bl	8003e24 <SSD1327_CMD>
	SSD1327_CMD(0x00);  // 80Hz:0xc1 90Hz:0xe1  100Hz:0x00  110Hz:0x30 120Hz:0x50  130Hz:0x70   01
 8003f42:	2000      	movs	r0, #0
 8003f44:	f7ff ff6e 	bl	8003e24 <SSD1327_CMD>

	SSD1327_CMD(0xab);  // Enable vReg
 8003f48:	20ab      	movs	r0, #171	@ 0xab
 8003f4a:	f7ff ff6b 	bl	8003e24 <SSD1327_CMD>
	SSD1327_CMD(0x01);
 8003f4e:	2001      	movs	r0, #1
 8003f50:	f7ff ff68 	bl	8003e24 <SSD1327_CMD>

	SSD1327_CMD(0xb6);  // Set phase leghth
 8003f54:	20b6      	movs	r0, #182	@ 0xb6
 8003f56:	f7ff ff65 	bl	8003e24 <SSD1327_CMD>
	SSD1327_CMD(0x0f);
 8003f5a:	200f      	movs	r0, #15
 8003f5c:	f7ff ff62 	bl	8003e24 <SSD1327_CMD>

	SSD1327_CMD(0xbe); 	// Set vcomh voltage
 8003f60:	20be      	movs	r0, #190	@ 0xbe
 8003f62:	f7ff ff5f 	bl	8003e24 <SSD1327_CMD>
	SSD1327_CMD(0x0f);
 8003f66:	200f      	movs	r0, #15
 8003f68:	f7ff ff5c 	bl	8003e24 <SSD1327_CMD>

	SSD1327_CMD(0xbc); 	// Set pre-charge voltage
 8003f6c:	20bc      	movs	r0, #188	@ 0xbc
 8003f6e:	f7ff ff59 	bl	8003e24 <SSD1327_CMD>
	SSD1327_CMD(0x08);
 8003f72:	2008      	movs	r0, #8
 8003f74:	f7ff ff56 	bl	8003e24 <SSD1327_CMD>

	SSD1327_CMD(0xd5); 	// Second precharge period
 8003f78:	20d5      	movs	r0, #213	@ 0xd5
 8003f7a:	f7ff ff53 	bl	8003e24 <SSD1327_CMD>
	SSD1327_CMD(0x62);
 8003f7e:	2062      	movs	r0, #98	@ 0x62
 8003f80:	f7ff ff50 	bl	8003e24 <SSD1327_CMD>

	SSD1327_CMD(0xfd); 	// Unlock commands
 8003f84:	20fd      	movs	r0, #253	@ 0xfd
 8003f86:	f7ff ff4d 	bl	8003e24 <SSD1327_CMD>
	SSD1327_CMD(0x12);
 8003f8a:	2012      	movs	r0, #18
 8003f8c:	f7ff ff4a 	bl	8003e24 <SSD1327_CMD>

	SSD1327_CMD(0xA4);
 8003f90:	20a4      	movs	r0, #164	@ 0xa4
 8003f92:	f7ff ff47 	bl	8003e24 <SSD1327_CMD>

	SSD1327_CMD(SSD1327_DISPLAYON);
 8003f96:	20af      	movs	r0, #175	@ 0xaf
 8003f98:	f7ff ff44 	bl	8003e24 <SSD1327_CMD>
}
 8003f9c:	bf00      	nop
 8003f9e:	bd80      	pop	{r7, pc}

08003fa0 <SSD1327_Display>:

void SSD1327_Display (void){
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	af00      	add	r7, sp, #0

#ifdef SSD1327_USE_DMA
    (void)SSD1327_Present();  // jeśli zajęty – po prostu pomiń tę klatkę
 8003fa4:	f000 f860 	bl	8004068 <SSD1327_Present>
//
//	HAL_SPI_Transmit(ssd1327_spi, (uint8_t*)&_bufferBack, BUF_SIZE, 100);
//	HAL_GPIO_WritePin(CS_PORT, CS, GPIO_PIN_SET);
//#endif

}
 8003fa8:	bf00      	nop
 8003faa:	bd80      	pop	{r7, pc}

08003fac <SSD1327_CLR>:

void SSD1327_CLR(void){
 8003fac:	b580      	push	{r7, lr}
 8003fae:	af00      	add	r7, sp, #0
	memset(_bufferDraw, (0 << 4 | 0), BUF_SIZE);
 8003fb0:	4b04      	ldr	r3, [pc, #16]	@ (8003fc4 <SSD1327_CLR+0x18>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003fb8:	2100      	movs	r1, #0
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f004 fd43 	bl	8008a46 <memset>
}
 8003fc0:	bf00      	nop
 8003fc2:	bd80      	pop	{r7, pc}
 8003fc4:	2000000c 	.word	0x2000000c

08003fc8 <SSD1327_BeginFrame>:

void SSD1327_BeginFrame(void){
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	af00      	add	r7, sp, #0
    memset(_bufferDraw, 0x00, BUF_SIZE);
 8003fcc:	4b04      	ldr	r3, [pc, #16]	@ (8003fe0 <SSD1327_BeginFrame+0x18>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003fd4:	2100      	movs	r1, #0
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	f004 fd35 	bl	8008a46 <memset>
}
 8003fdc:	bf00      	nop
 8003fde:	bd80      	pop	{r7, pc}
 8003fe0:	2000000c 	.word	0x2000000c

08003fe4 <SSD1327_IsBusy>:

bool SSD1327_IsBusy(void){
 8003fe4:	b480      	push	{r7}
 8003fe6:	af00      	add	r7, sp, #0
    return _ssd1327DMA_Busy;;
 8003fe8:	4b03      	ldr	r3, [pc, #12]	@ (8003ff8 <SSD1327_IsBusy+0x14>)
 8003fea:	781b      	ldrb	r3, [r3, #0]
 8003fec:	b2db      	uxtb	r3, r3
}
 8003fee:	4618      	mov	r0, r3
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff6:	4770      	bx	lr
 8003ff8:	20004cbc 	.word	0x20004cbc

08003ffc <SSD1327_StartDMATransfer>:

static void SSD1327_StartDMATransfer(uint8_t* data, size_t len){
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b082      	sub	sp, #8
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
 8004004:	6039      	str	r1, [r7, #0]
    // ustaw adresy okna (komendy, blokujące – to tylko kilka bajtów)
    SSD1327_CMD(SSD1327_SETCOLUMNADDRESS); SSD1327_CMD(0x00); SSD1327_CMD(0x7F);
 8004006:	2015      	movs	r0, #21
 8004008:	f7ff ff0c 	bl	8003e24 <SSD1327_CMD>
 800400c:	2000      	movs	r0, #0
 800400e:	f7ff ff09 	bl	8003e24 <SSD1327_CMD>
 8004012:	207f      	movs	r0, #127	@ 0x7f
 8004014:	f7ff ff06 	bl	8003e24 <SSD1327_CMD>
    SSD1327_CMD(SSD1327_SETROWADDRESS);    SSD1327_CMD(0x00); SSD1327_CMD(0x7F);
 8004018:	2075      	movs	r0, #117	@ 0x75
 800401a:	f7ff ff03 	bl	8003e24 <SSD1327_CMD>
 800401e:	2000      	movs	r0, #0
 8004020:	f7ff ff00 	bl	8003e24 <SSD1327_CMD>
 8004024:	207f      	movs	r0, #127	@ 0x7f
 8004026:	f7ff fefd 	bl	8003e24 <SSD1327_CMD>

    // DATA: DC=1, CS=0 i DMA
    HAL_GPIO_WritePin(CS_PORT, CS, GPIO_PIN_RESET);
 800402a:	2200      	movs	r2, #0
 800402c:	2110      	movs	r1, #16
 800402e:	480b      	ldr	r0, [pc, #44]	@ (800405c <SSD1327_StartDMATransfer+0x60>)
 8004030:	f002 f95c 	bl	80062ec <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(DC_PORT, DC, GPIO_PIN_SET);
 8004034:	2201      	movs	r2, #1
 8004036:	2120      	movs	r1, #32
 8004038:	4808      	ldr	r0, [pc, #32]	@ (800405c <SSD1327_StartDMATransfer+0x60>)
 800403a:	f002 f957 	bl	80062ec <HAL_GPIO_WritePin>

    _ssd1327DMA_Busy = true;
 800403e:	4b08      	ldr	r3, [pc, #32]	@ (8004060 <SSD1327_StartDMATransfer+0x64>)
 8004040:	2201      	movs	r2, #1
 8004042:	701a      	strb	r2, [r3, #0]
    HAL_SPI_Transmit_DMA(ssd1327_spi, data, len);
 8004044:	4b07      	ldr	r3, [pc, #28]	@ (8004064 <SSD1327_StartDMATransfer+0x68>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	683a      	ldr	r2, [r7, #0]
 800404a:	b292      	uxth	r2, r2
 800404c:	6879      	ldr	r1, [r7, #4]
 800404e:	4618      	mov	r0, r3
 8004050:	f003 fcea 	bl	8007a28 <HAL_SPI_Transmit_DMA>
}
 8004054:	bf00      	nop
 8004056:	3708      	adds	r7, #8
 8004058:	46bd      	mov	sp, r7
 800405a:	bd80      	pop	{r7, pc}
 800405c:	48000400 	.word	0x48000400
 8004060:	20004cbc 	.word	0x20004cbc
 8004064:	20000cb8 	.word	0x20000cb8

08004068 <SSD1327_Present>:

bool SSD1327_Present(void){
 8004068:	b580      	push	{r7, lr}
 800406a:	b082      	sub	sp, #8
 800406c:	af00      	add	r7, sp, #0
    if (_ssd1327DMA_Busy) return false;   // jeszcze nadajemy poprzednią klatkę
 800406e:	4b0e      	ldr	r3, [pc, #56]	@ (80040a8 <SSD1327_Present+0x40>)
 8004070:	781b      	ldrb	r3, [r3, #0]
 8004072:	b2db      	uxtb	r3, r3
 8004074:	2b00      	cmp	r3, #0
 8004076:	d001      	beq.n	800407c <SSD1327_Present+0x14>
 8004078:	2300      	movs	r3, #0
 800407a:	e011      	b.n	80040a0 <SSD1327_Present+0x38>

    // zamiana ról buforów
    uint8_t* tmp = _bufferTx;
 800407c:	4b0b      	ldr	r3, [pc, #44]	@ (80040ac <SSD1327_Present+0x44>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	607b      	str	r3, [r7, #4]
    _bufferTx   = _bufferDraw;
 8004082:	4b0b      	ldr	r3, [pc, #44]	@ (80040b0 <SSD1327_Present+0x48>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a09      	ldr	r2, [pc, #36]	@ (80040ac <SSD1327_Present+0x44>)
 8004088:	6013      	str	r3, [r2, #0]
    _bufferDraw = tmp;
 800408a:	4a09      	ldr	r2, [pc, #36]	@ (80040b0 <SSD1327_Present+0x48>)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6013      	str	r3, [r2, #0]

    // start DMA następnej ramki
    SSD1327_StartDMATransfer(_bufferTx, BUF_SIZE);
 8004090:	4b06      	ldr	r3, [pc, #24]	@ (80040ac <SSD1327_Present+0x44>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004098:	4618      	mov	r0, r3
 800409a:	f7ff ffaf 	bl	8003ffc <SSD1327_StartDMATransfer>
    return true;
 800409e:	2301      	movs	r3, #1
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	3708      	adds	r7, #8
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bd80      	pop	{r7, pc}
 80040a8:	20004cbc 	.word	0x20004cbc
 80040ac:	20000010 	.word	0x20000010
 80040b0:	2000000c 	.word	0x2000000c

080040b4 <SSD1327_SetPixel>:


void SSD1327_SetPixel( int x , int y , uint8_t bw){
 80040b4:	b480      	push	{r7}
 80040b6:	b087      	sub	sp, #28
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	60f8      	str	r0, [r7, #12]
 80040bc:	60b9      	str	r1, [r7, #8]
 80040be:	4613      	mov	r3, r2
 80040c0:	71fb      	strb	r3, [r7, #7]
	if ((x < 0) || (x >= SSD1327_WIDTH) || (y < 0) || (y >= SSD1327_HEIGHT))
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	db41      	blt.n	800414c <SSD1327_SetPixel+0x98>
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	2b7f      	cmp	r3, #127	@ 0x7f
 80040cc:	dc3e      	bgt.n	800414c <SSD1327_SetPixel+0x98>
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	db3b      	blt.n	800414c <SSD1327_SetPixel+0x98>
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	2b7f      	cmp	r3, #127	@ 0x7f
 80040d8:	dc38      	bgt.n	800414c <SSD1327_SetPixel+0x98>
		return;

	uint8_t SelectedCell = _bufferDraw[x/2 + y*(SSD1327_WIDTH/2)];
 80040da:	4b1f      	ldr	r3, [pc, #124]	@ (8004158 <SSD1327_SetPixel+0xa4>)
 80040dc:	681a      	ldr	r2, [r3, #0]
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	0fd9      	lsrs	r1, r3, #31
 80040e2:	440b      	add	r3, r1
 80040e4:	105b      	asrs	r3, r3, #1
 80040e6:	4619      	mov	r1, r3
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	019b      	lsls	r3, r3, #6
 80040ec:	440b      	add	r3, r1
 80040ee:	4413      	add	r3, r2
 80040f0:	781b      	ldrb	r3, [r3, #0]
 80040f2:	75fb      	strb	r3, [r7, #23]

	if(x % 2)
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	f003 0301 	and.w	r3, r3, #1
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d00b      	beq.n	8004116 <SSD1327_SetPixel+0x62>
	{
		SelectedCell &= ~(0x0F);
 80040fe:	7dfb      	ldrb	r3, [r7, #23]
 8004100:	f023 030f 	bic.w	r3, r3, #15
 8004104:	75fb      	strb	r3, [r7, #23]
		SelectedCell |= (0x0F & bw);
 8004106:	79fb      	ldrb	r3, [r7, #7]
 8004108:	f003 030f 	and.w	r3, r3, #15
 800410c:	b2da      	uxtb	r2, r3
 800410e:	7dfb      	ldrb	r3, [r7, #23]
 8004110:	4313      	orrs	r3, r2
 8004112:	75fb      	strb	r3, [r7, #23]
 8004114:	e00c      	b.n	8004130 <SSD1327_SetPixel+0x7c>
	}
	else
	{
		SelectedCell &= ~(0xF0);
 8004116:	7dfb      	ldrb	r3, [r7, #23]
 8004118:	f003 030f 	and.w	r3, r3, #15
 800411c:	75fb      	strb	r3, [r7, #23]
		SelectedCell |= (0xF0 & (bw<<4));
 800411e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004122:	011b      	lsls	r3, r3, #4
 8004124:	b25a      	sxtb	r2, r3
 8004126:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800412a:	4313      	orrs	r3, r2
 800412c:	b25b      	sxtb	r3, r3
 800412e:	75fb      	strb	r3, [r7, #23]
	}

	_bufferDraw[x/2 + y*(SSD1327_WIDTH/2)] = SelectedCell;
 8004130:	4b09      	ldr	r3, [pc, #36]	@ (8004158 <SSD1327_SetPixel+0xa4>)
 8004132:	681a      	ldr	r2, [r3, #0]
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	0fd9      	lsrs	r1, r3, #31
 8004138:	440b      	add	r3, r1
 800413a:	105b      	asrs	r3, r3, #1
 800413c:	4619      	mov	r1, r3
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	019b      	lsls	r3, r3, #6
 8004142:	440b      	add	r3, r1
 8004144:	4413      	add	r3, r2
 8004146:	7dfa      	ldrb	r2, [r7, #23]
 8004148:	701a      	strb	r2, [r3, #0]
 800414a:	e000      	b.n	800414e <SSD1327_SetPixel+0x9a>
		return;
 800414c:	bf00      	nop

//	if ((x < 0) || (x >= SSD1327_WIDTH) || (y < 0) || (y >= SSD1327_HEIGHT))
//		return;
//	if (bw) buffer[x + (y/4)*SSD1327_WIDTH] |= (1<<(y%4));
//	else buffer[x + (y/4)*SSD1327_WIDTH] &= ~(1<<(y%4));
}
 800414e:	371c      	adds	r7, #28
 8004150:	46bd      	mov	sp, r7
 8004152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004156:	4770      	bx	lr
 8004158:	2000000c 	.word	0x2000000c

0800415c <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 800415c:	b580      	push	{r7, lr}
 800415e:	b082      	sub	sp, #8
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]

	if (hspi == ssd1327_spi){
 8004164:	4b08      	ldr	r3, [pc, #32]	@ (8004188 <HAL_SPI_TxCpltCallback+0x2c>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	687a      	ldr	r2, [r7, #4]
 800416a:	429a      	cmp	r2, r3
 800416c:	d107      	bne.n	800417e <HAL_SPI_TxCpltCallback+0x22>
	        HAL_GPIO_WritePin(CS_PORT, CS, GPIO_PIN_SET);   // koniec ramki
 800416e:	2201      	movs	r2, #1
 8004170:	2110      	movs	r1, #16
 8004172:	4806      	ldr	r0, [pc, #24]	@ (800418c <HAL_SPI_TxCpltCallback+0x30>)
 8004174:	f002 f8ba 	bl	80062ec <HAL_GPIO_WritePin>
	        _ssd1327DMA_Busy = false;
 8004178:	4b05      	ldr	r3, [pc, #20]	@ (8004190 <HAL_SPI_TxCpltCallback+0x34>)
 800417a:	2200      	movs	r2, #0
 800417c:	701a      	strb	r2, [r3, #0]
	    }
}
 800417e:	bf00      	nop
 8004180:	3708      	adds	r7, #8
 8004182:	46bd      	mov	sp, r7
 8004184:	bd80      	pop	{r7, pc}
 8004186:	bf00      	nop
 8004188:	20000cb8 	.word	0x20000cb8
 800418c:	48000400 	.word	0x48000400
 8004190:	20004cbc 	.word	0x20004cbc

08004194 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004194:	b480      	push	{r7}
 8004196:	b083      	sub	sp, #12
 8004198:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800419a:	4b0f      	ldr	r3, [pc, #60]	@ (80041d8 <HAL_MspInit+0x44>)
 800419c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800419e:	4a0e      	ldr	r2, [pc, #56]	@ (80041d8 <HAL_MspInit+0x44>)
 80041a0:	f043 0301 	orr.w	r3, r3, #1
 80041a4:	6613      	str	r3, [r2, #96]	@ 0x60
 80041a6:	4b0c      	ldr	r3, [pc, #48]	@ (80041d8 <HAL_MspInit+0x44>)
 80041a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041aa:	f003 0301 	and.w	r3, r3, #1
 80041ae:	607b      	str	r3, [r7, #4]
 80041b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80041b2:	4b09      	ldr	r3, [pc, #36]	@ (80041d8 <HAL_MspInit+0x44>)
 80041b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041b6:	4a08      	ldr	r2, [pc, #32]	@ (80041d8 <HAL_MspInit+0x44>)
 80041b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80041bc:	6593      	str	r3, [r2, #88]	@ 0x58
 80041be:	4b06      	ldr	r3, [pc, #24]	@ (80041d8 <HAL_MspInit+0x44>)
 80041c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041c6:	603b      	str	r3, [r7, #0]
 80041c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80041ca:	bf00      	nop
 80041cc:	370c      	adds	r7, #12
 80041ce:	46bd      	mov	sp, r7
 80041d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d4:	4770      	bx	lr
 80041d6:	bf00      	nop
 80041d8:	40021000 	.word	0x40021000

080041dc <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b09e      	sub	sp, #120	@ 0x78
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041e4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80041e8:	2200      	movs	r2, #0
 80041ea:	601a      	str	r2, [r3, #0]
 80041ec:	605a      	str	r2, [r3, #4]
 80041ee:	609a      	str	r2, [r3, #8]
 80041f0:	60da      	str	r2, [r3, #12]
 80041f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80041f4:	f107 0310 	add.w	r3, r7, #16
 80041f8:	2254      	movs	r2, #84	@ 0x54
 80041fa:	2100      	movs	r1, #0
 80041fc:	4618      	mov	r0, r3
 80041fe:	f004 fc22 	bl	8008a46 <memset>
  if(hadc->Instance==ADC1)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a25      	ldr	r2, [pc, #148]	@ (800429c <HAL_ADC_MspInit+0xc0>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d143      	bne.n	8004294 <HAL_ADC_MspInit+0xb8>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800420c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004210:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8004212:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8004216:	65bb      	str	r3, [r7, #88]	@ 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8004218:	2301      	movs	r3, #1
 800421a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800421c:	2301      	movs	r3, #1
 800421e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8004220:	2310      	movs	r3, #16
 8004222:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8004224:	2307      	movs	r3, #7
 8004226:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8004228:	2302      	movs	r3, #2
 800422a:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800422c:	2302      	movs	r3, #2
 800422e:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8004230:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004234:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004236:	f107 0310 	add.w	r3, r7, #16
 800423a:	4618      	mov	r0, r3
 800423c:	f002 fee2 	bl	8007004 <HAL_RCCEx_PeriphCLKConfig>
 8004240:	4603      	mov	r3, r0
 8004242:	2b00      	cmp	r3, #0
 8004244:	d001      	beq.n	800424a <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8004246:	f7ff fde7 	bl	8003e18 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800424a:	4b15      	ldr	r3, [pc, #84]	@ (80042a0 <HAL_ADC_MspInit+0xc4>)
 800424c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800424e:	4a14      	ldr	r2, [pc, #80]	@ (80042a0 <HAL_ADC_MspInit+0xc4>)
 8004250:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004254:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004256:	4b12      	ldr	r3, [pc, #72]	@ (80042a0 <HAL_ADC_MspInit+0xc4>)
 8004258:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800425a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800425e:	60fb      	str	r3, [r7, #12]
 8004260:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004262:	4b0f      	ldr	r3, [pc, #60]	@ (80042a0 <HAL_ADC_MspInit+0xc4>)
 8004264:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004266:	4a0e      	ldr	r2, [pc, #56]	@ (80042a0 <HAL_ADC_MspInit+0xc4>)
 8004268:	f043 0301 	orr.w	r3, r3, #1
 800426c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800426e:	4b0c      	ldr	r3, [pc, #48]	@ (80042a0 <HAL_ADC_MspInit+0xc4>)
 8004270:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004272:	f003 0301 	and.w	r3, r3, #1
 8004276:	60bb      	str	r3, [r7, #8]
 8004278:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800427a:	2301      	movs	r3, #1
 800427c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800427e:	230b      	movs	r3, #11
 8004280:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004282:	2300      	movs	r3, #0
 8004284:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004286:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800428a:	4619      	mov	r1, r3
 800428c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004290:	f001 feaa 	bl	8005fe8 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8004294:	bf00      	nop
 8004296:	3778      	adds	r7, #120	@ 0x78
 8004298:	46bd      	mov	sp, r7
 800429a:	bd80      	pop	{r7, pc}
 800429c:	50040000 	.word	0x50040000
 80042a0:	40021000 	.word	0x40021000

080042a4 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b08a      	sub	sp, #40	@ 0x28
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042ac:	f107 0314 	add.w	r3, r7, #20
 80042b0:	2200      	movs	r2, #0
 80042b2:	601a      	str	r2, [r3, #0]
 80042b4:	605a      	str	r2, [r3, #4]
 80042b6:	609a      	str	r2, [r3, #8]
 80042b8:	60da      	str	r2, [r3, #12]
 80042ba:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a2c      	ldr	r2, [pc, #176]	@ (8004374 <HAL_SPI_MspInit+0xd0>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d151      	bne.n	800436a <HAL_SPI_MspInit+0xc6>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80042c6:	4b2c      	ldr	r3, [pc, #176]	@ (8004378 <HAL_SPI_MspInit+0xd4>)
 80042c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042ca:	4a2b      	ldr	r2, [pc, #172]	@ (8004378 <HAL_SPI_MspInit+0xd4>)
 80042cc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80042d0:	6613      	str	r3, [r2, #96]	@ 0x60
 80042d2:	4b29      	ldr	r3, [pc, #164]	@ (8004378 <HAL_SPI_MspInit+0xd4>)
 80042d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042d6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80042da:	613b      	str	r3, [r7, #16]
 80042dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80042de:	4b26      	ldr	r3, [pc, #152]	@ (8004378 <HAL_SPI_MspInit+0xd4>)
 80042e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042e2:	4a25      	ldr	r2, [pc, #148]	@ (8004378 <HAL_SPI_MspInit+0xd4>)
 80042e4:	f043 0301 	orr.w	r3, r3, #1
 80042e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80042ea:	4b23      	ldr	r3, [pc, #140]	@ (8004378 <HAL_SPI_MspInit+0xd4>)
 80042ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042ee:	f003 0301 	and.w	r3, r3, #1
 80042f2:	60fb      	str	r3, [r7, #12]
 80042f4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_7;
 80042f6:	2382      	movs	r3, #130	@ 0x82
 80042f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042fa:	2302      	movs	r3, #2
 80042fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042fe:	2300      	movs	r3, #0
 8004300:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004302:	2303      	movs	r3, #3
 8004304:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004306:	2305      	movs	r3, #5
 8004308:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800430a:	f107 0314 	add.w	r3, r7, #20
 800430e:	4619      	mov	r1, r3
 8004310:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004314:	f001 fe68 	bl	8005fe8 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8004318:	4b18      	ldr	r3, [pc, #96]	@ (800437c <HAL_SPI_MspInit+0xd8>)
 800431a:	4a19      	ldr	r2, [pc, #100]	@ (8004380 <HAL_SPI_MspInit+0xdc>)
 800431c:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_1;
 800431e:	4b17      	ldr	r3, [pc, #92]	@ (800437c <HAL_SPI_MspInit+0xd8>)
 8004320:	2201      	movs	r2, #1
 8004322:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004324:	4b15      	ldr	r3, [pc, #84]	@ (800437c <HAL_SPI_MspInit+0xd8>)
 8004326:	2210      	movs	r2, #16
 8004328:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800432a:	4b14      	ldr	r3, [pc, #80]	@ (800437c <HAL_SPI_MspInit+0xd8>)
 800432c:	2200      	movs	r2, #0
 800432e:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004330:	4b12      	ldr	r3, [pc, #72]	@ (800437c <HAL_SPI_MspInit+0xd8>)
 8004332:	2280      	movs	r2, #128	@ 0x80
 8004334:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004336:	4b11      	ldr	r3, [pc, #68]	@ (800437c <HAL_SPI_MspInit+0xd8>)
 8004338:	2200      	movs	r2, #0
 800433a:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800433c:	4b0f      	ldr	r3, [pc, #60]	@ (800437c <HAL_SPI_MspInit+0xd8>)
 800433e:	2200      	movs	r2, #0
 8004340:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8004342:	4b0e      	ldr	r3, [pc, #56]	@ (800437c <HAL_SPI_MspInit+0xd8>)
 8004344:	2200      	movs	r2, #0
 8004346:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004348:	4b0c      	ldr	r3, [pc, #48]	@ (800437c <HAL_SPI_MspInit+0xd8>)
 800434a:	2200      	movs	r2, #0
 800434c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800434e:	480b      	ldr	r0, [pc, #44]	@ (800437c <HAL_SPI_MspInit+0xd8>)
 8004350:	f001 fc12 	bl	8005b78 <HAL_DMA_Init>
 8004354:	4603      	mov	r3, r0
 8004356:	2b00      	cmp	r3, #0
 8004358:	d001      	beq.n	800435e <HAL_SPI_MspInit+0xba>
    {
      Error_Handler();
 800435a:	f7ff fd5d 	bl	8003e18 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	4a06      	ldr	r2, [pc, #24]	@ (800437c <HAL_SPI_MspInit+0xd8>)
 8004362:	655a      	str	r2, [r3, #84]	@ 0x54
 8004364:	4a05      	ldr	r2, [pc, #20]	@ (800437c <HAL_SPI_MspInit+0xd8>)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 800436a:	bf00      	nop
 800436c:	3728      	adds	r7, #40	@ 0x28
 800436e:	46bd      	mov	sp, r7
 8004370:	bd80      	pop	{r7, pc}
 8004372:	bf00      	nop
 8004374:	40013000 	.word	0x40013000
 8004378:	40021000 	.word	0x40021000
 800437c:	20000c10 	.word	0x20000c10
 8004380:	40020030 	.word	0x40020030

08004384 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004384:	b480      	push	{r7}
 8004386:	b085      	sub	sp, #20
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a0a      	ldr	r2, [pc, #40]	@ (80043bc <HAL_TIM_Base_MspInit+0x38>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d10b      	bne.n	80043ae <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM6_MspInit 0 */

    /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8004396:	4b0a      	ldr	r3, [pc, #40]	@ (80043c0 <HAL_TIM_Base_MspInit+0x3c>)
 8004398:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800439a:	4a09      	ldr	r2, [pc, #36]	@ (80043c0 <HAL_TIM_Base_MspInit+0x3c>)
 800439c:	f043 0310 	orr.w	r3, r3, #16
 80043a0:	6593      	str	r3, [r2, #88]	@ 0x58
 80043a2:	4b07      	ldr	r3, [pc, #28]	@ (80043c0 <HAL_TIM_Base_MspInit+0x3c>)
 80043a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043a6:	f003 0310 	and.w	r3, r3, #16
 80043aa:	60fb      	str	r3, [r7, #12]
 80043ac:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM6_MspInit 1 */

  }

}
 80043ae:	bf00      	nop
 80043b0:	3714      	adds	r7, #20
 80043b2:	46bd      	mov	sp, r7
 80043b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b8:	4770      	bx	lr
 80043ba:	bf00      	nop
 80043bc:	40001000 	.word	0x40001000
 80043c0:	40021000 	.word	0x40021000

080043c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80043c4:	b480      	push	{r7}
 80043c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80043c8:	bf00      	nop
 80043ca:	e7fd      	b.n	80043c8 <NMI_Handler+0x4>

080043cc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80043cc:	b480      	push	{r7}
 80043ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80043d0:	bf00      	nop
 80043d2:	e7fd      	b.n	80043d0 <HardFault_Handler+0x4>

080043d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80043d4:	b480      	push	{r7}
 80043d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80043d8:	bf00      	nop
 80043da:	e7fd      	b.n	80043d8 <MemManage_Handler+0x4>

080043dc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80043dc:	b480      	push	{r7}
 80043de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80043e0:	bf00      	nop
 80043e2:	e7fd      	b.n	80043e0 <BusFault_Handler+0x4>

080043e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80043e4:	b480      	push	{r7}
 80043e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80043e8:	bf00      	nop
 80043ea:	e7fd      	b.n	80043e8 <UsageFault_Handler+0x4>

080043ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80043ec:	b480      	push	{r7}
 80043ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80043f0:	bf00      	nop
 80043f2:	46bd      	mov	sp, r7
 80043f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f8:	4770      	bx	lr

080043fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80043fa:	b480      	push	{r7}
 80043fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80043fe:	bf00      	nop
 8004400:	46bd      	mov	sp, r7
 8004402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004406:	4770      	bx	lr

08004408 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004408:	b480      	push	{r7}
 800440a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800440c:	bf00      	nop
 800440e:	46bd      	mov	sp, r7
 8004410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004414:	4770      	bx	lr

08004416 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004416:	b580      	push	{r7, lr}
 8004418:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800441a:	f000 f977 	bl	800470c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800441e:	bf00      	nop
 8004420:	bd80      	pop	{r7, pc}
	...

08004424 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8004428:	4802      	ldr	r0, [pc, #8]	@ (8004434 <DMA1_Channel3_IRQHandler+0x10>)
 800442a:	f001 fcfe 	bl	8005e2a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800442e:	bf00      	nop
 8004430:	bd80      	pop	{r7, pc}
 8004432:	bf00      	nop
 8004434:	20000c10 	.word	0x20000c10

08004438 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 800443c:	4802      	ldr	r0, [pc, #8]	@ (8004448 <SPI1_IRQHandler+0x10>)
 800443e:	f003 fbe1 	bl	8007c04 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8004442:	bf00      	nop
 8004444:	bd80      	pop	{r7, pc}
 8004446:	bf00      	nop
 8004448:	20000bac 	.word	0x20000bac

0800444c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004450:	4802      	ldr	r0, [pc, #8]	@ (800445c <TIM6_DAC_IRQHandler+0x10>)
 8004452:	f003 ff91 	bl	8008378 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8004456:	bf00      	nop
 8004458:	bd80      	pop	{r7, pc}
 800445a:	bf00      	nop
 800445c:	20000c58 	.word	0x20000c58

08004460 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004460:	b480      	push	{r7}
 8004462:	af00      	add	r7, sp, #0
	return 1;
 8004464:	2301      	movs	r3, #1
}
 8004466:	4618      	mov	r0, r3
 8004468:	46bd      	mov	sp, r7
 800446a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446e:	4770      	bx	lr

08004470 <_kill>:

int _kill(int pid, int sig)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b082      	sub	sp, #8
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
 8004478:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800447a:	f004 fb33 	bl	8008ae4 <__errno>
 800447e:	4603      	mov	r3, r0
 8004480:	2216      	movs	r2, #22
 8004482:	601a      	str	r2, [r3, #0]
	return -1;
 8004484:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004488:	4618      	mov	r0, r3
 800448a:	3708      	adds	r7, #8
 800448c:	46bd      	mov	sp, r7
 800448e:	bd80      	pop	{r7, pc}

08004490 <_exit>:

void _exit (int status)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b082      	sub	sp, #8
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004498:	f04f 31ff 	mov.w	r1, #4294967295
 800449c:	6878      	ldr	r0, [r7, #4]
 800449e:	f7ff ffe7 	bl	8004470 <_kill>
	while (1) {}		/* Make sure we hang here */
 80044a2:	bf00      	nop
 80044a4:	e7fd      	b.n	80044a2 <_exit+0x12>

080044a6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80044a6:	b580      	push	{r7, lr}
 80044a8:	b086      	sub	sp, #24
 80044aa:	af00      	add	r7, sp, #0
 80044ac:	60f8      	str	r0, [r7, #12]
 80044ae:	60b9      	str	r1, [r7, #8]
 80044b0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80044b2:	2300      	movs	r3, #0
 80044b4:	617b      	str	r3, [r7, #20]
 80044b6:	e00a      	b.n	80044ce <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80044b8:	f3af 8000 	nop.w
 80044bc:	4601      	mov	r1, r0
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	1c5a      	adds	r2, r3, #1
 80044c2:	60ba      	str	r2, [r7, #8]
 80044c4:	b2ca      	uxtb	r2, r1
 80044c6:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80044c8:	697b      	ldr	r3, [r7, #20]
 80044ca:	3301      	adds	r3, #1
 80044cc:	617b      	str	r3, [r7, #20]
 80044ce:	697a      	ldr	r2, [r7, #20]
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	429a      	cmp	r2, r3
 80044d4:	dbf0      	blt.n	80044b8 <_read+0x12>
	}

return len;
 80044d6:	687b      	ldr	r3, [r7, #4]
}
 80044d8:	4618      	mov	r0, r3
 80044da:	3718      	adds	r7, #24
 80044dc:	46bd      	mov	sp, r7
 80044de:	bd80      	pop	{r7, pc}

080044e0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b086      	sub	sp, #24
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	60f8      	str	r0, [r7, #12]
 80044e8:	60b9      	str	r1, [r7, #8]
 80044ea:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80044ec:	2300      	movs	r3, #0
 80044ee:	617b      	str	r3, [r7, #20]
 80044f0:	e009      	b.n	8004506 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	1c5a      	adds	r2, r3, #1
 80044f6:	60ba      	str	r2, [r7, #8]
 80044f8:	781b      	ldrb	r3, [r3, #0]
 80044fa:	4618      	mov	r0, r3
 80044fc:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004500:	697b      	ldr	r3, [r7, #20]
 8004502:	3301      	adds	r3, #1
 8004504:	617b      	str	r3, [r7, #20]
 8004506:	697a      	ldr	r2, [r7, #20]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	429a      	cmp	r2, r3
 800450c:	dbf1      	blt.n	80044f2 <_write+0x12>
	}
	return len;
 800450e:	687b      	ldr	r3, [r7, #4]
}
 8004510:	4618      	mov	r0, r3
 8004512:	3718      	adds	r7, #24
 8004514:	46bd      	mov	sp, r7
 8004516:	bd80      	pop	{r7, pc}

08004518 <_close>:

int _close(int file)
{
 8004518:	b480      	push	{r7}
 800451a:	b083      	sub	sp, #12
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
	return -1;
 8004520:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004524:	4618      	mov	r0, r3
 8004526:	370c      	adds	r7, #12
 8004528:	46bd      	mov	sp, r7
 800452a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452e:	4770      	bx	lr

08004530 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004530:	b480      	push	{r7}
 8004532:	b083      	sub	sp, #12
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
 8004538:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004540:	605a      	str	r2, [r3, #4]
	return 0;
 8004542:	2300      	movs	r3, #0
}
 8004544:	4618      	mov	r0, r3
 8004546:	370c      	adds	r7, #12
 8004548:	46bd      	mov	sp, r7
 800454a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454e:	4770      	bx	lr

08004550 <_isatty>:

int _isatty(int file)
{
 8004550:	b480      	push	{r7}
 8004552:	b083      	sub	sp, #12
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
	return 1;
 8004558:	2301      	movs	r3, #1
}
 800455a:	4618      	mov	r0, r3
 800455c:	370c      	adds	r7, #12
 800455e:	46bd      	mov	sp, r7
 8004560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004564:	4770      	bx	lr

08004566 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004566:	b480      	push	{r7}
 8004568:	b085      	sub	sp, #20
 800456a:	af00      	add	r7, sp, #0
 800456c:	60f8      	str	r0, [r7, #12]
 800456e:	60b9      	str	r1, [r7, #8]
 8004570:	607a      	str	r2, [r7, #4]
	return 0;
 8004572:	2300      	movs	r3, #0
}
 8004574:	4618      	mov	r0, r3
 8004576:	3714      	adds	r7, #20
 8004578:	46bd      	mov	sp, r7
 800457a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457e:	4770      	bx	lr

08004580 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b086      	sub	sp, #24
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004588:	4a14      	ldr	r2, [pc, #80]	@ (80045dc <_sbrk+0x5c>)
 800458a:	4b15      	ldr	r3, [pc, #84]	@ (80045e0 <_sbrk+0x60>)
 800458c:	1ad3      	subs	r3, r2, r3
 800458e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004594:	4b13      	ldr	r3, [pc, #76]	@ (80045e4 <_sbrk+0x64>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d102      	bne.n	80045a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800459c:	4b11      	ldr	r3, [pc, #68]	@ (80045e4 <_sbrk+0x64>)
 800459e:	4a12      	ldr	r2, [pc, #72]	@ (80045e8 <_sbrk+0x68>)
 80045a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80045a2:	4b10      	ldr	r3, [pc, #64]	@ (80045e4 <_sbrk+0x64>)
 80045a4:	681a      	ldr	r2, [r3, #0]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	4413      	add	r3, r2
 80045aa:	693a      	ldr	r2, [r7, #16]
 80045ac:	429a      	cmp	r2, r3
 80045ae:	d207      	bcs.n	80045c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80045b0:	f004 fa98 	bl	8008ae4 <__errno>
 80045b4:	4603      	mov	r3, r0
 80045b6:	220c      	movs	r2, #12
 80045b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80045ba:	f04f 33ff 	mov.w	r3, #4294967295
 80045be:	e009      	b.n	80045d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80045c0:	4b08      	ldr	r3, [pc, #32]	@ (80045e4 <_sbrk+0x64>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80045c6:	4b07      	ldr	r3, [pc, #28]	@ (80045e4 <_sbrk+0x64>)
 80045c8:	681a      	ldr	r2, [r3, #0]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	4413      	add	r3, r2
 80045ce:	4a05      	ldr	r2, [pc, #20]	@ (80045e4 <_sbrk+0x64>)
 80045d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80045d2:	68fb      	ldr	r3, [r7, #12]
}
 80045d4:	4618      	mov	r0, r3
 80045d6:	3718      	adds	r7, #24
 80045d8:	46bd      	mov	sp, r7
 80045da:	bd80      	pop	{r7, pc}
 80045dc:	20010000 	.word	0x20010000
 80045e0:	00000400 	.word	0x00000400
 80045e4:	20004cc0 	.word	0x20004cc0
 80045e8:	20004e18 	.word	0x20004e18

080045ec <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80045ec:	b480      	push	{r7}
 80045ee:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80045f0:	4b06      	ldr	r3, [pc, #24]	@ (800460c <SystemInit+0x20>)
 80045f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045f6:	4a05      	ldr	r2, [pc, #20]	@ (800460c <SystemInit+0x20>)
 80045f8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80045fc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8004600:	bf00      	nop
 8004602:	46bd      	mov	sp, r7
 8004604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004608:	4770      	bx	lr
 800460a:	bf00      	nop
 800460c:	e000ed00 	.word	0xe000ed00

08004610 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8004610:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004648 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004614:	f7ff ffea 	bl	80045ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004618:	480c      	ldr	r0, [pc, #48]	@ (800464c <LoopForever+0x6>)
  ldr r1, =_edata
 800461a:	490d      	ldr	r1, [pc, #52]	@ (8004650 <LoopForever+0xa>)
  ldr r2, =_sidata
 800461c:	4a0d      	ldr	r2, [pc, #52]	@ (8004654 <LoopForever+0xe>)
  movs r3, #0
 800461e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004620:	e002      	b.n	8004628 <LoopCopyDataInit>

08004622 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004622:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004624:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004626:	3304      	adds	r3, #4

08004628 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004628:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800462a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800462c:	d3f9      	bcc.n	8004622 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800462e:	4a0a      	ldr	r2, [pc, #40]	@ (8004658 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004630:	4c0a      	ldr	r4, [pc, #40]	@ (800465c <LoopForever+0x16>)
  movs r3, #0
 8004632:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004634:	e001      	b.n	800463a <LoopFillZerobss>

08004636 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004636:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004638:	3204      	adds	r2, #4

0800463a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800463a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800463c:	d3fb      	bcc.n	8004636 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800463e:	f004 fa57 	bl	8008af0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004642:	f7ff f813 	bl	800366c <main>

08004646 <LoopForever>:

LoopForever:
    b LoopForever
 8004646:	e7fe      	b.n	8004646 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8004648:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800464c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004650:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8004654:	0800af98 	.word	0x0800af98
  ldr r2, =_sbss
 8004658:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 800465c:	20004e14 	.word	0x20004e14

08004660 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004660:	e7fe      	b.n	8004660 <ADC1_IRQHandler>

08004662 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004662:	b580      	push	{r7, lr}
 8004664:	b082      	sub	sp, #8
 8004666:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004668:	2300      	movs	r3, #0
 800466a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800466c:	2003      	movs	r0, #3
 800466e:	f001 fa41 	bl	8005af4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004672:	200f      	movs	r0, #15
 8004674:	f000 f80e 	bl	8004694 <HAL_InitTick>
 8004678:	4603      	mov	r3, r0
 800467a:	2b00      	cmp	r3, #0
 800467c:	d002      	beq.n	8004684 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800467e:	2301      	movs	r3, #1
 8004680:	71fb      	strb	r3, [r7, #7]
 8004682:	e001      	b.n	8004688 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004684:	f7ff fd86 	bl	8004194 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004688:	79fb      	ldrb	r3, [r7, #7]
}
 800468a:	4618      	mov	r0, r3
 800468c:	3708      	adds	r7, #8
 800468e:	46bd      	mov	sp, r7
 8004690:	bd80      	pop	{r7, pc}
	...

08004694 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b084      	sub	sp, #16
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800469c:	2300      	movs	r3, #0
 800469e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80046a0:	4b17      	ldr	r3, [pc, #92]	@ (8004700 <HAL_InitTick+0x6c>)
 80046a2:	781b      	ldrb	r3, [r3, #0]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d023      	beq.n	80046f0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80046a8:	4b16      	ldr	r3, [pc, #88]	@ (8004704 <HAL_InitTick+0x70>)
 80046aa:	681a      	ldr	r2, [r3, #0]
 80046ac:	4b14      	ldr	r3, [pc, #80]	@ (8004700 <HAL_InitTick+0x6c>)
 80046ae:	781b      	ldrb	r3, [r3, #0]
 80046b0:	4619      	mov	r1, r3
 80046b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80046b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80046ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80046be:	4618      	mov	r0, r3
 80046c0:	f001 fa4d 	bl	8005b5e <HAL_SYSTICK_Config>
 80046c4:	4603      	mov	r3, r0
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d10f      	bne.n	80046ea <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2b0f      	cmp	r3, #15
 80046ce:	d809      	bhi.n	80046e4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80046d0:	2200      	movs	r2, #0
 80046d2:	6879      	ldr	r1, [r7, #4]
 80046d4:	f04f 30ff 	mov.w	r0, #4294967295
 80046d8:	f001 fa17 	bl	8005b0a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80046dc:	4a0a      	ldr	r2, [pc, #40]	@ (8004708 <HAL_InitTick+0x74>)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6013      	str	r3, [r2, #0]
 80046e2:	e007      	b.n	80046f4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80046e4:	2301      	movs	r3, #1
 80046e6:	73fb      	strb	r3, [r7, #15]
 80046e8:	e004      	b.n	80046f4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80046ea:	2301      	movs	r3, #1
 80046ec:	73fb      	strb	r3, [r7, #15]
 80046ee:	e001      	b.n	80046f4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80046f0:	2301      	movs	r3, #1
 80046f2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80046f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80046f6:	4618      	mov	r0, r3
 80046f8:	3710      	adds	r7, #16
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bd80      	pop	{r7, pc}
 80046fe:	bf00      	nop
 8004700:	2000001c 	.word	0x2000001c
 8004704:	20000014 	.word	0x20000014
 8004708:	20000018 	.word	0x20000018

0800470c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800470c:	b480      	push	{r7}
 800470e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004710:	4b06      	ldr	r3, [pc, #24]	@ (800472c <HAL_IncTick+0x20>)
 8004712:	781b      	ldrb	r3, [r3, #0]
 8004714:	461a      	mov	r2, r3
 8004716:	4b06      	ldr	r3, [pc, #24]	@ (8004730 <HAL_IncTick+0x24>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4413      	add	r3, r2
 800471c:	4a04      	ldr	r2, [pc, #16]	@ (8004730 <HAL_IncTick+0x24>)
 800471e:	6013      	str	r3, [r2, #0]
}
 8004720:	bf00      	nop
 8004722:	46bd      	mov	sp, r7
 8004724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004728:	4770      	bx	lr
 800472a:	bf00      	nop
 800472c:	2000001c 	.word	0x2000001c
 8004730:	20004cc4 	.word	0x20004cc4

08004734 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004734:	b480      	push	{r7}
 8004736:	af00      	add	r7, sp, #0
  return uwTick;
 8004738:	4b03      	ldr	r3, [pc, #12]	@ (8004748 <HAL_GetTick+0x14>)
 800473a:	681b      	ldr	r3, [r3, #0]
}
 800473c:	4618      	mov	r0, r3
 800473e:	46bd      	mov	sp, r7
 8004740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004744:	4770      	bx	lr
 8004746:	bf00      	nop
 8004748:	20004cc4 	.word	0x20004cc4

0800474c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b084      	sub	sp, #16
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004754:	f7ff ffee 	bl	8004734 <HAL_GetTick>
 8004758:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004764:	d005      	beq.n	8004772 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8004766:	4b0a      	ldr	r3, [pc, #40]	@ (8004790 <HAL_Delay+0x44>)
 8004768:	781b      	ldrb	r3, [r3, #0]
 800476a:	461a      	mov	r2, r3
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	4413      	add	r3, r2
 8004770:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004772:	bf00      	nop
 8004774:	f7ff ffde 	bl	8004734 <HAL_GetTick>
 8004778:	4602      	mov	r2, r0
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	1ad3      	subs	r3, r2, r3
 800477e:	68fa      	ldr	r2, [r7, #12]
 8004780:	429a      	cmp	r2, r3
 8004782:	d8f7      	bhi.n	8004774 <HAL_Delay+0x28>
  {
  }
}
 8004784:	bf00      	nop
 8004786:	bf00      	nop
 8004788:	3710      	adds	r7, #16
 800478a:	46bd      	mov	sp, r7
 800478c:	bd80      	pop	{r7, pc}
 800478e:	bf00      	nop
 8004790:	2000001c 	.word	0x2000001c

08004794 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8004794:	b480      	push	{r7}
 8004796:	b083      	sub	sp, #12
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
 800479c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	689b      	ldr	r3, [r3, #8]
 80047a2:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	431a      	orrs	r2, r3
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	609a      	str	r2, [r3, #8]
}
 80047ae:	bf00      	nop
 80047b0:	370c      	adds	r7, #12
 80047b2:	46bd      	mov	sp, r7
 80047b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b8:	4770      	bx	lr

080047ba <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80047ba:	b480      	push	{r7}
 80047bc:	b083      	sub	sp, #12
 80047be:	af00      	add	r7, sp, #0
 80047c0:	6078      	str	r0, [r7, #4]
 80047c2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	689b      	ldr	r3, [r3, #8]
 80047c8:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	431a      	orrs	r2, r3
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	609a      	str	r2, [r3, #8]
}
 80047d4:	bf00      	nop
 80047d6:	370c      	adds	r7, #12
 80047d8:	46bd      	mov	sp, r7
 80047da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047de:	4770      	bx	lr

080047e0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80047e0:	b480      	push	{r7}
 80047e2:	b083      	sub	sp, #12
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	689b      	ldr	r3, [r3, #8]
 80047ec:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80047f0:	4618      	mov	r0, r3
 80047f2:	370c      	adds	r7, #12
 80047f4:	46bd      	mov	sp, r7
 80047f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fa:	4770      	bx	lr

080047fc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b087      	sub	sp, #28
 8004800:	af00      	add	r7, sp, #0
 8004802:	60f8      	str	r0, [r7, #12]
 8004804:	60b9      	str	r1, [r7, #8]
 8004806:	607a      	str	r2, [r7, #4]
 8004808:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	3360      	adds	r3, #96	@ 0x60
 800480e:	461a      	mov	r2, r3
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	009b      	lsls	r3, r3, #2
 8004814:	4413      	add	r3, r2
 8004816:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004818:	697b      	ldr	r3, [r7, #20]
 800481a:	681a      	ldr	r2, [r3, #0]
 800481c:	4b08      	ldr	r3, [pc, #32]	@ (8004840 <LL_ADC_SetOffset+0x44>)
 800481e:	4013      	ands	r3, r2
 8004820:	687a      	ldr	r2, [r7, #4]
 8004822:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8004826:	683a      	ldr	r2, [r7, #0]
 8004828:	430a      	orrs	r2, r1
 800482a:	4313      	orrs	r3, r2
 800482c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004830:	697b      	ldr	r3, [r7, #20]
 8004832:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8004834:	bf00      	nop
 8004836:	371c      	adds	r7, #28
 8004838:	46bd      	mov	sp, r7
 800483a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483e:	4770      	bx	lr
 8004840:	03fff000 	.word	0x03fff000

08004844 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8004844:	b480      	push	{r7}
 8004846:	b085      	sub	sp, #20
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
 800484c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	3360      	adds	r3, #96	@ 0x60
 8004852:	461a      	mov	r2, r3
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	009b      	lsls	r3, r3, #2
 8004858:	4413      	add	r3, r2
 800485a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8004864:	4618      	mov	r0, r3
 8004866:	3714      	adds	r7, #20
 8004868:	46bd      	mov	sp, r7
 800486a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486e:	4770      	bx	lr

08004870 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8004870:	b480      	push	{r7}
 8004872:	b087      	sub	sp, #28
 8004874:	af00      	add	r7, sp, #0
 8004876:	60f8      	str	r0, [r7, #12]
 8004878:	60b9      	str	r1, [r7, #8]
 800487a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	3360      	adds	r3, #96	@ 0x60
 8004880:	461a      	mov	r2, r3
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	009b      	lsls	r3, r3, #2
 8004886:	4413      	add	r3, r2
 8004888:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800488a:	697b      	ldr	r3, [r7, #20]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	431a      	orrs	r2, r3
 8004896:	697b      	ldr	r3, [r7, #20]
 8004898:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800489a:	bf00      	nop
 800489c:	371c      	adds	r7, #28
 800489e:	46bd      	mov	sp, r7
 80048a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a4:	4770      	bx	lr

080048a6 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80048a6:	b480      	push	{r7}
 80048a8:	b087      	sub	sp, #28
 80048aa:	af00      	add	r7, sp, #0
 80048ac:	60f8      	str	r0, [r7, #12]
 80048ae:	60b9      	str	r1, [r7, #8]
 80048b0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	3330      	adds	r3, #48	@ 0x30
 80048b6:	461a      	mov	r2, r3
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	0a1b      	lsrs	r3, r3, #8
 80048bc:	009b      	lsls	r3, r3, #2
 80048be:	f003 030c 	and.w	r3, r3, #12
 80048c2:	4413      	add	r3, r2
 80048c4:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80048c6:	697b      	ldr	r3, [r7, #20]
 80048c8:	681a      	ldr	r2, [r3, #0]
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	f003 031f 	and.w	r3, r3, #31
 80048d0:	211f      	movs	r1, #31
 80048d2:	fa01 f303 	lsl.w	r3, r1, r3
 80048d6:	43db      	mvns	r3, r3
 80048d8:	401a      	ands	r2, r3
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	0e9b      	lsrs	r3, r3, #26
 80048de:	f003 011f 	and.w	r1, r3, #31
 80048e2:	68bb      	ldr	r3, [r7, #8]
 80048e4:	f003 031f 	and.w	r3, r3, #31
 80048e8:	fa01 f303 	lsl.w	r3, r1, r3
 80048ec:	431a      	orrs	r2, r3
 80048ee:	697b      	ldr	r3, [r7, #20]
 80048f0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80048f2:	bf00      	nop
 80048f4:	371c      	adds	r7, #28
 80048f6:	46bd      	mov	sp, r7
 80048f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fc:	4770      	bx	lr

080048fe <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80048fe:	b480      	push	{r7}
 8004900:	b087      	sub	sp, #28
 8004902:	af00      	add	r7, sp, #0
 8004904:	60f8      	str	r0, [r7, #12]
 8004906:	60b9      	str	r1, [r7, #8]
 8004908:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	3314      	adds	r3, #20
 800490e:	461a      	mov	r2, r3
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	0e5b      	lsrs	r3, r3, #25
 8004914:	009b      	lsls	r3, r3, #2
 8004916:	f003 0304 	and.w	r3, r3, #4
 800491a:	4413      	add	r3, r2
 800491c:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800491e:	697b      	ldr	r3, [r7, #20]
 8004920:	681a      	ldr	r2, [r3, #0]
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	0d1b      	lsrs	r3, r3, #20
 8004926:	f003 031f 	and.w	r3, r3, #31
 800492a:	2107      	movs	r1, #7
 800492c:	fa01 f303 	lsl.w	r3, r1, r3
 8004930:	43db      	mvns	r3, r3
 8004932:	401a      	ands	r2, r3
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	0d1b      	lsrs	r3, r3, #20
 8004938:	f003 031f 	and.w	r3, r3, #31
 800493c:	6879      	ldr	r1, [r7, #4]
 800493e:	fa01 f303 	lsl.w	r3, r1, r3
 8004942:	431a      	orrs	r2, r3
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004948:	bf00      	nop
 800494a:	371c      	adds	r7, #28
 800494c:	46bd      	mov	sp, r7
 800494e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004952:	4770      	bx	lr

08004954 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004954:	b480      	push	{r7}
 8004956:	b085      	sub	sp, #20
 8004958:	af00      	add	r7, sp, #0
 800495a:	60f8      	str	r0, [r7, #12]
 800495c:	60b9      	str	r1, [r7, #8]
 800495e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8004966:	68bb      	ldr	r3, [r7, #8]
 8004968:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800496c:	43db      	mvns	r3, r3
 800496e:	401a      	ands	r2, r3
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	f003 0318 	and.w	r3, r3, #24
 8004976:	4908      	ldr	r1, [pc, #32]	@ (8004998 <LL_ADC_SetChannelSingleDiff+0x44>)
 8004978:	40d9      	lsrs	r1, r3
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	400b      	ands	r3, r1
 800497e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004982:	431a      	orrs	r2, r3
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800498a:	bf00      	nop
 800498c:	3714      	adds	r7, #20
 800498e:	46bd      	mov	sp, r7
 8004990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004994:	4770      	bx	lr
 8004996:	bf00      	nop
 8004998:	0007ffff 	.word	0x0007ffff

0800499c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800499c:	b480      	push	{r7}
 800499e:	b083      	sub	sp, #12
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	689b      	ldr	r3, [r3, #8]
 80049a8:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80049ac:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80049b0:	687a      	ldr	r2, [r7, #4]
 80049b2:	6093      	str	r3, [r2, #8]
}
 80049b4:	bf00      	nop
 80049b6:	370c      	adds	r7, #12
 80049b8:	46bd      	mov	sp, r7
 80049ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049be:	4770      	bx	lr

080049c0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80049c0:	b480      	push	{r7}
 80049c2:	b083      	sub	sp, #12
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	689b      	ldr	r3, [r3, #8]
 80049cc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80049d0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80049d4:	d101      	bne.n	80049da <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80049d6:	2301      	movs	r3, #1
 80049d8:	e000      	b.n	80049dc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80049da:	2300      	movs	r3, #0
}
 80049dc:	4618      	mov	r0, r3
 80049de:	370c      	adds	r7, #12
 80049e0:	46bd      	mov	sp, r7
 80049e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e6:	4770      	bx	lr

080049e8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80049e8:	b480      	push	{r7}
 80049ea:	b083      	sub	sp, #12
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	689b      	ldr	r3, [r3, #8]
 80049f4:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80049f8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80049fc:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004a04:	bf00      	nop
 8004a06:	370c      	adds	r7, #12
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0e:	4770      	bx	lr

08004a10 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8004a10:	b480      	push	{r7}
 8004a12:	b083      	sub	sp, #12
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	689b      	ldr	r3, [r3, #8]
 8004a1c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a20:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004a24:	d101      	bne.n	8004a2a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004a26:	2301      	movs	r3, #1
 8004a28:	e000      	b.n	8004a2c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004a2a:	2300      	movs	r3, #0
}
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	370c      	adds	r7, #12
 8004a30:	46bd      	mov	sp, r7
 8004a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a36:	4770      	bx	lr

08004a38 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	b083      	sub	sp, #12
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	689b      	ldr	r3, [r3, #8]
 8004a44:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004a48:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004a4c:	f043 0201 	orr.w	r2, r3, #1
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004a54:	bf00      	nop
 8004a56:	370c      	adds	r7, #12
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5e:	4770      	bx	lr

08004a60 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8004a60:	b480      	push	{r7}
 8004a62:	b083      	sub	sp, #12
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	689b      	ldr	r3, [r3, #8]
 8004a6c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004a70:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004a74:	f043 0202 	orr.w	r2, r3, #2
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8004a7c:	bf00      	nop
 8004a7e:	370c      	adds	r7, #12
 8004a80:	46bd      	mov	sp, r7
 8004a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a86:	4770      	bx	lr

08004a88 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8004a88:	b480      	push	{r7}
 8004a8a:	b083      	sub	sp, #12
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	689b      	ldr	r3, [r3, #8]
 8004a94:	f003 0301 	and.w	r3, r3, #1
 8004a98:	2b01      	cmp	r3, #1
 8004a9a:	d101      	bne.n	8004aa0 <LL_ADC_IsEnabled+0x18>
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	e000      	b.n	8004aa2 <LL_ADC_IsEnabled+0x1a>
 8004aa0:	2300      	movs	r3, #0
}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	370c      	adds	r7, #12
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aac:	4770      	bx	lr

08004aae <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8004aae:	b480      	push	{r7}
 8004ab0:	b083      	sub	sp, #12
 8004ab2:	af00      	add	r7, sp, #0
 8004ab4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	689b      	ldr	r3, [r3, #8]
 8004aba:	f003 0302 	and.w	r3, r3, #2
 8004abe:	2b02      	cmp	r3, #2
 8004ac0:	d101      	bne.n	8004ac6 <LL_ADC_IsDisableOngoing+0x18>
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	e000      	b.n	8004ac8 <LL_ADC_IsDisableOngoing+0x1a>
 8004ac6:	2300      	movs	r3, #0
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	370c      	adds	r7, #12
 8004acc:	46bd      	mov	sp, r7
 8004ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad2:	4770      	bx	lr

08004ad4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	b083      	sub	sp, #12
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	689b      	ldr	r3, [r3, #8]
 8004ae0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004ae4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004ae8:	f043 0204 	orr.w	r2, r3, #4
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8004af0:	bf00      	nop
 8004af2:	370c      	adds	r7, #12
 8004af4:	46bd      	mov	sp, r7
 8004af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afa:	4770      	bx	lr

08004afc <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004afc:	b480      	push	{r7}
 8004afe:	b083      	sub	sp, #12
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	689b      	ldr	r3, [r3, #8]
 8004b08:	f003 0304 	and.w	r3, r3, #4
 8004b0c:	2b04      	cmp	r3, #4
 8004b0e:	d101      	bne.n	8004b14 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004b10:	2301      	movs	r3, #1
 8004b12:	e000      	b.n	8004b16 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004b14:	2300      	movs	r3, #0
}
 8004b16:	4618      	mov	r0, r3
 8004b18:	370c      	adds	r7, #12
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b20:	4770      	bx	lr

08004b22 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004b22:	b480      	push	{r7}
 8004b24:	b083      	sub	sp, #12
 8004b26:	af00      	add	r7, sp, #0
 8004b28:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	689b      	ldr	r3, [r3, #8]
 8004b2e:	f003 0308 	and.w	r3, r3, #8
 8004b32:	2b08      	cmp	r3, #8
 8004b34:	d101      	bne.n	8004b3a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004b36:	2301      	movs	r3, #1
 8004b38:	e000      	b.n	8004b3c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004b3a:	2300      	movs	r3, #0
}
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	370c      	adds	r7, #12
 8004b40:	46bd      	mov	sp, r7
 8004b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b46:	4770      	bx	lr

08004b48 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b088      	sub	sp, #32
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004b50:	2300      	movs	r3, #0
 8004b52:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8004b54:	2300      	movs	r3, #0
 8004b56:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d101      	bne.n	8004b62 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	e126      	b.n	8004db0 <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	691b      	ldr	r3, [r3, #16]
 8004b66:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d109      	bne.n	8004b84 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004b70:	6878      	ldr	r0, [r7, #4]
 8004b72:	f7ff fb33 	bl	80041dc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4618      	mov	r0, r3
 8004b8a:	f7ff ff19 	bl	80049c0 <LL_ADC_IsDeepPowerDownEnabled>
 8004b8e:	4603      	mov	r3, r0
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d004      	beq.n	8004b9e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4618      	mov	r0, r3
 8004b9a:	f7ff feff 	bl	800499c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	f7ff ff34 	bl	8004a10 <LL_ADC_IsInternalRegulatorEnabled>
 8004ba8:	4603      	mov	r3, r0
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d115      	bne.n	8004bda <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	f7ff ff18 	bl	80049e8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004bb8:	4b7f      	ldr	r3, [pc, #508]	@ (8004db8 <HAL_ADC_Init+0x270>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	099b      	lsrs	r3, r3, #6
 8004bbe:	4a7f      	ldr	r2, [pc, #508]	@ (8004dbc <HAL_ADC_Init+0x274>)
 8004bc0:	fba2 2303 	umull	r2, r3, r2, r3
 8004bc4:	099b      	lsrs	r3, r3, #6
 8004bc6:	3301      	adds	r3, #1
 8004bc8:	005b      	lsls	r3, r3, #1
 8004bca:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004bcc:	e002      	b.n	8004bd4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	3b01      	subs	r3, #1
 8004bd2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d1f9      	bne.n	8004bce <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4618      	mov	r0, r3
 8004be0:	f7ff ff16 	bl	8004a10 <LL_ADC_IsInternalRegulatorEnabled>
 8004be4:	4603      	mov	r3, r0
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d10d      	bne.n	8004c06 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bee:	f043 0210 	orr.w	r2, r3, #16
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bfa:	f043 0201 	orr.w	r2, r3, #1
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8004c02:	2301      	movs	r3, #1
 8004c04:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	f7ff ff76 	bl	8004afc <LL_ADC_REG_IsConversionOngoing>
 8004c10:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c16:	f003 0310 	and.w	r3, r3, #16
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	f040 80bf 	bne.w	8004d9e <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8004c20:	697b      	ldr	r3, [r7, #20]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	f040 80bb 	bne.w	8004d9e <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c2c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8004c30:	f043 0202 	orr.w	r2, r3, #2
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	f7ff ff23 	bl	8004a88 <LL_ADC_IsEnabled>
 8004c42:	4603      	mov	r3, r0
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d10b      	bne.n	8004c60 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004c48:	485d      	ldr	r0, [pc, #372]	@ (8004dc0 <HAL_ADC_Init+0x278>)
 8004c4a:	f7ff ff1d 	bl	8004a88 <LL_ADC_IsEnabled>
 8004c4e:	4603      	mov	r3, r0
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d105      	bne.n	8004c60 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	4619      	mov	r1, r3
 8004c5a:	485a      	ldr	r0, [pc, #360]	@ (8004dc4 <HAL_ADC_Init+0x27c>)
 8004c5c:	f7ff fd9a 	bl	8004794 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	7e5b      	ldrb	r3, [r3, #25]
 8004c64:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004c6a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8004c70:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8004c76:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004c7e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004c80:	4313      	orrs	r3, r2
 8004c82:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004c8a:	2b01      	cmp	r3, #1
 8004c8c:	d106      	bne.n	8004c9c <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c92:	3b01      	subs	r3, #1
 8004c94:	045b      	lsls	r3, r3, #17
 8004c96:	69ba      	ldr	r2, [r7, #24]
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d009      	beq.n	8004cb8 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ca8:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cb0:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004cb2:	69ba      	ldr	r2, [r7, #24]
 8004cb4:	4313      	orrs	r3, r2
 8004cb6:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	68da      	ldr	r2, [r3, #12]
 8004cbe:	4b42      	ldr	r3, [pc, #264]	@ (8004dc8 <HAL_ADC_Init+0x280>)
 8004cc0:	4013      	ands	r3, r2
 8004cc2:	687a      	ldr	r2, [r7, #4]
 8004cc4:	6812      	ldr	r2, [r2, #0]
 8004cc6:	69b9      	ldr	r1, [r7, #24]
 8004cc8:	430b      	orrs	r3, r1
 8004cca:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	f7ff ff26 	bl	8004b22 <LL_ADC_INJ_IsConversionOngoing>
 8004cd6:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004cd8:	697b      	ldr	r3, [r7, #20]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d13d      	bne.n	8004d5a <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004cde:	693b      	ldr	r3, [r7, #16]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d13a      	bne.n	8004d5a <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004ce8:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004cf0:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	68db      	ldr	r3, [r3, #12]
 8004cfc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004d00:	f023 0302 	bic.w	r3, r3, #2
 8004d04:	687a      	ldr	r2, [r7, #4]
 8004d06:	6812      	ldr	r2, [r2, #0]
 8004d08:	69b9      	ldr	r1, [r7, #24]
 8004d0a:	430b      	orrs	r3, r1
 8004d0c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004d14:	2b01      	cmp	r3, #1
 8004d16:	d118      	bne.n	8004d4a <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	691b      	ldr	r3, [r3, #16]
 8004d1e:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004d22:	f023 0304 	bic.w	r3, r3, #4
 8004d26:	687a      	ldr	r2, [r7, #4]
 8004d28:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8004d2a:	687a      	ldr	r2, [r7, #4]
 8004d2c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004d2e:	4311      	orrs	r1, r2
 8004d30:	687a      	ldr	r2, [r7, #4]
 8004d32:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8004d34:	4311      	orrs	r1, r2
 8004d36:	687a      	ldr	r2, [r7, #4]
 8004d38:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004d3a:	430a      	orrs	r2, r1
 8004d3c:	431a      	orrs	r2, r3
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f042 0201 	orr.w	r2, r2, #1
 8004d46:	611a      	str	r2, [r3, #16]
 8004d48:	e007      	b.n	8004d5a <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	691a      	ldr	r2, [r3, #16]
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f022 0201 	bic.w	r2, r2, #1
 8004d58:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	691b      	ldr	r3, [r3, #16]
 8004d5e:	2b01      	cmp	r3, #1
 8004d60:	d10c      	bne.n	8004d7c <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d68:	f023 010f 	bic.w	r1, r3, #15
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	69db      	ldr	r3, [r3, #28]
 8004d70:	1e5a      	subs	r2, r3, #1
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	430a      	orrs	r2, r1
 8004d78:	631a      	str	r2, [r3, #48]	@ 0x30
 8004d7a:	e007      	b.n	8004d8c <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f022 020f 	bic.w	r2, r2, #15
 8004d8a:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d90:	f023 0303 	bic.w	r3, r3, #3
 8004d94:	f043 0201 	orr.w	r2, r3, #1
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	655a      	str	r2, [r3, #84]	@ 0x54
 8004d9c:	e007      	b.n	8004dae <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004da2:	f043 0210 	orr.w	r2, r3, #16
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8004daa:	2301      	movs	r3, #1
 8004dac:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004dae:	7ffb      	ldrb	r3, [r7, #31]
}
 8004db0:	4618      	mov	r0, r3
 8004db2:	3720      	adds	r7, #32
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bd80      	pop	{r7, pc}
 8004db8:	20000014 	.word	0x20000014
 8004dbc:	053e2d63 	.word	0x053e2d63
 8004dc0:	50040000 	.word	0x50040000
 8004dc4:	50040300 	.word	0x50040300
 8004dc8:	fff0c007 	.word	0xfff0c007

08004dcc <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b084      	sub	sp, #16
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4618      	mov	r0, r3
 8004dda:	f7ff fe8f 	bl	8004afc <LL_ADC_REG_IsConversionOngoing>
 8004dde:	4603      	mov	r3, r0
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d14f      	bne.n	8004e84 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004dea:	2b01      	cmp	r3, #1
 8004dec:	d101      	bne.n	8004df2 <HAL_ADC_Start+0x26>
 8004dee:	2302      	movs	r3, #2
 8004df0:	e04b      	b.n	8004e8a <HAL_ADC_Start+0xbe>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2201      	movs	r2, #1
 8004df6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	f000 fc38 	bl	8005670 <ADC_Enable>
 8004e00:	4603      	mov	r3, r0
 8004e02:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8004e04:	7bfb      	ldrb	r3, [r7, #15]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d137      	bne.n	8004e7a <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e0e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004e12:	f023 0301 	bic.w	r3, r3, #1
 8004e16:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	655a      	str	r2, [r3, #84]	@ 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e22:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004e26:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e2a:	d106      	bne.n	8004e3a <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e30:	f023 0206 	bic.w	r2, r3, #6
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	659a      	str	r2, [r3, #88]	@ 0x58
 8004e38:	e002      	b.n	8004e40 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	221c      	movs	r2, #28
 8004e46:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	68db      	ldr	r3, [r3, #12]
 8004e56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d007      	beq.n	8004e6e <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e62:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8004e66:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	655a      	str	r2, [r3, #84]	@ 0x54
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4618      	mov	r0, r3
 8004e74:	f7ff fe2e 	bl	8004ad4 <LL_ADC_REG_StartConversion>
 8004e78:	e006      	b.n	8004e88 <HAL_ADC_Start+0xbc>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8004e82:	e001      	b.n	8004e88 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004e84:	2302      	movs	r3, #2
 8004e86:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8004e88:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	3710      	adds	r7, #16
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bd80      	pop	{r7, pc}

08004e92 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8004e92:	b480      	push	{r7}
 8004e94:	b083      	sub	sp, #12
 8004e96:	af00      	add	r7, sp, #0
 8004e98:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	370c      	adds	r7, #12
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eaa:	4770      	bx	lr

08004eac <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b0b6      	sub	sp, #216	@ 0xd8
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
 8004eb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004ec6:	2b01      	cmp	r3, #1
 8004ec8:	d101      	bne.n	8004ece <HAL_ADC_ConfigChannel+0x22>
 8004eca:	2302      	movs	r3, #2
 8004ecc:	e3bb      	b.n	8005646 <HAL_ADC_ConfigChannel+0x79a>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2201      	movs	r2, #1
 8004ed2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4618      	mov	r0, r3
 8004edc:	f7ff fe0e 	bl	8004afc <LL_ADC_REG_IsConversionOngoing>
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	f040 83a0 	bne.w	8005628 <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	2b05      	cmp	r3, #5
 8004ef6:	d824      	bhi.n	8004f42 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	685b      	ldr	r3, [r3, #4]
 8004efc:	3b02      	subs	r3, #2
 8004efe:	2b03      	cmp	r3, #3
 8004f00:	d81b      	bhi.n	8004f3a <HAL_ADC_ConfigChannel+0x8e>
 8004f02:	a201      	add	r2, pc, #4	@ (adr r2, 8004f08 <HAL_ADC_ConfigChannel+0x5c>)
 8004f04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f08:	08004f19 	.word	0x08004f19
 8004f0c:	08004f21 	.word	0x08004f21
 8004f10:	08004f29 	.word	0x08004f29
 8004f14:	08004f31 	.word	0x08004f31
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8004f18:	230c      	movs	r3, #12
 8004f1a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8004f1e:	e010      	b.n	8004f42 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8004f20:	2312      	movs	r3, #18
 8004f22:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8004f26:	e00c      	b.n	8004f42 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8004f28:	2318      	movs	r3, #24
 8004f2a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8004f2e:	e008      	b.n	8004f42 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8004f30:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004f34:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8004f38:	e003      	b.n	8004f42 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8004f3a:	2306      	movs	r3, #6
 8004f3c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8004f40:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6818      	ldr	r0, [r3, #0]
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	461a      	mov	r2, r3
 8004f4c:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8004f50:	f7ff fca9 	bl	80048a6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4618      	mov	r0, r3
 8004f5a:	f7ff fdcf 	bl	8004afc <LL_ADC_REG_IsConversionOngoing>
 8004f5e:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4618      	mov	r0, r3
 8004f68:	f7ff fddb 	bl	8004b22 <LL_ADC_INJ_IsConversionOngoing>
 8004f6c:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004f70:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	f040 81a4 	bne.w	80052c2 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004f7a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	f040 819f 	bne.w	80052c2 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6818      	ldr	r0, [r3, #0]
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	6819      	ldr	r1, [r3, #0]
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	689b      	ldr	r3, [r3, #8]
 8004f90:	461a      	mov	r2, r3
 8004f92:	f7ff fcb4 	bl	80048fe <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	695a      	ldr	r2, [r3, #20]
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	68db      	ldr	r3, [r3, #12]
 8004fa0:	08db      	lsrs	r3, r3, #3
 8004fa2:	f003 0303 	and.w	r3, r3, #3
 8004fa6:	005b      	lsls	r3, r3, #1
 8004fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8004fac:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	691b      	ldr	r3, [r3, #16]
 8004fb4:	2b04      	cmp	r3, #4
 8004fb6:	d00a      	beq.n	8004fce <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6818      	ldr	r0, [r3, #0]
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	6919      	ldr	r1, [r3, #16]
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	681a      	ldr	r2, [r3, #0]
 8004fc4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004fc8:	f7ff fc18 	bl	80047fc <LL_ADC_SetOffset>
 8004fcc:	e179      	b.n	80052c2 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	2100      	movs	r1, #0
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	f7ff fc35 	bl	8004844 <LL_ADC_GetOffsetChannel>
 8004fda:	4603      	mov	r3, r0
 8004fdc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d10a      	bne.n	8004ffa <HAL_ADC_ConfigChannel+0x14e>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	2100      	movs	r1, #0
 8004fea:	4618      	mov	r0, r3
 8004fec:	f7ff fc2a 	bl	8004844 <LL_ADC_GetOffsetChannel>
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	0e9b      	lsrs	r3, r3, #26
 8004ff4:	f003 021f 	and.w	r2, r3, #31
 8004ff8:	e01e      	b.n	8005038 <HAL_ADC_ConfigChannel+0x18c>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	2100      	movs	r1, #0
 8005000:	4618      	mov	r0, r3
 8005002:	f7ff fc1f 	bl	8004844 <LL_ADC_GetOffsetChannel>
 8005006:	4603      	mov	r3, r0
 8005008:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800500c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005010:	fa93 f3a3 	rbit	r3, r3
 8005014:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005018:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800501c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8005020:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005024:	2b00      	cmp	r3, #0
 8005026:	d101      	bne.n	800502c <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8005028:	2320      	movs	r3, #32
 800502a:	e004      	b.n	8005036 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 800502c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005030:	fab3 f383 	clz	r3, r3
 8005034:	b2db      	uxtb	r3, r3
 8005036:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005040:	2b00      	cmp	r3, #0
 8005042:	d105      	bne.n	8005050 <HAL_ADC_ConfigChannel+0x1a4>
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	0e9b      	lsrs	r3, r3, #26
 800504a:	f003 031f 	and.w	r3, r3, #31
 800504e:	e018      	b.n	8005082 <HAL_ADC_ConfigChannel+0x1d6>
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005058:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800505c:	fa93 f3a3 	rbit	r3, r3
 8005060:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8005064:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005068:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 800506c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005070:	2b00      	cmp	r3, #0
 8005072:	d101      	bne.n	8005078 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8005074:	2320      	movs	r3, #32
 8005076:	e004      	b.n	8005082 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8005078:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800507c:	fab3 f383 	clz	r3, r3
 8005080:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005082:	429a      	cmp	r2, r3
 8005084:	d106      	bne.n	8005094 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	2200      	movs	r2, #0
 800508c:	2100      	movs	r1, #0
 800508e:	4618      	mov	r0, r3
 8005090:	f7ff fbee 	bl	8004870 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	2101      	movs	r1, #1
 800509a:	4618      	mov	r0, r3
 800509c:	f7ff fbd2 	bl	8004844 <LL_ADC_GetOffsetChannel>
 80050a0:	4603      	mov	r3, r0
 80050a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d10a      	bne.n	80050c0 <HAL_ADC_ConfigChannel+0x214>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	2101      	movs	r1, #1
 80050b0:	4618      	mov	r0, r3
 80050b2:	f7ff fbc7 	bl	8004844 <LL_ADC_GetOffsetChannel>
 80050b6:	4603      	mov	r3, r0
 80050b8:	0e9b      	lsrs	r3, r3, #26
 80050ba:	f003 021f 	and.w	r2, r3, #31
 80050be:	e01e      	b.n	80050fe <HAL_ADC_ConfigChannel+0x252>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	2101      	movs	r1, #1
 80050c6:	4618      	mov	r0, r3
 80050c8:	f7ff fbbc 	bl	8004844 <LL_ADC_GetOffsetChannel>
 80050cc:	4603      	mov	r3, r0
 80050ce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80050d6:	fa93 f3a3 	rbit	r3, r3
 80050da:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 80050de:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80050e2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 80050e6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d101      	bne.n	80050f2 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 80050ee:	2320      	movs	r3, #32
 80050f0:	e004      	b.n	80050fc <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 80050f2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80050f6:	fab3 f383 	clz	r3, r3
 80050fa:	b2db      	uxtb	r3, r3
 80050fc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005106:	2b00      	cmp	r3, #0
 8005108:	d105      	bne.n	8005116 <HAL_ADC_ConfigChannel+0x26a>
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	0e9b      	lsrs	r3, r3, #26
 8005110:	f003 031f 	and.w	r3, r3, #31
 8005114:	e018      	b.n	8005148 <HAL_ADC_ConfigChannel+0x29c>
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800511e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005122:	fa93 f3a3 	rbit	r3, r3
 8005126:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 800512a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800512e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8005132:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005136:	2b00      	cmp	r3, #0
 8005138:	d101      	bne.n	800513e <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 800513a:	2320      	movs	r3, #32
 800513c:	e004      	b.n	8005148 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 800513e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005142:	fab3 f383 	clz	r3, r3
 8005146:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005148:	429a      	cmp	r2, r3
 800514a:	d106      	bne.n	800515a <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	2200      	movs	r2, #0
 8005152:	2101      	movs	r1, #1
 8005154:	4618      	mov	r0, r3
 8005156:	f7ff fb8b 	bl	8004870 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	2102      	movs	r1, #2
 8005160:	4618      	mov	r0, r3
 8005162:	f7ff fb6f 	bl	8004844 <LL_ADC_GetOffsetChannel>
 8005166:	4603      	mov	r3, r0
 8005168:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800516c:	2b00      	cmp	r3, #0
 800516e:	d10a      	bne.n	8005186 <HAL_ADC_ConfigChannel+0x2da>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	2102      	movs	r1, #2
 8005176:	4618      	mov	r0, r3
 8005178:	f7ff fb64 	bl	8004844 <LL_ADC_GetOffsetChannel>
 800517c:	4603      	mov	r3, r0
 800517e:	0e9b      	lsrs	r3, r3, #26
 8005180:	f003 021f 	and.w	r2, r3, #31
 8005184:	e01e      	b.n	80051c4 <HAL_ADC_ConfigChannel+0x318>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	2102      	movs	r1, #2
 800518c:	4618      	mov	r0, r3
 800518e:	f7ff fb59 	bl	8004844 <LL_ADC_GetOffsetChannel>
 8005192:	4603      	mov	r3, r0
 8005194:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005198:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800519c:	fa93 f3a3 	rbit	r3, r3
 80051a0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 80051a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80051a8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 80051ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d101      	bne.n	80051b8 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 80051b4:	2320      	movs	r3, #32
 80051b6:	e004      	b.n	80051c2 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 80051b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80051bc:	fab3 f383 	clz	r3, r3
 80051c0:	b2db      	uxtb	r3, r3
 80051c2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d105      	bne.n	80051dc <HAL_ADC_ConfigChannel+0x330>
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	0e9b      	lsrs	r3, r3, #26
 80051d6:	f003 031f 	and.w	r3, r3, #31
 80051da:	e014      	b.n	8005206 <HAL_ADC_ConfigChannel+0x35a>
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051e2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80051e4:	fa93 f3a3 	rbit	r3, r3
 80051e8:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 80051ea:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80051ec:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 80051f0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d101      	bne.n	80051fc <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 80051f8:	2320      	movs	r3, #32
 80051fa:	e004      	b.n	8005206 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 80051fc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005200:	fab3 f383 	clz	r3, r3
 8005204:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005206:	429a      	cmp	r2, r3
 8005208:	d106      	bne.n	8005218 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	2200      	movs	r2, #0
 8005210:	2102      	movs	r1, #2
 8005212:	4618      	mov	r0, r3
 8005214:	f7ff fb2c 	bl	8004870 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	2103      	movs	r1, #3
 800521e:	4618      	mov	r0, r3
 8005220:	f7ff fb10 	bl	8004844 <LL_ADC_GetOffsetChannel>
 8005224:	4603      	mov	r3, r0
 8005226:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800522a:	2b00      	cmp	r3, #0
 800522c:	d10a      	bne.n	8005244 <HAL_ADC_ConfigChannel+0x398>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	2103      	movs	r1, #3
 8005234:	4618      	mov	r0, r3
 8005236:	f7ff fb05 	bl	8004844 <LL_ADC_GetOffsetChannel>
 800523a:	4603      	mov	r3, r0
 800523c:	0e9b      	lsrs	r3, r3, #26
 800523e:	f003 021f 	and.w	r2, r3, #31
 8005242:	e017      	b.n	8005274 <HAL_ADC_ConfigChannel+0x3c8>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	2103      	movs	r1, #3
 800524a:	4618      	mov	r0, r3
 800524c:	f7ff fafa 	bl	8004844 <LL_ADC_GetOffsetChannel>
 8005250:	4603      	mov	r3, r0
 8005252:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005254:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005256:	fa93 f3a3 	rbit	r3, r3
 800525a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 800525c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800525e:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8005260:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005262:	2b00      	cmp	r3, #0
 8005264:	d101      	bne.n	800526a <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8005266:	2320      	movs	r3, #32
 8005268:	e003      	b.n	8005272 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 800526a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800526c:	fab3 f383 	clz	r3, r3
 8005270:	b2db      	uxtb	r3, r3
 8005272:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800527c:	2b00      	cmp	r3, #0
 800527e:	d105      	bne.n	800528c <HAL_ADC_ConfigChannel+0x3e0>
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	0e9b      	lsrs	r3, r3, #26
 8005286:	f003 031f 	and.w	r3, r3, #31
 800528a:	e011      	b.n	80052b0 <HAL_ADC_ConfigChannel+0x404>
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005292:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005294:	fa93 f3a3 	rbit	r3, r3
 8005298:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 800529a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800529c:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 800529e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d101      	bne.n	80052a8 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80052a4:	2320      	movs	r3, #32
 80052a6:	e003      	b.n	80052b0 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80052a8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80052aa:	fab3 f383 	clz	r3, r3
 80052ae:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80052b0:	429a      	cmp	r2, r3
 80052b2:	d106      	bne.n	80052c2 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	2200      	movs	r2, #0
 80052ba:	2103      	movs	r1, #3
 80052bc:	4618      	mov	r0, r3
 80052be:	f7ff fad7 	bl	8004870 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4618      	mov	r0, r3
 80052c8:	f7ff fbde 	bl	8004a88 <LL_ADC_IsEnabled>
 80052cc:	4603      	mov	r3, r0
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	f040 8140 	bne.w	8005554 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6818      	ldr	r0, [r3, #0]
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	6819      	ldr	r1, [r3, #0]
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	68db      	ldr	r3, [r3, #12]
 80052e0:	461a      	mov	r2, r3
 80052e2:	f7ff fb37 	bl	8004954 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	68db      	ldr	r3, [r3, #12]
 80052ea:	4a8f      	ldr	r2, [pc, #572]	@ (8005528 <HAL_ADC_ConfigChannel+0x67c>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	f040 8131 	bne.w	8005554 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d10b      	bne.n	800531a <HAL_ADC_ConfigChannel+0x46e>
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	0e9b      	lsrs	r3, r3, #26
 8005308:	3301      	adds	r3, #1
 800530a:	f003 031f 	and.w	r3, r3, #31
 800530e:	2b09      	cmp	r3, #9
 8005310:	bf94      	ite	ls
 8005312:	2301      	movls	r3, #1
 8005314:	2300      	movhi	r3, #0
 8005316:	b2db      	uxtb	r3, r3
 8005318:	e019      	b.n	800534e <HAL_ADC_ConfigChannel+0x4a2>
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005320:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005322:	fa93 f3a3 	rbit	r3, r3
 8005326:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8005328:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800532a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 800532c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800532e:	2b00      	cmp	r3, #0
 8005330:	d101      	bne.n	8005336 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8005332:	2320      	movs	r3, #32
 8005334:	e003      	b.n	800533e <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8005336:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005338:	fab3 f383 	clz	r3, r3
 800533c:	b2db      	uxtb	r3, r3
 800533e:	3301      	adds	r3, #1
 8005340:	f003 031f 	and.w	r3, r3, #31
 8005344:	2b09      	cmp	r3, #9
 8005346:	bf94      	ite	ls
 8005348:	2301      	movls	r3, #1
 800534a:	2300      	movhi	r3, #0
 800534c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800534e:	2b00      	cmp	r3, #0
 8005350:	d079      	beq.n	8005446 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800535a:	2b00      	cmp	r3, #0
 800535c:	d107      	bne.n	800536e <HAL_ADC_ConfigChannel+0x4c2>
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	0e9b      	lsrs	r3, r3, #26
 8005364:	3301      	adds	r3, #1
 8005366:	069b      	lsls	r3, r3, #26
 8005368:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800536c:	e015      	b.n	800539a <HAL_ADC_ConfigChannel+0x4ee>
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005374:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005376:	fa93 f3a3 	rbit	r3, r3
 800537a:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 800537c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800537e:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8005380:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005382:	2b00      	cmp	r3, #0
 8005384:	d101      	bne.n	800538a <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8005386:	2320      	movs	r3, #32
 8005388:	e003      	b.n	8005392 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 800538a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800538c:	fab3 f383 	clz	r3, r3
 8005390:	b2db      	uxtb	r3, r3
 8005392:	3301      	adds	r3, #1
 8005394:	069b      	lsls	r3, r3, #26
 8005396:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d109      	bne.n	80053ba <HAL_ADC_ConfigChannel+0x50e>
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	0e9b      	lsrs	r3, r3, #26
 80053ac:	3301      	adds	r3, #1
 80053ae:	f003 031f 	and.w	r3, r3, #31
 80053b2:	2101      	movs	r1, #1
 80053b4:	fa01 f303 	lsl.w	r3, r1, r3
 80053b8:	e017      	b.n	80053ea <HAL_ADC_ConfigChannel+0x53e>
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80053c2:	fa93 f3a3 	rbit	r3, r3
 80053c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80053c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80053ca:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80053cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d101      	bne.n	80053d6 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 80053d2:	2320      	movs	r3, #32
 80053d4:	e003      	b.n	80053de <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 80053d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80053d8:	fab3 f383 	clz	r3, r3
 80053dc:	b2db      	uxtb	r3, r3
 80053de:	3301      	adds	r3, #1
 80053e0:	f003 031f 	and.w	r3, r3, #31
 80053e4:	2101      	movs	r1, #1
 80053e6:	fa01 f303 	lsl.w	r3, r1, r3
 80053ea:	ea42 0103 	orr.w	r1, r2, r3
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d10a      	bne.n	8005410 <HAL_ADC_ConfigChannel+0x564>
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	0e9b      	lsrs	r3, r3, #26
 8005400:	3301      	adds	r3, #1
 8005402:	f003 021f 	and.w	r2, r3, #31
 8005406:	4613      	mov	r3, r2
 8005408:	005b      	lsls	r3, r3, #1
 800540a:	4413      	add	r3, r2
 800540c:	051b      	lsls	r3, r3, #20
 800540e:	e018      	b.n	8005442 <HAL_ADC_ConfigChannel+0x596>
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005416:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005418:	fa93 f3a3 	rbit	r3, r3
 800541c:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 800541e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005420:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8005422:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005424:	2b00      	cmp	r3, #0
 8005426:	d101      	bne.n	800542c <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8005428:	2320      	movs	r3, #32
 800542a:	e003      	b.n	8005434 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 800542c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800542e:	fab3 f383 	clz	r3, r3
 8005432:	b2db      	uxtb	r3, r3
 8005434:	3301      	adds	r3, #1
 8005436:	f003 021f 	and.w	r2, r3, #31
 800543a:	4613      	mov	r3, r2
 800543c:	005b      	lsls	r3, r3, #1
 800543e:	4413      	add	r3, r2
 8005440:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005442:	430b      	orrs	r3, r1
 8005444:	e081      	b.n	800554a <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800544e:	2b00      	cmp	r3, #0
 8005450:	d107      	bne.n	8005462 <HAL_ADC_ConfigChannel+0x5b6>
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	0e9b      	lsrs	r3, r3, #26
 8005458:	3301      	adds	r3, #1
 800545a:	069b      	lsls	r3, r3, #26
 800545c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005460:	e015      	b.n	800548e <HAL_ADC_ConfigChannel+0x5e2>
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005468:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800546a:	fa93 f3a3 	rbit	r3, r3
 800546e:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8005470:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005472:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8005474:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005476:	2b00      	cmp	r3, #0
 8005478:	d101      	bne.n	800547e <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 800547a:	2320      	movs	r3, #32
 800547c:	e003      	b.n	8005486 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 800547e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005480:	fab3 f383 	clz	r3, r3
 8005484:	b2db      	uxtb	r3, r3
 8005486:	3301      	adds	r3, #1
 8005488:	069b      	lsls	r3, r3, #26
 800548a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005496:	2b00      	cmp	r3, #0
 8005498:	d109      	bne.n	80054ae <HAL_ADC_ConfigChannel+0x602>
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	0e9b      	lsrs	r3, r3, #26
 80054a0:	3301      	adds	r3, #1
 80054a2:	f003 031f 	and.w	r3, r3, #31
 80054a6:	2101      	movs	r1, #1
 80054a8:	fa01 f303 	lsl.w	r3, r1, r3
 80054ac:	e017      	b.n	80054de <HAL_ADC_ConfigChannel+0x632>
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054b4:	69fb      	ldr	r3, [r7, #28]
 80054b6:	fa93 f3a3 	rbit	r3, r3
 80054ba:	61bb      	str	r3, [r7, #24]
  return result;
 80054bc:	69bb      	ldr	r3, [r7, #24]
 80054be:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80054c0:	6a3b      	ldr	r3, [r7, #32]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d101      	bne.n	80054ca <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 80054c6:	2320      	movs	r3, #32
 80054c8:	e003      	b.n	80054d2 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 80054ca:	6a3b      	ldr	r3, [r7, #32]
 80054cc:	fab3 f383 	clz	r3, r3
 80054d0:	b2db      	uxtb	r3, r3
 80054d2:	3301      	adds	r3, #1
 80054d4:	f003 031f 	and.w	r3, r3, #31
 80054d8:	2101      	movs	r1, #1
 80054da:	fa01 f303 	lsl.w	r3, r1, r3
 80054de:	ea42 0103 	orr.w	r1, r2, r3
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d10d      	bne.n	800550a <HAL_ADC_ConfigChannel+0x65e>
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	0e9b      	lsrs	r3, r3, #26
 80054f4:	3301      	adds	r3, #1
 80054f6:	f003 021f 	and.w	r2, r3, #31
 80054fa:	4613      	mov	r3, r2
 80054fc:	005b      	lsls	r3, r3, #1
 80054fe:	4413      	add	r3, r2
 8005500:	3b1e      	subs	r3, #30
 8005502:	051b      	lsls	r3, r3, #20
 8005504:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005508:	e01e      	b.n	8005548 <HAL_ADC_ConfigChannel+0x69c>
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005510:	693b      	ldr	r3, [r7, #16]
 8005512:	fa93 f3a3 	rbit	r3, r3
 8005516:	60fb      	str	r3, [r7, #12]
  return result;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800551c:	697b      	ldr	r3, [r7, #20]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d104      	bne.n	800552c <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8005522:	2320      	movs	r3, #32
 8005524:	e006      	b.n	8005534 <HAL_ADC_ConfigChannel+0x688>
 8005526:	bf00      	nop
 8005528:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800552c:	697b      	ldr	r3, [r7, #20]
 800552e:	fab3 f383 	clz	r3, r3
 8005532:	b2db      	uxtb	r3, r3
 8005534:	3301      	adds	r3, #1
 8005536:	f003 021f 	and.w	r2, r3, #31
 800553a:	4613      	mov	r3, r2
 800553c:	005b      	lsls	r3, r3, #1
 800553e:	4413      	add	r3, r2
 8005540:	3b1e      	subs	r3, #30
 8005542:	051b      	lsls	r3, r3, #20
 8005544:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005548:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800554a:	683a      	ldr	r2, [r7, #0]
 800554c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800554e:	4619      	mov	r1, r3
 8005550:	f7ff f9d5 	bl	80048fe <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	681a      	ldr	r2, [r3, #0]
 8005558:	4b3d      	ldr	r3, [pc, #244]	@ (8005650 <HAL_ADC_ConfigChannel+0x7a4>)
 800555a:	4013      	ands	r3, r2
 800555c:	2b00      	cmp	r3, #0
 800555e:	d06c      	beq.n	800563a <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005560:	483c      	ldr	r0, [pc, #240]	@ (8005654 <HAL_ADC_ConfigChannel+0x7a8>)
 8005562:	f7ff f93d 	bl	80047e0 <LL_ADC_GetCommonPathInternalCh>
 8005566:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4a3a      	ldr	r2, [pc, #232]	@ (8005658 <HAL_ADC_ConfigChannel+0x7ac>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d127      	bne.n	80055c4 <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005574:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005578:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800557c:	2b00      	cmp	r3, #0
 800557e:	d121      	bne.n	80055c4 <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4a35      	ldr	r2, [pc, #212]	@ (800565c <HAL_ADC_ConfigChannel+0x7b0>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d157      	bne.n	800563a <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800558a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800558e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005592:	4619      	mov	r1, r3
 8005594:	482f      	ldr	r0, [pc, #188]	@ (8005654 <HAL_ADC_ConfigChannel+0x7a8>)
 8005596:	f7ff f910 	bl	80047ba <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800559a:	4b31      	ldr	r3, [pc, #196]	@ (8005660 <HAL_ADC_ConfigChannel+0x7b4>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	099b      	lsrs	r3, r3, #6
 80055a0:	4a30      	ldr	r2, [pc, #192]	@ (8005664 <HAL_ADC_ConfigChannel+0x7b8>)
 80055a2:	fba2 2303 	umull	r2, r3, r2, r3
 80055a6:	099b      	lsrs	r3, r3, #6
 80055a8:	1c5a      	adds	r2, r3, #1
 80055aa:	4613      	mov	r3, r2
 80055ac:	005b      	lsls	r3, r3, #1
 80055ae:	4413      	add	r3, r2
 80055b0:	009b      	lsls	r3, r3, #2
 80055b2:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80055b4:	e002      	b.n	80055bc <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	3b01      	subs	r3, #1
 80055ba:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d1f9      	bne.n	80055b6 <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80055c2:	e03a      	b.n	800563a <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4a27      	ldr	r2, [pc, #156]	@ (8005668 <HAL_ADC_ConfigChannel+0x7bc>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d113      	bne.n	80055f6 <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80055ce:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80055d2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d10d      	bne.n	80055f6 <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	4a1f      	ldr	r2, [pc, #124]	@ (800565c <HAL_ADC_ConfigChannel+0x7b0>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d12a      	bne.n	800563a <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80055e4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80055e8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80055ec:	4619      	mov	r1, r3
 80055ee:	4819      	ldr	r0, [pc, #100]	@ (8005654 <HAL_ADC_ConfigChannel+0x7a8>)
 80055f0:	f7ff f8e3 	bl	80047ba <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80055f4:	e021      	b.n	800563a <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	4a1c      	ldr	r2, [pc, #112]	@ (800566c <HAL_ADC_ConfigChannel+0x7c0>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d11c      	bne.n	800563a <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005600:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005604:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005608:	2b00      	cmp	r3, #0
 800560a:	d116      	bne.n	800563a <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4a12      	ldr	r2, [pc, #72]	@ (800565c <HAL_ADC_ConfigChannel+0x7b0>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d111      	bne.n	800563a <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005616:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800561a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800561e:	4619      	mov	r1, r3
 8005620:	480c      	ldr	r0, [pc, #48]	@ (8005654 <HAL_ADC_ConfigChannel+0x7a8>)
 8005622:	f7ff f8ca 	bl	80047ba <LL_ADC_SetCommonPathInternalCh>
 8005626:	e008      	b.n	800563a <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800562c:	f043 0220 	orr.w	r2, r3, #32
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8005634:	2301      	movs	r3, #1
 8005636:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2200      	movs	r2, #0
 800563e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8005642:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8005646:	4618      	mov	r0, r3
 8005648:	37d8      	adds	r7, #216	@ 0xd8
 800564a:	46bd      	mov	sp, r7
 800564c:	bd80      	pop	{r7, pc}
 800564e:	bf00      	nop
 8005650:	80080000 	.word	0x80080000
 8005654:	50040300 	.word	0x50040300
 8005658:	c7520000 	.word	0xc7520000
 800565c:	50040000 	.word	0x50040000
 8005660:	20000014 	.word	0x20000014
 8005664:	053e2d63 	.word	0x053e2d63
 8005668:	cb840000 	.word	0xcb840000
 800566c:	80000001 	.word	0x80000001

08005670 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b084      	sub	sp, #16
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8005678:	2300      	movs	r3, #0
 800567a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4618      	mov	r0, r3
 8005682:	f7ff fa01 	bl	8004a88 <LL_ADC_IsEnabled>
 8005686:	4603      	mov	r3, r0
 8005688:	2b00      	cmp	r3, #0
 800568a:	d169      	bne.n	8005760 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	689a      	ldr	r2, [r3, #8]
 8005692:	4b36      	ldr	r3, [pc, #216]	@ (800576c <ADC_Enable+0xfc>)
 8005694:	4013      	ands	r3, r2
 8005696:	2b00      	cmp	r3, #0
 8005698:	d00d      	beq.n	80056b6 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800569e:	f043 0210 	orr.w	r2, r3, #16
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056aa:	f043 0201 	orr.w	r2, r3, #1
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 80056b2:	2301      	movs	r3, #1
 80056b4:	e055      	b.n	8005762 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	4618      	mov	r0, r3
 80056bc:	f7ff f9bc 	bl	8004a38 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80056c0:	482b      	ldr	r0, [pc, #172]	@ (8005770 <ADC_Enable+0x100>)
 80056c2:	f7ff f88d 	bl	80047e0 <LL_ADC_GetCommonPathInternalCh>
 80056c6:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80056c8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d013      	beq.n	80056f8 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80056d0:	4b28      	ldr	r3, [pc, #160]	@ (8005774 <ADC_Enable+0x104>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	099b      	lsrs	r3, r3, #6
 80056d6:	4a28      	ldr	r2, [pc, #160]	@ (8005778 <ADC_Enable+0x108>)
 80056d8:	fba2 2303 	umull	r2, r3, r2, r3
 80056dc:	099b      	lsrs	r3, r3, #6
 80056de:	1c5a      	adds	r2, r3, #1
 80056e0:	4613      	mov	r3, r2
 80056e2:	005b      	lsls	r3, r3, #1
 80056e4:	4413      	add	r3, r2
 80056e6:	009b      	lsls	r3, r3, #2
 80056e8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80056ea:	e002      	b.n	80056f2 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80056ec:	68bb      	ldr	r3, [r7, #8]
 80056ee:	3b01      	subs	r3, #1
 80056f0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d1f9      	bne.n	80056ec <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80056f8:	f7ff f81c 	bl	8004734 <HAL_GetTick>
 80056fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80056fe:	e028      	b.n	8005752 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	4618      	mov	r0, r3
 8005706:	f7ff f9bf 	bl	8004a88 <LL_ADC_IsEnabled>
 800570a:	4603      	mov	r3, r0
 800570c:	2b00      	cmp	r3, #0
 800570e:	d104      	bne.n	800571a <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4618      	mov	r0, r3
 8005716:	f7ff f98f 	bl	8004a38 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800571a:	f7ff f80b 	bl	8004734 <HAL_GetTick>
 800571e:	4602      	mov	r2, r0
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	1ad3      	subs	r3, r2, r3
 8005724:	2b02      	cmp	r3, #2
 8005726:	d914      	bls.n	8005752 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f003 0301 	and.w	r3, r3, #1
 8005732:	2b01      	cmp	r3, #1
 8005734:	d00d      	beq.n	8005752 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800573a:	f043 0210 	orr.w	r2, r3, #16
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005746:	f043 0201 	orr.w	r2, r3, #1
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800574e:	2301      	movs	r3, #1
 8005750:	e007      	b.n	8005762 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f003 0301 	and.w	r3, r3, #1
 800575c:	2b01      	cmp	r3, #1
 800575e:	d1cf      	bne.n	8005700 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005760:	2300      	movs	r3, #0
}
 8005762:	4618      	mov	r0, r3
 8005764:	3710      	adds	r7, #16
 8005766:	46bd      	mov	sp, r7
 8005768:	bd80      	pop	{r7, pc}
 800576a:	bf00      	nop
 800576c:	8000003f 	.word	0x8000003f
 8005770:	50040300 	.word	0x50040300
 8005774:	20000014 	.word	0x20000014
 8005778:	053e2d63 	.word	0x053e2d63

0800577c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b084      	sub	sp, #16
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	4618      	mov	r0, r3
 800578a:	f7ff f990 	bl	8004aae <LL_ADC_IsDisableOngoing>
 800578e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	4618      	mov	r0, r3
 8005796:	f7ff f977 	bl	8004a88 <LL_ADC_IsEnabled>
 800579a:	4603      	mov	r3, r0
 800579c:	2b00      	cmp	r3, #0
 800579e:	d047      	beq.n	8005830 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d144      	bne.n	8005830 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	689b      	ldr	r3, [r3, #8]
 80057ac:	f003 030d 	and.w	r3, r3, #13
 80057b0:	2b01      	cmp	r3, #1
 80057b2:	d10c      	bne.n	80057ce <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4618      	mov	r0, r3
 80057ba:	f7ff f951 	bl	8004a60 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	2203      	movs	r2, #3
 80057c4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80057c6:	f7fe ffb5 	bl	8004734 <HAL_GetTick>
 80057ca:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80057cc:	e029      	b.n	8005822 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057d2:	f043 0210 	orr.w	r2, r3, #16
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057de:	f043 0201 	orr.w	r2, r3, #1
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 80057e6:	2301      	movs	r3, #1
 80057e8:	e023      	b.n	8005832 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80057ea:	f7fe ffa3 	bl	8004734 <HAL_GetTick>
 80057ee:	4602      	mov	r2, r0
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	1ad3      	subs	r3, r2, r3
 80057f4:	2b02      	cmp	r3, #2
 80057f6:	d914      	bls.n	8005822 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	689b      	ldr	r3, [r3, #8]
 80057fe:	f003 0301 	and.w	r3, r3, #1
 8005802:	2b00      	cmp	r3, #0
 8005804:	d00d      	beq.n	8005822 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800580a:	f043 0210 	orr.w	r2, r3, #16
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005816:	f043 0201 	orr.w	r2, r3, #1
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800581e:	2301      	movs	r3, #1
 8005820:	e007      	b.n	8005832 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	689b      	ldr	r3, [r3, #8]
 8005828:	f003 0301 	and.w	r3, r3, #1
 800582c:	2b00      	cmp	r3, #0
 800582e:	d1dc      	bne.n	80057ea <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005830:	2300      	movs	r3, #0
}
 8005832:	4618      	mov	r0, r3
 8005834:	3710      	adds	r7, #16
 8005836:	46bd      	mov	sp, r7
 8005838:	bd80      	pop	{r7, pc}

0800583a <LL_ADC_StartCalibration>:
{
 800583a:	b480      	push	{r7}
 800583c:	b083      	sub	sp, #12
 800583e:	af00      	add	r7, sp, #0
 8005840:	6078      	str	r0, [r7, #4]
 8005842:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	689b      	ldr	r3, [r3, #8]
 8005848:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 800584c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005850:	683a      	ldr	r2, [r7, #0]
 8005852:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8005856:	4313      	orrs	r3, r2
 8005858:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	609a      	str	r2, [r3, #8]
}
 8005860:	bf00      	nop
 8005862:	370c      	adds	r7, #12
 8005864:	46bd      	mov	sp, r7
 8005866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586a:	4770      	bx	lr

0800586c <LL_ADC_IsCalibrationOnGoing>:
{
 800586c:	b480      	push	{r7}
 800586e:	b083      	sub	sp, #12
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	689b      	ldr	r3, [r3, #8]
 8005878:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800587c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005880:	d101      	bne.n	8005886 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8005882:	2301      	movs	r3, #1
 8005884:	e000      	b.n	8005888 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8005886:	2300      	movs	r3, #0
}
 8005888:	4618      	mov	r0, r3
 800588a:	370c      	adds	r7, #12
 800588c:	46bd      	mov	sp, r7
 800588e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005892:	4770      	bx	lr

08005894 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b084      	sub	sp, #16
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
 800589c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800589e:	2300      	movs	r3, #0
 80058a0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80058a8:	2b01      	cmp	r3, #1
 80058aa:	d101      	bne.n	80058b0 <HAL_ADCEx_Calibration_Start+0x1c>
 80058ac:	2302      	movs	r3, #2
 80058ae:	e04d      	b.n	800594c <HAL_ADCEx_Calibration_Start+0xb8>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2201      	movs	r2, #1
 80058b4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80058b8:	6878      	ldr	r0, [r7, #4]
 80058ba:	f7ff ff5f 	bl	800577c <ADC_Disable>
 80058be:	4603      	mov	r3, r0
 80058c0:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80058c2:	7bfb      	ldrb	r3, [r7, #15]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d136      	bne.n	8005936 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058cc:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80058d0:	f023 0302 	bic.w	r3, r3, #2
 80058d4:	f043 0202 	orr.w	r2, r3, #2
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	655a      	str	r2, [r3, #84]	@ 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	6839      	ldr	r1, [r7, #0]
 80058e2:	4618      	mov	r0, r3
 80058e4:	f7ff ffa9 	bl	800583a <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80058e8:	e014      	b.n	8005914 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80058ea:	68bb      	ldr	r3, [r7, #8]
 80058ec:	3301      	adds	r3, #1
 80058ee:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80058f0:	68bb      	ldr	r3, [r7, #8]
 80058f2:	f5b3 2f91 	cmp.w	r3, #296960	@ 0x48800
 80058f6:	d30d      	bcc.n	8005914 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058fc:	f023 0312 	bic.w	r3, r3, #18
 8005900:	f043 0210 	orr.w	r2, r3, #16
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2200      	movs	r2, #0
 800590c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_ERROR;
 8005910:	2301      	movs	r3, #1
 8005912:	e01b      	b.n	800594c <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	4618      	mov	r0, r3
 800591a:	f7ff ffa7 	bl	800586c <LL_ADC_IsCalibrationOnGoing>
 800591e:	4603      	mov	r3, r0
 8005920:	2b00      	cmp	r3, #0
 8005922:	d1e2      	bne.n	80058ea <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005928:	f023 0303 	bic.w	r3, r3, #3
 800592c:	f043 0201 	orr.w	r2, r3, #1
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	655a      	str	r2, [r3, #84]	@ 0x54
 8005934:	e005      	b.n	8005942 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800593a:	f043 0210 	orr.w	r2, r3, #16
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2200      	movs	r2, #0
 8005946:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800594a:	7bfb      	ldrb	r3, [r7, #15]
}
 800594c:	4618      	mov	r0, r3
 800594e:	3710      	adds	r7, #16
 8005950:	46bd      	mov	sp, r7
 8005952:	bd80      	pop	{r7, pc}

08005954 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005954:	b480      	push	{r7}
 8005956:	b085      	sub	sp, #20
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	f003 0307 	and.w	r3, r3, #7
 8005962:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005964:	4b0c      	ldr	r3, [pc, #48]	@ (8005998 <__NVIC_SetPriorityGrouping+0x44>)
 8005966:	68db      	ldr	r3, [r3, #12]
 8005968:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800596a:	68ba      	ldr	r2, [r7, #8]
 800596c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005970:	4013      	ands	r3, r2
 8005972:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800597c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005980:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005984:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005986:	4a04      	ldr	r2, [pc, #16]	@ (8005998 <__NVIC_SetPriorityGrouping+0x44>)
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	60d3      	str	r3, [r2, #12]
}
 800598c:	bf00      	nop
 800598e:	3714      	adds	r7, #20
 8005990:	46bd      	mov	sp, r7
 8005992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005996:	4770      	bx	lr
 8005998:	e000ed00 	.word	0xe000ed00

0800599c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800599c:	b480      	push	{r7}
 800599e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80059a0:	4b04      	ldr	r3, [pc, #16]	@ (80059b4 <__NVIC_GetPriorityGrouping+0x18>)
 80059a2:	68db      	ldr	r3, [r3, #12]
 80059a4:	0a1b      	lsrs	r3, r3, #8
 80059a6:	f003 0307 	and.w	r3, r3, #7
}
 80059aa:	4618      	mov	r0, r3
 80059ac:	46bd      	mov	sp, r7
 80059ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b2:	4770      	bx	lr
 80059b4:	e000ed00 	.word	0xe000ed00

080059b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80059b8:	b480      	push	{r7}
 80059ba:	b083      	sub	sp, #12
 80059bc:	af00      	add	r7, sp, #0
 80059be:	4603      	mov	r3, r0
 80059c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80059c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	db0b      	blt.n	80059e2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80059ca:	79fb      	ldrb	r3, [r7, #7]
 80059cc:	f003 021f 	and.w	r2, r3, #31
 80059d0:	4907      	ldr	r1, [pc, #28]	@ (80059f0 <__NVIC_EnableIRQ+0x38>)
 80059d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059d6:	095b      	lsrs	r3, r3, #5
 80059d8:	2001      	movs	r0, #1
 80059da:	fa00 f202 	lsl.w	r2, r0, r2
 80059de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80059e2:	bf00      	nop
 80059e4:	370c      	adds	r7, #12
 80059e6:	46bd      	mov	sp, r7
 80059e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ec:	4770      	bx	lr
 80059ee:	bf00      	nop
 80059f0:	e000e100 	.word	0xe000e100

080059f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80059f4:	b480      	push	{r7}
 80059f6:	b083      	sub	sp, #12
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	4603      	mov	r3, r0
 80059fc:	6039      	str	r1, [r7, #0]
 80059fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005a00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	db0a      	blt.n	8005a1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	b2da      	uxtb	r2, r3
 8005a0c:	490c      	ldr	r1, [pc, #48]	@ (8005a40 <__NVIC_SetPriority+0x4c>)
 8005a0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a12:	0112      	lsls	r2, r2, #4
 8005a14:	b2d2      	uxtb	r2, r2
 8005a16:	440b      	add	r3, r1
 8005a18:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005a1c:	e00a      	b.n	8005a34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	b2da      	uxtb	r2, r3
 8005a22:	4908      	ldr	r1, [pc, #32]	@ (8005a44 <__NVIC_SetPriority+0x50>)
 8005a24:	79fb      	ldrb	r3, [r7, #7]
 8005a26:	f003 030f 	and.w	r3, r3, #15
 8005a2a:	3b04      	subs	r3, #4
 8005a2c:	0112      	lsls	r2, r2, #4
 8005a2e:	b2d2      	uxtb	r2, r2
 8005a30:	440b      	add	r3, r1
 8005a32:	761a      	strb	r2, [r3, #24]
}
 8005a34:	bf00      	nop
 8005a36:	370c      	adds	r7, #12
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3e:	4770      	bx	lr
 8005a40:	e000e100 	.word	0xe000e100
 8005a44:	e000ed00 	.word	0xe000ed00

08005a48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005a48:	b480      	push	{r7}
 8005a4a:	b089      	sub	sp, #36	@ 0x24
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	60f8      	str	r0, [r7, #12]
 8005a50:	60b9      	str	r1, [r7, #8]
 8005a52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	f003 0307 	and.w	r3, r3, #7
 8005a5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005a5c:	69fb      	ldr	r3, [r7, #28]
 8005a5e:	f1c3 0307 	rsb	r3, r3, #7
 8005a62:	2b04      	cmp	r3, #4
 8005a64:	bf28      	it	cs
 8005a66:	2304      	movcs	r3, #4
 8005a68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005a6a:	69fb      	ldr	r3, [r7, #28]
 8005a6c:	3304      	adds	r3, #4
 8005a6e:	2b06      	cmp	r3, #6
 8005a70:	d902      	bls.n	8005a78 <NVIC_EncodePriority+0x30>
 8005a72:	69fb      	ldr	r3, [r7, #28]
 8005a74:	3b03      	subs	r3, #3
 8005a76:	e000      	b.n	8005a7a <NVIC_EncodePriority+0x32>
 8005a78:	2300      	movs	r3, #0
 8005a7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005a7c:	f04f 32ff 	mov.w	r2, #4294967295
 8005a80:	69bb      	ldr	r3, [r7, #24]
 8005a82:	fa02 f303 	lsl.w	r3, r2, r3
 8005a86:	43da      	mvns	r2, r3
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	401a      	ands	r2, r3
 8005a8c:	697b      	ldr	r3, [r7, #20]
 8005a8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005a90:	f04f 31ff 	mov.w	r1, #4294967295
 8005a94:	697b      	ldr	r3, [r7, #20]
 8005a96:	fa01 f303 	lsl.w	r3, r1, r3
 8005a9a:	43d9      	mvns	r1, r3
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005aa0:	4313      	orrs	r3, r2
         );
}
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	3724      	adds	r7, #36	@ 0x24
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aac:	4770      	bx	lr
	...

08005ab0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b082      	sub	sp, #8
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	3b01      	subs	r3, #1
 8005abc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005ac0:	d301      	bcc.n	8005ac6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	e00f      	b.n	8005ae6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005ac6:	4a0a      	ldr	r2, [pc, #40]	@ (8005af0 <SysTick_Config+0x40>)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	3b01      	subs	r3, #1
 8005acc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005ace:	210f      	movs	r1, #15
 8005ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8005ad4:	f7ff ff8e 	bl	80059f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005ad8:	4b05      	ldr	r3, [pc, #20]	@ (8005af0 <SysTick_Config+0x40>)
 8005ada:	2200      	movs	r2, #0
 8005adc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005ade:	4b04      	ldr	r3, [pc, #16]	@ (8005af0 <SysTick_Config+0x40>)
 8005ae0:	2207      	movs	r2, #7
 8005ae2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005ae4:	2300      	movs	r3, #0
}
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	3708      	adds	r7, #8
 8005aea:	46bd      	mov	sp, r7
 8005aec:	bd80      	pop	{r7, pc}
 8005aee:	bf00      	nop
 8005af0:	e000e010 	.word	0xe000e010

08005af4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b082      	sub	sp, #8
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005afc:	6878      	ldr	r0, [r7, #4]
 8005afe:	f7ff ff29 	bl	8005954 <__NVIC_SetPriorityGrouping>
}
 8005b02:	bf00      	nop
 8005b04:	3708      	adds	r7, #8
 8005b06:	46bd      	mov	sp, r7
 8005b08:	bd80      	pop	{r7, pc}

08005b0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005b0a:	b580      	push	{r7, lr}
 8005b0c:	b086      	sub	sp, #24
 8005b0e:	af00      	add	r7, sp, #0
 8005b10:	4603      	mov	r3, r0
 8005b12:	60b9      	str	r1, [r7, #8]
 8005b14:	607a      	str	r2, [r7, #4]
 8005b16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005b18:	2300      	movs	r3, #0
 8005b1a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005b1c:	f7ff ff3e 	bl	800599c <__NVIC_GetPriorityGrouping>
 8005b20:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005b22:	687a      	ldr	r2, [r7, #4]
 8005b24:	68b9      	ldr	r1, [r7, #8]
 8005b26:	6978      	ldr	r0, [r7, #20]
 8005b28:	f7ff ff8e 	bl	8005a48 <NVIC_EncodePriority>
 8005b2c:	4602      	mov	r2, r0
 8005b2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005b32:	4611      	mov	r1, r2
 8005b34:	4618      	mov	r0, r3
 8005b36:	f7ff ff5d 	bl	80059f4 <__NVIC_SetPriority>
}
 8005b3a:	bf00      	nop
 8005b3c:	3718      	adds	r7, #24
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	bd80      	pop	{r7, pc}

08005b42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005b42:	b580      	push	{r7, lr}
 8005b44:	b082      	sub	sp, #8
 8005b46:	af00      	add	r7, sp, #0
 8005b48:	4603      	mov	r3, r0
 8005b4a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005b4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b50:	4618      	mov	r0, r3
 8005b52:	f7ff ff31 	bl	80059b8 <__NVIC_EnableIRQ>
}
 8005b56:	bf00      	nop
 8005b58:	3708      	adds	r7, #8
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	bd80      	pop	{r7, pc}

08005b5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005b5e:	b580      	push	{r7, lr}
 8005b60:	b082      	sub	sp, #8
 8005b62:	af00      	add	r7, sp, #0
 8005b64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005b66:	6878      	ldr	r0, [r7, #4]
 8005b68:	f7ff ffa2 	bl	8005ab0 <SysTick_Config>
 8005b6c:	4603      	mov	r3, r0
}
 8005b6e:	4618      	mov	r0, r3
 8005b70:	3708      	adds	r7, #8
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bd80      	pop	{r7, pc}
	...

08005b78 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005b78:	b480      	push	{r7}
 8005b7a:	b085      	sub	sp, #20
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d101      	bne.n	8005b8a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005b86:	2301      	movs	r3, #1
 8005b88:	e098      	b.n	8005cbc <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	461a      	mov	r2, r3
 8005b90:	4b4d      	ldr	r3, [pc, #308]	@ (8005cc8 <HAL_DMA_Init+0x150>)
 8005b92:	429a      	cmp	r2, r3
 8005b94:	d80f      	bhi.n	8005bb6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	461a      	mov	r2, r3
 8005b9c:	4b4b      	ldr	r3, [pc, #300]	@ (8005ccc <HAL_DMA_Init+0x154>)
 8005b9e:	4413      	add	r3, r2
 8005ba0:	4a4b      	ldr	r2, [pc, #300]	@ (8005cd0 <HAL_DMA_Init+0x158>)
 8005ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ba6:	091b      	lsrs	r3, r3, #4
 8005ba8:	009a      	lsls	r2, r3, #2
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	4a48      	ldr	r2, [pc, #288]	@ (8005cd4 <HAL_DMA_Init+0x15c>)
 8005bb2:	641a      	str	r2, [r3, #64]	@ 0x40
 8005bb4:	e00e      	b.n	8005bd4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	461a      	mov	r2, r3
 8005bbc:	4b46      	ldr	r3, [pc, #280]	@ (8005cd8 <HAL_DMA_Init+0x160>)
 8005bbe:	4413      	add	r3, r2
 8005bc0:	4a43      	ldr	r2, [pc, #268]	@ (8005cd0 <HAL_DMA_Init+0x158>)
 8005bc2:	fba2 2303 	umull	r2, r3, r2, r3
 8005bc6:	091b      	lsrs	r3, r3, #4
 8005bc8:	009a      	lsls	r2, r3, #2
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	4a42      	ldr	r2, [pc, #264]	@ (8005cdc <HAL_DMA_Init+0x164>)
 8005bd2:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2202      	movs	r2, #2
 8005bd8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8005bea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005bee:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005bf8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	691b      	ldr	r3, [r3, #16]
 8005bfe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005c04:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	699b      	ldr	r3, [r3, #24]
 8005c0a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005c10:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6a1b      	ldr	r3, [r3, #32]
 8005c16:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005c18:	68fa      	ldr	r2, [r7, #12]
 8005c1a:	4313      	orrs	r3, r2
 8005c1c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	68fa      	ldr	r2, [r7, #12]
 8005c24:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	689b      	ldr	r3, [r3, #8]
 8005c2a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005c2e:	d039      	beq.n	8005ca4 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c34:	4a27      	ldr	r2, [pc, #156]	@ (8005cd4 <HAL_DMA_Init+0x15c>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d11a      	bne.n	8005c70 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8005c3a:	4b29      	ldr	r3, [pc, #164]	@ (8005ce0 <HAL_DMA_Init+0x168>)
 8005c3c:	681a      	ldr	r2, [r3, #0]
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c42:	f003 031c 	and.w	r3, r3, #28
 8005c46:	210f      	movs	r1, #15
 8005c48:	fa01 f303 	lsl.w	r3, r1, r3
 8005c4c:	43db      	mvns	r3, r3
 8005c4e:	4924      	ldr	r1, [pc, #144]	@ (8005ce0 <HAL_DMA_Init+0x168>)
 8005c50:	4013      	ands	r3, r2
 8005c52:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8005c54:	4b22      	ldr	r3, [pc, #136]	@ (8005ce0 <HAL_DMA_Init+0x168>)
 8005c56:	681a      	ldr	r2, [r3, #0]
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6859      	ldr	r1, [r3, #4]
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c60:	f003 031c 	and.w	r3, r3, #28
 8005c64:	fa01 f303 	lsl.w	r3, r1, r3
 8005c68:	491d      	ldr	r1, [pc, #116]	@ (8005ce0 <HAL_DMA_Init+0x168>)
 8005c6a:	4313      	orrs	r3, r2
 8005c6c:	600b      	str	r3, [r1, #0]
 8005c6e:	e019      	b.n	8005ca4 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8005c70:	4b1c      	ldr	r3, [pc, #112]	@ (8005ce4 <HAL_DMA_Init+0x16c>)
 8005c72:	681a      	ldr	r2, [r3, #0]
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c78:	f003 031c 	and.w	r3, r3, #28
 8005c7c:	210f      	movs	r1, #15
 8005c7e:	fa01 f303 	lsl.w	r3, r1, r3
 8005c82:	43db      	mvns	r3, r3
 8005c84:	4917      	ldr	r1, [pc, #92]	@ (8005ce4 <HAL_DMA_Init+0x16c>)
 8005c86:	4013      	ands	r3, r2
 8005c88:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8005c8a:	4b16      	ldr	r3, [pc, #88]	@ (8005ce4 <HAL_DMA_Init+0x16c>)
 8005c8c:	681a      	ldr	r2, [r3, #0]
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6859      	ldr	r1, [r3, #4]
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c96:	f003 031c 	and.w	r3, r3, #28
 8005c9a:	fa01 f303 	lsl.w	r3, r1, r3
 8005c9e:	4911      	ldr	r1, [pc, #68]	@ (8005ce4 <HAL_DMA_Init+0x16c>)
 8005ca0:	4313      	orrs	r3, r2
 8005ca2:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2201      	movs	r2, #1
 8005cae:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8005cba:	2300      	movs	r3, #0
}
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	3714      	adds	r7, #20
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc6:	4770      	bx	lr
 8005cc8:	40020407 	.word	0x40020407
 8005ccc:	bffdfff8 	.word	0xbffdfff8
 8005cd0:	cccccccd 	.word	0xcccccccd
 8005cd4:	40020000 	.word	0x40020000
 8005cd8:	bffdfbf8 	.word	0xbffdfbf8
 8005cdc:	40020400 	.word	0x40020400
 8005ce0:	400200a8 	.word	0x400200a8
 8005ce4:	400204a8 	.word	0x400204a8

08005ce8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b086      	sub	sp, #24
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	60f8      	str	r0, [r7, #12]
 8005cf0:	60b9      	str	r1, [r7, #8]
 8005cf2:	607a      	str	r2, [r7, #4]
 8005cf4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005d00:	2b01      	cmp	r3, #1
 8005d02:	d101      	bne.n	8005d08 <HAL_DMA_Start_IT+0x20>
 8005d04:	2302      	movs	r3, #2
 8005d06:	e04b      	b.n	8005da0 <HAL_DMA_Start_IT+0xb8>
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	2201      	movs	r2, #1
 8005d0c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005d16:	b2db      	uxtb	r3, r3
 8005d18:	2b01      	cmp	r3, #1
 8005d1a:	d13a      	bne.n	8005d92 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	2202      	movs	r2, #2
 8005d20:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	2200      	movs	r2, #0
 8005d28:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	681a      	ldr	r2, [r3, #0]
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f022 0201 	bic.w	r2, r2, #1
 8005d38:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	687a      	ldr	r2, [r7, #4]
 8005d3e:	68b9      	ldr	r1, [r7, #8]
 8005d40:	68f8      	ldr	r0, [r7, #12]
 8005d42:	f000 f921 	bl	8005f88 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d008      	beq.n	8005d60 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	681a      	ldr	r2, [r3, #0]
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f042 020e 	orr.w	r2, r2, #14
 8005d5c:	601a      	str	r2, [r3, #0]
 8005d5e:	e00f      	b.n	8005d80 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	681a      	ldr	r2, [r3, #0]
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f022 0204 	bic.w	r2, r2, #4
 8005d6e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	681a      	ldr	r2, [r3, #0]
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f042 020a 	orr.w	r2, r2, #10
 8005d7e:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	681a      	ldr	r2, [r3, #0]
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f042 0201 	orr.w	r2, r2, #1
 8005d8e:	601a      	str	r2, [r3, #0]
 8005d90:	e005      	b.n	8005d9e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	2200      	movs	r2, #0
 8005d96:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005d9a:	2302      	movs	r3, #2
 8005d9c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005d9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005da0:	4618      	mov	r0, r3
 8005da2:	3718      	adds	r7, #24
 8005da4:	46bd      	mov	sp, r7
 8005da6:	bd80      	pop	{r7, pc}

08005da8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b084      	sub	sp, #16
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005db0:	2300      	movs	r3, #0
 8005db2:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005dba:	b2db      	uxtb	r3, r3
 8005dbc:	2b02      	cmp	r3, #2
 8005dbe:	d005      	beq.n	8005dcc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2204      	movs	r2, #4
 8005dc4:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	73fb      	strb	r3, [r7, #15]
 8005dca:	e029      	b.n	8005e20 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	681a      	ldr	r2, [r3, #0]
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f022 020e 	bic.w	r2, r2, #14
 8005dda:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	681a      	ldr	r2, [r3, #0]
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f022 0201 	bic.w	r2, r2, #1
 8005dea:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005df0:	f003 021c 	and.w	r2, r3, #28
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005df8:	2101      	movs	r1, #1
 8005dfa:	fa01 f202 	lsl.w	r2, r1, r2
 8005dfe:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2201      	movs	r2, #1
 8005e04:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d003      	beq.n	8005e20 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e1c:	6878      	ldr	r0, [r7, #4]
 8005e1e:	4798      	blx	r3
    }
  }
  return status;
 8005e20:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e22:	4618      	mov	r0, r3
 8005e24:	3710      	adds	r7, #16
 8005e26:	46bd      	mov	sp, r7
 8005e28:	bd80      	pop	{r7, pc}

08005e2a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005e2a:	b580      	push	{r7, lr}
 8005e2c:	b084      	sub	sp, #16
 8005e2e:	af00      	add	r7, sp, #0
 8005e30:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e46:	f003 031c 	and.w	r3, r3, #28
 8005e4a:	2204      	movs	r2, #4
 8005e4c:	409a      	lsls	r2, r3
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	4013      	ands	r3, r2
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d026      	beq.n	8005ea4 <HAL_DMA_IRQHandler+0x7a>
 8005e56:	68bb      	ldr	r3, [r7, #8]
 8005e58:	f003 0304 	and.w	r3, r3, #4
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d021      	beq.n	8005ea4 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f003 0320 	and.w	r3, r3, #32
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d107      	bne.n	8005e7e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	681a      	ldr	r2, [r3, #0]
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f022 0204 	bic.w	r2, r2, #4
 8005e7c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e82:	f003 021c 	and.w	r2, r3, #28
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e8a:	2104      	movs	r1, #4
 8005e8c:	fa01 f202 	lsl.w	r2, r1, r2
 8005e90:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d071      	beq.n	8005f7e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e9e:	6878      	ldr	r0, [r7, #4]
 8005ea0:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8005ea2:	e06c      	b.n	8005f7e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ea8:	f003 031c 	and.w	r3, r3, #28
 8005eac:	2202      	movs	r2, #2
 8005eae:	409a      	lsls	r2, r3
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	4013      	ands	r3, r2
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d02e      	beq.n	8005f16 <HAL_DMA_IRQHandler+0xec>
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	f003 0302 	and.w	r3, r3, #2
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d029      	beq.n	8005f16 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f003 0320 	and.w	r3, r3, #32
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d10b      	bne.n	8005ee8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	681a      	ldr	r2, [r3, #0]
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f022 020a 	bic.w	r2, r2, #10
 8005ede:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2201      	movs	r2, #1
 8005ee4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005eec:	f003 021c 	and.w	r2, r3, #28
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ef4:	2102      	movs	r1, #2
 8005ef6:	fa01 f202 	lsl.w	r2, r1, r2
 8005efa:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2200      	movs	r2, #0
 8005f00:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d038      	beq.n	8005f7e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f10:	6878      	ldr	r0, [r7, #4]
 8005f12:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8005f14:	e033      	b.n	8005f7e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f1a:	f003 031c 	and.w	r3, r3, #28
 8005f1e:	2208      	movs	r2, #8
 8005f20:	409a      	lsls	r2, r3
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	4013      	ands	r3, r2
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d02a      	beq.n	8005f80 <HAL_DMA_IRQHandler+0x156>
 8005f2a:	68bb      	ldr	r3, [r7, #8]
 8005f2c:	f003 0308 	and.w	r3, r3, #8
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d025      	beq.n	8005f80 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	681a      	ldr	r2, [r3, #0]
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f022 020e 	bic.w	r2, r2, #14
 8005f42:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f48:	f003 021c 	and.w	r2, r3, #28
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f50:	2101      	movs	r1, #1
 8005f52:	fa01 f202 	lsl.w	r2, r1, r2
 8005f56:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2201      	movs	r2, #1
 8005f5c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2201      	movs	r2, #1
 8005f62:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2200      	movs	r2, #0
 8005f6a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d004      	beq.n	8005f80 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f7a:	6878      	ldr	r0, [r7, #4]
 8005f7c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005f7e:	bf00      	nop
 8005f80:	bf00      	nop
}
 8005f82:	3710      	adds	r7, #16
 8005f84:	46bd      	mov	sp, r7
 8005f86:	bd80      	pop	{r7, pc}

08005f88 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005f88:	b480      	push	{r7}
 8005f8a:	b085      	sub	sp, #20
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	60f8      	str	r0, [r7, #12]
 8005f90:	60b9      	str	r1, [r7, #8]
 8005f92:	607a      	str	r2, [r7, #4]
 8005f94:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f9a:	f003 021c 	and.w	r2, r3, #28
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fa2:	2101      	movs	r1, #1
 8005fa4:	fa01 f202 	lsl.w	r2, r1, r2
 8005fa8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	683a      	ldr	r2, [r7, #0]
 8005fb0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	689b      	ldr	r3, [r3, #8]
 8005fb6:	2b10      	cmp	r3, #16
 8005fb8:	d108      	bne.n	8005fcc <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	687a      	ldr	r2, [r7, #4]
 8005fc0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	68ba      	ldr	r2, [r7, #8]
 8005fc8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005fca:	e007      	b.n	8005fdc <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	68ba      	ldr	r2, [r7, #8]
 8005fd2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	687a      	ldr	r2, [r7, #4]
 8005fda:	60da      	str	r2, [r3, #12]
}
 8005fdc:	bf00      	nop
 8005fde:	3714      	adds	r7, #20
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe6:	4770      	bx	lr

08005fe8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005fe8:	b480      	push	{r7}
 8005fea:	b087      	sub	sp, #28
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
 8005ff0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005ff6:	e148      	b.n	800628a <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	681a      	ldr	r2, [r3, #0]
 8005ffc:	2101      	movs	r1, #1
 8005ffe:	697b      	ldr	r3, [r7, #20]
 8006000:	fa01 f303 	lsl.w	r3, r1, r3
 8006004:	4013      	ands	r3, r2
 8006006:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	2b00      	cmp	r3, #0
 800600c:	f000 813a 	beq.w	8006284 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	685b      	ldr	r3, [r3, #4]
 8006014:	f003 0303 	and.w	r3, r3, #3
 8006018:	2b01      	cmp	r3, #1
 800601a:	d005      	beq.n	8006028 <HAL_GPIO_Init+0x40>
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	685b      	ldr	r3, [r3, #4]
 8006020:	f003 0303 	and.w	r3, r3, #3
 8006024:	2b02      	cmp	r3, #2
 8006026:	d130      	bne.n	800608a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	689b      	ldr	r3, [r3, #8]
 800602c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800602e:	697b      	ldr	r3, [r7, #20]
 8006030:	005b      	lsls	r3, r3, #1
 8006032:	2203      	movs	r2, #3
 8006034:	fa02 f303 	lsl.w	r3, r2, r3
 8006038:	43db      	mvns	r3, r3
 800603a:	693a      	ldr	r2, [r7, #16]
 800603c:	4013      	ands	r3, r2
 800603e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	68da      	ldr	r2, [r3, #12]
 8006044:	697b      	ldr	r3, [r7, #20]
 8006046:	005b      	lsls	r3, r3, #1
 8006048:	fa02 f303 	lsl.w	r3, r2, r3
 800604c:	693a      	ldr	r2, [r7, #16]
 800604e:	4313      	orrs	r3, r2
 8006050:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	693a      	ldr	r2, [r7, #16]
 8006056:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	685b      	ldr	r3, [r3, #4]
 800605c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800605e:	2201      	movs	r2, #1
 8006060:	697b      	ldr	r3, [r7, #20]
 8006062:	fa02 f303 	lsl.w	r3, r2, r3
 8006066:	43db      	mvns	r3, r3
 8006068:	693a      	ldr	r2, [r7, #16]
 800606a:	4013      	ands	r3, r2
 800606c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	685b      	ldr	r3, [r3, #4]
 8006072:	091b      	lsrs	r3, r3, #4
 8006074:	f003 0201 	and.w	r2, r3, #1
 8006078:	697b      	ldr	r3, [r7, #20]
 800607a:	fa02 f303 	lsl.w	r3, r2, r3
 800607e:	693a      	ldr	r2, [r7, #16]
 8006080:	4313      	orrs	r3, r2
 8006082:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	693a      	ldr	r2, [r7, #16]
 8006088:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	685b      	ldr	r3, [r3, #4]
 800608e:	f003 0303 	and.w	r3, r3, #3
 8006092:	2b03      	cmp	r3, #3
 8006094:	d017      	beq.n	80060c6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	68db      	ldr	r3, [r3, #12]
 800609a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800609c:	697b      	ldr	r3, [r7, #20]
 800609e:	005b      	lsls	r3, r3, #1
 80060a0:	2203      	movs	r2, #3
 80060a2:	fa02 f303 	lsl.w	r3, r2, r3
 80060a6:	43db      	mvns	r3, r3
 80060a8:	693a      	ldr	r2, [r7, #16]
 80060aa:	4013      	ands	r3, r2
 80060ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	689a      	ldr	r2, [r3, #8]
 80060b2:	697b      	ldr	r3, [r7, #20]
 80060b4:	005b      	lsls	r3, r3, #1
 80060b6:	fa02 f303 	lsl.w	r3, r2, r3
 80060ba:	693a      	ldr	r2, [r7, #16]
 80060bc:	4313      	orrs	r3, r2
 80060be:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	693a      	ldr	r2, [r7, #16]
 80060c4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	685b      	ldr	r3, [r3, #4]
 80060ca:	f003 0303 	and.w	r3, r3, #3
 80060ce:	2b02      	cmp	r3, #2
 80060d0:	d123      	bne.n	800611a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80060d2:	697b      	ldr	r3, [r7, #20]
 80060d4:	08da      	lsrs	r2, r3, #3
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	3208      	adds	r2, #8
 80060da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060de:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80060e0:	697b      	ldr	r3, [r7, #20]
 80060e2:	f003 0307 	and.w	r3, r3, #7
 80060e6:	009b      	lsls	r3, r3, #2
 80060e8:	220f      	movs	r2, #15
 80060ea:	fa02 f303 	lsl.w	r3, r2, r3
 80060ee:	43db      	mvns	r3, r3
 80060f0:	693a      	ldr	r2, [r7, #16]
 80060f2:	4013      	ands	r3, r2
 80060f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	691a      	ldr	r2, [r3, #16]
 80060fa:	697b      	ldr	r3, [r7, #20]
 80060fc:	f003 0307 	and.w	r3, r3, #7
 8006100:	009b      	lsls	r3, r3, #2
 8006102:	fa02 f303 	lsl.w	r3, r2, r3
 8006106:	693a      	ldr	r2, [r7, #16]
 8006108:	4313      	orrs	r3, r2
 800610a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800610c:	697b      	ldr	r3, [r7, #20]
 800610e:	08da      	lsrs	r2, r3, #3
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	3208      	adds	r2, #8
 8006114:	6939      	ldr	r1, [r7, #16]
 8006116:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8006120:	697b      	ldr	r3, [r7, #20]
 8006122:	005b      	lsls	r3, r3, #1
 8006124:	2203      	movs	r2, #3
 8006126:	fa02 f303 	lsl.w	r3, r2, r3
 800612a:	43db      	mvns	r3, r3
 800612c:	693a      	ldr	r2, [r7, #16]
 800612e:	4013      	ands	r3, r2
 8006130:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	685b      	ldr	r3, [r3, #4]
 8006136:	f003 0203 	and.w	r2, r3, #3
 800613a:	697b      	ldr	r3, [r7, #20]
 800613c:	005b      	lsls	r3, r3, #1
 800613e:	fa02 f303 	lsl.w	r3, r2, r3
 8006142:	693a      	ldr	r2, [r7, #16]
 8006144:	4313      	orrs	r3, r2
 8006146:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	693a      	ldr	r2, [r7, #16]
 800614c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	685b      	ldr	r3, [r3, #4]
 8006152:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006156:	2b00      	cmp	r3, #0
 8006158:	f000 8094 	beq.w	8006284 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800615c:	4b52      	ldr	r3, [pc, #328]	@ (80062a8 <HAL_GPIO_Init+0x2c0>)
 800615e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006160:	4a51      	ldr	r2, [pc, #324]	@ (80062a8 <HAL_GPIO_Init+0x2c0>)
 8006162:	f043 0301 	orr.w	r3, r3, #1
 8006166:	6613      	str	r3, [r2, #96]	@ 0x60
 8006168:	4b4f      	ldr	r3, [pc, #316]	@ (80062a8 <HAL_GPIO_Init+0x2c0>)
 800616a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800616c:	f003 0301 	and.w	r3, r3, #1
 8006170:	60bb      	str	r3, [r7, #8]
 8006172:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8006174:	4a4d      	ldr	r2, [pc, #308]	@ (80062ac <HAL_GPIO_Init+0x2c4>)
 8006176:	697b      	ldr	r3, [r7, #20]
 8006178:	089b      	lsrs	r3, r3, #2
 800617a:	3302      	adds	r3, #2
 800617c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006180:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8006182:	697b      	ldr	r3, [r7, #20]
 8006184:	f003 0303 	and.w	r3, r3, #3
 8006188:	009b      	lsls	r3, r3, #2
 800618a:	220f      	movs	r2, #15
 800618c:	fa02 f303 	lsl.w	r3, r2, r3
 8006190:	43db      	mvns	r3, r3
 8006192:	693a      	ldr	r2, [r7, #16]
 8006194:	4013      	ands	r3, r2
 8006196:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800619e:	d00d      	beq.n	80061bc <HAL_GPIO_Init+0x1d4>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	4a43      	ldr	r2, [pc, #268]	@ (80062b0 <HAL_GPIO_Init+0x2c8>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d007      	beq.n	80061b8 <HAL_GPIO_Init+0x1d0>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	4a42      	ldr	r2, [pc, #264]	@ (80062b4 <HAL_GPIO_Init+0x2cc>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d101      	bne.n	80061b4 <HAL_GPIO_Init+0x1cc>
 80061b0:	2302      	movs	r3, #2
 80061b2:	e004      	b.n	80061be <HAL_GPIO_Init+0x1d6>
 80061b4:	2307      	movs	r3, #7
 80061b6:	e002      	b.n	80061be <HAL_GPIO_Init+0x1d6>
 80061b8:	2301      	movs	r3, #1
 80061ba:	e000      	b.n	80061be <HAL_GPIO_Init+0x1d6>
 80061bc:	2300      	movs	r3, #0
 80061be:	697a      	ldr	r2, [r7, #20]
 80061c0:	f002 0203 	and.w	r2, r2, #3
 80061c4:	0092      	lsls	r2, r2, #2
 80061c6:	4093      	lsls	r3, r2
 80061c8:	693a      	ldr	r2, [r7, #16]
 80061ca:	4313      	orrs	r3, r2
 80061cc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80061ce:	4937      	ldr	r1, [pc, #220]	@ (80062ac <HAL_GPIO_Init+0x2c4>)
 80061d0:	697b      	ldr	r3, [r7, #20]
 80061d2:	089b      	lsrs	r3, r3, #2
 80061d4:	3302      	adds	r3, #2
 80061d6:	693a      	ldr	r2, [r7, #16]
 80061d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80061dc:	4b36      	ldr	r3, [pc, #216]	@ (80062b8 <HAL_GPIO_Init+0x2d0>)
 80061de:	689b      	ldr	r3, [r3, #8]
 80061e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	43db      	mvns	r3, r3
 80061e6:	693a      	ldr	r2, [r7, #16]
 80061e8:	4013      	ands	r3, r2
 80061ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	685b      	ldr	r3, [r3, #4]
 80061f0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d003      	beq.n	8006200 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80061f8:	693a      	ldr	r2, [r7, #16]
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	4313      	orrs	r3, r2
 80061fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006200:	4a2d      	ldr	r2, [pc, #180]	@ (80062b8 <HAL_GPIO_Init+0x2d0>)
 8006202:	693b      	ldr	r3, [r7, #16]
 8006204:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8006206:	4b2c      	ldr	r3, [pc, #176]	@ (80062b8 <HAL_GPIO_Init+0x2d0>)
 8006208:	68db      	ldr	r3, [r3, #12]
 800620a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	43db      	mvns	r3, r3
 8006210:	693a      	ldr	r2, [r7, #16]
 8006212:	4013      	ands	r3, r2
 8006214:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	685b      	ldr	r3, [r3, #4]
 800621a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800621e:	2b00      	cmp	r3, #0
 8006220:	d003      	beq.n	800622a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8006222:	693a      	ldr	r2, [r7, #16]
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	4313      	orrs	r3, r2
 8006228:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800622a:	4a23      	ldr	r2, [pc, #140]	@ (80062b8 <HAL_GPIO_Init+0x2d0>)
 800622c:	693b      	ldr	r3, [r7, #16]
 800622e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8006230:	4b21      	ldr	r3, [pc, #132]	@ (80062b8 <HAL_GPIO_Init+0x2d0>)
 8006232:	685b      	ldr	r3, [r3, #4]
 8006234:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	43db      	mvns	r3, r3
 800623a:	693a      	ldr	r2, [r7, #16]
 800623c:	4013      	ands	r3, r2
 800623e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	685b      	ldr	r3, [r3, #4]
 8006244:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006248:	2b00      	cmp	r3, #0
 800624a:	d003      	beq.n	8006254 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 800624c:	693a      	ldr	r2, [r7, #16]
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	4313      	orrs	r3, r2
 8006252:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006254:	4a18      	ldr	r2, [pc, #96]	@ (80062b8 <HAL_GPIO_Init+0x2d0>)
 8006256:	693b      	ldr	r3, [r7, #16]
 8006258:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800625a:	4b17      	ldr	r3, [pc, #92]	@ (80062b8 <HAL_GPIO_Init+0x2d0>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	43db      	mvns	r3, r3
 8006264:	693a      	ldr	r2, [r7, #16]
 8006266:	4013      	ands	r3, r2
 8006268:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	685b      	ldr	r3, [r3, #4]
 800626e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006272:	2b00      	cmp	r3, #0
 8006274:	d003      	beq.n	800627e <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8006276:	693a      	ldr	r2, [r7, #16]
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	4313      	orrs	r3, r2
 800627c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800627e:	4a0e      	ldr	r2, [pc, #56]	@ (80062b8 <HAL_GPIO_Init+0x2d0>)
 8006280:	693b      	ldr	r3, [r7, #16]
 8006282:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8006284:	697b      	ldr	r3, [r7, #20]
 8006286:	3301      	adds	r3, #1
 8006288:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	681a      	ldr	r2, [r3, #0]
 800628e:	697b      	ldr	r3, [r7, #20]
 8006290:	fa22 f303 	lsr.w	r3, r2, r3
 8006294:	2b00      	cmp	r3, #0
 8006296:	f47f aeaf 	bne.w	8005ff8 <HAL_GPIO_Init+0x10>
  }
}
 800629a:	bf00      	nop
 800629c:	bf00      	nop
 800629e:	371c      	adds	r7, #28
 80062a0:	46bd      	mov	sp, r7
 80062a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a6:	4770      	bx	lr
 80062a8:	40021000 	.word	0x40021000
 80062ac:	40010000 	.word	0x40010000
 80062b0:	48000400 	.word	0x48000400
 80062b4:	48000800 	.word	0x48000800
 80062b8:	40010400 	.word	0x40010400

080062bc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80062bc:	b480      	push	{r7}
 80062be:	b085      	sub	sp, #20
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
 80062c4:	460b      	mov	r3, r1
 80062c6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	691a      	ldr	r2, [r3, #16]
 80062cc:	887b      	ldrh	r3, [r7, #2]
 80062ce:	4013      	ands	r3, r2
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d002      	beq.n	80062da <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80062d4:	2301      	movs	r3, #1
 80062d6:	73fb      	strb	r3, [r7, #15]
 80062d8:	e001      	b.n	80062de <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80062da:	2300      	movs	r3, #0
 80062dc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80062de:	7bfb      	ldrb	r3, [r7, #15]
}
 80062e0:	4618      	mov	r0, r3
 80062e2:	3714      	adds	r7, #20
 80062e4:	46bd      	mov	sp, r7
 80062e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ea:	4770      	bx	lr

080062ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80062ec:	b480      	push	{r7}
 80062ee:	b083      	sub	sp, #12
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
 80062f4:	460b      	mov	r3, r1
 80062f6:	807b      	strh	r3, [r7, #2]
 80062f8:	4613      	mov	r3, r2
 80062fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80062fc:	787b      	ldrb	r3, [r7, #1]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d003      	beq.n	800630a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006302:	887a      	ldrh	r2, [r7, #2]
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006308:	e002      	b.n	8006310 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800630a:	887a      	ldrh	r2, [r7, #2]
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8006310:	bf00      	nop
 8006312:	370c      	adds	r7, #12
 8006314:	46bd      	mov	sp, r7
 8006316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631a:	4770      	bx	lr

0800631c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800631c:	b480      	push	{r7}
 800631e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006320:	4b05      	ldr	r3, [pc, #20]	@ (8006338 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	4a04      	ldr	r2, [pc, #16]	@ (8006338 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006326:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800632a:	6013      	str	r3, [r2, #0]
}
 800632c:	bf00      	nop
 800632e:	46bd      	mov	sp, r7
 8006330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006334:	4770      	bx	lr
 8006336:	bf00      	nop
 8006338:	40007000 	.word	0x40007000

0800633c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800633c:	b480      	push	{r7}
 800633e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8006340:	4b04      	ldr	r3, [pc, #16]	@ (8006354 <HAL_PWREx_GetVoltageRange+0x18>)
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8006348:	4618      	mov	r0, r3
 800634a:	46bd      	mov	sp, r7
 800634c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006350:	4770      	bx	lr
 8006352:	bf00      	nop
 8006354:	40007000 	.word	0x40007000

08006358 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006358:	b480      	push	{r7}
 800635a:	b085      	sub	sp, #20
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006366:	d130      	bne.n	80063ca <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8006368:	4b23      	ldr	r3, [pc, #140]	@ (80063f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006370:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006374:	d038      	beq.n	80063e8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006376:	4b20      	ldr	r3, [pc, #128]	@ (80063f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800637e:	4a1e      	ldr	r2, [pc, #120]	@ (80063f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006380:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006384:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006386:	4b1d      	ldr	r3, [pc, #116]	@ (80063fc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	2232      	movs	r2, #50	@ 0x32
 800638c:	fb02 f303 	mul.w	r3, r2, r3
 8006390:	4a1b      	ldr	r2, [pc, #108]	@ (8006400 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8006392:	fba2 2303 	umull	r2, r3, r2, r3
 8006396:	0c9b      	lsrs	r3, r3, #18
 8006398:	3301      	adds	r3, #1
 800639a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800639c:	e002      	b.n	80063a4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	3b01      	subs	r3, #1
 80063a2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80063a4:	4b14      	ldr	r3, [pc, #80]	@ (80063f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80063a6:	695b      	ldr	r3, [r3, #20]
 80063a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80063ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80063b0:	d102      	bne.n	80063b8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d1f2      	bne.n	800639e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80063b8:	4b0f      	ldr	r3, [pc, #60]	@ (80063f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80063ba:	695b      	ldr	r3, [r3, #20]
 80063bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80063c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80063c4:	d110      	bne.n	80063e8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80063c6:	2303      	movs	r3, #3
 80063c8:	e00f      	b.n	80063ea <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80063ca:	4b0b      	ldr	r3, [pc, #44]	@ (80063f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80063d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80063d6:	d007      	beq.n	80063e8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80063d8:	4b07      	ldr	r3, [pc, #28]	@ (80063f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80063e0:	4a05      	ldr	r2, [pc, #20]	@ (80063f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80063e2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80063e6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80063e8:	2300      	movs	r3, #0
}
 80063ea:	4618      	mov	r0, r3
 80063ec:	3714      	adds	r7, #20
 80063ee:	46bd      	mov	sp, r7
 80063f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f4:	4770      	bx	lr
 80063f6:	bf00      	nop
 80063f8:	40007000 	.word	0x40007000
 80063fc:	20000014 	.word	0x20000014
 8006400:	431bde83 	.word	0x431bde83

08006404 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b088      	sub	sp, #32
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d102      	bne.n	8006418 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006412:	2301      	movs	r3, #1
 8006414:	f000 bc02 	b.w	8006c1c <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006418:	4b96      	ldr	r3, [pc, #600]	@ (8006674 <HAL_RCC_OscConfig+0x270>)
 800641a:	689b      	ldr	r3, [r3, #8]
 800641c:	f003 030c 	and.w	r3, r3, #12
 8006420:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006422:	4b94      	ldr	r3, [pc, #592]	@ (8006674 <HAL_RCC_OscConfig+0x270>)
 8006424:	68db      	ldr	r3, [r3, #12]
 8006426:	f003 0303 	and.w	r3, r3, #3
 800642a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f003 0310 	and.w	r3, r3, #16
 8006434:	2b00      	cmp	r3, #0
 8006436:	f000 80e4 	beq.w	8006602 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800643a:	69bb      	ldr	r3, [r7, #24]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d007      	beq.n	8006450 <HAL_RCC_OscConfig+0x4c>
 8006440:	69bb      	ldr	r3, [r7, #24]
 8006442:	2b0c      	cmp	r3, #12
 8006444:	f040 808b 	bne.w	800655e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8006448:	697b      	ldr	r3, [r7, #20]
 800644a:	2b01      	cmp	r3, #1
 800644c:	f040 8087 	bne.w	800655e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006450:	4b88      	ldr	r3, [pc, #544]	@ (8006674 <HAL_RCC_OscConfig+0x270>)
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f003 0302 	and.w	r3, r3, #2
 8006458:	2b00      	cmp	r3, #0
 800645a:	d005      	beq.n	8006468 <HAL_RCC_OscConfig+0x64>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	699b      	ldr	r3, [r3, #24]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d101      	bne.n	8006468 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8006464:	2301      	movs	r3, #1
 8006466:	e3d9      	b.n	8006c1c <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	6a1a      	ldr	r2, [r3, #32]
 800646c:	4b81      	ldr	r3, [pc, #516]	@ (8006674 <HAL_RCC_OscConfig+0x270>)
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f003 0308 	and.w	r3, r3, #8
 8006474:	2b00      	cmp	r3, #0
 8006476:	d004      	beq.n	8006482 <HAL_RCC_OscConfig+0x7e>
 8006478:	4b7e      	ldr	r3, [pc, #504]	@ (8006674 <HAL_RCC_OscConfig+0x270>)
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006480:	e005      	b.n	800648e <HAL_RCC_OscConfig+0x8a>
 8006482:	4b7c      	ldr	r3, [pc, #496]	@ (8006674 <HAL_RCC_OscConfig+0x270>)
 8006484:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006488:	091b      	lsrs	r3, r3, #4
 800648a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800648e:	4293      	cmp	r3, r2
 8006490:	d223      	bcs.n	80064da <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6a1b      	ldr	r3, [r3, #32]
 8006496:	4618      	mov	r0, r3
 8006498:	f000 fd54 	bl	8006f44 <RCC_SetFlashLatencyFromMSIRange>
 800649c:	4603      	mov	r3, r0
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d001      	beq.n	80064a6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80064a2:	2301      	movs	r3, #1
 80064a4:	e3ba      	b.n	8006c1c <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80064a6:	4b73      	ldr	r3, [pc, #460]	@ (8006674 <HAL_RCC_OscConfig+0x270>)
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	4a72      	ldr	r2, [pc, #456]	@ (8006674 <HAL_RCC_OscConfig+0x270>)
 80064ac:	f043 0308 	orr.w	r3, r3, #8
 80064b0:	6013      	str	r3, [r2, #0]
 80064b2:	4b70      	ldr	r3, [pc, #448]	@ (8006674 <HAL_RCC_OscConfig+0x270>)
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6a1b      	ldr	r3, [r3, #32]
 80064be:	496d      	ldr	r1, [pc, #436]	@ (8006674 <HAL_RCC_OscConfig+0x270>)
 80064c0:	4313      	orrs	r3, r2
 80064c2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80064c4:	4b6b      	ldr	r3, [pc, #428]	@ (8006674 <HAL_RCC_OscConfig+0x270>)
 80064c6:	685b      	ldr	r3, [r3, #4]
 80064c8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	69db      	ldr	r3, [r3, #28]
 80064d0:	021b      	lsls	r3, r3, #8
 80064d2:	4968      	ldr	r1, [pc, #416]	@ (8006674 <HAL_RCC_OscConfig+0x270>)
 80064d4:	4313      	orrs	r3, r2
 80064d6:	604b      	str	r3, [r1, #4]
 80064d8:	e025      	b.n	8006526 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80064da:	4b66      	ldr	r3, [pc, #408]	@ (8006674 <HAL_RCC_OscConfig+0x270>)
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	4a65      	ldr	r2, [pc, #404]	@ (8006674 <HAL_RCC_OscConfig+0x270>)
 80064e0:	f043 0308 	orr.w	r3, r3, #8
 80064e4:	6013      	str	r3, [r2, #0]
 80064e6:	4b63      	ldr	r3, [pc, #396]	@ (8006674 <HAL_RCC_OscConfig+0x270>)
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6a1b      	ldr	r3, [r3, #32]
 80064f2:	4960      	ldr	r1, [pc, #384]	@ (8006674 <HAL_RCC_OscConfig+0x270>)
 80064f4:	4313      	orrs	r3, r2
 80064f6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80064f8:	4b5e      	ldr	r3, [pc, #376]	@ (8006674 <HAL_RCC_OscConfig+0x270>)
 80064fa:	685b      	ldr	r3, [r3, #4]
 80064fc:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	69db      	ldr	r3, [r3, #28]
 8006504:	021b      	lsls	r3, r3, #8
 8006506:	495b      	ldr	r1, [pc, #364]	@ (8006674 <HAL_RCC_OscConfig+0x270>)
 8006508:	4313      	orrs	r3, r2
 800650a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800650c:	69bb      	ldr	r3, [r7, #24]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d109      	bne.n	8006526 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6a1b      	ldr	r3, [r3, #32]
 8006516:	4618      	mov	r0, r3
 8006518:	f000 fd14 	bl	8006f44 <RCC_SetFlashLatencyFromMSIRange>
 800651c:	4603      	mov	r3, r0
 800651e:	2b00      	cmp	r3, #0
 8006520:	d001      	beq.n	8006526 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8006522:	2301      	movs	r3, #1
 8006524:	e37a      	b.n	8006c1c <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006526:	f000 fc81 	bl	8006e2c <HAL_RCC_GetSysClockFreq>
 800652a:	4602      	mov	r2, r0
 800652c:	4b51      	ldr	r3, [pc, #324]	@ (8006674 <HAL_RCC_OscConfig+0x270>)
 800652e:	689b      	ldr	r3, [r3, #8]
 8006530:	091b      	lsrs	r3, r3, #4
 8006532:	f003 030f 	and.w	r3, r3, #15
 8006536:	4950      	ldr	r1, [pc, #320]	@ (8006678 <HAL_RCC_OscConfig+0x274>)
 8006538:	5ccb      	ldrb	r3, [r1, r3]
 800653a:	f003 031f 	and.w	r3, r3, #31
 800653e:	fa22 f303 	lsr.w	r3, r2, r3
 8006542:	4a4e      	ldr	r2, [pc, #312]	@ (800667c <HAL_RCC_OscConfig+0x278>)
 8006544:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8006546:	4b4e      	ldr	r3, [pc, #312]	@ (8006680 <HAL_RCC_OscConfig+0x27c>)
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	4618      	mov	r0, r3
 800654c:	f7fe f8a2 	bl	8004694 <HAL_InitTick>
 8006550:	4603      	mov	r3, r0
 8006552:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8006554:	7bfb      	ldrb	r3, [r7, #15]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d052      	beq.n	8006600 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800655a:	7bfb      	ldrb	r3, [r7, #15]
 800655c:	e35e      	b.n	8006c1c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	699b      	ldr	r3, [r3, #24]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d032      	beq.n	80065cc <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006566:	4b43      	ldr	r3, [pc, #268]	@ (8006674 <HAL_RCC_OscConfig+0x270>)
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	4a42      	ldr	r2, [pc, #264]	@ (8006674 <HAL_RCC_OscConfig+0x270>)
 800656c:	f043 0301 	orr.w	r3, r3, #1
 8006570:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006572:	f7fe f8df 	bl	8004734 <HAL_GetTick>
 8006576:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006578:	e008      	b.n	800658c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800657a:	f7fe f8db 	bl	8004734 <HAL_GetTick>
 800657e:	4602      	mov	r2, r0
 8006580:	693b      	ldr	r3, [r7, #16]
 8006582:	1ad3      	subs	r3, r2, r3
 8006584:	2b02      	cmp	r3, #2
 8006586:	d901      	bls.n	800658c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8006588:	2303      	movs	r3, #3
 800658a:	e347      	b.n	8006c1c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800658c:	4b39      	ldr	r3, [pc, #228]	@ (8006674 <HAL_RCC_OscConfig+0x270>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f003 0302 	and.w	r3, r3, #2
 8006594:	2b00      	cmp	r3, #0
 8006596:	d0f0      	beq.n	800657a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006598:	4b36      	ldr	r3, [pc, #216]	@ (8006674 <HAL_RCC_OscConfig+0x270>)
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	4a35      	ldr	r2, [pc, #212]	@ (8006674 <HAL_RCC_OscConfig+0x270>)
 800659e:	f043 0308 	orr.w	r3, r3, #8
 80065a2:	6013      	str	r3, [r2, #0]
 80065a4:	4b33      	ldr	r3, [pc, #204]	@ (8006674 <HAL_RCC_OscConfig+0x270>)
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	6a1b      	ldr	r3, [r3, #32]
 80065b0:	4930      	ldr	r1, [pc, #192]	@ (8006674 <HAL_RCC_OscConfig+0x270>)
 80065b2:	4313      	orrs	r3, r2
 80065b4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80065b6:	4b2f      	ldr	r3, [pc, #188]	@ (8006674 <HAL_RCC_OscConfig+0x270>)
 80065b8:	685b      	ldr	r3, [r3, #4]
 80065ba:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	69db      	ldr	r3, [r3, #28]
 80065c2:	021b      	lsls	r3, r3, #8
 80065c4:	492b      	ldr	r1, [pc, #172]	@ (8006674 <HAL_RCC_OscConfig+0x270>)
 80065c6:	4313      	orrs	r3, r2
 80065c8:	604b      	str	r3, [r1, #4]
 80065ca:	e01a      	b.n	8006602 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80065cc:	4b29      	ldr	r3, [pc, #164]	@ (8006674 <HAL_RCC_OscConfig+0x270>)
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	4a28      	ldr	r2, [pc, #160]	@ (8006674 <HAL_RCC_OscConfig+0x270>)
 80065d2:	f023 0301 	bic.w	r3, r3, #1
 80065d6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80065d8:	f7fe f8ac 	bl	8004734 <HAL_GetTick>
 80065dc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80065de:	e008      	b.n	80065f2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80065e0:	f7fe f8a8 	bl	8004734 <HAL_GetTick>
 80065e4:	4602      	mov	r2, r0
 80065e6:	693b      	ldr	r3, [r7, #16]
 80065e8:	1ad3      	subs	r3, r2, r3
 80065ea:	2b02      	cmp	r3, #2
 80065ec:	d901      	bls.n	80065f2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80065ee:	2303      	movs	r3, #3
 80065f0:	e314      	b.n	8006c1c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80065f2:	4b20      	ldr	r3, [pc, #128]	@ (8006674 <HAL_RCC_OscConfig+0x270>)
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f003 0302 	and.w	r3, r3, #2
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d1f0      	bne.n	80065e0 <HAL_RCC_OscConfig+0x1dc>
 80065fe:	e000      	b.n	8006602 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006600:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f003 0301 	and.w	r3, r3, #1
 800660a:	2b00      	cmp	r3, #0
 800660c:	d073      	beq.n	80066f6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800660e:	69bb      	ldr	r3, [r7, #24]
 8006610:	2b08      	cmp	r3, #8
 8006612:	d005      	beq.n	8006620 <HAL_RCC_OscConfig+0x21c>
 8006614:	69bb      	ldr	r3, [r7, #24]
 8006616:	2b0c      	cmp	r3, #12
 8006618:	d10e      	bne.n	8006638 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800661a:	697b      	ldr	r3, [r7, #20]
 800661c:	2b03      	cmp	r3, #3
 800661e:	d10b      	bne.n	8006638 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006620:	4b14      	ldr	r3, [pc, #80]	@ (8006674 <HAL_RCC_OscConfig+0x270>)
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006628:	2b00      	cmp	r3, #0
 800662a:	d063      	beq.n	80066f4 <HAL_RCC_OscConfig+0x2f0>
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	685b      	ldr	r3, [r3, #4]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d15f      	bne.n	80066f4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8006634:	2301      	movs	r3, #1
 8006636:	e2f1      	b.n	8006c1c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	685b      	ldr	r3, [r3, #4]
 800663c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006640:	d106      	bne.n	8006650 <HAL_RCC_OscConfig+0x24c>
 8006642:	4b0c      	ldr	r3, [pc, #48]	@ (8006674 <HAL_RCC_OscConfig+0x270>)
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	4a0b      	ldr	r2, [pc, #44]	@ (8006674 <HAL_RCC_OscConfig+0x270>)
 8006648:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800664c:	6013      	str	r3, [r2, #0]
 800664e:	e025      	b.n	800669c <HAL_RCC_OscConfig+0x298>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	685b      	ldr	r3, [r3, #4]
 8006654:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006658:	d114      	bne.n	8006684 <HAL_RCC_OscConfig+0x280>
 800665a:	4b06      	ldr	r3, [pc, #24]	@ (8006674 <HAL_RCC_OscConfig+0x270>)
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	4a05      	ldr	r2, [pc, #20]	@ (8006674 <HAL_RCC_OscConfig+0x270>)
 8006660:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006664:	6013      	str	r3, [r2, #0]
 8006666:	4b03      	ldr	r3, [pc, #12]	@ (8006674 <HAL_RCC_OscConfig+0x270>)
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	4a02      	ldr	r2, [pc, #8]	@ (8006674 <HAL_RCC_OscConfig+0x270>)
 800666c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006670:	6013      	str	r3, [r2, #0]
 8006672:	e013      	b.n	800669c <HAL_RCC_OscConfig+0x298>
 8006674:	40021000 	.word	0x40021000
 8006678:	0800ae28 	.word	0x0800ae28
 800667c:	20000014 	.word	0x20000014
 8006680:	20000018 	.word	0x20000018
 8006684:	4ba0      	ldr	r3, [pc, #640]	@ (8006908 <HAL_RCC_OscConfig+0x504>)
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	4a9f      	ldr	r2, [pc, #636]	@ (8006908 <HAL_RCC_OscConfig+0x504>)
 800668a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800668e:	6013      	str	r3, [r2, #0]
 8006690:	4b9d      	ldr	r3, [pc, #628]	@ (8006908 <HAL_RCC_OscConfig+0x504>)
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	4a9c      	ldr	r2, [pc, #624]	@ (8006908 <HAL_RCC_OscConfig+0x504>)
 8006696:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800669a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	685b      	ldr	r3, [r3, #4]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d013      	beq.n	80066cc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066a4:	f7fe f846 	bl	8004734 <HAL_GetTick>
 80066a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80066aa:	e008      	b.n	80066be <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80066ac:	f7fe f842 	bl	8004734 <HAL_GetTick>
 80066b0:	4602      	mov	r2, r0
 80066b2:	693b      	ldr	r3, [r7, #16]
 80066b4:	1ad3      	subs	r3, r2, r3
 80066b6:	2b64      	cmp	r3, #100	@ 0x64
 80066b8:	d901      	bls.n	80066be <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80066ba:	2303      	movs	r3, #3
 80066bc:	e2ae      	b.n	8006c1c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80066be:	4b92      	ldr	r3, [pc, #584]	@ (8006908 <HAL_RCC_OscConfig+0x504>)
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d0f0      	beq.n	80066ac <HAL_RCC_OscConfig+0x2a8>
 80066ca:	e014      	b.n	80066f6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066cc:	f7fe f832 	bl	8004734 <HAL_GetTick>
 80066d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80066d2:	e008      	b.n	80066e6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80066d4:	f7fe f82e 	bl	8004734 <HAL_GetTick>
 80066d8:	4602      	mov	r2, r0
 80066da:	693b      	ldr	r3, [r7, #16]
 80066dc:	1ad3      	subs	r3, r2, r3
 80066de:	2b64      	cmp	r3, #100	@ 0x64
 80066e0:	d901      	bls.n	80066e6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80066e2:	2303      	movs	r3, #3
 80066e4:	e29a      	b.n	8006c1c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80066e6:	4b88      	ldr	r3, [pc, #544]	@ (8006908 <HAL_RCC_OscConfig+0x504>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d1f0      	bne.n	80066d4 <HAL_RCC_OscConfig+0x2d0>
 80066f2:	e000      	b.n	80066f6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80066f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f003 0302 	and.w	r3, r3, #2
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d060      	beq.n	80067c4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8006702:	69bb      	ldr	r3, [r7, #24]
 8006704:	2b04      	cmp	r3, #4
 8006706:	d005      	beq.n	8006714 <HAL_RCC_OscConfig+0x310>
 8006708:	69bb      	ldr	r3, [r7, #24]
 800670a:	2b0c      	cmp	r3, #12
 800670c:	d119      	bne.n	8006742 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800670e:	697b      	ldr	r3, [r7, #20]
 8006710:	2b02      	cmp	r3, #2
 8006712:	d116      	bne.n	8006742 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006714:	4b7c      	ldr	r3, [pc, #496]	@ (8006908 <HAL_RCC_OscConfig+0x504>)
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800671c:	2b00      	cmp	r3, #0
 800671e:	d005      	beq.n	800672c <HAL_RCC_OscConfig+0x328>
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	68db      	ldr	r3, [r3, #12]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d101      	bne.n	800672c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8006728:	2301      	movs	r3, #1
 800672a:	e277      	b.n	8006c1c <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800672c:	4b76      	ldr	r3, [pc, #472]	@ (8006908 <HAL_RCC_OscConfig+0x504>)
 800672e:	685b      	ldr	r3, [r3, #4]
 8006730:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	691b      	ldr	r3, [r3, #16]
 8006738:	061b      	lsls	r3, r3, #24
 800673a:	4973      	ldr	r1, [pc, #460]	@ (8006908 <HAL_RCC_OscConfig+0x504>)
 800673c:	4313      	orrs	r3, r2
 800673e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006740:	e040      	b.n	80067c4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	68db      	ldr	r3, [r3, #12]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d023      	beq.n	8006792 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800674a:	4b6f      	ldr	r3, [pc, #444]	@ (8006908 <HAL_RCC_OscConfig+0x504>)
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	4a6e      	ldr	r2, [pc, #440]	@ (8006908 <HAL_RCC_OscConfig+0x504>)
 8006750:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006754:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006756:	f7fd ffed 	bl	8004734 <HAL_GetTick>
 800675a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800675c:	e008      	b.n	8006770 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800675e:	f7fd ffe9 	bl	8004734 <HAL_GetTick>
 8006762:	4602      	mov	r2, r0
 8006764:	693b      	ldr	r3, [r7, #16]
 8006766:	1ad3      	subs	r3, r2, r3
 8006768:	2b02      	cmp	r3, #2
 800676a:	d901      	bls.n	8006770 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800676c:	2303      	movs	r3, #3
 800676e:	e255      	b.n	8006c1c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006770:	4b65      	ldr	r3, [pc, #404]	@ (8006908 <HAL_RCC_OscConfig+0x504>)
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006778:	2b00      	cmp	r3, #0
 800677a:	d0f0      	beq.n	800675e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800677c:	4b62      	ldr	r3, [pc, #392]	@ (8006908 <HAL_RCC_OscConfig+0x504>)
 800677e:	685b      	ldr	r3, [r3, #4]
 8006780:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	691b      	ldr	r3, [r3, #16]
 8006788:	061b      	lsls	r3, r3, #24
 800678a:	495f      	ldr	r1, [pc, #380]	@ (8006908 <HAL_RCC_OscConfig+0x504>)
 800678c:	4313      	orrs	r3, r2
 800678e:	604b      	str	r3, [r1, #4]
 8006790:	e018      	b.n	80067c4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006792:	4b5d      	ldr	r3, [pc, #372]	@ (8006908 <HAL_RCC_OscConfig+0x504>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	4a5c      	ldr	r2, [pc, #368]	@ (8006908 <HAL_RCC_OscConfig+0x504>)
 8006798:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800679c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800679e:	f7fd ffc9 	bl	8004734 <HAL_GetTick>
 80067a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80067a4:	e008      	b.n	80067b8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80067a6:	f7fd ffc5 	bl	8004734 <HAL_GetTick>
 80067aa:	4602      	mov	r2, r0
 80067ac:	693b      	ldr	r3, [r7, #16]
 80067ae:	1ad3      	subs	r3, r2, r3
 80067b0:	2b02      	cmp	r3, #2
 80067b2:	d901      	bls.n	80067b8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80067b4:	2303      	movs	r3, #3
 80067b6:	e231      	b.n	8006c1c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80067b8:	4b53      	ldr	r3, [pc, #332]	@ (8006908 <HAL_RCC_OscConfig+0x504>)
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d1f0      	bne.n	80067a6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f003 0308 	and.w	r3, r3, #8
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d03c      	beq.n	800684a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	695b      	ldr	r3, [r3, #20]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d01c      	beq.n	8006812 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80067d8:	4b4b      	ldr	r3, [pc, #300]	@ (8006908 <HAL_RCC_OscConfig+0x504>)
 80067da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80067de:	4a4a      	ldr	r2, [pc, #296]	@ (8006908 <HAL_RCC_OscConfig+0x504>)
 80067e0:	f043 0301 	orr.w	r3, r3, #1
 80067e4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067e8:	f7fd ffa4 	bl	8004734 <HAL_GetTick>
 80067ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80067ee:	e008      	b.n	8006802 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80067f0:	f7fd ffa0 	bl	8004734 <HAL_GetTick>
 80067f4:	4602      	mov	r2, r0
 80067f6:	693b      	ldr	r3, [r7, #16]
 80067f8:	1ad3      	subs	r3, r2, r3
 80067fa:	2b02      	cmp	r3, #2
 80067fc:	d901      	bls.n	8006802 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80067fe:	2303      	movs	r3, #3
 8006800:	e20c      	b.n	8006c1c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006802:	4b41      	ldr	r3, [pc, #260]	@ (8006908 <HAL_RCC_OscConfig+0x504>)
 8006804:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006808:	f003 0302 	and.w	r3, r3, #2
 800680c:	2b00      	cmp	r3, #0
 800680e:	d0ef      	beq.n	80067f0 <HAL_RCC_OscConfig+0x3ec>
 8006810:	e01b      	b.n	800684a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006812:	4b3d      	ldr	r3, [pc, #244]	@ (8006908 <HAL_RCC_OscConfig+0x504>)
 8006814:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006818:	4a3b      	ldr	r2, [pc, #236]	@ (8006908 <HAL_RCC_OscConfig+0x504>)
 800681a:	f023 0301 	bic.w	r3, r3, #1
 800681e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006822:	f7fd ff87 	bl	8004734 <HAL_GetTick>
 8006826:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006828:	e008      	b.n	800683c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800682a:	f7fd ff83 	bl	8004734 <HAL_GetTick>
 800682e:	4602      	mov	r2, r0
 8006830:	693b      	ldr	r3, [r7, #16]
 8006832:	1ad3      	subs	r3, r2, r3
 8006834:	2b02      	cmp	r3, #2
 8006836:	d901      	bls.n	800683c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8006838:	2303      	movs	r3, #3
 800683a:	e1ef      	b.n	8006c1c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800683c:	4b32      	ldr	r3, [pc, #200]	@ (8006908 <HAL_RCC_OscConfig+0x504>)
 800683e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006842:	f003 0302 	and.w	r3, r3, #2
 8006846:	2b00      	cmp	r3, #0
 8006848:	d1ef      	bne.n	800682a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f003 0304 	and.w	r3, r3, #4
 8006852:	2b00      	cmp	r3, #0
 8006854:	f000 80a6 	beq.w	80069a4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006858:	2300      	movs	r3, #0
 800685a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800685c:	4b2a      	ldr	r3, [pc, #168]	@ (8006908 <HAL_RCC_OscConfig+0x504>)
 800685e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006860:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006864:	2b00      	cmp	r3, #0
 8006866:	d10d      	bne.n	8006884 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006868:	4b27      	ldr	r3, [pc, #156]	@ (8006908 <HAL_RCC_OscConfig+0x504>)
 800686a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800686c:	4a26      	ldr	r2, [pc, #152]	@ (8006908 <HAL_RCC_OscConfig+0x504>)
 800686e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006872:	6593      	str	r3, [r2, #88]	@ 0x58
 8006874:	4b24      	ldr	r3, [pc, #144]	@ (8006908 <HAL_RCC_OscConfig+0x504>)
 8006876:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006878:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800687c:	60bb      	str	r3, [r7, #8]
 800687e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006880:	2301      	movs	r3, #1
 8006882:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006884:	4b21      	ldr	r3, [pc, #132]	@ (800690c <HAL_RCC_OscConfig+0x508>)
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800688c:	2b00      	cmp	r3, #0
 800688e:	d118      	bne.n	80068c2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006890:	4b1e      	ldr	r3, [pc, #120]	@ (800690c <HAL_RCC_OscConfig+0x508>)
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	4a1d      	ldr	r2, [pc, #116]	@ (800690c <HAL_RCC_OscConfig+0x508>)
 8006896:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800689a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800689c:	f7fd ff4a 	bl	8004734 <HAL_GetTick>
 80068a0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80068a2:	e008      	b.n	80068b6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80068a4:	f7fd ff46 	bl	8004734 <HAL_GetTick>
 80068a8:	4602      	mov	r2, r0
 80068aa:	693b      	ldr	r3, [r7, #16]
 80068ac:	1ad3      	subs	r3, r2, r3
 80068ae:	2b02      	cmp	r3, #2
 80068b0:	d901      	bls.n	80068b6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80068b2:	2303      	movs	r3, #3
 80068b4:	e1b2      	b.n	8006c1c <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80068b6:	4b15      	ldr	r3, [pc, #84]	@ (800690c <HAL_RCC_OscConfig+0x508>)
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d0f0      	beq.n	80068a4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	689b      	ldr	r3, [r3, #8]
 80068c6:	2b01      	cmp	r3, #1
 80068c8:	d108      	bne.n	80068dc <HAL_RCC_OscConfig+0x4d8>
 80068ca:	4b0f      	ldr	r3, [pc, #60]	@ (8006908 <HAL_RCC_OscConfig+0x504>)
 80068cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80068d0:	4a0d      	ldr	r2, [pc, #52]	@ (8006908 <HAL_RCC_OscConfig+0x504>)
 80068d2:	f043 0301 	orr.w	r3, r3, #1
 80068d6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80068da:	e029      	b.n	8006930 <HAL_RCC_OscConfig+0x52c>
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	689b      	ldr	r3, [r3, #8]
 80068e0:	2b05      	cmp	r3, #5
 80068e2:	d115      	bne.n	8006910 <HAL_RCC_OscConfig+0x50c>
 80068e4:	4b08      	ldr	r3, [pc, #32]	@ (8006908 <HAL_RCC_OscConfig+0x504>)
 80068e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80068ea:	4a07      	ldr	r2, [pc, #28]	@ (8006908 <HAL_RCC_OscConfig+0x504>)
 80068ec:	f043 0304 	orr.w	r3, r3, #4
 80068f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80068f4:	4b04      	ldr	r3, [pc, #16]	@ (8006908 <HAL_RCC_OscConfig+0x504>)
 80068f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80068fa:	4a03      	ldr	r2, [pc, #12]	@ (8006908 <HAL_RCC_OscConfig+0x504>)
 80068fc:	f043 0301 	orr.w	r3, r3, #1
 8006900:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006904:	e014      	b.n	8006930 <HAL_RCC_OscConfig+0x52c>
 8006906:	bf00      	nop
 8006908:	40021000 	.word	0x40021000
 800690c:	40007000 	.word	0x40007000
 8006910:	4b9a      	ldr	r3, [pc, #616]	@ (8006b7c <HAL_RCC_OscConfig+0x778>)
 8006912:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006916:	4a99      	ldr	r2, [pc, #612]	@ (8006b7c <HAL_RCC_OscConfig+0x778>)
 8006918:	f023 0301 	bic.w	r3, r3, #1
 800691c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006920:	4b96      	ldr	r3, [pc, #600]	@ (8006b7c <HAL_RCC_OscConfig+0x778>)
 8006922:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006926:	4a95      	ldr	r2, [pc, #596]	@ (8006b7c <HAL_RCC_OscConfig+0x778>)
 8006928:	f023 0304 	bic.w	r3, r3, #4
 800692c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	689b      	ldr	r3, [r3, #8]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d016      	beq.n	8006966 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006938:	f7fd fefc 	bl	8004734 <HAL_GetTick>
 800693c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800693e:	e00a      	b.n	8006956 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006940:	f7fd fef8 	bl	8004734 <HAL_GetTick>
 8006944:	4602      	mov	r2, r0
 8006946:	693b      	ldr	r3, [r7, #16]
 8006948:	1ad3      	subs	r3, r2, r3
 800694a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800694e:	4293      	cmp	r3, r2
 8006950:	d901      	bls.n	8006956 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8006952:	2303      	movs	r3, #3
 8006954:	e162      	b.n	8006c1c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006956:	4b89      	ldr	r3, [pc, #548]	@ (8006b7c <HAL_RCC_OscConfig+0x778>)
 8006958:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800695c:	f003 0302 	and.w	r3, r3, #2
 8006960:	2b00      	cmp	r3, #0
 8006962:	d0ed      	beq.n	8006940 <HAL_RCC_OscConfig+0x53c>
 8006964:	e015      	b.n	8006992 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006966:	f7fd fee5 	bl	8004734 <HAL_GetTick>
 800696a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800696c:	e00a      	b.n	8006984 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800696e:	f7fd fee1 	bl	8004734 <HAL_GetTick>
 8006972:	4602      	mov	r2, r0
 8006974:	693b      	ldr	r3, [r7, #16]
 8006976:	1ad3      	subs	r3, r2, r3
 8006978:	f241 3288 	movw	r2, #5000	@ 0x1388
 800697c:	4293      	cmp	r3, r2
 800697e:	d901      	bls.n	8006984 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8006980:	2303      	movs	r3, #3
 8006982:	e14b      	b.n	8006c1c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006984:	4b7d      	ldr	r3, [pc, #500]	@ (8006b7c <HAL_RCC_OscConfig+0x778>)
 8006986:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800698a:	f003 0302 	and.w	r3, r3, #2
 800698e:	2b00      	cmp	r3, #0
 8006990:	d1ed      	bne.n	800696e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006992:	7ffb      	ldrb	r3, [r7, #31]
 8006994:	2b01      	cmp	r3, #1
 8006996:	d105      	bne.n	80069a4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006998:	4b78      	ldr	r3, [pc, #480]	@ (8006b7c <HAL_RCC_OscConfig+0x778>)
 800699a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800699c:	4a77      	ldr	r2, [pc, #476]	@ (8006b7c <HAL_RCC_OscConfig+0x778>)
 800699e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80069a2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f003 0320 	and.w	r3, r3, #32
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d03c      	beq.n	8006a2a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d01c      	beq.n	80069f2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80069b8:	4b70      	ldr	r3, [pc, #448]	@ (8006b7c <HAL_RCC_OscConfig+0x778>)
 80069ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80069be:	4a6f      	ldr	r2, [pc, #444]	@ (8006b7c <HAL_RCC_OscConfig+0x778>)
 80069c0:	f043 0301 	orr.w	r3, r3, #1
 80069c4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069c8:	f7fd feb4 	bl	8004734 <HAL_GetTick>
 80069cc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80069ce:	e008      	b.n	80069e2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80069d0:	f7fd feb0 	bl	8004734 <HAL_GetTick>
 80069d4:	4602      	mov	r2, r0
 80069d6:	693b      	ldr	r3, [r7, #16]
 80069d8:	1ad3      	subs	r3, r2, r3
 80069da:	2b02      	cmp	r3, #2
 80069dc:	d901      	bls.n	80069e2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80069de:	2303      	movs	r3, #3
 80069e0:	e11c      	b.n	8006c1c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80069e2:	4b66      	ldr	r3, [pc, #408]	@ (8006b7c <HAL_RCC_OscConfig+0x778>)
 80069e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80069e8:	f003 0302 	and.w	r3, r3, #2
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d0ef      	beq.n	80069d0 <HAL_RCC_OscConfig+0x5cc>
 80069f0:	e01b      	b.n	8006a2a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80069f2:	4b62      	ldr	r3, [pc, #392]	@ (8006b7c <HAL_RCC_OscConfig+0x778>)
 80069f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80069f8:	4a60      	ldr	r2, [pc, #384]	@ (8006b7c <HAL_RCC_OscConfig+0x778>)
 80069fa:	f023 0301 	bic.w	r3, r3, #1
 80069fe:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a02:	f7fd fe97 	bl	8004734 <HAL_GetTick>
 8006a06:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006a08:	e008      	b.n	8006a1c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006a0a:	f7fd fe93 	bl	8004734 <HAL_GetTick>
 8006a0e:	4602      	mov	r2, r0
 8006a10:	693b      	ldr	r3, [r7, #16]
 8006a12:	1ad3      	subs	r3, r2, r3
 8006a14:	2b02      	cmp	r3, #2
 8006a16:	d901      	bls.n	8006a1c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8006a18:	2303      	movs	r3, #3
 8006a1a:	e0ff      	b.n	8006c1c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006a1c:	4b57      	ldr	r3, [pc, #348]	@ (8006b7c <HAL_RCC_OscConfig+0x778>)
 8006a1e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006a22:	f003 0302 	and.w	r3, r3, #2
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d1ef      	bne.n	8006a0a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	f000 80f3 	beq.w	8006c1a <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a38:	2b02      	cmp	r3, #2
 8006a3a:	f040 80c9 	bne.w	8006bd0 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8006a3e:	4b4f      	ldr	r3, [pc, #316]	@ (8006b7c <HAL_RCC_OscConfig+0x778>)
 8006a40:	68db      	ldr	r3, [r3, #12]
 8006a42:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a44:	697b      	ldr	r3, [r7, #20]
 8006a46:	f003 0203 	and.w	r2, r3, #3
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a4e:	429a      	cmp	r2, r3
 8006a50:	d12c      	bne.n	8006aac <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006a52:	697b      	ldr	r3, [r7, #20]
 8006a54:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a5c:	3b01      	subs	r3, #1
 8006a5e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a60:	429a      	cmp	r2, r3
 8006a62:	d123      	bne.n	8006aac <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006a64:	697b      	ldr	r3, [r7, #20]
 8006a66:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a6e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006a70:	429a      	cmp	r2, r3
 8006a72:	d11b      	bne.n	8006aac <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006a74:	697b      	ldr	r3, [r7, #20]
 8006a76:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a7e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006a80:	429a      	cmp	r2, r3
 8006a82:	d113      	bne.n	8006aac <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006a84:	697b      	ldr	r3, [r7, #20]
 8006a86:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a8e:	085b      	lsrs	r3, r3, #1
 8006a90:	3b01      	subs	r3, #1
 8006a92:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006a94:	429a      	cmp	r2, r3
 8006a96:	d109      	bne.n	8006aac <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006a98:	697b      	ldr	r3, [r7, #20]
 8006a9a:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006aa2:	085b      	lsrs	r3, r3, #1
 8006aa4:	3b01      	subs	r3, #1
 8006aa6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006aa8:	429a      	cmp	r2, r3
 8006aaa:	d06b      	beq.n	8006b84 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006aac:	69bb      	ldr	r3, [r7, #24]
 8006aae:	2b0c      	cmp	r3, #12
 8006ab0:	d062      	beq.n	8006b78 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8006ab2:	4b32      	ldr	r3, [pc, #200]	@ (8006b7c <HAL_RCC_OscConfig+0x778>)
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d001      	beq.n	8006ac2 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8006abe:	2301      	movs	r3, #1
 8006ac0:	e0ac      	b.n	8006c1c <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8006ac2:	4b2e      	ldr	r3, [pc, #184]	@ (8006b7c <HAL_RCC_OscConfig+0x778>)
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	4a2d      	ldr	r2, [pc, #180]	@ (8006b7c <HAL_RCC_OscConfig+0x778>)
 8006ac8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006acc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006ace:	f7fd fe31 	bl	8004734 <HAL_GetTick>
 8006ad2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006ad4:	e008      	b.n	8006ae8 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ad6:	f7fd fe2d 	bl	8004734 <HAL_GetTick>
 8006ada:	4602      	mov	r2, r0
 8006adc:	693b      	ldr	r3, [r7, #16]
 8006ade:	1ad3      	subs	r3, r2, r3
 8006ae0:	2b02      	cmp	r3, #2
 8006ae2:	d901      	bls.n	8006ae8 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8006ae4:	2303      	movs	r3, #3
 8006ae6:	e099      	b.n	8006c1c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006ae8:	4b24      	ldr	r3, [pc, #144]	@ (8006b7c <HAL_RCC_OscConfig+0x778>)
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d1f0      	bne.n	8006ad6 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006af4:	4b21      	ldr	r3, [pc, #132]	@ (8006b7c <HAL_RCC_OscConfig+0x778>)
 8006af6:	68da      	ldr	r2, [r3, #12]
 8006af8:	4b21      	ldr	r3, [pc, #132]	@ (8006b80 <HAL_RCC_OscConfig+0x77c>)
 8006afa:	4013      	ands	r3, r2
 8006afc:	687a      	ldr	r2, [r7, #4]
 8006afe:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8006b00:	687a      	ldr	r2, [r7, #4]
 8006b02:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006b04:	3a01      	subs	r2, #1
 8006b06:	0112      	lsls	r2, r2, #4
 8006b08:	4311      	orrs	r1, r2
 8006b0a:	687a      	ldr	r2, [r7, #4]
 8006b0c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006b0e:	0212      	lsls	r2, r2, #8
 8006b10:	4311      	orrs	r1, r2
 8006b12:	687a      	ldr	r2, [r7, #4]
 8006b14:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006b16:	0852      	lsrs	r2, r2, #1
 8006b18:	3a01      	subs	r2, #1
 8006b1a:	0552      	lsls	r2, r2, #21
 8006b1c:	4311      	orrs	r1, r2
 8006b1e:	687a      	ldr	r2, [r7, #4]
 8006b20:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8006b22:	0852      	lsrs	r2, r2, #1
 8006b24:	3a01      	subs	r2, #1
 8006b26:	0652      	lsls	r2, r2, #25
 8006b28:	4311      	orrs	r1, r2
 8006b2a:	687a      	ldr	r2, [r7, #4]
 8006b2c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006b2e:	06d2      	lsls	r2, r2, #27
 8006b30:	430a      	orrs	r2, r1
 8006b32:	4912      	ldr	r1, [pc, #72]	@ (8006b7c <HAL_RCC_OscConfig+0x778>)
 8006b34:	4313      	orrs	r3, r2
 8006b36:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006b38:	4b10      	ldr	r3, [pc, #64]	@ (8006b7c <HAL_RCC_OscConfig+0x778>)
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	4a0f      	ldr	r2, [pc, #60]	@ (8006b7c <HAL_RCC_OscConfig+0x778>)
 8006b3e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006b42:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006b44:	4b0d      	ldr	r3, [pc, #52]	@ (8006b7c <HAL_RCC_OscConfig+0x778>)
 8006b46:	68db      	ldr	r3, [r3, #12]
 8006b48:	4a0c      	ldr	r2, [pc, #48]	@ (8006b7c <HAL_RCC_OscConfig+0x778>)
 8006b4a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006b4e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006b50:	f7fd fdf0 	bl	8004734 <HAL_GetTick>
 8006b54:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006b56:	e008      	b.n	8006b6a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b58:	f7fd fdec 	bl	8004734 <HAL_GetTick>
 8006b5c:	4602      	mov	r2, r0
 8006b5e:	693b      	ldr	r3, [r7, #16]
 8006b60:	1ad3      	subs	r3, r2, r3
 8006b62:	2b02      	cmp	r3, #2
 8006b64:	d901      	bls.n	8006b6a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8006b66:	2303      	movs	r3, #3
 8006b68:	e058      	b.n	8006c1c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006b6a:	4b04      	ldr	r3, [pc, #16]	@ (8006b7c <HAL_RCC_OscConfig+0x778>)
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d0f0      	beq.n	8006b58 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006b76:	e050      	b.n	8006c1a <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006b78:	2301      	movs	r3, #1
 8006b7a:	e04f      	b.n	8006c1c <HAL_RCC_OscConfig+0x818>
 8006b7c:	40021000 	.word	0x40021000
 8006b80:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006b84:	4b27      	ldr	r3, [pc, #156]	@ (8006c24 <HAL_RCC_OscConfig+0x820>)
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d144      	bne.n	8006c1a <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006b90:	4b24      	ldr	r3, [pc, #144]	@ (8006c24 <HAL_RCC_OscConfig+0x820>)
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	4a23      	ldr	r2, [pc, #140]	@ (8006c24 <HAL_RCC_OscConfig+0x820>)
 8006b96:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006b9a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006b9c:	4b21      	ldr	r3, [pc, #132]	@ (8006c24 <HAL_RCC_OscConfig+0x820>)
 8006b9e:	68db      	ldr	r3, [r3, #12]
 8006ba0:	4a20      	ldr	r2, [pc, #128]	@ (8006c24 <HAL_RCC_OscConfig+0x820>)
 8006ba2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006ba6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006ba8:	f7fd fdc4 	bl	8004734 <HAL_GetTick>
 8006bac:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006bae:	e008      	b.n	8006bc2 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006bb0:	f7fd fdc0 	bl	8004734 <HAL_GetTick>
 8006bb4:	4602      	mov	r2, r0
 8006bb6:	693b      	ldr	r3, [r7, #16]
 8006bb8:	1ad3      	subs	r3, r2, r3
 8006bba:	2b02      	cmp	r3, #2
 8006bbc:	d901      	bls.n	8006bc2 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8006bbe:	2303      	movs	r3, #3
 8006bc0:	e02c      	b.n	8006c1c <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006bc2:	4b18      	ldr	r3, [pc, #96]	@ (8006c24 <HAL_RCC_OscConfig+0x820>)
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d0f0      	beq.n	8006bb0 <HAL_RCC_OscConfig+0x7ac>
 8006bce:	e024      	b.n	8006c1a <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006bd0:	69bb      	ldr	r3, [r7, #24]
 8006bd2:	2b0c      	cmp	r3, #12
 8006bd4:	d01f      	beq.n	8006c16 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006bd6:	4b13      	ldr	r3, [pc, #76]	@ (8006c24 <HAL_RCC_OscConfig+0x820>)
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	4a12      	ldr	r2, [pc, #72]	@ (8006c24 <HAL_RCC_OscConfig+0x820>)
 8006bdc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006be0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006be2:	f7fd fda7 	bl	8004734 <HAL_GetTick>
 8006be6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006be8:	e008      	b.n	8006bfc <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006bea:	f7fd fda3 	bl	8004734 <HAL_GetTick>
 8006bee:	4602      	mov	r2, r0
 8006bf0:	693b      	ldr	r3, [r7, #16]
 8006bf2:	1ad3      	subs	r3, r2, r3
 8006bf4:	2b02      	cmp	r3, #2
 8006bf6:	d901      	bls.n	8006bfc <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8006bf8:	2303      	movs	r3, #3
 8006bfa:	e00f      	b.n	8006c1c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006bfc:	4b09      	ldr	r3, [pc, #36]	@ (8006c24 <HAL_RCC_OscConfig+0x820>)
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d1f0      	bne.n	8006bea <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8006c08:	4b06      	ldr	r3, [pc, #24]	@ (8006c24 <HAL_RCC_OscConfig+0x820>)
 8006c0a:	68da      	ldr	r2, [r3, #12]
 8006c0c:	4905      	ldr	r1, [pc, #20]	@ (8006c24 <HAL_RCC_OscConfig+0x820>)
 8006c0e:	4b06      	ldr	r3, [pc, #24]	@ (8006c28 <HAL_RCC_OscConfig+0x824>)
 8006c10:	4013      	ands	r3, r2
 8006c12:	60cb      	str	r3, [r1, #12]
 8006c14:	e001      	b.n	8006c1a <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006c16:	2301      	movs	r3, #1
 8006c18:	e000      	b.n	8006c1c <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8006c1a:	2300      	movs	r3, #0
}
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	3720      	adds	r7, #32
 8006c20:	46bd      	mov	sp, r7
 8006c22:	bd80      	pop	{r7, pc}
 8006c24:	40021000 	.word	0x40021000
 8006c28:	feeefffc 	.word	0xfeeefffc

08006c2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b084      	sub	sp, #16
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
 8006c34:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d101      	bne.n	8006c40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006c3c:	2301      	movs	r3, #1
 8006c3e:	e0e7      	b.n	8006e10 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006c40:	4b75      	ldr	r3, [pc, #468]	@ (8006e18 <HAL_RCC_ClockConfig+0x1ec>)
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f003 0307 	and.w	r3, r3, #7
 8006c48:	683a      	ldr	r2, [r7, #0]
 8006c4a:	429a      	cmp	r2, r3
 8006c4c:	d910      	bls.n	8006c70 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c4e:	4b72      	ldr	r3, [pc, #456]	@ (8006e18 <HAL_RCC_ClockConfig+0x1ec>)
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f023 0207 	bic.w	r2, r3, #7
 8006c56:	4970      	ldr	r1, [pc, #448]	@ (8006e18 <HAL_RCC_ClockConfig+0x1ec>)
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	4313      	orrs	r3, r2
 8006c5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c5e:	4b6e      	ldr	r3, [pc, #440]	@ (8006e18 <HAL_RCC_ClockConfig+0x1ec>)
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f003 0307 	and.w	r3, r3, #7
 8006c66:	683a      	ldr	r2, [r7, #0]
 8006c68:	429a      	cmp	r2, r3
 8006c6a:	d001      	beq.n	8006c70 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006c6c:	2301      	movs	r3, #1
 8006c6e:	e0cf      	b.n	8006e10 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f003 0302 	and.w	r3, r3, #2
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d010      	beq.n	8006c9e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	689a      	ldr	r2, [r3, #8]
 8006c80:	4b66      	ldr	r3, [pc, #408]	@ (8006e1c <HAL_RCC_ClockConfig+0x1f0>)
 8006c82:	689b      	ldr	r3, [r3, #8]
 8006c84:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006c88:	429a      	cmp	r2, r3
 8006c8a:	d908      	bls.n	8006c9e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006c8c:	4b63      	ldr	r3, [pc, #396]	@ (8006e1c <HAL_RCC_ClockConfig+0x1f0>)
 8006c8e:	689b      	ldr	r3, [r3, #8]
 8006c90:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	689b      	ldr	r3, [r3, #8]
 8006c98:	4960      	ldr	r1, [pc, #384]	@ (8006e1c <HAL_RCC_ClockConfig+0x1f0>)
 8006c9a:	4313      	orrs	r3, r2
 8006c9c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f003 0301 	and.w	r3, r3, #1
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d04c      	beq.n	8006d44 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	685b      	ldr	r3, [r3, #4]
 8006cae:	2b03      	cmp	r3, #3
 8006cb0:	d107      	bne.n	8006cc2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006cb2:	4b5a      	ldr	r3, [pc, #360]	@ (8006e1c <HAL_RCC_ClockConfig+0x1f0>)
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d121      	bne.n	8006d02 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8006cbe:	2301      	movs	r3, #1
 8006cc0:	e0a6      	b.n	8006e10 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	685b      	ldr	r3, [r3, #4]
 8006cc6:	2b02      	cmp	r3, #2
 8006cc8:	d107      	bne.n	8006cda <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006cca:	4b54      	ldr	r3, [pc, #336]	@ (8006e1c <HAL_RCC_ClockConfig+0x1f0>)
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d115      	bne.n	8006d02 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006cd6:	2301      	movs	r3, #1
 8006cd8:	e09a      	b.n	8006e10 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	685b      	ldr	r3, [r3, #4]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d107      	bne.n	8006cf2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006ce2:	4b4e      	ldr	r3, [pc, #312]	@ (8006e1c <HAL_RCC_ClockConfig+0x1f0>)
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f003 0302 	and.w	r3, r3, #2
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d109      	bne.n	8006d02 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006cee:	2301      	movs	r3, #1
 8006cf0:	e08e      	b.n	8006e10 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006cf2:	4b4a      	ldr	r3, [pc, #296]	@ (8006e1c <HAL_RCC_ClockConfig+0x1f0>)
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d101      	bne.n	8006d02 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006cfe:	2301      	movs	r3, #1
 8006d00:	e086      	b.n	8006e10 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006d02:	4b46      	ldr	r3, [pc, #280]	@ (8006e1c <HAL_RCC_ClockConfig+0x1f0>)
 8006d04:	689b      	ldr	r3, [r3, #8]
 8006d06:	f023 0203 	bic.w	r2, r3, #3
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	685b      	ldr	r3, [r3, #4]
 8006d0e:	4943      	ldr	r1, [pc, #268]	@ (8006e1c <HAL_RCC_ClockConfig+0x1f0>)
 8006d10:	4313      	orrs	r3, r2
 8006d12:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006d14:	f7fd fd0e 	bl	8004734 <HAL_GetTick>
 8006d18:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d1a:	e00a      	b.n	8006d32 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006d1c:	f7fd fd0a 	bl	8004734 <HAL_GetTick>
 8006d20:	4602      	mov	r2, r0
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	1ad3      	subs	r3, r2, r3
 8006d26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d901      	bls.n	8006d32 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8006d2e:	2303      	movs	r3, #3
 8006d30:	e06e      	b.n	8006e10 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d32:	4b3a      	ldr	r3, [pc, #232]	@ (8006e1c <HAL_RCC_ClockConfig+0x1f0>)
 8006d34:	689b      	ldr	r3, [r3, #8]
 8006d36:	f003 020c 	and.w	r2, r3, #12
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	685b      	ldr	r3, [r3, #4]
 8006d3e:	009b      	lsls	r3, r3, #2
 8006d40:	429a      	cmp	r2, r3
 8006d42:	d1eb      	bne.n	8006d1c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f003 0302 	and.w	r3, r3, #2
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d010      	beq.n	8006d72 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	689a      	ldr	r2, [r3, #8]
 8006d54:	4b31      	ldr	r3, [pc, #196]	@ (8006e1c <HAL_RCC_ClockConfig+0x1f0>)
 8006d56:	689b      	ldr	r3, [r3, #8]
 8006d58:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006d5c:	429a      	cmp	r2, r3
 8006d5e:	d208      	bcs.n	8006d72 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006d60:	4b2e      	ldr	r3, [pc, #184]	@ (8006e1c <HAL_RCC_ClockConfig+0x1f0>)
 8006d62:	689b      	ldr	r3, [r3, #8]
 8006d64:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	689b      	ldr	r3, [r3, #8]
 8006d6c:	492b      	ldr	r1, [pc, #172]	@ (8006e1c <HAL_RCC_ClockConfig+0x1f0>)
 8006d6e:	4313      	orrs	r3, r2
 8006d70:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006d72:	4b29      	ldr	r3, [pc, #164]	@ (8006e18 <HAL_RCC_ClockConfig+0x1ec>)
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f003 0307 	and.w	r3, r3, #7
 8006d7a:	683a      	ldr	r2, [r7, #0]
 8006d7c:	429a      	cmp	r2, r3
 8006d7e:	d210      	bcs.n	8006da2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d80:	4b25      	ldr	r3, [pc, #148]	@ (8006e18 <HAL_RCC_ClockConfig+0x1ec>)
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f023 0207 	bic.w	r2, r3, #7
 8006d88:	4923      	ldr	r1, [pc, #140]	@ (8006e18 <HAL_RCC_ClockConfig+0x1ec>)
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	4313      	orrs	r3, r2
 8006d8e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d90:	4b21      	ldr	r3, [pc, #132]	@ (8006e18 <HAL_RCC_ClockConfig+0x1ec>)
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f003 0307 	and.w	r3, r3, #7
 8006d98:	683a      	ldr	r2, [r7, #0]
 8006d9a:	429a      	cmp	r2, r3
 8006d9c:	d001      	beq.n	8006da2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8006d9e:	2301      	movs	r3, #1
 8006da0:	e036      	b.n	8006e10 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f003 0304 	and.w	r3, r3, #4
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d008      	beq.n	8006dc0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006dae:	4b1b      	ldr	r3, [pc, #108]	@ (8006e1c <HAL_RCC_ClockConfig+0x1f0>)
 8006db0:	689b      	ldr	r3, [r3, #8]
 8006db2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	68db      	ldr	r3, [r3, #12]
 8006dba:	4918      	ldr	r1, [pc, #96]	@ (8006e1c <HAL_RCC_ClockConfig+0x1f0>)
 8006dbc:	4313      	orrs	r3, r2
 8006dbe:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f003 0308 	and.w	r3, r3, #8
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d009      	beq.n	8006de0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006dcc:	4b13      	ldr	r3, [pc, #76]	@ (8006e1c <HAL_RCC_ClockConfig+0x1f0>)
 8006dce:	689b      	ldr	r3, [r3, #8]
 8006dd0:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	691b      	ldr	r3, [r3, #16]
 8006dd8:	00db      	lsls	r3, r3, #3
 8006dda:	4910      	ldr	r1, [pc, #64]	@ (8006e1c <HAL_RCC_ClockConfig+0x1f0>)
 8006ddc:	4313      	orrs	r3, r2
 8006dde:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006de0:	f000 f824 	bl	8006e2c <HAL_RCC_GetSysClockFreq>
 8006de4:	4602      	mov	r2, r0
 8006de6:	4b0d      	ldr	r3, [pc, #52]	@ (8006e1c <HAL_RCC_ClockConfig+0x1f0>)
 8006de8:	689b      	ldr	r3, [r3, #8]
 8006dea:	091b      	lsrs	r3, r3, #4
 8006dec:	f003 030f 	and.w	r3, r3, #15
 8006df0:	490b      	ldr	r1, [pc, #44]	@ (8006e20 <HAL_RCC_ClockConfig+0x1f4>)
 8006df2:	5ccb      	ldrb	r3, [r1, r3]
 8006df4:	f003 031f 	and.w	r3, r3, #31
 8006df8:	fa22 f303 	lsr.w	r3, r2, r3
 8006dfc:	4a09      	ldr	r2, [pc, #36]	@ (8006e24 <HAL_RCC_ClockConfig+0x1f8>)
 8006dfe:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006e00:	4b09      	ldr	r3, [pc, #36]	@ (8006e28 <HAL_RCC_ClockConfig+0x1fc>)
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	4618      	mov	r0, r3
 8006e06:	f7fd fc45 	bl	8004694 <HAL_InitTick>
 8006e0a:	4603      	mov	r3, r0
 8006e0c:	72fb      	strb	r3, [r7, #11]

  return status;
 8006e0e:	7afb      	ldrb	r3, [r7, #11]
}
 8006e10:	4618      	mov	r0, r3
 8006e12:	3710      	adds	r7, #16
 8006e14:	46bd      	mov	sp, r7
 8006e16:	bd80      	pop	{r7, pc}
 8006e18:	40022000 	.word	0x40022000
 8006e1c:	40021000 	.word	0x40021000
 8006e20:	0800ae28 	.word	0x0800ae28
 8006e24:	20000014 	.word	0x20000014
 8006e28:	20000018 	.word	0x20000018

08006e2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006e2c:	b480      	push	{r7}
 8006e2e:	b089      	sub	sp, #36	@ 0x24
 8006e30:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8006e32:	2300      	movs	r3, #0
 8006e34:	61fb      	str	r3, [r7, #28]
 8006e36:	2300      	movs	r3, #0
 8006e38:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006e3a:	4b3e      	ldr	r3, [pc, #248]	@ (8006f34 <HAL_RCC_GetSysClockFreq+0x108>)
 8006e3c:	689b      	ldr	r3, [r3, #8]
 8006e3e:	f003 030c 	and.w	r3, r3, #12
 8006e42:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006e44:	4b3b      	ldr	r3, [pc, #236]	@ (8006f34 <HAL_RCC_GetSysClockFreq+0x108>)
 8006e46:	68db      	ldr	r3, [r3, #12]
 8006e48:	f003 0303 	and.w	r3, r3, #3
 8006e4c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006e4e:	693b      	ldr	r3, [r7, #16]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d005      	beq.n	8006e60 <HAL_RCC_GetSysClockFreq+0x34>
 8006e54:	693b      	ldr	r3, [r7, #16]
 8006e56:	2b0c      	cmp	r3, #12
 8006e58:	d121      	bne.n	8006e9e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	2b01      	cmp	r3, #1
 8006e5e:	d11e      	bne.n	8006e9e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006e60:	4b34      	ldr	r3, [pc, #208]	@ (8006f34 <HAL_RCC_GetSysClockFreq+0x108>)
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	f003 0308 	and.w	r3, r3, #8
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d107      	bne.n	8006e7c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006e6c:	4b31      	ldr	r3, [pc, #196]	@ (8006f34 <HAL_RCC_GetSysClockFreq+0x108>)
 8006e6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006e72:	0a1b      	lsrs	r3, r3, #8
 8006e74:	f003 030f 	and.w	r3, r3, #15
 8006e78:	61fb      	str	r3, [r7, #28]
 8006e7a:	e005      	b.n	8006e88 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006e7c:	4b2d      	ldr	r3, [pc, #180]	@ (8006f34 <HAL_RCC_GetSysClockFreq+0x108>)
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	091b      	lsrs	r3, r3, #4
 8006e82:	f003 030f 	and.w	r3, r3, #15
 8006e86:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006e88:	4a2b      	ldr	r2, [pc, #172]	@ (8006f38 <HAL_RCC_GetSysClockFreq+0x10c>)
 8006e8a:	69fb      	ldr	r3, [r7, #28]
 8006e8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e90:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006e92:	693b      	ldr	r3, [r7, #16]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d10d      	bne.n	8006eb4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006e98:	69fb      	ldr	r3, [r7, #28]
 8006e9a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006e9c:	e00a      	b.n	8006eb4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8006e9e:	693b      	ldr	r3, [r7, #16]
 8006ea0:	2b04      	cmp	r3, #4
 8006ea2:	d102      	bne.n	8006eaa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006ea4:	4b25      	ldr	r3, [pc, #148]	@ (8006f3c <HAL_RCC_GetSysClockFreq+0x110>)
 8006ea6:	61bb      	str	r3, [r7, #24]
 8006ea8:	e004      	b.n	8006eb4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8006eaa:	693b      	ldr	r3, [r7, #16]
 8006eac:	2b08      	cmp	r3, #8
 8006eae:	d101      	bne.n	8006eb4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006eb0:	4b23      	ldr	r3, [pc, #140]	@ (8006f40 <HAL_RCC_GetSysClockFreq+0x114>)
 8006eb2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006eb4:	693b      	ldr	r3, [r7, #16]
 8006eb6:	2b0c      	cmp	r3, #12
 8006eb8:	d134      	bne.n	8006f24 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006eba:	4b1e      	ldr	r3, [pc, #120]	@ (8006f34 <HAL_RCC_GetSysClockFreq+0x108>)
 8006ebc:	68db      	ldr	r3, [r3, #12]
 8006ebe:	f003 0303 	and.w	r3, r3, #3
 8006ec2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006ec4:	68bb      	ldr	r3, [r7, #8]
 8006ec6:	2b02      	cmp	r3, #2
 8006ec8:	d003      	beq.n	8006ed2 <HAL_RCC_GetSysClockFreq+0xa6>
 8006eca:	68bb      	ldr	r3, [r7, #8]
 8006ecc:	2b03      	cmp	r3, #3
 8006ece:	d003      	beq.n	8006ed8 <HAL_RCC_GetSysClockFreq+0xac>
 8006ed0:	e005      	b.n	8006ede <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8006ed2:	4b1a      	ldr	r3, [pc, #104]	@ (8006f3c <HAL_RCC_GetSysClockFreq+0x110>)
 8006ed4:	617b      	str	r3, [r7, #20]
      break;
 8006ed6:	e005      	b.n	8006ee4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006ed8:	4b19      	ldr	r3, [pc, #100]	@ (8006f40 <HAL_RCC_GetSysClockFreq+0x114>)
 8006eda:	617b      	str	r3, [r7, #20]
      break;
 8006edc:	e002      	b.n	8006ee4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8006ede:	69fb      	ldr	r3, [r7, #28]
 8006ee0:	617b      	str	r3, [r7, #20]
      break;
 8006ee2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006ee4:	4b13      	ldr	r3, [pc, #76]	@ (8006f34 <HAL_RCC_GetSysClockFreq+0x108>)
 8006ee6:	68db      	ldr	r3, [r3, #12]
 8006ee8:	091b      	lsrs	r3, r3, #4
 8006eea:	f003 0307 	and.w	r3, r3, #7
 8006eee:	3301      	adds	r3, #1
 8006ef0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006ef2:	4b10      	ldr	r3, [pc, #64]	@ (8006f34 <HAL_RCC_GetSysClockFreq+0x108>)
 8006ef4:	68db      	ldr	r3, [r3, #12]
 8006ef6:	0a1b      	lsrs	r3, r3, #8
 8006ef8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006efc:	697a      	ldr	r2, [r7, #20]
 8006efe:	fb03 f202 	mul.w	r2, r3, r2
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f08:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006f0a:	4b0a      	ldr	r3, [pc, #40]	@ (8006f34 <HAL_RCC_GetSysClockFreq+0x108>)
 8006f0c:	68db      	ldr	r3, [r3, #12]
 8006f0e:	0e5b      	lsrs	r3, r3, #25
 8006f10:	f003 0303 	and.w	r3, r3, #3
 8006f14:	3301      	adds	r3, #1
 8006f16:	005b      	lsls	r3, r3, #1
 8006f18:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8006f1a:	697a      	ldr	r2, [r7, #20]
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f22:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006f24:	69bb      	ldr	r3, [r7, #24]
}
 8006f26:	4618      	mov	r0, r3
 8006f28:	3724      	adds	r7, #36	@ 0x24
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f30:	4770      	bx	lr
 8006f32:	bf00      	nop
 8006f34:	40021000 	.word	0x40021000
 8006f38:	0800ae38 	.word	0x0800ae38
 8006f3c:	00f42400 	.word	0x00f42400
 8006f40:	007a1200 	.word	0x007a1200

08006f44 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b086      	sub	sp, #24
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006f4c:	2300      	movs	r3, #0
 8006f4e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006f50:	4b2a      	ldr	r3, [pc, #168]	@ (8006ffc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006f52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f54:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d003      	beq.n	8006f64 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006f5c:	f7ff f9ee 	bl	800633c <HAL_PWREx_GetVoltageRange>
 8006f60:	6178      	str	r0, [r7, #20]
 8006f62:	e014      	b.n	8006f8e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006f64:	4b25      	ldr	r3, [pc, #148]	@ (8006ffc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006f66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f68:	4a24      	ldr	r2, [pc, #144]	@ (8006ffc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006f6a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006f6e:	6593      	str	r3, [r2, #88]	@ 0x58
 8006f70:	4b22      	ldr	r3, [pc, #136]	@ (8006ffc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006f72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f74:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006f78:	60fb      	str	r3, [r7, #12]
 8006f7a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006f7c:	f7ff f9de 	bl	800633c <HAL_PWREx_GetVoltageRange>
 8006f80:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006f82:	4b1e      	ldr	r3, [pc, #120]	@ (8006ffc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006f84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f86:	4a1d      	ldr	r2, [pc, #116]	@ (8006ffc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006f88:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006f8c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006f8e:	697b      	ldr	r3, [r7, #20]
 8006f90:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006f94:	d10b      	bne.n	8006fae <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	2b80      	cmp	r3, #128	@ 0x80
 8006f9a:	d919      	bls.n	8006fd0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2ba0      	cmp	r3, #160	@ 0xa0
 8006fa0:	d902      	bls.n	8006fa8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006fa2:	2302      	movs	r3, #2
 8006fa4:	613b      	str	r3, [r7, #16]
 8006fa6:	e013      	b.n	8006fd0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006fa8:	2301      	movs	r3, #1
 8006faa:	613b      	str	r3, [r7, #16]
 8006fac:	e010      	b.n	8006fd0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	2b80      	cmp	r3, #128	@ 0x80
 8006fb2:	d902      	bls.n	8006fba <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8006fb4:	2303      	movs	r3, #3
 8006fb6:	613b      	str	r3, [r7, #16]
 8006fb8:	e00a      	b.n	8006fd0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2b80      	cmp	r3, #128	@ 0x80
 8006fbe:	d102      	bne.n	8006fc6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006fc0:	2302      	movs	r3, #2
 8006fc2:	613b      	str	r3, [r7, #16]
 8006fc4:	e004      	b.n	8006fd0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2b70      	cmp	r3, #112	@ 0x70
 8006fca:	d101      	bne.n	8006fd0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006fcc:	2301      	movs	r3, #1
 8006fce:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006fd0:	4b0b      	ldr	r3, [pc, #44]	@ (8007000 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f023 0207 	bic.w	r2, r3, #7
 8006fd8:	4909      	ldr	r1, [pc, #36]	@ (8007000 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006fda:	693b      	ldr	r3, [r7, #16]
 8006fdc:	4313      	orrs	r3, r2
 8006fde:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006fe0:	4b07      	ldr	r3, [pc, #28]	@ (8007000 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f003 0307 	and.w	r3, r3, #7
 8006fe8:	693a      	ldr	r2, [r7, #16]
 8006fea:	429a      	cmp	r2, r3
 8006fec:	d001      	beq.n	8006ff2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8006fee:	2301      	movs	r3, #1
 8006ff0:	e000      	b.n	8006ff4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8006ff2:	2300      	movs	r3, #0
}
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	3718      	adds	r7, #24
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	bd80      	pop	{r7, pc}
 8006ffc:	40021000 	.word	0x40021000
 8007000:	40022000 	.word	0x40022000

08007004 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b086      	sub	sp, #24
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800700c:	2300      	movs	r3, #0
 800700e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007010:	2300      	movs	r3, #0
 8007012:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800701c:	2b00      	cmp	r3, #0
 800701e:	d031      	beq.n	8007084 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007024:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8007028:	d01a      	beq.n	8007060 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800702a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800702e:	d814      	bhi.n	800705a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8007030:	2b00      	cmp	r3, #0
 8007032:	d009      	beq.n	8007048 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8007034:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007038:	d10f      	bne.n	800705a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800703a:	4b5d      	ldr	r3, [pc, #372]	@ (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800703c:	68db      	ldr	r3, [r3, #12]
 800703e:	4a5c      	ldr	r2, [pc, #368]	@ (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007040:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007044:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007046:	e00c      	b.n	8007062 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	3304      	adds	r3, #4
 800704c:	2100      	movs	r1, #0
 800704e:	4618      	mov	r0, r3
 8007050:	f000 f9de 	bl	8007410 <RCCEx_PLLSAI1_Config>
 8007054:	4603      	mov	r3, r0
 8007056:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007058:	e003      	b.n	8007062 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800705a:	2301      	movs	r3, #1
 800705c:	74fb      	strb	r3, [r7, #19]
      break;
 800705e:	e000      	b.n	8007062 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8007060:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007062:	7cfb      	ldrb	r3, [r7, #19]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d10b      	bne.n	8007080 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007068:	4b51      	ldr	r3, [pc, #324]	@ (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800706a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800706e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007076:	494e      	ldr	r1, [pc, #312]	@ (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007078:	4313      	orrs	r3, r2
 800707a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800707e:	e001      	b.n	8007084 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007080:	7cfb      	ldrb	r3, [r7, #19]
 8007082:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800708c:	2b00      	cmp	r3, #0
 800708e:	f000 809e 	beq.w	80071ce <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007092:	2300      	movs	r3, #0
 8007094:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007096:	4b46      	ldr	r3, [pc, #280]	@ (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007098:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800709a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d101      	bne.n	80070a6 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80070a2:	2301      	movs	r3, #1
 80070a4:	e000      	b.n	80070a8 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80070a6:	2300      	movs	r3, #0
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d00d      	beq.n	80070c8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80070ac:	4b40      	ldr	r3, [pc, #256]	@ (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80070ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80070b0:	4a3f      	ldr	r2, [pc, #252]	@ (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80070b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80070b6:	6593      	str	r3, [r2, #88]	@ 0x58
 80070b8:	4b3d      	ldr	r3, [pc, #244]	@ (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80070ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80070bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80070c0:	60bb      	str	r3, [r7, #8]
 80070c2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80070c4:	2301      	movs	r3, #1
 80070c6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80070c8:	4b3a      	ldr	r3, [pc, #232]	@ (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	4a39      	ldr	r2, [pc, #228]	@ (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80070ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80070d2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80070d4:	f7fd fb2e 	bl	8004734 <HAL_GetTick>
 80070d8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80070da:	e009      	b.n	80070f0 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80070dc:	f7fd fb2a 	bl	8004734 <HAL_GetTick>
 80070e0:	4602      	mov	r2, r0
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	1ad3      	subs	r3, r2, r3
 80070e6:	2b02      	cmp	r3, #2
 80070e8:	d902      	bls.n	80070f0 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80070ea:	2303      	movs	r3, #3
 80070ec:	74fb      	strb	r3, [r7, #19]
        break;
 80070ee:	e005      	b.n	80070fc <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80070f0:	4b30      	ldr	r3, [pc, #192]	@ (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d0ef      	beq.n	80070dc <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80070fc:	7cfb      	ldrb	r3, [r7, #19]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d15a      	bne.n	80071b8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007102:	4b2b      	ldr	r3, [pc, #172]	@ (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007104:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007108:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800710c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800710e:	697b      	ldr	r3, [r7, #20]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d01e      	beq.n	8007152 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007118:	697a      	ldr	r2, [r7, #20]
 800711a:	429a      	cmp	r2, r3
 800711c:	d019      	beq.n	8007152 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800711e:	4b24      	ldr	r3, [pc, #144]	@ (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007120:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007124:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007128:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800712a:	4b21      	ldr	r3, [pc, #132]	@ (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800712c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007130:	4a1f      	ldr	r2, [pc, #124]	@ (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007132:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007136:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800713a:	4b1d      	ldr	r3, [pc, #116]	@ (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800713c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007140:	4a1b      	ldr	r2, [pc, #108]	@ (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007142:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007146:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800714a:	4a19      	ldr	r2, [pc, #100]	@ (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800714c:	697b      	ldr	r3, [r7, #20]
 800714e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007152:	697b      	ldr	r3, [r7, #20]
 8007154:	f003 0301 	and.w	r3, r3, #1
 8007158:	2b00      	cmp	r3, #0
 800715a:	d016      	beq.n	800718a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800715c:	f7fd faea 	bl	8004734 <HAL_GetTick>
 8007160:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007162:	e00b      	b.n	800717c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007164:	f7fd fae6 	bl	8004734 <HAL_GetTick>
 8007168:	4602      	mov	r2, r0
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	1ad3      	subs	r3, r2, r3
 800716e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007172:	4293      	cmp	r3, r2
 8007174:	d902      	bls.n	800717c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8007176:	2303      	movs	r3, #3
 8007178:	74fb      	strb	r3, [r7, #19]
            break;
 800717a:	e006      	b.n	800718a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800717c:	4b0c      	ldr	r3, [pc, #48]	@ (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800717e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007182:	f003 0302 	and.w	r3, r3, #2
 8007186:	2b00      	cmp	r3, #0
 8007188:	d0ec      	beq.n	8007164 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800718a:	7cfb      	ldrb	r3, [r7, #19]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d10b      	bne.n	80071a8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007190:	4b07      	ldr	r3, [pc, #28]	@ (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007192:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007196:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800719e:	4904      	ldr	r1, [pc, #16]	@ (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80071a0:	4313      	orrs	r3, r2
 80071a2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80071a6:	e009      	b.n	80071bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80071a8:	7cfb      	ldrb	r3, [r7, #19]
 80071aa:	74bb      	strb	r3, [r7, #18]
 80071ac:	e006      	b.n	80071bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80071ae:	bf00      	nop
 80071b0:	40021000 	.word	0x40021000
 80071b4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071b8:	7cfb      	ldrb	r3, [r7, #19]
 80071ba:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80071bc:	7c7b      	ldrb	r3, [r7, #17]
 80071be:	2b01      	cmp	r3, #1
 80071c0:	d105      	bne.n	80071ce <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80071c2:	4b8a      	ldr	r3, [pc, #552]	@ (80073ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80071c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80071c6:	4a89      	ldr	r2, [pc, #548]	@ (80073ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80071c8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80071cc:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f003 0301 	and.w	r3, r3, #1
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d00a      	beq.n	80071f0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80071da:	4b84      	ldr	r3, [pc, #528]	@ (80073ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80071dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071e0:	f023 0203 	bic.w	r2, r3, #3
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	6a1b      	ldr	r3, [r3, #32]
 80071e8:	4980      	ldr	r1, [pc, #512]	@ (80073ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80071ea:	4313      	orrs	r3, r2
 80071ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f003 0302 	and.w	r3, r3, #2
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d00a      	beq.n	8007212 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80071fc:	4b7b      	ldr	r3, [pc, #492]	@ (80073ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80071fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007202:	f023 020c 	bic.w	r2, r3, #12
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800720a:	4978      	ldr	r1, [pc, #480]	@ (80073ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800720c:	4313      	orrs	r3, r2
 800720e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f003 0320 	and.w	r3, r3, #32
 800721a:	2b00      	cmp	r3, #0
 800721c:	d00a      	beq.n	8007234 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800721e:	4b73      	ldr	r3, [pc, #460]	@ (80073ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007220:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007224:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800722c:	496f      	ldr	r1, [pc, #444]	@ (80073ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800722e:	4313      	orrs	r3, r2
 8007230:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800723c:	2b00      	cmp	r3, #0
 800723e:	d00a      	beq.n	8007256 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007240:	4b6a      	ldr	r3, [pc, #424]	@ (80073ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007242:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007246:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800724e:	4967      	ldr	r1, [pc, #412]	@ (80073ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007250:	4313      	orrs	r3, r2
 8007252:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800725e:	2b00      	cmp	r3, #0
 8007260:	d00a      	beq.n	8007278 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007262:	4b62      	ldr	r3, [pc, #392]	@ (80073ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007264:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007268:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007270:	495e      	ldr	r1, [pc, #376]	@ (80073ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007272:	4313      	orrs	r3, r2
 8007274:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007280:	2b00      	cmp	r3, #0
 8007282:	d00a      	beq.n	800729a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007284:	4b59      	ldr	r3, [pc, #356]	@ (80073ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007286:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800728a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007292:	4956      	ldr	r1, [pc, #344]	@ (80073ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007294:	4313      	orrs	r3, r2
 8007296:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d00a      	beq.n	80072bc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80072a6:	4b51      	ldr	r3, [pc, #324]	@ (80073ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80072a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80072ac:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072b4:	494d      	ldr	r1, [pc, #308]	@ (80073ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80072b6:	4313      	orrs	r3, r2
 80072b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d028      	beq.n	800731a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80072c8:	4b48      	ldr	r3, [pc, #288]	@ (80073ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80072ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80072ce:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072d6:	4945      	ldr	r1, [pc, #276]	@ (80073ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80072d8:	4313      	orrs	r3, r2
 80072da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072e2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80072e6:	d106      	bne.n	80072f6 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80072e8:	4b40      	ldr	r3, [pc, #256]	@ (80073ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80072ea:	68db      	ldr	r3, [r3, #12]
 80072ec:	4a3f      	ldr	r2, [pc, #252]	@ (80073ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80072ee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80072f2:	60d3      	str	r3, [r2, #12]
 80072f4:	e011      	b.n	800731a <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072fa:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80072fe:	d10c      	bne.n	800731a <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	3304      	adds	r3, #4
 8007304:	2101      	movs	r1, #1
 8007306:	4618      	mov	r0, r3
 8007308:	f000 f882 	bl	8007410 <RCCEx_PLLSAI1_Config>
 800730c:	4603      	mov	r3, r0
 800730e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8007310:	7cfb      	ldrb	r3, [r7, #19]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d001      	beq.n	800731a <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8007316:	7cfb      	ldrb	r3, [r7, #19]
 8007318:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007322:	2b00      	cmp	r3, #0
 8007324:	d028      	beq.n	8007378 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007326:	4b31      	ldr	r3, [pc, #196]	@ (80073ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007328:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800732c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007334:	492d      	ldr	r1, [pc, #180]	@ (80073ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007336:	4313      	orrs	r3, r2
 8007338:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007340:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007344:	d106      	bne.n	8007354 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007346:	4b29      	ldr	r3, [pc, #164]	@ (80073ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007348:	68db      	ldr	r3, [r3, #12]
 800734a:	4a28      	ldr	r2, [pc, #160]	@ (80073ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800734c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007350:	60d3      	str	r3, [r2, #12]
 8007352:	e011      	b.n	8007378 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007358:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800735c:	d10c      	bne.n	8007378 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	3304      	adds	r3, #4
 8007362:	2101      	movs	r1, #1
 8007364:	4618      	mov	r0, r3
 8007366:	f000 f853 	bl	8007410 <RCCEx_PLLSAI1_Config>
 800736a:	4603      	mov	r3, r0
 800736c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800736e:	7cfb      	ldrb	r3, [r7, #19]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d001      	beq.n	8007378 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8007374:	7cfb      	ldrb	r3, [r7, #19]
 8007376:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007380:	2b00      	cmp	r3, #0
 8007382:	d01c      	beq.n	80073be <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007384:	4b19      	ldr	r3, [pc, #100]	@ (80073ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007386:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800738a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007392:	4916      	ldr	r1, [pc, #88]	@ (80073ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007394:	4313      	orrs	r3, r2
 8007396:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800739e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80073a2:	d10c      	bne.n	80073be <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	3304      	adds	r3, #4
 80073a8:	2102      	movs	r1, #2
 80073aa:	4618      	mov	r0, r3
 80073ac:	f000 f830 	bl	8007410 <RCCEx_PLLSAI1_Config>
 80073b0:	4603      	mov	r3, r0
 80073b2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80073b4:	7cfb      	ldrb	r3, [r7, #19]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d001      	beq.n	80073be <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 80073ba:	7cfb      	ldrb	r3, [r7, #19]
 80073bc:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d00a      	beq.n	80073e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80073ca:	4b08      	ldr	r3, [pc, #32]	@ (80073ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80073cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80073d0:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80073d8:	4904      	ldr	r1, [pc, #16]	@ (80073ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80073da:	4313      	orrs	r3, r2
 80073dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80073e0:	7cbb      	ldrb	r3, [r7, #18]
}
 80073e2:	4618      	mov	r0, r3
 80073e4:	3718      	adds	r7, #24
 80073e6:	46bd      	mov	sp, r7
 80073e8:	bd80      	pop	{r7, pc}
 80073ea:	bf00      	nop
 80073ec:	40021000 	.word	0x40021000

080073f0 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80073f0:	b480      	push	{r7}
 80073f2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80073f4:	4b05      	ldr	r3, [pc, #20]	@ (800740c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	4a04      	ldr	r2, [pc, #16]	@ (800740c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80073fa:	f043 0304 	orr.w	r3, r3, #4
 80073fe:	6013      	str	r3, [r2, #0]
}
 8007400:	bf00      	nop
 8007402:	46bd      	mov	sp, r7
 8007404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007408:	4770      	bx	lr
 800740a:	bf00      	nop
 800740c:	40021000 	.word	0x40021000

08007410 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8007410:	b580      	push	{r7, lr}
 8007412:	b084      	sub	sp, #16
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
 8007418:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800741a:	2300      	movs	r3, #0
 800741c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800741e:	4b74      	ldr	r3, [pc, #464]	@ (80075f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007420:	68db      	ldr	r3, [r3, #12]
 8007422:	f003 0303 	and.w	r3, r3, #3
 8007426:	2b00      	cmp	r3, #0
 8007428:	d018      	beq.n	800745c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800742a:	4b71      	ldr	r3, [pc, #452]	@ (80075f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800742c:	68db      	ldr	r3, [r3, #12]
 800742e:	f003 0203 	and.w	r2, r3, #3
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	429a      	cmp	r2, r3
 8007438:	d10d      	bne.n	8007456 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
       ||
 800743e:	2b00      	cmp	r3, #0
 8007440:	d009      	beq.n	8007456 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8007442:	4b6b      	ldr	r3, [pc, #428]	@ (80075f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007444:	68db      	ldr	r3, [r3, #12]
 8007446:	091b      	lsrs	r3, r3, #4
 8007448:	f003 0307 	and.w	r3, r3, #7
 800744c:	1c5a      	adds	r2, r3, #1
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	685b      	ldr	r3, [r3, #4]
       ||
 8007452:	429a      	cmp	r2, r3
 8007454:	d047      	beq.n	80074e6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8007456:	2301      	movs	r3, #1
 8007458:	73fb      	strb	r3, [r7, #15]
 800745a:	e044      	b.n	80074e6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	2b03      	cmp	r3, #3
 8007462:	d018      	beq.n	8007496 <RCCEx_PLLSAI1_Config+0x86>
 8007464:	2b03      	cmp	r3, #3
 8007466:	d825      	bhi.n	80074b4 <RCCEx_PLLSAI1_Config+0xa4>
 8007468:	2b01      	cmp	r3, #1
 800746a:	d002      	beq.n	8007472 <RCCEx_PLLSAI1_Config+0x62>
 800746c:	2b02      	cmp	r3, #2
 800746e:	d009      	beq.n	8007484 <RCCEx_PLLSAI1_Config+0x74>
 8007470:	e020      	b.n	80074b4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007472:	4b5f      	ldr	r3, [pc, #380]	@ (80075f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f003 0302 	and.w	r3, r3, #2
 800747a:	2b00      	cmp	r3, #0
 800747c:	d11d      	bne.n	80074ba <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800747e:	2301      	movs	r3, #1
 8007480:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007482:	e01a      	b.n	80074ba <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007484:	4b5a      	ldr	r3, [pc, #360]	@ (80075f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800748c:	2b00      	cmp	r3, #0
 800748e:	d116      	bne.n	80074be <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8007490:	2301      	movs	r3, #1
 8007492:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007494:	e013      	b.n	80074be <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007496:	4b56      	ldr	r3, [pc, #344]	@ (80075f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d10f      	bne.n	80074c2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80074a2:	4b53      	ldr	r3, [pc, #332]	@ (80075f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d109      	bne.n	80074c2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80074ae:	2301      	movs	r3, #1
 80074b0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80074b2:	e006      	b.n	80074c2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80074b4:	2301      	movs	r3, #1
 80074b6:	73fb      	strb	r3, [r7, #15]
      break;
 80074b8:	e004      	b.n	80074c4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80074ba:	bf00      	nop
 80074bc:	e002      	b.n	80074c4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80074be:	bf00      	nop
 80074c0:	e000      	b.n	80074c4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80074c2:	bf00      	nop
    }

    if(status == HAL_OK)
 80074c4:	7bfb      	ldrb	r3, [r7, #15]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d10d      	bne.n	80074e6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80074ca:	4b49      	ldr	r3, [pc, #292]	@ (80075f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80074cc:	68db      	ldr	r3, [r3, #12]
 80074ce:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6819      	ldr	r1, [r3, #0]
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	685b      	ldr	r3, [r3, #4]
 80074da:	3b01      	subs	r3, #1
 80074dc:	011b      	lsls	r3, r3, #4
 80074de:	430b      	orrs	r3, r1
 80074e0:	4943      	ldr	r1, [pc, #268]	@ (80075f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80074e2:	4313      	orrs	r3, r2
 80074e4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80074e6:	7bfb      	ldrb	r3, [r7, #15]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d17c      	bne.n	80075e6 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80074ec:	4b40      	ldr	r3, [pc, #256]	@ (80075f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	4a3f      	ldr	r2, [pc, #252]	@ (80075f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80074f2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80074f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80074f8:	f7fd f91c 	bl	8004734 <HAL_GetTick>
 80074fc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80074fe:	e009      	b.n	8007514 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007500:	f7fd f918 	bl	8004734 <HAL_GetTick>
 8007504:	4602      	mov	r2, r0
 8007506:	68bb      	ldr	r3, [r7, #8]
 8007508:	1ad3      	subs	r3, r2, r3
 800750a:	2b02      	cmp	r3, #2
 800750c:	d902      	bls.n	8007514 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800750e:	2303      	movs	r3, #3
 8007510:	73fb      	strb	r3, [r7, #15]
        break;
 8007512:	e005      	b.n	8007520 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007514:	4b36      	ldr	r3, [pc, #216]	@ (80075f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800751c:	2b00      	cmp	r3, #0
 800751e:	d1ef      	bne.n	8007500 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8007520:	7bfb      	ldrb	r3, [r7, #15]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d15f      	bne.n	80075e6 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d110      	bne.n	800754e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800752c:	4b30      	ldr	r3, [pc, #192]	@ (80075f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800752e:	691b      	ldr	r3, [r3, #16]
 8007530:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8007534:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8007538:	687a      	ldr	r2, [r7, #4]
 800753a:	6892      	ldr	r2, [r2, #8]
 800753c:	0211      	lsls	r1, r2, #8
 800753e:	687a      	ldr	r2, [r7, #4]
 8007540:	68d2      	ldr	r2, [r2, #12]
 8007542:	06d2      	lsls	r2, r2, #27
 8007544:	430a      	orrs	r2, r1
 8007546:	492a      	ldr	r1, [pc, #168]	@ (80075f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007548:	4313      	orrs	r3, r2
 800754a:	610b      	str	r3, [r1, #16]
 800754c:	e027      	b.n	800759e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800754e:	683b      	ldr	r3, [r7, #0]
 8007550:	2b01      	cmp	r3, #1
 8007552:	d112      	bne.n	800757a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007554:	4b26      	ldr	r3, [pc, #152]	@ (80075f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007556:	691b      	ldr	r3, [r3, #16]
 8007558:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800755c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8007560:	687a      	ldr	r2, [r7, #4]
 8007562:	6892      	ldr	r2, [r2, #8]
 8007564:	0211      	lsls	r1, r2, #8
 8007566:	687a      	ldr	r2, [r7, #4]
 8007568:	6912      	ldr	r2, [r2, #16]
 800756a:	0852      	lsrs	r2, r2, #1
 800756c:	3a01      	subs	r2, #1
 800756e:	0552      	lsls	r2, r2, #21
 8007570:	430a      	orrs	r2, r1
 8007572:	491f      	ldr	r1, [pc, #124]	@ (80075f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007574:	4313      	orrs	r3, r2
 8007576:	610b      	str	r3, [r1, #16]
 8007578:	e011      	b.n	800759e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800757a:	4b1d      	ldr	r3, [pc, #116]	@ (80075f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800757c:	691b      	ldr	r3, [r3, #16]
 800757e:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8007582:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8007586:	687a      	ldr	r2, [r7, #4]
 8007588:	6892      	ldr	r2, [r2, #8]
 800758a:	0211      	lsls	r1, r2, #8
 800758c:	687a      	ldr	r2, [r7, #4]
 800758e:	6952      	ldr	r2, [r2, #20]
 8007590:	0852      	lsrs	r2, r2, #1
 8007592:	3a01      	subs	r2, #1
 8007594:	0652      	lsls	r2, r2, #25
 8007596:	430a      	orrs	r2, r1
 8007598:	4915      	ldr	r1, [pc, #84]	@ (80075f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800759a:	4313      	orrs	r3, r2
 800759c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800759e:	4b14      	ldr	r3, [pc, #80]	@ (80075f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	4a13      	ldr	r2, [pc, #76]	@ (80075f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80075a4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80075a8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80075aa:	f7fd f8c3 	bl	8004734 <HAL_GetTick>
 80075ae:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80075b0:	e009      	b.n	80075c6 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80075b2:	f7fd f8bf 	bl	8004734 <HAL_GetTick>
 80075b6:	4602      	mov	r2, r0
 80075b8:	68bb      	ldr	r3, [r7, #8]
 80075ba:	1ad3      	subs	r3, r2, r3
 80075bc:	2b02      	cmp	r3, #2
 80075be:	d902      	bls.n	80075c6 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80075c0:	2303      	movs	r3, #3
 80075c2:	73fb      	strb	r3, [r7, #15]
          break;
 80075c4:	e005      	b.n	80075d2 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80075c6:	4b0a      	ldr	r3, [pc, #40]	@ (80075f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d0ef      	beq.n	80075b2 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80075d2:	7bfb      	ldrb	r3, [r7, #15]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d106      	bne.n	80075e6 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80075d8:	4b05      	ldr	r3, [pc, #20]	@ (80075f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80075da:	691a      	ldr	r2, [r3, #16]
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	699b      	ldr	r3, [r3, #24]
 80075e0:	4903      	ldr	r1, [pc, #12]	@ (80075f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80075e2:	4313      	orrs	r3, r2
 80075e4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80075e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80075e8:	4618      	mov	r0, r3
 80075ea:	3710      	adds	r7, #16
 80075ec:	46bd      	mov	sp, r7
 80075ee:	bd80      	pop	{r7, pc}
 80075f0:	40021000 	.word	0x40021000

080075f4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b084      	sub	sp, #16
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d101      	bne.n	8007606 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007602:	2301      	movs	r3, #1
 8007604:	e095      	b.n	8007732 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800760a:	2b00      	cmp	r3, #0
 800760c:	d108      	bne.n	8007620 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	685b      	ldr	r3, [r3, #4]
 8007612:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007616:	d009      	beq.n	800762c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2200      	movs	r2, #0
 800761c:	61da      	str	r2, [r3, #28]
 800761e:	e005      	b.n	800762c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2200      	movs	r2, #0
 8007624:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2200      	movs	r2, #0
 800762a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2200      	movs	r2, #0
 8007630:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007638:	b2db      	uxtb	r3, r3
 800763a:	2b00      	cmp	r3, #0
 800763c:	d106      	bne.n	800764c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	2200      	movs	r2, #0
 8007642:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007646:	6878      	ldr	r0, [r7, #4]
 8007648:	f7fc fe2c 	bl	80042a4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2202      	movs	r2, #2
 8007650:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	681a      	ldr	r2, [r3, #0]
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007662:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	68db      	ldr	r3, [r3, #12]
 8007668:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800766c:	d902      	bls.n	8007674 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800766e:	2300      	movs	r3, #0
 8007670:	60fb      	str	r3, [r7, #12]
 8007672:	e002      	b.n	800767a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007674:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007678:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	68db      	ldr	r3, [r3, #12]
 800767e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8007682:	d007      	beq.n	8007694 <HAL_SPI_Init+0xa0>
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	68db      	ldr	r3, [r3, #12]
 8007688:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800768c:	d002      	beq.n	8007694 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	2200      	movs	r2, #0
 8007692:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	685b      	ldr	r3, [r3, #4]
 8007698:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	689b      	ldr	r3, [r3, #8]
 80076a0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80076a4:	431a      	orrs	r2, r3
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	691b      	ldr	r3, [r3, #16]
 80076aa:	f003 0302 	and.w	r3, r3, #2
 80076ae:	431a      	orrs	r2, r3
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	695b      	ldr	r3, [r3, #20]
 80076b4:	f003 0301 	and.w	r3, r3, #1
 80076b8:	431a      	orrs	r2, r3
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	699b      	ldr	r3, [r3, #24]
 80076be:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80076c2:	431a      	orrs	r2, r3
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	69db      	ldr	r3, [r3, #28]
 80076c8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80076cc:	431a      	orrs	r2, r3
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	6a1b      	ldr	r3, [r3, #32]
 80076d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80076d6:	ea42 0103 	orr.w	r1, r2, r3
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076de:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	430a      	orrs	r2, r1
 80076e8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	699b      	ldr	r3, [r3, #24]
 80076ee:	0c1b      	lsrs	r3, r3, #16
 80076f0:	f003 0204 	and.w	r2, r3, #4
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076f8:	f003 0310 	and.w	r3, r3, #16
 80076fc:	431a      	orrs	r2, r3
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007702:	f003 0308 	and.w	r3, r3, #8
 8007706:	431a      	orrs	r2, r3
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	68db      	ldr	r3, [r3, #12]
 800770c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8007710:	ea42 0103 	orr.w	r1, r2, r3
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	430a      	orrs	r2, r1
 8007720:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	2200      	movs	r2, #0
 8007726:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2201      	movs	r2, #1
 800772c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8007730:	2300      	movs	r3, #0
}
 8007732:	4618      	mov	r0, r3
 8007734:	3710      	adds	r7, #16
 8007736:	46bd      	mov	sp, r7
 8007738:	bd80      	pop	{r7, pc}

0800773a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800773a:	b580      	push	{r7, lr}
 800773c:	b088      	sub	sp, #32
 800773e:	af00      	add	r7, sp, #0
 8007740:	60f8      	str	r0, [r7, #12]
 8007742:	60b9      	str	r1, [r7, #8]
 8007744:	603b      	str	r3, [r7, #0]
 8007746:	4613      	mov	r3, r2
 8007748:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800774a:	f7fc fff3 	bl	8004734 <HAL_GetTick>
 800774e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8007750:	88fb      	ldrh	r3, [r7, #6]
 8007752:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800775a:	b2db      	uxtb	r3, r3
 800775c:	2b01      	cmp	r3, #1
 800775e:	d001      	beq.n	8007764 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8007760:	2302      	movs	r3, #2
 8007762:	e15c      	b.n	8007a1e <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8007764:	68bb      	ldr	r3, [r7, #8]
 8007766:	2b00      	cmp	r3, #0
 8007768:	d002      	beq.n	8007770 <HAL_SPI_Transmit+0x36>
 800776a:	88fb      	ldrh	r3, [r7, #6]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d101      	bne.n	8007774 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8007770:	2301      	movs	r3, #1
 8007772:	e154      	b.n	8007a1e <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800777a:	2b01      	cmp	r3, #1
 800777c:	d101      	bne.n	8007782 <HAL_SPI_Transmit+0x48>
 800777e:	2302      	movs	r3, #2
 8007780:	e14d      	b.n	8007a1e <HAL_SPI_Transmit+0x2e4>
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	2201      	movs	r2, #1
 8007786:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	2203      	movs	r2, #3
 800778e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	2200      	movs	r2, #0
 8007796:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	68ba      	ldr	r2, [r7, #8]
 800779c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	88fa      	ldrh	r2, [r7, #6]
 80077a2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	88fa      	ldrh	r2, [r7, #6]
 80077a8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	2200      	movs	r2, #0
 80077ae:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	2200      	movs	r2, #0
 80077b4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	2200      	movs	r2, #0
 80077bc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	2200      	movs	r2, #0
 80077c4:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	2200      	movs	r2, #0
 80077ca:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	689b      	ldr	r3, [r3, #8]
 80077d0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80077d4:	d10f      	bne.n	80077f6 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	681a      	ldr	r2, [r3, #0]
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80077e4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	681a      	ldr	r2, [r3, #0]
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80077f4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007800:	2b40      	cmp	r3, #64	@ 0x40
 8007802:	d007      	beq.n	8007814 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	681a      	ldr	r2, [r3, #0]
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007812:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	68db      	ldr	r3, [r3, #12]
 8007818:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800781c:	d952      	bls.n	80078c4 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	685b      	ldr	r3, [r3, #4]
 8007822:	2b00      	cmp	r3, #0
 8007824:	d002      	beq.n	800782c <HAL_SPI_Transmit+0xf2>
 8007826:	8b7b      	ldrh	r3, [r7, #26]
 8007828:	2b01      	cmp	r3, #1
 800782a:	d145      	bne.n	80078b8 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007830:	881a      	ldrh	r2, [r3, #0]
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800783c:	1c9a      	adds	r2, r3, #2
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007846:	b29b      	uxth	r3, r3
 8007848:	3b01      	subs	r3, #1
 800784a:	b29a      	uxth	r2, r3
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007850:	e032      	b.n	80078b8 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	689b      	ldr	r3, [r3, #8]
 8007858:	f003 0302 	and.w	r3, r3, #2
 800785c:	2b02      	cmp	r3, #2
 800785e:	d112      	bne.n	8007886 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007864:	881a      	ldrh	r2, [r3, #0]
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007870:	1c9a      	adds	r2, r3, #2
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800787a:	b29b      	uxth	r3, r3
 800787c:	3b01      	subs	r3, #1
 800787e:	b29a      	uxth	r2, r3
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007884:	e018      	b.n	80078b8 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007886:	f7fc ff55 	bl	8004734 <HAL_GetTick>
 800788a:	4602      	mov	r2, r0
 800788c:	69fb      	ldr	r3, [r7, #28]
 800788e:	1ad3      	subs	r3, r2, r3
 8007890:	683a      	ldr	r2, [r7, #0]
 8007892:	429a      	cmp	r2, r3
 8007894:	d803      	bhi.n	800789e <HAL_SPI_Transmit+0x164>
 8007896:	683b      	ldr	r3, [r7, #0]
 8007898:	f1b3 3fff 	cmp.w	r3, #4294967295
 800789c:	d102      	bne.n	80078a4 <HAL_SPI_Transmit+0x16a>
 800789e:	683b      	ldr	r3, [r7, #0]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d109      	bne.n	80078b8 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	2201      	movs	r2, #1
 80078a8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	2200      	movs	r2, #0
 80078b0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80078b4:	2303      	movs	r3, #3
 80078b6:	e0b2      	b.n	8007a1e <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80078bc:	b29b      	uxth	r3, r3
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d1c7      	bne.n	8007852 <HAL_SPI_Transmit+0x118>
 80078c2:	e083      	b.n	80079cc <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	685b      	ldr	r3, [r3, #4]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d002      	beq.n	80078d2 <HAL_SPI_Transmit+0x198>
 80078cc:	8b7b      	ldrh	r3, [r7, #26]
 80078ce:	2b01      	cmp	r3, #1
 80078d0:	d177      	bne.n	80079c2 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80078d6:	b29b      	uxth	r3, r3
 80078d8:	2b01      	cmp	r3, #1
 80078da:	d912      	bls.n	8007902 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078e0:	881a      	ldrh	r2, [r3, #0]
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078ec:	1c9a      	adds	r2, r3, #2
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80078f6:	b29b      	uxth	r3, r3
 80078f8:	3b02      	subs	r3, #2
 80078fa:	b29a      	uxth	r2, r3
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007900:	e05f      	b.n	80079c2 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	330c      	adds	r3, #12
 800790c:	7812      	ldrb	r2, [r2, #0]
 800790e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007914:	1c5a      	adds	r2, r3, #1
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800791e:	b29b      	uxth	r3, r3
 8007920:	3b01      	subs	r3, #1
 8007922:	b29a      	uxth	r2, r3
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8007928:	e04b      	b.n	80079c2 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	689b      	ldr	r3, [r3, #8]
 8007930:	f003 0302 	and.w	r3, r3, #2
 8007934:	2b02      	cmp	r3, #2
 8007936:	d12b      	bne.n	8007990 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800793c:	b29b      	uxth	r3, r3
 800793e:	2b01      	cmp	r3, #1
 8007940:	d912      	bls.n	8007968 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007946:	881a      	ldrh	r2, [r3, #0]
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007952:	1c9a      	adds	r2, r3, #2
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800795c:	b29b      	uxth	r3, r3
 800795e:	3b02      	subs	r3, #2
 8007960:	b29a      	uxth	r2, r3
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007966:	e02c      	b.n	80079c2 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	330c      	adds	r3, #12
 8007972:	7812      	ldrb	r2, [r2, #0]
 8007974:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800797a:	1c5a      	adds	r2, r3, #1
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007984:	b29b      	uxth	r3, r3
 8007986:	3b01      	subs	r3, #1
 8007988:	b29a      	uxth	r2, r3
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800798e:	e018      	b.n	80079c2 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007990:	f7fc fed0 	bl	8004734 <HAL_GetTick>
 8007994:	4602      	mov	r2, r0
 8007996:	69fb      	ldr	r3, [r7, #28]
 8007998:	1ad3      	subs	r3, r2, r3
 800799a:	683a      	ldr	r2, [r7, #0]
 800799c:	429a      	cmp	r2, r3
 800799e:	d803      	bhi.n	80079a8 <HAL_SPI_Transmit+0x26e>
 80079a0:	683b      	ldr	r3, [r7, #0]
 80079a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079a6:	d102      	bne.n	80079ae <HAL_SPI_Transmit+0x274>
 80079a8:	683b      	ldr	r3, [r7, #0]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d109      	bne.n	80079c2 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	2201      	movs	r2, #1
 80079b2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	2200      	movs	r2, #0
 80079ba:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80079be:	2303      	movs	r3, #3
 80079c0:	e02d      	b.n	8007a1e <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80079c6:	b29b      	uxth	r3, r3
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d1ae      	bne.n	800792a <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80079cc:	69fa      	ldr	r2, [r7, #28]
 80079ce:	6839      	ldr	r1, [r7, #0]
 80079d0:	68f8      	ldr	r0, [r7, #12]
 80079d2:	f000 fbdf 	bl	8008194 <SPI_EndRxTxTransaction>
 80079d6:	4603      	mov	r3, r0
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d002      	beq.n	80079e2 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	2220      	movs	r2, #32
 80079e0:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	689b      	ldr	r3, [r3, #8]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d10a      	bne.n	8007a00 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80079ea:	2300      	movs	r3, #0
 80079ec:	617b      	str	r3, [r7, #20]
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	68db      	ldr	r3, [r3, #12]
 80079f4:	617b      	str	r3, [r7, #20]
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	689b      	ldr	r3, [r3, #8]
 80079fc:	617b      	str	r3, [r7, #20]
 80079fe:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	2201      	movs	r2, #1
 8007a04:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d001      	beq.n	8007a1c <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8007a18:	2301      	movs	r3, #1
 8007a1a:	e000      	b.n	8007a1e <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8007a1c:	2300      	movs	r3, #0
  }
}
 8007a1e:	4618      	mov	r0, r3
 8007a20:	3720      	adds	r7, #32
 8007a22:	46bd      	mov	sp, r7
 8007a24:	bd80      	pop	{r7, pc}
	...

08007a28 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b084      	sub	sp, #16
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	60f8      	str	r0, [r7, #12]
 8007a30:	60b9      	str	r1, [r7, #8]
 8007a32:	4613      	mov	r3, r2
 8007a34:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007a3c:	b2db      	uxtb	r3, r3
 8007a3e:	2b01      	cmp	r3, #1
 8007a40:	d001      	beq.n	8007a46 <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 8007a42:	2302      	movs	r3, #2
 8007a44:	e0d4      	b.n	8007bf0 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  if ((pData == NULL) || (Size == 0U))
 8007a46:	68bb      	ldr	r3, [r7, #8]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d002      	beq.n	8007a52 <HAL_SPI_Transmit_DMA+0x2a>
 8007a4c:	88fb      	ldrh	r3, [r7, #6]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d101      	bne.n	8007a56 <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 8007a52:	2301      	movs	r3, #1
 8007a54:	e0cc      	b.n	8007bf0 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8007a5c:	2b01      	cmp	r3, #1
 8007a5e:	d101      	bne.n	8007a64 <HAL_SPI_Transmit_DMA+0x3c>
 8007a60:	2302      	movs	r3, #2
 8007a62:	e0c5      	b.n	8007bf0 <HAL_SPI_Transmit_DMA+0x1c8>
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	2201      	movs	r2, #1
 8007a68:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	2203      	movs	r2, #3
 8007a70:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	2200      	movs	r2, #0
 8007a78:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	68ba      	ldr	r2, [r7, #8]
 8007a7e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	88fa      	ldrh	r2, [r7, #6]
 8007a84:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	88fa      	ldrh	r2, [r7, #6]
 8007a8a:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	2200      	movs	r2, #0
 8007a90:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	2200      	movs	r2, #0
 8007a96:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->RxXferSize  = 0U;
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	689b      	ldr	r3, [r3, #8]
 8007ab2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007ab6:	d10f      	bne.n	8007ad8 <HAL_SPI_Transmit_DMA+0xb0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	681a      	ldr	r2, [r3, #0]
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007ac6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	681a      	ldr	r2, [r3, #0]
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007ad6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007adc:	4a46      	ldr	r2, [pc, #280]	@ (8007bf8 <HAL_SPI_Transmit_DMA+0x1d0>)
 8007ade:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ae4:	4a45      	ldr	r2, [pc, #276]	@ (8007bfc <HAL_SPI_Transmit_DMA+0x1d4>)
 8007ae6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007aec:	4a44      	ldr	r2, [pc, #272]	@ (8007c00 <HAL_SPI_Transmit_DMA+0x1d8>)
 8007aee:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007af4:	2200      	movs	r2, #0
 8007af6:	639a      	str	r2, [r3, #56]	@ 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	685a      	ldr	r2, [r3, #4]
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007b06:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	68db      	ldr	r3, [r3, #12]
 8007b0c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007b10:	d82d      	bhi.n	8007b6e <HAL_SPI_Transmit_DMA+0x146>
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b16:	699b      	ldr	r3, [r3, #24]
 8007b18:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007b1c:	d127      	bne.n	8007b6e <HAL_SPI_Transmit_DMA+0x146>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007b22:	b29b      	uxth	r3, r3
 8007b24:	f003 0301 	and.w	r3, r3, #1
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d10f      	bne.n	8007b4c <HAL_SPI_Transmit_DMA+0x124>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	685a      	ldr	r2, [r3, #4]
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007b3a:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007b40:	b29b      	uxth	r3, r3
 8007b42:	085b      	lsrs	r3, r3, #1
 8007b44:	b29a      	uxth	r2, r3
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007b4a:	e010      	b.n	8007b6e <HAL_SPI_Transmit_DMA+0x146>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	685a      	ldr	r2, [r3, #4]
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007b5a:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007b60:	b29b      	uxth	r3, r3
 8007b62:	085b      	lsrs	r3, r3, #1
 8007b64:	b29b      	uxth	r3, r3
 8007b66:	3301      	adds	r3, #1
 8007b68:	b29a      	uxth	r2, r3
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b76:	4619      	mov	r1, r3
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	330c      	adds	r3, #12
 8007b7e:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007b84:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8007b86:	f7fe f8af 	bl	8005ce8 <HAL_DMA_Start_IT>
 8007b8a:	4603      	mov	r3, r0
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d00b      	beq.n	8007ba8 <HAL_SPI_Transmit_DMA+0x180>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007b94:	f043 0210 	orr.w	r2, r3, #16
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8007ba4:	2301      	movs	r3, #1
 8007ba6:	e023      	b.n	8007bf0 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007bb2:	2b40      	cmp	r3, #64	@ 0x40
 8007bb4:	d007      	beq.n	8007bc6 <HAL_SPI_Transmit_DMA+0x19e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	681a      	ldr	r2, [r3, #0]
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007bc4:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	2200      	movs	r2, #0
 8007bca:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	685a      	ldr	r2, [r3, #4]
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	f042 0220 	orr.w	r2, r2, #32
 8007bdc:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	685a      	ldr	r2, [r3, #4]
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	f042 0202 	orr.w	r2, r2, #2
 8007bec:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8007bee:	2300      	movs	r3, #0
}
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	3710      	adds	r7, #16
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	bd80      	pop	{r7, pc}
 8007bf8:	08007ed3 	.word	0x08007ed3
 8007bfc:	08007e2d 	.word	0x08007e2d
 8007c00:	08007eef 	.word	0x08007eef

08007c04 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b088      	sub	sp, #32
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	685b      	ldr	r3, [r3, #4]
 8007c12:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	689b      	ldr	r3, [r3, #8]
 8007c1a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007c1c:	69bb      	ldr	r3, [r7, #24]
 8007c1e:	099b      	lsrs	r3, r3, #6
 8007c20:	f003 0301 	and.w	r3, r3, #1
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d10f      	bne.n	8007c48 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007c28:	69bb      	ldr	r3, [r7, #24]
 8007c2a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d00a      	beq.n	8007c48 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007c32:	69fb      	ldr	r3, [r7, #28]
 8007c34:	099b      	lsrs	r3, r3, #6
 8007c36:	f003 0301 	and.w	r3, r3, #1
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d004      	beq.n	8007c48 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007c42:	6878      	ldr	r0, [r7, #4]
 8007c44:	4798      	blx	r3
    return;
 8007c46:	e0d7      	b.n	8007df8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8007c48:	69bb      	ldr	r3, [r7, #24]
 8007c4a:	085b      	lsrs	r3, r3, #1
 8007c4c:	f003 0301 	and.w	r3, r3, #1
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d00a      	beq.n	8007c6a <HAL_SPI_IRQHandler+0x66>
 8007c54:	69fb      	ldr	r3, [r7, #28]
 8007c56:	09db      	lsrs	r3, r3, #7
 8007c58:	f003 0301 	and.w	r3, r3, #1
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d004      	beq.n	8007c6a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007c64:	6878      	ldr	r0, [r7, #4]
 8007c66:	4798      	blx	r3
    return;
 8007c68:	e0c6      	b.n	8007df8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007c6a:	69bb      	ldr	r3, [r7, #24]
 8007c6c:	095b      	lsrs	r3, r3, #5
 8007c6e:	f003 0301 	and.w	r3, r3, #1
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d10c      	bne.n	8007c90 <HAL_SPI_IRQHandler+0x8c>
 8007c76:	69bb      	ldr	r3, [r7, #24]
 8007c78:	099b      	lsrs	r3, r3, #6
 8007c7a:	f003 0301 	and.w	r3, r3, #1
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d106      	bne.n	8007c90 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8007c82:	69bb      	ldr	r3, [r7, #24]
 8007c84:	0a1b      	lsrs	r3, r3, #8
 8007c86:	f003 0301 	and.w	r3, r3, #1
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	f000 80b4 	beq.w	8007df8 <HAL_SPI_IRQHandler+0x1f4>
 8007c90:	69fb      	ldr	r3, [r7, #28]
 8007c92:	095b      	lsrs	r3, r3, #5
 8007c94:	f003 0301 	and.w	r3, r3, #1
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	f000 80ad 	beq.w	8007df8 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007c9e:	69bb      	ldr	r3, [r7, #24]
 8007ca0:	099b      	lsrs	r3, r3, #6
 8007ca2:	f003 0301 	and.w	r3, r3, #1
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d023      	beq.n	8007cf2 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007cb0:	b2db      	uxtb	r3, r3
 8007cb2:	2b03      	cmp	r3, #3
 8007cb4:	d011      	beq.n	8007cda <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007cba:	f043 0204 	orr.w	r2, r3, #4
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	617b      	str	r3, [r7, #20]
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	68db      	ldr	r3, [r3, #12]
 8007ccc:	617b      	str	r3, [r7, #20]
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	689b      	ldr	r3, [r3, #8]
 8007cd4:	617b      	str	r3, [r7, #20]
 8007cd6:	697b      	ldr	r3, [r7, #20]
 8007cd8:	e00b      	b.n	8007cf2 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007cda:	2300      	movs	r3, #0
 8007cdc:	613b      	str	r3, [r7, #16]
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	68db      	ldr	r3, [r3, #12]
 8007ce4:	613b      	str	r3, [r7, #16]
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	689b      	ldr	r3, [r3, #8]
 8007cec:	613b      	str	r3, [r7, #16]
 8007cee:	693b      	ldr	r3, [r7, #16]
        return;
 8007cf0:	e082      	b.n	8007df8 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8007cf2:	69bb      	ldr	r3, [r7, #24]
 8007cf4:	095b      	lsrs	r3, r3, #5
 8007cf6:	f003 0301 	and.w	r3, r3, #1
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d014      	beq.n	8007d28 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007d02:	f043 0201 	orr.w	r2, r3, #1
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	60fb      	str	r3, [r7, #12]
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	689b      	ldr	r3, [r3, #8]
 8007d14:	60fb      	str	r3, [r7, #12]
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	681a      	ldr	r2, [r3, #0]
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007d24:	601a      	str	r2, [r3, #0]
 8007d26:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8007d28:	69bb      	ldr	r3, [r7, #24]
 8007d2a:	0a1b      	lsrs	r3, r3, #8
 8007d2c:	f003 0301 	and.w	r3, r3, #1
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d00c      	beq.n	8007d4e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007d38:	f043 0208 	orr.w	r2, r3, #8
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007d40:	2300      	movs	r3, #0
 8007d42:	60bb      	str	r3, [r7, #8]
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	689b      	ldr	r3, [r3, #8]
 8007d4a:	60bb      	str	r3, [r7, #8]
 8007d4c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d04f      	beq.n	8007df6 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	685a      	ldr	r2, [r3, #4]
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007d64:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	2201      	movs	r2, #1
 8007d6a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8007d6e:	69fb      	ldr	r3, [r7, #28]
 8007d70:	f003 0302 	and.w	r3, r3, #2
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d104      	bne.n	8007d82 <HAL_SPI_IRQHandler+0x17e>
 8007d78:	69fb      	ldr	r3, [r7, #28]
 8007d7a:	f003 0301 	and.w	r3, r3, #1
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d034      	beq.n	8007dec <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	685a      	ldr	r2, [r3, #4]
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	f022 0203 	bic.w	r2, r2, #3
 8007d90:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d011      	beq.n	8007dbe <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d9e:	4a18      	ldr	r2, [pc, #96]	@ (8007e00 <HAL_SPI_IRQHandler+0x1fc>)
 8007da0:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007da6:	4618      	mov	r0, r3
 8007da8:	f7fd fffe 	bl	8005da8 <HAL_DMA_Abort_IT>
 8007dac:	4603      	mov	r3, r0
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d005      	beq.n	8007dbe <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007db6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d016      	beq.n	8007df4 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007dca:	4a0d      	ldr	r2, [pc, #52]	@ (8007e00 <HAL_SPI_IRQHandler+0x1fc>)
 8007dcc:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	f7fd ffe8 	bl	8005da8 <HAL_DMA_Abort_IT>
 8007dd8:	4603      	mov	r3, r0
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d00a      	beq.n	8007df4 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007de2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8007dea:	e003      	b.n	8007df4 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8007dec:	6878      	ldr	r0, [r7, #4]
 8007dee:	f000 f813 	bl	8007e18 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8007df2:	e000      	b.n	8007df6 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8007df4:	bf00      	nop
    return;
 8007df6:	bf00      	nop
  }
}
 8007df8:	3720      	adds	r7, #32
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	bd80      	pop	{r7, pc}
 8007dfe:	bf00      	nop
 8007e00:	08007f2f 	.word	0x08007f2f

08007e04 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007e04:	b480      	push	{r7}
 8007e06:	b083      	sub	sp, #12
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8007e0c:	bf00      	nop
 8007e0e:	370c      	adds	r7, #12
 8007e10:	46bd      	mov	sp, r7
 8007e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e16:	4770      	bx	lr

08007e18 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007e18:	b480      	push	{r7}
 8007e1a:	b083      	sub	sp, #12
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007e20:	bf00      	nop
 8007e22:	370c      	adds	r7, #12
 8007e24:	46bd      	mov	sp, r7
 8007e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2a:	4770      	bx	lr

08007e2c <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b086      	sub	sp, #24
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e38:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007e3a:	f7fc fc7b 	bl	8004734 <HAL_GetTick>
 8007e3e:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	f003 0320 	and.w	r3, r3, #32
 8007e4a:	2b20      	cmp	r3, #32
 8007e4c:	d03b      	beq.n	8007ec6 <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8007e4e:	697b      	ldr	r3, [r7, #20]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	685a      	ldr	r2, [r3, #4]
 8007e54:	697b      	ldr	r3, [r7, #20]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	f022 0220 	bic.w	r2, r2, #32
 8007e5c:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8007e5e:	697b      	ldr	r3, [r7, #20]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	685a      	ldr	r2, [r3, #4]
 8007e64:	697b      	ldr	r3, [r7, #20]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	f022 0202 	bic.w	r2, r2, #2
 8007e6c:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8007e6e:	693a      	ldr	r2, [r7, #16]
 8007e70:	2164      	movs	r1, #100	@ 0x64
 8007e72:	6978      	ldr	r0, [r7, #20]
 8007e74:	f000 f98e 	bl	8008194 <SPI_EndRxTxTransaction>
 8007e78:	4603      	mov	r3, r0
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d005      	beq.n	8007e8a <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007e7e:	697b      	ldr	r3, [r7, #20]
 8007e80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007e82:	f043 0220 	orr.w	r2, r3, #32
 8007e86:	697b      	ldr	r3, [r7, #20]
 8007e88:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007e8a:	697b      	ldr	r3, [r7, #20]
 8007e8c:	689b      	ldr	r3, [r3, #8]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d10a      	bne.n	8007ea8 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007e92:	2300      	movs	r3, #0
 8007e94:	60fb      	str	r3, [r7, #12]
 8007e96:	697b      	ldr	r3, [r7, #20]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	68db      	ldr	r3, [r3, #12]
 8007e9c:	60fb      	str	r3, [r7, #12]
 8007e9e:	697b      	ldr	r3, [r7, #20]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	689b      	ldr	r3, [r3, #8]
 8007ea4:	60fb      	str	r3, [r7, #12]
 8007ea6:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8007ea8:	697b      	ldr	r3, [r7, #20]
 8007eaa:	2200      	movs	r2, #0
 8007eac:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8007eae:	697b      	ldr	r3, [r7, #20]
 8007eb0:	2201      	movs	r2, #1
 8007eb2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007eb6:	697b      	ldr	r3, [r7, #20]
 8007eb8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d003      	beq.n	8007ec6 <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8007ebe:	6978      	ldr	r0, [r7, #20]
 8007ec0:	f7ff ffaa 	bl	8007e18 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8007ec4:	e002      	b.n	8007ecc <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8007ec6:	6978      	ldr	r0, [r7, #20]
 8007ec8:	f7fc f948 	bl	800415c <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007ecc:	3718      	adds	r7, #24
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	bd80      	pop	{r7, pc}

08007ed2 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007ed2:	b580      	push	{r7, lr}
 8007ed4:	b084      	sub	sp, #16
 8007ed6:	af00      	add	r7, sp, #0
 8007ed8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ede:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8007ee0:	68f8      	ldr	r0, [r7, #12]
 8007ee2:	f7ff ff8f 	bl	8007e04 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007ee6:	bf00      	nop
 8007ee8:	3710      	adds	r7, #16
 8007eea:	46bd      	mov	sp, r7
 8007eec:	bd80      	pop	{r7, pc}

08007eee <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8007eee:	b580      	push	{r7, lr}
 8007ef0:	b084      	sub	sp, #16
 8007ef2:	af00      	add	r7, sp, #0
 8007ef4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007efa:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	685a      	ldr	r2, [r3, #4]
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	f022 0203 	bic.w	r2, r2, #3
 8007f0a:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007f10:	f043 0210 	orr.w	r2, r3, #16
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	2201      	movs	r2, #1
 8007f1c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007f20:	68f8      	ldr	r0, [r7, #12]
 8007f22:	f7ff ff79 	bl	8007e18 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007f26:	bf00      	nop
 8007f28:	3710      	adds	r7, #16
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	bd80      	pop	{r7, pc}

08007f2e <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007f2e:	b580      	push	{r7, lr}
 8007f30:	b084      	sub	sp, #16
 8007f32:	af00      	add	r7, sp, #0
 8007f34:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f3a:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	2200      	movs	r2, #0
 8007f40:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	2200      	movs	r2, #0
 8007f48:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007f4a:	68f8      	ldr	r0, [r7, #12]
 8007f4c:	f7ff ff64 	bl	8007e18 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007f50:	bf00      	nop
 8007f52:	3710      	adds	r7, #16
 8007f54:	46bd      	mov	sp, r7
 8007f56:	bd80      	pop	{r7, pc}

08007f58 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	b088      	sub	sp, #32
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	60f8      	str	r0, [r7, #12]
 8007f60:	60b9      	str	r1, [r7, #8]
 8007f62:	603b      	str	r3, [r7, #0]
 8007f64:	4613      	mov	r3, r2
 8007f66:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007f68:	f7fc fbe4 	bl	8004734 <HAL_GetTick>
 8007f6c:	4602      	mov	r2, r0
 8007f6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f70:	1a9b      	subs	r3, r3, r2
 8007f72:	683a      	ldr	r2, [r7, #0]
 8007f74:	4413      	add	r3, r2
 8007f76:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007f78:	f7fc fbdc 	bl	8004734 <HAL_GetTick>
 8007f7c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007f7e:	4b39      	ldr	r3, [pc, #228]	@ (8008064 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	015b      	lsls	r3, r3, #5
 8007f84:	0d1b      	lsrs	r3, r3, #20
 8007f86:	69fa      	ldr	r2, [r7, #28]
 8007f88:	fb02 f303 	mul.w	r3, r2, r3
 8007f8c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007f8e:	e054      	b.n	800803a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007f90:	683b      	ldr	r3, [r7, #0]
 8007f92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f96:	d050      	beq.n	800803a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007f98:	f7fc fbcc 	bl	8004734 <HAL_GetTick>
 8007f9c:	4602      	mov	r2, r0
 8007f9e:	69bb      	ldr	r3, [r7, #24]
 8007fa0:	1ad3      	subs	r3, r2, r3
 8007fa2:	69fa      	ldr	r2, [r7, #28]
 8007fa4:	429a      	cmp	r2, r3
 8007fa6:	d902      	bls.n	8007fae <SPI_WaitFlagStateUntilTimeout+0x56>
 8007fa8:	69fb      	ldr	r3, [r7, #28]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d13d      	bne.n	800802a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	685a      	ldr	r2, [r3, #4]
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007fbc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	685b      	ldr	r3, [r3, #4]
 8007fc2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007fc6:	d111      	bne.n	8007fec <SPI_WaitFlagStateUntilTimeout+0x94>
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	689b      	ldr	r3, [r3, #8]
 8007fcc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007fd0:	d004      	beq.n	8007fdc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	689b      	ldr	r3, [r3, #8]
 8007fd6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007fda:	d107      	bne.n	8007fec <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	681a      	ldr	r2, [r3, #0]
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007fea:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ff0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007ff4:	d10f      	bne.n	8008016 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	681a      	ldr	r2, [r3, #0]
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008004:	601a      	str	r2, [r3, #0]
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	681a      	ldr	r2, [r3, #0]
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008014:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	2201      	movs	r2, #1
 800801a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	2200      	movs	r2, #0
 8008022:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8008026:	2303      	movs	r3, #3
 8008028:	e017      	b.n	800805a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800802a:	697b      	ldr	r3, [r7, #20]
 800802c:	2b00      	cmp	r3, #0
 800802e:	d101      	bne.n	8008034 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008030:	2300      	movs	r3, #0
 8008032:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008034:	697b      	ldr	r3, [r7, #20]
 8008036:	3b01      	subs	r3, #1
 8008038:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	689a      	ldr	r2, [r3, #8]
 8008040:	68bb      	ldr	r3, [r7, #8]
 8008042:	4013      	ands	r3, r2
 8008044:	68ba      	ldr	r2, [r7, #8]
 8008046:	429a      	cmp	r2, r3
 8008048:	bf0c      	ite	eq
 800804a:	2301      	moveq	r3, #1
 800804c:	2300      	movne	r3, #0
 800804e:	b2db      	uxtb	r3, r3
 8008050:	461a      	mov	r2, r3
 8008052:	79fb      	ldrb	r3, [r7, #7]
 8008054:	429a      	cmp	r2, r3
 8008056:	d19b      	bne.n	8007f90 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008058:	2300      	movs	r3, #0
}
 800805a:	4618      	mov	r0, r3
 800805c:	3720      	adds	r7, #32
 800805e:	46bd      	mov	sp, r7
 8008060:	bd80      	pop	{r7, pc}
 8008062:	bf00      	nop
 8008064:	20000014 	.word	0x20000014

08008068 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008068:	b580      	push	{r7, lr}
 800806a:	b08a      	sub	sp, #40	@ 0x28
 800806c:	af00      	add	r7, sp, #0
 800806e:	60f8      	str	r0, [r7, #12]
 8008070:	60b9      	str	r1, [r7, #8]
 8008072:	607a      	str	r2, [r7, #4]
 8008074:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8008076:	2300      	movs	r3, #0
 8008078:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800807a:	f7fc fb5b 	bl	8004734 <HAL_GetTick>
 800807e:	4602      	mov	r2, r0
 8008080:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008082:	1a9b      	subs	r3, r3, r2
 8008084:	683a      	ldr	r2, [r7, #0]
 8008086:	4413      	add	r3, r2
 8008088:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800808a:	f7fc fb53 	bl	8004734 <HAL_GetTick>
 800808e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	330c      	adds	r3, #12
 8008096:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8008098:	4b3d      	ldr	r3, [pc, #244]	@ (8008190 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800809a:	681a      	ldr	r2, [r3, #0]
 800809c:	4613      	mov	r3, r2
 800809e:	009b      	lsls	r3, r3, #2
 80080a0:	4413      	add	r3, r2
 80080a2:	00da      	lsls	r2, r3, #3
 80080a4:	1ad3      	subs	r3, r2, r3
 80080a6:	0d1b      	lsrs	r3, r3, #20
 80080a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80080aa:	fb02 f303 	mul.w	r3, r2, r3
 80080ae:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80080b0:	e060      	b.n	8008174 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80080b2:	68bb      	ldr	r3, [r7, #8]
 80080b4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80080b8:	d107      	bne.n	80080ca <SPI_WaitFifoStateUntilTimeout+0x62>
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d104      	bne.n	80080ca <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80080c0:	69fb      	ldr	r3, [r7, #28]
 80080c2:	781b      	ldrb	r3, [r3, #0]
 80080c4:	b2db      	uxtb	r3, r3
 80080c6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80080c8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080d0:	d050      	beq.n	8008174 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80080d2:	f7fc fb2f 	bl	8004734 <HAL_GetTick>
 80080d6:	4602      	mov	r2, r0
 80080d8:	6a3b      	ldr	r3, [r7, #32]
 80080da:	1ad3      	subs	r3, r2, r3
 80080dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80080de:	429a      	cmp	r2, r3
 80080e0:	d902      	bls.n	80080e8 <SPI_WaitFifoStateUntilTimeout+0x80>
 80080e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d13d      	bne.n	8008164 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	685a      	ldr	r2, [r3, #4]
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80080f6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	685b      	ldr	r3, [r3, #4]
 80080fc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008100:	d111      	bne.n	8008126 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	689b      	ldr	r3, [r3, #8]
 8008106:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800810a:	d004      	beq.n	8008116 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	689b      	ldr	r3, [r3, #8]
 8008110:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008114:	d107      	bne.n	8008126 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	681a      	ldr	r2, [r3, #0]
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008124:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800812a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800812e:	d10f      	bne.n	8008150 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	681a      	ldr	r2, [r3, #0]
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800813e:	601a      	str	r2, [r3, #0]
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	681a      	ldr	r2, [r3, #0]
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800814e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	2201      	movs	r2, #1
 8008154:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	2200      	movs	r2, #0
 800815c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8008160:	2303      	movs	r3, #3
 8008162:	e010      	b.n	8008186 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008164:	69bb      	ldr	r3, [r7, #24]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d101      	bne.n	800816e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800816a:	2300      	movs	r3, #0
 800816c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800816e:	69bb      	ldr	r3, [r7, #24]
 8008170:	3b01      	subs	r3, #1
 8008172:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	689a      	ldr	r2, [r3, #8]
 800817a:	68bb      	ldr	r3, [r7, #8]
 800817c:	4013      	ands	r3, r2
 800817e:	687a      	ldr	r2, [r7, #4]
 8008180:	429a      	cmp	r2, r3
 8008182:	d196      	bne.n	80080b2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8008184:	2300      	movs	r3, #0
}
 8008186:	4618      	mov	r0, r3
 8008188:	3728      	adds	r7, #40	@ 0x28
 800818a:	46bd      	mov	sp, r7
 800818c:	bd80      	pop	{r7, pc}
 800818e:	bf00      	nop
 8008190:	20000014 	.word	0x20000014

08008194 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008194:	b580      	push	{r7, lr}
 8008196:	b086      	sub	sp, #24
 8008198:	af02      	add	r7, sp, #8
 800819a:	60f8      	str	r0, [r7, #12]
 800819c:	60b9      	str	r1, [r7, #8]
 800819e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	9300      	str	r3, [sp, #0]
 80081a4:	68bb      	ldr	r3, [r7, #8]
 80081a6:	2200      	movs	r2, #0
 80081a8:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80081ac:	68f8      	ldr	r0, [r7, #12]
 80081ae:	f7ff ff5b 	bl	8008068 <SPI_WaitFifoStateUntilTimeout>
 80081b2:	4603      	mov	r3, r0
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d007      	beq.n	80081c8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80081bc:	f043 0220 	orr.w	r2, r3, #32
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80081c4:	2303      	movs	r3, #3
 80081c6:	e027      	b.n	8008218 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	9300      	str	r3, [sp, #0]
 80081cc:	68bb      	ldr	r3, [r7, #8]
 80081ce:	2200      	movs	r2, #0
 80081d0:	2180      	movs	r1, #128	@ 0x80
 80081d2:	68f8      	ldr	r0, [r7, #12]
 80081d4:	f7ff fec0 	bl	8007f58 <SPI_WaitFlagStateUntilTimeout>
 80081d8:	4603      	mov	r3, r0
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d007      	beq.n	80081ee <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80081e2:	f043 0220 	orr.w	r2, r3, #32
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80081ea:	2303      	movs	r3, #3
 80081ec:	e014      	b.n	8008218 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	9300      	str	r3, [sp, #0]
 80081f2:	68bb      	ldr	r3, [r7, #8]
 80081f4:	2200      	movs	r2, #0
 80081f6:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80081fa:	68f8      	ldr	r0, [r7, #12]
 80081fc:	f7ff ff34 	bl	8008068 <SPI_WaitFifoStateUntilTimeout>
 8008200:	4603      	mov	r3, r0
 8008202:	2b00      	cmp	r3, #0
 8008204:	d007      	beq.n	8008216 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800820a:	f043 0220 	orr.w	r2, r3, #32
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8008212:	2303      	movs	r3, #3
 8008214:	e000      	b.n	8008218 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8008216:	2300      	movs	r3, #0
}
 8008218:	4618      	mov	r0, r3
 800821a:	3710      	adds	r7, #16
 800821c:	46bd      	mov	sp, r7
 800821e:	bd80      	pop	{r7, pc}

08008220 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008220:	b580      	push	{r7, lr}
 8008222:	b082      	sub	sp, #8
 8008224:	af00      	add	r7, sp, #0
 8008226:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2b00      	cmp	r3, #0
 800822c:	d101      	bne.n	8008232 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800822e:	2301      	movs	r3, #1
 8008230:	e049      	b.n	80082c6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008238:	b2db      	uxtb	r3, r3
 800823a:	2b00      	cmp	r3, #0
 800823c:	d106      	bne.n	800824c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	2200      	movs	r2, #0
 8008242:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008246:	6878      	ldr	r0, [r7, #4]
 8008248:	f7fc f89c 	bl	8004384 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2202      	movs	r2, #2
 8008250:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681a      	ldr	r2, [r3, #0]
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	3304      	adds	r3, #4
 800825c:	4619      	mov	r1, r3
 800825e:	4610      	mov	r0, r2
 8008260:	f000 f9ba 	bl	80085d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	2201      	movs	r2, #1
 8008268:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	2201      	movs	r2, #1
 8008270:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	2201      	movs	r2, #1
 8008278:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	2201      	movs	r2, #1
 8008280:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	2201      	movs	r2, #1
 8008288:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2201      	movs	r2, #1
 8008290:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	2201      	movs	r2, #1
 8008298:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2201      	movs	r2, #1
 80082a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2201      	movs	r2, #1
 80082a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2201      	movs	r2, #1
 80082b0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2201      	movs	r2, #1
 80082b8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	2201      	movs	r2, #1
 80082c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80082c4:	2300      	movs	r3, #0
}
 80082c6:	4618      	mov	r0, r3
 80082c8:	3708      	adds	r7, #8
 80082ca:	46bd      	mov	sp, r7
 80082cc:	bd80      	pop	{r7, pc}
	...

080082d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80082d0:	b480      	push	{r7}
 80082d2:	b085      	sub	sp, #20
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80082de:	b2db      	uxtb	r3, r3
 80082e0:	2b01      	cmp	r3, #1
 80082e2:	d001      	beq.n	80082e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80082e4:	2301      	movs	r3, #1
 80082e6:	e03b      	b.n	8008360 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2202      	movs	r2, #2
 80082ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	68da      	ldr	r2, [r3, #12]
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	f042 0201 	orr.w	r2, r2, #1
 80082fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	4a19      	ldr	r2, [pc, #100]	@ (800836c <HAL_TIM_Base_Start_IT+0x9c>)
 8008306:	4293      	cmp	r3, r2
 8008308:	d009      	beq.n	800831e <HAL_TIM_Base_Start_IT+0x4e>
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008312:	d004      	beq.n	800831e <HAL_TIM_Base_Start_IT+0x4e>
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	4a15      	ldr	r2, [pc, #84]	@ (8008370 <HAL_TIM_Base_Start_IT+0xa0>)
 800831a:	4293      	cmp	r3, r2
 800831c:	d115      	bne.n	800834a <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	689a      	ldr	r2, [r3, #8]
 8008324:	4b13      	ldr	r3, [pc, #76]	@ (8008374 <HAL_TIM_Base_Start_IT+0xa4>)
 8008326:	4013      	ands	r3, r2
 8008328:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	2b06      	cmp	r3, #6
 800832e:	d015      	beq.n	800835c <HAL_TIM_Base_Start_IT+0x8c>
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008336:	d011      	beq.n	800835c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	681a      	ldr	r2, [r3, #0]
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	f042 0201 	orr.w	r2, r2, #1
 8008346:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008348:	e008      	b.n	800835c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	681a      	ldr	r2, [r3, #0]
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	f042 0201 	orr.w	r2, r2, #1
 8008358:	601a      	str	r2, [r3, #0]
 800835a:	e000      	b.n	800835e <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800835c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800835e:	2300      	movs	r3, #0
}
 8008360:	4618      	mov	r0, r3
 8008362:	3714      	adds	r7, #20
 8008364:	46bd      	mov	sp, r7
 8008366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836a:	4770      	bx	lr
 800836c:	40012c00 	.word	0x40012c00
 8008370:	40014000 	.word	0x40014000
 8008374:	00010007 	.word	0x00010007

08008378 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008378:	b580      	push	{r7, lr}
 800837a:	b084      	sub	sp, #16
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	68db      	ldr	r3, [r3, #12]
 8008386:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	691b      	ldr	r3, [r3, #16]
 800838e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008390:	68bb      	ldr	r3, [r7, #8]
 8008392:	f003 0302 	and.w	r3, r3, #2
 8008396:	2b00      	cmp	r3, #0
 8008398:	d020      	beq.n	80083dc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	f003 0302 	and.w	r3, r3, #2
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d01b      	beq.n	80083dc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	f06f 0202 	mvn.w	r2, #2
 80083ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	2201      	movs	r2, #1
 80083b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	699b      	ldr	r3, [r3, #24]
 80083ba:	f003 0303 	and.w	r3, r3, #3
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d003      	beq.n	80083ca <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80083c2:	6878      	ldr	r0, [r7, #4]
 80083c4:	f000 f8e9 	bl	800859a <HAL_TIM_IC_CaptureCallback>
 80083c8:	e005      	b.n	80083d6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80083ca:	6878      	ldr	r0, [r7, #4]
 80083cc:	f000 f8db 	bl	8008586 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80083d0:	6878      	ldr	r0, [r7, #4]
 80083d2:	f000 f8ec 	bl	80085ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	2200      	movs	r2, #0
 80083da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80083dc:	68bb      	ldr	r3, [r7, #8]
 80083de:	f003 0304 	and.w	r3, r3, #4
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d020      	beq.n	8008428 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	f003 0304 	and.w	r3, r3, #4
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d01b      	beq.n	8008428 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	f06f 0204 	mvn.w	r2, #4
 80083f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	2202      	movs	r2, #2
 80083fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	699b      	ldr	r3, [r3, #24]
 8008406:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800840a:	2b00      	cmp	r3, #0
 800840c:	d003      	beq.n	8008416 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800840e:	6878      	ldr	r0, [r7, #4]
 8008410:	f000 f8c3 	bl	800859a <HAL_TIM_IC_CaptureCallback>
 8008414:	e005      	b.n	8008422 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008416:	6878      	ldr	r0, [r7, #4]
 8008418:	f000 f8b5 	bl	8008586 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800841c:	6878      	ldr	r0, [r7, #4]
 800841e:	f000 f8c6 	bl	80085ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	2200      	movs	r2, #0
 8008426:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008428:	68bb      	ldr	r3, [r7, #8]
 800842a:	f003 0308 	and.w	r3, r3, #8
 800842e:	2b00      	cmp	r3, #0
 8008430:	d020      	beq.n	8008474 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	f003 0308 	and.w	r3, r3, #8
 8008438:	2b00      	cmp	r3, #0
 800843a:	d01b      	beq.n	8008474 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	f06f 0208 	mvn.w	r2, #8
 8008444:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	2204      	movs	r2, #4
 800844a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	69db      	ldr	r3, [r3, #28]
 8008452:	f003 0303 	and.w	r3, r3, #3
 8008456:	2b00      	cmp	r3, #0
 8008458:	d003      	beq.n	8008462 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800845a:	6878      	ldr	r0, [r7, #4]
 800845c:	f000 f89d 	bl	800859a <HAL_TIM_IC_CaptureCallback>
 8008460:	e005      	b.n	800846e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008462:	6878      	ldr	r0, [r7, #4]
 8008464:	f000 f88f 	bl	8008586 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008468:	6878      	ldr	r0, [r7, #4]
 800846a:	f000 f8a0 	bl	80085ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	2200      	movs	r2, #0
 8008472:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008474:	68bb      	ldr	r3, [r7, #8]
 8008476:	f003 0310 	and.w	r3, r3, #16
 800847a:	2b00      	cmp	r3, #0
 800847c:	d020      	beq.n	80084c0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	f003 0310 	and.w	r3, r3, #16
 8008484:	2b00      	cmp	r3, #0
 8008486:	d01b      	beq.n	80084c0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	f06f 0210 	mvn.w	r2, #16
 8008490:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	2208      	movs	r2, #8
 8008496:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	69db      	ldr	r3, [r3, #28]
 800849e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d003      	beq.n	80084ae <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80084a6:	6878      	ldr	r0, [r7, #4]
 80084a8:	f000 f877 	bl	800859a <HAL_TIM_IC_CaptureCallback>
 80084ac:	e005      	b.n	80084ba <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80084ae:	6878      	ldr	r0, [r7, #4]
 80084b0:	f000 f869 	bl	8008586 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80084b4:	6878      	ldr	r0, [r7, #4]
 80084b6:	f000 f87a 	bl	80085ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	2200      	movs	r2, #0
 80084be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80084c0:	68bb      	ldr	r3, [r7, #8]
 80084c2:	f003 0301 	and.w	r3, r3, #1
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d00c      	beq.n	80084e4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	f003 0301 	and.w	r3, r3, #1
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d007      	beq.n	80084e4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	f06f 0201 	mvn.w	r2, #1
 80084dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80084de:	6878      	ldr	r0, [r7, #4]
 80084e0:	f7fb fc7e 	bl	8003de0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80084e4:	68bb      	ldr	r3, [r7, #8]
 80084e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d104      	bne.n	80084f8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80084ee:	68bb      	ldr	r3, [r7, #8]
 80084f0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d00c      	beq.n	8008512 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d007      	beq.n	8008512 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800850a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800850c:	6878      	ldr	r0, [r7, #4]
 800850e:	f000 f943 	bl	8008798 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8008512:	68bb      	ldr	r3, [r7, #8]
 8008514:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008518:	2b00      	cmp	r3, #0
 800851a:	d00c      	beq.n	8008536 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008522:	2b00      	cmp	r3, #0
 8008524:	d007      	beq.n	8008536 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800852e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008530:	6878      	ldr	r0, [r7, #4]
 8008532:	f000 f93b 	bl	80087ac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008536:	68bb      	ldr	r3, [r7, #8]
 8008538:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800853c:	2b00      	cmp	r3, #0
 800853e:	d00c      	beq.n	800855a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008546:	2b00      	cmp	r3, #0
 8008548:	d007      	beq.n	800855a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008552:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008554:	6878      	ldr	r0, [r7, #4]
 8008556:	f000 f834 	bl	80085c2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800855a:	68bb      	ldr	r3, [r7, #8]
 800855c:	f003 0320 	and.w	r3, r3, #32
 8008560:	2b00      	cmp	r3, #0
 8008562:	d00c      	beq.n	800857e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	f003 0320 	and.w	r3, r3, #32
 800856a:	2b00      	cmp	r3, #0
 800856c:	d007      	beq.n	800857e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	f06f 0220 	mvn.w	r2, #32
 8008576:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008578:	6878      	ldr	r0, [r7, #4]
 800857a:	f000 f903 	bl	8008784 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800857e:	bf00      	nop
 8008580:	3710      	adds	r7, #16
 8008582:	46bd      	mov	sp, r7
 8008584:	bd80      	pop	{r7, pc}

08008586 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008586:	b480      	push	{r7}
 8008588:	b083      	sub	sp, #12
 800858a:	af00      	add	r7, sp, #0
 800858c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800858e:	bf00      	nop
 8008590:	370c      	adds	r7, #12
 8008592:	46bd      	mov	sp, r7
 8008594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008598:	4770      	bx	lr

0800859a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800859a:	b480      	push	{r7}
 800859c:	b083      	sub	sp, #12
 800859e:	af00      	add	r7, sp, #0
 80085a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80085a2:	bf00      	nop
 80085a4:	370c      	adds	r7, #12
 80085a6:	46bd      	mov	sp, r7
 80085a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ac:	4770      	bx	lr

080085ae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80085ae:	b480      	push	{r7}
 80085b0:	b083      	sub	sp, #12
 80085b2:	af00      	add	r7, sp, #0
 80085b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80085b6:	bf00      	nop
 80085b8:	370c      	adds	r7, #12
 80085ba:	46bd      	mov	sp, r7
 80085bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c0:	4770      	bx	lr

080085c2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80085c2:	b480      	push	{r7}
 80085c4:	b083      	sub	sp, #12
 80085c6:	af00      	add	r7, sp, #0
 80085c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80085ca:	bf00      	nop
 80085cc:	370c      	adds	r7, #12
 80085ce:	46bd      	mov	sp, r7
 80085d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d4:	4770      	bx	lr
	...

080085d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80085d8:	b480      	push	{r7}
 80085da:	b085      	sub	sp, #20
 80085dc:	af00      	add	r7, sp, #0
 80085de:	6078      	str	r0, [r7, #4]
 80085e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	4a30      	ldr	r2, [pc, #192]	@ (80086ac <TIM_Base_SetConfig+0xd4>)
 80085ec:	4293      	cmp	r3, r2
 80085ee:	d003      	beq.n	80085f8 <TIM_Base_SetConfig+0x20>
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80085f6:	d108      	bne.n	800860a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80085fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008600:	683b      	ldr	r3, [r7, #0]
 8008602:	685b      	ldr	r3, [r3, #4]
 8008604:	68fa      	ldr	r2, [r7, #12]
 8008606:	4313      	orrs	r3, r2
 8008608:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	4a27      	ldr	r2, [pc, #156]	@ (80086ac <TIM_Base_SetConfig+0xd4>)
 800860e:	4293      	cmp	r3, r2
 8008610:	d00b      	beq.n	800862a <TIM_Base_SetConfig+0x52>
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008618:	d007      	beq.n	800862a <TIM_Base_SetConfig+0x52>
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	4a24      	ldr	r2, [pc, #144]	@ (80086b0 <TIM_Base_SetConfig+0xd8>)
 800861e:	4293      	cmp	r3, r2
 8008620:	d003      	beq.n	800862a <TIM_Base_SetConfig+0x52>
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	4a23      	ldr	r2, [pc, #140]	@ (80086b4 <TIM_Base_SetConfig+0xdc>)
 8008626:	4293      	cmp	r3, r2
 8008628:	d108      	bne.n	800863c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008630:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008632:	683b      	ldr	r3, [r7, #0]
 8008634:	68db      	ldr	r3, [r3, #12]
 8008636:	68fa      	ldr	r2, [r7, #12]
 8008638:	4313      	orrs	r3, r2
 800863a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008642:	683b      	ldr	r3, [r7, #0]
 8008644:	695b      	ldr	r3, [r3, #20]
 8008646:	4313      	orrs	r3, r2
 8008648:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	68fa      	ldr	r2, [r7, #12]
 800864e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008650:	683b      	ldr	r3, [r7, #0]
 8008652:	689a      	ldr	r2, [r3, #8]
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008658:	683b      	ldr	r3, [r7, #0]
 800865a:	681a      	ldr	r2, [r3, #0]
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	4a12      	ldr	r2, [pc, #72]	@ (80086ac <TIM_Base_SetConfig+0xd4>)
 8008664:	4293      	cmp	r3, r2
 8008666:	d007      	beq.n	8008678 <TIM_Base_SetConfig+0xa0>
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	4a11      	ldr	r2, [pc, #68]	@ (80086b0 <TIM_Base_SetConfig+0xd8>)
 800866c:	4293      	cmp	r3, r2
 800866e:	d003      	beq.n	8008678 <TIM_Base_SetConfig+0xa0>
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	4a10      	ldr	r2, [pc, #64]	@ (80086b4 <TIM_Base_SetConfig+0xdc>)
 8008674:	4293      	cmp	r3, r2
 8008676:	d103      	bne.n	8008680 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008678:	683b      	ldr	r3, [r7, #0]
 800867a:	691a      	ldr	r2, [r3, #16]
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	2201      	movs	r2, #1
 8008684:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	691b      	ldr	r3, [r3, #16]
 800868a:	f003 0301 	and.w	r3, r3, #1
 800868e:	2b01      	cmp	r3, #1
 8008690:	d105      	bne.n	800869e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	691b      	ldr	r3, [r3, #16]
 8008696:	f023 0201 	bic.w	r2, r3, #1
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	611a      	str	r2, [r3, #16]
  }
}
 800869e:	bf00      	nop
 80086a0:	3714      	adds	r7, #20
 80086a2:	46bd      	mov	sp, r7
 80086a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a8:	4770      	bx	lr
 80086aa:	bf00      	nop
 80086ac:	40012c00 	.word	0x40012c00
 80086b0:	40014000 	.word	0x40014000
 80086b4:	40014400 	.word	0x40014400

080086b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80086b8:	b480      	push	{r7}
 80086ba:	b085      	sub	sp, #20
 80086bc:	af00      	add	r7, sp, #0
 80086be:	6078      	str	r0, [r7, #4]
 80086c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80086c8:	2b01      	cmp	r3, #1
 80086ca:	d101      	bne.n	80086d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80086cc:	2302      	movs	r3, #2
 80086ce:	e04f      	b.n	8008770 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	2201      	movs	r2, #1
 80086d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	2202      	movs	r2, #2
 80086dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	685b      	ldr	r3, [r3, #4]
 80086e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	689b      	ldr	r3, [r3, #8]
 80086ee:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	4a21      	ldr	r2, [pc, #132]	@ (800877c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80086f6:	4293      	cmp	r3, r2
 80086f8:	d108      	bne.n	800870c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008700:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008702:	683b      	ldr	r3, [r7, #0]
 8008704:	685b      	ldr	r3, [r3, #4]
 8008706:	68fa      	ldr	r2, [r7, #12]
 8008708:	4313      	orrs	r3, r2
 800870a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008712:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008714:	683b      	ldr	r3, [r7, #0]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	68fa      	ldr	r2, [r7, #12]
 800871a:	4313      	orrs	r3, r2
 800871c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	68fa      	ldr	r2, [r7, #12]
 8008724:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	4a14      	ldr	r2, [pc, #80]	@ (800877c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800872c:	4293      	cmp	r3, r2
 800872e:	d009      	beq.n	8008744 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008738:	d004      	beq.n	8008744 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	4a10      	ldr	r2, [pc, #64]	@ (8008780 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008740:	4293      	cmp	r3, r2
 8008742:	d10c      	bne.n	800875e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008744:	68bb      	ldr	r3, [r7, #8]
 8008746:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800874a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800874c:	683b      	ldr	r3, [r7, #0]
 800874e:	689b      	ldr	r3, [r3, #8]
 8008750:	68ba      	ldr	r2, [r7, #8]
 8008752:	4313      	orrs	r3, r2
 8008754:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	68ba      	ldr	r2, [r7, #8]
 800875c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	2201      	movs	r2, #1
 8008762:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	2200      	movs	r2, #0
 800876a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800876e:	2300      	movs	r3, #0
}
 8008770:	4618      	mov	r0, r3
 8008772:	3714      	adds	r7, #20
 8008774:	46bd      	mov	sp, r7
 8008776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877a:	4770      	bx	lr
 800877c:	40012c00 	.word	0x40012c00
 8008780:	40014000 	.word	0x40014000

08008784 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008784:	b480      	push	{r7}
 8008786:	b083      	sub	sp, #12
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800878c:	bf00      	nop
 800878e:	370c      	adds	r7, #12
 8008790:	46bd      	mov	sp, r7
 8008792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008796:	4770      	bx	lr

08008798 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008798:	b480      	push	{r7}
 800879a:	b083      	sub	sp, #12
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80087a0:	bf00      	nop
 80087a2:	370c      	adds	r7, #12
 80087a4:	46bd      	mov	sp, r7
 80087a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087aa:	4770      	bx	lr

080087ac <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80087ac:	b480      	push	{r7}
 80087ae:	b083      	sub	sp, #12
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80087b4:	bf00      	nop
 80087b6:	370c      	adds	r7, #12
 80087b8:	46bd      	mov	sp, r7
 80087ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087be:	4770      	bx	lr

080087c0 <rand>:
 80087c0:	4b16      	ldr	r3, [pc, #88]	@ (800881c <rand+0x5c>)
 80087c2:	b510      	push	{r4, lr}
 80087c4:	681c      	ldr	r4, [r3, #0]
 80087c6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80087c8:	b9b3      	cbnz	r3, 80087f8 <rand+0x38>
 80087ca:	2018      	movs	r0, #24
 80087cc:	f000 fa20 	bl	8008c10 <malloc>
 80087d0:	4602      	mov	r2, r0
 80087d2:	6320      	str	r0, [r4, #48]	@ 0x30
 80087d4:	b920      	cbnz	r0, 80087e0 <rand+0x20>
 80087d6:	4b12      	ldr	r3, [pc, #72]	@ (8008820 <rand+0x60>)
 80087d8:	4812      	ldr	r0, [pc, #72]	@ (8008824 <rand+0x64>)
 80087da:	2152      	movs	r1, #82	@ 0x52
 80087dc:	f000 f9b0 	bl	8008b40 <__assert_func>
 80087e0:	4911      	ldr	r1, [pc, #68]	@ (8008828 <rand+0x68>)
 80087e2:	4b12      	ldr	r3, [pc, #72]	@ (800882c <rand+0x6c>)
 80087e4:	e9c0 1300 	strd	r1, r3, [r0]
 80087e8:	4b11      	ldr	r3, [pc, #68]	@ (8008830 <rand+0x70>)
 80087ea:	6083      	str	r3, [r0, #8]
 80087ec:	230b      	movs	r3, #11
 80087ee:	8183      	strh	r3, [r0, #12]
 80087f0:	2100      	movs	r1, #0
 80087f2:	2001      	movs	r0, #1
 80087f4:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80087f8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80087fa:	480e      	ldr	r0, [pc, #56]	@ (8008834 <rand+0x74>)
 80087fc:	690b      	ldr	r3, [r1, #16]
 80087fe:	694c      	ldr	r4, [r1, #20]
 8008800:	4a0d      	ldr	r2, [pc, #52]	@ (8008838 <rand+0x78>)
 8008802:	4358      	muls	r0, r3
 8008804:	fb02 0004 	mla	r0, r2, r4, r0
 8008808:	fba3 3202 	umull	r3, r2, r3, r2
 800880c:	3301      	adds	r3, #1
 800880e:	eb40 0002 	adc.w	r0, r0, r2
 8008812:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8008816:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800881a:	bd10      	pop	{r4, pc}
 800881c:	2000002c 	.word	0x2000002c
 8008820:	0800ae68 	.word	0x0800ae68
 8008824:	0800ae7f 	.word	0x0800ae7f
 8008828:	abcd330e 	.word	0xabcd330e
 800882c:	e66d1234 	.word	0xe66d1234
 8008830:	0005deec 	.word	0x0005deec
 8008834:	5851f42d 	.word	0x5851f42d
 8008838:	4c957f2d 	.word	0x4c957f2d

0800883c <std>:
 800883c:	2300      	movs	r3, #0
 800883e:	b510      	push	{r4, lr}
 8008840:	4604      	mov	r4, r0
 8008842:	e9c0 3300 	strd	r3, r3, [r0]
 8008846:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800884a:	6083      	str	r3, [r0, #8]
 800884c:	8181      	strh	r1, [r0, #12]
 800884e:	6643      	str	r3, [r0, #100]	@ 0x64
 8008850:	81c2      	strh	r2, [r0, #14]
 8008852:	6183      	str	r3, [r0, #24]
 8008854:	4619      	mov	r1, r3
 8008856:	2208      	movs	r2, #8
 8008858:	305c      	adds	r0, #92	@ 0x5c
 800885a:	f000 f8f4 	bl	8008a46 <memset>
 800885e:	4b0d      	ldr	r3, [pc, #52]	@ (8008894 <std+0x58>)
 8008860:	6263      	str	r3, [r4, #36]	@ 0x24
 8008862:	4b0d      	ldr	r3, [pc, #52]	@ (8008898 <std+0x5c>)
 8008864:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008866:	4b0d      	ldr	r3, [pc, #52]	@ (800889c <std+0x60>)
 8008868:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800886a:	4b0d      	ldr	r3, [pc, #52]	@ (80088a0 <std+0x64>)
 800886c:	6323      	str	r3, [r4, #48]	@ 0x30
 800886e:	4b0d      	ldr	r3, [pc, #52]	@ (80088a4 <std+0x68>)
 8008870:	6224      	str	r4, [r4, #32]
 8008872:	429c      	cmp	r4, r3
 8008874:	d006      	beq.n	8008884 <std+0x48>
 8008876:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800887a:	4294      	cmp	r4, r2
 800887c:	d002      	beq.n	8008884 <std+0x48>
 800887e:	33d0      	adds	r3, #208	@ 0xd0
 8008880:	429c      	cmp	r4, r3
 8008882:	d105      	bne.n	8008890 <std+0x54>
 8008884:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008888:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800888c:	f000 b954 	b.w	8008b38 <__retarget_lock_init_recursive>
 8008890:	bd10      	pop	{r4, pc}
 8008892:	bf00      	nop
 8008894:	080089c1 	.word	0x080089c1
 8008898:	080089e3 	.word	0x080089e3
 800889c:	08008a1b 	.word	0x08008a1b
 80088a0:	08008a3f 	.word	0x08008a3f
 80088a4:	20004cc8 	.word	0x20004cc8

080088a8 <stdio_exit_handler>:
 80088a8:	4a02      	ldr	r2, [pc, #8]	@ (80088b4 <stdio_exit_handler+0xc>)
 80088aa:	4903      	ldr	r1, [pc, #12]	@ (80088b8 <stdio_exit_handler+0x10>)
 80088ac:	4803      	ldr	r0, [pc, #12]	@ (80088bc <stdio_exit_handler+0x14>)
 80088ae:	f000 b869 	b.w	8008984 <_fwalk_sglue>
 80088b2:	bf00      	nop
 80088b4:	20000020 	.word	0x20000020
 80088b8:	08008e85 	.word	0x08008e85
 80088bc:	20000030 	.word	0x20000030

080088c0 <cleanup_stdio>:
 80088c0:	6841      	ldr	r1, [r0, #4]
 80088c2:	4b0c      	ldr	r3, [pc, #48]	@ (80088f4 <cleanup_stdio+0x34>)
 80088c4:	4299      	cmp	r1, r3
 80088c6:	b510      	push	{r4, lr}
 80088c8:	4604      	mov	r4, r0
 80088ca:	d001      	beq.n	80088d0 <cleanup_stdio+0x10>
 80088cc:	f000 fada 	bl	8008e84 <_fflush_r>
 80088d0:	68a1      	ldr	r1, [r4, #8]
 80088d2:	4b09      	ldr	r3, [pc, #36]	@ (80088f8 <cleanup_stdio+0x38>)
 80088d4:	4299      	cmp	r1, r3
 80088d6:	d002      	beq.n	80088de <cleanup_stdio+0x1e>
 80088d8:	4620      	mov	r0, r4
 80088da:	f000 fad3 	bl	8008e84 <_fflush_r>
 80088de:	68e1      	ldr	r1, [r4, #12]
 80088e0:	4b06      	ldr	r3, [pc, #24]	@ (80088fc <cleanup_stdio+0x3c>)
 80088e2:	4299      	cmp	r1, r3
 80088e4:	d004      	beq.n	80088f0 <cleanup_stdio+0x30>
 80088e6:	4620      	mov	r0, r4
 80088e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80088ec:	f000 baca 	b.w	8008e84 <_fflush_r>
 80088f0:	bd10      	pop	{r4, pc}
 80088f2:	bf00      	nop
 80088f4:	20004cc8 	.word	0x20004cc8
 80088f8:	20004d30 	.word	0x20004d30
 80088fc:	20004d98 	.word	0x20004d98

08008900 <global_stdio_init.part.0>:
 8008900:	b510      	push	{r4, lr}
 8008902:	4b0b      	ldr	r3, [pc, #44]	@ (8008930 <global_stdio_init.part.0+0x30>)
 8008904:	4c0b      	ldr	r4, [pc, #44]	@ (8008934 <global_stdio_init.part.0+0x34>)
 8008906:	4a0c      	ldr	r2, [pc, #48]	@ (8008938 <global_stdio_init.part.0+0x38>)
 8008908:	601a      	str	r2, [r3, #0]
 800890a:	4620      	mov	r0, r4
 800890c:	2200      	movs	r2, #0
 800890e:	2104      	movs	r1, #4
 8008910:	f7ff ff94 	bl	800883c <std>
 8008914:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008918:	2201      	movs	r2, #1
 800891a:	2109      	movs	r1, #9
 800891c:	f7ff ff8e 	bl	800883c <std>
 8008920:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008924:	2202      	movs	r2, #2
 8008926:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800892a:	2112      	movs	r1, #18
 800892c:	f7ff bf86 	b.w	800883c <std>
 8008930:	20004e00 	.word	0x20004e00
 8008934:	20004cc8 	.word	0x20004cc8
 8008938:	080088a9 	.word	0x080088a9

0800893c <__sfp_lock_acquire>:
 800893c:	4801      	ldr	r0, [pc, #4]	@ (8008944 <__sfp_lock_acquire+0x8>)
 800893e:	f000 b8fc 	b.w	8008b3a <__retarget_lock_acquire_recursive>
 8008942:	bf00      	nop
 8008944:	20004e09 	.word	0x20004e09

08008948 <__sfp_lock_release>:
 8008948:	4801      	ldr	r0, [pc, #4]	@ (8008950 <__sfp_lock_release+0x8>)
 800894a:	f000 b8f7 	b.w	8008b3c <__retarget_lock_release_recursive>
 800894e:	bf00      	nop
 8008950:	20004e09 	.word	0x20004e09

08008954 <__sinit>:
 8008954:	b510      	push	{r4, lr}
 8008956:	4604      	mov	r4, r0
 8008958:	f7ff fff0 	bl	800893c <__sfp_lock_acquire>
 800895c:	6a23      	ldr	r3, [r4, #32]
 800895e:	b11b      	cbz	r3, 8008968 <__sinit+0x14>
 8008960:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008964:	f7ff bff0 	b.w	8008948 <__sfp_lock_release>
 8008968:	4b04      	ldr	r3, [pc, #16]	@ (800897c <__sinit+0x28>)
 800896a:	6223      	str	r3, [r4, #32]
 800896c:	4b04      	ldr	r3, [pc, #16]	@ (8008980 <__sinit+0x2c>)
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	2b00      	cmp	r3, #0
 8008972:	d1f5      	bne.n	8008960 <__sinit+0xc>
 8008974:	f7ff ffc4 	bl	8008900 <global_stdio_init.part.0>
 8008978:	e7f2      	b.n	8008960 <__sinit+0xc>
 800897a:	bf00      	nop
 800897c:	080088c1 	.word	0x080088c1
 8008980:	20004e00 	.word	0x20004e00

08008984 <_fwalk_sglue>:
 8008984:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008988:	4607      	mov	r7, r0
 800898a:	4688      	mov	r8, r1
 800898c:	4614      	mov	r4, r2
 800898e:	2600      	movs	r6, #0
 8008990:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008994:	f1b9 0901 	subs.w	r9, r9, #1
 8008998:	d505      	bpl.n	80089a6 <_fwalk_sglue+0x22>
 800899a:	6824      	ldr	r4, [r4, #0]
 800899c:	2c00      	cmp	r4, #0
 800899e:	d1f7      	bne.n	8008990 <_fwalk_sglue+0xc>
 80089a0:	4630      	mov	r0, r6
 80089a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80089a6:	89ab      	ldrh	r3, [r5, #12]
 80089a8:	2b01      	cmp	r3, #1
 80089aa:	d907      	bls.n	80089bc <_fwalk_sglue+0x38>
 80089ac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80089b0:	3301      	adds	r3, #1
 80089b2:	d003      	beq.n	80089bc <_fwalk_sglue+0x38>
 80089b4:	4629      	mov	r1, r5
 80089b6:	4638      	mov	r0, r7
 80089b8:	47c0      	blx	r8
 80089ba:	4306      	orrs	r6, r0
 80089bc:	3568      	adds	r5, #104	@ 0x68
 80089be:	e7e9      	b.n	8008994 <_fwalk_sglue+0x10>

080089c0 <__sread>:
 80089c0:	b510      	push	{r4, lr}
 80089c2:	460c      	mov	r4, r1
 80089c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089c8:	f000 f868 	bl	8008a9c <_read_r>
 80089cc:	2800      	cmp	r0, #0
 80089ce:	bfab      	itete	ge
 80089d0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80089d2:	89a3      	ldrhlt	r3, [r4, #12]
 80089d4:	181b      	addge	r3, r3, r0
 80089d6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80089da:	bfac      	ite	ge
 80089dc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80089de:	81a3      	strhlt	r3, [r4, #12]
 80089e0:	bd10      	pop	{r4, pc}

080089e2 <__swrite>:
 80089e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089e6:	461f      	mov	r7, r3
 80089e8:	898b      	ldrh	r3, [r1, #12]
 80089ea:	05db      	lsls	r3, r3, #23
 80089ec:	4605      	mov	r5, r0
 80089ee:	460c      	mov	r4, r1
 80089f0:	4616      	mov	r6, r2
 80089f2:	d505      	bpl.n	8008a00 <__swrite+0x1e>
 80089f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089f8:	2302      	movs	r3, #2
 80089fa:	2200      	movs	r2, #0
 80089fc:	f000 f83c 	bl	8008a78 <_lseek_r>
 8008a00:	89a3      	ldrh	r3, [r4, #12]
 8008a02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008a06:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008a0a:	81a3      	strh	r3, [r4, #12]
 8008a0c:	4632      	mov	r2, r6
 8008a0e:	463b      	mov	r3, r7
 8008a10:	4628      	mov	r0, r5
 8008a12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008a16:	f000 b853 	b.w	8008ac0 <_write_r>

08008a1a <__sseek>:
 8008a1a:	b510      	push	{r4, lr}
 8008a1c:	460c      	mov	r4, r1
 8008a1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a22:	f000 f829 	bl	8008a78 <_lseek_r>
 8008a26:	1c43      	adds	r3, r0, #1
 8008a28:	89a3      	ldrh	r3, [r4, #12]
 8008a2a:	bf15      	itete	ne
 8008a2c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008a2e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008a32:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008a36:	81a3      	strheq	r3, [r4, #12]
 8008a38:	bf18      	it	ne
 8008a3a:	81a3      	strhne	r3, [r4, #12]
 8008a3c:	bd10      	pop	{r4, pc}

08008a3e <__sclose>:
 8008a3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a42:	f000 b809 	b.w	8008a58 <_close_r>

08008a46 <memset>:
 8008a46:	4402      	add	r2, r0
 8008a48:	4603      	mov	r3, r0
 8008a4a:	4293      	cmp	r3, r2
 8008a4c:	d100      	bne.n	8008a50 <memset+0xa>
 8008a4e:	4770      	bx	lr
 8008a50:	f803 1b01 	strb.w	r1, [r3], #1
 8008a54:	e7f9      	b.n	8008a4a <memset+0x4>
	...

08008a58 <_close_r>:
 8008a58:	b538      	push	{r3, r4, r5, lr}
 8008a5a:	4d06      	ldr	r5, [pc, #24]	@ (8008a74 <_close_r+0x1c>)
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	4604      	mov	r4, r0
 8008a60:	4608      	mov	r0, r1
 8008a62:	602b      	str	r3, [r5, #0]
 8008a64:	f7fb fd58 	bl	8004518 <_close>
 8008a68:	1c43      	adds	r3, r0, #1
 8008a6a:	d102      	bne.n	8008a72 <_close_r+0x1a>
 8008a6c:	682b      	ldr	r3, [r5, #0]
 8008a6e:	b103      	cbz	r3, 8008a72 <_close_r+0x1a>
 8008a70:	6023      	str	r3, [r4, #0]
 8008a72:	bd38      	pop	{r3, r4, r5, pc}
 8008a74:	20004e04 	.word	0x20004e04

08008a78 <_lseek_r>:
 8008a78:	b538      	push	{r3, r4, r5, lr}
 8008a7a:	4d07      	ldr	r5, [pc, #28]	@ (8008a98 <_lseek_r+0x20>)
 8008a7c:	4604      	mov	r4, r0
 8008a7e:	4608      	mov	r0, r1
 8008a80:	4611      	mov	r1, r2
 8008a82:	2200      	movs	r2, #0
 8008a84:	602a      	str	r2, [r5, #0]
 8008a86:	461a      	mov	r2, r3
 8008a88:	f7fb fd6d 	bl	8004566 <_lseek>
 8008a8c:	1c43      	adds	r3, r0, #1
 8008a8e:	d102      	bne.n	8008a96 <_lseek_r+0x1e>
 8008a90:	682b      	ldr	r3, [r5, #0]
 8008a92:	b103      	cbz	r3, 8008a96 <_lseek_r+0x1e>
 8008a94:	6023      	str	r3, [r4, #0]
 8008a96:	bd38      	pop	{r3, r4, r5, pc}
 8008a98:	20004e04 	.word	0x20004e04

08008a9c <_read_r>:
 8008a9c:	b538      	push	{r3, r4, r5, lr}
 8008a9e:	4d07      	ldr	r5, [pc, #28]	@ (8008abc <_read_r+0x20>)
 8008aa0:	4604      	mov	r4, r0
 8008aa2:	4608      	mov	r0, r1
 8008aa4:	4611      	mov	r1, r2
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	602a      	str	r2, [r5, #0]
 8008aaa:	461a      	mov	r2, r3
 8008aac:	f7fb fcfb 	bl	80044a6 <_read>
 8008ab0:	1c43      	adds	r3, r0, #1
 8008ab2:	d102      	bne.n	8008aba <_read_r+0x1e>
 8008ab4:	682b      	ldr	r3, [r5, #0]
 8008ab6:	b103      	cbz	r3, 8008aba <_read_r+0x1e>
 8008ab8:	6023      	str	r3, [r4, #0]
 8008aba:	bd38      	pop	{r3, r4, r5, pc}
 8008abc:	20004e04 	.word	0x20004e04

08008ac0 <_write_r>:
 8008ac0:	b538      	push	{r3, r4, r5, lr}
 8008ac2:	4d07      	ldr	r5, [pc, #28]	@ (8008ae0 <_write_r+0x20>)
 8008ac4:	4604      	mov	r4, r0
 8008ac6:	4608      	mov	r0, r1
 8008ac8:	4611      	mov	r1, r2
 8008aca:	2200      	movs	r2, #0
 8008acc:	602a      	str	r2, [r5, #0]
 8008ace:	461a      	mov	r2, r3
 8008ad0:	f7fb fd06 	bl	80044e0 <_write>
 8008ad4:	1c43      	adds	r3, r0, #1
 8008ad6:	d102      	bne.n	8008ade <_write_r+0x1e>
 8008ad8:	682b      	ldr	r3, [r5, #0]
 8008ada:	b103      	cbz	r3, 8008ade <_write_r+0x1e>
 8008adc:	6023      	str	r3, [r4, #0]
 8008ade:	bd38      	pop	{r3, r4, r5, pc}
 8008ae0:	20004e04 	.word	0x20004e04

08008ae4 <__errno>:
 8008ae4:	4b01      	ldr	r3, [pc, #4]	@ (8008aec <__errno+0x8>)
 8008ae6:	6818      	ldr	r0, [r3, #0]
 8008ae8:	4770      	bx	lr
 8008aea:	bf00      	nop
 8008aec:	2000002c 	.word	0x2000002c

08008af0 <__libc_init_array>:
 8008af0:	b570      	push	{r4, r5, r6, lr}
 8008af2:	4d0d      	ldr	r5, [pc, #52]	@ (8008b28 <__libc_init_array+0x38>)
 8008af4:	4c0d      	ldr	r4, [pc, #52]	@ (8008b2c <__libc_init_array+0x3c>)
 8008af6:	1b64      	subs	r4, r4, r5
 8008af8:	10a4      	asrs	r4, r4, #2
 8008afa:	2600      	movs	r6, #0
 8008afc:	42a6      	cmp	r6, r4
 8008afe:	d109      	bne.n	8008b14 <__libc_init_array+0x24>
 8008b00:	4d0b      	ldr	r5, [pc, #44]	@ (8008b30 <__libc_init_array+0x40>)
 8008b02:	4c0c      	ldr	r4, [pc, #48]	@ (8008b34 <__libc_init_array+0x44>)
 8008b04:	f001 fdc4 	bl	800a690 <_init>
 8008b08:	1b64      	subs	r4, r4, r5
 8008b0a:	10a4      	asrs	r4, r4, #2
 8008b0c:	2600      	movs	r6, #0
 8008b0e:	42a6      	cmp	r6, r4
 8008b10:	d105      	bne.n	8008b1e <__libc_init_array+0x2e>
 8008b12:	bd70      	pop	{r4, r5, r6, pc}
 8008b14:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b18:	4798      	blx	r3
 8008b1a:	3601      	adds	r6, #1
 8008b1c:	e7ee      	b.n	8008afc <__libc_init_array+0xc>
 8008b1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b22:	4798      	blx	r3
 8008b24:	3601      	adds	r6, #1
 8008b26:	e7f2      	b.n	8008b0e <__libc_init_array+0x1e>
 8008b28:	0800af90 	.word	0x0800af90
 8008b2c:	0800af90 	.word	0x0800af90
 8008b30:	0800af90 	.word	0x0800af90
 8008b34:	0800af94 	.word	0x0800af94

08008b38 <__retarget_lock_init_recursive>:
 8008b38:	4770      	bx	lr

08008b3a <__retarget_lock_acquire_recursive>:
 8008b3a:	4770      	bx	lr

08008b3c <__retarget_lock_release_recursive>:
 8008b3c:	4770      	bx	lr
	...

08008b40 <__assert_func>:
 8008b40:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008b42:	4614      	mov	r4, r2
 8008b44:	461a      	mov	r2, r3
 8008b46:	4b09      	ldr	r3, [pc, #36]	@ (8008b6c <__assert_func+0x2c>)
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	4605      	mov	r5, r0
 8008b4c:	68d8      	ldr	r0, [r3, #12]
 8008b4e:	b14c      	cbz	r4, 8008b64 <__assert_func+0x24>
 8008b50:	4b07      	ldr	r3, [pc, #28]	@ (8008b70 <__assert_func+0x30>)
 8008b52:	9100      	str	r1, [sp, #0]
 8008b54:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008b58:	4906      	ldr	r1, [pc, #24]	@ (8008b74 <__assert_func+0x34>)
 8008b5a:	462b      	mov	r3, r5
 8008b5c:	f000 f9ba 	bl	8008ed4 <fiprintf>
 8008b60:	f000 f9da 	bl	8008f18 <abort>
 8008b64:	4b04      	ldr	r3, [pc, #16]	@ (8008b78 <__assert_func+0x38>)
 8008b66:	461c      	mov	r4, r3
 8008b68:	e7f3      	b.n	8008b52 <__assert_func+0x12>
 8008b6a:	bf00      	nop
 8008b6c:	2000002c 	.word	0x2000002c
 8008b70:	0800aed7 	.word	0x0800aed7
 8008b74:	0800aee4 	.word	0x0800aee4
 8008b78:	0800af12 	.word	0x0800af12

08008b7c <_free_r>:
 8008b7c:	b538      	push	{r3, r4, r5, lr}
 8008b7e:	4605      	mov	r5, r0
 8008b80:	2900      	cmp	r1, #0
 8008b82:	d041      	beq.n	8008c08 <_free_r+0x8c>
 8008b84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b88:	1f0c      	subs	r4, r1, #4
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	bfb8      	it	lt
 8008b8e:	18e4      	addlt	r4, r4, r3
 8008b90:	f000 f8e8 	bl	8008d64 <__malloc_lock>
 8008b94:	4a1d      	ldr	r2, [pc, #116]	@ (8008c0c <_free_r+0x90>)
 8008b96:	6813      	ldr	r3, [r2, #0]
 8008b98:	b933      	cbnz	r3, 8008ba8 <_free_r+0x2c>
 8008b9a:	6063      	str	r3, [r4, #4]
 8008b9c:	6014      	str	r4, [r2, #0]
 8008b9e:	4628      	mov	r0, r5
 8008ba0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008ba4:	f000 b8e4 	b.w	8008d70 <__malloc_unlock>
 8008ba8:	42a3      	cmp	r3, r4
 8008baa:	d908      	bls.n	8008bbe <_free_r+0x42>
 8008bac:	6820      	ldr	r0, [r4, #0]
 8008bae:	1821      	adds	r1, r4, r0
 8008bb0:	428b      	cmp	r3, r1
 8008bb2:	bf01      	itttt	eq
 8008bb4:	6819      	ldreq	r1, [r3, #0]
 8008bb6:	685b      	ldreq	r3, [r3, #4]
 8008bb8:	1809      	addeq	r1, r1, r0
 8008bba:	6021      	streq	r1, [r4, #0]
 8008bbc:	e7ed      	b.n	8008b9a <_free_r+0x1e>
 8008bbe:	461a      	mov	r2, r3
 8008bc0:	685b      	ldr	r3, [r3, #4]
 8008bc2:	b10b      	cbz	r3, 8008bc8 <_free_r+0x4c>
 8008bc4:	42a3      	cmp	r3, r4
 8008bc6:	d9fa      	bls.n	8008bbe <_free_r+0x42>
 8008bc8:	6811      	ldr	r1, [r2, #0]
 8008bca:	1850      	adds	r0, r2, r1
 8008bcc:	42a0      	cmp	r0, r4
 8008bce:	d10b      	bne.n	8008be8 <_free_r+0x6c>
 8008bd0:	6820      	ldr	r0, [r4, #0]
 8008bd2:	4401      	add	r1, r0
 8008bd4:	1850      	adds	r0, r2, r1
 8008bd6:	4283      	cmp	r3, r0
 8008bd8:	6011      	str	r1, [r2, #0]
 8008bda:	d1e0      	bne.n	8008b9e <_free_r+0x22>
 8008bdc:	6818      	ldr	r0, [r3, #0]
 8008bde:	685b      	ldr	r3, [r3, #4]
 8008be0:	6053      	str	r3, [r2, #4]
 8008be2:	4408      	add	r0, r1
 8008be4:	6010      	str	r0, [r2, #0]
 8008be6:	e7da      	b.n	8008b9e <_free_r+0x22>
 8008be8:	d902      	bls.n	8008bf0 <_free_r+0x74>
 8008bea:	230c      	movs	r3, #12
 8008bec:	602b      	str	r3, [r5, #0]
 8008bee:	e7d6      	b.n	8008b9e <_free_r+0x22>
 8008bf0:	6820      	ldr	r0, [r4, #0]
 8008bf2:	1821      	adds	r1, r4, r0
 8008bf4:	428b      	cmp	r3, r1
 8008bf6:	bf04      	itt	eq
 8008bf8:	6819      	ldreq	r1, [r3, #0]
 8008bfa:	685b      	ldreq	r3, [r3, #4]
 8008bfc:	6063      	str	r3, [r4, #4]
 8008bfe:	bf04      	itt	eq
 8008c00:	1809      	addeq	r1, r1, r0
 8008c02:	6021      	streq	r1, [r4, #0]
 8008c04:	6054      	str	r4, [r2, #4]
 8008c06:	e7ca      	b.n	8008b9e <_free_r+0x22>
 8008c08:	bd38      	pop	{r3, r4, r5, pc}
 8008c0a:	bf00      	nop
 8008c0c:	20004e10 	.word	0x20004e10

08008c10 <malloc>:
 8008c10:	4b02      	ldr	r3, [pc, #8]	@ (8008c1c <malloc+0xc>)
 8008c12:	4601      	mov	r1, r0
 8008c14:	6818      	ldr	r0, [r3, #0]
 8008c16:	f000 b825 	b.w	8008c64 <_malloc_r>
 8008c1a:	bf00      	nop
 8008c1c:	2000002c 	.word	0x2000002c

08008c20 <sbrk_aligned>:
 8008c20:	b570      	push	{r4, r5, r6, lr}
 8008c22:	4e0f      	ldr	r6, [pc, #60]	@ (8008c60 <sbrk_aligned+0x40>)
 8008c24:	460c      	mov	r4, r1
 8008c26:	6831      	ldr	r1, [r6, #0]
 8008c28:	4605      	mov	r5, r0
 8008c2a:	b911      	cbnz	r1, 8008c32 <sbrk_aligned+0x12>
 8008c2c:	f000 f964 	bl	8008ef8 <_sbrk_r>
 8008c30:	6030      	str	r0, [r6, #0]
 8008c32:	4621      	mov	r1, r4
 8008c34:	4628      	mov	r0, r5
 8008c36:	f000 f95f 	bl	8008ef8 <_sbrk_r>
 8008c3a:	1c43      	adds	r3, r0, #1
 8008c3c:	d103      	bne.n	8008c46 <sbrk_aligned+0x26>
 8008c3e:	f04f 34ff 	mov.w	r4, #4294967295
 8008c42:	4620      	mov	r0, r4
 8008c44:	bd70      	pop	{r4, r5, r6, pc}
 8008c46:	1cc4      	adds	r4, r0, #3
 8008c48:	f024 0403 	bic.w	r4, r4, #3
 8008c4c:	42a0      	cmp	r0, r4
 8008c4e:	d0f8      	beq.n	8008c42 <sbrk_aligned+0x22>
 8008c50:	1a21      	subs	r1, r4, r0
 8008c52:	4628      	mov	r0, r5
 8008c54:	f000 f950 	bl	8008ef8 <_sbrk_r>
 8008c58:	3001      	adds	r0, #1
 8008c5a:	d1f2      	bne.n	8008c42 <sbrk_aligned+0x22>
 8008c5c:	e7ef      	b.n	8008c3e <sbrk_aligned+0x1e>
 8008c5e:	bf00      	nop
 8008c60:	20004e0c 	.word	0x20004e0c

08008c64 <_malloc_r>:
 8008c64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c68:	1ccd      	adds	r5, r1, #3
 8008c6a:	f025 0503 	bic.w	r5, r5, #3
 8008c6e:	3508      	adds	r5, #8
 8008c70:	2d0c      	cmp	r5, #12
 8008c72:	bf38      	it	cc
 8008c74:	250c      	movcc	r5, #12
 8008c76:	2d00      	cmp	r5, #0
 8008c78:	4606      	mov	r6, r0
 8008c7a:	db01      	blt.n	8008c80 <_malloc_r+0x1c>
 8008c7c:	42a9      	cmp	r1, r5
 8008c7e:	d904      	bls.n	8008c8a <_malloc_r+0x26>
 8008c80:	230c      	movs	r3, #12
 8008c82:	6033      	str	r3, [r6, #0]
 8008c84:	2000      	movs	r0, #0
 8008c86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c8a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008d60 <_malloc_r+0xfc>
 8008c8e:	f000 f869 	bl	8008d64 <__malloc_lock>
 8008c92:	f8d8 3000 	ldr.w	r3, [r8]
 8008c96:	461c      	mov	r4, r3
 8008c98:	bb44      	cbnz	r4, 8008cec <_malloc_r+0x88>
 8008c9a:	4629      	mov	r1, r5
 8008c9c:	4630      	mov	r0, r6
 8008c9e:	f7ff ffbf 	bl	8008c20 <sbrk_aligned>
 8008ca2:	1c43      	adds	r3, r0, #1
 8008ca4:	4604      	mov	r4, r0
 8008ca6:	d158      	bne.n	8008d5a <_malloc_r+0xf6>
 8008ca8:	f8d8 4000 	ldr.w	r4, [r8]
 8008cac:	4627      	mov	r7, r4
 8008cae:	2f00      	cmp	r7, #0
 8008cb0:	d143      	bne.n	8008d3a <_malloc_r+0xd6>
 8008cb2:	2c00      	cmp	r4, #0
 8008cb4:	d04b      	beq.n	8008d4e <_malloc_r+0xea>
 8008cb6:	6823      	ldr	r3, [r4, #0]
 8008cb8:	4639      	mov	r1, r7
 8008cba:	4630      	mov	r0, r6
 8008cbc:	eb04 0903 	add.w	r9, r4, r3
 8008cc0:	f000 f91a 	bl	8008ef8 <_sbrk_r>
 8008cc4:	4581      	cmp	r9, r0
 8008cc6:	d142      	bne.n	8008d4e <_malloc_r+0xea>
 8008cc8:	6821      	ldr	r1, [r4, #0]
 8008cca:	1a6d      	subs	r5, r5, r1
 8008ccc:	4629      	mov	r1, r5
 8008cce:	4630      	mov	r0, r6
 8008cd0:	f7ff ffa6 	bl	8008c20 <sbrk_aligned>
 8008cd4:	3001      	adds	r0, #1
 8008cd6:	d03a      	beq.n	8008d4e <_malloc_r+0xea>
 8008cd8:	6823      	ldr	r3, [r4, #0]
 8008cda:	442b      	add	r3, r5
 8008cdc:	6023      	str	r3, [r4, #0]
 8008cde:	f8d8 3000 	ldr.w	r3, [r8]
 8008ce2:	685a      	ldr	r2, [r3, #4]
 8008ce4:	bb62      	cbnz	r2, 8008d40 <_malloc_r+0xdc>
 8008ce6:	f8c8 7000 	str.w	r7, [r8]
 8008cea:	e00f      	b.n	8008d0c <_malloc_r+0xa8>
 8008cec:	6822      	ldr	r2, [r4, #0]
 8008cee:	1b52      	subs	r2, r2, r5
 8008cf0:	d420      	bmi.n	8008d34 <_malloc_r+0xd0>
 8008cf2:	2a0b      	cmp	r2, #11
 8008cf4:	d917      	bls.n	8008d26 <_malloc_r+0xc2>
 8008cf6:	1961      	adds	r1, r4, r5
 8008cf8:	42a3      	cmp	r3, r4
 8008cfa:	6025      	str	r5, [r4, #0]
 8008cfc:	bf18      	it	ne
 8008cfe:	6059      	strne	r1, [r3, #4]
 8008d00:	6863      	ldr	r3, [r4, #4]
 8008d02:	bf08      	it	eq
 8008d04:	f8c8 1000 	streq.w	r1, [r8]
 8008d08:	5162      	str	r2, [r4, r5]
 8008d0a:	604b      	str	r3, [r1, #4]
 8008d0c:	4630      	mov	r0, r6
 8008d0e:	f000 f82f 	bl	8008d70 <__malloc_unlock>
 8008d12:	f104 000b 	add.w	r0, r4, #11
 8008d16:	1d23      	adds	r3, r4, #4
 8008d18:	f020 0007 	bic.w	r0, r0, #7
 8008d1c:	1ac2      	subs	r2, r0, r3
 8008d1e:	bf1c      	itt	ne
 8008d20:	1a1b      	subne	r3, r3, r0
 8008d22:	50a3      	strne	r3, [r4, r2]
 8008d24:	e7af      	b.n	8008c86 <_malloc_r+0x22>
 8008d26:	6862      	ldr	r2, [r4, #4]
 8008d28:	42a3      	cmp	r3, r4
 8008d2a:	bf0c      	ite	eq
 8008d2c:	f8c8 2000 	streq.w	r2, [r8]
 8008d30:	605a      	strne	r2, [r3, #4]
 8008d32:	e7eb      	b.n	8008d0c <_malloc_r+0xa8>
 8008d34:	4623      	mov	r3, r4
 8008d36:	6864      	ldr	r4, [r4, #4]
 8008d38:	e7ae      	b.n	8008c98 <_malloc_r+0x34>
 8008d3a:	463c      	mov	r4, r7
 8008d3c:	687f      	ldr	r7, [r7, #4]
 8008d3e:	e7b6      	b.n	8008cae <_malloc_r+0x4a>
 8008d40:	461a      	mov	r2, r3
 8008d42:	685b      	ldr	r3, [r3, #4]
 8008d44:	42a3      	cmp	r3, r4
 8008d46:	d1fb      	bne.n	8008d40 <_malloc_r+0xdc>
 8008d48:	2300      	movs	r3, #0
 8008d4a:	6053      	str	r3, [r2, #4]
 8008d4c:	e7de      	b.n	8008d0c <_malloc_r+0xa8>
 8008d4e:	230c      	movs	r3, #12
 8008d50:	6033      	str	r3, [r6, #0]
 8008d52:	4630      	mov	r0, r6
 8008d54:	f000 f80c 	bl	8008d70 <__malloc_unlock>
 8008d58:	e794      	b.n	8008c84 <_malloc_r+0x20>
 8008d5a:	6005      	str	r5, [r0, #0]
 8008d5c:	e7d6      	b.n	8008d0c <_malloc_r+0xa8>
 8008d5e:	bf00      	nop
 8008d60:	20004e10 	.word	0x20004e10

08008d64 <__malloc_lock>:
 8008d64:	4801      	ldr	r0, [pc, #4]	@ (8008d6c <__malloc_lock+0x8>)
 8008d66:	f7ff bee8 	b.w	8008b3a <__retarget_lock_acquire_recursive>
 8008d6a:	bf00      	nop
 8008d6c:	20004e08 	.word	0x20004e08

08008d70 <__malloc_unlock>:
 8008d70:	4801      	ldr	r0, [pc, #4]	@ (8008d78 <__malloc_unlock+0x8>)
 8008d72:	f7ff bee3 	b.w	8008b3c <__retarget_lock_release_recursive>
 8008d76:	bf00      	nop
 8008d78:	20004e08 	.word	0x20004e08

08008d7c <__sflush_r>:
 8008d7c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008d80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d84:	0716      	lsls	r6, r2, #28
 8008d86:	4605      	mov	r5, r0
 8008d88:	460c      	mov	r4, r1
 8008d8a:	d454      	bmi.n	8008e36 <__sflush_r+0xba>
 8008d8c:	684b      	ldr	r3, [r1, #4]
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	dc02      	bgt.n	8008d98 <__sflush_r+0x1c>
 8008d92:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	dd48      	ble.n	8008e2a <__sflush_r+0xae>
 8008d98:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008d9a:	2e00      	cmp	r6, #0
 8008d9c:	d045      	beq.n	8008e2a <__sflush_r+0xae>
 8008d9e:	2300      	movs	r3, #0
 8008da0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008da4:	682f      	ldr	r7, [r5, #0]
 8008da6:	6a21      	ldr	r1, [r4, #32]
 8008da8:	602b      	str	r3, [r5, #0]
 8008daa:	d030      	beq.n	8008e0e <__sflush_r+0x92>
 8008dac:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008dae:	89a3      	ldrh	r3, [r4, #12]
 8008db0:	0759      	lsls	r1, r3, #29
 8008db2:	d505      	bpl.n	8008dc0 <__sflush_r+0x44>
 8008db4:	6863      	ldr	r3, [r4, #4]
 8008db6:	1ad2      	subs	r2, r2, r3
 8008db8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008dba:	b10b      	cbz	r3, 8008dc0 <__sflush_r+0x44>
 8008dbc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008dbe:	1ad2      	subs	r2, r2, r3
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008dc4:	6a21      	ldr	r1, [r4, #32]
 8008dc6:	4628      	mov	r0, r5
 8008dc8:	47b0      	blx	r6
 8008dca:	1c43      	adds	r3, r0, #1
 8008dcc:	89a3      	ldrh	r3, [r4, #12]
 8008dce:	d106      	bne.n	8008dde <__sflush_r+0x62>
 8008dd0:	6829      	ldr	r1, [r5, #0]
 8008dd2:	291d      	cmp	r1, #29
 8008dd4:	d82b      	bhi.n	8008e2e <__sflush_r+0xb2>
 8008dd6:	4a2a      	ldr	r2, [pc, #168]	@ (8008e80 <__sflush_r+0x104>)
 8008dd8:	40ca      	lsrs	r2, r1
 8008dda:	07d6      	lsls	r6, r2, #31
 8008ddc:	d527      	bpl.n	8008e2e <__sflush_r+0xb2>
 8008dde:	2200      	movs	r2, #0
 8008de0:	6062      	str	r2, [r4, #4]
 8008de2:	04d9      	lsls	r1, r3, #19
 8008de4:	6922      	ldr	r2, [r4, #16]
 8008de6:	6022      	str	r2, [r4, #0]
 8008de8:	d504      	bpl.n	8008df4 <__sflush_r+0x78>
 8008dea:	1c42      	adds	r2, r0, #1
 8008dec:	d101      	bne.n	8008df2 <__sflush_r+0x76>
 8008dee:	682b      	ldr	r3, [r5, #0]
 8008df0:	b903      	cbnz	r3, 8008df4 <__sflush_r+0x78>
 8008df2:	6560      	str	r0, [r4, #84]	@ 0x54
 8008df4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008df6:	602f      	str	r7, [r5, #0]
 8008df8:	b1b9      	cbz	r1, 8008e2a <__sflush_r+0xae>
 8008dfa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008dfe:	4299      	cmp	r1, r3
 8008e00:	d002      	beq.n	8008e08 <__sflush_r+0x8c>
 8008e02:	4628      	mov	r0, r5
 8008e04:	f7ff feba 	bl	8008b7c <_free_r>
 8008e08:	2300      	movs	r3, #0
 8008e0a:	6363      	str	r3, [r4, #52]	@ 0x34
 8008e0c:	e00d      	b.n	8008e2a <__sflush_r+0xae>
 8008e0e:	2301      	movs	r3, #1
 8008e10:	4628      	mov	r0, r5
 8008e12:	47b0      	blx	r6
 8008e14:	4602      	mov	r2, r0
 8008e16:	1c50      	adds	r0, r2, #1
 8008e18:	d1c9      	bne.n	8008dae <__sflush_r+0x32>
 8008e1a:	682b      	ldr	r3, [r5, #0]
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d0c6      	beq.n	8008dae <__sflush_r+0x32>
 8008e20:	2b1d      	cmp	r3, #29
 8008e22:	d001      	beq.n	8008e28 <__sflush_r+0xac>
 8008e24:	2b16      	cmp	r3, #22
 8008e26:	d11e      	bne.n	8008e66 <__sflush_r+0xea>
 8008e28:	602f      	str	r7, [r5, #0]
 8008e2a:	2000      	movs	r0, #0
 8008e2c:	e022      	b.n	8008e74 <__sflush_r+0xf8>
 8008e2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008e32:	b21b      	sxth	r3, r3
 8008e34:	e01b      	b.n	8008e6e <__sflush_r+0xf2>
 8008e36:	690f      	ldr	r7, [r1, #16]
 8008e38:	2f00      	cmp	r7, #0
 8008e3a:	d0f6      	beq.n	8008e2a <__sflush_r+0xae>
 8008e3c:	0793      	lsls	r3, r2, #30
 8008e3e:	680e      	ldr	r6, [r1, #0]
 8008e40:	bf08      	it	eq
 8008e42:	694b      	ldreq	r3, [r1, #20]
 8008e44:	600f      	str	r7, [r1, #0]
 8008e46:	bf18      	it	ne
 8008e48:	2300      	movne	r3, #0
 8008e4a:	eba6 0807 	sub.w	r8, r6, r7
 8008e4e:	608b      	str	r3, [r1, #8]
 8008e50:	f1b8 0f00 	cmp.w	r8, #0
 8008e54:	dde9      	ble.n	8008e2a <__sflush_r+0xae>
 8008e56:	6a21      	ldr	r1, [r4, #32]
 8008e58:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008e5a:	4643      	mov	r3, r8
 8008e5c:	463a      	mov	r2, r7
 8008e5e:	4628      	mov	r0, r5
 8008e60:	47b0      	blx	r6
 8008e62:	2800      	cmp	r0, #0
 8008e64:	dc08      	bgt.n	8008e78 <__sflush_r+0xfc>
 8008e66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e6a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008e6e:	81a3      	strh	r3, [r4, #12]
 8008e70:	f04f 30ff 	mov.w	r0, #4294967295
 8008e74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e78:	4407      	add	r7, r0
 8008e7a:	eba8 0800 	sub.w	r8, r8, r0
 8008e7e:	e7e7      	b.n	8008e50 <__sflush_r+0xd4>
 8008e80:	20400001 	.word	0x20400001

08008e84 <_fflush_r>:
 8008e84:	b538      	push	{r3, r4, r5, lr}
 8008e86:	690b      	ldr	r3, [r1, #16]
 8008e88:	4605      	mov	r5, r0
 8008e8a:	460c      	mov	r4, r1
 8008e8c:	b913      	cbnz	r3, 8008e94 <_fflush_r+0x10>
 8008e8e:	2500      	movs	r5, #0
 8008e90:	4628      	mov	r0, r5
 8008e92:	bd38      	pop	{r3, r4, r5, pc}
 8008e94:	b118      	cbz	r0, 8008e9e <_fflush_r+0x1a>
 8008e96:	6a03      	ldr	r3, [r0, #32]
 8008e98:	b90b      	cbnz	r3, 8008e9e <_fflush_r+0x1a>
 8008e9a:	f7ff fd5b 	bl	8008954 <__sinit>
 8008e9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d0f3      	beq.n	8008e8e <_fflush_r+0xa>
 8008ea6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008ea8:	07d0      	lsls	r0, r2, #31
 8008eaa:	d404      	bmi.n	8008eb6 <_fflush_r+0x32>
 8008eac:	0599      	lsls	r1, r3, #22
 8008eae:	d402      	bmi.n	8008eb6 <_fflush_r+0x32>
 8008eb0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008eb2:	f7ff fe42 	bl	8008b3a <__retarget_lock_acquire_recursive>
 8008eb6:	4628      	mov	r0, r5
 8008eb8:	4621      	mov	r1, r4
 8008eba:	f7ff ff5f 	bl	8008d7c <__sflush_r>
 8008ebe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008ec0:	07da      	lsls	r2, r3, #31
 8008ec2:	4605      	mov	r5, r0
 8008ec4:	d4e4      	bmi.n	8008e90 <_fflush_r+0xc>
 8008ec6:	89a3      	ldrh	r3, [r4, #12]
 8008ec8:	059b      	lsls	r3, r3, #22
 8008eca:	d4e1      	bmi.n	8008e90 <_fflush_r+0xc>
 8008ecc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008ece:	f7ff fe35 	bl	8008b3c <__retarget_lock_release_recursive>
 8008ed2:	e7dd      	b.n	8008e90 <_fflush_r+0xc>

08008ed4 <fiprintf>:
 8008ed4:	b40e      	push	{r1, r2, r3}
 8008ed6:	b503      	push	{r0, r1, lr}
 8008ed8:	4601      	mov	r1, r0
 8008eda:	ab03      	add	r3, sp, #12
 8008edc:	4805      	ldr	r0, [pc, #20]	@ (8008ef4 <fiprintf+0x20>)
 8008ede:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ee2:	6800      	ldr	r0, [r0, #0]
 8008ee4:	9301      	str	r3, [sp, #4]
 8008ee6:	f000 f847 	bl	8008f78 <_vfiprintf_r>
 8008eea:	b002      	add	sp, #8
 8008eec:	f85d eb04 	ldr.w	lr, [sp], #4
 8008ef0:	b003      	add	sp, #12
 8008ef2:	4770      	bx	lr
 8008ef4:	2000002c 	.word	0x2000002c

08008ef8 <_sbrk_r>:
 8008ef8:	b538      	push	{r3, r4, r5, lr}
 8008efa:	4d06      	ldr	r5, [pc, #24]	@ (8008f14 <_sbrk_r+0x1c>)
 8008efc:	2300      	movs	r3, #0
 8008efe:	4604      	mov	r4, r0
 8008f00:	4608      	mov	r0, r1
 8008f02:	602b      	str	r3, [r5, #0]
 8008f04:	f7fb fb3c 	bl	8004580 <_sbrk>
 8008f08:	1c43      	adds	r3, r0, #1
 8008f0a:	d102      	bne.n	8008f12 <_sbrk_r+0x1a>
 8008f0c:	682b      	ldr	r3, [r5, #0]
 8008f0e:	b103      	cbz	r3, 8008f12 <_sbrk_r+0x1a>
 8008f10:	6023      	str	r3, [r4, #0]
 8008f12:	bd38      	pop	{r3, r4, r5, pc}
 8008f14:	20004e04 	.word	0x20004e04

08008f18 <abort>:
 8008f18:	b508      	push	{r3, lr}
 8008f1a:	2006      	movs	r0, #6
 8008f1c:	f000 fb8c 	bl	8009638 <raise>
 8008f20:	2001      	movs	r0, #1
 8008f22:	f7fb fab5 	bl	8004490 <_exit>

08008f26 <__sfputc_r>:
 8008f26:	6893      	ldr	r3, [r2, #8]
 8008f28:	3b01      	subs	r3, #1
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	b410      	push	{r4}
 8008f2e:	6093      	str	r3, [r2, #8]
 8008f30:	da08      	bge.n	8008f44 <__sfputc_r+0x1e>
 8008f32:	6994      	ldr	r4, [r2, #24]
 8008f34:	42a3      	cmp	r3, r4
 8008f36:	db01      	blt.n	8008f3c <__sfputc_r+0x16>
 8008f38:	290a      	cmp	r1, #10
 8008f3a:	d103      	bne.n	8008f44 <__sfputc_r+0x1e>
 8008f3c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008f40:	f000 babe 	b.w	80094c0 <__swbuf_r>
 8008f44:	6813      	ldr	r3, [r2, #0]
 8008f46:	1c58      	adds	r0, r3, #1
 8008f48:	6010      	str	r0, [r2, #0]
 8008f4a:	7019      	strb	r1, [r3, #0]
 8008f4c:	4608      	mov	r0, r1
 8008f4e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008f52:	4770      	bx	lr

08008f54 <__sfputs_r>:
 8008f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f56:	4606      	mov	r6, r0
 8008f58:	460f      	mov	r7, r1
 8008f5a:	4614      	mov	r4, r2
 8008f5c:	18d5      	adds	r5, r2, r3
 8008f5e:	42ac      	cmp	r4, r5
 8008f60:	d101      	bne.n	8008f66 <__sfputs_r+0x12>
 8008f62:	2000      	movs	r0, #0
 8008f64:	e007      	b.n	8008f76 <__sfputs_r+0x22>
 8008f66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f6a:	463a      	mov	r2, r7
 8008f6c:	4630      	mov	r0, r6
 8008f6e:	f7ff ffda 	bl	8008f26 <__sfputc_r>
 8008f72:	1c43      	adds	r3, r0, #1
 8008f74:	d1f3      	bne.n	8008f5e <__sfputs_r+0xa>
 8008f76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008f78 <_vfiprintf_r>:
 8008f78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f7c:	460d      	mov	r5, r1
 8008f7e:	b09d      	sub	sp, #116	@ 0x74
 8008f80:	4614      	mov	r4, r2
 8008f82:	4698      	mov	r8, r3
 8008f84:	4606      	mov	r6, r0
 8008f86:	b118      	cbz	r0, 8008f90 <_vfiprintf_r+0x18>
 8008f88:	6a03      	ldr	r3, [r0, #32]
 8008f8a:	b90b      	cbnz	r3, 8008f90 <_vfiprintf_r+0x18>
 8008f8c:	f7ff fce2 	bl	8008954 <__sinit>
 8008f90:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008f92:	07d9      	lsls	r1, r3, #31
 8008f94:	d405      	bmi.n	8008fa2 <_vfiprintf_r+0x2a>
 8008f96:	89ab      	ldrh	r3, [r5, #12]
 8008f98:	059a      	lsls	r2, r3, #22
 8008f9a:	d402      	bmi.n	8008fa2 <_vfiprintf_r+0x2a>
 8008f9c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008f9e:	f7ff fdcc 	bl	8008b3a <__retarget_lock_acquire_recursive>
 8008fa2:	89ab      	ldrh	r3, [r5, #12]
 8008fa4:	071b      	lsls	r3, r3, #28
 8008fa6:	d501      	bpl.n	8008fac <_vfiprintf_r+0x34>
 8008fa8:	692b      	ldr	r3, [r5, #16]
 8008faa:	b99b      	cbnz	r3, 8008fd4 <_vfiprintf_r+0x5c>
 8008fac:	4629      	mov	r1, r5
 8008fae:	4630      	mov	r0, r6
 8008fb0:	f000 fac4 	bl	800953c <__swsetup_r>
 8008fb4:	b170      	cbz	r0, 8008fd4 <_vfiprintf_r+0x5c>
 8008fb6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008fb8:	07dc      	lsls	r4, r3, #31
 8008fba:	d504      	bpl.n	8008fc6 <_vfiprintf_r+0x4e>
 8008fbc:	f04f 30ff 	mov.w	r0, #4294967295
 8008fc0:	b01d      	add	sp, #116	@ 0x74
 8008fc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fc6:	89ab      	ldrh	r3, [r5, #12]
 8008fc8:	0598      	lsls	r0, r3, #22
 8008fca:	d4f7      	bmi.n	8008fbc <_vfiprintf_r+0x44>
 8008fcc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008fce:	f7ff fdb5 	bl	8008b3c <__retarget_lock_release_recursive>
 8008fd2:	e7f3      	b.n	8008fbc <_vfiprintf_r+0x44>
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	9309      	str	r3, [sp, #36]	@ 0x24
 8008fd8:	2320      	movs	r3, #32
 8008fda:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008fde:	f8cd 800c 	str.w	r8, [sp, #12]
 8008fe2:	2330      	movs	r3, #48	@ 0x30
 8008fe4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009194 <_vfiprintf_r+0x21c>
 8008fe8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008fec:	f04f 0901 	mov.w	r9, #1
 8008ff0:	4623      	mov	r3, r4
 8008ff2:	469a      	mov	sl, r3
 8008ff4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008ff8:	b10a      	cbz	r2, 8008ffe <_vfiprintf_r+0x86>
 8008ffa:	2a25      	cmp	r2, #37	@ 0x25
 8008ffc:	d1f9      	bne.n	8008ff2 <_vfiprintf_r+0x7a>
 8008ffe:	ebba 0b04 	subs.w	fp, sl, r4
 8009002:	d00b      	beq.n	800901c <_vfiprintf_r+0xa4>
 8009004:	465b      	mov	r3, fp
 8009006:	4622      	mov	r2, r4
 8009008:	4629      	mov	r1, r5
 800900a:	4630      	mov	r0, r6
 800900c:	f7ff ffa2 	bl	8008f54 <__sfputs_r>
 8009010:	3001      	adds	r0, #1
 8009012:	f000 80a7 	beq.w	8009164 <_vfiprintf_r+0x1ec>
 8009016:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009018:	445a      	add	r2, fp
 800901a:	9209      	str	r2, [sp, #36]	@ 0x24
 800901c:	f89a 3000 	ldrb.w	r3, [sl]
 8009020:	2b00      	cmp	r3, #0
 8009022:	f000 809f 	beq.w	8009164 <_vfiprintf_r+0x1ec>
 8009026:	2300      	movs	r3, #0
 8009028:	f04f 32ff 	mov.w	r2, #4294967295
 800902c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009030:	f10a 0a01 	add.w	sl, sl, #1
 8009034:	9304      	str	r3, [sp, #16]
 8009036:	9307      	str	r3, [sp, #28]
 8009038:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800903c:	931a      	str	r3, [sp, #104]	@ 0x68
 800903e:	4654      	mov	r4, sl
 8009040:	2205      	movs	r2, #5
 8009042:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009046:	4853      	ldr	r0, [pc, #332]	@ (8009194 <_vfiprintf_r+0x21c>)
 8009048:	f7f7 f8c2 	bl	80001d0 <memchr>
 800904c:	9a04      	ldr	r2, [sp, #16]
 800904e:	b9d8      	cbnz	r0, 8009088 <_vfiprintf_r+0x110>
 8009050:	06d1      	lsls	r1, r2, #27
 8009052:	bf44      	itt	mi
 8009054:	2320      	movmi	r3, #32
 8009056:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800905a:	0713      	lsls	r3, r2, #28
 800905c:	bf44      	itt	mi
 800905e:	232b      	movmi	r3, #43	@ 0x2b
 8009060:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009064:	f89a 3000 	ldrb.w	r3, [sl]
 8009068:	2b2a      	cmp	r3, #42	@ 0x2a
 800906a:	d015      	beq.n	8009098 <_vfiprintf_r+0x120>
 800906c:	9a07      	ldr	r2, [sp, #28]
 800906e:	4654      	mov	r4, sl
 8009070:	2000      	movs	r0, #0
 8009072:	f04f 0c0a 	mov.w	ip, #10
 8009076:	4621      	mov	r1, r4
 8009078:	f811 3b01 	ldrb.w	r3, [r1], #1
 800907c:	3b30      	subs	r3, #48	@ 0x30
 800907e:	2b09      	cmp	r3, #9
 8009080:	d94b      	bls.n	800911a <_vfiprintf_r+0x1a2>
 8009082:	b1b0      	cbz	r0, 80090b2 <_vfiprintf_r+0x13a>
 8009084:	9207      	str	r2, [sp, #28]
 8009086:	e014      	b.n	80090b2 <_vfiprintf_r+0x13a>
 8009088:	eba0 0308 	sub.w	r3, r0, r8
 800908c:	fa09 f303 	lsl.w	r3, r9, r3
 8009090:	4313      	orrs	r3, r2
 8009092:	9304      	str	r3, [sp, #16]
 8009094:	46a2      	mov	sl, r4
 8009096:	e7d2      	b.n	800903e <_vfiprintf_r+0xc6>
 8009098:	9b03      	ldr	r3, [sp, #12]
 800909a:	1d19      	adds	r1, r3, #4
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	9103      	str	r1, [sp, #12]
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	bfbb      	ittet	lt
 80090a4:	425b      	neglt	r3, r3
 80090a6:	f042 0202 	orrlt.w	r2, r2, #2
 80090aa:	9307      	strge	r3, [sp, #28]
 80090ac:	9307      	strlt	r3, [sp, #28]
 80090ae:	bfb8      	it	lt
 80090b0:	9204      	strlt	r2, [sp, #16]
 80090b2:	7823      	ldrb	r3, [r4, #0]
 80090b4:	2b2e      	cmp	r3, #46	@ 0x2e
 80090b6:	d10a      	bne.n	80090ce <_vfiprintf_r+0x156>
 80090b8:	7863      	ldrb	r3, [r4, #1]
 80090ba:	2b2a      	cmp	r3, #42	@ 0x2a
 80090bc:	d132      	bne.n	8009124 <_vfiprintf_r+0x1ac>
 80090be:	9b03      	ldr	r3, [sp, #12]
 80090c0:	1d1a      	adds	r2, r3, #4
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	9203      	str	r2, [sp, #12]
 80090c6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80090ca:	3402      	adds	r4, #2
 80090cc:	9305      	str	r3, [sp, #20]
 80090ce:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80091a4 <_vfiprintf_r+0x22c>
 80090d2:	7821      	ldrb	r1, [r4, #0]
 80090d4:	2203      	movs	r2, #3
 80090d6:	4650      	mov	r0, sl
 80090d8:	f7f7 f87a 	bl	80001d0 <memchr>
 80090dc:	b138      	cbz	r0, 80090ee <_vfiprintf_r+0x176>
 80090de:	9b04      	ldr	r3, [sp, #16]
 80090e0:	eba0 000a 	sub.w	r0, r0, sl
 80090e4:	2240      	movs	r2, #64	@ 0x40
 80090e6:	4082      	lsls	r2, r0
 80090e8:	4313      	orrs	r3, r2
 80090ea:	3401      	adds	r4, #1
 80090ec:	9304      	str	r3, [sp, #16]
 80090ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090f2:	4829      	ldr	r0, [pc, #164]	@ (8009198 <_vfiprintf_r+0x220>)
 80090f4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80090f8:	2206      	movs	r2, #6
 80090fa:	f7f7 f869 	bl	80001d0 <memchr>
 80090fe:	2800      	cmp	r0, #0
 8009100:	d03f      	beq.n	8009182 <_vfiprintf_r+0x20a>
 8009102:	4b26      	ldr	r3, [pc, #152]	@ (800919c <_vfiprintf_r+0x224>)
 8009104:	bb1b      	cbnz	r3, 800914e <_vfiprintf_r+0x1d6>
 8009106:	9b03      	ldr	r3, [sp, #12]
 8009108:	3307      	adds	r3, #7
 800910a:	f023 0307 	bic.w	r3, r3, #7
 800910e:	3308      	adds	r3, #8
 8009110:	9303      	str	r3, [sp, #12]
 8009112:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009114:	443b      	add	r3, r7
 8009116:	9309      	str	r3, [sp, #36]	@ 0x24
 8009118:	e76a      	b.n	8008ff0 <_vfiprintf_r+0x78>
 800911a:	fb0c 3202 	mla	r2, ip, r2, r3
 800911e:	460c      	mov	r4, r1
 8009120:	2001      	movs	r0, #1
 8009122:	e7a8      	b.n	8009076 <_vfiprintf_r+0xfe>
 8009124:	2300      	movs	r3, #0
 8009126:	3401      	adds	r4, #1
 8009128:	9305      	str	r3, [sp, #20]
 800912a:	4619      	mov	r1, r3
 800912c:	f04f 0c0a 	mov.w	ip, #10
 8009130:	4620      	mov	r0, r4
 8009132:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009136:	3a30      	subs	r2, #48	@ 0x30
 8009138:	2a09      	cmp	r2, #9
 800913a:	d903      	bls.n	8009144 <_vfiprintf_r+0x1cc>
 800913c:	2b00      	cmp	r3, #0
 800913e:	d0c6      	beq.n	80090ce <_vfiprintf_r+0x156>
 8009140:	9105      	str	r1, [sp, #20]
 8009142:	e7c4      	b.n	80090ce <_vfiprintf_r+0x156>
 8009144:	fb0c 2101 	mla	r1, ip, r1, r2
 8009148:	4604      	mov	r4, r0
 800914a:	2301      	movs	r3, #1
 800914c:	e7f0      	b.n	8009130 <_vfiprintf_r+0x1b8>
 800914e:	ab03      	add	r3, sp, #12
 8009150:	9300      	str	r3, [sp, #0]
 8009152:	462a      	mov	r2, r5
 8009154:	4b12      	ldr	r3, [pc, #72]	@ (80091a0 <_vfiprintf_r+0x228>)
 8009156:	a904      	add	r1, sp, #16
 8009158:	4630      	mov	r0, r6
 800915a:	f3af 8000 	nop.w
 800915e:	4607      	mov	r7, r0
 8009160:	1c78      	adds	r0, r7, #1
 8009162:	d1d6      	bne.n	8009112 <_vfiprintf_r+0x19a>
 8009164:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009166:	07d9      	lsls	r1, r3, #31
 8009168:	d405      	bmi.n	8009176 <_vfiprintf_r+0x1fe>
 800916a:	89ab      	ldrh	r3, [r5, #12]
 800916c:	059a      	lsls	r2, r3, #22
 800916e:	d402      	bmi.n	8009176 <_vfiprintf_r+0x1fe>
 8009170:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009172:	f7ff fce3 	bl	8008b3c <__retarget_lock_release_recursive>
 8009176:	89ab      	ldrh	r3, [r5, #12]
 8009178:	065b      	lsls	r3, r3, #25
 800917a:	f53f af1f 	bmi.w	8008fbc <_vfiprintf_r+0x44>
 800917e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009180:	e71e      	b.n	8008fc0 <_vfiprintf_r+0x48>
 8009182:	ab03      	add	r3, sp, #12
 8009184:	9300      	str	r3, [sp, #0]
 8009186:	462a      	mov	r2, r5
 8009188:	4b05      	ldr	r3, [pc, #20]	@ (80091a0 <_vfiprintf_r+0x228>)
 800918a:	a904      	add	r1, sp, #16
 800918c:	4630      	mov	r0, r6
 800918e:	f000 f879 	bl	8009284 <_printf_i>
 8009192:	e7e4      	b.n	800915e <_vfiprintf_r+0x1e6>
 8009194:	0800af13 	.word	0x0800af13
 8009198:	0800af1d 	.word	0x0800af1d
 800919c:	00000000 	.word	0x00000000
 80091a0:	08008f55 	.word	0x08008f55
 80091a4:	0800af19 	.word	0x0800af19

080091a8 <_printf_common>:
 80091a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80091ac:	4616      	mov	r6, r2
 80091ae:	4698      	mov	r8, r3
 80091b0:	688a      	ldr	r2, [r1, #8]
 80091b2:	690b      	ldr	r3, [r1, #16]
 80091b4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80091b8:	4293      	cmp	r3, r2
 80091ba:	bfb8      	it	lt
 80091bc:	4613      	movlt	r3, r2
 80091be:	6033      	str	r3, [r6, #0]
 80091c0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80091c4:	4607      	mov	r7, r0
 80091c6:	460c      	mov	r4, r1
 80091c8:	b10a      	cbz	r2, 80091ce <_printf_common+0x26>
 80091ca:	3301      	adds	r3, #1
 80091cc:	6033      	str	r3, [r6, #0]
 80091ce:	6823      	ldr	r3, [r4, #0]
 80091d0:	0699      	lsls	r1, r3, #26
 80091d2:	bf42      	ittt	mi
 80091d4:	6833      	ldrmi	r3, [r6, #0]
 80091d6:	3302      	addmi	r3, #2
 80091d8:	6033      	strmi	r3, [r6, #0]
 80091da:	6825      	ldr	r5, [r4, #0]
 80091dc:	f015 0506 	ands.w	r5, r5, #6
 80091e0:	d106      	bne.n	80091f0 <_printf_common+0x48>
 80091e2:	f104 0a19 	add.w	sl, r4, #25
 80091e6:	68e3      	ldr	r3, [r4, #12]
 80091e8:	6832      	ldr	r2, [r6, #0]
 80091ea:	1a9b      	subs	r3, r3, r2
 80091ec:	42ab      	cmp	r3, r5
 80091ee:	dc26      	bgt.n	800923e <_printf_common+0x96>
 80091f0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80091f4:	6822      	ldr	r2, [r4, #0]
 80091f6:	3b00      	subs	r3, #0
 80091f8:	bf18      	it	ne
 80091fa:	2301      	movne	r3, #1
 80091fc:	0692      	lsls	r2, r2, #26
 80091fe:	d42b      	bmi.n	8009258 <_printf_common+0xb0>
 8009200:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009204:	4641      	mov	r1, r8
 8009206:	4638      	mov	r0, r7
 8009208:	47c8      	blx	r9
 800920a:	3001      	adds	r0, #1
 800920c:	d01e      	beq.n	800924c <_printf_common+0xa4>
 800920e:	6823      	ldr	r3, [r4, #0]
 8009210:	6922      	ldr	r2, [r4, #16]
 8009212:	f003 0306 	and.w	r3, r3, #6
 8009216:	2b04      	cmp	r3, #4
 8009218:	bf02      	ittt	eq
 800921a:	68e5      	ldreq	r5, [r4, #12]
 800921c:	6833      	ldreq	r3, [r6, #0]
 800921e:	1aed      	subeq	r5, r5, r3
 8009220:	68a3      	ldr	r3, [r4, #8]
 8009222:	bf0c      	ite	eq
 8009224:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009228:	2500      	movne	r5, #0
 800922a:	4293      	cmp	r3, r2
 800922c:	bfc4      	itt	gt
 800922e:	1a9b      	subgt	r3, r3, r2
 8009230:	18ed      	addgt	r5, r5, r3
 8009232:	2600      	movs	r6, #0
 8009234:	341a      	adds	r4, #26
 8009236:	42b5      	cmp	r5, r6
 8009238:	d11a      	bne.n	8009270 <_printf_common+0xc8>
 800923a:	2000      	movs	r0, #0
 800923c:	e008      	b.n	8009250 <_printf_common+0xa8>
 800923e:	2301      	movs	r3, #1
 8009240:	4652      	mov	r2, sl
 8009242:	4641      	mov	r1, r8
 8009244:	4638      	mov	r0, r7
 8009246:	47c8      	blx	r9
 8009248:	3001      	adds	r0, #1
 800924a:	d103      	bne.n	8009254 <_printf_common+0xac>
 800924c:	f04f 30ff 	mov.w	r0, #4294967295
 8009250:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009254:	3501      	adds	r5, #1
 8009256:	e7c6      	b.n	80091e6 <_printf_common+0x3e>
 8009258:	18e1      	adds	r1, r4, r3
 800925a:	1c5a      	adds	r2, r3, #1
 800925c:	2030      	movs	r0, #48	@ 0x30
 800925e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009262:	4422      	add	r2, r4
 8009264:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009268:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800926c:	3302      	adds	r3, #2
 800926e:	e7c7      	b.n	8009200 <_printf_common+0x58>
 8009270:	2301      	movs	r3, #1
 8009272:	4622      	mov	r2, r4
 8009274:	4641      	mov	r1, r8
 8009276:	4638      	mov	r0, r7
 8009278:	47c8      	blx	r9
 800927a:	3001      	adds	r0, #1
 800927c:	d0e6      	beq.n	800924c <_printf_common+0xa4>
 800927e:	3601      	adds	r6, #1
 8009280:	e7d9      	b.n	8009236 <_printf_common+0x8e>
	...

08009284 <_printf_i>:
 8009284:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009288:	7e0f      	ldrb	r7, [r1, #24]
 800928a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800928c:	2f78      	cmp	r7, #120	@ 0x78
 800928e:	4691      	mov	r9, r2
 8009290:	4680      	mov	r8, r0
 8009292:	460c      	mov	r4, r1
 8009294:	469a      	mov	sl, r3
 8009296:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800929a:	d807      	bhi.n	80092ac <_printf_i+0x28>
 800929c:	2f62      	cmp	r7, #98	@ 0x62
 800929e:	d80a      	bhi.n	80092b6 <_printf_i+0x32>
 80092a0:	2f00      	cmp	r7, #0
 80092a2:	f000 80d1 	beq.w	8009448 <_printf_i+0x1c4>
 80092a6:	2f58      	cmp	r7, #88	@ 0x58
 80092a8:	f000 80b8 	beq.w	800941c <_printf_i+0x198>
 80092ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80092b0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80092b4:	e03a      	b.n	800932c <_printf_i+0xa8>
 80092b6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80092ba:	2b15      	cmp	r3, #21
 80092bc:	d8f6      	bhi.n	80092ac <_printf_i+0x28>
 80092be:	a101      	add	r1, pc, #4	@ (adr r1, 80092c4 <_printf_i+0x40>)
 80092c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80092c4:	0800931d 	.word	0x0800931d
 80092c8:	08009331 	.word	0x08009331
 80092cc:	080092ad 	.word	0x080092ad
 80092d0:	080092ad 	.word	0x080092ad
 80092d4:	080092ad 	.word	0x080092ad
 80092d8:	080092ad 	.word	0x080092ad
 80092dc:	08009331 	.word	0x08009331
 80092e0:	080092ad 	.word	0x080092ad
 80092e4:	080092ad 	.word	0x080092ad
 80092e8:	080092ad 	.word	0x080092ad
 80092ec:	080092ad 	.word	0x080092ad
 80092f0:	0800942f 	.word	0x0800942f
 80092f4:	0800935b 	.word	0x0800935b
 80092f8:	080093e9 	.word	0x080093e9
 80092fc:	080092ad 	.word	0x080092ad
 8009300:	080092ad 	.word	0x080092ad
 8009304:	08009451 	.word	0x08009451
 8009308:	080092ad 	.word	0x080092ad
 800930c:	0800935b 	.word	0x0800935b
 8009310:	080092ad 	.word	0x080092ad
 8009314:	080092ad 	.word	0x080092ad
 8009318:	080093f1 	.word	0x080093f1
 800931c:	6833      	ldr	r3, [r6, #0]
 800931e:	1d1a      	adds	r2, r3, #4
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	6032      	str	r2, [r6, #0]
 8009324:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009328:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800932c:	2301      	movs	r3, #1
 800932e:	e09c      	b.n	800946a <_printf_i+0x1e6>
 8009330:	6833      	ldr	r3, [r6, #0]
 8009332:	6820      	ldr	r0, [r4, #0]
 8009334:	1d19      	adds	r1, r3, #4
 8009336:	6031      	str	r1, [r6, #0]
 8009338:	0606      	lsls	r6, r0, #24
 800933a:	d501      	bpl.n	8009340 <_printf_i+0xbc>
 800933c:	681d      	ldr	r5, [r3, #0]
 800933e:	e003      	b.n	8009348 <_printf_i+0xc4>
 8009340:	0645      	lsls	r5, r0, #25
 8009342:	d5fb      	bpl.n	800933c <_printf_i+0xb8>
 8009344:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009348:	2d00      	cmp	r5, #0
 800934a:	da03      	bge.n	8009354 <_printf_i+0xd0>
 800934c:	232d      	movs	r3, #45	@ 0x2d
 800934e:	426d      	negs	r5, r5
 8009350:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009354:	4858      	ldr	r0, [pc, #352]	@ (80094b8 <_printf_i+0x234>)
 8009356:	230a      	movs	r3, #10
 8009358:	e011      	b.n	800937e <_printf_i+0xfa>
 800935a:	6821      	ldr	r1, [r4, #0]
 800935c:	6833      	ldr	r3, [r6, #0]
 800935e:	0608      	lsls	r0, r1, #24
 8009360:	f853 5b04 	ldr.w	r5, [r3], #4
 8009364:	d402      	bmi.n	800936c <_printf_i+0xe8>
 8009366:	0649      	lsls	r1, r1, #25
 8009368:	bf48      	it	mi
 800936a:	b2ad      	uxthmi	r5, r5
 800936c:	2f6f      	cmp	r7, #111	@ 0x6f
 800936e:	4852      	ldr	r0, [pc, #328]	@ (80094b8 <_printf_i+0x234>)
 8009370:	6033      	str	r3, [r6, #0]
 8009372:	bf14      	ite	ne
 8009374:	230a      	movne	r3, #10
 8009376:	2308      	moveq	r3, #8
 8009378:	2100      	movs	r1, #0
 800937a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800937e:	6866      	ldr	r6, [r4, #4]
 8009380:	60a6      	str	r6, [r4, #8]
 8009382:	2e00      	cmp	r6, #0
 8009384:	db05      	blt.n	8009392 <_printf_i+0x10e>
 8009386:	6821      	ldr	r1, [r4, #0]
 8009388:	432e      	orrs	r6, r5
 800938a:	f021 0104 	bic.w	r1, r1, #4
 800938e:	6021      	str	r1, [r4, #0]
 8009390:	d04b      	beq.n	800942a <_printf_i+0x1a6>
 8009392:	4616      	mov	r6, r2
 8009394:	fbb5 f1f3 	udiv	r1, r5, r3
 8009398:	fb03 5711 	mls	r7, r3, r1, r5
 800939c:	5dc7      	ldrb	r7, [r0, r7]
 800939e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80093a2:	462f      	mov	r7, r5
 80093a4:	42bb      	cmp	r3, r7
 80093a6:	460d      	mov	r5, r1
 80093a8:	d9f4      	bls.n	8009394 <_printf_i+0x110>
 80093aa:	2b08      	cmp	r3, #8
 80093ac:	d10b      	bne.n	80093c6 <_printf_i+0x142>
 80093ae:	6823      	ldr	r3, [r4, #0]
 80093b0:	07df      	lsls	r7, r3, #31
 80093b2:	d508      	bpl.n	80093c6 <_printf_i+0x142>
 80093b4:	6923      	ldr	r3, [r4, #16]
 80093b6:	6861      	ldr	r1, [r4, #4]
 80093b8:	4299      	cmp	r1, r3
 80093ba:	bfde      	ittt	le
 80093bc:	2330      	movle	r3, #48	@ 0x30
 80093be:	f806 3c01 	strble.w	r3, [r6, #-1]
 80093c2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80093c6:	1b92      	subs	r2, r2, r6
 80093c8:	6122      	str	r2, [r4, #16]
 80093ca:	f8cd a000 	str.w	sl, [sp]
 80093ce:	464b      	mov	r3, r9
 80093d0:	aa03      	add	r2, sp, #12
 80093d2:	4621      	mov	r1, r4
 80093d4:	4640      	mov	r0, r8
 80093d6:	f7ff fee7 	bl	80091a8 <_printf_common>
 80093da:	3001      	adds	r0, #1
 80093dc:	d14a      	bne.n	8009474 <_printf_i+0x1f0>
 80093de:	f04f 30ff 	mov.w	r0, #4294967295
 80093e2:	b004      	add	sp, #16
 80093e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093e8:	6823      	ldr	r3, [r4, #0]
 80093ea:	f043 0320 	orr.w	r3, r3, #32
 80093ee:	6023      	str	r3, [r4, #0]
 80093f0:	4832      	ldr	r0, [pc, #200]	@ (80094bc <_printf_i+0x238>)
 80093f2:	2778      	movs	r7, #120	@ 0x78
 80093f4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80093f8:	6823      	ldr	r3, [r4, #0]
 80093fa:	6831      	ldr	r1, [r6, #0]
 80093fc:	061f      	lsls	r7, r3, #24
 80093fe:	f851 5b04 	ldr.w	r5, [r1], #4
 8009402:	d402      	bmi.n	800940a <_printf_i+0x186>
 8009404:	065f      	lsls	r7, r3, #25
 8009406:	bf48      	it	mi
 8009408:	b2ad      	uxthmi	r5, r5
 800940a:	6031      	str	r1, [r6, #0]
 800940c:	07d9      	lsls	r1, r3, #31
 800940e:	bf44      	itt	mi
 8009410:	f043 0320 	orrmi.w	r3, r3, #32
 8009414:	6023      	strmi	r3, [r4, #0]
 8009416:	b11d      	cbz	r5, 8009420 <_printf_i+0x19c>
 8009418:	2310      	movs	r3, #16
 800941a:	e7ad      	b.n	8009378 <_printf_i+0xf4>
 800941c:	4826      	ldr	r0, [pc, #152]	@ (80094b8 <_printf_i+0x234>)
 800941e:	e7e9      	b.n	80093f4 <_printf_i+0x170>
 8009420:	6823      	ldr	r3, [r4, #0]
 8009422:	f023 0320 	bic.w	r3, r3, #32
 8009426:	6023      	str	r3, [r4, #0]
 8009428:	e7f6      	b.n	8009418 <_printf_i+0x194>
 800942a:	4616      	mov	r6, r2
 800942c:	e7bd      	b.n	80093aa <_printf_i+0x126>
 800942e:	6833      	ldr	r3, [r6, #0]
 8009430:	6825      	ldr	r5, [r4, #0]
 8009432:	6961      	ldr	r1, [r4, #20]
 8009434:	1d18      	adds	r0, r3, #4
 8009436:	6030      	str	r0, [r6, #0]
 8009438:	062e      	lsls	r6, r5, #24
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	d501      	bpl.n	8009442 <_printf_i+0x1be>
 800943e:	6019      	str	r1, [r3, #0]
 8009440:	e002      	b.n	8009448 <_printf_i+0x1c4>
 8009442:	0668      	lsls	r0, r5, #25
 8009444:	d5fb      	bpl.n	800943e <_printf_i+0x1ba>
 8009446:	8019      	strh	r1, [r3, #0]
 8009448:	2300      	movs	r3, #0
 800944a:	6123      	str	r3, [r4, #16]
 800944c:	4616      	mov	r6, r2
 800944e:	e7bc      	b.n	80093ca <_printf_i+0x146>
 8009450:	6833      	ldr	r3, [r6, #0]
 8009452:	1d1a      	adds	r2, r3, #4
 8009454:	6032      	str	r2, [r6, #0]
 8009456:	681e      	ldr	r6, [r3, #0]
 8009458:	6862      	ldr	r2, [r4, #4]
 800945a:	2100      	movs	r1, #0
 800945c:	4630      	mov	r0, r6
 800945e:	f7f6 feb7 	bl	80001d0 <memchr>
 8009462:	b108      	cbz	r0, 8009468 <_printf_i+0x1e4>
 8009464:	1b80      	subs	r0, r0, r6
 8009466:	6060      	str	r0, [r4, #4]
 8009468:	6863      	ldr	r3, [r4, #4]
 800946a:	6123      	str	r3, [r4, #16]
 800946c:	2300      	movs	r3, #0
 800946e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009472:	e7aa      	b.n	80093ca <_printf_i+0x146>
 8009474:	6923      	ldr	r3, [r4, #16]
 8009476:	4632      	mov	r2, r6
 8009478:	4649      	mov	r1, r9
 800947a:	4640      	mov	r0, r8
 800947c:	47d0      	blx	sl
 800947e:	3001      	adds	r0, #1
 8009480:	d0ad      	beq.n	80093de <_printf_i+0x15a>
 8009482:	6823      	ldr	r3, [r4, #0]
 8009484:	079b      	lsls	r3, r3, #30
 8009486:	d413      	bmi.n	80094b0 <_printf_i+0x22c>
 8009488:	68e0      	ldr	r0, [r4, #12]
 800948a:	9b03      	ldr	r3, [sp, #12]
 800948c:	4298      	cmp	r0, r3
 800948e:	bfb8      	it	lt
 8009490:	4618      	movlt	r0, r3
 8009492:	e7a6      	b.n	80093e2 <_printf_i+0x15e>
 8009494:	2301      	movs	r3, #1
 8009496:	4632      	mov	r2, r6
 8009498:	4649      	mov	r1, r9
 800949a:	4640      	mov	r0, r8
 800949c:	47d0      	blx	sl
 800949e:	3001      	adds	r0, #1
 80094a0:	d09d      	beq.n	80093de <_printf_i+0x15a>
 80094a2:	3501      	adds	r5, #1
 80094a4:	68e3      	ldr	r3, [r4, #12]
 80094a6:	9903      	ldr	r1, [sp, #12]
 80094a8:	1a5b      	subs	r3, r3, r1
 80094aa:	42ab      	cmp	r3, r5
 80094ac:	dcf2      	bgt.n	8009494 <_printf_i+0x210>
 80094ae:	e7eb      	b.n	8009488 <_printf_i+0x204>
 80094b0:	2500      	movs	r5, #0
 80094b2:	f104 0619 	add.w	r6, r4, #25
 80094b6:	e7f5      	b.n	80094a4 <_printf_i+0x220>
 80094b8:	0800af24 	.word	0x0800af24
 80094bc:	0800af35 	.word	0x0800af35

080094c0 <__swbuf_r>:
 80094c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094c2:	460e      	mov	r6, r1
 80094c4:	4614      	mov	r4, r2
 80094c6:	4605      	mov	r5, r0
 80094c8:	b118      	cbz	r0, 80094d2 <__swbuf_r+0x12>
 80094ca:	6a03      	ldr	r3, [r0, #32]
 80094cc:	b90b      	cbnz	r3, 80094d2 <__swbuf_r+0x12>
 80094ce:	f7ff fa41 	bl	8008954 <__sinit>
 80094d2:	69a3      	ldr	r3, [r4, #24]
 80094d4:	60a3      	str	r3, [r4, #8]
 80094d6:	89a3      	ldrh	r3, [r4, #12]
 80094d8:	071a      	lsls	r2, r3, #28
 80094da:	d501      	bpl.n	80094e0 <__swbuf_r+0x20>
 80094dc:	6923      	ldr	r3, [r4, #16]
 80094de:	b943      	cbnz	r3, 80094f2 <__swbuf_r+0x32>
 80094e0:	4621      	mov	r1, r4
 80094e2:	4628      	mov	r0, r5
 80094e4:	f000 f82a 	bl	800953c <__swsetup_r>
 80094e8:	b118      	cbz	r0, 80094f2 <__swbuf_r+0x32>
 80094ea:	f04f 37ff 	mov.w	r7, #4294967295
 80094ee:	4638      	mov	r0, r7
 80094f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80094f2:	6823      	ldr	r3, [r4, #0]
 80094f4:	6922      	ldr	r2, [r4, #16]
 80094f6:	1a98      	subs	r0, r3, r2
 80094f8:	6963      	ldr	r3, [r4, #20]
 80094fa:	b2f6      	uxtb	r6, r6
 80094fc:	4283      	cmp	r3, r0
 80094fe:	4637      	mov	r7, r6
 8009500:	dc05      	bgt.n	800950e <__swbuf_r+0x4e>
 8009502:	4621      	mov	r1, r4
 8009504:	4628      	mov	r0, r5
 8009506:	f7ff fcbd 	bl	8008e84 <_fflush_r>
 800950a:	2800      	cmp	r0, #0
 800950c:	d1ed      	bne.n	80094ea <__swbuf_r+0x2a>
 800950e:	68a3      	ldr	r3, [r4, #8]
 8009510:	3b01      	subs	r3, #1
 8009512:	60a3      	str	r3, [r4, #8]
 8009514:	6823      	ldr	r3, [r4, #0]
 8009516:	1c5a      	adds	r2, r3, #1
 8009518:	6022      	str	r2, [r4, #0]
 800951a:	701e      	strb	r6, [r3, #0]
 800951c:	6962      	ldr	r2, [r4, #20]
 800951e:	1c43      	adds	r3, r0, #1
 8009520:	429a      	cmp	r2, r3
 8009522:	d004      	beq.n	800952e <__swbuf_r+0x6e>
 8009524:	89a3      	ldrh	r3, [r4, #12]
 8009526:	07db      	lsls	r3, r3, #31
 8009528:	d5e1      	bpl.n	80094ee <__swbuf_r+0x2e>
 800952a:	2e0a      	cmp	r6, #10
 800952c:	d1df      	bne.n	80094ee <__swbuf_r+0x2e>
 800952e:	4621      	mov	r1, r4
 8009530:	4628      	mov	r0, r5
 8009532:	f7ff fca7 	bl	8008e84 <_fflush_r>
 8009536:	2800      	cmp	r0, #0
 8009538:	d0d9      	beq.n	80094ee <__swbuf_r+0x2e>
 800953a:	e7d6      	b.n	80094ea <__swbuf_r+0x2a>

0800953c <__swsetup_r>:
 800953c:	b538      	push	{r3, r4, r5, lr}
 800953e:	4b29      	ldr	r3, [pc, #164]	@ (80095e4 <__swsetup_r+0xa8>)
 8009540:	4605      	mov	r5, r0
 8009542:	6818      	ldr	r0, [r3, #0]
 8009544:	460c      	mov	r4, r1
 8009546:	b118      	cbz	r0, 8009550 <__swsetup_r+0x14>
 8009548:	6a03      	ldr	r3, [r0, #32]
 800954a:	b90b      	cbnz	r3, 8009550 <__swsetup_r+0x14>
 800954c:	f7ff fa02 	bl	8008954 <__sinit>
 8009550:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009554:	0719      	lsls	r1, r3, #28
 8009556:	d422      	bmi.n	800959e <__swsetup_r+0x62>
 8009558:	06da      	lsls	r2, r3, #27
 800955a:	d407      	bmi.n	800956c <__swsetup_r+0x30>
 800955c:	2209      	movs	r2, #9
 800955e:	602a      	str	r2, [r5, #0]
 8009560:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009564:	81a3      	strh	r3, [r4, #12]
 8009566:	f04f 30ff 	mov.w	r0, #4294967295
 800956a:	e033      	b.n	80095d4 <__swsetup_r+0x98>
 800956c:	0758      	lsls	r0, r3, #29
 800956e:	d512      	bpl.n	8009596 <__swsetup_r+0x5a>
 8009570:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009572:	b141      	cbz	r1, 8009586 <__swsetup_r+0x4a>
 8009574:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009578:	4299      	cmp	r1, r3
 800957a:	d002      	beq.n	8009582 <__swsetup_r+0x46>
 800957c:	4628      	mov	r0, r5
 800957e:	f7ff fafd 	bl	8008b7c <_free_r>
 8009582:	2300      	movs	r3, #0
 8009584:	6363      	str	r3, [r4, #52]	@ 0x34
 8009586:	89a3      	ldrh	r3, [r4, #12]
 8009588:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800958c:	81a3      	strh	r3, [r4, #12]
 800958e:	2300      	movs	r3, #0
 8009590:	6063      	str	r3, [r4, #4]
 8009592:	6923      	ldr	r3, [r4, #16]
 8009594:	6023      	str	r3, [r4, #0]
 8009596:	89a3      	ldrh	r3, [r4, #12]
 8009598:	f043 0308 	orr.w	r3, r3, #8
 800959c:	81a3      	strh	r3, [r4, #12]
 800959e:	6923      	ldr	r3, [r4, #16]
 80095a0:	b94b      	cbnz	r3, 80095b6 <__swsetup_r+0x7a>
 80095a2:	89a3      	ldrh	r3, [r4, #12]
 80095a4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80095a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80095ac:	d003      	beq.n	80095b6 <__swsetup_r+0x7a>
 80095ae:	4621      	mov	r1, r4
 80095b0:	4628      	mov	r0, r5
 80095b2:	f000 f883 	bl	80096bc <__smakebuf_r>
 80095b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80095ba:	f013 0201 	ands.w	r2, r3, #1
 80095be:	d00a      	beq.n	80095d6 <__swsetup_r+0x9a>
 80095c0:	2200      	movs	r2, #0
 80095c2:	60a2      	str	r2, [r4, #8]
 80095c4:	6962      	ldr	r2, [r4, #20]
 80095c6:	4252      	negs	r2, r2
 80095c8:	61a2      	str	r2, [r4, #24]
 80095ca:	6922      	ldr	r2, [r4, #16]
 80095cc:	b942      	cbnz	r2, 80095e0 <__swsetup_r+0xa4>
 80095ce:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80095d2:	d1c5      	bne.n	8009560 <__swsetup_r+0x24>
 80095d4:	bd38      	pop	{r3, r4, r5, pc}
 80095d6:	0799      	lsls	r1, r3, #30
 80095d8:	bf58      	it	pl
 80095da:	6962      	ldrpl	r2, [r4, #20]
 80095dc:	60a2      	str	r2, [r4, #8]
 80095de:	e7f4      	b.n	80095ca <__swsetup_r+0x8e>
 80095e0:	2000      	movs	r0, #0
 80095e2:	e7f7      	b.n	80095d4 <__swsetup_r+0x98>
 80095e4:	2000002c 	.word	0x2000002c

080095e8 <_raise_r>:
 80095e8:	291f      	cmp	r1, #31
 80095ea:	b538      	push	{r3, r4, r5, lr}
 80095ec:	4605      	mov	r5, r0
 80095ee:	460c      	mov	r4, r1
 80095f0:	d904      	bls.n	80095fc <_raise_r+0x14>
 80095f2:	2316      	movs	r3, #22
 80095f4:	6003      	str	r3, [r0, #0]
 80095f6:	f04f 30ff 	mov.w	r0, #4294967295
 80095fa:	bd38      	pop	{r3, r4, r5, pc}
 80095fc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80095fe:	b112      	cbz	r2, 8009606 <_raise_r+0x1e>
 8009600:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009604:	b94b      	cbnz	r3, 800961a <_raise_r+0x32>
 8009606:	4628      	mov	r0, r5
 8009608:	f000 f830 	bl	800966c <_getpid_r>
 800960c:	4622      	mov	r2, r4
 800960e:	4601      	mov	r1, r0
 8009610:	4628      	mov	r0, r5
 8009612:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009616:	f000 b817 	b.w	8009648 <_kill_r>
 800961a:	2b01      	cmp	r3, #1
 800961c:	d00a      	beq.n	8009634 <_raise_r+0x4c>
 800961e:	1c59      	adds	r1, r3, #1
 8009620:	d103      	bne.n	800962a <_raise_r+0x42>
 8009622:	2316      	movs	r3, #22
 8009624:	6003      	str	r3, [r0, #0]
 8009626:	2001      	movs	r0, #1
 8009628:	e7e7      	b.n	80095fa <_raise_r+0x12>
 800962a:	2100      	movs	r1, #0
 800962c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009630:	4620      	mov	r0, r4
 8009632:	4798      	blx	r3
 8009634:	2000      	movs	r0, #0
 8009636:	e7e0      	b.n	80095fa <_raise_r+0x12>

08009638 <raise>:
 8009638:	4b02      	ldr	r3, [pc, #8]	@ (8009644 <raise+0xc>)
 800963a:	4601      	mov	r1, r0
 800963c:	6818      	ldr	r0, [r3, #0]
 800963e:	f7ff bfd3 	b.w	80095e8 <_raise_r>
 8009642:	bf00      	nop
 8009644:	2000002c 	.word	0x2000002c

08009648 <_kill_r>:
 8009648:	b538      	push	{r3, r4, r5, lr}
 800964a:	4d07      	ldr	r5, [pc, #28]	@ (8009668 <_kill_r+0x20>)
 800964c:	2300      	movs	r3, #0
 800964e:	4604      	mov	r4, r0
 8009650:	4608      	mov	r0, r1
 8009652:	4611      	mov	r1, r2
 8009654:	602b      	str	r3, [r5, #0]
 8009656:	f7fa ff0b 	bl	8004470 <_kill>
 800965a:	1c43      	adds	r3, r0, #1
 800965c:	d102      	bne.n	8009664 <_kill_r+0x1c>
 800965e:	682b      	ldr	r3, [r5, #0]
 8009660:	b103      	cbz	r3, 8009664 <_kill_r+0x1c>
 8009662:	6023      	str	r3, [r4, #0]
 8009664:	bd38      	pop	{r3, r4, r5, pc}
 8009666:	bf00      	nop
 8009668:	20004e04 	.word	0x20004e04

0800966c <_getpid_r>:
 800966c:	f7fa bef8 	b.w	8004460 <_getpid>

08009670 <__swhatbuf_r>:
 8009670:	b570      	push	{r4, r5, r6, lr}
 8009672:	460c      	mov	r4, r1
 8009674:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009678:	2900      	cmp	r1, #0
 800967a:	b096      	sub	sp, #88	@ 0x58
 800967c:	4615      	mov	r5, r2
 800967e:	461e      	mov	r6, r3
 8009680:	da0d      	bge.n	800969e <__swhatbuf_r+0x2e>
 8009682:	89a3      	ldrh	r3, [r4, #12]
 8009684:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009688:	f04f 0100 	mov.w	r1, #0
 800968c:	bf14      	ite	ne
 800968e:	2340      	movne	r3, #64	@ 0x40
 8009690:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009694:	2000      	movs	r0, #0
 8009696:	6031      	str	r1, [r6, #0]
 8009698:	602b      	str	r3, [r5, #0]
 800969a:	b016      	add	sp, #88	@ 0x58
 800969c:	bd70      	pop	{r4, r5, r6, pc}
 800969e:	466a      	mov	r2, sp
 80096a0:	f000 f848 	bl	8009734 <_fstat_r>
 80096a4:	2800      	cmp	r0, #0
 80096a6:	dbec      	blt.n	8009682 <__swhatbuf_r+0x12>
 80096a8:	9901      	ldr	r1, [sp, #4]
 80096aa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80096ae:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80096b2:	4259      	negs	r1, r3
 80096b4:	4159      	adcs	r1, r3
 80096b6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80096ba:	e7eb      	b.n	8009694 <__swhatbuf_r+0x24>

080096bc <__smakebuf_r>:
 80096bc:	898b      	ldrh	r3, [r1, #12]
 80096be:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80096c0:	079d      	lsls	r5, r3, #30
 80096c2:	4606      	mov	r6, r0
 80096c4:	460c      	mov	r4, r1
 80096c6:	d507      	bpl.n	80096d8 <__smakebuf_r+0x1c>
 80096c8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80096cc:	6023      	str	r3, [r4, #0]
 80096ce:	6123      	str	r3, [r4, #16]
 80096d0:	2301      	movs	r3, #1
 80096d2:	6163      	str	r3, [r4, #20]
 80096d4:	b003      	add	sp, #12
 80096d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80096d8:	ab01      	add	r3, sp, #4
 80096da:	466a      	mov	r2, sp
 80096dc:	f7ff ffc8 	bl	8009670 <__swhatbuf_r>
 80096e0:	9f00      	ldr	r7, [sp, #0]
 80096e2:	4605      	mov	r5, r0
 80096e4:	4639      	mov	r1, r7
 80096e6:	4630      	mov	r0, r6
 80096e8:	f7ff fabc 	bl	8008c64 <_malloc_r>
 80096ec:	b948      	cbnz	r0, 8009702 <__smakebuf_r+0x46>
 80096ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80096f2:	059a      	lsls	r2, r3, #22
 80096f4:	d4ee      	bmi.n	80096d4 <__smakebuf_r+0x18>
 80096f6:	f023 0303 	bic.w	r3, r3, #3
 80096fa:	f043 0302 	orr.w	r3, r3, #2
 80096fe:	81a3      	strh	r3, [r4, #12]
 8009700:	e7e2      	b.n	80096c8 <__smakebuf_r+0xc>
 8009702:	89a3      	ldrh	r3, [r4, #12]
 8009704:	6020      	str	r0, [r4, #0]
 8009706:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800970a:	81a3      	strh	r3, [r4, #12]
 800970c:	9b01      	ldr	r3, [sp, #4]
 800970e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009712:	b15b      	cbz	r3, 800972c <__smakebuf_r+0x70>
 8009714:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009718:	4630      	mov	r0, r6
 800971a:	f000 f81d 	bl	8009758 <_isatty_r>
 800971e:	b128      	cbz	r0, 800972c <__smakebuf_r+0x70>
 8009720:	89a3      	ldrh	r3, [r4, #12]
 8009722:	f023 0303 	bic.w	r3, r3, #3
 8009726:	f043 0301 	orr.w	r3, r3, #1
 800972a:	81a3      	strh	r3, [r4, #12]
 800972c:	89a3      	ldrh	r3, [r4, #12]
 800972e:	431d      	orrs	r5, r3
 8009730:	81a5      	strh	r5, [r4, #12]
 8009732:	e7cf      	b.n	80096d4 <__smakebuf_r+0x18>

08009734 <_fstat_r>:
 8009734:	b538      	push	{r3, r4, r5, lr}
 8009736:	4d07      	ldr	r5, [pc, #28]	@ (8009754 <_fstat_r+0x20>)
 8009738:	2300      	movs	r3, #0
 800973a:	4604      	mov	r4, r0
 800973c:	4608      	mov	r0, r1
 800973e:	4611      	mov	r1, r2
 8009740:	602b      	str	r3, [r5, #0]
 8009742:	f7fa fef5 	bl	8004530 <_fstat>
 8009746:	1c43      	adds	r3, r0, #1
 8009748:	d102      	bne.n	8009750 <_fstat_r+0x1c>
 800974a:	682b      	ldr	r3, [r5, #0]
 800974c:	b103      	cbz	r3, 8009750 <_fstat_r+0x1c>
 800974e:	6023      	str	r3, [r4, #0]
 8009750:	bd38      	pop	{r3, r4, r5, pc}
 8009752:	bf00      	nop
 8009754:	20004e04 	.word	0x20004e04

08009758 <_isatty_r>:
 8009758:	b538      	push	{r3, r4, r5, lr}
 800975a:	4d06      	ldr	r5, [pc, #24]	@ (8009774 <_isatty_r+0x1c>)
 800975c:	2300      	movs	r3, #0
 800975e:	4604      	mov	r4, r0
 8009760:	4608      	mov	r0, r1
 8009762:	602b      	str	r3, [r5, #0]
 8009764:	f7fa fef4 	bl	8004550 <_isatty>
 8009768:	1c43      	adds	r3, r0, #1
 800976a:	d102      	bne.n	8009772 <_isatty_r+0x1a>
 800976c:	682b      	ldr	r3, [r5, #0]
 800976e:	b103      	cbz	r3, 8009772 <_isatty_r+0x1a>
 8009770:	6023      	str	r3, [r4, #0]
 8009772:	bd38      	pop	{r3, r4, r5, pc}
 8009774:	20004e04 	.word	0x20004e04

08009778 <pow>:
 8009778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800977a:	ed2d 8b02 	vpush	{d8}
 800977e:	eeb0 8a40 	vmov.f32	s16, s0
 8009782:	eef0 8a60 	vmov.f32	s17, s1
 8009786:	ec55 4b11 	vmov	r4, r5, d1
 800978a:	f000 f975 	bl	8009a78 <__ieee754_pow>
 800978e:	4622      	mov	r2, r4
 8009790:	462b      	mov	r3, r5
 8009792:	4620      	mov	r0, r4
 8009794:	4629      	mov	r1, r5
 8009796:	ec57 6b10 	vmov	r6, r7, d0
 800979a:	f7f7 f9bf 	bl	8000b1c <__aeabi_dcmpun>
 800979e:	2800      	cmp	r0, #0
 80097a0:	d13b      	bne.n	800981a <pow+0xa2>
 80097a2:	ec51 0b18 	vmov	r0, r1, d8
 80097a6:	2200      	movs	r2, #0
 80097a8:	2300      	movs	r3, #0
 80097aa:	f7f7 f985 	bl	8000ab8 <__aeabi_dcmpeq>
 80097ae:	b1b8      	cbz	r0, 80097e0 <pow+0x68>
 80097b0:	2200      	movs	r2, #0
 80097b2:	2300      	movs	r3, #0
 80097b4:	4620      	mov	r0, r4
 80097b6:	4629      	mov	r1, r5
 80097b8:	f7f7 f97e 	bl	8000ab8 <__aeabi_dcmpeq>
 80097bc:	2800      	cmp	r0, #0
 80097be:	d146      	bne.n	800984e <pow+0xd6>
 80097c0:	ec45 4b10 	vmov	d0, r4, r5
 80097c4:	f000 f874 	bl	80098b0 <finite>
 80097c8:	b338      	cbz	r0, 800981a <pow+0xa2>
 80097ca:	2200      	movs	r2, #0
 80097cc:	2300      	movs	r3, #0
 80097ce:	4620      	mov	r0, r4
 80097d0:	4629      	mov	r1, r5
 80097d2:	f7f7 f97b 	bl	8000acc <__aeabi_dcmplt>
 80097d6:	b300      	cbz	r0, 800981a <pow+0xa2>
 80097d8:	f7ff f984 	bl	8008ae4 <__errno>
 80097dc:	2322      	movs	r3, #34	@ 0x22
 80097de:	e01b      	b.n	8009818 <pow+0xa0>
 80097e0:	ec47 6b10 	vmov	d0, r6, r7
 80097e4:	f000 f864 	bl	80098b0 <finite>
 80097e8:	b9e0      	cbnz	r0, 8009824 <pow+0xac>
 80097ea:	eeb0 0a48 	vmov.f32	s0, s16
 80097ee:	eef0 0a68 	vmov.f32	s1, s17
 80097f2:	f000 f85d 	bl	80098b0 <finite>
 80097f6:	b1a8      	cbz	r0, 8009824 <pow+0xac>
 80097f8:	ec45 4b10 	vmov	d0, r4, r5
 80097fc:	f000 f858 	bl	80098b0 <finite>
 8009800:	b180      	cbz	r0, 8009824 <pow+0xac>
 8009802:	4632      	mov	r2, r6
 8009804:	463b      	mov	r3, r7
 8009806:	4630      	mov	r0, r6
 8009808:	4639      	mov	r1, r7
 800980a:	f7f7 f987 	bl	8000b1c <__aeabi_dcmpun>
 800980e:	2800      	cmp	r0, #0
 8009810:	d0e2      	beq.n	80097d8 <pow+0x60>
 8009812:	f7ff f967 	bl	8008ae4 <__errno>
 8009816:	2321      	movs	r3, #33	@ 0x21
 8009818:	6003      	str	r3, [r0, #0]
 800981a:	ecbd 8b02 	vpop	{d8}
 800981e:	ec47 6b10 	vmov	d0, r6, r7
 8009822:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009824:	2200      	movs	r2, #0
 8009826:	2300      	movs	r3, #0
 8009828:	4630      	mov	r0, r6
 800982a:	4639      	mov	r1, r7
 800982c:	f7f7 f944 	bl	8000ab8 <__aeabi_dcmpeq>
 8009830:	2800      	cmp	r0, #0
 8009832:	d0f2      	beq.n	800981a <pow+0xa2>
 8009834:	eeb0 0a48 	vmov.f32	s0, s16
 8009838:	eef0 0a68 	vmov.f32	s1, s17
 800983c:	f000 f838 	bl	80098b0 <finite>
 8009840:	2800      	cmp	r0, #0
 8009842:	d0ea      	beq.n	800981a <pow+0xa2>
 8009844:	ec45 4b10 	vmov	d0, r4, r5
 8009848:	f000 f832 	bl	80098b0 <finite>
 800984c:	e7c3      	b.n	80097d6 <pow+0x5e>
 800984e:	4f01      	ldr	r7, [pc, #4]	@ (8009854 <pow+0xdc>)
 8009850:	2600      	movs	r6, #0
 8009852:	e7e2      	b.n	800981a <pow+0xa2>
 8009854:	3ff00000 	.word	0x3ff00000

08009858 <sqrt>:
 8009858:	b538      	push	{r3, r4, r5, lr}
 800985a:	ed2d 8b02 	vpush	{d8}
 800985e:	ec55 4b10 	vmov	r4, r5, d0
 8009862:	f000 f831 	bl	80098c8 <__ieee754_sqrt>
 8009866:	4622      	mov	r2, r4
 8009868:	462b      	mov	r3, r5
 800986a:	4620      	mov	r0, r4
 800986c:	4629      	mov	r1, r5
 800986e:	eeb0 8a40 	vmov.f32	s16, s0
 8009872:	eef0 8a60 	vmov.f32	s17, s1
 8009876:	f7f7 f951 	bl	8000b1c <__aeabi_dcmpun>
 800987a:	b990      	cbnz	r0, 80098a2 <sqrt+0x4a>
 800987c:	2200      	movs	r2, #0
 800987e:	2300      	movs	r3, #0
 8009880:	4620      	mov	r0, r4
 8009882:	4629      	mov	r1, r5
 8009884:	f7f7 f922 	bl	8000acc <__aeabi_dcmplt>
 8009888:	b158      	cbz	r0, 80098a2 <sqrt+0x4a>
 800988a:	f7ff f92b 	bl	8008ae4 <__errno>
 800988e:	2321      	movs	r3, #33	@ 0x21
 8009890:	6003      	str	r3, [r0, #0]
 8009892:	2200      	movs	r2, #0
 8009894:	2300      	movs	r3, #0
 8009896:	4610      	mov	r0, r2
 8009898:	4619      	mov	r1, r3
 800989a:	f7f6 ffcf 	bl	800083c <__aeabi_ddiv>
 800989e:	ec41 0b18 	vmov	d8, r0, r1
 80098a2:	eeb0 0a48 	vmov.f32	s0, s16
 80098a6:	eef0 0a68 	vmov.f32	s1, s17
 80098aa:	ecbd 8b02 	vpop	{d8}
 80098ae:	bd38      	pop	{r3, r4, r5, pc}

080098b0 <finite>:
 80098b0:	b082      	sub	sp, #8
 80098b2:	ed8d 0b00 	vstr	d0, [sp]
 80098b6:	9801      	ldr	r0, [sp, #4]
 80098b8:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 80098bc:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 80098c0:	0fc0      	lsrs	r0, r0, #31
 80098c2:	b002      	add	sp, #8
 80098c4:	4770      	bx	lr
	...

080098c8 <__ieee754_sqrt>:
 80098c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098cc:	4a66      	ldr	r2, [pc, #408]	@ (8009a68 <__ieee754_sqrt+0x1a0>)
 80098ce:	ec55 4b10 	vmov	r4, r5, d0
 80098d2:	43aa      	bics	r2, r5
 80098d4:	462b      	mov	r3, r5
 80098d6:	4621      	mov	r1, r4
 80098d8:	d110      	bne.n	80098fc <__ieee754_sqrt+0x34>
 80098da:	4622      	mov	r2, r4
 80098dc:	4620      	mov	r0, r4
 80098de:	4629      	mov	r1, r5
 80098e0:	f7f6 fe82 	bl	80005e8 <__aeabi_dmul>
 80098e4:	4602      	mov	r2, r0
 80098e6:	460b      	mov	r3, r1
 80098e8:	4620      	mov	r0, r4
 80098ea:	4629      	mov	r1, r5
 80098ec:	f7f6 fcc6 	bl	800027c <__adddf3>
 80098f0:	4604      	mov	r4, r0
 80098f2:	460d      	mov	r5, r1
 80098f4:	ec45 4b10 	vmov	d0, r4, r5
 80098f8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098fc:	2d00      	cmp	r5, #0
 80098fe:	dc0e      	bgt.n	800991e <__ieee754_sqrt+0x56>
 8009900:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8009904:	4322      	orrs	r2, r4
 8009906:	d0f5      	beq.n	80098f4 <__ieee754_sqrt+0x2c>
 8009908:	b19d      	cbz	r5, 8009932 <__ieee754_sqrt+0x6a>
 800990a:	4622      	mov	r2, r4
 800990c:	4620      	mov	r0, r4
 800990e:	4629      	mov	r1, r5
 8009910:	f7f6 fcb2 	bl	8000278 <__aeabi_dsub>
 8009914:	4602      	mov	r2, r0
 8009916:	460b      	mov	r3, r1
 8009918:	f7f6 ff90 	bl	800083c <__aeabi_ddiv>
 800991c:	e7e8      	b.n	80098f0 <__ieee754_sqrt+0x28>
 800991e:	152a      	asrs	r2, r5, #20
 8009920:	d115      	bne.n	800994e <__ieee754_sqrt+0x86>
 8009922:	2000      	movs	r0, #0
 8009924:	e009      	b.n	800993a <__ieee754_sqrt+0x72>
 8009926:	0acb      	lsrs	r3, r1, #11
 8009928:	3a15      	subs	r2, #21
 800992a:	0549      	lsls	r1, r1, #21
 800992c:	2b00      	cmp	r3, #0
 800992e:	d0fa      	beq.n	8009926 <__ieee754_sqrt+0x5e>
 8009930:	e7f7      	b.n	8009922 <__ieee754_sqrt+0x5a>
 8009932:	462a      	mov	r2, r5
 8009934:	e7fa      	b.n	800992c <__ieee754_sqrt+0x64>
 8009936:	005b      	lsls	r3, r3, #1
 8009938:	3001      	adds	r0, #1
 800993a:	02dc      	lsls	r4, r3, #11
 800993c:	d5fb      	bpl.n	8009936 <__ieee754_sqrt+0x6e>
 800993e:	1e44      	subs	r4, r0, #1
 8009940:	1b12      	subs	r2, r2, r4
 8009942:	f1c0 0420 	rsb	r4, r0, #32
 8009946:	fa21 f404 	lsr.w	r4, r1, r4
 800994a:	4323      	orrs	r3, r4
 800994c:	4081      	lsls	r1, r0
 800994e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009952:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 8009956:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800995a:	07d2      	lsls	r2, r2, #31
 800995c:	bf5c      	itt	pl
 800995e:	005b      	lslpl	r3, r3, #1
 8009960:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8009964:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009968:	bf58      	it	pl
 800996a:	0049      	lslpl	r1, r1, #1
 800996c:	2600      	movs	r6, #0
 800996e:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8009972:	107f      	asrs	r7, r7, #1
 8009974:	0049      	lsls	r1, r1, #1
 8009976:	2016      	movs	r0, #22
 8009978:	4632      	mov	r2, r6
 800997a:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800997e:	1915      	adds	r5, r2, r4
 8009980:	429d      	cmp	r5, r3
 8009982:	bfde      	ittt	le
 8009984:	192a      	addle	r2, r5, r4
 8009986:	1b5b      	suble	r3, r3, r5
 8009988:	1936      	addle	r6, r6, r4
 800998a:	0fcd      	lsrs	r5, r1, #31
 800998c:	3801      	subs	r0, #1
 800998e:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8009992:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8009996:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800999a:	d1f0      	bne.n	800997e <__ieee754_sqrt+0xb6>
 800999c:	4605      	mov	r5, r0
 800999e:	2420      	movs	r4, #32
 80099a0:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80099a4:	4293      	cmp	r3, r2
 80099a6:	eb0c 0e00 	add.w	lr, ip, r0
 80099aa:	dc02      	bgt.n	80099b2 <__ieee754_sqrt+0xea>
 80099ac:	d113      	bne.n	80099d6 <__ieee754_sqrt+0x10e>
 80099ae:	458e      	cmp	lr, r1
 80099b0:	d811      	bhi.n	80099d6 <__ieee754_sqrt+0x10e>
 80099b2:	f1be 0f00 	cmp.w	lr, #0
 80099b6:	eb0e 000c 	add.w	r0, lr, ip
 80099ba:	da3f      	bge.n	8009a3c <__ieee754_sqrt+0x174>
 80099bc:	2800      	cmp	r0, #0
 80099be:	db3d      	blt.n	8009a3c <__ieee754_sqrt+0x174>
 80099c0:	f102 0801 	add.w	r8, r2, #1
 80099c4:	1a9b      	subs	r3, r3, r2
 80099c6:	458e      	cmp	lr, r1
 80099c8:	bf88      	it	hi
 80099ca:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80099ce:	eba1 010e 	sub.w	r1, r1, lr
 80099d2:	4465      	add	r5, ip
 80099d4:	4642      	mov	r2, r8
 80099d6:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 80099da:	3c01      	subs	r4, #1
 80099dc:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 80099e0:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80099e4:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 80099e8:	d1dc      	bne.n	80099a4 <__ieee754_sqrt+0xdc>
 80099ea:	4319      	orrs	r1, r3
 80099ec:	d01b      	beq.n	8009a26 <__ieee754_sqrt+0x15e>
 80099ee:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 8009a6c <__ieee754_sqrt+0x1a4>
 80099f2:	f8df b07c 	ldr.w	fp, [pc, #124]	@ 8009a70 <__ieee754_sqrt+0x1a8>
 80099f6:	e9da 0100 	ldrd	r0, r1, [sl]
 80099fa:	e9db 2300 	ldrd	r2, r3, [fp]
 80099fe:	f7f6 fc3b 	bl	8000278 <__aeabi_dsub>
 8009a02:	e9da 8900 	ldrd	r8, r9, [sl]
 8009a06:	4602      	mov	r2, r0
 8009a08:	460b      	mov	r3, r1
 8009a0a:	4640      	mov	r0, r8
 8009a0c:	4649      	mov	r1, r9
 8009a0e:	f7f7 f867 	bl	8000ae0 <__aeabi_dcmple>
 8009a12:	b140      	cbz	r0, 8009a26 <__ieee754_sqrt+0x15e>
 8009a14:	f1b5 3fff 	cmp.w	r5, #4294967295
 8009a18:	e9da 0100 	ldrd	r0, r1, [sl]
 8009a1c:	e9db 2300 	ldrd	r2, r3, [fp]
 8009a20:	d10e      	bne.n	8009a40 <__ieee754_sqrt+0x178>
 8009a22:	3601      	adds	r6, #1
 8009a24:	4625      	mov	r5, r4
 8009a26:	1073      	asrs	r3, r6, #1
 8009a28:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 8009a2c:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 8009a30:	eb03 5107 	add.w	r1, r3, r7, lsl #20
 8009a34:	086b      	lsrs	r3, r5, #1
 8009a36:	ea43 70c6 	orr.w	r0, r3, r6, lsl #31
 8009a3a:	e759      	b.n	80098f0 <__ieee754_sqrt+0x28>
 8009a3c:	4690      	mov	r8, r2
 8009a3e:	e7c1      	b.n	80099c4 <__ieee754_sqrt+0xfc>
 8009a40:	f7f6 fc1c 	bl	800027c <__adddf3>
 8009a44:	e9da 8900 	ldrd	r8, r9, [sl]
 8009a48:	4602      	mov	r2, r0
 8009a4a:	460b      	mov	r3, r1
 8009a4c:	4640      	mov	r0, r8
 8009a4e:	4649      	mov	r1, r9
 8009a50:	f7f7 f83c 	bl	8000acc <__aeabi_dcmplt>
 8009a54:	b120      	cbz	r0, 8009a60 <__ieee754_sqrt+0x198>
 8009a56:	1cab      	adds	r3, r5, #2
 8009a58:	bf08      	it	eq
 8009a5a:	3601      	addeq	r6, #1
 8009a5c:	3502      	adds	r5, #2
 8009a5e:	e7e2      	b.n	8009a26 <__ieee754_sqrt+0x15e>
 8009a60:	1c6b      	adds	r3, r5, #1
 8009a62:	f023 0501 	bic.w	r5, r3, #1
 8009a66:	e7de      	b.n	8009a26 <__ieee754_sqrt+0x15e>
 8009a68:	7ff00000 	.word	0x7ff00000
 8009a6c:	0800af50 	.word	0x0800af50
 8009a70:	0800af48 	.word	0x0800af48
 8009a74:	00000000 	.word	0x00000000

08009a78 <__ieee754_pow>:
 8009a78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a7c:	b091      	sub	sp, #68	@ 0x44
 8009a7e:	ed8d 1b00 	vstr	d1, [sp]
 8009a82:	e9dd 1900 	ldrd	r1, r9, [sp]
 8009a86:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 8009a8a:	ea5a 0001 	orrs.w	r0, sl, r1
 8009a8e:	ec57 6b10 	vmov	r6, r7, d0
 8009a92:	d113      	bne.n	8009abc <__ieee754_pow+0x44>
 8009a94:	19b3      	adds	r3, r6, r6
 8009a96:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 8009a9a:	4152      	adcs	r2, r2
 8009a9c:	4298      	cmp	r0, r3
 8009a9e:	4b9a      	ldr	r3, [pc, #616]	@ (8009d08 <__ieee754_pow+0x290>)
 8009aa0:	4193      	sbcs	r3, r2
 8009aa2:	f080 84ee 	bcs.w	800a482 <__ieee754_pow+0xa0a>
 8009aa6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009aaa:	4630      	mov	r0, r6
 8009aac:	4639      	mov	r1, r7
 8009aae:	f7f6 fbe5 	bl	800027c <__adddf3>
 8009ab2:	ec41 0b10 	vmov	d0, r0, r1
 8009ab6:	b011      	add	sp, #68	@ 0x44
 8009ab8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009abc:	4a93      	ldr	r2, [pc, #588]	@ (8009d0c <__ieee754_pow+0x294>)
 8009abe:	f027 4500 	bic.w	r5, r7, #2147483648	@ 0x80000000
 8009ac2:	4295      	cmp	r5, r2
 8009ac4:	46b8      	mov	r8, r7
 8009ac6:	4633      	mov	r3, r6
 8009ac8:	d80a      	bhi.n	8009ae0 <__ieee754_pow+0x68>
 8009aca:	d104      	bne.n	8009ad6 <__ieee754_pow+0x5e>
 8009acc:	2e00      	cmp	r6, #0
 8009ace:	d1ea      	bne.n	8009aa6 <__ieee754_pow+0x2e>
 8009ad0:	45aa      	cmp	sl, r5
 8009ad2:	d8e8      	bhi.n	8009aa6 <__ieee754_pow+0x2e>
 8009ad4:	e001      	b.n	8009ada <__ieee754_pow+0x62>
 8009ad6:	4592      	cmp	sl, r2
 8009ad8:	d802      	bhi.n	8009ae0 <__ieee754_pow+0x68>
 8009ada:	4592      	cmp	sl, r2
 8009adc:	d10f      	bne.n	8009afe <__ieee754_pow+0x86>
 8009ade:	b171      	cbz	r1, 8009afe <__ieee754_pow+0x86>
 8009ae0:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 8009ae4:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8009ae8:	ea58 0803 	orrs.w	r8, r8, r3
 8009aec:	d1db      	bne.n	8009aa6 <__ieee754_pow+0x2e>
 8009aee:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009af2:	18db      	adds	r3, r3, r3
 8009af4:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8009af8:	4152      	adcs	r2, r2
 8009afa:	4598      	cmp	r8, r3
 8009afc:	e7cf      	b.n	8009a9e <__ieee754_pow+0x26>
 8009afe:	f1b8 0f00 	cmp.w	r8, #0
 8009b02:	46ab      	mov	fp, r5
 8009b04:	da43      	bge.n	8009b8e <__ieee754_pow+0x116>
 8009b06:	4a82      	ldr	r2, [pc, #520]	@ (8009d10 <__ieee754_pow+0x298>)
 8009b08:	4592      	cmp	sl, r2
 8009b0a:	d856      	bhi.n	8009bba <__ieee754_pow+0x142>
 8009b0c:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8009b10:	4592      	cmp	sl, r2
 8009b12:	f240 84c5 	bls.w	800a4a0 <__ieee754_pow+0xa28>
 8009b16:	ea4f 522a 	mov.w	r2, sl, asr #20
 8009b1a:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8009b1e:	2a14      	cmp	r2, #20
 8009b20:	dd18      	ble.n	8009b54 <__ieee754_pow+0xdc>
 8009b22:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8009b26:	fa21 f402 	lsr.w	r4, r1, r2
 8009b2a:	fa04 f202 	lsl.w	r2, r4, r2
 8009b2e:	428a      	cmp	r2, r1
 8009b30:	f040 84b6 	bne.w	800a4a0 <__ieee754_pow+0xa28>
 8009b34:	f004 0401 	and.w	r4, r4, #1
 8009b38:	f1c4 0402 	rsb	r4, r4, #2
 8009b3c:	2900      	cmp	r1, #0
 8009b3e:	d159      	bne.n	8009bf4 <__ieee754_pow+0x17c>
 8009b40:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 8009b44:	d148      	bne.n	8009bd8 <__ieee754_pow+0x160>
 8009b46:	4632      	mov	r2, r6
 8009b48:	463b      	mov	r3, r7
 8009b4a:	4630      	mov	r0, r6
 8009b4c:	4639      	mov	r1, r7
 8009b4e:	f7f6 fd4b 	bl	80005e8 <__aeabi_dmul>
 8009b52:	e7ae      	b.n	8009ab2 <__ieee754_pow+0x3a>
 8009b54:	2900      	cmp	r1, #0
 8009b56:	d14c      	bne.n	8009bf2 <__ieee754_pow+0x17a>
 8009b58:	f1c2 0214 	rsb	r2, r2, #20
 8009b5c:	fa4a f402 	asr.w	r4, sl, r2
 8009b60:	fa04 f202 	lsl.w	r2, r4, r2
 8009b64:	4552      	cmp	r2, sl
 8009b66:	f040 8498 	bne.w	800a49a <__ieee754_pow+0xa22>
 8009b6a:	f004 0401 	and.w	r4, r4, #1
 8009b6e:	f1c4 0402 	rsb	r4, r4, #2
 8009b72:	4a68      	ldr	r2, [pc, #416]	@ (8009d14 <__ieee754_pow+0x29c>)
 8009b74:	4592      	cmp	sl, r2
 8009b76:	d1e3      	bne.n	8009b40 <__ieee754_pow+0xc8>
 8009b78:	f1b9 0f00 	cmp.w	r9, #0
 8009b7c:	f280 8489 	bge.w	800a492 <__ieee754_pow+0xa1a>
 8009b80:	4964      	ldr	r1, [pc, #400]	@ (8009d14 <__ieee754_pow+0x29c>)
 8009b82:	4632      	mov	r2, r6
 8009b84:	463b      	mov	r3, r7
 8009b86:	2000      	movs	r0, #0
 8009b88:	f7f6 fe58 	bl	800083c <__aeabi_ddiv>
 8009b8c:	e791      	b.n	8009ab2 <__ieee754_pow+0x3a>
 8009b8e:	2400      	movs	r4, #0
 8009b90:	bb81      	cbnz	r1, 8009bf4 <__ieee754_pow+0x17c>
 8009b92:	4a5e      	ldr	r2, [pc, #376]	@ (8009d0c <__ieee754_pow+0x294>)
 8009b94:	4592      	cmp	sl, r2
 8009b96:	d1ec      	bne.n	8009b72 <__ieee754_pow+0xfa>
 8009b98:	f105 4240 	add.w	r2, r5, #3221225472	@ 0xc0000000
 8009b9c:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 8009ba0:	431a      	orrs	r2, r3
 8009ba2:	f000 846e 	beq.w	800a482 <__ieee754_pow+0xa0a>
 8009ba6:	4b5c      	ldr	r3, [pc, #368]	@ (8009d18 <__ieee754_pow+0x2a0>)
 8009ba8:	429d      	cmp	r5, r3
 8009baa:	d908      	bls.n	8009bbe <__ieee754_pow+0x146>
 8009bac:	f1b9 0f00 	cmp.w	r9, #0
 8009bb0:	f280 846b 	bge.w	800a48a <__ieee754_pow+0xa12>
 8009bb4:	2000      	movs	r0, #0
 8009bb6:	2100      	movs	r1, #0
 8009bb8:	e77b      	b.n	8009ab2 <__ieee754_pow+0x3a>
 8009bba:	2402      	movs	r4, #2
 8009bbc:	e7e8      	b.n	8009b90 <__ieee754_pow+0x118>
 8009bbe:	f1b9 0f00 	cmp.w	r9, #0
 8009bc2:	f04f 0000 	mov.w	r0, #0
 8009bc6:	f04f 0100 	mov.w	r1, #0
 8009bca:	f6bf af72 	bge.w	8009ab2 <__ieee754_pow+0x3a>
 8009bce:	e9dd 0300 	ldrd	r0, r3, [sp]
 8009bd2:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8009bd6:	e76c      	b.n	8009ab2 <__ieee754_pow+0x3a>
 8009bd8:	4a50      	ldr	r2, [pc, #320]	@ (8009d1c <__ieee754_pow+0x2a4>)
 8009bda:	4591      	cmp	r9, r2
 8009bdc:	d10a      	bne.n	8009bf4 <__ieee754_pow+0x17c>
 8009bde:	f1b8 0f00 	cmp.w	r8, #0
 8009be2:	db07      	blt.n	8009bf4 <__ieee754_pow+0x17c>
 8009be4:	ec47 6b10 	vmov	d0, r6, r7
 8009be8:	b011      	add	sp, #68	@ 0x44
 8009bea:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bee:	f7ff be6b 	b.w	80098c8 <__ieee754_sqrt>
 8009bf2:	2400      	movs	r4, #0
 8009bf4:	ec47 6b10 	vmov	d0, r6, r7
 8009bf8:	9302      	str	r3, [sp, #8]
 8009bfa:	f000 fc87 	bl	800a50c <fabs>
 8009bfe:	9b02      	ldr	r3, [sp, #8]
 8009c00:	ec51 0b10 	vmov	r0, r1, d0
 8009c04:	bb43      	cbnz	r3, 8009c58 <__ieee754_pow+0x1e0>
 8009c06:	4b43      	ldr	r3, [pc, #268]	@ (8009d14 <__ieee754_pow+0x29c>)
 8009c08:	f028 4240 	bic.w	r2, r8, #3221225472	@ 0xc0000000
 8009c0c:	429a      	cmp	r2, r3
 8009c0e:	d000      	beq.n	8009c12 <__ieee754_pow+0x19a>
 8009c10:	bb15      	cbnz	r5, 8009c58 <__ieee754_pow+0x1e0>
 8009c12:	f1b9 0f00 	cmp.w	r9, #0
 8009c16:	da05      	bge.n	8009c24 <__ieee754_pow+0x1ac>
 8009c18:	4602      	mov	r2, r0
 8009c1a:	460b      	mov	r3, r1
 8009c1c:	2000      	movs	r0, #0
 8009c1e:	493d      	ldr	r1, [pc, #244]	@ (8009d14 <__ieee754_pow+0x29c>)
 8009c20:	f7f6 fe0c 	bl	800083c <__aeabi_ddiv>
 8009c24:	f1b8 0f00 	cmp.w	r8, #0
 8009c28:	f6bf af43 	bge.w	8009ab2 <__ieee754_pow+0x3a>
 8009c2c:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8009c30:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8009c34:	4325      	orrs	r5, r4
 8009c36:	d108      	bne.n	8009c4a <__ieee754_pow+0x1d2>
 8009c38:	4602      	mov	r2, r0
 8009c3a:	460b      	mov	r3, r1
 8009c3c:	4610      	mov	r0, r2
 8009c3e:	4619      	mov	r1, r3
 8009c40:	f7f6 fb1a 	bl	8000278 <__aeabi_dsub>
 8009c44:	4602      	mov	r2, r0
 8009c46:	460b      	mov	r3, r1
 8009c48:	e79e      	b.n	8009b88 <__ieee754_pow+0x110>
 8009c4a:	2c01      	cmp	r4, #1
 8009c4c:	f47f af31 	bne.w	8009ab2 <__ieee754_pow+0x3a>
 8009c50:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009c54:	4619      	mov	r1, r3
 8009c56:	e72c      	b.n	8009ab2 <__ieee754_pow+0x3a>
 8009c58:	ea4f 73d8 	mov.w	r3, r8, lsr #31
 8009c5c:	3b01      	subs	r3, #1
 8009c5e:	ea53 0204 	orrs.w	r2, r3, r4
 8009c62:	d102      	bne.n	8009c6a <__ieee754_pow+0x1f2>
 8009c64:	4632      	mov	r2, r6
 8009c66:	463b      	mov	r3, r7
 8009c68:	e7e8      	b.n	8009c3c <__ieee754_pow+0x1c4>
 8009c6a:	3c01      	subs	r4, #1
 8009c6c:	431c      	orrs	r4, r3
 8009c6e:	d016      	beq.n	8009c9e <__ieee754_pow+0x226>
 8009c70:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8009cf8 <__ieee754_pow+0x280>
 8009c74:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 8009c78:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009c7c:	f240 8110 	bls.w	8009ea0 <__ieee754_pow+0x428>
 8009c80:	4b27      	ldr	r3, [pc, #156]	@ (8009d20 <__ieee754_pow+0x2a8>)
 8009c82:	459a      	cmp	sl, r3
 8009c84:	4b24      	ldr	r3, [pc, #144]	@ (8009d18 <__ieee754_pow+0x2a0>)
 8009c86:	d916      	bls.n	8009cb6 <__ieee754_pow+0x23e>
 8009c88:	429d      	cmp	r5, r3
 8009c8a:	d80b      	bhi.n	8009ca4 <__ieee754_pow+0x22c>
 8009c8c:	f1b9 0f00 	cmp.w	r9, #0
 8009c90:	da0b      	bge.n	8009caa <__ieee754_pow+0x232>
 8009c92:	2000      	movs	r0, #0
 8009c94:	b011      	add	sp, #68	@ 0x44
 8009c96:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c9a:	f000 bcf1 	b.w	800a680 <__math_oflow>
 8009c9e:	ed9f 7b18 	vldr	d7, [pc, #96]	@ 8009d00 <__ieee754_pow+0x288>
 8009ca2:	e7e7      	b.n	8009c74 <__ieee754_pow+0x1fc>
 8009ca4:	f1b9 0f00 	cmp.w	r9, #0
 8009ca8:	dcf3      	bgt.n	8009c92 <__ieee754_pow+0x21a>
 8009caa:	2000      	movs	r0, #0
 8009cac:	b011      	add	sp, #68	@ 0x44
 8009cae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cb2:	f000 bcdd 	b.w	800a670 <__math_uflow>
 8009cb6:	429d      	cmp	r5, r3
 8009cb8:	d20c      	bcs.n	8009cd4 <__ieee754_pow+0x25c>
 8009cba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009cbe:	2200      	movs	r2, #0
 8009cc0:	2300      	movs	r3, #0
 8009cc2:	f7f6 ff03 	bl	8000acc <__aeabi_dcmplt>
 8009cc6:	3800      	subs	r0, #0
 8009cc8:	bf18      	it	ne
 8009cca:	2001      	movne	r0, #1
 8009ccc:	f1b9 0f00 	cmp.w	r9, #0
 8009cd0:	daec      	bge.n	8009cac <__ieee754_pow+0x234>
 8009cd2:	e7df      	b.n	8009c94 <__ieee754_pow+0x21c>
 8009cd4:	4b0f      	ldr	r3, [pc, #60]	@ (8009d14 <__ieee754_pow+0x29c>)
 8009cd6:	429d      	cmp	r5, r3
 8009cd8:	f04f 0200 	mov.w	r2, #0
 8009cdc:	d922      	bls.n	8009d24 <__ieee754_pow+0x2ac>
 8009cde:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009ce2:	2300      	movs	r3, #0
 8009ce4:	f7f6 fef2 	bl	8000acc <__aeabi_dcmplt>
 8009ce8:	3800      	subs	r0, #0
 8009cea:	bf18      	it	ne
 8009cec:	2001      	movne	r0, #1
 8009cee:	f1b9 0f00 	cmp.w	r9, #0
 8009cf2:	dccf      	bgt.n	8009c94 <__ieee754_pow+0x21c>
 8009cf4:	e7da      	b.n	8009cac <__ieee754_pow+0x234>
 8009cf6:	bf00      	nop
 8009cf8:	00000000 	.word	0x00000000
 8009cfc:	3ff00000 	.word	0x3ff00000
 8009d00:	00000000 	.word	0x00000000
 8009d04:	bff00000 	.word	0xbff00000
 8009d08:	fff00000 	.word	0xfff00000
 8009d0c:	7ff00000 	.word	0x7ff00000
 8009d10:	433fffff 	.word	0x433fffff
 8009d14:	3ff00000 	.word	0x3ff00000
 8009d18:	3fefffff 	.word	0x3fefffff
 8009d1c:	3fe00000 	.word	0x3fe00000
 8009d20:	43f00000 	.word	0x43f00000
 8009d24:	4b5a      	ldr	r3, [pc, #360]	@ (8009e90 <__ieee754_pow+0x418>)
 8009d26:	f7f6 faa7 	bl	8000278 <__aeabi_dsub>
 8009d2a:	a351      	add	r3, pc, #324	@ (adr r3, 8009e70 <__ieee754_pow+0x3f8>)
 8009d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d30:	4604      	mov	r4, r0
 8009d32:	460d      	mov	r5, r1
 8009d34:	f7f6 fc58 	bl	80005e8 <__aeabi_dmul>
 8009d38:	a34f      	add	r3, pc, #316	@ (adr r3, 8009e78 <__ieee754_pow+0x400>)
 8009d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d3e:	4606      	mov	r6, r0
 8009d40:	460f      	mov	r7, r1
 8009d42:	4620      	mov	r0, r4
 8009d44:	4629      	mov	r1, r5
 8009d46:	f7f6 fc4f 	bl	80005e8 <__aeabi_dmul>
 8009d4a:	4b52      	ldr	r3, [pc, #328]	@ (8009e94 <__ieee754_pow+0x41c>)
 8009d4c:	4682      	mov	sl, r0
 8009d4e:	468b      	mov	fp, r1
 8009d50:	2200      	movs	r2, #0
 8009d52:	4620      	mov	r0, r4
 8009d54:	4629      	mov	r1, r5
 8009d56:	f7f6 fc47 	bl	80005e8 <__aeabi_dmul>
 8009d5a:	4602      	mov	r2, r0
 8009d5c:	460b      	mov	r3, r1
 8009d5e:	a148      	add	r1, pc, #288	@ (adr r1, 8009e80 <__ieee754_pow+0x408>)
 8009d60:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009d64:	f7f6 fa88 	bl	8000278 <__aeabi_dsub>
 8009d68:	4622      	mov	r2, r4
 8009d6a:	462b      	mov	r3, r5
 8009d6c:	f7f6 fc3c 	bl	80005e8 <__aeabi_dmul>
 8009d70:	4602      	mov	r2, r0
 8009d72:	460b      	mov	r3, r1
 8009d74:	2000      	movs	r0, #0
 8009d76:	4948      	ldr	r1, [pc, #288]	@ (8009e98 <__ieee754_pow+0x420>)
 8009d78:	f7f6 fa7e 	bl	8000278 <__aeabi_dsub>
 8009d7c:	4622      	mov	r2, r4
 8009d7e:	4680      	mov	r8, r0
 8009d80:	4689      	mov	r9, r1
 8009d82:	462b      	mov	r3, r5
 8009d84:	4620      	mov	r0, r4
 8009d86:	4629      	mov	r1, r5
 8009d88:	f7f6 fc2e 	bl	80005e8 <__aeabi_dmul>
 8009d8c:	4602      	mov	r2, r0
 8009d8e:	460b      	mov	r3, r1
 8009d90:	4640      	mov	r0, r8
 8009d92:	4649      	mov	r1, r9
 8009d94:	f7f6 fc28 	bl	80005e8 <__aeabi_dmul>
 8009d98:	a33b      	add	r3, pc, #236	@ (adr r3, 8009e88 <__ieee754_pow+0x410>)
 8009d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d9e:	f7f6 fc23 	bl	80005e8 <__aeabi_dmul>
 8009da2:	4602      	mov	r2, r0
 8009da4:	460b      	mov	r3, r1
 8009da6:	4650      	mov	r0, sl
 8009da8:	4659      	mov	r1, fp
 8009daa:	f7f6 fa65 	bl	8000278 <__aeabi_dsub>
 8009dae:	4602      	mov	r2, r0
 8009db0:	460b      	mov	r3, r1
 8009db2:	4680      	mov	r8, r0
 8009db4:	4689      	mov	r9, r1
 8009db6:	4630      	mov	r0, r6
 8009db8:	4639      	mov	r1, r7
 8009dba:	f7f6 fa5f 	bl	800027c <__adddf3>
 8009dbe:	2400      	movs	r4, #0
 8009dc0:	4632      	mov	r2, r6
 8009dc2:	463b      	mov	r3, r7
 8009dc4:	4620      	mov	r0, r4
 8009dc6:	460d      	mov	r5, r1
 8009dc8:	f7f6 fa56 	bl	8000278 <__aeabi_dsub>
 8009dcc:	4602      	mov	r2, r0
 8009dce:	460b      	mov	r3, r1
 8009dd0:	4640      	mov	r0, r8
 8009dd2:	4649      	mov	r1, r9
 8009dd4:	f7f6 fa50 	bl	8000278 <__aeabi_dsub>
 8009dd8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009ddc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009de0:	2300      	movs	r3, #0
 8009de2:	9304      	str	r3, [sp, #16]
 8009de4:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8009de8:	4606      	mov	r6, r0
 8009dea:	460f      	mov	r7, r1
 8009dec:	465b      	mov	r3, fp
 8009dee:	4652      	mov	r2, sl
 8009df0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009df4:	f7f6 fa40 	bl	8000278 <__aeabi_dsub>
 8009df8:	4622      	mov	r2, r4
 8009dfa:	462b      	mov	r3, r5
 8009dfc:	f7f6 fbf4 	bl	80005e8 <__aeabi_dmul>
 8009e00:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009e04:	4680      	mov	r8, r0
 8009e06:	4689      	mov	r9, r1
 8009e08:	4630      	mov	r0, r6
 8009e0a:	4639      	mov	r1, r7
 8009e0c:	f7f6 fbec 	bl	80005e8 <__aeabi_dmul>
 8009e10:	4602      	mov	r2, r0
 8009e12:	460b      	mov	r3, r1
 8009e14:	4640      	mov	r0, r8
 8009e16:	4649      	mov	r1, r9
 8009e18:	f7f6 fa30 	bl	800027c <__adddf3>
 8009e1c:	465b      	mov	r3, fp
 8009e1e:	4606      	mov	r6, r0
 8009e20:	460f      	mov	r7, r1
 8009e22:	4652      	mov	r2, sl
 8009e24:	4620      	mov	r0, r4
 8009e26:	4629      	mov	r1, r5
 8009e28:	f7f6 fbde 	bl	80005e8 <__aeabi_dmul>
 8009e2c:	460b      	mov	r3, r1
 8009e2e:	4602      	mov	r2, r0
 8009e30:	4680      	mov	r8, r0
 8009e32:	4689      	mov	r9, r1
 8009e34:	4630      	mov	r0, r6
 8009e36:	4639      	mov	r1, r7
 8009e38:	f7f6 fa20 	bl	800027c <__adddf3>
 8009e3c:	4b17      	ldr	r3, [pc, #92]	@ (8009e9c <__ieee754_pow+0x424>)
 8009e3e:	4299      	cmp	r1, r3
 8009e40:	4604      	mov	r4, r0
 8009e42:	460d      	mov	r5, r1
 8009e44:	468b      	mov	fp, r1
 8009e46:	f340 820b 	ble.w	800a260 <__ieee754_pow+0x7e8>
 8009e4a:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8009e4e:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8009e52:	4303      	orrs	r3, r0
 8009e54:	f000 81ea 	beq.w	800a22c <__ieee754_pow+0x7b4>
 8009e58:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009e5c:	2200      	movs	r2, #0
 8009e5e:	2300      	movs	r3, #0
 8009e60:	f7f6 fe34 	bl	8000acc <__aeabi_dcmplt>
 8009e64:	3800      	subs	r0, #0
 8009e66:	bf18      	it	ne
 8009e68:	2001      	movne	r0, #1
 8009e6a:	e713      	b.n	8009c94 <__ieee754_pow+0x21c>
 8009e6c:	f3af 8000 	nop.w
 8009e70:	60000000 	.word	0x60000000
 8009e74:	3ff71547 	.word	0x3ff71547
 8009e78:	f85ddf44 	.word	0xf85ddf44
 8009e7c:	3e54ae0b 	.word	0x3e54ae0b
 8009e80:	55555555 	.word	0x55555555
 8009e84:	3fd55555 	.word	0x3fd55555
 8009e88:	652b82fe 	.word	0x652b82fe
 8009e8c:	3ff71547 	.word	0x3ff71547
 8009e90:	3ff00000 	.word	0x3ff00000
 8009e94:	3fd00000 	.word	0x3fd00000
 8009e98:	3fe00000 	.word	0x3fe00000
 8009e9c:	408fffff 	.word	0x408fffff
 8009ea0:	4bd5      	ldr	r3, [pc, #852]	@ (800a1f8 <__ieee754_pow+0x780>)
 8009ea2:	ea08 0303 	and.w	r3, r8, r3
 8009ea6:	2200      	movs	r2, #0
 8009ea8:	b92b      	cbnz	r3, 8009eb6 <__ieee754_pow+0x43e>
 8009eaa:	4bd4      	ldr	r3, [pc, #848]	@ (800a1fc <__ieee754_pow+0x784>)
 8009eac:	f7f6 fb9c 	bl	80005e8 <__aeabi_dmul>
 8009eb0:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 8009eb4:	468b      	mov	fp, r1
 8009eb6:	ea4f 532b 	mov.w	r3, fp, asr #20
 8009eba:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8009ebe:	4413      	add	r3, r2
 8009ec0:	930a      	str	r3, [sp, #40]	@ 0x28
 8009ec2:	4bcf      	ldr	r3, [pc, #828]	@ (800a200 <__ieee754_pow+0x788>)
 8009ec4:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 8009ec8:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 8009ecc:	459b      	cmp	fp, r3
 8009ece:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8009ed2:	dd08      	ble.n	8009ee6 <__ieee754_pow+0x46e>
 8009ed4:	4bcb      	ldr	r3, [pc, #812]	@ (800a204 <__ieee754_pow+0x78c>)
 8009ed6:	459b      	cmp	fp, r3
 8009ed8:	f340 81a5 	ble.w	800a226 <__ieee754_pow+0x7ae>
 8009edc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009ede:	3301      	adds	r3, #1
 8009ee0:	930a      	str	r3, [sp, #40]	@ 0x28
 8009ee2:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8009ee6:	f04f 0a00 	mov.w	sl, #0
 8009eea:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8009eee:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009ef0:	4bc5      	ldr	r3, [pc, #788]	@ (800a208 <__ieee754_pow+0x790>)
 8009ef2:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009ef6:	ed93 7b00 	vldr	d7, [r3]
 8009efa:	4629      	mov	r1, r5
 8009efc:	ec53 2b17 	vmov	r2, r3, d7
 8009f00:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009f04:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009f08:	f7f6 f9b6 	bl	8000278 <__aeabi_dsub>
 8009f0c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009f10:	4606      	mov	r6, r0
 8009f12:	460f      	mov	r7, r1
 8009f14:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009f18:	f7f6 f9b0 	bl	800027c <__adddf3>
 8009f1c:	4602      	mov	r2, r0
 8009f1e:	460b      	mov	r3, r1
 8009f20:	2000      	movs	r0, #0
 8009f22:	49ba      	ldr	r1, [pc, #744]	@ (800a20c <__ieee754_pow+0x794>)
 8009f24:	f7f6 fc8a 	bl	800083c <__aeabi_ddiv>
 8009f28:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8009f2c:	4602      	mov	r2, r0
 8009f2e:	460b      	mov	r3, r1
 8009f30:	4630      	mov	r0, r6
 8009f32:	4639      	mov	r1, r7
 8009f34:	f7f6 fb58 	bl	80005e8 <__aeabi_dmul>
 8009f38:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009f3c:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 8009f40:	106d      	asrs	r5, r5, #1
 8009f42:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8009f46:	f04f 0b00 	mov.w	fp, #0
 8009f4a:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8009f4e:	4661      	mov	r1, ip
 8009f50:	2200      	movs	r2, #0
 8009f52:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8009f56:	4658      	mov	r0, fp
 8009f58:	46e1      	mov	r9, ip
 8009f5a:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 8009f5e:	4614      	mov	r4, r2
 8009f60:	461d      	mov	r5, r3
 8009f62:	f7f6 fb41 	bl	80005e8 <__aeabi_dmul>
 8009f66:	4602      	mov	r2, r0
 8009f68:	460b      	mov	r3, r1
 8009f6a:	4630      	mov	r0, r6
 8009f6c:	4639      	mov	r1, r7
 8009f6e:	f7f6 f983 	bl	8000278 <__aeabi_dsub>
 8009f72:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009f76:	4606      	mov	r6, r0
 8009f78:	460f      	mov	r7, r1
 8009f7a:	4620      	mov	r0, r4
 8009f7c:	4629      	mov	r1, r5
 8009f7e:	f7f6 f97b 	bl	8000278 <__aeabi_dsub>
 8009f82:	4602      	mov	r2, r0
 8009f84:	460b      	mov	r3, r1
 8009f86:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009f8a:	f7f6 f975 	bl	8000278 <__aeabi_dsub>
 8009f8e:	465a      	mov	r2, fp
 8009f90:	464b      	mov	r3, r9
 8009f92:	f7f6 fb29 	bl	80005e8 <__aeabi_dmul>
 8009f96:	4602      	mov	r2, r0
 8009f98:	460b      	mov	r3, r1
 8009f9a:	4630      	mov	r0, r6
 8009f9c:	4639      	mov	r1, r7
 8009f9e:	f7f6 f96b 	bl	8000278 <__aeabi_dsub>
 8009fa2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8009fa6:	f7f6 fb1f 	bl	80005e8 <__aeabi_dmul>
 8009faa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009fae:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009fb2:	4610      	mov	r0, r2
 8009fb4:	4619      	mov	r1, r3
 8009fb6:	f7f6 fb17 	bl	80005e8 <__aeabi_dmul>
 8009fba:	a37d      	add	r3, pc, #500	@ (adr r3, 800a1b0 <__ieee754_pow+0x738>)
 8009fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fc0:	4604      	mov	r4, r0
 8009fc2:	460d      	mov	r5, r1
 8009fc4:	f7f6 fb10 	bl	80005e8 <__aeabi_dmul>
 8009fc8:	a37b      	add	r3, pc, #492	@ (adr r3, 800a1b8 <__ieee754_pow+0x740>)
 8009fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fce:	f7f6 f955 	bl	800027c <__adddf3>
 8009fd2:	4622      	mov	r2, r4
 8009fd4:	462b      	mov	r3, r5
 8009fd6:	f7f6 fb07 	bl	80005e8 <__aeabi_dmul>
 8009fda:	a379      	add	r3, pc, #484	@ (adr r3, 800a1c0 <__ieee754_pow+0x748>)
 8009fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fe0:	f7f6 f94c 	bl	800027c <__adddf3>
 8009fe4:	4622      	mov	r2, r4
 8009fe6:	462b      	mov	r3, r5
 8009fe8:	f7f6 fafe 	bl	80005e8 <__aeabi_dmul>
 8009fec:	a376      	add	r3, pc, #472	@ (adr r3, 800a1c8 <__ieee754_pow+0x750>)
 8009fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ff2:	f7f6 f943 	bl	800027c <__adddf3>
 8009ff6:	4622      	mov	r2, r4
 8009ff8:	462b      	mov	r3, r5
 8009ffa:	f7f6 faf5 	bl	80005e8 <__aeabi_dmul>
 8009ffe:	a374      	add	r3, pc, #464	@ (adr r3, 800a1d0 <__ieee754_pow+0x758>)
 800a000:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a004:	f7f6 f93a 	bl	800027c <__adddf3>
 800a008:	4622      	mov	r2, r4
 800a00a:	462b      	mov	r3, r5
 800a00c:	f7f6 faec 	bl	80005e8 <__aeabi_dmul>
 800a010:	a371      	add	r3, pc, #452	@ (adr r3, 800a1d8 <__ieee754_pow+0x760>)
 800a012:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a016:	f7f6 f931 	bl	800027c <__adddf3>
 800a01a:	4622      	mov	r2, r4
 800a01c:	4606      	mov	r6, r0
 800a01e:	460f      	mov	r7, r1
 800a020:	462b      	mov	r3, r5
 800a022:	4620      	mov	r0, r4
 800a024:	4629      	mov	r1, r5
 800a026:	f7f6 fadf 	bl	80005e8 <__aeabi_dmul>
 800a02a:	4602      	mov	r2, r0
 800a02c:	460b      	mov	r3, r1
 800a02e:	4630      	mov	r0, r6
 800a030:	4639      	mov	r1, r7
 800a032:	f7f6 fad9 	bl	80005e8 <__aeabi_dmul>
 800a036:	465a      	mov	r2, fp
 800a038:	4604      	mov	r4, r0
 800a03a:	460d      	mov	r5, r1
 800a03c:	464b      	mov	r3, r9
 800a03e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a042:	f7f6 f91b 	bl	800027c <__adddf3>
 800a046:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a04a:	f7f6 facd 	bl	80005e8 <__aeabi_dmul>
 800a04e:	4622      	mov	r2, r4
 800a050:	462b      	mov	r3, r5
 800a052:	f7f6 f913 	bl	800027c <__adddf3>
 800a056:	465a      	mov	r2, fp
 800a058:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a05c:	464b      	mov	r3, r9
 800a05e:	4658      	mov	r0, fp
 800a060:	4649      	mov	r1, r9
 800a062:	f7f6 fac1 	bl	80005e8 <__aeabi_dmul>
 800a066:	4b6a      	ldr	r3, [pc, #424]	@ (800a210 <__ieee754_pow+0x798>)
 800a068:	2200      	movs	r2, #0
 800a06a:	4606      	mov	r6, r0
 800a06c:	460f      	mov	r7, r1
 800a06e:	f7f6 f905 	bl	800027c <__adddf3>
 800a072:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a076:	f7f6 f901 	bl	800027c <__adddf3>
 800a07a:	46d8      	mov	r8, fp
 800a07c:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 800a080:	460d      	mov	r5, r1
 800a082:	465a      	mov	r2, fp
 800a084:	460b      	mov	r3, r1
 800a086:	4640      	mov	r0, r8
 800a088:	4649      	mov	r1, r9
 800a08a:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 800a08e:	f7f6 faab 	bl	80005e8 <__aeabi_dmul>
 800a092:	465c      	mov	r4, fp
 800a094:	4680      	mov	r8, r0
 800a096:	4689      	mov	r9, r1
 800a098:	4b5d      	ldr	r3, [pc, #372]	@ (800a210 <__ieee754_pow+0x798>)
 800a09a:	2200      	movs	r2, #0
 800a09c:	4620      	mov	r0, r4
 800a09e:	4629      	mov	r1, r5
 800a0a0:	f7f6 f8ea 	bl	8000278 <__aeabi_dsub>
 800a0a4:	4632      	mov	r2, r6
 800a0a6:	463b      	mov	r3, r7
 800a0a8:	f7f6 f8e6 	bl	8000278 <__aeabi_dsub>
 800a0ac:	4602      	mov	r2, r0
 800a0ae:	460b      	mov	r3, r1
 800a0b0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a0b4:	f7f6 f8e0 	bl	8000278 <__aeabi_dsub>
 800a0b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a0bc:	f7f6 fa94 	bl	80005e8 <__aeabi_dmul>
 800a0c0:	4622      	mov	r2, r4
 800a0c2:	4606      	mov	r6, r0
 800a0c4:	460f      	mov	r7, r1
 800a0c6:	462b      	mov	r3, r5
 800a0c8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a0cc:	f7f6 fa8c 	bl	80005e8 <__aeabi_dmul>
 800a0d0:	4602      	mov	r2, r0
 800a0d2:	460b      	mov	r3, r1
 800a0d4:	4630      	mov	r0, r6
 800a0d6:	4639      	mov	r1, r7
 800a0d8:	f7f6 f8d0 	bl	800027c <__adddf3>
 800a0dc:	4606      	mov	r6, r0
 800a0de:	460f      	mov	r7, r1
 800a0e0:	4602      	mov	r2, r0
 800a0e2:	460b      	mov	r3, r1
 800a0e4:	4640      	mov	r0, r8
 800a0e6:	4649      	mov	r1, r9
 800a0e8:	f7f6 f8c8 	bl	800027c <__adddf3>
 800a0ec:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 800a0f0:	a33b      	add	r3, pc, #236	@ (adr r3, 800a1e0 <__ieee754_pow+0x768>)
 800a0f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0f6:	4658      	mov	r0, fp
 800a0f8:	e9cd bc08 	strd	fp, ip, [sp, #32]
 800a0fc:	460d      	mov	r5, r1
 800a0fe:	f7f6 fa73 	bl	80005e8 <__aeabi_dmul>
 800a102:	465c      	mov	r4, fp
 800a104:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a108:	4642      	mov	r2, r8
 800a10a:	464b      	mov	r3, r9
 800a10c:	4620      	mov	r0, r4
 800a10e:	4629      	mov	r1, r5
 800a110:	f7f6 f8b2 	bl	8000278 <__aeabi_dsub>
 800a114:	4602      	mov	r2, r0
 800a116:	460b      	mov	r3, r1
 800a118:	4630      	mov	r0, r6
 800a11a:	4639      	mov	r1, r7
 800a11c:	f7f6 f8ac 	bl	8000278 <__aeabi_dsub>
 800a120:	a331      	add	r3, pc, #196	@ (adr r3, 800a1e8 <__ieee754_pow+0x770>)
 800a122:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a126:	f7f6 fa5f 	bl	80005e8 <__aeabi_dmul>
 800a12a:	a331      	add	r3, pc, #196	@ (adr r3, 800a1f0 <__ieee754_pow+0x778>)
 800a12c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a130:	4606      	mov	r6, r0
 800a132:	460f      	mov	r7, r1
 800a134:	4620      	mov	r0, r4
 800a136:	4629      	mov	r1, r5
 800a138:	f7f6 fa56 	bl	80005e8 <__aeabi_dmul>
 800a13c:	4602      	mov	r2, r0
 800a13e:	460b      	mov	r3, r1
 800a140:	4630      	mov	r0, r6
 800a142:	4639      	mov	r1, r7
 800a144:	f7f6 f89a 	bl	800027c <__adddf3>
 800a148:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a14a:	4b32      	ldr	r3, [pc, #200]	@ (800a214 <__ieee754_pow+0x79c>)
 800a14c:	4413      	add	r3, r2
 800a14e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a152:	f7f6 f893 	bl	800027c <__adddf3>
 800a156:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a15a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a15c:	f7f6 f9da 	bl	8000514 <__aeabi_i2d>
 800a160:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a162:	4b2d      	ldr	r3, [pc, #180]	@ (800a218 <__ieee754_pow+0x7a0>)
 800a164:	4413      	add	r3, r2
 800a166:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a16a:	4606      	mov	r6, r0
 800a16c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a170:	460f      	mov	r7, r1
 800a172:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a176:	f7f6 f881 	bl	800027c <__adddf3>
 800a17a:	4642      	mov	r2, r8
 800a17c:	464b      	mov	r3, r9
 800a17e:	f7f6 f87d 	bl	800027c <__adddf3>
 800a182:	4632      	mov	r2, r6
 800a184:	463b      	mov	r3, r7
 800a186:	f7f6 f879 	bl	800027c <__adddf3>
 800a18a:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 800a18e:	4632      	mov	r2, r6
 800a190:	463b      	mov	r3, r7
 800a192:	4658      	mov	r0, fp
 800a194:	460d      	mov	r5, r1
 800a196:	f7f6 f86f 	bl	8000278 <__aeabi_dsub>
 800a19a:	4642      	mov	r2, r8
 800a19c:	464b      	mov	r3, r9
 800a19e:	f7f6 f86b 	bl	8000278 <__aeabi_dsub>
 800a1a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a1a6:	f7f6 f867 	bl	8000278 <__aeabi_dsub>
 800a1aa:	465c      	mov	r4, fp
 800a1ac:	e036      	b.n	800a21c <__ieee754_pow+0x7a4>
 800a1ae:	bf00      	nop
 800a1b0:	4a454eef 	.word	0x4a454eef
 800a1b4:	3fca7e28 	.word	0x3fca7e28
 800a1b8:	93c9db65 	.word	0x93c9db65
 800a1bc:	3fcd864a 	.word	0x3fcd864a
 800a1c0:	a91d4101 	.word	0xa91d4101
 800a1c4:	3fd17460 	.word	0x3fd17460
 800a1c8:	518f264d 	.word	0x518f264d
 800a1cc:	3fd55555 	.word	0x3fd55555
 800a1d0:	db6fabff 	.word	0xdb6fabff
 800a1d4:	3fdb6db6 	.word	0x3fdb6db6
 800a1d8:	33333303 	.word	0x33333303
 800a1dc:	3fe33333 	.word	0x3fe33333
 800a1e0:	e0000000 	.word	0xe0000000
 800a1e4:	3feec709 	.word	0x3feec709
 800a1e8:	dc3a03fd 	.word	0xdc3a03fd
 800a1ec:	3feec709 	.word	0x3feec709
 800a1f0:	145b01f5 	.word	0x145b01f5
 800a1f4:	be3e2fe0 	.word	0xbe3e2fe0
 800a1f8:	7ff00000 	.word	0x7ff00000
 800a1fc:	43400000 	.word	0x43400000
 800a200:	0003988e 	.word	0x0003988e
 800a204:	000bb679 	.word	0x000bb679
 800a208:	0800af78 	.word	0x0800af78
 800a20c:	3ff00000 	.word	0x3ff00000
 800a210:	40080000 	.word	0x40080000
 800a214:	0800af58 	.word	0x0800af58
 800a218:	0800af68 	.word	0x0800af68
 800a21c:	4602      	mov	r2, r0
 800a21e:	460b      	mov	r3, r1
 800a220:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a224:	e5d6      	b.n	8009dd4 <__ieee754_pow+0x35c>
 800a226:	f04f 0a01 	mov.w	sl, #1
 800a22a:	e65e      	b.n	8009eea <__ieee754_pow+0x472>
 800a22c:	a3b5      	add	r3, pc, #724	@ (adr r3, 800a504 <__ieee754_pow+0xa8c>)
 800a22e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a232:	4630      	mov	r0, r6
 800a234:	4639      	mov	r1, r7
 800a236:	f7f6 f821 	bl	800027c <__adddf3>
 800a23a:	4642      	mov	r2, r8
 800a23c:	e9cd 0100 	strd	r0, r1, [sp]
 800a240:	464b      	mov	r3, r9
 800a242:	4620      	mov	r0, r4
 800a244:	4629      	mov	r1, r5
 800a246:	f7f6 f817 	bl	8000278 <__aeabi_dsub>
 800a24a:	4602      	mov	r2, r0
 800a24c:	460b      	mov	r3, r1
 800a24e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a252:	f7f6 fc59 	bl	8000b08 <__aeabi_dcmpgt>
 800a256:	2800      	cmp	r0, #0
 800a258:	f47f adfe 	bne.w	8009e58 <__ieee754_pow+0x3e0>
 800a25c:	4ba2      	ldr	r3, [pc, #648]	@ (800a4e8 <__ieee754_pow+0xa70>)
 800a25e:	e022      	b.n	800a2a6 <__ieee754_pow+0x82e>
 800a260:	4ca2      	ldr	r4, [pc, #648]	@ (800a4ec <__ieee754_pow+0xa74>)
 800a262:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800a266:	42a3      	cmp	r3, r4
 800a268:	d919      	bls.n	800a29e <__ieee754_pow+0x826>
 800a26a:	4ba1      	ldr	r3, [pc, #644]	@ (800a4f0 <__ieee754_pow+0xa78>)
 800a26c:	440b      	add	r3, r1
 800a26e:	4303      	orrs	r3, r0
 800a270:	d009      	beq.n	800a286 <__ieee754_pow+0x80e>
 800a272:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a276:	2200      	movs	r2, #0
 800a278:	2300      	movs	r3, #0
 800a27a:	f7f6 fc27 	bl	8000acc <__aeabi_dcmplt>
 800a27e:	3800      	subs	r0, #0
 800a280:	bf18      	it	ne
 800a282:	2001      	movne	r0, #1
 800a284:	e512      	b.n	8009cac <__ieee754_pow+0x234>
 800a286:	4642      	mov	r2, r8
 800a288:	464b      	mov	r3, r9
 800a28a:	f7f5 fff5 	bl	8000278 <__aeabi_dsub>
 800a28e:	4632      	mov	r2, r6
 800a290:	463b      	mov	r3, r7
 800a292:	f7f6 fc2f 	bl	8000af4 <__aeabi_dcmpge>
 800a296:	2800      	cmp	r0, #0
 800a298:	d1eb      	bne.n	800a272 <__ieee754_pow+0x7fa>
 800a29a:	4b96      	ldr	r3, [pc, #600]	@ (800a4f4 <__ieee754_pow+0xa7c>)
 800a29c:	e003      	b.n	800a2a6 <__ieee754_pow+0x82e>
 800a29e:	4a96      	ldr	r2, [pc, #600]	@ (800a4f8 <__ieee754_pow+0xa80>)
 800a2a0:	4293      	cmp	r3, r2
 800a2a2:	f240 80e7 	bls.w	800a474 <__ieee754_pow+0x9fc>
 800a2a6:	151b      	asrs	r3, r3, #20
 800a2a8:	f2a3 33fe 	subw	r3, r3, #1022	@ 0x3fe
 800a2ac:	f44f 1a80 	mov.w	sl, #1048576	@ 0x100000
 800a2b0:	fa4a fa03 	asr.w	sl, sl, r3
 800a2b4:	44da      	add	sl, fp
 800a2b6:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800a2ba:	4890      	ldr	r0, [pc, #576]	@ (800a4fc <__ieee754_pow+0xa84>)
 800a2bc:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800a2c0:	4108      	asrs	r0, r1
 800a2c2:	ea00 030a 	and.w	r3, r0, sl
 800a2c6:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800a2ca:	f1c1 0114 	rsb	r1, r1, #20
 800a2ce:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800a2d2:	fa4a fa01 	asr.w	sl, sl, r1
 800a2d6:	f1bb 0f00 	cmp.w	fp, #0
 800a2da:	4640      	mov	r0, r8
 800a2dc:	4649      	mov	r1, r9
 800a2de:	f04f 0200 	mov.w	r2, #0
 800a2e2:	bfb8      	it	lt
 800a2e4:	f1ca 0a00 	rsblt	sl, sl, #0
 800a2e8:	f7f5 ffc6 	bl	8000278 <__aeabi_dsub>
 800a2ec:	4680      	mov	r8, r0
 800a2ee:	4689      	mov	r9, r1
 800a2f0:	4632      	mov	r2, r6
 800a2f2:	463b      	mov	r3, r7
 800a2f4:	4640      	mov	r0, r8
 800a2f6:	4649      	mov	r1, r9
 800a2f8:	f7f5 ffc0 	bl	800027c <__adddf3>
 800a2fc:	2400      	movs	r4, #0
 800a2fe:	a36a      	add	r3, pc, #424	@ (adr r3, 800a4a8 <__ieee754_pow+0xa30>)
 800a300:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a304:	4620      	mov	r0, r4
 800a306:	460d      	mov	r5, r1
 800a308:	f7f6 f96e 	bl	80005e8 <__aeabi_dmul>
 800a30c:	4642      	mov	r2, r8
 800a30e:	e9cd 0100 	strd	r0, r1, [sp]
 800a312:	464b      	mov	r3, r9
 800a314:	4620      	mov	r0, r4
 800a316:	4629      	mov	r1, r5
 800a318:	f7f5 ffae 	bl	8000278 <__aeabi_dsub>
 800a31c:	4602      	mov	r2, r0
 800a31e:	460b      	mov	r3, r1
 800a320:	4630      	mov	r0, r6
 800a322:	4639      	mov	r1, r7
 800a324:	f7f5 ffa8 	bl	8000278 <__aeabi_dsub>
 800a328:	a361      	add	r3, pc, #388	@ (adr r3, 800a4b0 <__ieee754_pow+0xa38>)
 800a32a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a32e:	f7f6 f95b 	bl	80005e8 <__aeabi_dmul>
 800a332:	a361      	add	r3, pc, #388	@ (adr r3, 800a4b8 <__ieee754_pow+0xa40>)
 800a334:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a338:	4680      	mov	r8, r0
 800a33a:	4689      	mov	r9, r1
 800a33c:	4620      	mov	r0, r4
 800a33e:	4629      	mov	r1, r5
 800a340:	f7f6 f952 	bl	80005e8 <__aeabi_dmul>
 800a344:	4602      	mov	r2, r0
 800a346:	460b      	mov	r3, r1
 800a348:	4640      	mov	r0, r8
 800a34a:	4649      	mov	r1, r9
 800a34c:	f7f5 ff96 	bl	800027c <__adddf3>
 800a350:	4604      	mov	r4, r0
 800a352:	460d      	mov	r5, r1
 800a354:	4602      	mov	r2, r0
 800a356:	460b      	mov	r3, r1
 800a358:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a35c:	f7f5 ff8e 	bl	800027c <__adddf3>
 800a360:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a364:	4680      	mov	r8, r0
 800a366:	4689      	mov	r9, r1
 800a368:	f7f5 ff86 	bl	8000278 <__aeabi_dsub>
 800a36c:	4602      	mov	r2, r0
 800a36e:	460b      	mov	r3, r1
 800a370:	4620      	mov	r0, r4
 800a372:	4629      	mov	r1, r5
 800a374:	f7f5 ff80 	bl	8000278 <__aeabi_dsub>
 800a378:	4642      	mov	r2, r8
 800a37a:	4606      	mov	r6, r0
 800a37c:	460f      	mov	r7, r1
 800a37e:	464b      	mov	r3, r9
 800a380:	4640      	mov	r0, r8
 800a382:	4649      	mov	r1, r9
 800a384:	f7f6 f930 	bl	80005e8 <__aeabi_dmul>
 800a388:	a34d      	add	r3, pc, #308	@ (adr r3, 800a4c0 <__ieee754_pow+0xa48>)
 800a38a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a38e:	4604      	mov	r4, r0
 800a390:	460d      	mov	r5, r1
 800a392:	f7f6 f929 	bl	80005e8 <__aeabi_dmul>
 800a396:	a34c      	add	r3, pc, #304	@ (adr r3, 800a4c8 <__ieee754_pow+0xa50>)
 800a398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a39c:	f7f5 ff6c 	bl	8000278 <__aeabi_dsub>
 800a3a0:	4622      	mov	r2, r4
 800a3a2:	462b      	mov	r3, r5
 800a3a4:	f7f6 f920 	bl	80005e8 <__aeabi_dmul>
 800a3a8:	a349      	add	r3, pc, #292	@ (adr r3, 800a4d0 <__ieee754_pow+0xa58>)
 800a3aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3ae:	f7f5 ff65 	bl	800027c <__adddf3>
 800a3b2:	4622      	mov	r2, r4
 800a3b4:	462b      	mov	r3, r5
 800a3b6:	f7f6 f917 	bl	80005e8 <__aeabi_dmul>
 800a3ba:	a347      	add	r3, pc, #284	@ (adr r3, 800a4d8 <__ieee754_pow+0xa60>)
 800a3bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3c0:	f7f5 ff5a 	bl	8000278 <__aeabi_dsub>
 800a3c4:	4622      	mov	r2, r4
 800a3c6:	462b      	mov	r3, r5
 800a3c8:	f7f6 f90e 	bl	80005e8 <__aeabi_dmul>
 800a3cc:	a344      	add	r3, pc, #272	@ (adr r3, 800a4e0 <__ieee754_pow+0xa68>)
 800a3ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3d2:	f7f5 ff53 	bl	800027c <__adddf3>
 800a3d6:	4622      	mov	r2, r4
 800a3d8:	462b      	mov	r3, r5
 800a3da:	f7f6 f905 	bl	80005e8 <__aeabi_dmul>
 800a3de:	4602      	mov	r2, r0
 800a3e0:	460b      	mov	r3, r1
 800a3e2:	4640      	mov	r0, r8
 800a3e4:	4649      	mov	r1, r9
 800a3e6:	f7f5 ff47 	bl	8000278 <__aeabi_dsub>
 800a3ea:	4604      	mov	r4, r0
 800a3ec:	460d      	mov	r5, r1
 800a3ee:	4602      	mov	r2, r0
 800a3f0:	460b      	mov	r3, r1
 800a3f2:	4640      	mov	r0, r8
 800a3f4:	4649      	mov	r1, r9
 800a3f6:	f7f6 f8f7 	bl	80005e8 <__aeabi_dmul>
 800a3fa:	2200      	movs	r2, #0
 800a3fc:	e9cd 0100 	strd	r0, r1, [sp]
 800a400:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800a404:	4620      	mov	r0, r4
 800a406:	4629      	mov	r1, r5
 800a408:	f7f5 ff36 	bl	8000278 <__aeabi_dsub>
 800a40c:	4602      	mov	r2, r0
 800a40e:	460b      	mov	r3, r1
 800a410:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a414:	f7f6 fa12 	bl	800083c <__aeabi_ddiv>
 800a418:	4632      	mov	r2, r6
 800a41a:	4604      	mov	r4, r0
 800a41c:	460d      	mov	r5, r1
 800a41e:	463b      	mov	r3, r7
 800a420:	4640      	mov	r0, r8
 800a422:	4649      	mov	r1, r9
 800a424:	f7f6 f8e0 	bl	80005e8 <__aeabi_dmul>
 800a428:	4632      	mov	r2, r6
 800a42a:	463b      	mov	r3, r7
 800a42c:	f7f5 ff26 	bl	800027c <__adddf3>
 800a430:	4602      	mov	r2, r0
 800a432:	460b      	mov	r3, r1
 800a434:	4620      	mov	r0, r4
 800a436:	4629      	mov	r1, r5
 800a438:	f7f5 ff1e 	bl	8000278 <__aeabi_dsub>
 800a43c:	4642      	mov	r2, r8
 800a43e:	464b      	mov	r3, r9
 800a440:	f7f5 ff1a 	bl	8000278 <__aeabi_dsub>
 800a444:	460b      	mov	r3, r1
 800a446:	4602      	mov	r2, r0
 800a448:	492d      	ldr	r1, [pc, #180]	@ (800a500 <__ieee754_pow+0xa88>)
 800a44a:	2000      	movs	r0, #0
 800a44c:	f7f5 ff14 	bl	8000278 <__aeabi_dsub>
 800a450:	ec41 0b10 	vmov	d0, r0, r1
 800a454:	ee10 3a90 	vmov	r3, s1
 800a458:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800a45c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a460:	da0b      	bge.n	800a47a <__ieee754_pow+0xa02>
 800a462:	4650      	mov	r0, sl
 800a464:	f000 f85c 	bl	800a520 <scalbn>
 800a468:	ec51 0b10 	vmov	r0, r1, d0
 800a46c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a470:	f7ff bb6d 	b.w	8009b4e <__ieee754_pow+0xd6>
 800a474:	f8dd a010 	ldr.w	sl, [sp, #16]
 800a478:	e73a      	b.n	800a2f0 <__ieee754_pow+0x878>
 800a47a:	ec51 0b10 	vmov	r0, r1, d0
 800a47e:	4619      	mov	r1, r3
 800a480:	e7f4      	b.n	800a46c <__ieee754_pow+0x9f4>
 800a482:	491f      	ldr	r1, [pc, #124]	@ (800a500 <__ieee754_pow+0xa88>)
 800a484:	2000      	movs	r0, #0
 800a486:	f7ff bb14 	b.w	8009ab2 <__ieee754_pow+0x3a>
 800a48a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a48e:	f7ff bb10 	b.w	8009ab2 <__ieee754_pow+0x3a>
 800a492:	4630      	mov	r0, r6
 800a494:	4639      	mov	r1, r7
 800a496:	f7ff bb0c 	b.w	8009ab2 <__ieee754_pow+0x3a>
 800a49a:	460c      	mov	r4, r1
 800a49c:	f7ff bb69 	b.w	8009b72 <__ieee754_pow+0xfa>
 800a4a0:	2400      	movs	r4, #0
 800a4a2:	f7ff bb4b 	b.w	8009b3c <__ieee754_pow+0xc4>
 800a4a6:	bf00      	nop
 800a4a8:	00000000 	.word	0x00000000
 800a4ac:	3fe62e43 	.word	0x3fe62e43
 800a4b0:	fefa39ef 	.word	0xfefa39ef
 800a4b4:	3fe62e42 	.word	0x3fe62e42
 800a4b8:	0ca86c39 	.word	0x0ca86c39
 800a4bc:	be205c61 	.word	0xbe205c61
 800a4c0:	72bea4d0 	.word	0x72bea4d0
 800a4c4:	3e663769 	.word	0x3e663769
 800a4c8:	c5d26bf1 	.word	0xc5d26bf1
 800a4cc:	3ebbbd41 	.word	0x3ebbbd41
 800a4d0:	af25de2c 	.word	0xaf25de2c
 800a4d4:	3f11566a 	.word	0x3f11566a
 800a4d8:	16bebd93 	.word	0x16bebd93
 800a4dc:	3f66c16c 	.word	0x3f66c16c
 800a4e0:	5555553e 	.word	0x5555553e
 800a4e4:	3fc55555 	.word	0x3fc55555
 800a4e8:	40900000 	.word	0x40900000
 800a4ec:	4090cbff 	.word	0x4090cbff
 800a4f0:	3f6f3400 	.word	0x3f6f3400
 800a4f4:	4090cc00 	.word	0x4090cc00
 800a4f8:	3fe00000 	.word	0x3fe00000
 800a4fc:	fff00000 	.word	0xfff00000
 800a500:	3ff00000 	.word	0x3ff00000
 800a504:	652b82fe 	.word	0x652b82fe
 800a508:	3c971547 	.word	0x3c971547

0800a50c <fabs>:
 800a50c:	ec51 0b10 	vmov	r0, r1, d0
 800a510:	4602      	mov	r2, r0
 800a512:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800a516:	ec43 2b10 	vmov	d0, r2, r3
 800a51a:	4770      	bx	lr
 800a51c:	0000      	movs	r0, r0
	...

0800a520 <scalbn>:
 800a520:	b570      	push	{r4, r5, r6, lr}
 800a522:	ec55 4b10 	vmov	r4, r5, d0
 800a526:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800a52a:	4606      	mov	r6, r0
 800a52c:	462b      	mov	r3, r5
 800a52e:	b991      	cbnz	r1, 800a556 <scalbn+0x36>
 800a530:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800a534:	4323      	orrs	r3, r4
 800a536:	d03b      	beq.n	800a5b0 <scalbn+0x90>
 800a538:	4b33      	ldr	r3, [pc, #204]	@ (800a608 <scalbn+0xe8>)
 800a53a:	4620      	mov	r0, r4
 800a53c:	4629      	mov	r1, r5
 800a53e:	2200      	movs	r2, #0
 800a540:	f7f6 f852 	bl	80005e8 <__aeabi_dmul>
 800a544:	4b31      	ldr	r3, [pc, #196]	@ (800a60c <scalbn+0xec>)
 800a546:	429e      	cmp	r6, r3
 800a548:	4604      	mov	r4, r0
 800a54a:	460d      	mov	r5, r1
 800a54c:	da0f      	bge.n	800a56e <scalbn+0x4e>
 800a54e:	a326      	add	r3, pc, #152	@ (adr r3, 800a5e8 <scalbn+0xc8>)
 800a550:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a554:	e01e      	b.n	800a594 <scalbn+0x74>
 800a556:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800a55a:	4291      	cmp	r1, r2
 800a55c:	d10b      	bne.n	800a576 <scalbn+0x56>
 800a55e:	4622      	mov	r2, r4
 800a560:	4620      	mov	r0, r4
 800a562:	4629      	mov	r1, r5
 800a564:	f7f5 fe8a 	bl	800027c <__adddf3>
 800a568:	4604      	mov	r4, r0
 800a56a:	460d      	mov	r5, r1
 800a56c:	e020      	b.n	800a5b0 <scalbn+0x90>
 800a56e:	460b      	mov	r3, r1
 800a570:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800a574:	3936      	subs	r1, #54	@ 0x36
 800a576:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800a57a:	4296      	cmp	r6, r2
 800a57c:	dd0d      	ble.n	800a59a <scalbn+0x7a>
 800a57e:	2d00      	cmp	r5, #0
 800a580:	a11b      	add	r1, pc, #108	@ (adr r1, 800a5f0 <scalbn+0xd0>)
 800a582:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a586:	da02      	bge.n	800a58e <scalbn+0x6e>
 800a588:	a11b      	add	r1, pc, #108	@ (adr r1, 800a5f8 <scalbn+0xd8>)
 800a58a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a58e:	a318      	add	r3, pc, #96	@ (adr r3, 800a5f0 <scalbn+0xd0>)
 800a590:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a594:	f7f6 f828 	bl	80005e8 <__aeabi_dmul>
 800a598:	e7e6      	b.n	800a568 <scalbn+0x48>
 800a59a:	1872      	adds	r2, r6, r1
 800a59c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800a5a0:	428a      	cmp	r2, r1
 800a5a2:	dcec      	bgt.n	800a57e <scalbn+0x5e>
 800a5a4:	2a00      	cmp	r2, #0
 800a5a6:	dd06      	ble.n	800a5b6 <scalbn+0x96>
 800a5a8:	f36f 531e 	bfc	r3, #20, #11
 800a5ac:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a5b0:	ec45 4b10 	vmov	d0, r4, r5
 800a5b4:	bd70      	pop	{r4, r5, r6, pc}
 800a5b6:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800a5ba:	da08      	bge.n	800a5ce <scalbn+0xae>
 800a5bc:	2d00      	cmp	r5, #0
 800a5be:	a10a      	add	r1, pc, #40	@ (adr r1, 800a5e8 <scalbn+0xc8>)
 800a5c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a5c4:	dac3      	bge.n	800a54e <scalbn+0x2e>
 800a5c6:	a10e      	add	r1, pc, #56	@ (adr r1, 800a600 <scalbn+0xe0>)
 800a5c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a5cc:	e7bf      	b.n	800a54e <scalbn+0x2e>
 800a5ce:	3236      	adds	r2, #54	@ 0x36
 800a5d0:	f36f 531e 	bfc	r3, #20, #11
 800a5d4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a5d8:	4620      	mov	r0, r4
 800a5da:	4b0d      	ldr	r3, [pc, #52]	@ (800a610 <scalbn+0xf0>)
 800a5dc:	4629      	mov	r1, r5
 800a5de:	2200      	movs	r2, #0
 800a5e0:	e7d8      	b.n	800a594 <scalbn+0x74>
 800a5e2:	bf00      	nop
 800a5e4:	f3af 8000 	nop.w
 800a5e8:	c2f8f359 	.word	0xc2f8f359
 800a5ec:	01a56e1f 	.word	0x01a56e1f
 800a5f0:	8800759c 	.word	0x8800759c
 800a5f4:	7e37e43c 	.word	0x7e37e43c
 800a5f8:	8800759c 	.word	0x8800759c
 800a5fc:	fe37e43c 	.word	0xfe37e43c
 800a600:	c2f8f359 	.word	0xc2f8f359
 800a604:	81a56e1f 	.word	0x81a56e1f
 800a608:	43500000 	.word	0x43500000
 800a60c:	ffff3cb0 	.word	0xffff3cb0
 800a610:	3c900000 	.word	0x3c900000

0800a614 <with_errno>:
 800a614:	b510      	push	{r4, lr}
 800a616:	ed2d 8b02 	vpush	{d8}
 800a61a:	eeb0 8a40 	vmov.f32	s16, s0
 800a61e:	eef0 8a60 	vmov.f32	s17, s1
 800a622:	4604      	mov	r4, r0
 800a624:	f7fe fa5e 	bl	8008ae4 <__errno>
 800a628:	eeb0 0a48 	vmov.f32	s0, s16
 800a62c:	eef0 0a68 	vmov.f32	s1, s17
 800a630:	ecbd 8b02 	vpop	{d8}
 800a634:	6004      	str	r4, [r0, #0]
 800a636:	bd10      	pop	{r4, pc}

0800a638 <xflow>:
 800a638:	4603      	mov	r3, r0
 800a63a:	b507      	push	{r0, r1, r2, lr}
 800a63c:	ec51 0b10 	vmov	r0, r1, d0
 800a640:	b183      	cbz	r3, 800a664 <xflow+0x2c>
 800a642:	4602      	mov	r2, r0
 800a644:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a648:	e9cd 2300 	strd	r2, r3, [sp]
 800a64c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a650:	f7f5 ffca 	bl	80005e8 <__aeabi_dmul>
 800a654:	ec41 0b10 	vmov	d0, r0, r1
 800a658:	2022      	movs	r0, #34	@ 0x22
 800a65a:	b003      	add	sp, #12
 800a65c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a660:	f7ff bfd8 	b.w	800a614 <with_errno>
 800a664:	4602      	mov	r2, r0
 800a666:	460b      	mov	r3, r1
 800a668:	e7ee      	b.n	800a648 <xflow+0x10>
 800a66a:	0000      	movs	r0, r0
 800a66c:	0000      	movs	r0, r0
	...

0800a670 <__math_uflow>:
 800a670:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800a678 <__math_uflow+0x8>
 800a674:	f7ff bfe0 	b.w	800a638 <xflow>
 800a678:	00000000 	.word	0x00000000
 800a67c:	10000000 	.word	0x10000000

0800a680 <__math_oflow>:
 800a680:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800a688 <__math_oflow+0x8>
 800a684:	f7ff bfd8 	b.w	800a638 <xflow>
 800a688:	00000000 	.word	0x00000000
 800a68c:	70000000 	.word	0x70000000

0800a690 <_init>:
 800a690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a692:	bf00      	nop
 800a694:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a696:	bc08      	pop	{r3}
 800a698:	469e      	mov	lr, r3
 800a69a:	4770      	bx	lr

0800a69c <_fini>:
 800a69c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a69e:	bf00      	nop
 800a6a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a6a2:	bc08      	pop	{r3}
 800a6a4:	469e      	mov	lr, r3
 800a6a6:	4770      	bx	lr
