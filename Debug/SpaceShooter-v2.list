
SpaceShooter-v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006d9c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008f4  08006f2c  08006f2c  00016f2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007820  08007820  0002007c  2**0
                  CONTENTS
  4 .ARM          00000000  08007820  08007820  0002007c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007820  08007820  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007820  08007820  00017820  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007824  08007824  00017824  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08007828  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002624  2000007c  080078a4  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200026a0  080078a4  000226a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ee3a  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025f3  00000000  00000000  0002eee6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ea8  00000000  00000000  000314e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d70  00000000  00000000  00032388  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022916  00000000  00000000  000330f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fa39  00000000  00000000  00055a0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d127d  00000000  00000000  00065447  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001366c4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000449c  00000000  00000000  00136714  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000007c 	.word	0x2000007c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006f14 	.word	0x08006f14

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000080 	.word	0x20000080
 80001cc:	08006f14 	.word	0x08006f14

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <GFX_DrowLine>:
	   }

}

//Bresenham's algorithm - Wikipedia
void GFX_DrowLine(int X1, int Y1,int X2,int Y2,int I_O) {
 8000270:	b580      	push	{r7, lr}
 8000272:	b08e      	sub	sp, #56	; 0x38
 8000274:	af00      	add	r7, sp, #0
 8000276:	60f8      	str	r0, [r7, #12]
 8000278:	60b9      	str	r1, [r7, #8]
 800027a:	607a      	str	r2, [r7, #4]
 800027c:	603b      	str	r3, [r7, #0]
	int CurrentX, CurrentY, Xinc, Yinc,
		Dx, Dy, TwoDx, TwoDy,
		TwoDxAccumulatedError, TwoDyAccumulatedError;

	Dx = (X2-X1);
 800027e:	687a      	ldr	r2, [r7, #4]
 8000280:	68fb      	ldr	r3, [r7, #12]
 8000282:	1ad3      	subs	r3, r2, r3
 8000284:	627b      	str	r3, [r7, #36]	; 0x24
	Dy = (Y2-Y1);
 8000286:	683a      	ldr	r2, [r7, #0]
 8000288:	68bb      	ldr	r3, [r7, #8]
 800028a:	1ad3      	subs	r3, r2, r3
 800028c:	623b      	str	r3, [r7, #32]

	TwoDx = Dx + Dx;
 800028e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000290:	005b      	lsls	r3, r3, #1
 8000292:	61fb      	str	r3, [r7, #28]
	TwoDy = Dy + Dy;
 8000294:	6a3b      	ldr	r3, [r7, #32]
 8000296:	005b      	lsls	r3, r3, #1
 8000298:	61bb      	str	r3, [r7, #24]

	CurrentX = X1;
 800029a:	68fb      	ldr	r3, [r7, #12]
 800029c:	637b      	str	r3, [r7, #52]	; 0x34
	CurrentY = Y1;
 800029e:	68bb      	ldr	r3, [r7, #8]
 80002a0:	633b      	str	r3, [r7, #48]	; 0x30

	Xinc = 1;
 80002a2:	2301      	movs	r3, #1
 80002a4:	62fb      	str	r3, [r7, #44]	; 0x2c
	Yinc = 1;
 80002a6:	2301      	movs	r3, #1
 80002a8:	62bb      	str	r3, [r7, #40]	; 0x28

	if(Dx < 0) {
 80002aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	da08      	bge.n	80002c2 <GFX_DrowLine+0x52>

		Xinc = -1;
 80002b0:	f04f 33ff 	mov.w	r3, #4294967295
 80002b4:	62fb      	str	r3, [r7, #44]	; 0x2c
		Dx = -Dx;
 80002b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80002b8:	425b      	negs	r3, r3
 80002ba:	627b      	str	r3, [r7, #36]	; 0x24
		TwoDx = -TwoDx;
 80002bc:	69fb      	ldr	r3, [r7, #28]
 80002be:	425b      	negs	r3, r3
 80002c0:	61fb      	str	r3, [r7, #28]
	}

	if (Dy < 0) {
 80002c2:	6a3b      	ldr	r3, [r7, #32]
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	da08      	bge.n	80002da <GFX_DrowLine+0x6a>
		Yinc = -1;
 80002c8:	f04f 33ff 	mov.w	r3, #4294967295
 80002cc:	62bb      	str	r3, [r7, #40]	; 0x28
		Dy = -Dy;
 80002ce:	6a3b      	ldr	r3, [r7, #32]
 80002d0:	425b      	negs	r3, r3
 80002d2:	623b      	str	r3, [r7, #32]
		TwoDy = -TwoDy;
 80002d4:	69bb      	ldr	r3, [r7, #24]
 80002d6:	425b      	negs	r3, r3
 80002d8:	61bb      	str	r3, [r7, #24]
	}

	ssd1327_setPixel(X1,Y1,I_O);
 80002da:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80002dc:	68b9      	ldr	r1, [r7, #8]
 80002de:	68f8      	ldr	r0, [r7, #12]
 80002e0:	f002 fa8a 	bl	80027f8 <ssd1327_setPixel>

	if ((Dx != 0) || (Dy != 0)) {
 80002e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d102      	bne.n	80002f0 <GFX_DrowLine+0x80>
 80002ea:	6a3b      	ldr	r3, [r7, #32]
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d042      	beq.n	8000376 <GFX_DrowLine+0x106>

		if (Dy <= Dx) {
 80002f0:	6a3a      	ldr	r2, [r7, #32]
 80002f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80002f4:	429a      	cmp	r2, r3
 80002f6:	dc1f      	bgt.n	8000338 <GFX_DrowLine+0xc8>
			TwoDxAccumulatedError = 0;
 80002f8:	2300      	movs	r3, #0
 80002fa:	617b      	str	r3, [r7, #20]
			do {
			    CurrentX += Xinc;
 80002fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80002fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000300:	4413      	add	r3, r2
 8000302:	637b      	str	r3, [r7, #52]	; 0x34
			    TwoDxAccumulatedError += TwoDy;
 8000304:	697a      	ldr	r2, [r7, #20]
 8000306:	69bb      	ldr	r3, [r7, #24]
 8000308:	4413      	add	r3, r2
 800030a:	617b      	str	r3, [r7, #20]
			    if(TwoDxAccumulatedError > Dx) {
 800030c:	697a      	ldr	r2, [r7, #20]
 800030e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000310:	429a      	cmp	r2, r3
 8000312:	dd07      	ble.n	8000324 <GFX_DrowLine+0xb4>
			        CurrentY += Yinc;
 8000314:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000318:	4413      	add	r3, r2
 800031a:	633b      	str	r3, [r7, #48]	; 0x30
			        TwoDxAccumulatedError -= TwoDx;
 800031c:	697a      	ldr	r2, [r7, #20]
 800031e:	69fb      	ldr	r3, [r7, #28]
 8000320:	1ad3      	subs	r3, r2, r3
 8000322:	617b      	str	r3, [r7, #20]
			    }
			    ssd1327_setPixel(CurrentX,CurrentY,I_O);
 8000324:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000326:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8000328:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800032a:	f002 fa65 	bl	80027f8 <ssd1327_setPixel>
			  } while (CurrentX != X2);
 800032e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	429a      	cmp	r2, r3
 8000334:	d1e2      	bne.n	80002fc <GFX_DrowLine+0x8c>
			      }
			      ssd1327_setPixel(CurrentX,CurrentY,I_O);
			  } while (CurrentY != Y2);
		  }
	}
}
 8000336:	e01e      	b.n	8000376 <GFX_DrowLine+0x106>
			  TwoDyAccumulatedError = 0;
 8000338:	2300      	movs	r3, #0
 800033a:	613b      	str	r3, [r7, #16]
			      CurrentY += Yinc;
 800033c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800033e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000340:	4413      	add	r3, r2
 8000342:	633b      	str	r3, [r7, #48]	; 0x30
			      TwoDyAccumulatedError += TwoDx;
 8000344:	693a      	ldr	r2, [r7, #16]
 8000346:	69fb      	ldr	r3, [r7, #28]
 8000348:	4413      	add	r3, r2
 800034a:	613b      	str	r3, [r7, #16]
			      if(TwoDyAccumulatedError>Dy) {
 800034c:	693a      	ldr	r2, [r7, #16]
 800034e:	6a3b      	ldr	r3, [r7, #32]
 8000350:	429a      	cmp	r2, r3
 8000352:	dd07      	ble.n	8000364 <GFX_DrowLine+0xf4>
				      CurrentX += Xinc;
 8000354:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000358:	4413      	add	r3, r2
 800035a:	637b      	str	r3, [r7, #52]	; 0x34
				      TwoDyAccumulatedError -= TwoDy;
 800035c:	693a      	ldr	r2, [r7, #16]
 800035e:	69bb      	ldr	r3, [r7, #24]
 8000360:	1ad3      	subs	r3, r2, r3
 8000362:	613b      	str	r3, [r7, #16]
			      ssd1327_setPixel(CurrentX,CurrentY,I_O);
 8000364:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000366:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8000368:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800036a:	f002 fa45 	bl	80027f8 <ssd1327_setPixel>
			  } while (CurrentY != Y2);
 800036e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000370:	683b      	ldr	r3, [r7, #0]
 8000372:	429a      	cmp	r2, r3
 8000374:	d1e2      	bne.n	800033c <GFX_DrowLine+0xcc>
}
 8000376:	bf00      	nop
 8000378:	3738      	adds	r7, #56	; 0x38
 800037a:	46bd      	mov	sp, r7
 800037c:	bd80      	pop	{r7, pc}

0800037e <GFX_DrowCircleHelper>:
		}
	}
}

void GFX_DrowCircleHelper(int x0, int y0, int r, uint8_t cornername, uint8_t color )
{
 800037e:	b580      	push	{r7, lr}
 8000380:	b08a      	sub	sp, #40	; 0x28
 8000382:	af00      	add	r7, sp, #0
 8000384:	60f8      	str	r0, [r7, #12]
 8000386:	60b9      	str	r1, [r7, #8]
 8000388:	607a      	str	r2, [r7, #4]
 800038a:	70fb      	strb	r3, [r7, #3]
	int f 		= 1 - r;
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	f1c3 0301 	rsb	r3, r3, #1
 8000392:	627b      	str	r3, [r7, #36]	; 0x24
	int ddF_x 	= 1;
 8000394:	2301      	movs	r3, #1
 8000396:	623b      	str	r3, [r7, #32]
	int ddF_y	= -2 * r;
 8000398:	687a      	ldr	r2, [r7, #4]
 800039a:	4613      	mov	r3, r2
 800039c:	07db      	lsls	r3, r3, #31
 800039e:	1a9b      	subs	r3, r3, r2
 80003a0:	005b      	lsls	r3, r3, #1
 80003a2:	61fb      	str	r3, [r7, #28]
	int x		= 0;
 80003a4:	2300      	movs	r3, #0
 80003a6:	61bb      	str	r3, [r7, #24]
	int y		= r;
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	617b      	str	r3, [r7, #20]

	while(x<y)
 80003ac:	e082      	b.n	80004b4 <GFX_DrowCircleHelper+0x136>
	{
		if(f >= 0)
 80003ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	db09      	blt.n	80003c8 <GFX_DrowCircleHelper+0x4a>
		{
			y--;
 80003b4:	697b      	ldr	r3, [r7, #20]
 80003b6:	3b01      	subs	r3, #1
 80003b8:	617b      	str	r3, [r7, #20]
			ddF_y += 2;
 80003ba:	69fb      	ldr	r3, [r7, #28]
 80003bc:	3302      	adds	r3, #2
 80003be:	61fb      	str	r3, [r7, #28]
			f += ddF_y;
 80003c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80003c2:	69fb      	ldr	r3, [r7, #28]
 80003c4:	4413      	add	r3, r2
 80003c6:	627b      	str	r3, [r7, #36]	; 0x24
		}
		x++;
 80003c8:	69bb      	ldr	r3, [r7, #24]
 80003ca:	3301      	adds	r3, #1
 80003cc:	61bb      	str	r3, [r7, #24]
		ddF_x += 2;
 80003ce:	6a3b      	ldr	r3, [r7, #32]
 80003d0:	3302      	adds	r3, #2
 80003d2:	623b      	str	r3, [r7, #32]
		f += ddF_x;
 80003d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80003d6:	6a3b      	ldr	r3, [r7, #32]
 80003d8:	4413      	add	r3, r2
 80003da:	627b      	str	r3, [r7, #36]	; 0x24

		if(cornername & 0x4)
 80003dc:	78fb      	ldrb	r3, [r7, #3]
 80003de:	f003 0304 	and.w	r3, r3, #4
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d015      	beq.n	8000412 <GFX_DrowCircleHelper+0x94>
		{
			ssd1327_setPixel(x0 + x, y0 + y, color);
 80003e6:	68fa      	ldr	r2, [r7, #12]
 80003e8:	69bb      	ldr	r3, [r7, #24]
 80003ea:	18d0      	adds	r0, r2, r3
 80003ec:	68ba      	ldr	r2, [r7, #8]
 80003ee:	697b      	ldr	r3, [r7, #20]
 80003f0:	4413      	add	r3, r2
 80003f2:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80003f6:	4619      	mov	r1, r3
 80003f8:	f002 f9fe 	bl	80027f8 <ssd1327_setPixel>
			ssd1327_setPixel(x0 + y, y0 + x, color);
 80003fc:	68fa      	ldr	r2, [r7, #12]
 80003fe:	697b      	ldr	r3, [r7, #20]
 8000400:	18d0      	adds	r0, r2, r3
 8000402:	68ba      	ldr	r2, [r7, #8]
 8000404:	69bb      	ldr	r3, [r7, #24]
 8000406:	4413      	add	r3, r2
 8000408:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800040c:	4619      	mov	r1, r3
 800040e:	f002 f9f3 	bl	80027f8 <ssd1327_setPixel>
		}
		if(cornername & 0x2)
 8000412:	78fb      	ldrb	r3, [r7, #3]
 8000414:	f003 0302 	and.w	r3, r3, #2
 8000418:	2b00      	cmp	r3, #0
 800041a:	d015      	beq.n	8000448 <GFX_DrowCircleHelper+0xca>
		{
			ssd1327_setPixel(x0 + x, y0 - y, color);
 800041c:	68fa      	ldr	r2, [r7, #12]
 800041e:	69bb      	ldr	r3, [r7, #24]
 8000420:	18d0      	adds	r0, r2, r3
 8000422:	68ba      	ldr	r2, [r7, #8]
 8000424:	697b      	ldr	r3, [r7, #20]
 8000426:	1ad3      	subs	r3, r2, r3
 8000428:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800042c:	4619      	mov	r1, r3
 800042e:	f002 f9e3 	bl	80027f8 <ssd1327_setPixel>
			ssd1327_setPixel(x0 + y, y0 - x, color);
 8000432:	68fa      	ldr	r2, [r7, #12]
 8000434:	697b      	ldr	r3, [r7, #20]
 8000436:	18d0      	adds	r0, r2, r3
 8000438:	68ba      	ldr	r2, [r7, #8]
 800043a:	69bb      	ldr	r3, [r7, #24]
 800043c:	1ad3      	subs	r3, r2, r3
 800043e:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8000442:	4619      	mov	r1, r3
 8000444:	f002 f9d8 	bl	80027f8 <ssd1327_setPixel>
		}
		if(cornername & 0x8)
 8000448:	78fb      	ldrb	r3, [r7, #3]
 800044a:	f003 0308 	and.w	r3, r3, #8
 800044e:	2b00      	cmp	r3, #0
 8000450:	d015      	beq.n	800047e <GFX_DrowCircleHelper+0x100>
		{
			ssd1327_setPixel(x0 - x, y0 + y, color);
 8000452:	68fa      	ldr	r2, [r7, #12]
 8000454:	69bb      	ldr	r3, [r7, #24]
 8000456:	1ad0      	subs	r0, r2, r3
 8000458:	68ba      	ldr	r2, [r7, #8]
 800045a:	697b      	ldr	r3, [r7, #20]
 800045c:	4413      	add	r3, r2
 800045e:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8000462:	4619      	mov	r1, r3
 8000464:	f002 f9c8 	bl	80027f8 <ssd1327_setPixel>
			ssd1327_setPixel(x0 - y, y0 + x, color);
 8000468:	68fa      	ldr	r2, [r7, #12]
 800046a:	697b      	ldr	r3, [r7, #20]
 800046c:	1ad0      	subs	r0, r2, r3
 800046e:	68ba      	ldr	r2, [r7, #8]
 8000470:	69bb      	ldr	r3, [r7, #24]
 8000472:	4413      	add	r3, r2
 8000474:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8000478:	4619      	mov	r1, r3
 800047a:	f002 f9bd 	bl	80027f8 <ssd1327_setPixel>
		}
		if(cornername & 0x1)
 800047e:	78fb      	ldrb	r3, [r7, #3]
 8000480:	f003 0301 	and.w	r3, r3, #1
 8000484:	2b00      	cmp	r3, #0
 8000486:	d015      	beq.n	80004b4 <GFX_DrowCircleHelper+0x136>
		{
			ssd1327_setPixel(x0 - x, y0 - y, color);
 8000488:	68fa      	ldr	r2, [r7, #12]
 800048a:	69bb      	ldr	r3, [r7, #24]
 800048c:	1ad0      	subs	r0, r2, r3
 800048e:	68ba      	ldr	r2, [r7, #8]
 8000490:	697b      	ldr	r3, [r7, #20]
 8000492:	1ad3      	subs	r3, r2, r3
 8000494:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8000498:	4619      	mov	r1, r3
 800049a:	f002 f9ad 	bl	80027f8 <ssd1327_setPixel>
			ssd1327_setPixel(x0 - y, y0 - x, color);
 800049e:	68fa      	ldr	r2, [r7, #12]
 80004a0:	697b      	ldr	r3, [r7, #20]
 80004a2:	1ad0      	subs	r0, r2, r3
 80004a4:	68ba      	ldr	r2, [r7, #8]
 80004a6:	69bb      	ldr	r3, [r7, #24]
 80004a8:	1ad3      	subs	r3, r2, r3
 80004aa:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80004ae:	4619      	mov	r1, r3
 80004b0:	f002 f9a2 	bl	80027f8 <ssd1327_setPixel>
	while(x<y)
 80004b4:	69ba      	ldr	r2, [r7, #24]
 80004b6:	697b      	ldr	r3, [r7, #20]
 80004b8:	429a      	cmp	r2, r3
 80004ba:	f6ff af78 	blt.w	80003ae <GFX_DrowCircleHelper+0x30>
		}
	}
}
 80004be:	bf00      	nop
 80004c0:	bf00      	nop
 80004c2:	3728      	adds	r7, #40	; 0x28
 80004c4:	46bd      	mov	sp, r7
 80004c6:	bd80      	pop	{r7, pc}

080004c8 <GFX_DrowBitMap_P>:
		GFX_DrowLine(x0-y, y0+x, x0-y, y0-x,I_O);
  	}
}

void GFX_DrowBitMap_P (int x, int y, const uint8_t *bitmap, uint8_t w, uint8_t h, uint8_t color)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b086      	sub	sp, #24
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	60f8      	str	r0, [r7, #12]
 80004d0:	60b9      	str	r1, [r7, #8]
 80004d2:	607a      	str	r2, [r7, #4]
 80004d4:	70fb      	strb	r3, [r7, #3]
//
//			ssd1327_setPixel(x+i, y+j, );
//		}
//	}

	uint8_t i, j, byteWidth = (w+7)/8;
 80004d6:	78fb      	ldrb	r3, [r7, #3]
 80004d8:	3307      	adds	r3, #7
 80004da:	2b00      	cmp	r3, #0
 80004dc:	da00      	bge.n	80004e0 <GFX_DrowBitMap_P+0x18>
 80004de:	3307      	adds	r3, #7
 80004e0:	10db      	asrs	r3, r3, #3
 80004e2:	757b      	strb	r3, [r7, #21]

	for(j = 0; j < h; j++)
 80004e4:	2300      	movs	r3, #0
 80004e6:	75bb      	strb	r3, [r7, #22]
 80004e8:	e02d      	b.n	8000546 <GFX_DrowBitMap_P+0x7e>
	{
		for(i = 0; i < w; i++)
 80004ea:	2300      	movs	r3, #0
 80004ec:	75fb      	strb	r3, [r7, #23]
 80004ee:	e023      	b.n	8000538 <GFX_DrowBitMap_P+0x70>
		{
			if(*(bitmap + j *byteWidth + i /8) & (128 >> (i&7)) )
 80004f0:	7dbb      	ldrb	r3, [r7, #22]
 80004f2:	7d7a      	ldrb	r2, [r7, #21]
 80004f4:	fb02 f303 	mul.w	r3, r2, r3
 80004f8:	461a      	mov	r2, r3
 80004fa:	7dfb      	ldrb	r3, [r7, #23]
 80004fc:	08db      	lsrs	r3, r3, #3
 80004fe:	b2db      	uxtb	r3, r3
 8000500:	4413      	add	r3, r2
 8000502:	687a      	ldr	r2, [r7, #4]
 8000504:	4413      	add	r3, r2
 8000506:	781b      	ldrb	r3, [r3, #0]
 8000508:	4619      	mov	r1, r3
 800050a:	7dfb      	ldrb	r3, [r7, #23]
 800050c:	f003 0307 	and.w	r3, r3, #7
 8000510:	2280      	movs	r2, #128	; 0x80
 8000512:	fa42 f303 	asr.w	r3, r2, r3
 8000516:	400b      	ands	r3, r1
 8000518:	2b00      	cmp	r3, #0
 800051a:	d00a      	beq.n	8000532 <GFX_DrowBitMap_P+0x6a>
				ssd1327_setPixel(x+i, y+j, color);
 800051c:	7dfa      	ldrb	r2, [r7, #23]
 800051e:	68fb      	ldr	r3, [r7, #12]
 8000520:	18d0      	adds	r0, r2, r3
 8000522:	7dba      	ldrb	r2, [r7, #22]
 8000524:	68bb      	ldr	r3, [r7, #8]
 8000526:	4413      	add	r3, r2
 8000528:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800052c:	4619      	mov	r1, r3
 800052e:	f002 f963 	bl	80027f8 <ssd1327_setPixel>
		for(i = 0; i < w; i++)
 8000532:	7dfb      	ldrb	r3, [r7, #23]
 8000534:	3301      	adds	r3, #1
 8000536:	75fb      	strb	r3, [r7, #23]
 8000538:	7dfa      	ldrb	r2, [r7, #23]
 800053a:	78fb      	ldrb	r3, [r7, #3]
 800053c:	429a      	cmp	r2, r3
 800053e:	d3d7      	bcc.n	80004f0 <GFX_DrowBitMap_P+0x28>
	for(j = 0; j < h; j++)
 8000540:	7dbb      	ldrb	r3, [r7, #22]
 8000542:	3301      	adds	r3, #1
 8000544:	75bb      	strb	r3, [r7, #22]
 8000546:	7dba      	ldrb	r2, [r7, #22]
 8000548:	f897 3020 	ldrb.w	r3, [r7, #32]
 800054c:	429a      	cmp	r2, r3
 800054e:	d3cc      	bcc.n	80004ea <GFX_DrowBitMap_P+0x22>
		}
	}

}
 8000550:	bf00      	nop
 8000552:	bf00      	nop
 8000554:	3718      	adds	r7, #24
 8000556:	46bd      	mov	sp, r7
 8000558:	bd80      	pop	{r7, pc}
	...

0800055c <GFX_DrowChar>:

void GFX_DrowChar(int x, int y, char c, uint8_t color, uint8_t bg, uint8_t size)
{
 800055c:	b590      	push	{r4, r7, lr}
 800055e:	b089      	sub	sp, #36	; 0x24
 8000560:	af02      	add	r7, sp, #8
 8000562:	60f8      	str	r0, [r7, #12]
 8000564:	60b9      	str	r1, [r7, #8]
 8000566:	4611      	mov	r1, r2
 8000568:	461a      	mov	r2, r3
 800056a:	460b      	mov	r3, r1
 800056c:	71fb      	strb	r3, [r7, #7]
 800056e:	4613      	mov	r3, r2
 8000570:	71bb      	strb	r3, [r7, #6]

	  uint8_t line;
	  int8_t i,j;
	  if((x >= SSD1327_WIDTH)            || // Clip right
 8000572:	68fb      	ldr	r3, [r7, #12]
 8000574:	2b7f      	cmp	r3, #127	; 0x7f
 8000576:	f300 80a9 	bgt.w	80006cc <GFX_DrowChar+0x170>
 800057a:	68bb      	ldr	r3, [r7, #8]
 800057c:	2b7f      	cmp	r3, #127	; 0x7f
 800057e:	f300 80a5 	bgt.w	80006cc <GFX_DrowChar+0x170>
	     (y >= SSD1327_HEIGHT)           || // Clip bottom
	     ((x + 6 * size - 1) < 0) || // Clip left
 8000582:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8000586:	4613      	mov	r3, r2
 8000588:	005b      	lsls	r3, r3, #1
 800058a:	4413      	add	r3, r2
 800058c:	005b      	lsls	r3, r3, #1
 800058e:	461a      	mov	r2, r3
 8000590:	68fb      	ldr	r3, [r7, #12]
 8000592:	4413      	add	r3, r2
	     (y >= SSD1327_HEIGHT)           || // Clip bottom
 8000594:	2b00      	cmp	r3, #0
 8000596:	f340 8099 	ble.w	80006cc <GFX_DrowChar+0x170>
	     ((y + 8 * size - 1) < 0))   // Clip top
 800059a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800059e:	00da      	lsls	r2, r3, #3
 80005a0:	68bb      	ldr	r3, [r7, #8]
 80005a2:	4413      	add	r3, r2
	     ((x + 6 * size - 1) < 0) || // Clip left
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	f340 8091 	ble.w	80006cc <GFX_DrowChar+0x170>
	    return;

	  for  (i=0; i<6; i++ ) {
 80005aa:	2300      	movs	r3, #0
 80005ac:	75bb      	strb	r3, [r7, #22]
 80005ae:	e087      	b.n	80006c0 <GFX_DrowChar+0x164>
	    if (i == 5)
 80005b0:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80005b4:	2b05      	cmp	r3, #5
 80005b6:	d102      	bne.n	80005be <GFX_DrowChar+0x62>
	      line = 0x0;
 80005b8:	2300      	movs	r3, #0
 80005ba:	75fb      	strb	r3, [r7, #23]
 80005bc:	e009      	b.n	80005d2 <GFX_DrowChar+0x76>
	    else
	      //line = pgm_read_byte(font+(c*5)+i);
	    	line = (font[(c*5)+i]);
 80005be:	79fa      	ldrb	r2, [r7, #7]
 80005c0:	4613      	mov	r3, r2
 80005c2:	009b      	lsls	r3, r3, #2
 80005c4:	441a      	add	r2, r3
 80005c6:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80005ca:	4413      	add	r3, r2
 80005cc:	4a41      	ldr	r2, [pc, #260]	; (80006d4 <GFX_DrowChar+0x178>)
 80005ce:	5cd3      	ldrb	r3, [r2, r3]
 80005d0:	75fb      	strb	r3, [r7, #23]
	    for (j = 0; j<8; j++) {
 80005d2:	2300      	movs	r3, #0
 80005d4:	757b      	strb	r3, [r7, #21]
 80005d6:	e069      	b.n	80006ac <GFX_DrowChar+0x150>
	      if (line & 0x1) {
 80005d8:	7dfb      	ldrb	r3, [r7, #23]
 80005da:	f003 0301 	and.w	r3, r3, #1
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d02a      	beq.n	8000638 <GFX_DrowChar+0xdc>
	        if (size == 1) // default size
 80005e2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80005e6:	2b01      	cmp	r3, #1
 80005e8:	d10c      	bne.n	8000604 <GFX_DrowChar+0xa8>
	        	ssd1327_setPixel(x+i, y+j, color);
 80005ea:	f997 2016 	ldrsb.w	r2, [r7, #22]
 80005ee:	68fb      	ldr	r3, [r7, #12]
 80005f0:	18d0      	adds	r0, r2, r3
 80005f2:	f997 2015 	ldrsb.w	r2, [r7, #21]
 80005f6:	68bb      	ldr	r3, [r7, #8]
 80005f8:	4413      	add	r3, r2
 80005fa:	79ba      	ldrb	r2, [r7, #6]
 80005fc:	4619      	mov	r1, r3
 80005fe:	f002 f8fb 	bl	80027f8 <ssd1327_setPixel>
 8000602:	e04a      	b.n	800069a <GFX_DrowChar+0x13e>
	        else {  // big size
	        	GFX_FillRect(x+(i*size), y+(j*size), size, size, color);
 8000604:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8000608:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800060c:	fb03 f202 	mul.w	r2, r3, r2
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	18d0      	adds	r0, r2, r3
 8000614:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000618:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800061c:	fb03 f202 	mul.w	r2, r3, r2
 8000620:	68bb      	ldr	r3, [r7, #8]
 8000622:	18d1      	adds	r1, r2, r3
 8000624:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8000628:	f897 402c 	ldrb.w	r4, [r7, #44]	; 0x2c
 800062c:	79bb      	ldrb	r3, [r7, #6]
 800062e:	9300      	str	r3, [sp, #0]
 8000630:	4623      	mov	r3, r4
 8000632:	f000 f851 	bl	80006d8 <GFX_FillRect>
 8000636:	e030      	b.n	800069a <GFX_DrowChar+0x13e>
	        }
	      } else if (bg != color) {
 8000638:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800063c:	79bb      	ldrb	r3, [r7, #6]
 800063e:	429a      	cmp	r2, r3
 8000640:	d02b      	beq.n	800069a <GFX_DrowChar+0x13e>
	        if (size == 1) // default size
 8000642:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000646:	2b01      	cmp	r3, #1
 8000648:	d10d      	bne.n	8000666 <GFX_DrowChar+0x10a>
	        	ssd1327_setPixel(x+i, y+j, bg);
 800064a:	f997 2016 	ldrsb.w	r2, [r7, #22]
 800064e:	68fb      	ldr	r3, [r7, #12]
 8000650:	18d0      	adds	r0, r2, r3
 8000652:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8000656:	68bb      	ldr	r3, [r7, #8]
 8000658:	4413      	add	r3, r2
 800065a:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800065e:	4619      	mov	r1, r3
 8000660:	f002 f8ca 	bl	80027f8 <ssd1327_setPixel>
 8000664:	e019      	b.n	800069a <GFX_DrowChar+0x13e>
	        else {  // big size
	        	GFX_FillRect(x+i*size, y+j*size, size, size, bg);
 8000666:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800066a:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800066e:	fb03 f202 	mul.w	r2, r3, r2
 8000672:	68fb      	ldr	r3, [r7, #12]
 8000674:	18d0      	adds	r0, r2, r3
 8000676:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800067a:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800067e:	fb03 f202 	mul.w	r2, r3, r2
 8000682:	68bb      	ldr	r3, [r7, #8]
 8000684:	18d1      	adds	r1, r2, r3
 8000686:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800068a:	f897 402c 	ldrb.w	r4, [r7, #44]	; 0x2c
 800068e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000692:	9300      	str	r3, [sp, #0]
 8000694:	4623      	mov	r3, r4
 8000696:	f000 f81f 	bl	80006d8 <GFX_FillRect>
	        }
	      }
	      line >>= 1;
 800069a:	7dfb      	ldrb	r3, [r7, #23]
 800069c:	085b      	lsrs	r3, r3, #1
 800069e:	75fb      	strb	r3, [r7, #23]
	    for (j = 0; j<8; j++) {
 80006a0:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80006a4:	b2db      	uxtb	r3, r3
 80006a6:	3301      	adds	r3, #1
 80006a8:	b2db      	uxtb	r3, r3
 80006aa:	757b      	strb	r3, [r7, #21]
 80006ac:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80006b0:	2b07      	cmp	r3, #7
 80006b2:	dd91      	ble.n	80005d8 <GFX_DrowChar+0x7c>
	  for  (i=0; i<6; i++ ) {
 80006b4:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80006b8:	b2db      	uxtb	r3, r3
 80006ba:	3301      	adds	r3, #1
 80006bc:	b2db      	uxtb	r3, r3
 80006be:	75bb      	strb	r3, [r7, #22]
 80006c0:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80006c4:	2b05      	cmp	r3, #5
 80006c6:	f77f af73 	ble.w	80005b0 <GFX_DrowChar+0x54>
 80006ca:	e000      	b.n	80006ce <GFX_DrowChar+0x172>
	    return;
 80006cc:	bf00      	nop
	    }
	  }
}
 80006ce:	371c      	adds	r7, #28
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd90      	pop	{r4, r7, pc}
 80006d4:	08006f2c 	.word	0x08006f2c

080006d8 <GFX_FillRect>:

void GFX_FillRect (int x, int y, int w, int h, uint8_t color )
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b086      	sub	sp, #24
 80006dc:	af00      	add	r7, sp, #0
 80006de:	60f8      	str	r0, [r7, #12]
 80006e0:	60b9      	str	r1, [r7, #8]
 80006e2:	607a      	str	r2, [r7, #4]
 80006e4:	603b      	str	r3, [r7, #0]
	int16_t i;
	for(i=x; i <x+w; i++)
 80006e6:	68fb      	ldr	r3, [r7, #12]
 80006e8:	82fb      	strh	r3, [r7, #22]
 80006ea:	e00d      	b.n	8000708 <GFX_FillRect+0x30>
	{
		GFX_DrowFastVLine(i, y, h, color);
 80006ec:	f9b7 0016 	ldrsh.w	r0, [r7, #22]
 80006f0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80006f4:	683a      	ldr	r2, [r7, #0]
 80006f6:	68b9      	ldr	r1, [r7, #8]
 80006f8:	f000 f812 	bl	8000720 <GFX_DrowFastVLine>
	for(i=x; i <x+w; i++)
 80006fc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000700:	b29b      	uxth	r3, r3
 8000702:	3301      	adds	r3, #1
 8000704:	b29b      	uxth	r3, r3
 8000706:	82fb      	strh	r3, [r7, #22]
 8000708:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800070c:	68f9      	ldr	r1, [r7, #12]
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	440b      	add	r3, r1
 8000712:	429a      	cmp	r2, r3
 8000714:	dbea      	blt.n	80006ec <GFX_FillRect+0x14>
	}
}
 8000716:	bf00      	nop
 8000718:	bf00      	nop
 800071a:	3718      	adds	r7, #24
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}

08000720 <GFX_DrowFastVLine>:

void GFX_DrowFastVLine(int x, int y, int h, uint8_t color)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b086      	sub	sp, #24
 8000724:	af02      	add	r7, sp, #8
 8000726:	60f8      	str	r0, [r7, #12]
 8000728:	60b9      	str	r1, [r7, #8]
 800072a:	607a      	str	r2, [r7, #4]
 800072c:	70fb      	strb	r3, [r7, #3]
	GFX_DrowLine(x, y, x, y+h-1, color);
 800072e:	68ba      	ldr	r2, [r7, #8]
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	4413      	add	r3, r2
 8000734:	1e5a      	subs	r2, r3, #1
 8000736:	78fb      	ldrb	r3, [r7, #3]
 8000738:	9300      	str	r3, [sp, #0]
 800073a:	4613      	mov	r3, r2
 800073c:	68fa      	ldr	r2, [r7, #12]
 800073e:	68b9      	ldr	r1, [r7, #8]
 8000740:	68f8      	ldr	r0, [r7, #12]
 8000742:	f7ff fd95 	bl	8000270 <GFX_DrowLine>
}
 8000746:	bf00      	nop
 8000748:	3710      	adds	r7, #16
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}

0800074e <GFX_DrowFastHLine>:

void GFX_DrowFastHLine(int x, int y, int w, uint8_t color)
{
 800074e:	b580      	push	{r7, lr}
 8000750:	b086      	sub	sp, #24
 8000752:	af02      	add	r7, sp, #8
 8000754:	60f8      	str	r0, [r7, #12]
 8000756:	60b9      	str	r1, [r7, #8]
 8000758:	607a      	str	r2, [r7, #4]
 800075a:	70fb      	strb	r3, [r7, #3]
	GFX_DrowLine(x, y, x+w-1 ,y , color);
 800075c:	68fa      	ldr	r2, [r7, #12]
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	4413      	add	r3, r2
 8000762:	1e5a      	subs	r2, r3, #1
 8000764:	78fb      	ldrb	r3, [r7, #3]
 8000766:	9300      	str	r3, [sp, #0]
 8000768:	68bb      	ldr	r3, [r7, #8]
 800076a:	68b9      	ldr	r1, [r7, #8]
 800076c:	68f8      	ldr	r0, [r7, #12]
 800076e:	f7ff fd7f 	bl	8000270 <GFX_DrowLine>
}
 8000772:	bf00      	nop
 8000774:	3710      	adds	r7, #16
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
	...

0800077c <GFX_PutString>:

void GFX_PutString(int x, int y, char* str, uint8_t txt_size, uint8_t color, uint8_t bg)
{
 800077c:	b590      	push	{r4, r7, lr}
 800077e:	b087      	sub	sp, #28
 8000780:	af02      	add	r7, sp, #8
 8000782:	60f8      	str	r0, [r7, #12]
 8000784:	60b9      	str	r1, [r7, #8]
 8000786:	607a      	str	r2, [r7, #4]
 8000788:	70fb      	strb	r3, [r7, #3]
	cursor_x = x;
 800078a:	4a16      	ldr	r2, [pc, #88]	; (80007e4 <GFX_PutString+0x68>)
 800078c:	68fb      	ldr	r3, [r7, #12]
 800078e:	6013      	str	r3, [r2, #0]
	cursor_y = y;
 8000790:	4a15      	ldr	r2, [pc, #84]	; (80007e8 <GFX_PutString+0x6c>)
 8000792:	68bb      	ldr	r3, [r7, #8]
 8000794:	6013      	str	r3, [r2, #0]

	while(*str)		//do kiedy jest cos w stringu
 8000796:	e01c      	b.n	80007d2 <GFX_PutString+0x56>
	{
		GFX_DrowChar(cursor_x,cursor_y, *str++, color, bg, txt_size);
 8000798:	4b12      	ldr	r3, [pc, #72]	; (80007e4 <GFX_PutString+0x68>)
 800079a:	6818      	ldr	r0, [r3, #0]
 800079c:	4b12      	ldr	r3, [pc, #72]	; (80007e8 <GFX_PutString+0x6c>)
 800079e:	6819      	ldr	r1, [r3, #0]
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	1c5a      	adds	r2, r3, #1
 80007a4:	607a      	str	r2, [r7, #4]
 80007a6:	781a      	ldrb	r2, [r3, #0]
 80007a8:	f897 4020 	ldrb.w	r4, [r7, #32]
 80007ac:	78fb      	ldrb	r3, [r7, #3]
 80007ae:	9301      	str	r3, [sp, #4]
 80007b0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80007b4:	9300      	str	r3, [sp, #0]
 80007b6:	4623      	mov	r3, r4
 80007b8:	f7ff fed0 	bl	800055c <GFX_DrowChar>
		cursor_x += txt_size*6; // tylko pod dany font trzeba potem to korygowa�
 80007bc:	78fa      	ldrb	r2, [r7, #3]
 80007be:	4613      	mov	r3, r2
 80007c0:	005b      	lsls	r3, r3, #1
 80007c2:	4413      	add	r3, r2
 80007c4:	005b      	lsls	r3, r3, #1
 80007c6:	461a      	mov	r2, r3
 80007c8:	4b06      	ldr	r3, [pc, #24]	; (80007e4 <GFX_PutString+0x68>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	4413      	add	r3, r2
 80007ce:	4a05      	ldr	r2, [pc, #20]	; (80007e4 <GFX_PutString+0x68>)
 80007d0:	6013      	str	r3, [r2, #0]
	while(*str)		//do kiedy jest cos w stringu
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	781b      	ldrb	r3, [r3, #0]
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d1de      	bne.n	8000798 <GFX_PutString+0x1c>
	}
}
 80007da:	bf00      	nop
 80007dc:	bf00      	nop
 80007de:	3714      	adds	r7, #20
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd90      	pop	{r4, r7, pc}
 80007e4:	20000098 	.word	0x20000098
 80007e8:	2000009c 	.word	0x2000009c

080007ec <GFX_PutInt>:

void GFX_PutInt (int x, int y, int data, uint8_t txt_size, uint8_t color, uint8_t bg)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b08a      	sub	sp, #40	; 0x28
 80007f0:	af02      	add	r7, sp, #8
 80007f2:	60f8      	str	r0, [r7, #12]
 80007f4:	60b9      	str	r1, [r7, #8]
 80007f6:	607a      	str	r2, [r7, #4]
 80007f8:	70fb      	strb	r3, [r7, #3]
	char buf[16];
	GFX_PutString(x, y, itoa(data, buf,10), txt_size, color, bg);
 80007fa:	f107 0310 	add.w	r3, r7, #16
 80007fe:	220a      	movs	r2, #10
 8000800:	4619      	mov	r1, r3
 8000802:	6878      	ldr	r0, [r7, #4]
 8000804:	f000 f88c 	bl	8000920 <itoa>
 8000808:	4601      	mov	r1, r0
 800080a:	78fa      	ldrb	r2, [r7, #3]
 800080c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000810:	9301      	str	r3, [sp, #4]
 8000812:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000816:	9300      	str	r3, [sp, #0]
 8000818:	4613      	mov	r3, r2
 800081a:	460a      	mov	r2, r1
 800081c:	68b9      	ldr	r1, [r7, #8]
 800081e:	68f8      	ldr	r0, [r7, #12]
 8000820:	f7ff ffac 	bl	800077c <GFX_PutString>
	//GFX_PutString(x, y, dtoa((double)data,1,1,1,1,buf), txt_size, color, bg);
	//itoa(data,buf);
	//GFX_PutString(x, y, buf , txt_size, color, bg);
}
 8000824:	bf00      	nop
 8000826:	3720      	adds	r7, #32
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}

0800082c <GFX_DrowRoundRect>:

void GFX_DrowRoundRect(int x, int y, int w, int h, uint8_t r, uint8_t color)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b086      	sub	sp, #24
 8000830:	af02      	add	r7, sp, #8
 8000832:	60f8      	str	r0, [r7, #12]
 8000834:	60b9      	str	r1, [r7, #8]
 8000836:	607a      	str	r2, [r7, #4]
 8000838:	603b      	str	r3, [r7, #0]
	// r - to jest wielkosc zaokraglonego naro�nika
	GFX_DrowFastHLine(x+r	,y		,w-2*r	,color );
 800083a:	7e3a      	ldrb	r2, [r7, #24]
 800083c:	68fb      	ldr	r3, [r7, #12]
 800083e:	18d0      	adds	r0, r2, r3
 8000840:	7e3b      	ldrb	r3, [r7, #24]
 8000842:	005b      	lsls	r3, r3, #1
 8000844:	687a      	ldr	r2, [r7, #4]
 8000846:	1ad2      	subs	r2, r2, r3
 8000848:	7f3b      	ldrb	r3, [r7, #28]
 800084a:	68b9      	ldr	r1, [r7, #8]
 800084c:	f7ff ff7f 	bl	800074e <GFX_DrowFastHLine>
	GFX_DrowFastHLine(x+r	,y+h-1	,w-2*r	,color );
 8000850:	7e3a      	ldrb	r2, [r7, #24]
 8000852:	68fb      	ldr	r3, [r7, #12]
 8000854:	18d0      	adds	r0, r2, r3
 8000856:	68ba      	ldr	r2, [r7, #8]
 8000858:	683b      	ldr	r3, [r7, #0]
 800085a:	4413      	add	r3, r2
 800085c:	1e59      	subs	r1, r3, #1
 800085e:	7e3b      	ldrb	r3, [r7, #24]
 8000860:	005b      	lsls	r3, r3, #1
 8000862:	687a      	ldr	r2, [r7, #4]
 8000864:	1ad2      	subs	r2, r2, r3
 8000866:	7f3b      	ldrb	r3, [r7, #28]
 8000868:	f7ff ff71 	bl	800074e <GFX_DrowFastHLine>
	GFX_DrowFastVLine(x		,y+r	,h-2*r	,color );
 800086c:	7e3a      	ldrb	r2, [r7, #24]
 800086e:	68bb      	ldr	r3, [r7, #8]
 8000870:	18d1      	adds	r1, r2, r3
 8000872:	7e3b      	ldrb	r3, [r7, #24]
 8000874:	005b      	lsls	r3, r3, #1
 8000876:	683a      	ldr	r2, [r7, #0]
 8000878:	1ad2      	subs	r2, r2, r3
 800087a:	7f3b      	ldrb	r3, [r7, #28]
 800087c:	68f8      	ldr	r0, [r7, #12]
 800087e:	f7ff ff4f 	bl	8000720 <GFX_DrowFastVLine>
	GFX_DrowFastVLine(x+w-1	,y+r	,h-2*r	,color );
 8000882:	68fa      	ldr	r2, [r7, #12]
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	4413      	add	r3, r2
 8000888:	1e58      	subs	r0, r3, #1
 800088a:	7e3a      	ldrb	r2, [r7, #24]
 800088c:	68bb      	ldr	r3, [r7, #8]
 800088e:	18d1      	adds	r1, r2, r3
 8000890:	7e3b      	ldrb	r3, [r7, #24]
 8000892:	005b      	lsls	r3, r3, #1
 8000894:	683a      	ldr	r2, [r7, #0]
 8000896:	1ad2      	subs	r2, r2, r3
 8000898:	7f3b      	ldrb	r3, [r7, #28]
 800089a:	f7ff ff41 	bl	8000720 <GFX_DrowFastVLine>

	GFX_DrowCircleHelper(x+r	,y+r	,r	,1	,color);
 800089e:	7e3a      	ldrb	r2, [r7, #24]
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	18d0      	adds	r0, r2, r3
 80008a4:	7e3a      	ldrb	r2, [r7, #24]
 80008a6:	68bb      	ldr	r3, [r7, #8]
 80008a8:	18d1      	adds	r1, r2, r3
 80008aa:	7e3a      	ldrb	r2, [r7, #24]
 80008ac:	7f3b      	ldrb	r3, [r7, #28]
 80008ae:	9300      	str	r3, [sp, #0]
 80008b0:	2301      	movs	r3, #1
 80008b2:	f7ff fd64 	bl	800037e <GFX_DrowCircleHelper>
	GFX_DrowCircleHelper(x+w-r-1,y+r	,r	,2	,color);
 80008b6:	68fa      	ldr	r2, [r7, #12]
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	441a      	add	r2, r3
 80008bc:	7e3b      	ldrb	r3, [r7, #24]
 80008be:	1ad3      	subs	r3, r2, r3
 80008c0:	1e58      	subs	r0, r3, #1
 80008c2:	7e3a      	ldrb	r2, [r7, #24]
 80008c4:	68bb      	ldr	r3, [r7, #8]
 80008c6:	18d1      	adds	r1, r2, r3
 80008c8:	7e3a      	ldrb	r2, [r7, #24]
 80008ca:	7f3b      	ldrb	r3, [r7, #28]
 80008cc:	9300      	str	r3, [sp, #0]
 80008ce:	2302      	movs	r3, #2
 80008d0:	f7ff fd55 	bl	800037e <GFX_DrowCircleHelper>
	GFX_DrowCircleHelper(x+w-r-1,y+h-r-1,r	,4	,color);
 80008d4:	68fa      	ldr	r2, [r7, #12]
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	441a      	add	r2, r3
 80008da:	7e3b      	ldrb	r3, [r7, #24]
 80008dc:	1ad3      	subs	r3, r2, r3
 80008de:	1e58      	subs	r0, r3, #1
 80008e0:	68ba      	ldr	r2, [r7, #8]
 80008e2:	683b      	ldr	r3, [r7, #0]
 80008e4:	441a      	add	r2, r3
 80008e6:	7e3b      	ldrb	r3, [r7, #24]
 80008e8:	1ad3      	subs	r3, r2, r3
 80008ea:	1e59      	subs	r1, r3, #1
 80008ec:	7e3a      	ldrb	r2, [r7, #24]
 80008ee:	7f3b      	ldrb	r3, [r7, #28]
 80008f0:	9300      	str	r3, [sp, #0]
 80008f2:	2304      	movs	r3, #4
 80008f4:	f7ff fd43 	bl	800037e <GFX_DrowCircleHelper>
	GFX_DrowCircleHelper(x+r	,y+h-r-1,r	,8	,color);
 80008f8:	7e3a      	ldrb	r2, [r7, #24]
 80008fa:	68fb      	ldr	r3, [r7, #12]
 80008fc:	18d0      	adds	r0, r2, r3
 80008fe:	68ba      	ldr	r2, [r7, #8]
 8000900:	683b      	ldr	r3, [r7, #0]
 8000902:	441a      	add	r2, r3
 8000904:	7e3b      	ldrb	r3, [r7, #24]
 8000906:	1ad3      	subs	r3, r2, r3
 8000908:	1e59      	subs	r1, r3, #1
 800090a:	7e3a      	ldrb	r2, [r7, #24]
 800090c:	7f3b      	ldrb	r3, [r7, #28]
 800090e:	9300      	str	r3, [sp, #0]
 8000910:	2308      	movs	r3, #8
 8000912:	f7ff fd34 	bl	800037e <GFX_DrowCircleHelper>
}
 8000916:	bf00      	nop
 8000918:	3710      	adds	r7, #16
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
	...

08000920 <itoa>:
* \param [in] base the base of conversion
* \return pointer to \em buffer
*//*-------------------------------------------------------------------------*/

char* itoa(int value, char* buffer, int base)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b088      	sub	sp, #32
 8000924:	af00      	add	r7, sp, #0
 8000926:	60f8      	str	r0, [r7, #12]
 8000928:	60b9      	str	r1, [r7, #8]
 800092a:	607a      	str	r2, [r7, #4]
	static const char digits[]="0123456789abcdef";

	char* buffer_copy=buffer;
 800092c:	68bb      	ldr	r3, [r7, #8]
 800092e:	61bb      	str	r3, [r7, #24]
	int32_t sign=0;
 8000930:	2300      	movs	r3, #0
 8000932:	61fb      	str	r3, [r7, #28]
	int32_t quot,rem;

	if ((base>=2)&&(base<=16))				// is the base valid?
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	2b01      	cmp	r3, #1
 8000938:	dd36      	ble.n	80009a8 <itoa+0x88>
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	2b10      	cmp	r3, #16
 800093e:	dc33      	bgt.n	80009a8 <itoa+0x88>
	{
		if (base == 10 && (sign = value) < 0)// negative value and base == 10? store the copy (sign)
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	2b0a      	cmp	r3, #10
 8000944:	d107      	bne.n	8000956 <itoa+0x36>
 8000946:	68fb      	ldr	r3, [r7, #12]
 8000948:	61fb      	str	r3, [r7, #28]
 800094a:	69fb      	ldr	r3, [r7, #28]
 800094c:	2b00      	cmp	r3, #0
 800094e:	da02      	bge.n	8000956 <itoa+0x36>
			value = -value;					// make it positive
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	425b      	negs	r3, r3
 8000954:	60fb      	str	r3, [r7, #12]

		do
		{
			quot=value/base;				// calculate quotient and remainder
 8000956:	68fa      	ldr	r2, [r7, #12]
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	fb92 f3f3 	sdiv	r3, r2, r3
 800095e:	617b      	str	r3, [r7, #20]
			rem=value%base;
 8000960:	68fb      	ldr	r3, [r7, #12]
 8000962:	687a      	ldr	r2, [r7, #4]
 8000964:	fb93 f2f2 	sdiv	r2, r3, r2
 8000968:	6879      	ldr	r1, [r7, #4]
 800096a:	fb01 f202 	mul.w	r2, r1, r2
 800096e:	1a9b      	subs	r3, r3, r2
 8000970:	613b      	str	r3, [r7, #16]
			*buffer++ = digits[rem];		// append the remainder to the string
 8000972:	68bb      	ldr	r3, [r7, #8]
 8000974:	1c5a      	adds	r2, r3, #1
 8000976:	60ba      	str	r2, [r7, #8]
 8000978:	490f      	ldr	r1, [pc, #60]	; (80009b8 <itoa+0x98>)
 800097a:	693a      	ldr	r2, [r7, #16]
 800097c:	440a      	add	r2, r1
 800097e:	7812      	ldrb	r2, [r2, #0]
 8000980:	701a      	strb	r2, [r3, #0]
		} while ((value=quot));				// loop while there is something to convert
 8000982:	697b      	ldr	r3, [r7, #20]
 8000984:	60fb      	str	r3, [r7, #12]
 8000986:	68fb      	ldr	r3, [r7, #12]
 8000988:	2b00      	cmp	r3, #0
 800098a:	d1e4      	bne.n	8000956 <itoa+0x36>

		if (sign<0)							// was the value negative?
 800098c:	69fb      	ldr	r3, [r7, #28]
 800098e:	2b00      	cmp	r3, #0
 8000990:	da04      	bge.n	800099c <itoa+0x7c>
			*buffer++='-';					// append the sign
 8000992:	68bb      	ldr	r3, [r7, #8]
 8000994:	1c5a      	adds	r2, r3, #1
 8000996:	60ba      	str	r2, [r7, #8]
 8000998:	222d      	movs	r2, #45	; 0x2d
 800099a:	701a      	strb	r2, [r3, #0]

		__reverse(buffer_copy,buffer-1);		// reverse the string
 800099c:	68bb      	ldr	r3, [r7, #8]
 800099e:	3b01      	subs	r3, #1
 80009a0:	4619      	mov	r1, r3
 80009a2:	69b8      	ldr	r0, [r7, #24]
 80009a4:	f000 f80a 	bl	80009bc <__reverse>
	}

	*buffer='\0';
 80009a8:	68bb      	ldr	r3, [r7, #8]
 80009aa:	2200      	movs	r2, #0
 80009ac:	701a      	strb	r2, [r3, #0]
	return buffer_copy;
 80009ae:	69bb      	ldr	r3, [r7, #24]
}
 80009b0:	4618      	mov	r0, r3
 80009b2:	3720      	adds	r7, #32
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	08007684 	.word	0x08007684

080009bc <__reverse>:
* \param [in,out] begin pointer to the beginning of the string
* \param [in,out] end pointer to the end of the string
*//*-------------------------------------------------------------------------*/

static void __reverse(char* begin,char* end)
{
 80009bc:	b480      	push	{r7}
 80009be:	b085      	sub	sp, #20
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
 80009c4:	6039      	str	r1, [r7, #0]
	char temp;

	while (end>begin)
 80009c6:	e00d      	b.n	80009e4 <__reverse+0x28>
	{
		temp=*end;
 80009c8:	683b      	ldr	r3, [r7, #0]
 80009ca:	781b      	ldrb	r3, [r3, #0]
 80009cc:	73fb      	strb	r3, [r7, #15]
		*end--=*begin;
 80009ce:	683b      	ldr	r3, [r7, #0]
 80009d0:	1e5a      	subs	r2, r3, #1
 80009d2:	603a      	str	r2, [r7, #0]
 80009d4:	687a      	ldr	r2, [r7, #4]
 80009d6:	7812      	ldrb	r2, [r2, #0]
 80009d8:	701a      	strb	r2, [r3, #0]
		*begin++=temp;
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	1c5a      	adds	r2, r3, #1
 80009de:	607a      	str	r2, [r7, #4]
 80009e0:	7bfa      	ldrb	r2, [r7, #15]
 80009e2:	701a      	strb	r2, [r3, #0]
	while (end>begin)
 80009e4:	683a      	ldr	r2, [r7, #0]
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	429a      	cmp	r2, r3
 80009ea:	d8ed      	bhi.n	80009c8 <__reverse+0xc>
	}
}
 80009ec:	bf00      	nop
 80009ee:	bf00      	nop
 80009f0:	3714      	adds	r7, #20
 80009f2:	46bd      	mov	sp, r7
 80009f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f8:	4770      	bx	lr
	...

080009fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a00:	f002 f93f 	bl	8002c82 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a04:	f000 f834 	bl	8000a70 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a08:	f000 f936 	bl	8000c78 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000a0c:	f000 f892 	bl	8000b34 <MX_ADC1_Init>
  MX_SPI1_Init();
 8000a10:	f000 f8f4 	bl	8000bfc <MX_SPI1_Init>

//  // Konfiguracja ADC z DMA
//  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
//  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)value, 2);

  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8000a14:	217f      	movs	r1, #127	; 0x7f
 8000a16:	4813      	ldr	r0, [pc, #76]	; (8000a64 <main+0x68>)
 8000a18:	f003 fa50 	bl	8003ebc <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start(&hadc1);
 8000a1c:	4811      	ldr	r0, [pc, #68]	; (8000a64 <main+0x68>)
 8000a1e:	f002 fceb 	bl	80033f8 <HAL_ADC_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  ssd1327_SpiInit(&hspi1);
 8000a22:	4811      	ldr	r0, [pc, #68]	; (8000a68 <main+0x6c>)
 8000a24:	f001 fe22 	bl	800266c <ssd1327_SpiInit>
  ssd1327_CLR();
 8000a28:	f001 feda 	bl	80027e0 <ssd1327_CLR>
  ssd1327_display();
 8000a2c:	f001 fea0 	bl	8002770 <ssd1327_display>

  start_game();
 8000a30:	f001 fc48 	bl	80022c4 <start_game>
  add_enemy();
 8000a34:	f001 fcb4 	bl	80023a0 <add_enemy>

  while (1)
  {
		switch (state)
 8000a38:	4b0c      	ldr	r3, [pc, #48]	; (8000a6c <main+0x70>)
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	2b02      	cmp	r3, #2
 8000a3e:	d00c      	beq.n	8000a5a <main+0x5e>
 8000a40:	2b02      	cmp	r3, #2
 8000a42:	dcf9      	bgt.n	8000a38 <main+0x3c>
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d002      	beq.n	8000a4e <main+0x52>
 8000a48:	2b01      	cmp	r3, #1
 8000a4a:	d003      	beq.n	8000a54 <main+0x58>
 8000a4c:	e7f4      	b.n	8000a38 <main+0x3c>
		{
		case st_menu:
			run_menu(); break;
 8000a4e:	f001 fbe7 	bl	8002220 <run_menu>
 8000a52:	e005      	b.n	8000a60 <main+0x64>
		case st_playing:
			run_game(); break;
 8000a54:	f001 fbd4 	bl	8002200 <run_game>
 8000a58:	e002      	b.n	8000a60 <main+0x64>
		case st_dead:
			run_dead();	break;
 8000a5a:	f000 fb25 	bl	80010a8 <run_dead>
 8000a5e:	bf00      	nop
		switch (state)
 8000a60:	e7ea      	b.n	8000a38 <main+0x3c>
 8000a62:	bf00      	nop
 8000a64:	200000a0 	.word	0x200000a0
 8000a68:	20000104 	.word	0x20000104
 8000a6c:	20000674 	.word	0x20000674

08000a70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b096      	sub	sp, #88	; 0x58
 8000a74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a76:	f107 0314 	add.w	r3, r7, #20
 8000a7a:	2244      	movs	r2, #68	; 0x44
 8000a7c:	2100      	movs	r1, #0
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f005 fa08 	bl	8005e94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a84:	463b      	mov	r3, r7
 8000a86:	2200      	movs	r2, #0
 8000a88:	601a      	str	r2, [r3, #0]
 8000a8a:	605a      	str	r2, [r3, #4]
 8000a8c:	609a      	str	r2, [r3, #8]
 8000a8e:	60da      	str	r2, [r3, #12]
 8000a90:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000a92:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000a96:	f003 fd0f 	bl	80044b8 <HAL_PWREx_ControlVoltageScaling>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000aa0:	f001 fda4 	bl	80025ec <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000aa4:	f003 fcea 	bl	800447c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000aa8:	4b21      	ldr	r3, [pc, #132]	; (8000b30 <SystemClock_Config+0xc0>)
 8000aaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000aae:	4a20      	ldr	r2, [pc, #128]	; (8000b30 <SystemClock_Config+0xc0>)
 8000ab0:	f023 0318 	bic.w	r3, r3, #24
 8000ab4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000ab8:	2314      	movs	r3, #20
 8000aba:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000abc:	2301      	movs	r3, #1
 8000abe:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000ac8:	2360      	movs	r3, #96	; 0x60
 8000aca:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000acc:	2302      	movs	r3, #2
 8000ace:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000ad0:	2301      	movs	r3, #1
 8000ad2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000ad8:	2328      	movs	r3, #40	; 0x28
 8000ada:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000adc:	2307      	movs	r3, #7
 8000ade:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000ae0:	2302      	movs	r3, #2
 8000ae2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000ae4:	2302      	movs	r3, #2
 8000ae6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ae8:	f107 0314 	add.w	r3, r7, #20
 8000aec:	4618      	mov	r0, r3
 8000aee:	f003 fd39 	bl	8004564 <HAL_RCC_OscConfig>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d001      	beq.n	8000afc <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000af8:	f001 fd78 	bl	80025ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000afc:	230f      	movs	r3, #15
 8000afe:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b00:	2303      	movs	r3, #3
 8000b02:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b04:	2300      	movs	r3, #0
 8000b06:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000b10:	463b      	mov	r3, r7
 8000b12:	2104      	movs	r1, #4
 8000b14:	4618      	mov	r0, r3
 8000b16:	f004 f939 	bl	8004d8c <HAL_RCC_ClockConfig>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000b20:	f001 fd64 	bl	80025ec <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000b24:	f004 fd14 	bl	8005550 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000b28:	bf00      	nop
 8000b2a:	3758      	adds	r7, #88	; 0x58
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	40021000 	.word	0x40021000

08000b34 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b086      	sub	sp, #24
 8000b38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b3a:	463b      	mov	r3, r7
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	601a      	str	r2, [r3, #0]
 8000b40:	605a      	str	r2, [r3, #4]
 8000b42:	609a      	str	r2, [r3, #8]
 8000b44:	60da      	str	r2, [r3, #12]
 8000b46:	611a      	str	r2, [r3, #16]
 8000b48:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000b4a:	4b29      	ldr	r3, [pc, #164]	; (8000bf0 <MX_ADC1_Init+0xbc>)
 8000b4c:	4a29      	ldr	r2, [pc, #164]	; (8000bf4 <MX_ADC1_Init+0xc0>)
 8000b4e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000b50:	4b27      	ldr	r3, [pc, #156]	; (8000bf0 <MX_ADC1_Init+0xbc>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000b56:	4b26      	ldr	r3, [pc, #152]	; (8000bf0 <MX_ADC1_Init+0xbc>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b5c:	4b24      	ldr	r3, [pc, #144]	; (8000bf0 <MX_ADC1_Init+0xbc>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b62:	4b23      	ldr	r3, [pc, #140]	; (8000bf0 <MX_ADC1_Init+0xbc>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b68:	4b21      	ldr	r3, [pc, #132]	; (8000bf0 <MX_ADC1_Init+0xbc>)
 8000b6a:	2204      	movs	r2, #4
 8000b6c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000b6e:	4b20      	ldr	r3, [pc, #128]	; (8000bf0 <MX_ADC1_Init+0xbc>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000b74:	4b1e      	ldr	r3, [pc, #120]	; (8000bf0 <MX_ADC1_Init+0xbc>)
 8000b76:	2201      	movs	r2, #1
 8000b78:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000b7a:	4b1d      	ldr	r3, [pc, #116]	; (8000bf0 <MX_ADC1_Init+0xbc>)
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b80:	4b1b      	ldr	r3, [pc, #108]	; (8000bf0 <MX_ADC1_Init+0xbc>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b88:	4b19      	ldr	r3, [pc, #100]	; (8000bf0 <MX_ADC1_Init+0xbc>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b8e:	4b18      	ldr	r3, [pc, #96]	; (8000bf0 <MX_ADC1_Init+0xbc>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000b94:	4b16      	ldr	r3, [pc, #88]	; (8000bf0 <MX_ADC1_Init+0xbc>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000b9c:	4b14      	ldr	r3, [pc, #80]	; (8000bf0 <MX_ADC1_Init+0xbc>)
 8000b9e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ba2:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000ba4:	4b12      	ldr	r3, [pc, #72]	; (8000bf0 <MX_ADC1_Init+0xbc>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000bac:	4810      	ldr	r0, [pc, #64]	; (8000bf0 <MX_ADC1_Init+0xbc>)
 8000bae:	f002 fadb 	bl	8003168 <HAL_ADC_Init>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d001      	beq.n	8000bbc <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 8000bb8:	f001 fd18 	bl	80025ec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000bbc:	4b0e      	ldr	r3, [pc, #56]	; (8000bf8 <MX_ADC1_Init+0xc4>)
 8000bbe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000bc0:	2306      	movs	r3, #6
 8000bc2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8000bc4:	2307      	movs	r3, #7
 8000bc6:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000bc8:	237f      	movs	r3, #127	; 0x7f
 8000bca:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000bcc:	2304      	movs	r3, #4
 8000bce:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bd4:	463b      	mov	r3, r7
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	4805      	ldr	r0, [pc, #20]	; (8000bf0 <MX_ADC1_Init+0xbc>)
 8000bda:	f002 fc7d 	bl	80034d8 <HAL_ADC_ConfigChannel>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d001      	beq.n	8000be8 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 8000be4:	f001 fd02 	bl	80025ec <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000be8:	bf00      	nop
 8000bea:	3718      	adds	r7, #24
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	200000a0 	.word	0x200000a0
 8000bf4:	50040000 	.word	0x50040000
 8000bf8:	14f00020 	.word	0x14f00020

08000bfc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000c00:	4b1b      	ldr	r3, [pc, #108]	; (8000c70 <MX_SPI1_Init+0x74>)
 8000c02:	4a1c      	ldr	r2, [pc, #112]	; (8000c74 <MX_SPI1_Init+0x78>)
 8000c04:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c06:	4b1a      	ldr	r3, [pc, #104]	; (8000c70 <MX_SPI1_Init+0x74>)
 8000c08:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c0c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c0e:	4b18      	ldr	r3, [pc, #96]	; (8000c70 <MX_SPI1_Init+0x74>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c14:	4b16      	ldr	r3, [pc, #88]	; (8000c70 <MX_SPI1_Init+0x74>)
 8000c16:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000c1a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c1c:	4b14      	ldr	r3, [pc, #80]	; (8000c70 <MX_SPI1_Init+0x74>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c22:	4b13      	ldr	r3, [pc, #76]	; (8000c70 <MX_SPI1_Init+0x74>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000c28:	4b11      	ldr	r3, [pc, #68]	; (8000c70 <MX_SPI1_Init+0x74>)
 8000c2a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c2e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000c30:	4b0f      	ldr	r3, [pc, #60]	; (8000c70 <MX_SPI1_Init+0x74>)
 8000c32:	2210      	movs	r2, #16
 8000c34:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c36:	4b0e      	ldr	r3, [pc, #56]	; (8000c70 <MX_SPI1_Init+0x74>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c3c:	4b0c      	ldr	r3, [pc, #48]	; (8000c70 <MX_SPI1_Init+0x74>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c42:	4b0b      	ldr	r3, [pc, #44]	; (8000c70 <MX_SPI1_Init+0x74>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000c48:	4b09      	ldr	r3, [pc, #36]	; (8000c70 <MX_SPI1_Init+0x74>)
 8000c4a:	2207      	movs	r2, #7
 8000c4c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000c4e:	4b08      	ldr	r3, [pc, #32]	; (8000c70 <MX_SPI1_Init+0x74>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000c54:	4b06      	ldr	r3, [pc, #24]	; (8000c70 <MX_SPI1_Init+0x74>)
 8000c56:	2208      	movs	r2, #8
 8000c58:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c5a:	4805      	ldr	r0, [pc, #20]	; (8000c70 <MX_SPI1_Init+0x74>)
 8000c5c:	f004 fd7a 	bl	8005754 <HAL_SPI_Init>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000c66:	f001 fcc1 	bl	80025ec <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000c6a:	bf00      	nop
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	20000104 	.word	0x20000104
 8000c74:	40013000 	.word	0x40013000

08000c78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b088      	sub	sp, #32
 8000c7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c7e:	f107 030c 	add.w	r3, r7, #12
 8000c82:	2200      	movs	r2, #0
 8000c84:	601a      	str	r2, [r3, #0]
 8000c86:	605a      	str	r2, [r3, #4]
 8000c88:	609a      	str	r2, [r3, #8]
 8000c8a:	60da      	str	r2, [r3, #12]
 8000c8c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c8e:	4b30      	ldr	r3, [pc, #192]	; (8000d50 <MX_GPIO_Init+0xd8>)
 8000c90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c92:	4a2f      	ldr	r2, [pc, #188]	; (8000d50 <MX_GPIO_Init+0xd8>)
 8000c94:	f043 0304 	orr.w	r3, r3, #4
 8000c98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c9a:	4b2d      	ldr	r3, [pc, #180]	; (8000d50 <MX_GPIO_Init+0xd8>)
 8000c9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c9e:	f003 0304 	and.w	r3, r3, #4
 8000ca2:	60bb      	str	r3, [r7, #8]
 8000ca4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ca6:	4b2a      	ldr	r3, [pc, #168]	; (8000d50 <MX_GPIO_Init+0xd8>)
 8000ca8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000caa:	4a29      	ldr	r2, [pc, #164]	; (8000d50 <MX_GPIO_Init+0xd8>)
 8000cac:	f043 0301 	orr.w	r3, r3, #1
 8000cb0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cb2:	4b27      	ldr	r3, [pc, #156]	; (8000d50 <MX_GPIO_Init+0xd8>)
 8000cb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cb6:	f003 0301 	and.w	r3, r3, #1
 8000cba:	607b      	str	r3, [r7, #4]
 8000cbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cbe:	4b24      	ldr	r3, [pc, #144]	; (8000d50 <MX_GPIO_Init+0xd8>)
 8000cc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cc2:	4a23      	ldr	r2, [pc, #140]	; (8000d50 <MX_GPIO_Init+0xd8>)
 8000cc4:	f043 0302 	orr.w	r3, r3, #2
 8000cc8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cca:	4b21      	ldr	r3, [pc, #132]	; (8000d50 <MX_GPIO_Init+0xd8>)
 8000ccc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cce:	f003 0302 	and.w	r3, r3, #2
 8000cd2:	603b      	str	r3, [r7, #0]
 8000cd4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_RESET);
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000cdc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ce0:	f003 fbb4 	bl	800444c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|CS_Pin|DC_Pin, GPIO_PIN_RESET);
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	2138      	movs	r1, #56	; 0x38
 8000ce8:	481a      	ldr	r0, [pc, #104]	; (8000d54 <MX_GPIO_Init+0xdc>)
 8000cea:	f003 fbaf 	bl	800444c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_BTN_1_Pin */
  GPIO_InitStruct.Pin = USER_BTN_1_Pin;
 8000cee:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cf2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000cf8:	2302      	movs	r3, #2
 8000cfa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(USER_BTN_1_GPIO_Port, &GPIO_InitStruct);
 8000cfc:	f107 030c 	add.w	r3, r7, #12
 8000d00:	4619      	mov	r1, r3
 8000d02:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d06:	f003 fa1f 	bl	8004148 <HAL_GPIO_Init>

  /*Configure GPIO pin : RST_Pin */
  GPIO_InitStruct.Pin = RST_Pin;
 8000d0a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000d0e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d10:	2301      	movs	r3, #1
 8000d12:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d14:	2300      	movs	r3, #0
 8000d16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 8000d1c:	f107 030c 	add.w	r3, r7, #12
 8000d20:	4619      	mov	r1, r3
 8000d22:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d26:	f003 fa0f 	bl	8004148 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin CS_Pin DC_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|CS_Pin|DC_Pin;
 8000d2a:	2338      	movs	r3, #56	; 0x38
 8000d2c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d2e:	2301      	movs	r3, #1
 8000d30:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d32:	2300      	movs	r3, #0
 8000d34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d36:	2300      	movs	r3, #0
 8000d38:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d3a:	f107 030c 	add.w	r3, r7, #12
 8000d3e:	4619      	mov	r1, r3
 8000d40:	4804      	ldr	r0, [pc, #16]	; (8000d54 <MX_GPIO_Init+0xdc>)
 8000d42:	f003 fa01 	bl	8004148 <HAL_GPIO_Init>

}
 8000d46:	bf00      	nop
 8000d48:	3720      	adds	r7, #32
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	40021000 	.word	0x40021000
 8000d54:	48000400 	.word	0x48000400

08000d58 <add_backgrand>:

/* USER CODE BEGIN 4 */

void add_backgrand(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
	 * jedynie po�o�enie osi y.
	 *
	 */
	uint8_t i;

	for(i = 0; i < num_backgrand; i++)
 8000d5e:	2300      	movs	r3, #0
 8000d60:	71fb      	strb	r3, [r7, #7]
 8000d62:	e04f      	b.n	8000e04 <add_backgrand+0xac>
	{
		if(!backgrand[i].active)
 8000d64:	79fa      	ldrb	r2, [r7, #7]
 8000d66:	492b      	ldr	r1, [pc, #172]	; (8000e14 <add_backgrand+0xbc>)
 8000d68:	4613      	mov	r3, r2
 8000d6a:	009b      	lsls	r3, r3, #2
 8000d6c:	4413      	add	r3, r2
 8000d6e:	009b      	lsls	r3, r3, #2
 8000d70:	440b      	add	r3, r1
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	f083 0301 	eor.w	r3, r3, #1
 8000d78:	b2db      	uxtb	r3, r3
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d03f      	beq.n	8000dfe <add_backgrand+0xa6>
		{
			backgrand[i].active = true;
 8000d7e:	79fa      	ldrb	r2, [r7, #7]
 8000d80:	4924      	ldr	r1, [pc, #144]	; (8000e14 <add_backgrand+0xbc>)
 8000d82:	4613      	mov	r3, r2
 8000d84:	009b      	lsls	r3, r3, #2
 8000d86:	4413      	add	r3, r2
 8000d88:	009b      	lsls	r3, r3, #2
 8000d8a:	440b      	add	r3, r1
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	701a      	strb	r2, [r3, #0]
			backgrand[i].x 		= 128;
 8000d90:	79fa      	ldrb	r2, [r7, #7]
 8000d92:	4920      	ldr	r1, [pc, #128]	; (8000e14 <add_backgrand+0xbc>)
 8000d94:	4613      	mov	r3, r2
 8000d96:	009b      	lsls	r3, r3, #2
 8000d98:	4413      	add	r3, r2
 8000d9a:	009b      	lsls	r3, r3, #2
 8000d9c:	440b      	add	r3, r1
 8000d9e:	3304      	adds	r3, #4
 8000da0:	2280      	movs	r2, #128	; 0x80
 8000da2:	601a      	str	r2, [r3, #0]
			backgrand[i].y		= (rand()%(screen_height-10)) +10;
 8000da4:	f005 f87e 	bl	8005ea4 <rand>
 8000da8:	4602      	mov	r2, r0
 8000daa:	4b1b      	ldr	r3, [pc, #108]	; (8000e18 <add_backgrand+0xc0>)
 8000dac:	fb83 1302 	smull	r1, r3, r3, r2
 8000db0:	1119      	asrs	r1, r3, #4
 8000db2:	17d3      	asrs	r3, r2, #31
 8000db4:	1acb      	subs	r3, r1, r3
 8000db6:	2176      	movs	r1, #118	; 0x76
 8000db8:	fb01 f303 	mul.w	r3, r1, r3
 8000dbc:	1ad3      	subs	r3, r2, r3
 8000dbe:	79fa      	ldrb	r2, [r7, #7]
 8000dc0:	f103 010a 	add.w	r1, r3, #10
 8000dc4:	4813      	ldr	r0, [pc, #76]	; (8000e14 <add_backgrand+0xbc>)
 8000dc6:	4613      	mov	r3, r2
 8000dc8:	009b      	lsls	r3, r3, #2
 8000dca:	4413      	add	r3, r2
 8000dcc:	009b      	lsls	r3, r3, #2
 8000dce:	4403      	add	r3, r0
 8000dd0:	3308      	adds	r3, #8
 8000dd2:	6019      	str	r1, [r3, #0]
			backgrand[i].update_delay = (rand()%4)+2;
 8000dd4:	f005 f866 	bl	8005ea4 <rand>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	425a      	negs	r2, r3
 8000ddc:	f003 0303 	and.w	r3, r3, #3
 8000de0:	f002 0203 	and.w	r2, r2, #3
 8000de4:	bf58      	it	pl
 8000de6:	4253      	negpl	r3, r2
 8000de8:	79fa      	ldrb	r2, [r7, #7]
 8000dea:	1c99      	adds	r1, r3, #2
 8000dec:	4809      	ldr	r0, [pc, #36]	; (8000e14 <add_backgrand+0xbc>)
 8000dee:	4613      	mov	r3, r2
 8000df0:	009b      	lsls	r3, r3, #2
 8000df2:	4413      	add	r3, r2
 8000df4:	009b      	lsls	r3, r3, #2
 8000df6:	4403      	add	r3, r0
 8000df8:	3310      	adds	r3, #16
 8000dfa:	6019      	str	r1, [r3, #0]

			break;
 8000dfc:	e006      	b.n	8000e0c <add_backgrand+0xb4>
	for(i = 0; i < num_backgrand; i++)
 8000dfe:	79fb      	ldrb	r3, [r7, #7]
 8000e00:	3301      	adds	r3, #1
 8000e02:	71fb      	strb	r3, [r7, #7]
 8000e04:	79fb      	ldrb	r3, [r7, #7]
 8000e06:	2b27      	cmp	r3, #39	; 0x27
 8000e08:	d9ac      	bls.n	8000d64 <add_backgrand+0xc>
		}
	}
}
 8000e0a:	bf00      	nop
 8000e0c:	bf00      	nop
 8000e0e:	3708      	adds	r7, #8
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	20000338 	.word	0x20000338
 8000e18:	22b63cbf 	.word	0x22b63cbf

08000e1c <update_backgrand>:

void update_backgrand(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af00      	add	r7, sp, #0
	 * Przesuwa elementy , oraz losuje kiedy ma
	 * zosta� dodany nowy element
	 */
	uint8_t i;

	for(i = 0; i < num_backgrand; i++)
 8000e22:	2300      	movs	r3, #0
 8000e24:	71fb      	strb	r3, [r7, #7]
 8000e26:	e06e      	b.n	8000f06 <update_backgrand+0xea>
	{
		if(backgrand[i].active)
 8000e28:	79fa      	ldrb	r2, [r7, #7]
 8000e2a:	4943      	ldr	r1, [pc, #268]	; (8000f38 <update_backgrand+0x11c>)
 8000e2c:	4613      	mov	r3, r2
 8000e2e:	009b      	lsls	r3, r3, #2
 8000e30:	4413      	add	r3, r2
 8000e32:	009b      	lsls	r3, r3, #2
 8000e34:	440b      	add	r3, r1
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d061      	beq.n	8000f00 <update_backgrand+0xe4>
		{
			backgrand[i].next_update -= 1;
 8000e3c:	79fa      	ldrb	r2, [r7, #7]
 8000e3e:	493e      	ldr	r1, [pc, #248]	; (8000f38 <update_backgrand+0x11c>)
 8000e40:	4613      	mov	r3, r2
 8000e42:	009b      	lsls	r3, r3, #2
 8000e44:	4413      	add	r3, r2
 8000e46:	009b      	lsls	r3, r3, #2
 8000e48:	440b      	add	r3, r1
 8000e4a:	330c      	adds	r3, #12
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	79fa      	ldrb	r2, [r7, #7]
 8000e50:	1e59      	subs	r1, r3, #1
 8000e52:	4839      	ldr	r0, [pc, #228]	; (8000f38 <update_backgrand+0x11c>)
 8000e54:	4613      	mov	r3, r2
 8000e56:	009b      	lsls	r3, r3, #2
 8000e58:	4413      	add	r3, r2
 8000e5a:	009b      	lsls	r3, r3, #2
 8000e5c:	4403      	add	r3, r0
 8000e5e:	330c      	adds	r3, #12
 8000e60:	6019      	str	r1, [r3, #0]
			if(backgrand[i].next_update <= 0)
 8000e62:	79fa      	ldrb	r2, [r7, #7]
 8000e64:	4934      	ldr	r1, [pc, #208]	; (8000f38 <update_backgrand+0x11c>)
 8000e66:	4613      	mov	r3, r2
 8000e68:	009b      	lsls	r3, r3, #2
 8000e6a:	4413      	add	r3, r2
 8000e6c:	009b      	lsls	r3, r3, #2
 8000e6e:	440b      	add	r3, r1
 8000e70:	330c      	adds	r3, #12
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	dc43      	bgt.n	8000f00 <update_backgrand+0xe4>
			{
				backgrand[i].next_update = backgrand[i].update_delay;
 8000e78:	79f9      	ldrb	r1, [r7, #7]
 8000e7a:	79fa      	ldrb	r2, [r7, #7]
 8000e7c:	482e      	ldr	r0, [pc, #184]	; (8000f38 <update_backgrand+0x11c>)
 8000e7e:	460b      	mov	r3, r1
 8000e80:	009b      	lsls	r3, r3, #2
 8000e82:	440b      	add	r3, r1
 8000e84:	009b      	lsls	r3, r3, #2
 8000e86:	4403      	add	r3, r0
 8000e88:	3310      	adds	r3, #16
 8000e8a:	6819      	ldr	r1, [r3, #0]
 8000e8c:	482a      	ldr	r0, [pc, #168]	; (8000f38 <update_backgrand+0x11c>)
 8000e8e:	4613      	mov	r3, r2
 8000e90:	009b      	lsls	r3, r3, #2
 8000e92:	4413      	add	r3, r2
 8000e94:	009b      	lsls	r3, r3, #2
 8000e96:	4403      	add	r3, r0
 8000e98:	330c      	adds	r3, #12
 8000e9a:	6019      	str	r1, [r3, #0]
				if(backgrand[i].active)
 8000e9c:	79fa      	ldrb	r2, [r7, #7]
 8000e9e:	4926      	ldr	r1, [pc, #152]	; (8000f38 <update_backgrand+0x11c>)
 8000ea0:	4613      	mov	r3, r2
 8000ea2:	009b      	lsls	r3, r3, #2
 8000ea4:	4413      	add	r3, r2
 8000ea6:	009b      	lsls	r3, r3, #2
 8000ea8:	440b      	add	r3, r1
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d027      	beq.n	8000f00 <update_backgrand+0xe4>
				{
					backgrand[i].x -= 1;
 8000eb0:	79fa      	ldrb	r2, [r7, #7]
 8000eb2:	4921      	ldr	r1, [pc, #132]	; (8000f38 <update_backgrand+0x11c>)
 8000eb4:	4613      	mov	r3, r2
 8000eb6:	009b      	lsls	r3, r3, #2
 8000eb8:	4413      	add	r3, r2
 8000eba:	009b      	lsls	r3, r3, #2
 8000ebc:	440b      	add	r3, r1
 8000ebe:	3304      	adds	r3, #4
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	79fa      	ldrb	r2, [r7, #7]
 8000ec4:	1e59      	subs	r1, r3, #1
 8000ec6:	481c      	ldr	r0, [pc, #112]	; (8000f38 <update_backgrand+0x11c>)
 8000ec8:	4613      	mov	r3, r2
 8000eca:	009b      	lsls	r3, r3, #2
 8000ecc:	4413      	add	r3, r2
 8000ece:	009b      	lsls	r3, r3, #2
 8000ed0:	4403      	add	r3, r0
 8000ed2:	3304      	adds	r3, #4
 8000ed4:	6019      	str	r1, [r3, #0]

					if(backgrand[i].x <= -2)
 8000ed6:	79fa      	ldrb	r2, [r7, #7]
 8000ed8:	4917      	ldr	r1, [pc, #92]	; (8000f38 <update_backgrand+0x11c>)
 8000eda:	4613      	mov	r3, r2
 8000edc:	009b      	lsls	r3, r3, #2
 8000ede:	4413      	add	r3, r2
 8000ee0:	009b      	lsls	r3, r3, #2
 8000ee2:	440b      	add	r3, r1
 8000ee4:	3304      	adds	r3, #4
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000eec:	da08      	bge.n	8000f00 <update_backgrand+0xe4>
						backgrand[i].active = false;
 8000eee:	79fa      	ldrb	r2, [r7, #7]
 8000ef0:	4911      	ldr	r1, [pc, #68]	; (8000f38 <update_backgrand+0x11c>)
 8000ef2:	4613      	mov	r3, r2
 8000ef4:	009b      	lsls	r3, r3, #2
 8000ef6:	4413      	add	r3, r2
 8000ef8:	009b      	lsls	r3, r3, #2
 8000efa:	440b      	add	r3, r1
 8000efc:	2200      	movs	r2, #0
 8000efe:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < num_backgrand; i++)
 8000f00:	79fb      	ldrb	r3, [r7, #7]
 8000f02:	3301      	adds	r3, #1
 8000f04:	71fb      	strb	r3, [r7, #7]
 8000f06:	79fb      	ldrb	r3, [r7, #7]
 8000f08:	2b27      	cmp	r3, #39	; 0x27
 8000f0a:	d98d      	bls.n	8000e28 <update_backgrand+0xc>
				}
			}
		}
	}

	if ((rand()%100) < 20) //czesto�c dodawnaia przeciwnik�w
 8000f0c:	f004 ffca 	bl	8005ea4 <rand>
 8000f10:	4602      	mov	r2, r0
 8000f12:	4b0a      	ldr	r3, [pc, #40]	; (8000f3c <update_backgrand+0x120>)
 8000f14:	fb83 1302 	smull	r1, r3, r3, r2
 8000f18:	1159      	asrs	r1, r3, #5
 8000f1a:	17d3      	asrs	r3, r2, #31
 8000f1c:	1acb      	subs	r3, r1, r3
 8000f1e:	2164      	movs	r1, #100	; 0x64
 8000f20:	fb01 f303 	mul.w	r3, r1, r3
 8000f24:	1ad3      	subs	r3, r2, r3
 8000f26:	2b13      	cmp	r3, #19
 8000f28:	dc01      	bgt.n	8000f2e <update_backgrand+0x112>
		add_backgrand();
 8000f2a:	f7ff ff15 	bl	8000d58 <add_backgrand>

}
 8000f2e:	bf00      	nop
 8000f30:	3708      	adds	r7, #8
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	20000338 	.word	0x20000338
 8000f3c:	51eb851f 	.word	0x51eb851f

08000f40 <update_lvl>:

void update_lvl(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
	 * do jej postepu.
	 */
	static uint8_t i = 0;

	//Obliczanie postepu gry
	if(i > 70) //poprawne dzia�anie 128 (ca�y ekran)
 8000f44:	4b55      	ldr	r3, [pc, #340]	; (800109c <update_lvl+0x15c>)
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	2b46      	cmp	r3, #70	; 0x46
 8000f4a:	d907      	bls.n	8000f5c <update_lvl+0x1c>
	{
		player.game_progres += 1;
 8000f4c:	4b54      	ldr	r3, [pc, #336]	; (80010a0 <update_lvl+0x160>)
 8000f4e:	699b      	ldr	r3, [r3, #24]
 8000f50:	3301      	adds	r3, #1
 8000f52:	4a53      	ldr	r2, [pc, #332]	; (80010a0 <update_lvl+0x160>)
 8000f54:	6193      	str	r3, [r2, #24]
		i = 0;
 8000f56:	4b51      	ldr	r3, [pc, #324]	; (800109c <update_lvl+0x15c>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	701a      	strb	r2, [r3, #0]
	}

	//Jesli boss nie aktywny naliczaj postep
	if(!boss.active) i++;
 8000f5c:	4b51      	ldr	r3, [pc, #324]	; (80010a4 <update_lvl+0x164>)
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	f083 0301 	eor.w	r3, r3, #1
 8000f64:	b2db      	uxtb	r3, r3
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d005      	beq.n	8000f76 <update_lvl+0x36>
 8000f6a:	4b4c      	ldr	r3, [pc, #304]	; (800109c <update_lvl+0x15c>)
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	3301      	adds	r3, #1
 8000f70:	b2da      	uxtb	r2, r3
 8000f72:	4b4a      	ldr	r3, [pc, #296]	; (800109c <update_lvl+0x15c>)
 8000f74:	701a      	strb	r2, [r3, #0]

	//---- Momenty pojawienia sie bosa -----
	//Oraz jego parametry
	//boss.update_delay = x; powienien on posiadac pa�yst� liczb� poniewa�
	//w innym wypadku z niewiadomych przyczyn wysupje sie jego animacja.
	if(player.game_progres == 29)
 8000f76:	4b4a      	ldr	r3, [pc, #296]	; (80010a0 <update_lvl+0x160>)
 8000f78:	699b      	ldr	r3, [r3, #24]
 8000f7a:	2b1d      	cmp	r3, #29
 8000f7c:	d10d      	bne.n	8000f9a <update_lvl+0x5a>
	{
		boss.active = true;
 8000f7e:	4b49      	ldr	r3, [pc, #292]	; (80010a4 <update_lvl+0x164>)
 8000f80:	2201      	movs	r2, #1
 8000f82:	701a      	strb	r2, [r3, #0]
		boss.lives = 15;
 8000f84:	4b47      	ldr	r3, [pc, #284]	; (80010a4 <update_lvl+0x164>)
 8000f86:	220f      	movs	r2, #15
 8000f88:	615a      	str	r2, [r3, #20]
		boss.update_delay = 4;
 8000f8a:	4b46      	ldr	r3, [pc, #280]	; (80010a4 <update_lvl+0x164>)
 8000f8c:	2204      	movs	r2, #4
 8000f8e:	611a      	str	r2, [r3, #16]
		player.game_progres += 1; // zeby nie wejsc w tego ifa drugi raz
 8000f90:	4b43      	ldr	r3, [pc, #268]	; (80010a0 <update_lvl+0x160>)
 8000f92:	699b      	ldr	r3, [r3, #24]
 8000f94:	3301      	adds	r3, #1
 8000f96:	4a42      	ldr	r2, [pc, #264]	; (80010a0 <update_lvl+0x160>)
 8000f98:	6193      	str	r3, [r2, #24]

	}
	if(player.game_progres == 59)
 8000f9a:	4b41      	ldr	r3, [pc, #260]	; (80010a0 <update_lvl+0x160>)
 8000f9c:	699b      	ldr	r3, [r3, #24]
 8000f9e:	2b3b      	cmp	r3, #59	; 0x3b
 8000fa0:	d10d      	bne.n	8000fbe <update_lvl+0x7e>
	{
		boss.active = true;
 8000fa2:	4b40      	ldr	r3, [pc, #256]	; (80010a4 <update_lvl+0x164>)
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	701a      	strb	r2, [r3, #0]
		boss.lives = 20;
 8000fa8:	4b3e      	ldr	r3, [pc, #248]	; (80010a4 <update_lvl+0x164>)
 8000faa:	2214      	movs	r2, #20
 8000fac:	615a      	str	r2, [r3, #20]
		boss.update_delay = 2;
 8000fae:	4b3d      	ldr	r3, [pc, #244]	; (80010a4 <update_lvl+0x164>)
 8000fb0:	2202      	movs	r2, #2
 8000fb2:	611a      	str	r2, [r3, #16]
		player.game_progres += 1;
 8000fb4:	4b3a      	ldr	r3, [pc, #232]	; (80010a0 <update_lvl+0x160>)
 8000fb6:	699b      	ldr	r3, [r3, #24]
 8000fb8:	3301      	adds	r3, #1
 8000fba:	4a39      	ldr	r2, [pc, #228]	; (80010a0 <update_lvl+0x160>)
 8000fbc:	6193      	str	r3, [r2, #24]
	}
	//--------------------------------------

	//Kolejne levele
	if(player.game_progres > 9 && player.game_progres < 10 )
 8000fbe:	4b38      	ldr	r3, [pc, #224]	; (80010a0 <update_lvl+0x160>)
 8000fc0:	699b      	ldr	r3, [r3, #24]
 8000fc2:	2b09      	cmp	r3, #9
 8000fc4:	dd06      	ble.n	8000fd4 <update_lvl+0x94>
 8000fc6:	4b36      	ldr	r3, [pc, #216]	; (80010a0 <update_lvl+0x160>)
 8000fc8:	699b      	ldr	r3, [r3, #24]
 8000fca:	2b09      	cmp	r3, #9
 8000fcc:	dc02      	bgt.n	8000fd4 <update_lvl+0x94>
		player.level = 1;
 8000fce:	4b34      	ldr	r3, [pc, #208]	; (80010a0 <update_lvl+0x160>)
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	615a      	str	r2, [r3, #20]
	if(player.game_progres > 10 && player.game_progres < 19)
 8000fd4:	4b32      	ldr	r3, [pc, #200]	; (80010a0 <update_lvl+0x160>)
 8000fd6:	699b      	ldr	r3, [r3, #24]
 8000fd8:	2b0a      	cmp	r3, #10
 8000fda:	dd06      	ble.n	8000fea <update_lvl+0xaa>
 8000fdc:	4b30      	ldr	r3, [pc, #192]	; (80010a0 <update_lvl+0x160>)
 8000fde:	699b      	ldr	r3, [r3, #24]
 8000fe0:	2b12      	cmp	r3, #18
 8000fe2:	dc02      	bgt.n	8000fea <update_lvl+0xaa>
		player.level = 2;
 8000fe4:	4b2e      	ldr	r3, [pc, #184]	; (80010a0 <update_lvl+0x160>)
 8000fe6:	2202      	movs	r2, #2
 8000fe8:	615a      	str	r2, [r3, #20]
	if(player.game_progres > 20 && player.game_progres < 29)
 8000fea:	4b2d      	ldr	r3, [pc, #180]	; (80010a0 <update_lvl+0x160>)
 8000fec:	699b      	ldr	r3, [r3, #24]
 8000fee:	2b14      	cmp	r3, #20
 8000ff0:	dd06      	ble.n	8001000 <update_lvl+0xc0>
 8000ff2:	4b2b      	ldr	r3, [pc, #172]	; (80010a0 <update_lvl+0x160>)
 8000ff4:	699b      	ldr	r3, [r3, #24]
 8000ff6:	2b1c      	cmp	r3, #28
 8000ff8:	dc02      	bgt.n	8001000 <update_lvl+0xc0>
		player.level = 3;
 8000ffa:	4b29      	ldr	r3, [pc, #164]	; (80010a0 <update_lvl+0x160>)
 8000ffc:	2203      	movs	r2, #3
 8000ffe:	615a      	str	r2, [r3, #20]
	if(player.game_progres > 30 && player.game_progres < 39)
 8001000:	4b27      	ldr	r3, [pc, #156]	; (80010a0 <update_lvl+0x160>)
 8001002:	699b      	ldr	r3, [r3, #24]
 8001004:	2b1e      	cmp	r3, #30
 8001006:	dd06      	ble.n	8001016 <update_lvl+0xd6>
 8001008:	4b25      	ldr	r3, [pc, #148]	; (80010a0 <update_lvl+0x160>)
 800100a:	699b      	ldr	r3, [r3, #24]
 800100c:	2b26      	cmp	r3, #38	; 0x26
 800100e:	dc02      	bgt.n	8001016 <update_lvl+0xd6>
		player.level = 4;
 8001010:	4b23      	ldr	r3, [pc, #140]	; (80010a0 <update_lvl+0x160>)
 8001012:	2204      	movs	r2, #4
 8001014:	615a      	str	r2, [r3, #20]
	if(player.game_progres > 40 && player.game_progres < 49)
 8001016:	4b22      	ldr	r3, [pc, #136]	; (80010a0 <update_lvl+0x160>)
 8001018:	699b      	ldr	r3, [r3, #24]
 800101a:	2b28      	cmp	r3, #40	; 0x28
 800101c:	dd06      	ble.n	800102c <update_lvl+0xec>
 800101e:	4b20      	ldr	r3, [pc, #128]	; (80010a0 <update_lvl+0x160>)
 8001020:	699b      	ldr	r3, [r3, #24]
 8001022:	2b30      	cmp	r3, #48	; 0x30
 8001024:	dc02      	bgt.n	800102c <update_lvl+0xec>
		player.level = 5;
 8001026:	4b1e      	ldr	r3, [pc, #120]	; (80010a0 <update_lvl+0x160>)
 8001028:	2205      	movs	r2, #5
 800102a:	615a      	str	r2, [r3, #20]
	if(player.game_progres > 50 && player.game_progres < 59)
 800102c:	4b1c      	ldr	r3, [pc, #112]	; (80010a0 <update_lvl+0x160>)
 800102e:	699b      	ldr	r3, [r3, #24]
 8001030:	2b32      	cmp	r3, #50	; 0x32
 8001032:	dd06      	ble.n	8001042 <update_lvl+0x102>
 8001034:	4b1a      	ldr	r3, [pc, #104]	; (80010a0 <update_lvl+0x160>)
 8001036:	699b      	ldr	r3, [r3, #24]
 8001038:	2b3a      	cmp	r3, #58	; 0x3a
 800103a:	dc02      	bgt.n	8001042 <update_lvl+0x102>
		player.level = 6;
 800103c:	4b18      	ldr	r3, [pc, #96]	; (80010a0 <update_lvl+0x160>)
 800103e:	2206      	movs	r2, #6
 8001040:	615a      	str	r2, [r3, #20]
	if(player.game_progres > 60 && player.game_progres < 69)
 8001042:	4b17      	ldr	r3, [pc, #92]	; (80010a0 <update_lvl+0x160>)
 8001044:	699b      	ldr	r3, [r3, #24]
 8001046:	2b3c      	cmp	r3, #60	; 0x3c
 8001048:	dd06      	ble.n	8001058 <update_lvl+0x118>
 800104a:	4b15      	ldr	r3, [pc, #84]	; (80010a0 <update_lvl+0x160>)
 800104c:	699b      	ldr	r3, [r3, #24]
 800104e:	2b44      	cmp	r3, #68	; 0x44
 8001050:	dc02      	bgt.n	8001058 <update_lvl+0x118>
		player.level = 7;
 8001052:	4b13      	ldr	r3, [pc, #76]	; (80010a0 <update_lvl+0x160>)
 8001054:	2207      	movs	r2, #7
 8001056:	615a      	str	r2, [r3, #20]
	if(player.game_progres > 70 && player.game_progres < 79)
 8001058:	4b11      	ldr	r3, [pc, #68]	; (80010a0 <update_lvl+0x160>)
 800105a:	699b      	ldr	r3, [r3, #24]
 800105c:	2b46      	cmp	r3, #70	; 0x46
 800105e:	dd06      	ble.n	800106e <update_lvl+0x12e>
 8001060:	4b0f      	ldr	r3, [pc, #60]	; (80010a0 <update_lvl+0x160>)
 8001062:	699b      	ldr	r3, [r3, #24]
 8001064:	2b4e      	cmp	r3, #78	; 0x4e
 8001066:	dc02      	bgt.n	800106e <update_lvl+0x12e>
		player.level = 8;
 8001068:	4b0d      	ldr	r3, [pc, #52]	; (80010a0 <update_lvl+0x160>)
 800106a:	2208      	movs	r2, #8
 800106c:	615a      	str	r2, [r3, #20]
	if(player.game_progres > 80 && player.game_progres < 89)
 800106e:	4b0c      	ldr	r3, [pc, #48]	; (80010a0 <update_lvl+0x160>)
 8001070:	699b      	ldr	r3, [r3, #24]
 8001072:	2b50      	cmp	r3, #80	; 0x50
 8001074:	dd06      	ble.n	8001084 <update_lvl+0x144>
 8001076:	4b0a      	ldr	r3, [pc, #40]	; (80010a0 <update_lvl+0x160>)
 8001078:	699b      	ldr	r3, [r3, #24]
 800107a:	2b58      	cmp	r3, #88	; 0x58
 800107c:	dc02      	bgt.n	8001084 <update_lvl+0x144>
		player.level = 9;
 800107e:	4b08      	ldr	r3, [pc, #32]	; (80010a0 <update_lvl+0x160>)
 8001080:	2209      	movs	r2, #9
 8001082:	615a      	str	r2, [r3, #20]
	if(player.game_progres > 90)
 8001084:	4b06      	ldr	r3, [pc, #24]	; (80010a0 <update_lvl+0x160>)
 8001086:	699b      	ldr	r3, [r3, #24]
 8001088:	2b5a      	cmp	r3, #90	; 0x5a
 800108a:	dd02      	ble.n	8001092 <update_lvl+0x152>
		player.level = 10;
 800108c:	4b04      	ldr	r3, [pc, #16]	; (80010a0 <update_lvl+0x160>)
 800108e:	220a      	movs	r2, #10
 8001090:	615a      	str	r2, [r3, #20]

}
 8001092:	bf00      	nop
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr
 800109c:	20000676 	.word	0x20000676
 80010a0:	20000168 	.word	0x20000168
 80010a4:	20000658 	.word	0x20000658

080010a8 <run_dead>:

void run_dead(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af02      	add	r7, sp, #8
		eeprom_write_byte(eeprom_magic_addr_1, eeprom_magic_number_1);
	}
	*/
	//pokazanie wyniku i najwyzszego wyniku

	x += dx;
 80010ae:	4b22      	ldr	r3, [pc, #136]	; (8001138 <run_dead+0x90>)
 80010b0:	681a      	ldr	r2, [r3, #0]
 80010b2:	4b22      	ldr	r3, [pc, #136]	; (800113c <run_dead+0x94>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	4413      	add	r3, r2
 80010b8:	4a1f      	ldr	r2, [pc, #124]	; (8001138 <run_dead+0x90>)
 80010ba:	6013      	str	r3, [r2, #0]
	if (x < 1 || x > 55) dx = -dx;
 80010bc:	4b1e      	ldr	r3, [pc, #120]	; (8001138 <run_dead+0x90>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	dd03      	ble.n	80010cc <run_dead+0x24>
 80010c4:	4b1c      	ldr	r3, [pc, #112]	; (8001138 <run_dead+0x90>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	2b37      	cmp	r3, #55	; 0x37
 80010ca:	dd04      	ble.n	80010d6 <run_dead+0x2e>
 80010cc:	4b1b      	ldr	r3, [pc, #108]	; (800113c <run_dead+0x94>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	425b      	negs	r3, r3
 80010d2:	4a1a      	ldr	r2, [pc, #104]	; (800113c <run_dead+0x94>)
 80010d4:	6013      	str	r3, [r2, #0]
	ssd1327_CLR();
 80010d6:	f001 fb83 	bl	80027e0 <ssd1327_CLR>
	GFX_DrowBitMap_P(x,4,Defeated_map,67,16,1);
 80010da:	4b17      	ldr	r3, [pc, #92]	; (8001138 <run_dead+0x90>)
 80010dc:	6818      	ldr	r0, [r3, #0]
 80010de:	2301      	movs	r3, #1
 80010e0:	9301      	str	r3, [sp, #4]
 80010e2:	2310      	movs	r3, #16
 80010e4:	9300      	str	r3, [sp, #0]
 80010e6:	2343      	movs	r3, #67	; 0x43
 80010e8:	4a15      	ldr	r2, [pc, #84]	; (8001140 <run_dead+0x98>)
 80010ea:	2104      	movs	r1, #4
 80010ec:	f7ff f9ec 	bl	80004c8 <GFX_DrowBitMap_P>
	GFX_DrowBitMap_P(35,24,Score_map,37,10,1);
 80010f0:	2301      	movs	r3, #1
 80010f2:	9301      	str	r3, [sp, #4]
 80010f4:	230a      	movs	r3, #10
 80010f6:	9300      	str	r3, [sp, #0]
 80010f8:	2325      	movs	r3, #37	; 0x25
 80010fa:	4a12      	ldr	r2, [pc, #72]	; (8001144 <run_dead+0x9c>)
 80010fc:	2118      	movs	r1, #24
 80010fe:	2023      	movs	r0, #35	; 0x23
 8001100:	f7ff f9e2 	bl	80004c8 <GFX_DrowBitMap_P>
	GFX_PutInt(73,27,player.score,1,1,0);
 8001104:	4b10      	ldr	r3, [pc, #64]	; (8001148 <run_dead+0xa0>)
 8001106:	689a      	ldr	r2, [r3, #8]
 8001108:	2300      	movs	r3, #0
 800110a:	9301      	str	r3, [sp, #4]
 800110c:	2301      	movs	r3, #1
 800110e:	9300      	str	r3, [sp, #0]
 8001110:	2301      	movs	r3, #1
 8001112:	211b      	movs	r1, #27
 8001114:	2049      	movs	r0, #73	; 0x49
 8001116:	f7ff fb69 	bl	80007ec <GFX_PutInt>
	//GFX_DrowBitMap_P(36,40,Best_map,27,10,1);
	//GFX_PutInt(73,43,player.high_score,1,1,0);
	ssd1327_display();
 800111a:	f001 fb29 	bl	8002770 <ssd1327_display>

	if(button_pressed())
 800111e:	f001 fa3f 	bl	80025a0 <button_pressed>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d004      	beq.n	8001132 <run_dead+0x8a>
	{
		play_dead_anim();
 8001128:	f000 f812 	bl	8001150 <play_dead_anim>
		state = st_menu;
 800112c:	4b07      	ldr	r3, [pc, #28]	; (800114c <run_dead+0xa4>)
 800112e:	2200      	movs	r2, #0
 8001130:	701a      	strb	r2, [r3, #0]
	}
}
 8001132:	bf00      	nop
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	20000678 	.word	0x20000678
 800113c:	20000000 	.word	0x20000000
 8001140:	08007498 	.word	0x08007498
 8001144:	08007464 	.word	0x08007464
 8001148:	20000168 	.word	0x20000168
 800114c:	20000674 	.word	0x20000674

08001150 <play_dead_anim>:

void play_dead_anim(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b084      	sub	sp, #16
 8001154:	af02      	add	r7, sp, #8
	 * takiej starej gry.
	 * Po sobie sobie jest ekran zapalany i gaszony dajac ciekawy efekt.
	 */
	uint8_t i;

	for (i = 0; i < 10; ++i)
 8001156:	2300      	movs	r3, #0
 8001158:	71fb      	strb	r3, [r7, #7]
 800115a:	e012      	b.n	8001182 <play_dead_anim+0x32>
	{
		ssd1327_CLR();
 800115c:	f001 fb40 	bl	80027e0 <ssd1327_CLR>
		GFX_FillRect(0,0,128,64,1);
 8001160:	2301      	movs	r3, #1
 8001162:	9300      	str	r3, [sp, #0]
 8001164:	2340      	movs	r3, #64	; 0x40
 8001166:	2280      	movs	r2, #128	; 0x80
 8001168:	2100      	movs	r1, #0
 800116a:	2000      	movs	r0, #0
 800116c:	f7ff fab4 	bl	80006d8 <GFX_FillRect>
		ssd1327_display();
 8001170:	f001 fafe 	bl	8002770 <ssd1327_display>

		ssd1327_CLR();
 8001174:	f001 fb34 	bl	80027e0 <ssd1327_CLR>
		ssd1327_display();
 8001178:	f001 fafa 	bl	8002770 <ssd1327_display>
	for (i = 0; i < 10; ++i)
 800117c:	79fb      	ldrb	r3, [r7, #7]
 800117e:	3301      	adds	r3, #1
 8001180:	71fb      	strb	r3, [r7, #7]
 8001182:	79fb      	ldrb	r3, [r7, #7]
 8001184:	2b09      	cmp	r3, #9
 8001186:	d9e9      	bls.n	800115c <play_dead_anim+0xc>

	}
}
 8001188:	bf00      	nop
 800118a:	bf00      	nop
 800118c:	3708      	adds	r7, #8
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
	...

08001194 <shoot>:

void shoot(void)
{
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
	 *
	 * Obs�uga strza��w gracza.
	 */
	uint8_t i;

	for (i = 0; i < num_shots; ++i)
 800119a:	2300      	movs	r3, #0
 800119c:	71fb      	strb	r3, [r7, #7]
 800119e:	e02f      	b.n	8001200 <shoot+0x6c>
	{
		if (!shots[i].active)
 80011a0:	79fa      	ldrb	r2, [r7, #7]
 80011a2:	491b      	ldr	r1, [pc, #108]	; (8001210 <shoot+0x7c>)
 80011a4:	4613      	mov	r3, r2
 80011a6:	005b      	lsls	r3, r3, #1
 80011a8:	4413      	add	r3, r2
 80011aa:	009b      	lsls	r3, r3, #2
 80011ac:	440b      	add	r3, r1
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	f083 0301 	eor.w	r3, r3, #1
 80011b4:	b2db      	uxtb	r3, r3
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d01f      	beq.n	80011fa <shoot+0x66>
		{
			shots[i].active = true;
 80011ba:	79fa      	ldrb	r2, [r7, #7]
 80011bc:	4914      	ldr	r1, [pc, #80]	; (8001210 <shoot+0x7c>)
 80011be:	4613      	mov	r3, r2
 80011c0:	005b      	lsls	r3, r3, #1
 80011c2:	4413      	add	r3, r2
 80011c4:	009b      	lsls	r3, r3, #2
 80011c6:	440b      	add	r3, r1
 80011c8:	2201      	movs	r2, #1
 80011ca:	701a      	strb	r2, [r3, #0]
			shots[i].x = 11;
 80011cc:	79fa      	ldrb	r2, [r7, #7]
 80011ce:	4910      	ldr	r1, [pc, #64]	; (8001210 <shoot+0x7c>)
 80011d0:	4613      	mov	r3, r2
 80011d2:	005b      	lsls	r3, r3, #1
 80011d4:	4413      	add	r3, r2
 80011d6:	009b      	lsls	r3, r3, #2
 80011d8:	440b      	add	r3, r1
 80011da:	3304      	adds	r3, #4
 80011dc:	220b      	movs	r2, #11
 80011de:	601a      	str	r2, [r3, #0]
			shots[i].y = player.y + 5;
 80011e0:	4b0c      	ldr	r3, [pc, #48]	; (8001214 <shoot+0x80>)
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	79fa      	ldrb	r2, [r7, #7]
 80011e6:	1d59      	adds	r1, r3, #5
 80011e8:	4809      	ldr	r0, [pc, #36]	; (8001210 <shoot+0x7c>)
 80011ea:	4613      	mov	r3, r2
 80011ec:	005b      	lsls	r3, r3, #1
 80011ee:	4413      	add	r3, r2
 80011f0:	009b      	lsls	r3, r3, #2
 80011f2:	4403      	add	r3, r0
 80011f4:	3308      	adds	r3, #8
 80011f6:	6019      	str	r1, [r3, #0]
			return;
 80011f8:	e005      	b.n	8001206 <shoot+0x72>
	for (i = 0; i < num_shots; ++i)
 80011fa:	79fb      	ldrb	r3, [r7, #7]
 80011fc:	3301      	adds	r3, #1
 80011fe:	71fb      	strb	r3, [r7, #7]
 8001200:	79fb      	ldrb	r3, [r7, #7]
 8001202:	2b07      	cmp	r3, #7
 8001204:	d9cc      	bls.n	80011a0 <shoot+0xc>
		}
	}
}
 8001206:	370c      	adds	r7, #12
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr
 8001210:	20000184 	.word	0x20000184
 8001214:	20000168 	.word	0x20000168

08001218 <boss_shoot>:

void boss_shoot(void)
{
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
	 * To samo co shoot() tylko �e odpowiada za strza�y
	 * boss�w.
	 */
	uint8_t i;

	for (i = 0; i < num_shots; ++i)
 800121e:	2300      	movs	r3, #0
 8001220:	71fb      	strb	r3, [r7, #7]
 8001222:	e030      	b.n	8001286 <boss_shoot+0x6e>
	{
		if (!boss_shots[i].active)
 8001224:	79fa      	ldrb	r2, [r7, #7]
 8001226:	491c      	ldr	r1, [pc, #112]	; (8001298 <boss_shoot+0x80>)
 8001228:	4613      	mov	r3, r2
 800122a:	005b      	lsls	r3, r3, #1
 800122c:	4413      	add	r3, r2
 800122e:	009b      	lsls	r3, r3, #2
 8001230:	440b      	add	r3, r1
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	f083 0301 	eor.w	r3, r3, #1
 8001238:	b2db      	uxtb	r3, r3
 800123a:	2b00      	cmp	r3, #0
 800123c:	d020      	beq.n	8001280 <boss_shoot+0x68>
		{
			boss_shots[i].active = true;
 800123e:	79fa      	ldrb	r2, [r7, #7]
 8001240:	4915      	ldr	r1, [pc, #84]	; (8001298 <boss_shoot+0x80>)
 8001242:	4613      	mov	r3, r2
 8001244:	005b      	lsls	r3, r3, #1
 8001246:	4413      	add	r3, r2
 8001248:	009b      	lsls	r3, r3, #2
 800124a:	440b      	add	r3, r1
 800124c:	2201      	movs	r2, #1
 800124e:	701a      	strb	r2, [r3, #0]
			boss_shots[i].x = boss.x;
 8001250:	79fa      	ldrb	r2, [r7, #7]
 8001252:	4b12      	ldr	r3, [pc, #72]	; (800129c <boss_shoot+0x84>)
 8001254:	6859      	ldr	r1, [r3, #4]
 8001256:	4810      	ldr	r0, [pc, #64]	; (8001298 <boss_shoot+0x80>)
 8001258:	4613      	mov	r3, r2
 800125a:	005b      	lsls	r3, r3, #1
 800125c:	4413      	add	r3, r2
 800125e:	009b      	lsls	r3, r3, #2
 8001260:	4403      	add	r3, r0
 8001262:	3304      	adds	r3, #4
 8001264:	6019      	str	r1, [r3, #0]
			boss_shots[i].y = boss.y + 5;
 8001266:	4b0d      	ldr	r3, [pc, #52]	; (800129c <boss_shoot+0x84>)
 8001268:	689b      	ldr	r3, [r3, #8]
 800126a:	79fa      	ldrb	r2, [r7, #7]
 800126c:	1d59      	adds	r1, r3, #5
 800126e:	480a      	ldr	r0, [pc, #40]	; (8001298 <boss_shoot+0x80>)
 8001270:	4613      	mov	r3, r2
 8001272:	005b      	lsls	r3, r3, #1
 8001274:	4413      	add	r3, r2
 8001276:	009b      	lsls	r3, r3, #2
 8001278:	4403      	add	r3, r0
 800127a:	3308      	adds	r3, #8
 800127c:	6019      	str	r1, [r3, #0]
			return;
 800127e:	e005      	b.n	800128c <boss_shoot+0x74>
	for (i = 0; i < num_shots; ++i)
 8001280:	79fb      	ldrb	r3, [r7, #7]
 8001282:	3301      	adds	r3, #1
 8001284:	71fb      	strb	r3, [r7, #7]
 8001286:	79fb      	ldrb	r3, [r7, #7]
 8001288:	2b07      	cmp	r3, #7
 800128a:	d9cb      	bls.n	8001224 <boss_shoot+0xc>
		}
	}
}
 800128c:	370c      	adds	r7, #12
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr
 8001296:	bf00      	nop
 8001298:	200001e4 	.word	0x200001e4
 800129c:	20000658 	.word	0x20000658

080012a0 <colliding>:

bool colliding(int x0, int y0, int x1, int y1)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b087      	sub	sp, #28
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	60f8      	str	r0, [r7, #12]
 80012a8:	60b9      	str	r1, [r7, #8]
 80012aa:	607a      	str	r2, [r7, #4]
 80012ac:	603b      	str	r3, [r7, #0]
	/*
	 * Sprawdzanie czy dane obiekty ze sob� koliduj�.
	 * Tzw. hitbox.
	 */
	int dx = abs(x0 - x1);
 80012ae:	68fa      	ldr	r2, [r7, #12]
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	1ad3      	subs	r3, r2, r3
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	bfb8      	it	lt
 80012b8:	425b      	neglt	r3, r3
 80012ba:	617b      	str	r3, [r7, #20]
	int dy = abs(y0 - y1);
 80012bc:	68ba      	ldr	r2, [r7, #8]
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	1ad3      	subs	r3, r2, r3
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	bfb8      	it	lt
 80012c6:	425b      	neglt	r3, r3
 80012c8:	613b      	str	r3, [r7, #16]
	return dx < 5 && dy < 8; // orginlanie  dx < 4 && dy < 6
 80012ca:	697b      	ldr	r3, [r7, #20]
 80012cc:	2b04      	cmp	r3, #4
 80012ce:	dc04      	bgt.n	80012da <colliding+0x3a>
 80012d0:	693b      	ldr	r3, [r7, #16]
 80012d2:	2b07      	cmp	r3, #7
 80012d4:	dc01      	bgt.n	80012da <colliding+0x3a>
 80012d6:	2301      	movs	r3, #1
 80012d8:	e000      	b.n	80012dc <colliding+0x3c>
 80012da:	2300      	movs	r3, #0
 80012dc:	f003 0301 	and.w	r3, r3, #1
 80012e0:	b2db      	uxtb	r3, r3
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	371c      	adds	r7, #28
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr
	...

080012f0 <update_scene>:

void update_scene(void)
{
 80012f0:	b5b0      	push	{r4, r5, r7, lr}
 80012f2:	b084      	sub	sp, #16
 80012f4:	af02      	add	r7, sp, #8
	uint8_t i,j;

	static uint8_t y = 0, dy = 1;
	  // Read analog stick (but we're just using it as binary input). Thresholds
	// experimentally determined.
	int stick = HAL_ADC_GetValue(&hadc1);
 80012f6:	4831      	ldr	r0, [pc, #196]	; (80013bc <update_scene+0xcc>)
 80012f8:	f002 f8e1 	bl	80034be <HAL_ADC_GetValue>
 80012fc:	4603      	mov	r3, r0
 80012fe:	603b      	str	r3, [r7, #0]

	if (stick < 1000)
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001306:	da05      	bge.n	8001314 <update_scene+0x24>
		player.y -= 1;
 8001308:	4b2d      	ldr	r3, [pc, #180]	; (80013c0 <update_scene+0xd0>)
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	3b01      	subs	r3, #1
 800130e:	4a2c      	ldr	r2, [pc, #176]	; (80013c0 <update_scene+0xd0>)
 8001310:	6053      	str	r3, [r2, #4]
 8001312:	e009      	b.n	8001328 <update_scene+0x38>
	else if (stick > 3500)
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	f640 52ac 	movw	r2, #3500	; 0xdac
 800131a:	4293      	cmp	r3, r2
 800131c:	dd04      	ble.n	8001328 <update_scene+0x38>
		player.y += 1;
 800131e:	4b28      	ldr	r3, [pc, #160]	; (80013c0 <update_scene+0xd0>)
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	3301      	adds	r3, #1
 8001324:	4a26      	ldr	r2, [pc, #152]	; (80013c0 <update_scene+0xd0>)
 8001326:	6053      	str	r3, [r2, #4]

	// Keep the player in bounds.
	if (player.y < 10) player.y = 10;
 8001328:	4b25      	ldr	r3, [pc, #148]	; (80013c0 <update_scene+0xd0>)
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	2b09      	cmp	r3, #9
 800132e:	dc02      	bgt.n	8001336 <update_scene+0x46>
 8001330:	4b23      	ldr	r3, [pc, #140]	; (80013c0 <update_scene+0xd0>)
 8001332:	220a      	movs	r2, #10
 8001334:	605a      	str	r2, [r3, #4]
	if (player.y > (screen_height - 14)) player.y = (screen_height - 14);
 8001336:	4b22      	ldr	r3, [pc, #136]	; (80013c0 <update_scene+0xd0>)
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	2b72      	cmp	r3, #114	; 0x72
 800133c:	dd02      	ble.n	8001344 <update_scene+0x54>
 800133e:	4b20      	ldr	r3, [pc, #128]	; (80013c0 <update_scene+0xd0>)
 8001340:	2272      	movs	r2, #114	; 0x72
 8001342:	605a      	str	r2, [r3, #4]

	// Move shots forward.
	for (i = 0; i < num_shots; ++i)
 8001344:	2300      	movs	r3, #0
 8001346:	71fb      	strb	r3, [r7, #7]
 8001348:	e032      	b.n	80013b0 <update_scene+0xc0>
	{
		if (shots[i].active)
 800134a:	79fa      	ldrb	r2, [r7, #7]
 800134c:	491d      	ldr	r1, [pc, #116]	; (80013c4 <update_scene+0xd4>)
 800134e:	4613      	mov	r3, r2
 8001350:	005b      	lsls	r3, r3, #1
 8001352:	4413      	add	r3, r2
 8001354:	009b      	lsls	r3, r3, #2
 8001356:	440b      	add	r3, r1
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d011      	beq.n	8001382 <update_scene+0x92>
			++shots[i].x;
 800135e:	79fa      	ldrb	r2, [r7, #7]
 8001360:	4918      	ldr	r1, [pc, #96]	; (80013c4 <update_scene+0xd4>)
 8001362:	4613      	mov	r3, r2
 8001364:	005b      	lsls	r3, r3, #1
 8001366:	4413      	add	r3, r2
 8001368:	009b      	lsls	r3, r3, #2
 800136a:	440b      	add	r3, r1
 800136c:	3304      	adds	r3, #4
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	1c59      	adds	r1, r3, #1
 8001372:	4814      	ldr	r0, [pc, #80]	; (80013c4 <update_scene+0xd4>)
 8001374:	4613      	mov	r3, r2
 8001376:	005b      	lsls	r3, r3, #1
 8001378:	4413      	add	r3, r2
 800137a:	009b      	lsls	r3, r3, #2
 800137c:	4403      	add	r3, r0
 800137e:	3304      	adds	r3, #4
 8001380:	6019      	str	r1, [r3, #0]
		if (shots[i].x > 128)
 8001382:	79fa      	ldrb	r2, [r7, #7]
 8001384:	490f      	ldr	r1, [pc, #60]	; (80013c4 <update_scene+0xd4>)
 8001386:	4613      	mov	r3, r2
 8001388:	005b      	lsls	r3, r3, #1
 800138a:	4413      	add	r3, r2
 800138c:	009b      	lsls	r3, r3, #2
 800138e:	440b      	add	r3, r1
 8001390:	3304      	adds	r3, #4
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	2b80      	cmp	r3, #128	; 0x80
 8001396:	dd08      	ble.n	80013aa <update_scene+0xba>
			shots[i].active = false;
 8001398:	79fa      	ldrb	r2, [r7, #7]
 800139a:	490a      	ldr	r1, [pc, #40]	; (80013c4 <update_scene+0xd4>)
 800139c:	4613      	mov	r3, r2
 800139e:	005b      	lsls	r3, r3, #1
 80013a0:	4413      	add	r3, r2
 80013a2:	009b      	lsls	r3, r3, #2
 80013a4:	440b      	add	r3, r1
 80013a6:	2200      	movs	r2, #0
 80013a8:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < num_shots; ++i)
 80013aa:	79fb      	ldrb	r3, [r7, #7]
 80013ac:	3301      	adds	r3, #1
 80013ae:	71fb      	strb	r3, [r7, #7]
 80013b0:	79fb      	ldrb	r3, [r7, #7]
 80013b2:	2b07      	cmp	r3, #7
 80013b4:	d9c9      	bls.n	800134a <update_scene+0x5a>
	}

	// Update enemies.
	for (i = 0; i < num_enemies; ++i)
 80013b6:	2300      	movs	r3, #0
 80013b8:	71fb      	strb	r3, [r7, #7]
 80013ba:	e250      	b.n	800185e <update_scene+0x56e>
 80013bc:	200000a0 	.word	0x200000a0
 80013c0:	20000168 	.word	0x20000168
 80013c4:	20000184 	.word	0x20000184
	{

		if (enemies[i].active)
 80013c8:	79fa      	ldrb	r2, [r7, #7]
 80013ca:	49b6      	ldr	r1, [pc, #728]	; (80016a4 <update_scene+0x3b4>)
 80013cc:	4613      	mov	r3, r2
 80013ce:	00db      	lsls	r3, r3, #3
 80013d0:	1a9b      	subs	r3, r3, r2
 80013d2:	009b      	lsls	r3, r3, #2
 80013d4:	440b      	add	r3, r1
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	f000 823d 	beq.w	8001858 <update_scene+0x568>
		{
			enemies[i].next_update -= 1;
 80013de:	79fa      	ldrb	r2, [r7, #7]
 80013e0:	49b0      	ldr	r1, [pc, #704]	; (80016a4 <update_scene+0x3b4>)
 80013e2:	4613      	mov	r3, r2
 80013e4:	00db      	lsls	r3, r3, #3
 80013e6:	1a9b      	subs	r3, r3, r2
 80013e8:	009b      	lsls	r3, r3, #2
 80013ea:	440b      	add	r3, r1
 80013ec:	3314      	adds	r3, #20
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	79fa      	ldrb	r2, [r7, #7]
 80013f2:	1e59      	subs	r1, r3, #1
 80013f4:	48ab      	ldr	r0, [pc, #684]	; (80016a4 <update_scene+0x3b4>)
 80013f6:	4613      	mov	r3, r2
 80013f8:	00db      	lsls	r3, r3, #3
 80013fa:	1a9b      	subs	r3, r3, r2
 80013fc:	009b      	lsls	r3, r3, #2
 80013fe:	4403      	add	r3, r0
 8001400:	3314      	adds	r3, #20
 8001402:	6019      	str	r1, [r3, #0]
				if (enemies[i].next_update <= 0)
 8001404:	79fa      	ldrb	r2, [r7, #7]
 8001406:	49a7      	ldr	r1, [pc, #668]	; (80016a4 <update_scene+0x3b4>)
 8001408:	4613      	mov	r3, r2
 800140a:	00db      	lsls	r3, r3, #3
 800140c:	1a9b      	subs	r3, r3, r2
 800140e:	009b      	lsls	r3, r3, #2
 8001410:	440b      	add	r3, r1
 8001412:	3314      	adds	r3, #20
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	2b00      	cmp	r3, #0
 8001418:	f300 821e 	bgt.w	8001858 <update_scene+0x568>
				{
					if (enemies[i].active)
 800141c:	79fa      	ldrb	r2, [r7, #7]
 800141e:	49a1      	ldr	r1, [pc, #644]	; (80016a4 <update_scene+0x3b4>)
 8001420:	4613      	mov	r3, r2
 8001422:	00db      	lsls	r3, r3, #3
 8001424:	1a9b      	subs	r3, r3, r2
 8001426:	009b      	lsls	r3, r3, #2
 8001428:	440b      	add	r3, r1
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	2b00      	cmp	r3, #0
 800142e:	f000 8213 	beq.w	8001858 <update_scene+0x568>
					{

						enemies[i].next_update = enemies[i].update_delay;
 8001432:	79f9      	ldrb	r1, [r7, #7]
 8001434:	79fa      	ldrb	r2, [r7, #7]
 8001436:	489b      	ldr	r0, [pc, #620]	; (80016a4 <update_scene+0x3b4>)
 8001438:	460b      	mov	r3, r1
 800143a:	00db      	lsls	r3, r3, #3
 800143c:	1a5b      	subs	r3, r3, r1
 800143e:	009b      	lsls	r3, r3, #2
 8001440:	4403      	add	r3, r0
 8001442:	3318      	adds	r3, #24
 8001444:	6819      	ldr	r1, [r3, #0]
 8001446:	4897      	ldr	r0, [pc, #604]	; (80016a4 <update_scene+0x3b4>)
 8001448:	4613      	mov	r3, r2
 800144a:	00db      	lsls	r3, r3, #3
 800144c:	1a9b      	subs	r3, r3, r2
 800144e:	009b      	lsls	r3, r3, #2
 8001450:	4403      	add	r3, r0
 8001452:	3314      	adds	r3, #20
 8001454:	6019      	str	r1, [r3, #0]

						// Check for hits on player.
						if (colliding(enemies[i].x,enemies[i].y, player.x, player.y) 	||
 8001456:	79fa      	ldrb	r2, [r7, #7]
 8001458:	4992      	ldr	r1, [pc, #584]	; (80016a4 <update_scene+0x3b4>)
 800145a:	4613      	mov	r3, r2
 800145c:	00db      	lsls	r3, r3, #3
 800145e:	1a9b      	subs	r3, r3, r2
 8001460:	009b      	lsls	r3, r3, #2
 8001462:	440b      	add	r3, r1
 8001464:	3304      	adds	r3, #4
 8001466:	6818      	ldr	r0, [r3, #0]
 8001468:	79fa      	ldrb	r2, [r7, #7]
 800146a:	498e      	ldr	r1, [pc, #568]	; (80016a4 <update_scene+0x3b4>)
 800146c:	4613      	mov	r3, r2
 800146e:	00db      	lsls	r3, r3, #3
 8001470:	1a9b      	subs	r3, r3, r2
 8001472:	009b      	lsls	r3, r3, #2
 8001474:	440b      	add	r3, r1
 8001476:	3308      	adds	r3, #8
 8001478:	6819      	ldr	r1, [r3, #0]
 800147a:	4b8b      	ldr	r3, [pc, #556]	; (80016a8 <update_scene+0x3b8>)
 800147c:	681a      	ldr	r2, [r3, #0]
 800147e:	4b8a      	ldr	r3, [pc, #552]	; (80016a8 <update_scene+0x3b8>)
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	f7ff ff0d 	bl	80012a0 <colliding>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d154      	bne.n	8001536 <update_scene+0x246>
							colliding(enemies[i].x,enemies[i].y, player.x, player.y+5) 	||
 800148c:	79fa      	ldrb	r2, [r7, #7]
 800148e:	4985      	ldr	r1, [pc, #532]	; (80016a4 <update_scene+0x3b4>)
 8001490:	4613      	mov	r3, r2
 8001492:	00db      	lsls	r3, r3, #3
 8001494:	1a9b      	subs	r3, r3, r2
 8001496:	009b      	lsls	r3, r3, #2
 8001498:	440b      	add	r3, r1
 800149a:	3304      	adds	r3, #4
 800149c:	6818      	ldr	r0, [r3, #0]
 800149e:	79fa      	ldrb	r2, [r7, #7]
 80014a0:	4980      	ldr	r1, [pc, #512]	; (80016a4 <update_scene+0x3b4>)
 80014a2:	4613      	mov	r3, r2
 80014a4:	00db      	lsls	r3, r3, #3
 80014a6:	1a9b      	subs	r3, r3, r2
 80014a8:	009b      	lsls	r3, r3, #2
 80014aa:	440b      	add	r3, r1
 80014ac:	3308      	adds	r3, #8
 80014ae:	6819      	ldr	r1, [r3, #0]
 80014b0:	4b7d      	ldr	r3, [pc, #500]	; (80016a8 <update_scene+0x3b8>)
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	4b7c      	ldr	r3, [pc, #496]	; (80016a8 <update_scene+0x3b8>)
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	3305      	adds	r3, #5
 80014ba:	f7ff fef1 	bl	80012a0 <colliding>
 80014be:	4603      	mov	r3, r0
						if (colliding(enemies[i].x,enemies[i].y, player.x, player.y) 	||
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d138      	bne.n	8001536 <update_scene+0x246>
							colliding(enemies[i].x,enemies[i].y, player.x+7, player.y)	||
 80014c4:	79fa      	ldrb	r2, [r7, #7]
 80014c6:	4977      	ldr	r1, [pc, #476]	; (80016a4 <update_scene+0x3b4>)
 80014c8:	4613      	mov	r3, r2
 80014ca:	00db      	lsls	r3, r3, #3
 80014cc:	1a9b      	subs	r3, r3, r2
 80014ce:	009b      	lsls	r3, r3, #2
 80014d0:	440b      	add	r3, r1
 80014d2:	3304      	adds	r3, #4
 80014d4:	6818      	ldr	r0, [r3, #0]
 80014d6:	79fa      	ldrb	r2, [r7, #7]
 80014d8:	4972      	ldr	r1, [pc, #456]	; (80016a4 <update_scene+0x3b4>)
 80014da:	4613      	mov	r3, r2
 80014dc:	00db      	lsls	r3, r3, #3
 80014de:	1a9b      	subs	r3, r3, r2
 80014e0:	009b      	lsls	r3, r3, #2
 80014e2:	440b      	add	r3, r1
 80014e4:	3308      	adds	r3, #8
 80014e6:	6819      	ldr	r1, [r3, #0]
 80014e8:	4b6f      	ldr	r3, [pc, #444]	; (80016a8 <update_scene+0x3b8>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	1dda      	adds	r2, r3, #7
 80014ee:	4b6e      	ldr	r3, [pc, #440]	; (80016a8 <update_scene+0x3b8>)
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	f7ff fed5 	bl	80012a0 <colliding>
 80014f6:	4603      	mov	r3, r0
							colliding(enemies[i].x,enemies[i].y, player.x, player.y+5) 	||
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d11c      	bne.n	8001536 <update_scene+0x246>
							colliding(enemies[i].x,enemies[i].y, player.x+7, player.y+5)
 80014fc:	79fa      	ldrb	r2, [r7, #7]
 80014fe:	4969      	ldr	r1, [pc, #420]	; (80016a4 <update_scene+0x3b4>)
 8001500:	4613      	mov	r3, r2
 8001502:	00db      	lsls	r3, r3, #3
 8001504:	1a9b      	subs	r3, r3, r2
 8001506:	009b      	lsls	r3, r3, #2
 8001508:	440b      	add	r3, r1
 800150a:	3304      	adds	r3, #4
 800150c:	6818      	ldr	r0, [r3, #0]
 800150e:	79fa      	ldrb	r2, [r7, #7]
 8001510:	4964      	ldr	r1, [pc, #400]	; (80016a4 <update_scene+0x3b4>)
 8001512:	4613      	mov	r3, r2
 8001514:	00db      	lsls	r3, r3, #3
 8001516:	1a9b      	subs	r3, r3, r2
 8001518:	009b      	lsls	r3, r3, #2
 800151a:	440b      	add	r3, r1
 800151c:	3308      	adds	r3, #8
 800151e:	6819      	ldr	r1, [r3, #0]
 8001520:	4b61      	ldr	r3, [pc, #388]	; (80016a8 <update_scene+0x3b8>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	1dda      	adds	r2, r3, #7
 8001526:	4b60      	ldr	r3, [pc, #384]	; (80016a8 <update_scene+0x3b8>)
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	3305      	adds	r3, #5
 800152c:	f7ff feb8 	bl	80012a0 <colliding>
 8001530:	4603      	mov	r3, r0
							colliding(enemies[i].x,enemies[i].y, player.x+7, player.y)	||
 8001532:	2b00      	cmp	r3, #0
 8001534:	d04e      	beq.n	80015d4 <update_scene+0x2e4>
							)
						{
							player.lives -= 1;;
 8001536:	4b5c      	ldr	r3, [pc, #368]	; (80016a8 <update_scene+0x3b8>)
 8001538:	691b      	ldr	r3, [r3, #16]
 800153a:	3b01      	subs	r3, #1
 800153c:	4a5a      	ldr	r2, [pc, #360]	; (80016a8 <update_scene+0x3b8>)
 800153e:	6113      	str	r3, [r2, #16]
							enemies[i].active = false;
 8001540:	79fa      	ldrb	r2, [r7, #7]
 8001542:	4958      	ldr	r1, [pc, #352]	; (80016a4 <update_scene+0x3b4>)
 8001544:	4613      	mov	r3, r2
 8001546:	00db      	lsls	r3, r3, #3
 8001548:	1a9b      	subs	r3, r3, r2
 800154a:	009b      	lsls	r3, r3, #2
 800154c:	440b      	add	r3, r1
 800154e:	2200      	movs	r2, #0
 8001550:	701a      	strb	r2, [r3, #0]
							GFX_DrowBitMap_P(enemies[i].x+2, enemies[i].y, explosion_map,10,10,1);
 8001552:	79fa      	ldrb	r2, [r7, #7]
 8001554:	4953      	ldr	r1, [pc, #332]	; (80016a4 <update_scene+0x3b4>)
 8001556:	4613      	mov	r3, r2
 8001558:	00db      	lsls	r3, r3, #3
 800155a:	1a9b      	subs	r3, r3, r2
 800155c:	009b      	lsls	r3, r3, #2
 800155e:	440b      	add	r3, r1
 8001560:	3304      	adds	r3, #4
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	1c98      	adds	r0, r3, #2
 8001566:	79fa      	ldrb	r2, [r7, #7]
 8001568:	494e      	ldr	r1, [pc, #312]	; (80016a4 <update_scene+0x3b4>)
 800156a:	4613      	mov	r3, r2
 800156c:	00db      	lsls	r3, r3, #3
 800156e:	1a9b      	subs	r3, r3, r2
 8001570:	009b      	lsls	r3, r3, #2
 8001572:	440b      	add	r3, r1
 8001574:	3308      	adds	r3, #8
 8001576:	6819      	ldr	r1, [r3, #0]
 8001578:	2301      	movs	r3, #1
 800157a:	9301      	str	r3, [sp, #4]
 800157c:	230a      	movs	r3, #10
 800157e:	9300      	str	r3, [sp, #0]
 8001580:	230a      	movs	r3, #10
 8001582:	4a4a      	ldr	r2, [pc, #296]	; (80016ac <update_scene+0x3bc>)
 8001584:	f7fe ffa0 	bl	80004c8 <GFX_DrowBitMap_P>
							GFX_DrowBitMap_P(player.x + 8, player.y-2, player_shield_map,10 ,16,1);
 8001588:	4b47      	ldr	r3, [pc, #284]	; (80016a8 <update_scene+0x3b8>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f103 0008 	add.w	r0, r3, #8
 8001590:	4b45      	ldr	r3, [pc, #276]	; (80016a8 <update_scene+0x3b8>)
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	1e99      	subs	r1, r3, #2
 8001596:	2301      	movs	r3, #1
 8001598:	9301      	str	r3, [sp, #4]
 800159a:	2310      	movs	r3, #16
 800159c:	9300      	str	r3, [sp, #0]
 800159e:	230a      	movs	r3, #10
 80015a0:	4a43      	ldr	r2, [pc, #268]	; (80016b0 <update_scene+0x3c0>)
 80015a2:	f7fe ff91 	bl	80004c8 <GFX_DrowBitMap_P>
							GFX_DrowBitMap_P(player.x, player.y, player_map, 11, 11, 1);
 80015a6:	4b40      	ldr	r3, [pc, #256]	; (80016a8 <update_scene+0x3b8>)
 80015a8:	6818      	ldr	r0, [r3, #0]
 80015aa:	4b3f      	ldr	r3, [pc, #252]	; (80016a8 <update_scene+0x3b8>)
 80015ac:	6859      	ldr	r1, [r3, #4]
 80015ae:	2301      	movs	r3, #1
 80015b0:	9301      	str	r3, [sp, #4]
 80015b2:	230b      	movs	r3, #11
 80015b4:	9300      	str	r3, [sp, #0]
 80015b6:	230b      	movs	r3, #11
 80015b8:	4a3e      	ldr	r2, [pc, #248]	; (80016b4 <update_scene+0x3c4>)
 80015ba:	f7fe ff85 	bl	80004c8 <GFX_DrowBitMap_P>

							ssd1327_display();
 80015be:	f001 f8d7 	bl	8002770 <ssd1327_display>
							if (player.lives <= 0)
 80015c2:	4b39      	ldr	r3, [pc, #228]	; (80016a8 <update_scene+0x3b8>)
 80015c4:	691b      	ldr	r3, [r3, #16]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	dc04      	bgt.n	80015d4 <update_scene+0x2e4>
							{
								play_dead_anim();
 80015ca:	f7ff fdc1 	bl	8001150 <play_dead_anim>
								state = st_dead;
 80015ce:	4b3a      	ldr	r3, [pc, #232]	; (80016b8 <update_scene+0x3c8>)
 80015d0:	2202      	movs	r2, #2
 80015d2:	701a      	strb	r2, [r3, #0]
							}
						}

						// Move left and do any type-specific behavior.
						enemies[i].x -= 1;
 80015d4:	79fa      	ldrb	r2, [r7, #7]
 80015d6:	4933      	ldr	r1, [pc, #204]	; (80016a4 <update_scene+0x3b4>)
 80015d8:	4613      	mov	r3, r2
 80015da:	00db      	lsls	r3, r3, #3
 80015dc:	1a9b      	subs	r3, r3, r2
 80015de:	009b      	lsls	r3, r3, #2
 80015e0:	440b      	add	r3, r1
 80015e2:	3304      	adds	r3, #4
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	79fa      	ldrb	r2, [r7, #7]
 80015e8:	1e59      	subs	r1, r3, #1
 80015ea:	482e      	ldr	r0, [pc, #184]	; (80016a4 <update_scene+0x3b4>)
 80015ec:	4613      	mov	r3, r2
 80015ee:	00db      	lsls	r3, r3, #3
 80015f0:	1a9b      	subs	r3, r3, r2
 80015f2:	009b      	lsls	r3, r3, #2
 80015f4:	4403      	add	r3, r0
 80015f6:	3304      	adds	r3, #4
 80015f8:	6019      	str	r1, [r3, #0]

						switch (enemies[i].type)
 80015fa:	79fa      	ldrb	r2, [r7, #7]
 80015fc:	4929      	ldr	r1, [pc, #164]	; (80016a4 <update_scene+0x3b4>)
 80015fe:	4613      	mov	r3, r2
 8001600:	00db      	lsls	r3, r3, #3
 8001602:	1a9b      	subs	r3, r3, r2
 8001604:	009b      	lsls	r3, r3, #2
 8001606:	440b      	add	r3, r1
 8001608:	330c      	adds	r3, #12
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	2b02      	cmp	r3, #2
 800160e:	d063      	beq.n	80016d8 <update_scene+0x3e8>
 8001610:	2b02      	cmp	r3, #2
 8001612:	f300 810c 	bgt.w	800182e <update_scene+0x53e>
 8001616:	2b00      	cmp	r3, #0
 8001618:	f000 8104 	beq.w	8001824 <update_scene+0x534>
 800161c:	2b01      	cmp	r3, #1
 800161e:	f040 8106 	bne.w	800182e <update_scene+0x53e>
						{
						case et_tracker:
							if (enemies[i].x < 70)
 8001622:	79fa      	ldrb	r2, [r7, #7]
 8001624:	491f      	ldr	r1, [pc, #124]	; (80016a4 <update_scene+0x3b4>)
 8001626:	4613      	mov	r3, r2
 8001628:	00db      	lsls	r3, r3, #3
 800162a:	1a9b      	subs	r3, r3, r2
 800162c:	009b      	lsls	r3, r3, #2
 800162e:	440b      	add	r3, r1
 8001630:	3304      	adds	r3, #4
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	2b45      	cmp	r3, #69	; 0x45
 8001636:	f300 80f7 	bgt.w	8001828 <update_scene+0x538>
							{
								if (player.y > enemies[i].y) enemies[i].y += 1;
 800163a:	4b1b      	ldr	r3, [pc, #108]	; (80016a8 <update_scene+0x3b8>)
 800163c:	6859      	ldr	r1, [r3, #4]
 800163e:	79fa      	ldrb	r2, [r7, #7]
 8001640:	4818      	ldr	r0, [pc, #96]	; (80016a4 <update_scene+0x3b4>)
 8001642:	4613      	mov	r3, r2
 8001644:	00db      	lsls	r3, r3, #3
 8001646:	1a9b      	subs	r3, r3, r2
 8001648:	009b      	lsls	r3, r3, #2
 800164a:	4403      	add	r3, r0
 800164c:	3308      	adds	r3, #8
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4299      	cmp	r1, r3
 8001652:	dd12      	ble.n	800167a <update_scene+0x38a>
 8001654:	79fa      	ldrb	r2, [r7, #7]
 8001656:	4913      	ldr	r1, [pc, #76]	; (80016a4 <update_scene+0x3b4>)
 8001658:	4613      	mov	r3, r2
 800165a:	00db      	lsls	r3, r3, #3
 800165c:	1a9b      	subs	r3, r3, r2
 800165e:	009b      	lsls	r3, r3, #2
 8001660:	440b      	add	r3, r1
 8001662:	3308      	adds	r3, #8
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	79fa      	ldrb	r2, [r7, #7]
 8001668:	1c59      	adds	r1, r3, #1
 800166a:	480e      	ldr	r0, [pc, #56]	; (80016a4 <update_scene+0x3b4>)
 800166c:	4613      	mov	r3, r2
 800166e:	00db      	lsls	r3, r3, #3
 8001670:	1a9b      	subs	r3, r3, r2
 8001672:	009b      	lsls	r3, r3, #2
 8001674:	4403      	add	r3, r0
 8001676:	3308      	adds	r3, #8
 8001678:	6019      	str	r1, [r3, #0]
								if (player.y < enemies[i].y) enemies[i].y -= 1;
 800167a:	4b0b      	ldr	r3, [pc, #44]	; (80016a8 <update_scene+0x3b8>)
 800167c:	6859      	ldr	r1, [r3, #4]
 800167e:	79fa      	ldrb	r2, [r7, #7]
 8001680:	4808      	ldr	r0, [pc, #32]	; (80016a4 <update_scene+0x3b4>)
 8001682:	4613      	mov	r3, r2
 8001684:	00db      	lsls	r3, r3, #3
 8001686:	1a9b      	subs	r3, r3, r2
 8001688:	009b      	lsls	r3, r3, #2
 800168a:	4403      	add	r3, r0
 800168c:	3308      	adds	r3, #8
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4299      	cmp	r1, r3
 8001692:	f280 80c9 	bge.w	8001828 <update_scene+0x538>
 8001696:	79fa      	ldrb	r2, [r7, #7]
 8001698:	4902      	ldr	r1, [pc, #8]	; (80016a4 <update_scene+0x3b4>)
 800169a:	4613      	mov	r3, r2
 800169c:	00db      	lsls	r3, r3, #3
 800169e:	1a9b      	subs	r3, r3, r2
 80016a0:	009b      	lsls	r3, r3, #2
 80016a2:	e00b      	b.n	80016bc <update_scene+0x3cc>
 80016a4:	20000220 	.word	0x20000220
 80016a8:	20000168 	.word	0x20000168
 80016ac:	08007628 	.word	0x08007628
 80016b0:	080075f4 	.word	0x080075f4
 80016b4:	0800742c 	.word	0x0800742c
 80016b8:	20000674 	.word	0x20000674
 80016bc:	440b      	add	r3, r1
 80016be:	3308      	adds	r3, #8
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	79fa      	ldrb	r2, [r7, #7]
 80016c4:	1e59      	subs	r1, r3, #1
 80016c6:	4897      	ldr	r0, [pc, #604]	; (8001924 <update_scene+0x634>)
 80016c8:	4613      	mov	r3, r2
 80016ca:	00db      	lsls	r3, r3, #3
 80016cc:	1a9b      	subs	r3, r3, r2
 80016ce:	009b      	lsls	r3, r3, #2
 80016d0:	4403      	add	r3, r0
 80016d2:	3308      	adds	r3, #8
 80016d4:	6019      	str	r1, [r3, #0]
							}
							break;
 80016d6:	e0a7      	b.n	8001828 <update_scene+0x538>
						case et_diver:
							break;
						case et_bobber:
							if((enemies[i].x%4 == 0) && (enemies[i].x%8 == 0))
 80016d8:	79fa      	ldrb	r2, [r7, #7]
 80016da:	4992      	ldr	r1, [pc, #584]	; (8001924 <update_scene+0x634>)
 80016dc:	4613      	mov	r3, r2
 80016de:	00db      	lsls	r3, r3, #3
 80016e0:	1a9b      	subs	r3, r3, r2
 80016e2:	009b      	lsls	r3, r3, #2
 80016e4:	440b      	add	r3, r1
 80016e6:	3304      	adds	r3, #4
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f003 0303 	and.w	r3, r3, #3
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d11f      	bne.n	8001732 <update_scene+0x442>
 80016f2:	79fa      	ldrb	r2, [r7, #7]
 80016f4:	498b      	ldr	r1, [pc, #556]	; (8001924 <update_scene+0x634>)
 80016f6:	4613      	mov	r3, r2
 80016f8:	00db      	lsls	r3, r3, #3
 80016fa:	1a9b      	subs	r3, r3, r2
 80016fc:	009b      	lsls	r3, r3, #2
 80016fe:	440b      	add	r3, r1
 8001700:	3304      	adds	r3, #4
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f003 0307 	and.w	r3, r3, #7
 8001708:	2b00      	cmp	r3, #0
 800170a:	d112      	bne.n	8001732 <update_scene+0x442>
								enemies[i].y += 4;
 800170c:	79fa      	ldrb	r2, [r7, #7]
 800170e:	4985      	ldr	r1, [pc, #532]	; (8001924 <update_scene+0x634>)
 8001710:	4613      	mov	r3, r2
 8001712:	00db      	lsls	r3, r3, #3
 8001714:	1a9b      	subs	r3, r3, r2
 8001716:	009b      	lsls	r3, r3, #2
 8001718:	440b      	add	r3, r1
 800171a:	3308      	adds	r3, #8
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	79fa      	ldrb	r2, [r7, #7]
 8001720:	1d19      	adds	r1, r3, #4
 8001722:	4880      	ldr	r0, [pc, #512]	; (8001924 <update_scene+0x634>)
 8001724:	4613      	mov	r3, r2
 8001726:	00db      	lsls	r3, r3, #3
 8001728:	1a9b      	subs	r3, r3, r2
 800172a:	009b      	lsls	r3, r3, #2
 800172c:	4403      	add	r3, r0
 800172e:	3308      	adds	r3, #8
 8001730:	6019      	str	r1, [r3, #0]
							if((enemies[i].x%4 == 0) && !(enemies[i].x%8 == 0))
 8001732:	79fa      	ldrb	r2, [r7, #7]
 8001734:	497b      	ldr	r1, [pc, #492]	; (8001924 <update_scene+0x634>)
 8001736:	4613      	mov	r3, r2
 8001738:	00db      	lsls	r3, r3, #3
 800173a:	1a9b      	subs	r3, r3, r2
 800173c:	009b      	lsls	r3, r3, #2
 800173e:	440b      	add	r3, r1
 8001740:	3304      	adds	r3, #4
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f003 0303 	and.w	r3, r3, #3
 8001748:	2b00      	cmp	r3, #0
 800174a:	d11f      	bne.n	800178c <update_scene+0x49c>
 800174c:	79fa      	ldrb	r2, [r7, #7]
 800174e:	4975      	ldr	r1, [pc, #468]	; (8001924 <update_scene+0x634>)
 8001750:	4613      	mov	r3, r2
 8001752:	00db      	lsls	r3, r3, #3
 8001754:	1a9b      	subs	r3, r3, r2
 8001756:	009b      	lsls	r3, r3, #2
 8001758:	440b      	add	r3, r1
 800175a:	3304      	adds	r3, #4
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f003 0307 	and.w	r3, r3, #7
 8001762:	2b00      	cmp	r3, #0
 8001764:	d012      	beq.n	800178c <update_scene+0x49c>
								enemies[i].y -= 4;
 8001766:	79fa      	ldrb	r2, [r7, #7]
 8001768:	496e      	ldr	r1, [pc, #440]	; (8001924 <update_scene+0x634>)
 800176a:	4613      	mov	r3, r2
 800176c:	00db      	lsls	r3, r3, #3
 800176e:	1a9b      	subs	r3, r3, r2
 8001770:	009b      	lsls	r3, r3, #2
 8001772:	440b      	add	r3, r1
 8001774:	3308      	adds	r3, #8
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	79fa      	ldrb	r2, [r7, #7]
 800177a:	1f19      	subs	r1, r3, #4
 800177c:	4869      	ldr	r0, [pc, #420]	; (8001924 <update_scene+0x634>)
 800177e:	4613      	mov	r3, r2
 8001780:	00db      	lsls	r3, r3, #3
 8001782:	1a9b      	subs	r3, r3, r2
 8001784:	009b      	lsls	r3, r3, #2
 8001786:	4403      	add	r3, r0
 8001788:	3308      	adds	r3, #8
 800178a:	6019      	str	r1, [r3, #0]
							if (enemies[i].x < 70)
 800178c:	79fa      	ldrb	r2, [r7, #7]
 800178e:	4965      	ldr	r1, [pc, #404]	; (8001924 <update_scene+0x634>)
 8001790:	4613      	mov	r3, r2
 8001792:	00db      	lsls	r3, r3, #3
 8001794:	1a9b      	subs	r3, r3, r2
 8001796:	009b      	lsls	r3, r3, #2
 8001798:	440b      	add	r3, r1
 800179a:	3304      	adds	r3, #4
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	2b45      	cmp	r3, #69	; 0x45
 80017a0:	dc44      	bgt.n	800182c <update_scene+0x53c>
							{
								if (player.y > enemies[i].y) enemies[i].y += 1;
 80017a2:	4b61      	ldr	r3, [pc, #388]	; (8001928 <update_scene+0x638>)
 80017a4:	6859      	ldr	r1, [r3, #4]
 80017a6:	79fa      	ldrb	r2, [r7, #7]
 80017a8:	485e      	ldr	r0, [pc, #376]	; (8001924 <update_scene+0x634>)
 80017aa:	4613      	mov	r3, r2
 80017ac:	00db      	lsls	r3, r3, #3
 80017ae:	1a9b      	subs	r3, r3, r2
 80017b0:	009b      	lsls	r3, r3, #2
 80017b2:	4403      	add	r3, r0
 80017b4:	3308      	adds	r3, #8
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4299      	cmp	r1, r3
 80017ba:	dd12      	ble.n	80017e2 <update_scene+0x4f2>
 80017bc:	79fa      	ldrb	r2, [r7, #7]
 80017be:	4959      	ldr	r1, [pc, #356]	; (8001924 <update_scene+0x634>)
 80017c0:	4613      	mov	r3, r2
 80017c2:	00db      	lsls	r3, r3, #3
 80017c4:	1a9b      	subs	r3, r3, r2
 80017c6:	009b      	lsls	r3, r3, #2
 80017c8:	440b      	add	r3, r1
 80017ca:	3308      	adds	r3, #8
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	79fa      	ldrb	r2, [r7, #7]
 80017d0:	1c59      	adds	r1, r3, #1
 80017d2:	4854      	ldr	r0, [pc, #336]	; (8001924 <update_scene+0x634>)
 80017d4:	4613      	mov	r3, r2
 80017d6:	00db      	lsls	r3, r3, #3
 80017d8:	1a9b      	subs	r3, r3, r2
 80017da:	009b      	lsls	r3, r3, #2
 80017dc:	4403      	add	r3, r0
 80017de:	3308      	adds	r3, #8
 80017e0:	6019      	str	r1, [r3, #0]
								if (player.y < enemies[i].y) enemies[i].y -= 1;
 80017e2:	4b51      	ldr	r3, [pc, #324]	; (8001928 <update_scene+0x638>)
 80017e4:	6859      	ldr	r1, [r3, #4]
 80017e6:	79fa      	ldrb	r2, [r7, #7]
 80017e8:	484e      	ldr	r0, [pc, #312]	; (8001924 <update_scene+0x634>)
 80017ea:	4613      	mov	r3, r2
 80017ec:	00db      	lsls	r3, r3, #3
 80017ee:	1a9b      	subs	r3, r3, r2
 80017f0:	009b      	lsls	r3, r3, #2
 80017f2:	4403      	add	r3, r0
 80017f4:	3308      	adds	r3, #8
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4299      	cmp	r1, r3
 80017fa:	da17      	bge.n	800182c <update_scene+0x53c>
 80017fc:	79fa      	ldrb	r2, [r7, #7]
 80017fe:	4949      	ldr	r1, [pc, #292]	; (8001924 <update_scene+0x634>)
 8001800:	4613      	mov	r3, r2
 8001802:	00db      	lsls	r3, r3, #3
 8001804:	1a9b      	subs	r3, r3, r2
 8001806:	009b      	lsls	r3, r3, #2
 8001808:	440b      	add	r3, r1
 800180a:	3308      	adds	r3, #8
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	79fa      	ldrb	r2, [r7, #7]
 8001810:	1e59      	subs	r1, r3, #1
 8001812:	4844      	ldr	r0, [pc, #272]	; (8001924 <update_scene+0x634>)
 8001814:	4613      	mov	r3, r2
 8001816:	00db      	lsls	r3, r3, #3
 8001818:	1a9b      	subs	r3, r3, r2
 800181a:	009b      	lsls	r3, r3, #2
 800181c:	4403      	add	r3, r0
 800181e:	3308      	adds	r3, #8
 8001820:	6019      	str	r1, [r3, #0]
							}
							break;
 8001822:	e003      	b.n	800182c <update_scene+0x53c>
							break;
 8001824:	bf00      	nop
 8001826:	e002      	b.n	800182e <update_scene+0x53e>
							break;
 8001828:	bf00      	nop
 800182a:	e000      	b.n	800182e <update_scene+0x53e>
							break;
 800182c:	bf00      	nop
						}

						// If we've moved off the left edge, die.
						if (enemies[i].x < -4) enemies[i].active = false;
 800182e:	79fa      	ldrb	r2, [r7, #7]
 8001830:	493c      	ldr	r1, [pc, #240]	; (8001924 <update_scene+0x634>)
 8001832:	4613      	mov	r3, r2
 8001834:	00db      	lsls	r3, r3, #3
 8001836:	1a9b      	subs	r3, r3, r2
 8001838:	009b      	lsls	r3, r3, #2
 800183a:	440b      	add	r3, r1
 800183c:	3304      	adds	r3, #4
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f113 0f04 	cmn.w	r3, #4
 8001844:	da08      	bge.n	8001858 <update_scene+0x568>
 8001846:	79fa      	ldrb	r2, [r7, #7]
 8001848:	4936      	ldr	r1, [pc, #216]	; (8001924 <update_scene+0x634>)
 800184a:	4613      	mov	r3, r2
 800184c:	00db      	lsls	r3, r3, #3
 800184e:	1a9b      	subs	r3, r3, r2
 8001850:	009b      	lsls	r3, r3, #2
 8001852:	440b      	add	r3, r1
 8001854:	2200      	movs	r2, #0
 8001856:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < num_enemies; ++i)
 8001858:	79fb      	ldrb	r3, [r7, #7]
 800185a:	3301      	adds	r3, #1
 800185c:	71fb      	strb	r3, [r7, #7]
 800185e:	79fb      	ldrb	r3, [r7, #7]
 8001860:	2b09      	cmp	r3, #9
 8001862:	f67f adb1 	bls.w	80013c8 <update_scene+0xd8>
				}
		}
	}

	//------------- Obs�uga Bossa ---------------
	if(boss.active)
 8001866:	4b31      	ldr	r3, [pc, #196]	; (800192c <update_scene+0x63c>)
 8001868:	781b      	ldrb	r3, [r3, #0]
 800186a:	2b00      	cmp	r3, #0
 800186c:	f000 821c 	beq.w	8001ca8 <update_scene+0x9b8>
	{
		boss.next_update -= 1;
 8001870:	4b2e      	ldr	r3, [pc, #184]	; (800192c <update_scene+0x63c>)
 8001872:	68db      	ldr	r3, [r3, #12]
 8001874:	3b01      	subs	r3, #1
 8001876:	4a2d      	ldr	r2, [pc, #180]	; (800192c <update_scene+0x63c>)
 8001878:	60d3      	str	r3, [r2, #12]

		//Pozycja bosa
		if(boss.next_update <= 0)
 800187a:	4b2c      	ldr	r3, [pc, #176]	; (800192c <update_scene+0x63c>)
 800187c:	68db      	ldr	r3, [r3, #12]
 800187e:	2b00      	cmp	r3, #0
 8001880:	dc38      	bgt.n	80018f4 <update_scene+0x604>
		{
			boss.next_update = boss.update_delay;
 8001882:	4b2a      	ldr	r3, [pc, #168]	; (800192c <update_scene+0x63c>)
 8001884:	691b      	ldr	r3, [r3, #16]
 8001886:	4a29      	ldr	r2, [pc, #164]	; (800192c <update_scene+0x63c>)
 8001888:	60d3      	str	r3, [r2, #12]

			y += dy;
 800188a:	4b29      	ldr	r3, [pc, #164]	; (8001930 <update_scene+0x640>)
 800188c:	781a      	ldrb	r2, [r3, #0]
 800188e:	4b29      	ldr	r3, [pc, #164]	; (8001934 <update_scene+0x644>)
 8001890:	781b      	ldrb	r3, [r3, #0]
 8001892:	4413      	add	r3, r2
 8001894:	b2da      	uxtb	r2, r3
 8001896:	4b26      	ldr	r3, [pc, #152]	; (8001930 <update_scene+0x640>)
 8001898:	701a      	strb	r2, [r3, #0]
			if (y < 1 || y > (screen_height - 24)) dy = -dy;
 800189a:	4b25      	ldr	r3, [pc, #148]	; (8001930 <update_scene+0x640>)
 800189c:	781b      	ldrb	r3, [r3, #0]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d003      	beq.n	80018aa <update_scene+0x5ba>
 80018a2:	4b23      	ldr	r3, [pc, #140]	; (8001930 <update_scene+0x640>)
 80018a4:	781b      	ldrb	r3, [r3, #0]
 80018a6:	2b68      	cmp	r3, #104	; 0x68
 80018a8:	d905      	bls.n	80018b6 <update_scene+0x5c6>
 80018aa:	4b22      	ldr	r3, [pc, #136]	; (8001934 <update_scene+0x644>)
 80018ac:	781b      	ldrb	r3, [r3, #0]
 80018ae:	425b      	negs	r3, r3
 80018b0:	b2da      	uxtb	r2, r3
 80018b2:	4b20      	ldr	r3, [pc, #128]	; (8001934 <update_scene+0x644>)
 80018b4:	701a      	strb	r2, [r3, #0]

			boss.y = y;
 80018b6:	4b1e      	ldr	r3, [pc, #120]	; (8001930 <update_scene+0x640>)
 80018b8:	781b      	ldrb	r3, [r3, #0]
 80018ba:	461a      	mov	r2, r3
 80018bc:	4b1b      	ldr	r3, [pc, #108]	; (800192c <update_scene+0x63c>)
 80018be:	609a      	str	r2, [r3, #8]

			if(boss.y < 10) boss.y = 10;
 80018c0:	4b1a      	ldr	r3, [pc, #104]	; (800192c <update_scene+0x63c>)
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	2b09      	cmp	r3, #9
 80018c6:	dc02      	bgt.n	80018ce <update_scene+0x5de>
 80018c8:	4b18      	ldr	r3, [pc, #96]	; (800192c <update_scene+0x63c>)
 80018ca:	220a      	movs	r2, #10
 80018cc:	609a      	str	r2, [r3, #8]
			if(boss.y > (screen_height - 24)) boss.y = (screen_height - 24);
 80018ce:	4b17      	ldr	r3, [pc, #92]	; (800192c <update_scene+0x63c>)
 80018d0:	689b      	ldr	r3, [r3, #8]
 80018d2:	2b68      	cmp	r3, #104	; 0x68
 80018d4:	dd02      	ble.n	80018dc <update_scene+0x5ec>
 80018d6:	4b15      	ldr	r3, [pc, #84]	; (800192c <update_scene+0x63c>)
 80018d8:	2268      	movs	r2, #104	; 0x68
 80018da:	609a      	str	r2, [r3, #8]

			boss.x -= 1;
 80018dc:	4b13      	ldr	r3, [pc, #76]	; (800192c <update_scene+0x63c>)
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	3b01      	subs	r3, #1
 80018e2:	4a12      	ldr	r2, [pc, #72]	; (800192c <update_scene+0x63c>)
 80018e4:	6053      	str	r3, [r2, #4]
			if(boss.x < 100) boss.x = 100;
 80018e6:	4b11      	ldr	r3, [pc, #68]	; (800192c <update_scene+0x63c>)
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	2b63      	cmp	r3, #99	; 0x63
 80018ec:	dc02      	bgt.n	80018f4 <update_scene+0x604>
 80018ee:	4b0f      	ldr	r3, [pc, #60]	; (800192c <update_scene+0x63c>)
 80018f0:	2264      	movs	r2, #100	; 0x64
 80018f2:	605a      	str	r2, [r3, #4]
		}

		//Cz�stosc sztrza��w bossa
		if((rand()%100) < (boss.level * 2 ))
 80018f4:	f004 fad6 	bl	8005ea4 <rand>
 80018f8:	4602      	mov	r2, r0
 80018fa:	4b0f      	ldr	r3, [pc, #60]	; (8001938 <update_scene+0x648>)
 80018fc:	fb83 1302 	smull	r1, r3, r3, r2
 8001900:	1159      	asrs	r1, r3, #5
 8001902:	17d3      	asrs	r3, r2, #31
 8001904:	1acb      	subs	r3, r1, r3
 8001906:	2164      	movs	r1, #100	; 0x64
 8001908:	fb01 f303 	mul.w	r3, r1, r3
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	4a07      	ldr	r2, [pc, #28]	; (800192c <update_scene+0x63c>)
 8001910:	6992      	ldr	r2, [r2, #24]
 8001912:	0052      	lsls	r2, r2, #1
 8001914:	4293      	cmp	r3, r2
 8001916:	da01      	bge.n	800191c <update_scene+0x62c>
			boss_shoot();
 8001918:	f7ff fc7e 	bl	8001218 <boss_shoot>

		for (i = 0; i < num_boss_shots; ++i)
 800191c:	2300      	movs	r3, #0
 800191e:	71fb      	strb	r3, [r7, #7]
 8001920:	e040      	b.n	80019a4 <update_scene+0x6b4>
 8001922:	bf00      	nop
 8001924:	20000220 	.word	0x20000220
 8001928:	20000168 	.word	0x20000168
 800192c:	20000658 	.word	0x20000658
 8001930:	2000067c 	.word	0x2000067c
 8001934:	20000004 	.word	0x20000004
 8001938:	51eb851f 	.word	0x51eb851f
		{
			if (boss_shots[i].active)
 800193c:	79fa      	ldrb	r2, [r7, #7]
 800193e:	4986      	ldr	r1, [pc, #536]	; (8001b58 <update_scene+0x868>)
 8001940:	4613      	mov	r3, r2
 8001942:	005b      	lsls	r3, r3, #1
 8001944:	4413      	add	r3, r2
 8001946:	009b      	lsls	r3, r3, #2
 8001948:	440b      	add	r3, r1
 800194a:	781b      	ldrb	r3, [r3, #0]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d011      	beq.n	8001974 <update_scene+0x684>
				--boss_shots[i].x;
 8001950:	79fa      	ldrb	r2, [r7, #7]
 8001952:	4981      	ldr	r1, [pc, #516]	; (8001b58 <update_scene+0x868>)
 8001954:	4613      	mov	r3, r2
 8001956:	005b      	lsls	r3, r3, #1
 8001958:	4413      	add	r3, r2
 800195a:	009b      	lsls	r3, r3, #2
 800195c:	440b      	add	r3, r1
 800195e:	3304      	adds	r3, #4
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	1e59      	subs	r1, r3, #1
 8001964:	487c      	ldr	r0, [pc, #496]	; (8001b58 <update_scene+0x868>)
 8001966:	4613      	mov	r3, r2
 8001968:	005b      	lsls	r3, r3, #1
 800196a:	4413      	add	r3, r2
 800196c:	009b      	lsls	r3, r3, #2
 800196e:	4403      	add	r3, r0
 8001970:	3304      	adds	r3, #4
 8001972:	6019      	str	r1, [r3, #0]
			if (boss_shots[i].x < -4)
 8001974:	79fa      	ldrb	r2, [r7, #7]
 8001976:	4978      	ldr	r1, [pc, #480]	; (8001b58 <update_scene+0x868>)
 8001978:	4613      	mov	r3, r2
 800197a:	005b      	lsls	r3, r3, #1
 800197c:	4413      	add	r3, r2
 800197e:	009b      	lsls	r3, r3, #2
 8001980:	440b      	add	r3, r1
 8001982:	3304      	adds	r3, #4
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f113 0f04 	cmn.w	r3, #4
 800198a:	da08      	bge.n	800199e <update_scene+0x6ae>
				boss_shots[i].active = false;
 800198c:	79fa      	ldrb	r2, [r7, #7]
 800198e:	4972      	ldr	r1, [pc, #456]	; (8001b58 <update_scene+0x868>)
 8001990:	4613      	mov	r3, r2
 8001992:	005b      	lsls	r3, r3, #1
 8001994:	4413      	add	r3, r2
 8001996:	009b      	lsls	r3, r3, #2
 8001998:	440b      	add	r3, r1
 800199a:	2200      	movs	r2, #0
 800199c:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < num_boss_shots; ++i)
 800199e:	79fb      	ldrb	r3, [r7, #7]
 80019a0:	3301      	adds	r3, #1
 80019a2:	71fb      	strb	r3, [r7, #7]
 80019a4:	79fb      	ldrb	r3, [r7, #7]
 80019a6:	2b04      	cmp	r3, #4
 80019a8:	d9c8      	bls.n	800193c <update_scene+0x64c>
		}

		for(i = 0; i < num_boss_shots; i++)
 80019aa:	2300      	movs	r3, #0
 80019ac:	71fb      	strb	r3, [r7, #7]
 80019ae:	e0cc      	b.n	8001b4a <update_scene+0x85a>
		{
			if(boss_shots[i].active)
 80019b0:	79fa      	ldrb	r2, [r7, #7]
 80019b2:	4969      	ldr	r1, [pc, #420]	; (8001b58 <update_scene+0x868>)
 80019b4:	4613      	mov	r3, r2
 80019b6:	005b      	lsls	r3, r3, #1
 80019b8:	4413      	add	r3, r2
 80019ba:	009b      	lsls	r3, r3, #2
 80019bc:	440b      	add	r3, r1
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	f000 80bf 	beq.w	8001b44 <update_scene+0x854>
			{
				if (colliding(boss_shots[i].x,boss_shots[i].y, player.x, player.y) 	||
 80019c6:	79fa      	ldrb	r2, [r7, #7]
 80019c8:	4963      	ldr	r1, [pc, #396]	; (8001b58 <update_scene+0x868>)
 80019ca:	4613      	mov	r3, r2
 80019cc:	005b      	lsls	r3, r3, #1
 80019ce:	4413      	add	r3, r2
 80019d0:	009b      	lsls	r3, r3, #2
 80019d2:	440b      	add	r3, r1
 80019d4:	3304      	adds	r3, #4
 80019d6:	6818      	ldr	r0, [r3, #0]
 80019d8:	79fa      	ldrb	r2, [r7, #7]
 80019da:	495f      	ldr	r1, [pc, #380]	; (8001b58 <update_scene+0x868>)
 80019dc:	4613      	mov	r3, r2
 80019de:	005b      	lsls	r3, r3, #1
 80019e0:	4413      	add	r3, r2
 80019e2:	009b      	lsls	r3, r3, #2
 80019e4:	440b      	add	r3, r1
 80019e6:	3308      	adds	r3, #8
 80019e8:	6819      	ldr	r1, [r3, #0]
 80019ea:	4b5c      	ldr	r3, [pc, #368]	; (8001b5c <update_scene+0x86c>)
 80019ec:	681a      	ldr	r2, [r3, #0]
 80019ee:	4b5b      	ldr	r3, [pc, #364]	; (8001b5c <update_scene+0x86c>)
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	f7ff fc55 	bl	80012a0 <colliding>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d154      	bne.n	8001aa6 <update_scene+0x7b6>
					colliding(boss_shots[i].x,boss_shots[i].y, player.x, player.y+5) 	||
 80019fc:	79fa      	ldrb	r2, [r7, #7]
 80019fe:	4956      	ldr	r1, [pc, #344]	; (8001b58 <update_scene+0x868>)
 8001a00:	4613      	mov	r3, r2
 8001a02:	005b      	lsls	r3, r3, #1
 8001a04:	4413      	add	r3, r2
 8001a06:	009b      	lsls	r3, r3, #2
 8001a08:	440b      	add	r3, r1
 8001a0a:	3304      	adds	r3, #4
 8001a0c:	6818      	ldr	r0, [r3, #0]
 8001a0e:	79fa      	ldrb	r2, [r7, #7]
 8001a10:	4951      	ldr	r1, [pc, #324]	; (8001b58 <update_scene+0x868>)
 8001a12:	4613      	mov	r3, r2
 8001a14:	005b      	lsls	r3, r3, #1
 8001a16:	4413      	add	r3, r2
 8001a18:	009b      	lsls	r3, r3, #2
 8001a1a:	440b      	add	r3, r1
 8001a1c:	3308      	adds	r3, #8
 8001a1e:	6819      	ldr	r1, [r3, #0]
 8001a20:	4b4e      	ldr	r3, [pc, #312]	; (8001b5c <update_scene+0x86c>)
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	4b4d      	ldr	r3, [pc, #308]	; (8001b5c <update_scene+0x86c>)
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	3305      	adds	r3, #5
 8001a2a:	f7ff fc39 	bl	80012a0 <colliding>
 8001a2e:	4603      	mov	r3, r0
				if (colliding(boss_shots[i].x,boss_shots[i].y, player.x, player.y) 	||
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d138      	bne.n	8001aa6 <update_scene+0x7b6>
					colliding(boss_shots[i].x,boss_shots[i].y, player.x+7, player.y)	||
 8001a34:	79fa      	ldrb	r2, [r7, #7]
 8001a36:	4948      	ldr	r1, [pc, #288]	; (8001b58 <update_scene+0x868>)
 8001a38:	4613      	mov	r3, r2
 8001a3a:	005b      	lsls	r3, r3, #1
 8001a3c:	4413      	add	r3, r2
 8001a3e:	009b      	lsls	r3, r3, #2
 8001a40:	440b      	add	r3, r1
 8001a42:	3304      	adds	r3, #4
 8001a44:	6818      	ldr	r0, [r3, #0]
 8001a46:	79fa      	ldrb	r2, [r7, #7]
 8001a48:	4943      	ldr	r1, [pc, #268]	; (8001b58 <update_scene+0x868>)
 8001a4a:	4613      	mov	r3, r2
 8001a4c:	005b      	lsls	r3, r3, #1
 8001a4e:	4413      	add	r3, r2
 8001a50:	009b      	lsls	r3, r3, #2
 8001a52:	440b      	add	r3, r1
 8001a54:	3308      	adds	r3, #8
 8001a56:	6819      	ldr	r1, [r3, #0]
 8001a58:	4b40      	ldr	r3, [pc, #256]	; (8001b5c <update_scene+0x86c>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	1dda      	adds	r2, r3, #7
 8001a5e:	4b3f      	ldr	r3, [pc, #252]	; (8001b5c <update_scene+0x86c>)
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	f7ff fc1d 	bl	80012a0 <colliding>
 8001a66:	4603      	mov	r3, r0
					colliding(boss_shots[i].x,boss_shots[i].y, player.x, player.y+5) 	||
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d11c      	bne.n	8001aa6 <update_scene+0x7b6>
					colliding(boss_shots[i].x,boss_shots[i].y, player.x+7, player.y+5))
 8001a6c:	79fa      	ldrb	r2, [r7, #7]
 8001a6e:	493a      	ldr	r1, [pc, #232]	; (8001b58 <update_scene+0x868>)
 8001a70:	4613      	mov	r3, r2
 8001a72:	005b      	lsls	r3, r3, #1
 8001a74:	4413      	add	r3, r2
 8001a76:	009b      	lsls	r3, r3, #2
 8001a78:	440b      	add	r3, r1
 8001a7a:	3304      	adds	r3, #4
 8001a7c:	6818      	ldr	r0, [r3, #0]
 8001a7e:	79fa      	ldrb	r2, [r7, #7]
 8001a80:	4935      	ldr	r1, [pc, #212]	; (8001b58 <update_scene+0x868>)
 8001a82:	4613      	mov	r3, r2
 8001a84:	005b      	lsls	r3, r3, #1
 8001a86:	4413      	add	r3, r2
 8001a88:	009b      	lsls	r3, r3, #2
 8001a8a:	440b      	add	r3, r1
 8001a8c:	3308      	adds	r3, #8
 8001a8e:	6819      	ldr	r1, [r3, #0]
 8001a90:	4b32      	ldr	r3, [pc, #200]	; (8001b5c <update_scene+0x86c>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	1dda      	adds	r2, r3, #7
 8001a96:	4b31      	ldr	r3, [pc, #196]	; (8001b5c <update_scene+0x86c>)
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	3305      	adds	r3, #5
 8001a9c:	f7ff fc00 	bl	80012a0 <colliding>
 8001aa0:	4603      	mov	r3, r0
					colliding(boss_shots[i].x,boss_shots[i].y, player.x+7, player.y)	||
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d04e      	beq.n	8001b44 <update_scene+0x854>
				{
					player.lives -= 1;;
 8001aa6:	4b2d      	ldr	r3, [pc, #180]	; (8001b5c <update_scene+0x86c>)
 8001aa8:	691b      	ldr	r3, [r3, #16]
 8001aaa:	3b01      	subs	r3, #1
 8001aac:	4a2b      	ldr	r2, [pc, #172]	; (8001b5c <update_scene+0x86c>)
 8001aae:	6113      	str	r3, [r2, #16]
					boss_shots[i].active = false;
 8001ab0:	79fa      	ldrb	r2, [r7, #7]
 8001ab2:	4929      	ldr	r1, [pc, #164]	; (8001b58 <update_scene+0x868>)
 8001ab4:	4613      	mov	r3, r2
 8001ab6:	005b      	lsls	r3, r3, #1
 8001ab8:	4413      	add	r3, r2
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	440b      	add	r3, r1
 8001abe:	2200      	movs	r2, #0
 8001ac0:	701a      	strb	r2, [r3, #0]
					GFX_DrowBitMap_P(boss_shots[i].x+2, boss_shots[i].y, explosion_map,10,10,1);
 8001ac2:	79fa      	ldrb	r2, [r7, #7]
 8001ac4:	4924      	ldr	r1, [pc, #144]	; (8001b58 <update_scene+0x868>)
 8001ac6:	4613      	mov	r3, r2
 8001ac8:	005b      	lsls	r3, r3, #1
 8001aca:	4413      	add	r3, r2
 8001acc:	009b      	lsls	r3, r3, #2
 8001ace:	440b      	add	r3, r1
 8001ad0:	3304      	adds	r3, #4
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	1c98      	adds	r0, r3, #2
 8001ad6:	79fa      	ldrb	r2, [r7, #7]
 8001ad8:	491f      	ldr	r1, [pc, #124]	; (8001b58 <update_scene+0x868>)
 8001ada:	4613      	mov	r3, r2
 8001adc:	005b      	lsls	r3, r3, #1
 8001ade:	4413      	add	r3, r2
 8001ae0:	009b      	lsls	r3, r3, #2
 8001ae2:	440b      	add	r3, r1
 8001ae4:	3308      	adds	r3, #8
 8001ae6:	6819      	ldr	r1, [r3, #0]
 8001ae8:	2301      	movs	r3, #1
 8001aea:	9301      	str	r3, [sp, #4]
 8001aec:	230a      	movs	r3, #10
 8001aee:	9300      	str	r3, [sp, #0]
 8001af0:	230a      	movs	r3, #10
 8001af2:	4a1b      	ldr	r2, [pc, #108]	; (8001b60 <update_scene+0x870>)
 8001af4:	f7fe fce8 	bl	80004c8 <GFX_DrowBitMap_P>
					GFX_DrowBitMap_P(player.x + 8, player.y-2, player_shield_map,10 ,16,1);
 8001af8:	4b18      	ldr	r3, [pc, #96]	; (8001b5c <update_scene+0x86c>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f103 0008 	add.w	r0, r3, #8
 8001b00:	4b16      	ldr	r3, [pc, #88]	; (8001b5c <update_scene+0x86c>)
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	1e99      	subs	r1, r3, #2
 8001b06:	2301      	movs	r3, #1
 8001b08:	9301      	str	r3, [sp, #4]
 8001b0a:	2310      	movs	r3, #16
 8001b0c:	9300      	str	r3, [sp, #0]
 8001b0e:	230a      	movs	r3, #10
 8001b10:	4a14      	ldr	r2, [pc, #80]	; (8001b64 <update_scene+0x874>)
 8001b12:	f7fe fcd9 	bl	80004c8 <GFX_DrowBitMap_P>
					GFX_DrowBitMap_P(player.x, player.y, player_map, 11, 11, 1);
 8001b16:	4b11      	ldr	r3, [pc, #68]	; (8001b5c <update_scene+0x86c>)
 8001b18:	6818      	ldr	r0, [r3, #0]
 8001b1a:	4b10      	ldr	r3, [pc, #64]	; (8001b5c <update_scene+0x86c>)
 8001b1c:	6859      	ldr	r1, [r3, #4]
 8001b1e:	2301      	movs	r3, #1
 8001b20:	9301      	str	r3, [sp, #4]
 8001b22:	230b      	movs	r3, #11
 8001b24:	9300      	str	r3, [sp, #0]
 8001b26:	230b      	movs	r3, #11
 8001b28:	4a0f      	ldr	r2, [pc, #60]	; (8001b68 <update_scene+0x878>)
 8001b2a:	f7fe fccd 	bl	80004c8 <GFX_DrowBitMap_P>

					ssd1327_display();
 8001b2e:	f000 fe1f 	bl	8002770 <ssd1327_display>
					if (player.lives <= 0)
 8001b32:	4b0a      	ldr	r3, [pc, #40]	; (8001b5c <update_scene+0x86c>)
 8001b34:	691b      	ldr	r3, [r3, #16]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	dc04      	bgt.n	8001b44 <update_scene+0x854>
					{
						play_dead_anim();
 8001b3a:	f7ff fb09 	bl	8001150 <play_dead_anim>
						state = st_dead;
 8001b3e:	4b0b      	ldr	r3, [pc, #44]	; (8001b6c <update_scene+0x87c>)
 8001b40:	2202      	movs	r2, #2
 8001b42:	701a      	strb	r2, [r3, #0]
		for(i = 0; i < num_boss_shots; i++)
 8001b44:	79fb      	ldrb	r3, [r7, #7]
 8001b46:	3301      	adds	r3, #1
 8001b48:	71fb      	strb	r3, [r7, #7]
 8001b4a:	79fb      	ldrb	r3, [r7, #7]
 8001b4c:	2b04      	cmp	r3, #4
 8001b4e:	f67f af2f 	bls.w	80019b0 <update_scene+0x6c0>
				}
			}
		}

		// Strza�y gracza do bosa
		for(i = 0; i < num_shots; i++)
 8001b52:	2300      	movs	r3, #0
 8001b54:	71fb      	strb	r3, [r7, #7]
 8001b56:	e0a3      	b.n	8001ca0 <update_scene+0x9b0>
 8001b58:	200001e4 	.word	0x200001e4
 8001b5c:	20000168 	.word	0x20000168
 8001b60:	08007628 	.word	0x08007628
 8001b64:	080075f4 	.word	0x080075f4
 8001b68:	0800742c 	.word	0x0800742c
 8001b6c:	20000674 	.word	0x20000674
		{
			if(shots[i].active)
 8001b70:	79fa      	ldrb	r2, [r7, #7]
 8001b72:	4972      	ldr	r1, [pc, #456]	; (8001d3c <update_scene+0xa4c>)
 8001b74:	4613      	mov	r3, r2
 8001b76:	005b      	lsls	r3, r3, #1
 8001b78:	4413      	add	r3, r2
 8001b7a:	009b      	lsls	r3, r3, #2
 8001b7c:	440b      	add	r3, r1
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	f000 808a 	beq.w	8001c9a <update_scene+0x9aa>
			{
				if(colliding(boss.x, boss.y, shots[i].x, shots[i].y) ||
 8001b86:	4b6e      	ldr	r3, [pc, #440]	; (8001d40 <update_scene+0xa50>)
 8001b88:	6858      	ldr	r0, [r3, #4]
 8001b8a:	4b6d      	ldr	r3, [pc, #436]	; (8001d40 <update_scene+0xa50>)
 8001b8c:	6899      	ldr	r1, [r3, #8]
 8001b8e:	79fa      	ldrb	r2, [r7, #7]
 8001b90:	4c6a      	ldr	r4, [pc, #424]	; (8001d3c <update_scene+0xa4c>)
 8001b92:	4613      	mov	r3, r2
 8001b94:	005b      	lsls	r3, r3, #1
 8001b96:	4413      	add	r3, r2
 8001b98:	009b      	lsls	r3, r3, #2
 8001b9a:	4423      	add	r3, r4
 8001b9c:	3304      	adds	r3, #4
 8001b9e:	681c      	ldr	r4, [r3, #0]
 8001ba0:	79fa      	ldrb	r2, [r7, #7]
 8001ba2:	4d66      	ldr	r5, [pc, #408]	; (8001d3c <update_scene+0xa4c>)
 8001ba4:	4613      	mov	r3, r2
 8001ba6:	005b      	lsls	r3, r3, #1
 8001ba8:	4413      	add	r3, r2
 8001baa:	009b      	lsls	r3, r3, #2
 8001bac:	442b      	add	r3, r5
 8001bae:	3308      	adds	r3, #8
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4622      	mov	r2, r4
 8001bb4:	f7ff fb74 	bl	80012a0 <colliding>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d13a      	bne.n	8001c34 <update_scene+0x944>
				   colliding(boss.x, boss.y+6, shots[i].x, shots[i].y) ||
 8001bbe:	4b60      	ldr	r3, [pc, #384]	; (8001d40 <update_scene+0xa50>)
 8001bc0:	6858      	ldr	r0, [r3, #4]
 8001bc2:	4b5f      	ldr	r3, [pc, #380]	; (8001d40 <update_scene+0xa50>)
 8001bc4:	689b      	ldr	r3, [r3, #8]
 8001bc6:	1d99      	adds	r1, r3, #6
 8001bc8:	79fa      	ldrb	r2, [r7, #7]
 8001bca:	4c5c      	ldr	r4, [pc, #368]	; (8001d3c <update_scene+0xa4c>)
 8001bcc:	4613      	mov	r3, r2
 8001bce:	005b      	lsls	r3, r3, #1
 8001bd0:	4413      	add	r3, r2
 8001bd2:	009b      	lsls	r3, r3, #2
 8001bd4:	4423      	add	r3, r4
 8001bd6:	3304      	adds	r3, #4
 8001bd8:	681c      	ldr	r4, [r3, #0]
 8001bda:	79fa      	ldrb	r2, [r7, #7]
 8001bdc:	4d57      	ldr	r5, [pc, #348]	; (8001d3c <update_scene+0xa4c>)
 8001bde:	4613      	mov	r3, r2
 8001be0:	005b      	lsls	r3, r3, #1
 8001be2:	4413      	add	r3, r2
 8001be4:	009b      	lsls	r3, r3, #2
 8001be6:	442b      	add	r3, r5
 8001be8:	3308      	adds	r3, #8
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4622      	mov	r2, r4
 8001bee:	f7ff fb57 	bl	80012a0 <colliding>
 8001bf2:	4603      	mov	r3, r0
				if(colliding(boss.x, boss.y, shots[i].x, shots[i].y) ||
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d11d      	bne.n	8001c34 <update_scene+0x944>
				   colliding(boss.x, boss.y+12, shots[i].x, shots[i].y))
 8001bf8:	4b51      	ldr	r3, [pc, #324]	; (8001d40 <update_scene+0xa50>)
 8001bfa:	6858      	ldr	r0, [r3, #4]
 8001bfc:	4b50      	ldr	r3, [pc, #320]	; (8001d40 <update_scene+0xa50>)
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	f103 010c 	add.w	r1, r3, #12
 8001c04:	79fa      	ldrb	r2, [r7, #7]
 8001c06:	4c4d      	ldr	r4, [pc, #308]	; (8001d3c <update_scene+0xa4c>)
 8001c08:	4613      	mov	r3, r2
 8001c0a:	005b      	lsls	r3, r3, #1
 8001c0c:	4413      	add	r3, r2
 8001c0e:	009b      	lsls	r3, r3, #2
 8001c10:	4423      	add	r3, r4
 8001c12:	3304      	adds	r3, #4
 8001c14:	681c      	ldr	r4, [r3, #0]
 8001c16:	79fa      	ldrb	r2, [r7, #7]
 8001c18:	4d48      	ldr	r5, [pc, #288]	; (8001d3c <update_scene+0xa4c>)
 8001c1a:	4613      	mov	r3, r2
 8001c1c:	005b      	lsls	r3, r3, #1
 8001c1e:	4413      	add	r3, r2
 8001c20:	009b      	lsls	r3, r3, #2
 8001c22:	442b      	add	r3, r5
 8001c24:	3308      	adds	r3, #8
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4622      	mov	r2, r4
 8001c2a:	f7ff fb39 	bl	80012a0 <colliding>
 8001c2e:	4603      	mov	r3, r0
				   colliding(boss.x, boss.y+6, shots[i].x, shots[i].y) ||
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d032      	beq.n	8001c9a <update_scene+0x9aa>
				{
					boss.lives -= 1;
 8001c34:	4b42      	ldr	r3, [pc, #264]	; (8001d40 <update_scene+0xa50>)
 8001c36:	695b      	ldr	r3, [r3, #20]
 8001c38:	3b01      	subs	r3, #1
 8001c3a:	4a41      	ldr	r2, [pc, #260]	; (8001d40 <update_scene+0xa50>)
 8001c3c:	6153      	str	r3, [r2, #20]
					shots[i].active = false;
 8001c3e:	79fa      	ldrb	r2, [r7, #7]
 8001c40:	493e      	ldr	r1, [pc, #248]	; (8001d3c <update_scene+0xa4c>)
 8001c42:	4613      	mov	r3, r2
 8001c44:	005b      	lsls	r3, r3, #1
 8001c46:	4413      	add	r3, r2
 8001c48:	009b      	lsls	r3, r3, #2
 8001c4a:	440b      	add	r3, r1
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	701a      	strb	r2, [r3, #0]
					GFX_DrowBitMap_P(shots[i].x, shots[i].y, explosion_map, 10,10,1);
 8001c50:	79fa      	ldrb	r2, [r7, #7]
 8001c52:	493a      	ldr	r1, [pc, #232]	; (8001d3c <update_scene+0xa4c>)
 8001c54:	4613      	mov	r3, r2
 8001c56:	005b      	lsls	r3, r3, #1
 8001c58:	4413      	add	r3, r2
 8001c5a:	009b      	lsls	r3, r3, #2
 8001c5c:	440b      	add	r3, r1
 8001c5e:	3304      	adds	r3, #4
 8001c60:	6818      	ldr	r0, [r3, #0]
 8001c62:	79fa      	ldrb	r2, [r7, #7]
 8001c64:	4935      	ldr	r1, [pc, #212]	; (8001d3c <update_scene+0xa4c>)
 8001c66:	4613      	mov	r3, r2
 8001c68:	005b      	lsls	r3, r3, #1
 8001c6a:	4413      	add	r3, r2
 8001c6c:	009b      	lsls	r3, r3, #2
 8001c6e:	440b      	add	r3, r1
 8001c70:	3308      	adds	r3, #8
 8001c72:	6819      	ldr	r1, [r3, #0]
 8001c74:	2301      	movs	r3, #1
 8001c76:	9301      	str	r3, [sp, #4]
 8001c78:	230a      	movs	r3, #10
 8001c7a:	9300      	str	r3, [sp, #0]
 8001c7c:	230a      	movs	r3, #10
 8001c7e:	4a31      	ldr	r2, [pc, #196]	; (8001d44 <update_scene+0xa54>)
 8001c80:	f7fe fc22 	bl	80004c8 <GFX_DrowBitMap_P>

					if(boss.lives <= 0)
 8001c84:	4b2e      	ldr	r3, [pc, #184]	; (8001d40 <update_scene+0xa50>)
 8001c86:	695b      	ldr	r3, [r3, #20]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	dc06      	bgt.n	8001c9a <update_scene+0x9aa>
					{
						boss.active = false;
 8001c8c:	4b2c      	ldr	r3, [pc, #176]	; (8001d40 <update_scene+0xa50>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	701a      	strb	r2, [r3, #0]
						//boss.level += 1;
						boss.lives = 0;
 8001c92:	4b2b      	ldr	r3, [pc, #172]	; (8001d40 <update_scene+0xa50>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	615a      	str	r2, [r3, #20]
						break;
 8001c98:	e006      	b.n	8001ca8 <update_scene+0x9b8>
		for(i = 0; i < num_shots; i++)
 8001c9a:	79fb      	ldrb	r3, [r7, #7]
 8001c9c:	3301      	adds	r3, #1
 8001c9e:	71fb      	strb	r3, [r7, #7]
 8001ca0:	79fb      	ldrb	r3, [r7, #7]
 8001ca2:	2b07      	cmp	r3, #7
 8001ca4:	f67f af64 	bls.w	8001b70 <update_scene+0x880>
				}
			}
		}
	}
	// zamalowanie i dezaktywacja strza��w pozosta�ych po bosie
	if(!boss.active)
 8001ca8:	4b25      	ldr	r3, [pc, #148]	; (8001d40 <update_scene+0xa50>)
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	f083 0301 	eor.w	r3, r3, #1
 8001cb0:	b2db      	uxtb	r3, r3
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d035      	beq.n	8001d22 <update_scene+0xa32>
	{
		for(i = 0; i < num_boss_shots; i++)
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	71fb      	strb	r3, [r7, #7]
 8001cba:	e02f      	b.n	8001d1c <update_scene+0xa2c>
		{
			if(boss_shots[i].active)
 8001cbc:	79fa      	ldrb	r2, [r7, #7]
 8001cbe:	4922      	ldr	r1, [pc, #136]	; (8001d48 <update_scene+0xa58>)
 8001cc0:	4613      	mov	r3, r2
 8001cc2:	005b      	lsls	r3, r3, #1
 8001cc4:	4413      	add	r3, r2
 8001cc6:	009b      	lsls	r3, r3, #2
 8001cc8:	440b      	add	r3, r1
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d022      	beq.n	8001d16 <update_scene+0xa26>
			{
				boss_shots[i].active = false;
 8001cd0:	79fa      	ldrb	r2, [r7, #7]
 8001cd2:	491d      	ldr	r1, [pc, #116]	; (8001d48 <update_scene+0xa58>)
 8001cd4:	4613      	mov	r3, r2
 8001cd6:	005b      	lsls	r3, r3, #1
 8001cd8:	4413      	add	r3, r2
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	440b      	add	r3, r1
 8001cde:	2200      	movs	r2, #0
 8001ce0:	701a      	strb	r2, [r3, #0]
				GFX_DrowBitMap_P(boss_shots[i].x, boss_shots[i].y, player_shot_map,4,1,0);
 8001ce2:	79fa      	ldrb	r2, [r7, #7]
 8001ce4:	4918      	ldr	r1, [pc, #96]	; (8001d48 <update_scene+0xa58>)
 8001ce6:	4613      	mov	r3, r2
 8001ce8:	005b      	lsls	r3, r3, #1
 8001cea:	4413      	add	r3, r2
 8001cec:	009b      	lsls	r3, r3, #2
 8001cee:	440b      	add	r3, r1
 8001cf0:	3304      	adds	r3, #4
 8001cf2:	6818      	ldr	r0, [r3, #0]
 8001cf4:	79fa      	ldrb	r2, [r7, #7]
 8001cf6:	4914      	ldr	r1, [pc, #80]	; (8001d48 <update_scene+0xa58>)
 8001cf8:	4613      	mov	r3, r2
 8001cfa:	005b      	lsls	r3, r3, #1
 8001cfc:	4413      	add	r3, r2
 8001cfe:	009b      	lsls	r3, r3, #2
 8001d00:	440b      	add	r3, r1
 8001d02:	3308      	adds	r3, #8
 8001d04:	6819      	ldr	r1, [r3, #0]
 8001d06:	2300      	movs	r3, #0
 8001d08:	9301      	str	r3, [sp, #4]
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	9300      	str	r3, [sp, #0]
 8001d0e:	2304      	movs	r3, #4
 8001d10:	4a0e      	ldr	r2, [pc, #56]	; (8001d4c <update_scene+0xa5c>)
 8001d12:	f7fe fbd9 	bl	80004c8 <GFX_DrowBitMap_P>
		for(i = 0; i < num_boss_shots; i++)
 8001d16:	79fb      	ldrb	r3, [r7, #7]
 8001d18:	3301      	adds	r3, #1
 8001d1a:	71fb      	strb	r3, [r7, #7]
 8001d1c:	79fb      	ldrb	r3, [r7, #7]
 8001d1e:	2b04      	cmp	r3, #4
 8001d20:	d9cc      	bls.n	8001cbc <update_scene+0x9cc>
			}
		}
	}
	//-------------------------------------------

	if (button_pressed())
 8001d22:	f000 fc3d 	bl	80025a0 <button_pressed>
 8001d26:	4603      	mov	r3, r0
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d001      	beq.n	8001d30 <update_scene+0xa40>
		shoot();
 8001d2c:	f7ff fa32 	bl	8001194 <shoot>

	// Check for enemy/shot collisions.
	for (i = 0; i < num_shots; ++i)
 8001d30:	2300      	movs	r3, #0
 8001d32:	71fb      	strb	r3, [r7, #7]
 8001d34:	e084      	b.n	8001e40 <update_scene+0xb50>
	{
		for (j = 0; j < num_enemies; ++j)
 8001d36:	2300      	movs	r3, #0
 8001d38:	71bb      	strb	r3, [r7, #6]
 8001d3a:	e07b      	b.n	8001e34 <update_scene+0xb44>
 8001d3c:	20000184 	.word	0x20000184
 8001d40:	20000658 	.word	0x20000658
 8001d44:	08007628 	.word	0x08007628
 8001d48:	200001e4 	.word	0x200001e4
 8001d4c:	08007428 	.word	0x08007428
		{
			if (shots[i].active && enemies[j].active)
 8001d50:	79fa      	ldrb	r2, [r7, #7]
 8001d52:	494d      	ldr	r1, [pc, #308]	; (8001e88 <update_scene+0xb98>)
 8001d54:	4613      	mov	r3, r2
 8001d56:	005b      	lsls	r3, r3, #1
 8001d58:	4413      	add	r3, r2
 8001d5a:	009b      	lsls	r3, r3, #2
 8001d5c:	440b      	add	r3, r1
 8001d5e:	781b      	ldrb	r3, [r3, #0]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d064      	beq.n	8001e2e <update_scene+0xb3e>
 8001d64:	79ba      	ldrb	r2, [r7, #6]
 8001d66:	4949      	ldr	r1, [pc, #292]	; (8001e8c <update_scene+0xb9c>)
 8001d68:	4613      	mov	r3, r2
 8001d6a:	00db      	lsls	r3, r3, #3
 8001d6c:	1a9b      	subs	r3, r3, r2
 8001d6e:	009b      	lsls	r3, r3, #2
 8001d70:	440b      	add	r3, r1
 8001d72:	781b      	ldrb	r3, [r3, #0]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d05a      	beq.n	8001e2e <update_scene+0xb3e>
			{
				if (colliding(enemies[j].x, enemies[j].y, shots[i].x, shots[i].y))
 8001d78:	79ba      	ldrb	r2, [r7, #6]
 8001d7a:	4944      	ldr	r1, [pc, #272]	; (8001e8c <update_scene+0xb9c>)
 8001d7c:	4613      	mov	r3, r2
 8001d7e:	00db      	lsls	r3, r3, #3
 8001d80:	1a9b      	subs	r3, r3, r2
 8001d82:	009b      	lsls	r3, r3, #2
 8001d84:	440b      	add	r3, r1
 8001d86:	3304      	adds	r3, #4
 8001d88:	6818      	ldr	r0, [r3, #0]
 8001d8a:	79ba      	ldrb	r2, [r7, #6]
 8001d8c:	493f      	ldr	r1, [pc, #252]	; (8001e8c <update_scene+0xb9c>)
 8001d8e:	4613      	mov	r3, r2
 8001d90:	00db      	lsls	r3, r3, #3
 8001d92:	1a9b      	subs	r3, r3, r2
 8001d94:	009b      	lsls	r3, r3, #2
 8001d96:	440b      	add	r3, r1
 8001d98:	3308      	adds	r3, #8
 8001d9a:	6819      	ldr	r1, [r3, #0]
 8001d9c:	79fa      	ldrb	r2, [r7, #7]
 8001d9e:	4c3a      	ldr	r4, [pc, #232]	; (8001e88 <update_scene+0xb98>)
 8001da0:	4613      	mov	r3, r2
 8001da2:	005b      	lsls	r3, r3, #1
 8001da4:	4413      	add	r3, r2
 8001da6:	009b      	lsls	r3, r3, #2
 8001da8:	4423      	add	r3, r4
 8001daa:	3304      	adds	r3, #4
 8001dac:	681c      	ldr	r4, [r3, #0]
 8001dae:	79fa      	ldrb	r2, [r7, #7]
 8001db0:	4d35      	ldr	r5, [pc, #212]	; (8001e88 <update_scene+0xb98>)
 8001db2:	4613      	mov	r3, r2
 8001db4:	005b      	lsls	r3, r3, #1
 8001db6:	4413      	add	r3, r2
 8001db8:	009b      	lsls	r3, r3, #2
 8001dba:	442b      	add	r3, r5
 8001dbc:	3308      	adds	r3, #8
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4622      	mov	r2, r4
 8001dc2:	f7ff fa6d 	bl	80012a0 <colliding>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d030      	beq.n	8001e2e <update_scene+0xb3e>
				{
					enemies[j].active = false;
 8001dcc:	79ba      	ldrb	r2, [r7, #6]
 8001dce:	492f      	ldr	r1, [pc, #188]	; (8001e8c <update_scene+0xb9c>)
 8001dd0:	4613      	mov	r3, r2
 8001dd2:	00db      	lsls	r3, r3, #3
 8001dd4:	1a9b      	subs	r3, r3, r2
 8001dd6:	009b      	lsls	r3, r3, #2
 8001dd8:	440b      	add	r3, r1
 8001dda:	2200      	movs	r2, #0
 8001ddc:	701a      	strb	r2, [r3, #0]
					shots[i].active = false;
 8001dde:	79fa      	ldrb	r2, [r7, #7]
 8001de0:	4929      	ldr	r1, [pc, #164]	; (8001e88 <update_scene+0xb98>)
 8001de2:	4613      	mov	r3, r2
 8001de4:	005b      	lsls	r3, r3, #1
 8001de6:	4413      	add	r3, r2
 8001de8:	009b      	lsls	r3, r3, #2
 8001dea:	440b      	add	r3, r1
 8001dec:	2200      	movs	r2, #0
 8001dee:	701a      	strb	r2, [r3, #0]
					player.score += 1;
 8001df0:	4b27      	ldr	r3, [pc, #156]	; (8001e90 <update_scene+0xba0>)
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	3301      	adds	r3, #1
 8001df6:	4a26      	ldr	r2, [pc, #152]	; (8001e90 <update_scene+0xba0>)
 8001df8:	6093      	str	r3, [r2, #8]
					GFX_DrowBitMap_P(enemies[j].x, enemies[j].y, explosion_map,10,10,1);
 8001dfa:	79ba      	ldrb	r2, [r7, #6]
 8001dfc:	4923      	ldr	r1, [pc, #140]	; (8001e8c <update_scene+0xb9c>)
 8001dfe:	4613      	mov	r3, r2
 8001e00:	00db      	lsls	r3, r3, #3
 8001e02:	1a9b      	subs	r3, r3, r2
 8001e04:	009b      	lsls	r3, r3, #2
 8001e06:	440b      	add	r3, r1
 8001e08:	3304      	adds	r3, #4
 8001e0a:	6818      	ldr	r0, [r3, #0]
 8001e0c:	79ba      	ldrb	r2, [r7, #6]
 8001e0e:	491f      	ldr	r1, [pc, #124]	; (8001e8c <update_scene+0xb9c>)
 8001e10:	4613      	mov	r3, r2
 8001e12:	00db      	lsls	r3, r3, #3
 8001e14:	1a9b      	subs	r3, r3, r2
 8001e16:	009b      	lsls	r3, r3, #2
 8001e18:	440b      	add	r3, r1
 8001e1a:	3308      	adds	r3, #8
 8001e1c:	6819      	ldr	r1, [r3, #0]
 8001e1e:	2301      	movs	r3, #1
 8001e20:	9301      	str	r3, [sp, #4]
 8001e22:	230a      	movs	r3, #10
 8001e24:	9300      	str	r3, [sp, #0]
 8001e26:	230a      	movs	r3, #10
 8001e28:	4a1a      	ldr	r2, [pc, #104]	; (8001e94 <update_scene+0xba4>)
 8001e2a:	f7fe fb4d 	bl	80004c8 <GFX_DrowBitMap_P>
		for (j = 0; j < num_enemies; ++j)
 8001e2e:	79bb      	ldrb	r3, [r7, #6]
 8001e30:	3301      	adds	r3, #1
 8001e32:	71bb      	strb	r3, [r7, #6]
 8001e34:	79bb      	ldrb	r3, [r7, #6]
 8001e36:	2b09      	cmp	r3, #9
 8001e38:	d98a      	bls.n	8001d50 <update_scene+0xa60>
	for (i = 0; i < num_shots; ++i)
 8001e3a:	79fb      	ldrb	r3, [r7, #7]
 8001e3c:	3301      	adds	r3, #1
 8001e3e:	71fb      	strb	r3, [r7, #7]
 8001e40:	79fb      	ldrb	r3, [r7, #7]
 8001e42:	2b07      	cmp	r3, #7
 8001e44:	f67f af77 	bls.w	8001d36 <update_scene+0xa46>
				}
			}
		}
	}
	if ((rand()%100) < (player.level * 2) && !(boss.active)) //czesto�c dodawnaia przeciwnik�w
 8001e48:	f004 f82c 	bl	8005ea4 <rand>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	4b12      	ldr	r3, [pc, #72]	; (8001e98 <update_scene+0xba8>)
 8001e50:	fb83 1302 	smull	r1, r3, r3, r2
 8001e54:	1159      	asrs	r1, r3, #5
 8001e56:	17d3      	asrs	r3, r2, #31
 8001e58:	1acb      	subs	r3, r1, r3
 8001e5a:	2164      	movs	r1, #100	; 0x64
 8001e5c:	fb01 f303 	mul.w	r3, r1, r3
 8001e60:	1ad3      	subs	r3, r2, r3
 8001e62:	4a0b      	ldr	r2, [pc, #44]	; (8001e90 <update_scene+0xba0>)
 8001e64:	6952      	ldr	r2, [r2, #20]
 8001e66:	0052      	lsls	r2, r2, #1
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	da08      	bge.n	8001e7e <update_scene+0xb8e>
 8001e6c:	4b0b      	ldr	r3, [pc, #44]	; (8001e9c <update_scene+0xbac>)
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	f083 0301 	eor.w	r3, r3, #1
 8001e74:	b2db      	uxtb	r3, r3
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d001      	beq.n	8001e7e <update_scene+0xb8e>
			add_enemy();
 8001e7a:	f000 fa91 	bl	80023a0 <add_enemy>
}
 8001e7e:	bf00      	nop
 8001e80:	3708      	adds	r7, #8
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bdb0      	pop	{r4, r5, r7, pc}
 8001e86:	bf00      	nop
 8001e88:	20000184 	.word	0x20000184
 8001e8c:	20000220 	.word	0x20000220
 8001e90:	20000168 	.word	0x20000168
 8001e94:	08007628 	.word	0x08007628
 8001e98:	51eb851f 	.word	0x51eb851f
 8001e9c:	20000658 	.word	0x20000658

08001ea0 <drow_game>:

void drow_game(void)
{
 8001ea0:	b590      	push	{r4, r7, lr}
 8001ea2:	b085      	sub	sp, #20
 8001ea4:	af02      	add	r7, sp, #8
	 * Rysowanie ca�ej grafiki podczas gry.
	 */
	uint8_t i;

	//rysownanie informacji o grze
	GFX_PutInt(5,0,player.score,1,1,0);
 8001ea6:	4b9f      	ldr	r3, [pc, #636]	; (8002124 <drow_game+0x284>)
 8001ea8:	689a      	ldr	r2, [r3, #8]
 8001eaa:	2300      	movs	r3, #0
 8001eac:	9301      	str	r3, [sp, #4]
 8001eae:	2301      	movs	r3, #1
 8001eb0:	9300      	str	r3, [sp, #0]
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	2100      	movs	r1, #0
 8001eb6:	2005      	movs	r0, #5
 8001eb8:	f7fe fc98 	bl	80007ec <GFX_PutInt>
	//GFX_PutInt(5,0,boss.level,1,1,0);
	GFX_DrowBitMap_P(102,0,lives_map,8,6,1);
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	9301      	str	r3, [sp, #4]
 8001ec0:	2306      	movs	r3, #6
 8001ec2:	9300      	str	r3, [sp, #0]
 8001ec4:	2308      	movs	r3, #8
 8001ec6:	4a98      	ldr	r2, [pc, #608]	; (8002128 <drow_game+0x288>)
 8001ec8:	2100      	movs	r1, #0
 8001eca:	2066      	movs	r0, #102	; 0x66
 8001ecc:	f7fe fafc 	bl	80004c8 <GFX_DrowBitMap_P>
	GFX_PutInt(122,0,player.lives,1,1,0);
 8001ed0:	4b94      	ldr	r3, [pc, #592]	; (8002124 <drow_game+0x284>)
 8001ed2:	691a      	ldr	r2, [r3, #16]
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	9301      	str	r3, [sp, #4]
 8001ed8:	2301      	movs	r3, #1
 8001eda:	9300      	str	r3, [sp, #0]
 8001edc:	2301      	movs	r3, #1
 8001ede:	2100      	movs	r1, #0
 8001ee0:	207a      	movs	r0, #122	; 0x7a
 8001ee2:	f7fe fc83 	bl	80007ec <GFX_PutInt>
	GFX_DrowBitMap_P(50,0,Level_map,20,7,1);
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	9301      	str	r3, [sp, #4]
 8001eea:	2307      	movs	r3, #7
 8001eec:	9300      	str	r3, [sp, #0]
 8001eee:	2314      	movs	r3, #20
 8001ef0:	4a8e      	ldr	r2, [pc, #568]	; (800212c <drow_game+0x28c>)
 8001ef2:	2100      	movs	r1, #0
 8001ef4:	2032      	movs	r0, #50	; 0x32
 8001ef6:	f7fe fae7 	bl	80004c8 <GFX_DrowBitMap_P>
	GFX_PutInt(80,0,player.level,1,1,0);
 8001efa:	4b8a      	ldr	r3, [pc, #552]	; (8002124 <drow_game+0x284>)
 8001efc:	695a      	ldr	r2, [r3, #20]
 8001efe:	2300      	movs	r3, #0
 8001f00:	9301      	str	r3, [sp, #4]
 8001f02:	2301      	movs	r3, #1
 8001f04:	9300      	str	r3, [sp, #0]
 8001f06:	2301      	movs	r3, #1
 8001f08:	2100      	movs	r1, #0
 8001f0a:	2050      	movs	r0, #80	; 0x50
 8001f0c:	f7fe fc6e 	bl	80007ec <GFX_PutInt>

	//rysowniae grafiki strza�u gracza
	for(i = 0; i < num_shots; i++)
 8001f10:	2300      	movs	r3, #0
 8001f12:	71fb      	strb	r3, [r7, #7]
 8001f14:	e026      	b.n	8001f64 <drow_game+0xc4>
	{
		if(shots[i].active)
 8001f16:	79fa      	ldrb	r2, [r7, #7]
 8001f18:	4985      	ldr	r1, [pc, #532]	; (8002130 <drow_game+0x290>)
 8001f1a:	4613      	mov	r3, r2
 8001f1c:	005b      	lsls	r3, r3, #1
 8001f1e:	4413      	add	r3, r2
 8001f20:	009b      	lsls	r3, r3, #2
 8001f22:	440b      	add	r3, r1
 8001f24:	781b      	ldrb	r3, [r3, #0]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d019      	beq.n	8001f5e <drow_game+0xbe>
		{
			GFX_DrowBitMap_P(shots[i].x, shots[i].y, player_shot_map,4,1,1);
 8001f2a:	79fa      	ldrb	r2, [r7, #7]
 8001f2c:	4980      	ldr	r1, [pc, #512]	; (8002130 <drow_game+0x290>)
 8001f2e:	4613      	mov	r3, r2
 8001f30:	005b      	lsls	r3, r3, #1
 8001f32:	4413      	add	r3, r2
 8001f34:	009b      	lsls	r3, r3, #2
 8001f36:	440b      	add	r3, r1
 8001f38:	3304      	adds	r3, #4
 8001f3a:	6818      	ldr	r0, [r3, #0]
 8001f3c:	79fa      	ldrb	r2, [r7, #7]
 8001f3e:	497c      	ldr	r1, [pc, #496]	; (8002130 <drow_game+0x290>)
 8001f40:	4613      	mov	r3, r2
 8001f42:	005b      	lsls	r3, r3, #1
 8001f44:	4413      	add	r3, r2
 8001f46:	009b      	lsls	r3, r3, #2
 8001f48:	440b      	add	r3, r1
 8001f4a:	3308      	adds	r3, #8
 8001f4c:	6819      	ldr	r1, [r3, #0]
 8001f4e:	2301      	movs	r3, #1
 8001f50:	9301      	str	r3, [sp, #4]
 8001f52:	2301      	movs	r3, #1
 8001f54:	9300      	str	r3, [sp, #0]
 8001f56:	2304      	movs	r3, #4
 8001f58:	4a76      	ldr	r2, [pc, #472]	; (8002134 <drow_game+0x294>)
 8001f5a:	f7fe fab5 	bl	80004c8 <GFX_DrowBitMap_P>
	for(i = 0; i < num_shots; i++)
 8001f5e:	79fb      	ldrb	r3, [r7, #7]
 8001f60:	3301      	adds	r3, #1
 8001f62:	71fb      	strb	r3, [r7, #7]
 8001f64:	79fb      	ldrb	r3, [r7, #7]
 8001f66:	2b07      	cmp	r3, #7
 8001f68:	d9d5      	bls.n	8001f16 <drow_game+0x76>
		}
	}

	//rysowniae grafiki strza�u bosa
	if(boss.active)
 8001f6a:	4b73      	ldr	r3, [pc, #460]	; (8002138 <drow_game+0x298>)
 8001f6c:	781b      	ldrb	r3, [r3, #0]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d02c      	beq.n	8001fcc <drow_game+0x12c>
	{
		for(i = 0; i < num_boss_shots; i++)
 8001f72:	2300      	movs	r3, #0
 8001f74:	71fb      	strb	r3, [r7, #7]
 8001f76:	e026      	b.n	8001fc6 <drow_game+0x126>
		{
			if(boss_shots[i].active)
 8001f78:	79fa      	ldrb	r2, [r7, #7]
 8001f7a:	4970      	ldr	r1, [pc, #448]	; (800213c <drow_game+0x29c>)
 8001f7c:	4613      	mov	r3, r2
 8001f7e:	005b      	lsls	r3, r3, #1
 8001f80:	4413      	add	r3, r2
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	440b      	add	r3, r1
 8001f86:	781b      	ldrb	r3, [r3, #0]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d019      	beq.n	8001fc0 <drow_game+0x120>
			{
				GFX_DrowBitMap_P(boss_shots[i].x, boss_shots[i].y, player_shot_map,4,1,1);
 8001f8c:	79fa      	ldrb	r2, [r7, #7]
 8001f8e:	496b      	ldr	r1, [pc, #428]	; (800213c <drow_game+0x29c>)
 8001f90:	4613      	mov	r3, r2
 8001f92:	005b      	lsls	r3, r3, #1
 8001f94:	4413      	add	r3, r2
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	440b      	add	r3, r1
 8001f9a:	3304      	adds	r3, #4
 8001f9c:	6818      	ldr	r0, [r3, #0]
 8001f9e:	79fa      	ldrb	r2, [r7, #7]
 8001fa0:	4966      	ldr	r1, [pc, #408]	; (800213c <drow_game+0x29c>)
 8001fa2:	4613      	mov	r3, r2
 8001fa4:	005b      	lsls	r3, r3, #1
 8001fa6:	4413      	add	r3, r2
 8001fa8:	009b      	lsls	r3, r3, #2
 8001faa:	440b      	add	r3, r1
 8001fac:	3308      	adds	r3, #8
 8001fae:	6819      	ldr	r1, [r3, #0]
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	9301      	str	r3, [sp, #4]
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	9300      	str	r3, [sp, #0]
 8001fb8:	2304      	movs	r3, #4
 8001fba:	4a5e      	ldr	r2, [pc, #376]	; (8002134 <drow_game+0x294>)
 8001fbc:	f7fe fa84 	bl	80004c8 <GFX_DrowBitMap_P>
		for(i = 0; i < num_boss_shots; i++)
 8001fc0:	79fb      	ldrb	r3, [r7, #7]
 8001fc2:	3301      	adds	r3, #1
 8001fc4:	71fb      	strb	r3, [r7, #7]
 8001fc6:	79fb      	ldrb	r3, [r7, #7]
 8001fc8:	2b04      	cmp	r3, #4
 8001fca:	d9d5      	bls.n	8001f78 <drow_game+0xd8>
			}
		}
	}
	//rysownaie grafiki przeciwnik�w
	for(i = 0; i < num_enemies; i++)
 8001fcc:	2300      	movs	r3, #0
 8001fce:	71fb      	strb	r3, [r7, #7]
 8001fd0:	e094      	b.n	80020fc <drow_game+0x25c>
	{
		if(enemies[i].active)
 8001fd2:	79fa      	ldrb	r2, [r7, #7]
 8001fd4:	495a      	ldr	r1, [pc, #360]	; (8002140 <drow_game+0x2a0>)
 8001fd6:	4613      	mov	r3, r2
 8001fd8:	00db      	lsls	r3, r3, #3
 8001fda:	1a9b      	subs	r3, r3, r2
 8001fdc:	009b      	lsls	r3, r3, #2
 8001fde:	440b      	add	r3, r1
 8001fe0:	781b      	ldrb	r3, [r3, #0]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	f000 8087 	beq.w	80020f6 <drow_game+0x256>
		{
			if(enemies[i].type == et_tracker)
 8001fe8:	79fa      	ldrb	r2, [r7, #7]
 8001fea:	4955      	ldr	r1, [pc, #340]	; (8002140 <drow_game+0x2a0>)
 8001fec:	4613      	mov	r3, r2
 8001fee:	00db      	lsls	r3, r3, #3
 8001ff0:	1a9b      	subs	r3, r3, r2
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	440b      	add	r3, r1
 8001ff6:	330c      	adds	r3, #12
 8001ff8:	781b      	ldrb	r3, [r3, #0]
 8001ffa:	2b01      	cmp	r3, #1
 8001ffc:	d121      	bne.n	8002042 <drow_game+0x1a2>
				GFX_DrowBitMap_P(enemies[i].x, enemies[i].y, enemies[i].bit_map,5,5,1);
 8001ffe:	79fa      	ldrb	r2, [r7, #7]
 8002000:	494f      	ldr	r1, [pc, #316]	; (8002140 <drow_game+0x2a0>)
 8002002:	4613      	mov	r3, r2
 8002004:	00db      	lsls	r3, r3, #3
 8002006:	1a9b      	subs	r3, r3, r2
 8002008:	009b      	lsls	r3, r3, #2
 800200a:	440b      	add	r3, r1
 800200c:	3304      	adds	r3, #4
 800200e:	6818      	ldr	r0, [r3, #0]
 8002010:	79fa      	ldrb	r2, [r7, #7]
 8002012:	494b      	ldr	r1, [pc, #300]	; (8002140 <drow_game+0x2a0>)
 8002014:	4613      	mov	r3, r2
 8002016:	00db      	lsls	r3, r3, #3
 8002018:	1a9b      	subs	r3, r3, r2
 800201a:	009b      	lsls	r3, r3, #2
 800201c:	440b      	add	r3, r1
 800201e:	3308      	adds	r3, #8
 8002020:	6819      	ldr	r1, [r3, #0]
 8002022:	79fa      	ldrb	r2, [r7, #7]
 8002024:	4c46      	ldr	r4, [pc, #280]	; (8002140 <drow_game+0x2a0>)
 8002026:	4613      	mov	r3, r2
 8002028:	00db      	lsls	r3, r3, #3
 800202a:	1a9b      	subs	r3, r3, r2
 800202c:	009b      	lsls	r3, r3, #2
 800202e:	4423      	add	r3, r4
 8002030:	3310      	adds	r3, #16
 8002032:	681a      	ldr	r2, [r3, #0]
 8002034:	2301      	movs	r3, #1
 8002036:	9301      	str	r3, [sp, #4]
 8002038:	2305      	movs	r3, #5
 800203a:	9300      	str	r3, [sp, #0]
 800203c:	2305      	movs	r3, #5
 800203e:	f7fe fa43 	bl	80004c8 <GFX_DrowBitMap_P>
			if(enemies[i].type == et_diver)
 8002042:	79fa      	ldrb	r2, [r7, #7]
 8002044:	493e      	ldr	r1, [pc, #248]	; (8002140 <drow_game+0x2a0>)
 8002046:	4613      	mov	r3, r2
 8002048:	00db      	lsls	r3, r3, #3
 800204a:	1a9b      	subs	r3, r3, r2
 800204c:	009b      	lsls	r3, r3, #2
 800204e:	440b      	add	r3, r1
 8002050:	330c      	adds	r3, #12
 8002052:	781b      	ldrb	r3, [r3, #0]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d121      	bne.n	800209c <drow_game+0x1fc>
				GFX_DrowBitMap_P(enemies[i].x, enemies[i].y, enemies[i].bit_map,3,7,1);
 8002058:	79fa      	ldrb	r2, [r7, #7]
 800205a:	4939      	ldr	r1, [pc, #228]	; (8002140 <drow_game+0x2a0>)
 800205c:	4613      	mov	r3, r2
 800205e:	00db      	lsls	r3, r3, #3
 8002060:	1a9b      	subs	r3, r3, r2
 8002062:	009b      	lsls	r3, r3, #2
 8002064:	440b      	add	r3, r1
 8002066:	3304      	adds	r3, #4
 8002068:	6818      	ldr	r0, [r3, #0]
 800206a:	79fa      	ldrb	r2, [r7, #7]
 800206c:	4934      	ldr	r1, [pc, #208]	; (8002140 <drow_game+0x2a0>)
 800206e:	4613      	mov	r3, r2
 8002070:	00db      	lsls	r3, r3, #3
 8002072:	1a9b      	subs	r3, r3, r2
 8002074:	009b      	lsls	r3, r3, #2
 8002076:	440b      	add	r3, r1
 8002078:	3308      	adds	r3, #8
 800207a:	6819      	ldr	r1, [r3, #0]
 800207c:	79fa      	ldrb	r2, [r7, #7]
 800207e:	4c30      	ldr	r4, [pc, #192]	; (8002140 <drow_game+0x2a0>)
 8002080:	4613      	mov	r3, r2
 8002082:	00db      	lsls	r3, r3, #3
 8002084:	1a9b      	subs	r3, r3, r2
 8002086:	009b      	lsls	r3, r3, #2
 8002088:	4423      	add	r3, r4
 800208a:	3310      	adds	r3, #16
 800208c:	681a      	ldr	r2, [r3, #0]
 800208e:	2301      	movs	r3, #1
 8002090:	9301      	str	r3, [sp, #4]
 8002092:	2307      	movs	r3, #7
 8002094:	9300      	str	r3, [sp, #0]
 8002096:	2303      	movs	r3, #3
 8002098:	f7fe fa16 	bl	80004c8 <GFX_DrowBitMap_P>
			if(enemies[i].type == et_bobber)
 800209c:	79fa      	ldrb	r2, [r7, #7]
 800209e:	4928      	ldr	r1, [pc, #160]	; (8002140 <drow_game+0x2a0>)
 80020a0:	4613      	mov	r3, r2
 80020a2:	00db      	lsls	r3, r3, #3
 80020a4:	1a9b      	subs	r3, r3, r2
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	440b      	add	r3, r1
 80020aa:	330c      	adds	r3, #12
 80020ac:	781b      	ldrb	r3, [r3, #0]
 80020ae:	2b02      	cmp	r3, #2
 80020b0:	d121      	bne.n	80020f6 <drow_game+0x256>
				GFX_DrowBitMap_P(enemies[i].x, enemies[i].y, enemies[i].bit_map,4,4,1);
 80020b2:	79fa      	ldrb	r2, [r7, #7]
 80020b4:	4922      	ldr	r1, [pc, #136]	; (8002140 <drow_game+0x2a0>)
 80020b6:	4613      	mov	r3, r2
 80020b8:	00db      	lsls	r3, r3, #3
 80020ba:	1a9b      	subs	r3, r3, r2
 80020bc:	009b      	lsls	r3, r3, #2
 80020be:	440b      	add	r3, r1
 80020c0:	3304      	adds	r3, #4
 80020c2:	6818      	ldr	r0, [r3, #0]
 80020c4:	79fa      	ldrb	r2, [r7, #7]
 80020c6:	491e      	ldr	r1, [pc, #120]	; (8002140 <drow_game+0x2a0>)
 80020c8:	4613      	mov	r3, r2
 80020ca:	00db      	lsls	r3, r3, #3
 80020cc:	1a9b      	subs	r3, r3, r2
 80020ce:	009b      	lsls	r3, r3, #2
 80020d0:	440b      	add	r3, r1
 80020d2:	3308      	adds	r3, #8
 80020d4:	6819      	ldr	r1, [r3, #0]
 80020d6:	79fa      	ldrb	r2, [r7, #7]
 80020d8:	4c19      	ldr	r4, [pc, #100]	; (8002140 <drow_game+0x2a0>)
 80020da:	4613      	mov	r3, r2
 80020dc:	00db      	lsls	r3, r3, #3
 80020de:	1a9b      	subs	r3, r3, r2
 80020e0:	009b      	lsls	r3, r3, #2
 80020e2:	4423      	add	r3, r4
 80020e4:	3310      	adds	r3, #16
 80020e6:	681a      	ldr	r2, [r3, #0]
 80020e8:	2301      	movs	r3, #1
 80020ea:	9301      	str	r3, [sp, #4]
 80020ec:	2304      	movs	r3, #4
 80020ee:	9300      	str	r3, [sp, #0]
 80020f0:	2304      	movs	r3, #4
 80020f2:	f7fe f9e9 	bl	80004c8 <GFX_DrowBitMap_P>
	for(i = 0; i < num_enemies; i++)
 80020f6:	79fb      	ldrb	r3, [r7, #7]
 80020f8:	3301      	adds	r3, #1
 80020fa:	71fb      	strb	r3, [r7, #7]
 80020fc:	79fb      	ldrb	r3, [r7, #7]
 80020fe:	2b09      	cmp	r3, #9
 8002100:	f67f af67 	bls.w	8001fd2 <drow_game+0x132>
		}
	}
	//rysowanie grafiki gracza
	GFX_DrowBitMap_P(player.x,player.y,player_map,11,11,1);
 8002104:	4b07      	ldr	r3, [pc, #28]	; (8002124 <drow_game+0x284>)
 8002106:	6818      	ldr	r0, [r3, #0]
 8002108:	4b06      	ldr	r3, [pc, #24]	; (8002124 <drow_game+0x284>)
 800210a:	6859      	ldr	r1, [r3, #4]
 800210c:	2301      	movs	r3, #1
 800210e:	9301      	str	r3, [sp, #4]
 8002110:	230b      	movs	r3, #11
 8002112:	9300      	str	r3, [sp, #0]
 8002114:	230b      	movs	r3, #11
 8002116:	4a0b      	ldr	r2, [pc, #44]	; (8002144 <drow_game+0x2a4>)
 8002118:	f7fe f9d6 	bl	80004c8 <GFX_DrowBitMap_P>

	//rysowanie t�a
	for(i = 0; i < num_backgrand; i++)
 800211c:	2300      	movs	r3, #0
 800211e:	71fb      	strb	r3, [r7, #7]
 8002120:	e035      	b.n	800218e <drow_game+0x2ee>
 8002122:	bf00      	nop
 8002124:	20000168 	.word	0x20000168
 8002128:	0800745c 	.word	0x0800745c
 800212c:	08007444 	.word	0x08007444
 8002130:	20000184 	.word	0x20000184
 8002134:	08007428 	.word	0x08007428
 8002138:	20000658 	.word	0x20000658
 800213c:	200001e4 	.word	0x200001e4
 8002140:	20000220 	.word	0x20000220
 8002144:	0800742c 	.word	0x0800742c
	{
		if(backgrand[i].active)
 8002148:	79fa      	ldrb	r2, [r7, #7]
 800214a:	4928      	ldr	r1, [pc, #160]	; (80021ec <drow_game+0x34c>)
 800214c:	4613      	mov	r3, r2
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	4413      	add	r3, r2
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	440b      	add	r3, r1
 8002156:	781b      	ldrb	r3, [r3, #0]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d015      	beq.n	8002188 <drow_game+0x2e8>
		{
			ssd1327_setPixel(backgrand[i].x, backgrand[i].y,1);
 800215c:	79fa      	ldrb	r2, [r7, #7]
 800215e:	4923      	ldr	r1, [pc, #140]	; (80021ec <drow_game+0x34c>)
 8002160:	4613      	mov	r3, r2
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	4413      	add	r3, r2
 8002166:	009b      	lsls	r3, r3, #2
 8002168:	440b      	add	r3, r1
 800216a:	3304      	adds	r3, #4
 800216c:	6818      	ldr	r0, [r3, #0]
 800216e:	79fa      	ldrb	r2, [r7, #7]
 8002170:	491e      	ldr	r1, [pc, #120]	; (80021ec <drow_game+0x34c>)
 8002172:	4613      	mov	r3, r2
 8002174:	009b      	lsls	r3, r3, #2
 8002176:	4413      	add	r3, r2
 8002178:	009b      	lsls	r3, r3, #2
 800217a:	440b      	add	r3, r1
 800217c:	3308      	adds	r3, #8
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	2201      	movs	r2, #1
 8002182:	4619      	mov	r1, r3
 8002184:	f000 fb38 	bl	80027f8 <ssd1327_setPixel>
	for(i = 0; i < num_backgrand; i++)
 8002188:	79fb      	ldrb	r3, [r7, #7]
 800218a:	3301      	adds	r3, #1
 800218c:	71fb      	strb	r3, [r7, #7]
 800218e:	79fb      	ldrb	r3, [r7, #7]
 8002190:	2b27      	cmp	r3, #39	; 0x27
 8002192:	d9d9      	bls.n	8002148 <drow_game+0x2a8>
		}
	}

	//rysowanie bos�w
	if(boss.active && player.game_progres == 30)
 8002194:	4b16      	ldr	r3, [pc, #88]	; (80021f0 <drow_game+0x350>)
 8002196:	781b      	ldrb	r3, [r3, #0]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d00f      	beq.n	80021bc <drow_game+0x31c>
 800219c:	4b15      	ldr	r3, [pc, #84]	; (80021f4 <drow_game+0x354>)
 800219e:	699b      	ldr	r3, [r3, #24]
 80021a0:	2b1e      	cmp	r3, #30
 80021a2:	d10b      	bne.n	80021bc <drow_game+0x31c>
		GFX_DrowBitMap_P(boss.x, boss.y, boss_map_1,10,18,1);
 80021a4:	4b12      	ldr	r3, [pc, #72]	; (80021f0 <drow_game+0x350>)
 80021a6:	6858      	ldr	r0, [r3, #4]
 80021a8:	4b11      	ldr	r3, [pc, #68]	; (80021f0 <drow_game+0x350>)
 80021aa:	6899      	ldr	r1, [r3, #8]
 80021ac:	2301      	movs	r3, #1
 80021ae:	9301      	str	r3, [sp, #4]
 80021b0:	2312      	movs	r3, #18
 80021b2:	9300      	str	r3, [sp, #0]
 80021b4:	230a      	movs	r3, #10
 80021b6:	4a10      	ldr	r2, [pc, #64]	; (80021f8 <drow_game+0x358>)
 80021b8:	f7fe f986 	bl	80004c8 <GFX_DrowBitMap_P>
	if(boss.active && player.game_progres == 60)
 80021bc:	4b0c      	ldr	r3, [pc, #48]	; (80021f0 <drow_game+0x350>)
 80021be:	781b      	ldrb	r3, [r3, #0]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d00f      	beq.n	80021e4 <drow_game+0x344>
 80021c4:	4b0b      	ldr	r3, [pc, #44]	; (80021f4 <drow_game+0x354>)
 80021c6:	699b      	ldr	r3, [r3, #24]
 80021c8:	2b3c      	cmp	r3, #60	; 0x3c
 80021ca:	d10b      	bne.n	80021e4 <drow_game+0x344>
		GFX_DrowBitMap_P(boss.x, boss.y, boss_map_2, 10, 18, 1);
 80021cc:	4b08      	ldr	r3, [pc, #32]	; (80021f0 <drow_game+0x350>)
 80021ce:	6858      	ldr	r0, [r3, #4]
 80021d0:	4b07      	ldr	r3, [pc, #28]	; (80021f0 <drow_game+0x350>)
 80021d2:	6899      	ldr	r1, [r3, #8]
 80021d4:	2301      	movs	r3, #1
 80021d6:	9301      	str	r3, [sp, #4]
 80021d8:	2312      	movs	r3, #18
 80021da:	9300      	str	r3, [sp, #0]
 80021dc:	230a      	movs	r3, #10
 80021de:	4a07      	ldr	r2, [pc, #28]	; (80021fc <drow_game+0x35c>)
 80021e0:	f7fe f972 	bl	80004c8 <GFX_DrowBitMap_P>

}
 80021e4:	bf00      	nop
 80021e6:	370c      	adds	r7, #12
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd90      	pop	{r4, r7, pc}
 80021ec:	20000338 	.word	0x20000338
 80021f0:	20000658 	.word	0x20000658
 80021f4:	20000168 	.word	0x20000168
 80021f8:	0800763c 	.word	0x0800763c
 80021fc:	08007660 	.word	0x08007660

08002200 <run_game>:

void run_game (void)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	af00      	add	r7, sp, #0
	/*
	 * G��wna p�tla gry, czyli wykonywanie po kolei odpowiednich sekwencji.
	 */
	drow_game();
 8002204:	f7ff fe4c 	bl	8001ea0 <drow_game>
	ssd1327_display();
 8002208:	f000 fab2 	bl	8002770 <ssd1327_display>
	ssd1327_CLR();
 800220c:	f000 fae8 	bl	80027e0 <ssd1327_CLR>

	update_lvl();
 8002210:	f7fe fe96 	bl	8000f40 <update_lvl>
	update_scene();
 8002214:	f7ff f86c 	bl	80012f0 <update_scene>
	update_backgrand();
 8002218:	f7fe fe00 	bl	8000e1c <update_backgrand>

}
 800221c:	bf00      	nop
 800221e:	bd80      	pop	{r7, pc}

08002220 <run_menu>:

void run_menu (void)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b082      	sub	sp, #8
 8002224:	af02      	add	r7, sp, #8
	/*
	 * Startowy ekran, podstawowe info. dla gracza na pocz�tku
	 */
	static int x = 0, dx = 1;
	x += dx;
 8002226:	4b22      	ldr	r3, [pc, #136]	; (80022b0 <run_menu+0x90>)
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	4b22      	ldr	r3, [pc, #136]	; (80022b4 <run_menu+0x94>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4413      	add	r3, r2
 8002230:	4a1f      	ldr	r2, [pc, #124]	; (80022b0 <run_menu+0x90>)
 8002232:	6013      	str	r3, [r2, #0]
	if (x < 1 || x > 65) dx = -dx;
 8002234:	4b1e      	ldr	r3, [pc, #120]	; (80022b0 <run_menu+0x90>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	2b00      	cmp	r3, #0
 800223a:	dd03      	ble.n	8002244 <run_menu+0x24>
 800223c:	4b1c      	ldr	r3, [pc, #112]	; (80022b0 <run_menu+0x90>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	2b41      	cmp	r3, #65	; 0x41
 8002242:	dd04      	ble.n	800224e <run_menu+0x2e>
 8002244:	4b1b      	ldr	r3, [pc, #108]	; (80022b4 <run_menu+0x94>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	425b      	negs	r3, r3
 800224a:	4a1a      	ldr	r2, [pc, #104]	; (80022b4 <run_menu+0x94>)
 800224c:	6013      	str	r3, [r2, #0]
	ssd1327_CLR();
 800224e:	f000 fac7 	bl	80027e0 <ssd1327_CLR>

	GFX_DrowBitMap_P(x,10,uGalaxy_map,54,16,1);
 8002252:	4b17      	ldr	r3, [pc, #92]	; (80022b0 <run_menu+0x90>)
 8002254:	6818      	ldr	r0, [r3, #0]
 8002256:	2301      	movs	r3, #1
 8002258:	9301      	str	r3, [sp, #4]
 800225a:	2310      	movs	r3, #16
 800225c:	9300      	str	r3, [sp, #0]
 800225e:	2336      	movs	r3, #54	; 0x36
 8002260:	4a15      	ldr	r2, [pc, #84]	; (80022b8 <run_menu+0x98>)
 8002262:	210a      	movs	r1, #10
 8002264:	f7fe f930 	bl	80004c8 <GFX_DrowBitMap_P>
	GFX_DrowRoundRect(15,34,93,20,8,1);;
 8002268:	2301      	movs	r3, #1
 800226a:	9301      	str	r3, [sp, #4]
 800226c:	2308      	movs	r3, #8
 800226e:	9300      	str	r3, [sp, #0]
 8002270:	2314      	movs	r3, #20
 8002272:	225d      	movs	r2, #93	; 0x5d
 8002274:	2122      	movs	r1, #34	; 0x22
 8002276:	200f      	movs	r0, #15
 8002278:	f7fe fad8 	bl	800082c <GFX_DrowRoundRect>
	GFX_DrowBitMap_P(26, 37, PressToStart_map, 66,10,1);
 800227c:	2301      	movs	r3, #1
 800227e:	9301      	str	r3, [sp, #4]
 8002280:	230a      	movs	r3, #10
 8002282:	9300      	str	r3, [sp, #0]
 8002284:	2342      	movs	r3, #66	; 0x42
 8002286:	4a0d      	ldr	r2, [pc, #52]	; (80022bc <run_menu+0x9c>)
 8002288:	2125      	movs	r1, #37	; 0x25
 800228a:	201a      	movs	r0, #26
 800228c:	f7fe f91c 	bl	80004c8 <GFX_DrowBitMap_P>

	if(button_pressed())
 8002290:	f000 f986 	bl	80025a0 <button_pressed>
 8002294:	4603      	mov	r3, r0
 8002296:	2b00      	cmp	r3, #0
 8002298:	d004      	beq.n	80022a4 <run_menu+0x84>
	{
		start_game();
 800229a:	f000 f813 	bl	80022c4 <start_game>
		state = st_playing;
 800229e:	4b08      	ldr	r3, [pc, #32]	; (80022c0 <run_menu+0xa0>)
 80022a0:	2201      	movs	r2, #1
 80022a2:	701a      	strb	r2, [r3, #0]
	}
	ssd1327_display();
 80022a4:	f000 fa64 	bl	8002770 <ssd1327_display>

}
 80022a8:	bf00      	nop
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop
 80022b0:	20000680 	.word	0x20000680
 80022b4:	20000008 	.word	0x20000008
 80022b8:	08007528 	.word	0x08007528
 80022bc:	08007598 	.word	0x08007598
 80022c0:	20000674 	.word	0x20000674

080022c4 <start_game>:

void start_game(void)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b083      	sub	sp, #12
 80022c8:	af00      	add	r7, sp, #0
	 * startowych dla gracza jak i ustawnie pierwszego bosa.
	 * Co wi�cej "resetuje" ona tablice pocisk�w i przeciwnik�w
	 */
	uint8_t i;
	//ustawiniania pocz�tkowe gracza
	player.lives = initial_lives;
 80022ca:	4b30      	ldr	r3, [pc, #192]	; (800238c <start_game+0xc8>)
 80022cc:	2214      	movs	r2, #20
 80022ce:	611a      	str	r2, [r3, #16]
	player.score = initial_score;
 80022d0:	4b2e      	ldr	r3, [pc, #184]	; (800238c <start_game+0xc8>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	609a      	str	r2, [r3, #8]
	player.x = initial_x;
 80022d6:	4b2d      	ldr	r3, [pc, #180]	; (800238c <start_game+0xc8>)
 80022d8:	2202      	movs	r2, #2
 80022da:	601a      	str	r2, [r3, #0]
	player.y = initial_y;
 80022dc:	4b2b      	ldr	r3, [pc, #172]	; (800238c <start_game+0xc8>)
 80022de:	2240      	movs	r2, #64	; 0x40
 80022e0:	605a      	str	r2, [r3, #4]
	player.level = initial_level;
 80022e2:	4b2a      	ldr	r3, [pc, #168]	; (800238c <start_game+0xc8>)
 80022e4:	2201      	movs	r2, #1
 80022e6:	615a      	str	r2, [r3, #20]
	player.game_progres = initial_game_progres;
 80022e8:	4b28      	ldr	r3, [pc, #160]	; (800238c <start_game+0xc8>)
 80022ea:	2200      	movs	r2, #0
 80022ec:	619a      	str	r2, [r3, #24]

	//aktywacja pocisk�w gracza(dezaktywacja, zerownaie)
	for (i = 0; i < num_shots; ++i)
 80022ee:	2300      	movs	r3, #0
 80022f0:	71fb      	strb	r3, [r7, #7]
 80022f2:	e00b      	b.n	800230c <start_game+0x48>
		shots[i].active = false;
 80022f4:	79fa      	ldrb	r2, [r7, #7]
 80022f6:	4926      	ldr	r1, [pc, #152]	; (8002390 <start_game+0xcc>)
 80022f8:	4613      	mov	r3, r2
 80022fa:	005b      	lsls	r3, r3, #1
 80022fc:	4413      	add	r3, r2
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	440b      	add	r3, r1
 8002302:	2200      	movs	r2, #0
 8002304:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < num_shots; ++i)
 8002306:	79fb      	ldrb	r3, [r7, #7]
 8002308:	3301      	adds	r3, #1
 800230a:	71fb      	strb	r3, [r7, #7]
 800230c:	79fb      	ldrb	r3, [r7, #7]
 800230e:	2b07      	cmp	r3, #7
 8002310:	d9f0      	bls.n	80022f4 <start_game+0x30>

	//aktywacja pocisk�w bosa
	for (i = 0; i < num_boss_shots; ++i)
 8002312:	2300      	movs	r3, #0
 8002314:	71fb      	strb	r3, [r7, #7]
 8002316:	e00b      	b.n	8002330 <start_game+0x6c>
		boss_shots[i].active = false;
 8002318:	79fa      	ldrb	r2, [r7, #7]
 800231a:	491e      	ldr	r1, [pc, #120]	; (8002394 <start_game+0xd0>)
 800231c:	4613      	mov	r3, r2
 800231e:	005b      	lsls	r3, r3, #1
 8002320:	4413      	add	r3, r2
 8002322:	009b      	lsls	r3, r3, #2
 8002324:	440b      	add	r3, r1
 8002326:	2200      	movs	r2, #0
 8002328:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < num_boss_shots; ++i)
 800232a:	79fb      	ldrb	r3, [r7, #7]
 800232c:	3301      	adds	r3, #1
 800232e:	71fb      	strb	r3, [r7, #7]
 8002330:	79fb      	ldrb	r3, [r7, #7]
 8002332:	2b04      	cmp	r3, #4
 8002334:	d9f0      	bls.n	8002318 <start_game+0x54>

	//aktywacja pzreciwnik�w
	for (i = 0; i < num_enemies; i++)
 8002336:	2300      	movs	r3, #0
 8002338:	71fb      	strb	r3, [r7, #7]
 800233a:	e00b      	b.n	8002354 <start_game+0x90>
		enemies[i].active = false;
 800233c:	79fa      	ldrb	r2, [r7, #7]
 800233e:	4916      	ldr	r1, [pc, #88]	; (8002398 <start_game+0xd4>)
 8002340:	4613      	mov	r3, r2
 8002342:	00db      	lsls	r3, r3, #3
 8002344:	1a9b      	subs	r3, r3, r2
 8002346:	009b      	lsls	r3, r3, #2
 8002348:	440b      	add	r3, r1
 800234a:	2200      	movs	r2, #0
 800234c:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < num_enemies; i++)
 800234e:	79fb      	ldrb	r3, [r7, #7]
 8002350:	3301      	adds	r3, #1
 8002352:	71fb      	strb	r3, [r7, #7]
 8002354:	79fb      	ldrb	r3, [r7, #7]
 8002356:	2b09      	cmp	r3, #9
 8002358:	d9f0      	bls.n	800233c <start_game+0x78>

	//aktwyacja boss�w
	boss.active = false;
 800235a:	4b10      	ldr	r3, [pc, #64]	; (800239c <start_game+0xd8>)
 800235c:	2200      	movs	r2, #0
 800235e:	701a      	strb	r2, [r3, #0]
	boss.lives = 6;
 8002360:	4b0e      	ldr	r3, [pc, #56]	; (800239c <start_game+0xd8>)
 8002362:	2206      	movs	r2, #6
 8002364:	615a      	str	r2, [r3, #20]
	boss.level = 1;
 8002366:	4b0d      	ldr	r3, [pc, #52]	; (800239c <start_game+0xd8>)
 8002368:	2201      	movs	r2, #1
 800236a:	619a      	str	r2, [r3, #24]
	boss.x = 140;
 800236c:	4b0b      	ldr	r3, [pc, #44]	; (800239c <start_game+0xd8>)
 800236e:	228c      	movs	r2, #140	; 0x8c
 8002370:	605a      	str	r2, [r3, #4]
	boss.y = 32;
 8002372:	4b0a      	ldr	r3, [pc, #40]	; (800239c <start_game+0xd8>)
 8002374:	2220      	movs	r2, #32
 8002376:	609a      	str	r2, [r3, #8]
	boss.update_delay = 3;
 8002378:	4b08      	ldr	r3, [pc, #32]	; (800239c <start_game+0xd8>)
 800237a:	2203      	movs	r2, #3
 800237c:	611a      	str	r2, [r3, #16]

}
 800237e:	bf00      	nop
 8002380:	370c      	adds	r7, #12
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr
 800238a:	bf00      	nop
 800238c:	20000168 	.word	0x20000168
 8002390:	20000184 	.word	0x20000184
 8002394:	200001e4 	.word	0x200001e4
 8002398:	20000220 	.word	0x20000220
 800239c:	20000658 	.word	0x20000658

080023a0 <add_enemy>:

void add_enemy(void)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b082      	sub	sp, #8
 80023a4:	af00      	add	r7, sp, #0
	 * grafika, typ.
	 */
	uint8_t i;
	uint8_t enemy_type;

	for(i = 0; i < player.level; i++)
 80023a6:	2300      	movs	r3, #0
 80023a8:	71fb      	strb	r3, [r7, #7]
 80023aa:	e0dc      	b.n	8002566 <add_enemy+0x1c6>
	{
		if(!enemies[i].active)
 80023ac:	79fa      	ldrb	r2, [r7, #7]
 80023ae:	4974      	ldr	r1, [pc, #464]	; (8002580 <add_enemy+0x1e0>)
 80023b0:	4613      	mov	r3, r2
 80023b2:	00db      	lsls	r3, r3, #3
 80023b4:	1a9b      	subs	r3, r3, r2
 80023b6:	009b      	lsls	r3, r3, #2
 80023b8:	440b      	add	r3, r1
 80023ba:	781b      	ldrb	r3, [r3, #0]
 80023bc:	f083 0301 	eor.w	r3, r3, #1
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	f000 80cc 	beq.w	8002560 <add_enemy+0x1c0>
		{
			enemies[i].active = true;
 80023c8:	79fa      	ldrb	r2, [r7, #7]
 80023ca:	496d      	ldr	r1, [pc, #436]	; (8002580 <add_enemy+0x1e0>)
 80023cc:	4613      	mov	r3, r2
 80023ce:	00db      	lsls	r3, r3, #3
 80023d0:	1a9b      	subs	r3, r3, r2
 80023d2:	009b      	lsls	r3, r3, #2
 80023d4:	440b      	add	r3, r1
 80023d6:	2201      	movs	r2, #1
 80023d8:	701a      	strb	r2, [r3, #0]
			enemies[i].x = 140;			//pozycja startowa przeciwnika
 80023da:	79fa      	ldrb	r2, [r7, #7]
 80023dc:	4968      	ldr	r1, [pc, #416]	; (8002580 <add_enemy+0x1e0>)
 80023de:	4613      	mov	r3, r2
 80023e0:	00db      	lsls	r3, r3, #3
 80023e2:	1a9b      	subs	r3, r3, r2
 80023e4:	009b      	lsls	r3, r3, #2
 80023e6:	440b      	add	r3, r1
 80023e8:	3304      	adds	r3, #4
 80023ea:	228c      	movs	r2, #140	; 0x8c
 80023ec:	601a      	str	r2, [r3, #0]
			enemies[i].y = ((rand()%(screen_height - 10))+10);
 80023ee:	f003 fd59 	bl	8005ea4 <rand>
 80023f2:	4602      	mov	r2, r0
 80023f4:	4b63      	ldr	r3, [pc, #396]	; (8002584 <add_enemy+0x1e4>)
 80023f6:	fb83 1302 	smull	r1, r3, r3, r2
 80023fa:	1119      	asrs	r1, r3, #4
 80023fc:	17d3      	asrs	r3, r2, #31
 80023fe:	1acb      	subs	r3, r1, r3
 8002400:	2176      	movs	r1, #118	; 0x76
 8002402:	fb01 f303 	mul.w	r3, r1, r3
 8002406:	1ad3      	subs	r3, r2, r3
 8002408:	79fa      	ldrb	r2, [r7, #7]
 800240a:	f103 010a 	add.w	r1, r3, #10
 800240e:	485c      	ldr	r0, [pc, #368]	; (8002580 <add_enemy+0x1e0>)
 8002410:	4613      	mov	r3, r2
 8002412:	00db      	lsls	r3, r3, #3
 8002414:	1a9b      	subs	r3, r3, r2
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	4403      	add	r3, r0
 800241a:	3308      	adds	r3, #8
 800241c:	6019      	str	r1, [r3, #0]

			enemy_type = (rand()%100);
 800241e:	f003 fd41 	bl	8005ea4 <rand>
 8002422:	4603      	mov	r3, r0
 8002424:	4a58      	ldr	r2, [pc, #352]	; (8002588 <add_enemy+0x1e8>)
 8002426:	fb82 1203 	smull	r1, r2, r2, r3
 800242a:	1151      	asrs	r1, r2, #5
 800242c:	17da      	asrs	r2, r3, #31
 800242e:	1a8a      	subs	r2, r1, r2
 8002430:	2164      	movs	r1, #100	; 0x64
 8002432:	fb01 f202 	mul.w	r2, r1, r2
 8002436:	1a9a      	subs	r2, r3, r2
 8002438:	4613      	mov	r3, r2
 800243a:	71bb      	strb	r3, [r7, #6]

			if((enemy_type > 50))				//rodzaj przeciwnika
 800243c:	79bb      	ldrb	r3, [r7, #6]
 800243e:	2b32      	cmp	r3, #50	; 0x32
 8002440:	d928      	bls.n	8002494 <add_enemy+0xf4>
			{

				enemies[i].type = et_diver;
 8002442:	79fa      	ldrb	r2, [r7, #7]
 8002444:	494e      	ldr	r1, [pc, #312]	; (8002580 <add_enemy+0x1e0>)
 8002446:	4613      	mov	r3, r2
 8002448:	00db      	lsls	r3, r3, #3
 800244a:	1a9b      	subs	r3, r3, r2
 800244c:	009b      	lsls	r3, r3, #2
 800244e:	440b      	add	r3, r1
 8002450:	330c      	adds	r3, #12
 8002452:	2200      	movs	r2, #0
 8002454:	701a      	strb	r2, [r3, #0]
				enemies[i].update_delay = (rand()%3);	//ustawinie predkosci (mniej = szybciej)
 8002456:	f003 fd25 	bl	8005ea4 <rand>
 800245a:	4601      	mov	r1, r0
 800245c:	79f8      	ldrb	r0, [r7, #7]
 800245e:	4b4b      	ldr	r3, [pc, #300]	; (800258c <add_enemy+0x1ec>)
 8002460:	fb83 3201 	smull	r3, r2, r3, r1
 8002464:	17cb      	asrs	r3, r1, #31
 8002466:	1ad2      	subs	r2, r2, r3
 8002468:	4613      	mov	r3, r2
 800246a:	005b      	lsls	r3, r3, #1
 800246c:	4413      	add	r3, r2
 800246e:	1aca      	subs	r2, r1, r3
 8002470:	4943      	ldr	r1, [pc, #268]	; (8002580 <add_enemy+0x1e0>)
 8002472:	4603      	mov	r3, r0
 8002474:	00db      	lsls	r3, r3, #3
 8002476:	1a1b      	subs	r3, r3, r0
 8002478:	009b      	lsls	r3, r3, #2
 800247a:	440b      	add	r3, r1
 800247c:	3318      	adds	r3, #24
 800247e:	601a      	str	r2, [r3, #0]
				enemies[i].bit_map = driver_map;		//grafika przeciwnika
 8002480:	79fa      	ldrb	r2, [r7, #7]
 8002482:	493f      	ldr	r1, [pc, #252]	; (8002580 <add_enemy+0x1e0>)
 8002484:	4613      	mov	r3, r2
 8002486:	00db      	lsls	r3, r3, #3
 8002488:	1a9b      	subs	r3, r3, r2
 800248a:	009b      	lsls	r3, r3, #2
 800248c:	440b      	add	r3, r1
 800248e:	3310      	adds	r3, #16
 8002490:	4a3f      	ldr	r2, [pc, #252]	; (8002590 <add_enemy+0x1f0>)
 8002492:	601a      	str	r2, [r3, #0]
			}
			if((enemy_type > 20 && enemy_type < 50) && (player.level > 4))
 8002494:	79bb      	ldrb	r3, [r7, #6]
 8002496:	2b14      	cmp	r3, #20
 8002498:	d930      	bls.n	80024fc <add_enemy+0x15c>
 800249a:	79bb      	ldrb	r3, [r7, #6]
 800249c:	2b31      	cmp	r3, #49	; 0x31
 800249e:	d82d      	bhi.n	80024fc <add_enemy+0x15c>
 80024a0:	4b3c      	ldr	r3, [pc, #240]	; (8002594 <add_enemy+0x1f4>)
 80024a2:	695b      	ldr	r3, [r3, #20]
 80024a4:	2b04      	cmp	r3, #4
 80024a6:	dd29      	ble.n	80024fc <add_enemy+0x15c>
			{
				enemies[i].type = et_tracker;
 80024a8:	79fa      	ldrb	r2, [r7, #7]
 80024aa:	4935      	ldr	r1, [pc, #212]	; (8002580 <add_enemy+0x1e0>)
 80024ac:	4613      	mov	r3, r2
 80024ae:	00db      	lsls	r3, r3, #3
 80024b0:	1a9b      	subs	r3, r3, r2
 80024b2:	009b      	lsls	r3, r3, #2
 80024b4:	440b      	add	r3, r1
 80024b6:	330c      	adds	r3, #12
 80024b8:	2201      	movs	r2, #1
 80024ba:	701a      	strb	r2, [r3, #0]
				enemies[i].update_delay = ((rand()%3)+1);
 80024bc:	f003 fcf2 	bl	8005ea4 <rand>
 80024c0:	4601      	mov	r1, r0
 80024c2:	4b32      	ldr	r3, [pc, #200]	; (800258c <add_enemy+0x1ec>)
 80024c4:	fb83 3201 	smull	r3, r2, r3, r1
 80024c8:	17cb      	asrs	r3, r1, #31
 80024ca:	1ad2      	subs	r2, r2, r3
 80024cc:	4613      	mov	r3, r2
 80024ce:	005b      	lsls	r3, r3, #1
 80024d0:	4413      	add	r3, r2
 80024d2:	1aca      	subs	r2, r1, r3
 80024d4:	79f9      	ldrb	r1, [r7, #7]
 80024d6:	3201      	adds	r2, #1
 80024d8:	4829      	ldr	r0, [pc, #164]	; (8002580 <add_enemy+0x1e0>)
 80024da:	460b      	mov	r3, r1
 80024dc:	00db      	lsls	r3, r3, #3
 80024de:	1a5b      	subs	r3, r3, r1
 80024e0:	009b      	lsls	r3, r3, #2
 80024e2:	4403      	add	r3, r0
 80024e4:	3318      	adds	r3, #24
 80024e6:	601a      	str	r2, [r3, #0]
				enemies[i].bit_map = tracker_map;
 80024e8:	79fa      	ldrb	r2, [r7, #7]
 80024ea:	4925      	ldr	r1, [pc, #148]	; (8002580 <add_enemy+0x1e0>)
 80024ec:	4613      	mov	r3, r2
 80024ee:	00db      	lsls	r3, r3, #3
 80024f0:	1a9b      	subs	r3, r3, r2
 80024f2:	009b      	lsls	r3, r3, #2
 80024f4:	440b      	add	r3, r1
 80024f6:	3310      	adds	r3, #16
 80024f8:	4a27      	ldr	r2, [pc, #156]	; (8002598 <add_enemy+0x1f8>)
 80024fa:	601a      	str	r2, [r3, #0]
			}
			if((enemy_type < 20) && (player.level > 7))
 80024fc:	79bb      	ldrb	r3, [r7, #6]
 80024fe:	2b13      	cmp	r3, #19
 8002500:	d838      	bhi.n	8002574 <add_enemy+0x1d4>
 8002502:	4b24      	ldr	r3, [pc, #144]	; (8002594 <add_enemy+0x1f4>)
 8002504:	695b      	ldr	r3, [r3, #20]
 8002506:	2b07      	cmp	r3, #7
 8002508:	dd34      	ble.n	8002574 <add_enemy+0x1d4>
			{
				enemies[i].type = et_bobber;
 800250a:	79fa      	ldrb	r2, [r7, #7]
 800250c:	491c      	ldr	r1, [pc, #112]	; (8002580 <add_enemy+0x1e0>)
 800250e:	4613      	mov	r3, r2
 8002510:	00db      	lsls	r3, r3, #3
 8002512:	1a9b      	subs	r3, r3, r2
 8002514:	009b      	lsls	r3, r3, #2
 8002516:	440b      	add	r3, r1
 8002518:	330c      	adds	r3, #12
 800251a:	2202      	movs	r2, #2
 800251c:	701a      	strb	r2, [r3, #0]
				enemies[i].update_delay = ((rand()%3)+2);
 800251e:	f003 fcc1 	bl	8005ea4 <rand>
 8002522:	4601      	mov	r1, r0
 8002524:	4b19      	ldr	r3, [pc, #100]	; (800258c <add_enemy+0x1ec>)
 8002526:	fb83 3201 	smull	r3, r2, r3, r1
 800252a:	17cb      	asrs	r3, r1, #31
 800252c:	1ad2      	subs	r2, r2, r3
 800252e:	4613      	mov	r3, r2
 8002530:	005b      	lsls	r3, r3, #1
 8002532:	4413      	add	r3, r2
 8002534:	1aca      	subs	r2, r1, r3
 8002536:	79f9      	ldrb	r1, [r7, #7]
 8002538:	3202      	adds	r2, #2
 800253a:	4811      	ldr	r0, [pc, #68]	; (8002580 <add_enemy+0x1e0>)
 800253c:	460b      	mov	r3, r1
 800253e:	00db      	lsls	r3, r3, #3
 8002540:	1a5b      	subs	r3, r3, r1
 8002542:	009b      	lsls	r3, r3, #2
 8002544:	4403      	add	r3, r0
 8002546:	3318      	adds	r3, #24
 8002548:	601a      	str	r2, [r3, #0]
				enemies[i].bit_map = bobber_map;
 800254a:	79fa      	ldrb	r2, [r7, #7]
 800254c:	490c      	ldr	r1, [pc, #48]	; (8002580 <add_enemy+0x1e0>)
 800254e:	4613      	mov	r3, r2
 8002550:	00db      	lsls	r3, r3, #3
 8002552:	1a9b      	subs	r3, r3, r2
 8002554:	009b      	lsls	r3, r3, #2
 8002556:	440b      	add	r3, r1
 8002558:	3310      	adds	r3, #16
 800255a:	4a10      	ldr	r2, [pc, #64]	; (800259c <add_enemy+0x1fc>)
 800255c:	601a      	str	r2, [r3, #0]
			}
			break;
 800255e:	e009      	b.n	8002574 <add_enemy+0x1d4>
	for(i = 0; i < player.level; i++)
 8002560:	79fb      	ldrb	r3, [r7, #7]
 8002562:	3301      	adds	r3, #1
 8002564:	71fb      	strb	r3, [r7, #7]
 8002566:	79fa      	ldrb	r2, [r7, #7]
 8002568:	4b0a      	ldr	r3, [pc, #40]	; (8002594 <add_enemy+0x1f4>)
 800256a:	695b      	ldr	r3, [r3, #20]
 800256c:	429a      	cmp	r2, r3
 800256e:	f6ff af1d 	blt.w	80023ac <add_enemy+0xc>
		}
	}
}
 8002572:	e000      	b.n	8002576 <add_enemy+0x1d6>
			break;
 8002574:	bf00      	nop
}
 8002576:	bf00      	nop
 8002578:	3708      	adds	r7, #8
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	20000220 	.word	0x20000220
 8002584:	22b63cbf 	.word	0x22b63cbf
 8002588:	51eb851f 	.word	0x51eb851f
 800258c:	55555556 	.word	0x55555556
 8002590:	0800761c 	.word	0x0800761c
 8002594:	20000168 	.word	0x20000168
 8002598:	08007614 	.word	0x08007614
 800259c:	08007624 	.word	0x08007624

080025a0 <button_pressed>:

uint8_t button_pressed (void)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	af00      	add	r7, sp, #0
	 * repetycje gdy klawisz jest dlaej wcisniety.
	 * Jest to szczeg�lnie przydatane przy strzelaniu bo zapobiega
	 * oddawaniu kilku strza��w naraz.
	 */

	if((HAL_GPIO_ReadPin(USER_BTN_1_GPIO_Port, USER_BTN_1_Pin) == GPIO_PIN_SET) && btn_prev == 0)
 80025a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80025a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025ac:	f001 ff36 	bl	800441c <HAL_GPIO_ReadPin>
 80025b0:	4603      	mov	r3, r0
 80025b2:	2b01      	cmp	r3, #1
 80025b4:	d108      	bne.n	80025c8 <button_pressed+0x28>
 80025b6:	4b0c      	ldr	r3, [pc, #48]	; (80025e8 <button_pressed+0x48>)
 80025b8:	781b      	ldrb	r3, [r3, #0]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d104      	bne.n	80025c8 <button_pressed+0x28>
	{
		btn_prev = 1;
 80025be:	4b0a      	ldr	r3, [pc, #40]	; (80025e8 <button_pressed+0x48>)
 80025c0:	2201      	movs	r2, #1
 80025c2:	701a      	strb	r2, [r3, #0]
		return 1;
 80025c4:	2301      	movs	r3, #1
 80025c6:	e00c      	b.n	80025e2 <button_pressed+0x42>
	}

	if(HAL_GPIO_ReadPin(USER_BTN_1_GPIO_Port, USER_BTN_1_Pin) == GPIO_PIN_RESET) //oczekiwania na zwolnienie kalwisza
 80025c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80025cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025d0:	f001 ff24 	bl	800441c <HAL_GPIO_ReadPin>
 80025d4:	4603      	mov	r3, r0
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d102      	bne.n	80025e0 <button_pressed+0x40>
	{
		btn_prev = 0;
 80025da:	4b03      	ldr	r3, [pc, #12]	; (80025e8 <button_pressed+0x48>)
 80025dc:	2200      	movs	r2, #0
 80025de:	701a      	strb	r2, [r3, #0]
	}
	return 0;
 80025e0:	2300      	movs	r3, #0
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	20000675 	.word	0x20000675

080025ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80025ec:	b480      	push	{r7}
 80025ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80025f0:	b672      	cpsid	i
}
 80025f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80025f4:	e7fe      	b.n	80025f4 <Error_Handler+0x8>
	...

080025f8 <ssd1327_cmd>:
SPI_HandleTypeDef *ssd1337_spi;

static uint8_t buffer[BUF_SIZE];


void ssd1327_cmd (uint8_t cmd){
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b082      	sub	sp, #8
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	4603      	mov	r3, r0
 8002600:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(DC_PORT, DC, GPIO_PIN_RESET);
 8002602:	2200      	movs	r2, #0
 8002604:	2120      	movs	r1, #32
 8002606:	480c      	ldr	r0, [pc, #48]	; (8002638 <ssd1327_cmd+0x40>)
 8002608:	f001 ff20 	bl	800444c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS_PORT, CS, GPIO_PIN_RESET);
 800260c:	2200      	movs	r2, #0
 800260e:	2110      	movs	r1, #16
 8002610:	4809      	ldr	r0, [pc, #36]	; (8002638 <ssd1327_cmd+0x40>)
 8002612:	f001 ff1b 	bl	800444c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(ssd1337_spi, &cmd, 1, 10);
 8002616:	4b09      	ldr	r3, [pc, #36]	; (800263c <ssd1327_cmd+0x44>)
 8002618:	6818      	ldr	r0, [r3, #0]
 800261a:	1df9      	adds	r1, r7, #7
 800261c:	230a      	movs	r3, #10
 800261e:	2201      	movs	r2, #1
 8002620:	f003 f93b 	bl	800589a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CS_PORT, CS, GPIO_PIN_SET);
 8002624:	2201      	movs	r2, #1
 8002626:	2110      	movs	r1, #16
 8002628:	4803      	ldr	r0, [pc, #12]	; (8002638 <ssd1327_cmd+0x40>)
 800262a:	f001 ff0f 	bl	800444c <HAL_GPIO_WritePin>

}
 800262e:	bf00      	nop
 8002630:	3708      	adds	r7, #8
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop
 8002638:	48000400 	.word	0x48000400
 800263c:	20000684 	.word	0x20000684

08002640 <ssd1327_Reset>:
{
	ssd1327_cmd(SSD1327_SETCONTRASTCURRENT);	// Set Contrast Control
	ssd1327_cmd(Contrast);
}

void ssd1327_Reset(void){
 8002640:	b580      	push	{r7, lr}
 8002642:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(RST_PORT, RST, GPIO_PIN_RESET);
 8002644:	2200      	movs	r2, #0
 8002646:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800264a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800264e:	f001 fefd 	bl	800444c <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8002652:	2005      	movs	r0, #5
 8002654:	f000 fb8a 	bl	8002d6c <HAL_Delay>
	HAL_GPIO_WritePin(RST_PORT, RST, GPIO_PIN_SET);
 8002658:	2201      	movs	r2, #1
 800265a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800265e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002662:	f001 fef3 	bl	800444c <HAL_GPIO_WritePin>

}
 8002666:	bf00      	nop
 8002668:	bd80      	pop	{r7, pc}
	...

0800266c <ssd1327_SpiInit>:

void ssd1327_SpiInit(SPI_HandleTypeDef *spi){
 800266c:	b580      	push	{r7, lr}
 800266e:	b082      	sub	sp, #8
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]

	ssd1337_spi = spi;
 8002674:	4a05      	ldr	r2, [pc, #20]	; (800268c <ssd1327_SpiInit+0x20>)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6013      	str	r3, [r2, #0]

	ssd1327_Reset();
 800267a:	f7ff ffe1 	bl	8002640 <ssd1327_Reset>
	ssd1327_Init();
 800267e:	f000 f807 	bl	8002690 <ssd1327_Init>

}
 8002682:	bf00      	nop
 8002684:	3708      	adds	r7, #8
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}
 800268a:	bf00      	nop
 800268c:	20000684 	.word	0x20000684

08002690 <ssd1327_Init>:

void ssd1327_Init (void){
 8002690:	b580      	push	{r7, lr}
 8002692:	af00      	add	r7, sp, #0
//
//	ssd1327_cmd(SSD1327_DISPLAYALLON_RESUME);  // Entire Display ON

//--------------------------------------------------------------------------

	ssd1327_cmd(0xae);//--turn off oled panel
 8002694:	20ae      	movs	r0, #174	; 0xae
 8002696:	f7ff ffaf 	bl	80025f8 <ssd1327_cmd>

	ssd1327_cmd(0x15);  //set column addresses
 800269a:	2015      	movs	r0, #21
 800269c:	f7ff ffac 	bl	80025f8 <ssd1327_cmd>
	ssd1327_cmd(0x00);  //start column  0
 80026a0:	2000      	movs	r0, #0
 80026a2:	f7ff ffa9 	bl	80025f8 <ssd1327_cmd>
	ssd1327_cmd(0x7f);  //end column  127
 80026a6:	207f      	movs	r0, #127	; 0x7f
 80026a8:	f7ff ffa6 	bl	80025f8 <ssd1327_cmd>

	ssd1327_cmd(0x75);  //set row addresses
 80026ac:	2075      	movs	r0, #117	; 0x75
 80026ae:	f7ff ffa3 	bl	80025f8 <ssd1327_cmd>
	ssd1327_cmd(0x00);  //start row  0
 80026b2:	2000      	movs	r0, #0
 80026b4:	f7ff ffa0 	bl	80025f8 <ssd1327_cmd>
	ssd1327_cmd(0x7f);  //end row  127
 80026b8:	207f      	movs	r0, #127	; 0x7f
 80026ba:	f7ff ff9d 	bl	80025f8 <ssd1327_cmd>

	ssd1327_cmd(0x81);  //set contrast control
 80026be:	2081      	movs	r0, #129	; 0x81
 80026c0:	f7ff ff9a 	bl	80025f8 <ssd1327_cmd>
	ssd1327_cmd(0x80);  //50% (128/255)
 80026c4:	2080      	movs	r0, #128	; 0x80
 80026c6:	f7ff ff97 	bl	80025f8 <ssd1327_cmd>

	ssd1327_cmd(0xa0);   //gment remap
 80026ca:	20a0      	movs	r0, #160	; 0xa0
 80026cc:	f7ff ff94 	bl	80025f8 <ssd1327_cmd>
	ssd1327_cmd(0x51);  //51 (To my understanding, this is orientation
 80026d0:	2051      	movs	r0, #81	; 0x51
 80026d2:	f7ff ff91 	bl	80025f8 <ssd1327_cmd>

	ssd1327_cmd(0xa1);  //start line
 80026d6:	20a1      	movs	r0, #161	; 0xa1
 80026d8:	f7ff ff8e 	bl	80025f8 <ssd1327_cmd>
	ssd1327_cmd(0x00);
 80026dc:	2000      	movs	r0, #0
 80026de:	f7ff ff8b 	bl	80025f8 <ssd1327_cmd>

	ssd1327_cmd(0xa2);  //display offset
 80026e2:	20a2      	movs	r0, #162	; 0xa2
 80026e4:	f7ff ff88 	bl	80025f8 <ssd1327_cmd>
	ssd1327_cmd(0x00);
 80026e8:	2000      	movs	r0, #0
 80026ea:	f7ff ff85 	bl	80025f8 <ssd1327_cmd>

	ssd1327_cmd(0xa4);  //rmal display
 80026ee:	20a4      	movs	r0, #164	; 0xa4
 80026f0:	f7ff ff82 	bl	80025f8 <ssd1327_cmd>
	ssd1327_cmd(0xa8);  //set multiplex ratio
 80026f4:	20a8      	movs	r0, #168	; 0xa8
 80026f6:	f7ff ff7f 	bl	80025f8 <ssd1327_cmd>
	ssd1327_cmd(0x7f);
 80026fa:	207f      	movs	r0, #127	; 0x7f
 80026fc:	f7ff ff7c 	bl	80025f8 <ssd1327_cmd>

	ssd1327_cmd(0xb1);  //set phase leghth
 8002700:	20b1      	movs	r0, #177	; 0xb1
 8002702:	f7ff ff79 	bl	80025f8 <ssd1327_cmd>
	ssd1327_cmd(0xf1);
 8002706:	20f1      	movs	r0, #241	; 0xf1
 8002708:	f7ff ff76 	bl	80025f8 <ssd1327_cmd>

	ssd1327_cmd(0xb3);  //set dclk
 800270c:	20b3      	movs	r0, #179	; 0xb3
 800270e:	f7ff ff73 	bl	80025f8 <ssd1327_cmd>
	ssd1327_cmd(0x00);  //80Hz:0xc1 90Hz:0xe1  100Hz:0x00  110Hz:0x30 120Hz:0x50  130Hz:0x70   01
 8002712:	2000      	movs	r0, #0
 8002714:	f7ff ff70 	bl	80025f8 <ssd1327_cmd>

	ssd1327_cmd(0xab);  //Enable vReg
 8002718:	20ab      	movs	r0, #171	; 0xab
 800271a:	f7ff ff6d 	bl	80025f8 <ssd1327_cmd>
	ssd1327_cmd(0x01);
 800271e:	2001      	movs	r0, #1
 8002720:	f7ff ff6a 	bl	80025f8 <ssd1327_cmd>

	ssd1327_cmd(0xb6);  //set phase leghth
 8002724:	20b6      	movs	r0, #182	; 0xb6
 8002726:	f7ff ff67 	bl	80025f8 <ssd1327_cmd>
	ssd1327_cmd(0x0f);
 800272a:	200f      	movs	r0, #15
 800272c:	f7ff ff64 	bl	80025f8 <ssd1327_cmd>

	ssd1327_cmd(0xbe); //Set vcomh voltage
 8002730:	20be      	movs	r0, #190	; 0xbe
 8002732:	f7ff ff61 	bl	80025f8 <ssd1327_cmd>
	ssd1327_cmd(0x0f);
 8002736:	200f      	movs	r0, #15
 8002738:	f7ff ff5e 	bl	80025f8 <ssd1327_cmd>

	ssd1327_cmd(0xbc); //set pre-charge voltage
 800273c:	20bc      	movs	r0, #188	; 0xbc
 800273e:	f7ff ff5b 	bl	80025f8 <ssd1327_cmd>
	ssd1327_cmd(0x08);
 8002742:	2008      	movs	r0, #8
 8002744:	f7ff ff58 	bl	80025f8 <ssd1327_cmd>

	ssd1327_cmd(0xd5); //second precharge period
 8002748:	20d5      	movs	r0, #213	; 0xd5
 800274a:	f7ff ff55 	bl	80025f8 <ssd1327_cmd>
	ssd1327_cmd(0x62);
 800274e:	2062      	movs	r0, #98	; 0x62
 8002750:	f7ff ff52 	bl	80025f8 <ssd1327_cmd>

	ssd1327_cmd(0xfd); //Unlock commands
 8002754:	20fd      	movs	r0, #253	; 0xfd
 8002756:	f7ff ff4f 	bl	80025f8 <ssd1327_cmd>
	ssd1327_cmd(0x12);
 800275a:	2012      	movs	r0, #18
 800275c:	f7ff ff4c 	bl	80025f8 <ssd1327_cmd>

	ssd1327_cmd(0xAF);
 8002760:	20af      	movs	r0, #175	; 0xaf
 8002762:	f7ff ff49 	bl	80025f8 <ssd1327_cmd>

	ssd1327_cmd(SSD1327_DISPLAYON);
 8002766:	20af      	movs	r0, #175	; 0xaf
 8002768:	f7ff ff46 	bl	80025f8 <ssd1327_cmd>
}
 800276c:	bf00      	nop
 800276e:	bd80      	pop	{r7, pc}

08002770 <ssd1327_display>:

void ssd1327_display (void){
 8002770:	b580      	push	{r7, lr}
 8002772:	af00      	add	r7, sp, #0

	ssd1327_cmd(SSD1327_SETCOLUMNADDRESS);
 8002774:	2015      	movs	r0, #21
 8002776:	f7ff ff3f 	bl	80025f8 <ssd1327_cmd>
	ssd1327_cmd(0x00);
 800277a:	2000      	movs	r0, #0
 800277c:	f7ff ff3c 	bl	80025f8 <ssd1327_cmd>
	ssd1327_cmd(0x7F);
 8002780:	207f      	movs	r0, #127	; 0x7f
 8002782:	f7ff ff39 	bl	80025f8 <ssd1327_cmd>

	ssd1327_cmd(SSD1327_SETROWADDRESS);
 8002786:	2075      	movs	r0, #117	; 0x75
 8002788:	f7ff ff36 	bl	80025f8 <ssd1327_cmd>
	ssd1327_cmd(0x00);
 800278c:	2000      	movs	r0, #0
 800278e:	f7ff ff33 	bl	80025f8 <ssd1327_cmd>
	ssd1327_cmd(0x7F);
 8002792:	207f      	movs	r0, #127	; 0x7f
 8002794:	f7ff ff30 	bl	80025f8 <ssd1327_cmd>

	HAL_GPIO_WritePin(CS_PORT, CS, GPIO_PIN_RESET);
 8002798:	2200      	movs	r2, #0
 800279a:	2110      	movs	r1, #16
 800279c:	480d      	ldr	r0, [pc, #52]	; (80027d4 <ssd1327_display+0x64>)
 800279e:	f001 fe55 	bl	800444c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DC_PORT, DC, GPIO_PIN_SET);
 80027a2:	2201      	movs	r2, #1
 80027a4:	2120      	movs	r1, #32
 80027a6:	480b      	ldr	r0, [pc, #44]	; (80027d4 <ssd1327_display+0x64>)
 80027a8:	f001 fe50 	bl	800444c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS_PORT, CS, GPIO_PIN_RESET);
 80027ac:	2200      	movs	r2, #0
 80027ae:	2110      	movs	r1, #16
 80027b0:	4808      	ldr	r0, [pc, #32]	; (80027d4 <ssd1327_display+0x64>)
 80027b2:	f001 fe4b 	bl	800444c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(ssd1337_spi, (uint8_t*)&buffer, BUF_SIZE, 100);
 80027b6:	4b08      	ldr	r3, [pc, #32]	; (80027d8 <ssd1327_display+0x68>)
 80027b8:	6818      	ldr	r0, [r3, #0]
 80027ba:	2364      	movs	r3, #100	; 0x64
 80027bc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80027c0:	4906      	ldr	r1, [pc, #24]	; (80027dc <ssd1327_display+0x6c>)
 80027c2:	f003 f86a 	bl	800589a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CS_PORT, CS, GPIO_PIN_SET);
 80027c6:	2201      	movs	r2, #1
 80027c8:	2110      	movs	r1, #16
 80027ca:	4802      	ldr	r0, [pc, #8]	; (80027d4 <ssd1327_display+0x64>)
 80027cc:	f001 fe3e 	bl	800444c <HAL_GPIO_WritePin>

}
 80027d0:	bf00      	nop
 80027d2:	bd80      	pop	{r7, pc}
 80027d4:	48000400 	.word	0x48000400
 80027d8:	20000684 	.word	0x20000684
 80027dc:	20000688 	.word	0x20000688

080027e0 <ssd1327_CLR>:

void ssd1327_CLR(void){
 80027e0:	b580      	push	{r7, lr}
 80027e2:	af00      	add	r7, sp, #0
		memset(buffer, (BLACK << 4 | BLACK), BUF_SIZE);
 80027e4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80027e8:	2100      	movs	r1, #0
 80027ea:	4802      	ldr	r0, [pc, #8]	; (80027f4 <ssd1327_CLR+0x14>)
 80027ec:	f003 fb52 	bl	8005e94 <memset>
}
 80027f0:	bf00      	nop
 80027f2:	bd80      	pop	{r7, pc}
 80027f4:	20000688 	.word	0x20000688

080027f8 <ssd1327_setPixel>:

void ssd1327_setPixel( int x , int y , uint8_t bw){
 80027f8:	b480      	push	{r7}
 80027fa:	b087      	sub	sp, #28
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	60f8      	str	r0, [r7, #12]
 8002800:	60b9      	str	r1, [r7, #8]
 8002802:	4613      	mov	r3, r2
 8002804:	71fb      	strb	r3, [r7, #7]
	if ((x < 0) || (x >= SSD1327_WIDTH) || (y < 0) || (y >= SSD1327_HEIGHT))
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	2b00      	cmp	r3, #0
 800280a:	db3c      	blt.n	8002886 <ssd1327_setPixel+0x8e>
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	2b7f      	cmp	r3, #127	; 0x7f
 8002810:	dc39      	bgt.n	8002886 <ssd1327_setPixel+0x8e>
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	2b00      	cmp	r3, #0
 8002816:	db36      	blt.n	8002886 <ssd1327_setPixel+0x8e>
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	2b7f      	cmp	r3, #127	; 0x7f
 800281c:	dc33      	bgt.n	8002886 <ssd1327_setPixel+0x8e>
		return;

	uint8_t SelectedCell = buffer[x/2 + y*(SSD1327_WIDTH/2)];
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	0fda      	lsrs	r2, r3, #31
 8002822:	4413      	add	r3, r2
 8002824:	105b      	asrs	r3, r3, #1
 8002826:	461a      	mov	r2, r3
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	019b      	lsls	r3, r3, #6
 800282c:	4413      	add	r3, r2
 800282e:	4a19      	ldr	r2, [pc, #100]	; (8002894 <ssd1327_setPixel+0x9c>)
 8002830:	5cd3      	ldrb	r3, [r2, r3]
 8002832:	75fb      	strb	r3, [r7, #23]

	if(x % 2)
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	f003 0301 	and.w	r3, r3, #1
 800283a:	2b00      	cmp	r3, #0
 800283c:	d00b      	beq.n	8002856 <ssd1327_setPixel+0x5e>
	{
		SelectedCell &= ~(0x0F);
 800283e:	7dfb      	ldrb	r3, [r7, #23]
 8002840:	f023 030f 	bic.w	r3, r3, #15
 8002844:	75fb      	strb	r3, [r7, #23]
		SelectedCell |= (0x0F & bw);
 8002846:	79fb      	ldrb	r3, [r7, #7]
 8002848:	f003 030f 	and.w	r3, r3, #15
 800284c:	b2da      	uxtb	r2, r3
 800284e:	7dfb      	ldrb	r3, [r7, #23]
 8002850:	4313      	orrs	r3, r2
 8002852:	75fb      	strb	r3, [r7, #23]
 8002854:	e00b      	b.n	800286e <ssd1327_setPixel+0x76>
	}
	else
	{
		SelectedCell &= ~(0xF0);
 8002856:	7dfb      	ldrb	r3, [r7, #23]
 8002858:	f003 030f 	and.w	r3, r3, #15
 800285c:	75fb      	strb	r3, [r7, #23]
		SelectedCell |= (0xF0 & (bw<<4));
 800285e:	79fb      	ldrb	r3, [r7, #7]
 8002860:	011b      	lsls	r3, r3, #4
 8002862:	b25a      	sxtb	r2, r3
 8002864:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002868:	4313      	orrs	r3, r2
 800286a:	b25b      	sxtb	r3, r3
 800286c:	75fb      	strb	r3, [r7, #23]
	}

	buffer[x/2 + y*(SSD1327_WIDTH/2)] = SelectedCell;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	0fda      	lsrs	r2, r3, #31
 8002872:	4413      	add	r3, r2
 8002874:	105b      	asrs	r3, r3, #1
 8002876:	461a      	mov	r2, r3
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	019b      	lsls	r3, r3, #6
 800287c:	4413      	add	r3, r2
 800287e:	4905      	ldr	r1, [pc, #20]	; (8002894 <ssd1327_setPixel+0x9c>)
 8002880:	7dfa      	ldrb	r2, [r7, #23]
 8002882:	54ca      	strb	r2, [r1, r3]
 8002884:	e000      	b.n	8002888 <ssd1327_setPixel+0x90>
		return;
 8002886:	bf00      	nop

//	if ((x < 0) || (x >= SSD1327_WIDTH) || (y < 0) || (y >= SSD1327_HEIGHT))
//		return;
//	if (bw) buffer[x + (y/4)*SSD1327_WIDTH] |= (1<<(y%4));
//	else buffer[x + (y/4)*SSD1327_WIDTH] &= ~(1<<(y%4));
}
 8002888:	371c      	adds	r7, #28
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr
 8002892:	bf00      	nop
 8002894:	20000688 	.word	0x20000688

08002898 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002898:	b480      	push	{r7}
 800289a:	b083      	sub	sp, #12
 800289c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800289e:	4b0f      	ldr	r3, [pc, #60]	; (80028dc <HAL_MspInit+0x44>)
 80028a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028a2:	4a0e      	ldr	r2, [pc, #56]	; (80028dc <HAL_MspInit+0x44>)
 80028a4:	f043 0301 	orr.w	r3, r3, #1
 80028a8:	6613      	str	r3, [r2, #96]	; 0x60
 80028aa:	4b0c      	ldr	r3, [pc, #48]	; (80028dc <HAL_MspInit+0x44>)
 80028ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028ae:	f003 0301 	and.w	r3, r3, #1
 80028b2:	607b      	str	r3, [r7, #4]
 80028b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80028b6:	4b09      	ldr	r3, [pc, #36]	; (80028dc <HAL_MspInit+0x44>)
 80028b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028ba:	4a08      	ldr	r2, [pc, #32]	; (80028dc <HAL_MspInit+0x44>)
 80028bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028c0:	6593      	str	r3, [r2, #88]	; 0x58
 80028c2:	4b06      	ldr	r3, [pc, #24]	; (80028dc <HAL_MspInit+0x44>)
 80028c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028ca:	603b      	str	r3, [r7, #0]
 80028cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80028ce:	bf00      	nop
 80028d0:	370c      	adds	r7, #12
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr
 80028da:	bf00      	nop
 80028dc:	40021000 	.word	0x40021000

080028e0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b09e      	sub	sp, #120	; 0x78
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028e8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80028ec:	2200      	movs	r2, #0
 80028ee:	601a      	str	r2, [r3, #0]
 80028f0:	605a      	str	r2, [r3, #4]
 80028f2:	609a      	str	r2, [r3, #8]
 80028f4:	60da      	str	r2, [r3, #12]
 80028f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80028f8:	f107 0310 	add.w	r3, r7, #16
 80028fc:	2254      	movs	r2, #84	; 0x54
 80028fe:	2100      	movs	r1, #0
 8002900:	4618      	mov	r0, r3
 8002902:	f003 fac7 	bl	8005e94 <memset>
  if(hadc->Instance==ADC1)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a25      	ldr	r2, [pc, #148]	; (80029a0 <HAL_ADC_MspInit+0xc0>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d143      	bne.n	8002998 <HAL_ADC_MspInit+0xb8>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002910:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002914:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8002916:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800291a:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800291c:	2301      	movs	r3, #1
 800291e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8002920:	2301      	movs	r3, #1
 8002922:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8002924:	2310      	movs	r3, #16
 8002926:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8002928:	2307      	movs	r3, #7
 800292a:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800292c:	2302      	movs	r3, #2
 800292e:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8002930:	2302      	movs	r3, #2
 8002932:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8002934:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002938:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800293a:	f107 0310 	add.w	r3, r7, #16
 800293e:	4618      	mov	r0, r3
 8002940:	f002 fc10 	bl	8005164 <HAL_RCCEx_PeriphCLKConfig>
 8002944:	4603      	mov	r3, r0
 8002946:	2b00      	cmp	r3, #0
 8002948:	d001      	beq.n	800294e <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 800294a:	f7ff fe4f 	bl	80025ec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800294e:	4b15      	ldr	r3, [pc, #84]	; (80029a4 <HAL_ADC_MspInit+0xc4>)
 8002950:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002952:	4a14      	ldr	r2, [pc, #80]	; (80029a4 <HAL_ADC_MspInit+0xc4>)
 8002954:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002958:	64d3      	str	r3, [r2, #76]	; 0x4c
 800295a:	4b12      	ldr	r3, [pc, #72]	; (80029a4 <HAL_ADC_MspInit+0xc4>)
 800295c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800295e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002962:	60fb      	str	r3, [r7, #12]
 8002964:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002966:	4b0f      	ldr	r3, [pc, #60]	; (80029a4 <HAL_ADC_MspInit+0xc4>)
 8002968:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800296a:	4a0e      	ldr	r2, [pc, #56]	; (80029a4 <HAL_ADC_MspInit+0xc4>)
 800296c:	f043 0301 	orr.w	r3, r3, #1
 8002970:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002972:	4b0c      	ldr	r3, [pc, #48]	; (80029a4 <HAL_ADC_MspInit+0xc4>)
 8002974:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002976:	f003 0301 	and.w	r3, r3, #1
 800297a:	60bb      	str	r3, [r7, #8]
 800297c:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800297e:	2301      	movs	r3, #1
 8002980:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002982:	230b      	movs	r3, #11
 8002984:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002986:	2300      	movs	r3, #0
 8002988:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800298a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800298e:	4619      	mov	r1, r3
 8002990:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002994:	f001 fbd8 	bl	8004148 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002998:	bf00      	nop
 800299a:	3778      	adds	r7, #120	; 0x78
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}
 80029a0:	50040000 	.word	0x50040000
 80029a4:	40021000 	.word	0x40021000

080029a8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b08a      	sub	sp, #40	; 0x28
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029b0:	f107 0314 	add.w	r3, r7, #20
 80029b4:	2200      	movs	r2, #0
 80029b6:	601a      	str	r2, [r3, #0]
 80029b8:	605a      	str	r2, [r3, #4]
 80029ba:	609a      	str	r2, [r3, #8]
 80029bc:	60da      	str	r2, [r3, #12]
 80029be:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a17      	ldr	r2, [pc, #92]	; (8002a24 <HAL_SPI_MspInit+0x7c>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d128      	bne.n	8002a1c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80029ca:	4b17      	ldr	r3, [pc, #92]	; (8002a28 <HAL_SPI_MspInit+0x80>)
 80029cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029ce:	4a16      	ldr	r2, [pc, #88]	; (8002a28 <HAL_SPI_MspInit+0x80>)
 80029d0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80029d4:	6613      	str	r3, [r2, #96]	; 0x60
 80029d6:	4b14      	ldr	r3, [pc, #80]	; (8002a28 <HAL_SPI_MspInit+0x80>)
 80029d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029de:	613b      	str	r3, [r7, #16]
 80029e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029e2:	4b11      	ldr	r3, [pc, #68]	; (8002a28 <HAL_SPI_MspInit+0x80>)
 80029e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029e6:	4a10      	ldr	r2, [pc, #64]	; (8002a28 <HAL_SPI_MspInit+0x80>)
 80029e8:	f043 0301 	orr.w	r3, r3, #1
 80029ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80029ee:	4b0e      	ldr	r3, [pc, #56]	; (8002a28 <HAL_SPI_MspInit+0x80>)
 80029f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029f2:	f003 0301 	and.w	r3, r3, #1
 80029f6:	60fb      	str	r3, [r7, #12]
 80029f8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_7;
 80029fa:	2382      	movs	r3, #130	; 0x82
 80029fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029fe:	2302      	movs	r3, #2
 8002a00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a02:	2300      	movs	r3, #0
 8002a04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a06:	2303      	movs	r3, #3
 8002a08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002a0a:	2305      	movs	r3, #5
 8002a0c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a0e:	f107 0314 	add.w	r3, r7, #20
 8002a12:	4619      	mov	r1, r3
 8002a14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a18:	f001 fb96 	bl	8004148 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002a1c:	bf00      	nop
 8002a1e:	3728      	adds	r7, #40	; 0x28
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}
 8002a24:	40013000 	.word	0x40013000
 8002a28:	40021000 	.word	0x40021000

08002a2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002a30:	e7fe      	b.n	8002a30 <NMI_Handler+0x4>

08002a32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a32:	b480      	push	{r7}
 8002a34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a36:	e7fe      	b.n	8002a36 <HardFault_Handler+0x4>

08002a38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a3c:	e7fe      	b.n	8002a3c <MemManage_Handler+0x4>

08002a3e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a3e:	b480      	push	{r7}
 8002a40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a42:	e7fe      	b.n	8002a42 <BusFault_Handler+0x4>

08002a44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a44:	b480      	push	{r7}
 8002a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a48:	e7fe      	b.n	8002a48 <UsageFault_Handler+0x4>

08002a4a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a4a:	b480      	push	{r7}
 8002a4c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a4e:	bf00      	nop
 8002a50:	46bd      	mov	sp, r7
 8002a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a56:	4770      	bx	lr

08002a58 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a5c:	bf00      	nop
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a64:	4770      	bx	lr

08002a66 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a66:	b480      	push	{r7}
 8002a68:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a6a:	bf00      	nop
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a72:	4770      	bx	lr

08002a74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a78:	f000 f958 	bl	8002d2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a7c:	bf00      	nop
 8002a7e:	bd80      	pop	{r7, pc}

08002a80 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002a80:	b480      	push	{r7}
 8002a82:	af00      	add	r7, sp, #0
	return 1;
 8002a84:	2301      	movs	r3, #1
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8e:	4770      	bx	lr

08002a90 <_kill>:

int _kill(int pid, int sig)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b082      	sub	sp, #8
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
 8002a98:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002a9a:	f003 f9d1 	bl	8005e40 <__errno>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	2216      	movs	r2, #22
 8002aa2:	601a      	str	r2, [r3, #0]
	return -1;
 8002aa4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	3708      	adds	r7, #8
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}

08002ab0 <_exit>:

void _exit (int status)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b082      	sub	sp, #8
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002ab8:	f04f 31ff 	mov.w	r1, #4294967295
 8002abc:	6878      	ldr	r0, [r7, #4]
 8002abe:	f7ff ffe7 	bl	8002a90 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002ac2:	e7fe      	b.n	8002ac2 <_exit+0x12>

08002ac4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b086      	sub	sp, #24
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	60f8      	str	r0, [r7, #12]
 8002acc:	60b9      	str	r1, [r7, #8]
 8002ace:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	617b      	str	r3, [r7, #20]
 8002ad4:	e00a      	b.n	8002aec <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002ad6:	f3af 8000 	nop.w
 8002ada:	4601      	mov	r1, r0
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	1c5a      	adds	r2, r3, #1
 8002ae0:	60ba      	str	r2, [r7, #8]
 8002ae2:	b2ca      	uxtb	r2, r1
 8002ae4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	3301      	adds	r3, #1
 8002aea:	617b      	str	r3, [r7, #20]
 8002aec:	697a      	ldr	r2, [r7, #20]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	429a      	cmp	r2, r3
 8002af2:	dbf0      	blt.n	8002ad6 <_read+0x12>
	}

return len;
 8002af4:	687b      	ldr	r3, [r7, #4]
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	3718      	adds	r7, #24
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}

08002afe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002afe:	b580      	push	{r7, lr}
 8002b00:	b086      	sub	sp, #24
 8002b02:	af00      	add	r7, sp, #0
 8002b04:	60f8      	str	r0, [r7, #12]
 8002b06:	60b9      	str	r1, [r7, #8]
 8002b08:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	617b      	str	r3, [r7, #20]
 8002b0e:	e009      	b.n	8002b24 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	1c5a      	adds	r2, r3, #1
 8002b14:	60ba      	str	r2, [r7, #8]
 8002b16:	781b      	ldrb	r3, [r3, #0]
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	3301      	adds	r3, #1
 8002b22:	617b      	str	r3, [r7, #20]
 8002b24:	697a      	ldr	r2, [r7, #20]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	dbf1      	blt.n	8002b10 <_write+0x12>
	}
	return len;
 8002b2c:	687b      	ldr	r3, [r7, #4]
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	3718      	adds	r7, #24
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}

08002b36 <_close>:

int _close(int file)
{
 8002b36:	b480      	push	{r7}
 8002b38:	b083      	sub	sp, #12
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	6078      	str	r0, [r7, #4]
	return -1;
 8002b3e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	370c      	adds	r7, #12
 8002b46:	46bd      	mov	sp, r7
 8002b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4c:	4770      	bx	lr

08002b4e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002b4e:	b480      	push	{r7}
 8002b50:	b083      	sub	sp, #12
 8002b52:	af00      	add	r7, sp, #0
 8002b54:	6078      	str	r0, [r7, #4]
 8002b56:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002b5e:	605a      	str	r2, [r3, #4]
	return 0;
 8002b60:	2300      	movs	r3, #0
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	370c      	adds	r7, #12
 8002b66:	46bd      	mov	sp, r7
 8002b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6c:	4770      	bx	lr

08002b6e <_isatty>:

int _isatty(int file)
{
 8002b6e:	b480      	push	{r7}
 8002b70:	b083      	sub	sp, #12
 8002b72:	af00      	add	r7, sp, #0
 8002b74:	6078      	str	r0, [r7, #4]
	return 1;
 8002b76:	2301      	movs	r3, #1
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	370c      	adds	r7, #12
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b82:	4770      	bx	lr

08002b84 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b085      	sub	sp, #20
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	60f8      	str	r0, [r7, #12]
 8002b8c:	60b9      	str	r1, [r7, #8]
 8002b8e:	607a      	str	r2, [r7, #4]
	return 0;
 8002b90:	2300      	movs	r3, #0
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	3714      	adds	r7, #20
 8002b96:	46bd      	mov	sp, r7
 8002b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9c:	4770      	bx	lr
	...

08002ba0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b086      	sub	sp, #24
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002ba8:	4a14      	ldr	r2, [pc, #80]	; (8002bfc <_sbrk+0x5c>)
 8002baa:	4b15      	ldr	r3, [pc, #84]	; (8002c00 <_sbrk+0x60>)
 8002bac:	1ad3      	subs	r3, r2, r3
 8002bae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002bb4:	4b13      	ldr	r3, [pc, #76]	; (8002c04 <_sbrk+0x64>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d102      	bne.n	8002bc2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002bbc:	4b11      	ldr	r3, [pc, #68]	; (8002c04 <_sbrk+0x64>)
 8002bbe:	4a12      	ldr	r2, [pc, #72]	; (8002c08 <_sbrk+0x68>)
 8002bc0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002bc2:	4b10      	ldr	r3, [pc, #64]	; (8002c04 <_sbrk+0x64>)
 8002bc4:	681a      	ldr	r2, [r3, #0]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	4413      	add	r3, r2
 8002bca:	693a      	ldr	r2, [r7, #16]
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d207      	bcs.n	8002be0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002bd0:	f003 f936 	bl	8005e40 <__errno>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	220c      	movs	r2, #12
 8002bd8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002bda:	f04f 33ff 	mov.w	r3, #4294967295
 8002bde:	e009      	b.n	8002bf4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002be0:	4b08      	ldr	r3, [pc, #32]	; (8002c04 <_sbrk+0x64>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002be6:	4b07      	ldr	r3, [pc, #28]	; (8002c04 <_sbrk+0x64>)
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	4413      	add	r3, r2
 8002bee:	4a05      	ldr	r2, [pc, #20]	; (8002c04 <_sbrk+0x64>)
 8002bf0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	3718      	adds	r7, #24
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}
 8002bfc:	20010000 	.word	0x20010000
 8002c00:	00000400 	.word	0x00000400
 8002c04:	20002688 	.word	0x20002688
 8002c08:	200026a0 	.word	0x200026a0

08002c0c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002c10:	4b06      	ldr	r3, [pc, #24]	; (8002c2c <SystemInit+0x20>)
 8002c12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c16:	4a05      	ldr	r2, [pc, #20]	; (8002c2c <SystemInit+0x20>)
 8002c18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002c1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002c20:	bf00      	nop
 8002c22:	46bd      	mov	sp, r7
 8002c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c28:	4770      	bx	lr
 8002c2a:	bf00      	nop
 8002c2c:	e000ed00 	.word	0xe000ed00

08002c30 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002c30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002c68 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002c34:	f7ff ffea 	bl	8002c0c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002c38:	480c      	ldr	r0, [pc, #48]	; (8002c6c <LoopForever+0x6>)
  ldr r1, =_edata
 8002c3a:	490d      	ldr	r1, [pc, #52]	; (8002c70 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002c3c:	4a0d      	ldr	r2, [pc, #52]	; (8002c74 <LoopForever+0xe>)
  movs r3, #0
 8002c3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c40:	e002      	b.n	8002c48 <LoopCopyDataInit>

08002c42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c46:	3304      	adds	r3, #4

08002c48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c4c:	d3f9      	bcc.n	8002c42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c4e:	4a0a      	ldr	r2, [pc, #40]	; (8002c78 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002c50:	4c0a      	ldr	r4, [pc, #40]	; (8002c7c <LoopForever+0x16>)
  movs r3, #0
 8002c52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c54:	e001      	b.n	8002c5a <LoopFillZerobss>

08002c56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c58:	3204      	adds	r2, #4

08002c5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c5c:	d3fb      	bcc.n	8002c56 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002c5e:	f003 f8f5 	bl	8005e4c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002c62:	f7fd fecb 	bl	80009fc <main>

08002c66 <LoopForever>:

LoopForever:
    b LoopForever
 8002c66:	e7fe      	b.n	8002c66 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002c68:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002c6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c70:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8002c74:	08007828 	.word	0x08007828
  ldr r2, =_sbss
 8002c78:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8002c7c:	200026a0 	.word	0x200026a0

08002c80 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002c80:	e7fe      	b.n	8002c80 <ADC1_IRQHandler>

08002c82 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c82:	b580      	push	{r7, lr}
 8002c84:	b082      	sub	sp, #8
 8002c86:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c8c:	2003      	movs	r0, #3
 8002c8e:	f001 fa27 	bl	80040e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002c92:	200f      	movs	r0, #15
 8002c94:	f000 f80e 	bl	8002cb4 <HAL_InitTick>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d002      	beq.n	8002ca4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	71fb      	strb	r3, [r7, #7]
 8002ca2:	e001      	b.n	8002ca8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002ca4:	f7ff fdf8 	bl	8002898 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002ca8:	79fb      	ldrb	r3, [r7, #7]
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	3708      	adds	r7, #8
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}
	...

08002cb4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b084      	sub	sp, #16
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002cc0:	4b17      	ldr	r3, [pc, #92]	; (8002d20 <HAL_InitTick+0x6c>)
 8002cc2:	781b      	ldrb	r3, [r3, #0]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d023      	beq.n	8002d10 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002cc8:	4b16      	ldr	r3, [pc, #88]	; (8002d24 <HAL_InitTick+0x70>)
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	4b14      	ldr	r3, [pc, #80]	; (8002d20 <HAL_InitTick+0x6c>)
 8002cce:	781b      	ldrb	r3, [r3, #0]
 8002cd0:	4619      	mov	r1, r3
 8002cd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002cd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8002cda:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f001 fa25 	bl	800412e <HAL_SYSTICK_Config>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d10f      	bne.n	8002d0a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2b0f      	cmp	r3, #15
 8002cee:	d809      	bhi.n	8002d04 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	6879      	ldr	r1, [r7, #4]
 8002cf4:	f04f 30ff 	mov.w	r0, #4294967295
 8002cf8:	f001 f9fd 	bl	80040f6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002cfc:	4a0a      	ldr	r2, [pc, #40]	; (8002d28 <HAL_InitTick+0x74>)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6013      	str	r3, [r2, #0]
 8002d02:	e007      	b.n	8002d14 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	73fb      	strb	r3, [r7, #15]
 8002d08:	e004      	b.n	8002d14 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	73fb      	strb	r3, [r7, #15]
 8002d0e:	e001      	b.n	8002d14 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002d10:	2301      	movs	r3, #1
 8002d12:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002d14:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	3710      	adds	r7, #16
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	bf00      	nop
 8002d20:	20000014 	.word	0x20000014
 8002d24:	2000000c 	.word	0x2000000c
 8002d28:	20000010 	.word	0x20000010

08002d2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002d30:	4b06      	ldr	r3, [pc, #24]	; (8002d4c <HAL_IncTick+0x20>)
 8002d32:	781b      	ldrb	r3, [r3, #0]
 8002d34:	461a      	mov	r2, r3
 8002d36:	4b06      	ldr	r3, [pc, #24]	; (8002d50 <HAL_IncTick+0x24>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4413      	add	r3, r2
 8002d3c:	4a04      	ldr	r2, [pc, #16]	; (8002d50 <HAL_IncTick+0x24>)
 8002d3e:	6013      	str	r3, [r2, #0]
}
 8002d40:	bf00      	nop
 8002d42:	46bd      	mov	sp, r7
 8002d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d48:	4770      	bx	lr
 8002d4a:	bf00      	nop
 8002d4c:	20000014 	.word	0x20000014
 8002d50:	2000268c 	.word	0x2000268c

08002d54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d54:	b480      	push	{r7}
 8002d56:	af00      	add	r7, sp, #0
  return uwTick;
 8002d58:	4b03      	ldr	r3, [pc, #12]	; (8002d68 <HAL_GetTick+0x14>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d64:	4770      	bx	lr
 8002d66:	bf00      	nop
 8002d68:	2000268c 	.word	0x2000268c

08002d6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b084      	sub	sp, #16
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d74:	f7ff ffee 	bl	8002d54 <HAL_GetTick>
 8002d78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d84:	d005      	beq.n	8002d92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002d86:	4b0a      	ldr	r3, [pc, #40]	; (8002db0 <HAL_Delay+0x44>)
 8002d88:	781b      	ldrb	r3, [r3, #0]
 8002d8a:	461a      	mov	r2, r3
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	4413      	add	r3, r2
 8002d90:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002d92:	bf00      	nop
 8002d94:	f7ff ffde 	bl	8002d54 <HAL_GetTick>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	1ad3      	subs	r3, r2, r3
 8002d9e:	68fa      	ldr	r2, [r7, #12]
 8002da0:	429a      	cmp	r2, r3
 8002da2:	d8f7      	bhi.n	8002d94 <HAL_Delay+0x28>
  {
  }
}
 8002da4:	bf00      	nop
 8002da6:	bf00      	nop
 8002da8:	3710      	adds	r7, #16
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}
 8002dae:	bf00      	nop
 8002db0:	20000014 	.word	0x20000014

08002db4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002db4:	b480      	push	{r7}
 8002db6:	b083      	sub	sp, #12
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
 8002dbc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	431a      	orrs	r2, r3
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	609a      	str	r2, [r3, #8]
}
 8002dce:	bf00      	nop
 8002dd0:	370c      	adds	r7, #12
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd8:	4770      	bx	lr

08002dda <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002dda:	b480      	push	{r7}
 8002ddc:	b083      	sub	sp, #12
 8002dde:	af00      	add	r7, sp, #0
 8002de0:	6078      	str	r0, [r7, #4]
 8002de2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	431a      	orrs	r2, r3
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	609a      	str	r2, [r3, #8]
}
 8002df4:	bf00      	nop
 8002df6:	370c      	adds	r7, #12
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfe:	4770      	bx	lr

08002e00 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b083      	sub	sp, #12
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	370c      	adds	r7, #12
 8002e14:	46bd      	mov	sp, r7
 8002e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1a:	4770      	bx	lr

08002e1c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b087      	sub	sp, #28
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	60f8      	str	r0, [r7, #12]
 8002e24:	60b9      	str	r1, [r7, #8]
 8002e26:	607a      	str	r2, [r7, #4]
 8002e28:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	3360      	adds	r3, #96	; 0x60
 8002e2e:	461a      	mov	r2, r3
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	009b      	lsls	r3, r3, #2
 8002e34:	4413      	add	r3, r2
 8002e36:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	681a      	ldr	r2, [r3, #0]
 8002e3c:	4b08      	ldr	r3, [pc, #32]	; (8002e60 <LL_ADC_SetOffset+0x44>)
 8002e3e:	4013      	ands	r3, r2
 8002e40:	687a      	ldr	r2, [r7, #4]
 8002e42:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002e46:	683a      	ldr	r2, [r7, #0]
 8002e48:	430a      	orrs	r2, r1
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002e54:	bf00      	nop
 8002e56:	371c      	adds	r7, #28
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5e:	4770      	bx	lr
 8002e60:	03fff000 	.word	0x03fff000

08002e64 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b085      	sub	sp, #20
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
 8002e6c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	3360      	adds	r3, #96	; 0x60
 8002e72:	461a      	mov	r2, r3
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	009b      	lsls	r3, r3, #2
 8002e78:	4413      	add	r3, r2
 8002e7a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	3714      	adds	r7, #20
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8e:	4770      	bx	lr

08002e90 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b087      	sub	sp, #28
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	60f8      	str	r0, [r7, #12]
 8002e98:	60b9      	str	r1, [r7, #8]
 8002e9a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	3360      	adds	r3, #96	; 0x60
 8002ea0:	461a      	mov	r2, r3
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	009b      	lsls	r3, r3, #2
 8002ea6:	4413      	add	r3, r2
 8002ea8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	431a      	orrs	r2, r3
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002eba:	bf00      	nop
 8002ebc:	371c      	adds	r7, #28
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec4:	4770      	bx	lr

08002ec6 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002ec6:	b480      	push	{r7}
 8002ec8:	b087      	sub	sp, #28
 8002eca:	af00      	add	r7, sp, #0
 8002ecc:	60f8      	str	r0, [r7, #12]
 8002ece:	60b9      	str	r1, [r7, #8]
 8002ed0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	3330      	adds	r3, #48	; 0x30
 8002ed6:	461a      	mov	r2, r3
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	0a1b      	lsrs	r3, r3, #8
 8002edc:	009b      	lsls	r3, r3, #2
 8002ede:	f003 030c 	and.w	r3, r3, #12
 8002ee2:	4413      	add	r3, r2
 8002ee4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	f003 031f 	and.w	r3, r3, #31
 8002ef0:	211f      	movs	r1, #31
 8002ef2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ef6:	43db      	mvns	r3, r3
 8002ef8:	401a      	ands	r2, r3
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	0e9b      	lsrs	r3, r3, #26
 8002efe:	f003 011f 	and.w	r1, r3, #31
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	f003 031f 	and.w	r3, r3, #31
 8002f08:	fa01 f303 	lsl.w	r3, r1, r3
 8002f0c:	431a      	orrs	r2, r3
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002f12:	bf00      	nop
 8002f14:	371c      	adds	r7, #28
 8002f16:	46bd      	mov	sp, r7
 8002f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1c:	4770      	bx	lr

08002f1e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002f1e:	b480      	push	{r7}
 8002f20:	b087      	sub	sp, #28
 8002f22:	af00      	add	r7, sp, #0
 8002f24:	60f8      	str	r0, [r7, #12]
 8002f26:	60b9      	str	r1, [r7, #8]
 8002f28:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	3314      	adds	r3, #20
 8002f2e:	461a      	mov	r2, r3
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	0e5b      	lsrs	r3, r3, #25
 8002f34:	009b      	lsls	r3, r3, #2
 8002f36:	f003 0304 	and.w	r3, r3, #4
 8002f3a:	4413      	add	r3, r2
 8002f3c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	0d1b      	lsrs	r3, r3, #20
 8002f46:	f003 031f 	and.w	r3, r3, #31
 8002f4a:	2107      	movs	r1, #7
 8002f4c:	fa01 f303 	lsl.w	r3, r1, r3
 8002f50:	43db      	mvns	r3, r3
 8002f52:	401a      	ands	r2, r3
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	0d1b      	lsrs	r3, r3, #20
 8002f58:	f003 031f 	and.w	r3, r3, #31
 8002f5c:	6879      	ldr	r1, [r7, #4]
 8002f5e:	fa01 f303 	lsl.w	r3, r1, r3
 8002f62:	431a      	orrs	r2, r3
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002f68:	bf00      	nop
 8002f6a:	371c      	adds	r7, #28
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f72:	4770      	bx	lr

08002f74 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b085      	sub	sp, #20
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	60f8      	str	r0, [r7, #12]
 8002f7c:	60b9      	str	r1, [r7, #8]
 8002f7e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f8c:	43db      	mvns	r3, r3
 8002f8e:	401a      	ands	r2, r3
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	f003 0318 	and.w	r3, r3, #24
 8002f96:	4908      	ldr	r1, [pc, #32]	; (8002fb8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002f98:	40d9      	lsrs	r1, r3
 8002f9a:	68bb      	ldr	r3, [r7, #8]
 8002f9c:	400b      	ands	r3, r1
 8002f9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fa2:	431a      	orrs	r2, r3
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002faa:	bf00      	nop
 8002fac:	3714      	adds	r7, #20
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb4:	4770      	bx	lr
 8002fb6:	bf00      	nop
 8002fb8:	0007ffff 	.word	0x0007ffff

08002fbc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b083      	sub	sp, #12
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002fcc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002fd0:	687a      	ldr	r2, [r7, #4]
 8002fd2:	6093      	str	r3, [r2, #8]
}
 8002fd4:	bf00      	nop
 8002fd6:	370c      	adds	r7, #12
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fde:	4770      	bx	lr

08002fe0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b083      	sub	sp, #12
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002ff0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ff4:	d101      	bne.n	8002ffa <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e000      	b.n	8002ffc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002ffa:	2300      	movs	r3, #0
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	370c      	adds	r7, #12
 8003000:	46bd      	mov	sp, r7
 8003002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003006:	4770      	bx	lr

08003008 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003008:	b480      	push	{r7}
 800300a:	b083      	sub	sp, #12
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	689b      	ldr	r3, [r3, #8]
 8003014:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003018:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800301c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003024:	bf00      	nop
 8003026:	370c      	adds	r7, #12
 8003028:	46bd      	mov	sp, r7
 800302a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302e:	4770      	bx	lr

08003030 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003030:	b480      	push	{r7}
 8003032:	b083      	sub	sp, #12
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003040:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003044:	d101      	bne.n	800304a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003046:	2301      	movs	r3, #1
 8003048:	e000      	b.n	800304c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800304a:	2300      	movs	r3, #0
}
 800304c:	4618      	mov	r0, r3
 800304e:	370c      	adds	r7, #12
 8003050:	46bd      	mov	sp, r7
 8003052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003056:	4770      	bx	lr

08003058 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003058:	b480      	push	{r7}
 800305a:	b083      	sub	sp, #12
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003068:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800306c:	f043 0201 	orr.w	r2, r3, #1
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003074:	bf00      	nop
 8003076:	370c      	adds	r7, #12
 8003078:	46bd      	mov	sp, r7
 800307a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307e:	4770      	bx	lr

08003080 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003080:	b480      	push	{r7}
 8003082:	b083      	sub	sp, #12
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003090:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003094:	f043 0202 	orr.w	r2, r3, #2
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800309c:	bf00      	nop
 800309e:	370c      	adds	r7, #12
 80030a0:	46bd      	mov	sp, r7
 80030a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a6:	4770      	bx	lr

080030a8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b083      	sub	sp, #12
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	f003 0301 	and.w	r3, r3, #1
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	d101      	bne.n	80030c0 <LL_ADC_IsEnabled+0x18>
 80030bc:	2301      	movs	r3, #1
 80030be:	e000      	b.n	80030c2 <LL_ADC_IsEnabled+0x1a>
 80030c0:	2300      	movs	r3, #0
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	370c      	adds	r7, #12
 80030c6:	46bd      	mov	sp, r7
 80030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030cc:	4770      	bx	lr

080030ce <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80030ce:	b480      	push	{r7}
 80030d0:	b083      	sub	sp, #12
 80030d2:	af00      	add	r7, sp, #0
 80030d4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	689b      	ldr	r3, [r3, #8]
 80030da:	f003 0302 	and.w	r3, r3, #2
 80030de:	2b02      	cmp	r3, #2
 80030e0:	d101      	bne.n	80030e6 <LL_ADC_IsDisableOngoing+0x18>
 80030e2:	2301      	movs	r3, #1
 80030e4:	e000      	b.n	80030e8 <LL_ADC_IsDisableOngoing+0x1a>
 80030e6:	2300      	movs	r3, #0
}
 80030e8:	4618      	mov	r0, r3
 80030ea:	370c      	adds	r7, #12
 80030ec:	46bd      	mov	sp, r7
 80030ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f2:	4770      	bx	lr

080030f4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b083      	sub	sp, #12
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003104:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003108:	f043 0204 	orr.w	r2, r3, #4
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003110:	bf00      	nop
 8003112:	370c      	adds	r7, #12
 8003114:	46bd      	mov	sp, r7
 8003116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311a:	4770      	bx	lr

0800311c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800311c:	b480      	push	{r7}
 800311e:	b083      	sub	sp, #12
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	f003 0304 	and.w	r3, r3, #4
 800312c:	2b04      	cmp	r3, #4
 800312e:	d101      	bne.n	8003134 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003130:	2301      	movs	r3, #1
 8003132:	e000      	b.n	8003136 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003134:	2300      	movs	r3, #0
}
 8003136:	4618      	mov	r0, r3
 8003138:	370c      	adds	r7, #12
 800313a:	46bd      	mov	sp, r7
 800313c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003140:	4770      	bx	lr

08003142 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003142:	b480      	push	{r7}
 8003144:	b083      	sub	sp, #12
 8003146:	af00      	add	r7, sp, #0
 8003148:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	f003 0308 	and.w	r3, r3, #8
 8003152:	2b08      	cmp	r3, #8
 8003154:	d101      	bne.n	800315a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003156:	2301      	movs	r3, #1
 8003158:	e000      	b.n	800315c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800315a:	2300      	movs	r3, #0
}
 800315c:	4618      	mov	r0, r3
 800315e:	370c      	adds	r7, #12
 8003160:	46bd      	mov	sp, r7
 8003162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003166:	4770      	bx	lr

08003168 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b088      	sub	sp, #32
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003170:	2300      	movs	r3, #0
 8003172:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003174:	2300      	movs	r3, #0
 8003176:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d101      	bne.n	8003182 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	e12c      	b.n	80033dc <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	691b      	ldr	r3, [r3, #16]
 8003186:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800318c:	2b00      	cmp	r3, #0
 800318e:	d109      	bne.n	80031a4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003190:	6878      	ldr	r0, [r7, #4]
 8003192:	f7ff fba5 	bl	80028e0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2200      	movs	r2, #0
 800319a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2200      	movs	r2, #0
 80031a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4618      	mov	r0, r3
 80031aa:	f7ff ff19 	bl	8002fe0 <LL_ADC_IsDeepPowerDownEnabled>
 80031ae:	4603      	mov	r3, r0
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d004      	beq.n	80031be <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4618      	mov	r0, r3
 80031ba:	f7ff feff 	bl	8002fbc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4618      	mov	r0, r3
 80031c4:	f7ff ff34 	bl	8003030 <LL_ADC_IsInternalRegulatorEnabled>
 80031c8:	4603      	mov	r3, r0
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d115      	bne.n	80031fa <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4618      	mov	r0, r3
 80031d4:	f7ff ff18 	bl	8003008 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80031d8:	4b82      	ldr	r3, [pc, #520]	; (80033e4 <HAL_ADC_Init+0x27c>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	099b      	lsrs	r3, r3, #6
 80031de:	4a82      	ldr	r2, [pc, #520]	; (80033e8 <HAL_ADC_Init+0x280>)
 80031e0:	fba2 2303 	umull	r2, r3, r2, r3
 80031e4:	099b      	lsrs	r3, r3, #6
 80031e6:	3301      	adds	r3, #1
 80031e8:	005b      	lsls	r3, r3, #1
 80031ea:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80031ec:	e002      	b.n	80031f4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	3b01      	subs	r3, #1
 80031f2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d1f9      	bne.n	80031ee <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4618      	mov	r0, r3
 8003200:	f7ff ff16 	bl	8003030 <LL_ADC_IsInternalRegulatorEnabled>
 8003204:	4603      	mov	r3, r0
 8003206:	2b00      	cmp	r3, #0
 8003208:	d10d      	bne.n	8003226 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800320e:	f043 0210 	orr.w	r2, r3, #16
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800321a:	f043 0201 	orr.w	r2, r3, #1
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4618      	mov	r0, r3
 800322c:	f7ff ff76 	bl	800311c <LL_ADC_REG_IsConversionOngoing>
 8003230:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003236:	f003 0310 	and.w	r3, r3, #16
 800323a:	2b00      	cmp	r3, #0
 800323c:	f040 80c5 	bne.w	80033ca <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	2b00      	cmp	r3, #0
 8003244:	f040 80c1 	bne.w	80033ca <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800324c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003250:	f043 0202 	orr.w	r2, r3, #2
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4618      	mov	r0, r3
 800325e:	f7ff ff23 	bl	80030a8 <LL_ADC_IsEnabled>
 8003262:	4603      	mov	r3, r0
 8003264:	2b00      	cmp	r3, #0
 8003266:	d10b      	bne.n	8003280 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003268:	4860      	ldr	r0, [pc, #384]	; (80033ec <HAL_ADC_Init+0x284>)
 800326a:	f7ff ff1d 	bl	80030a8 <LL_ADC_IsEnabled>
 800326e:	4603      	mov	r3, r0
 8003270:	2b00      	cmp	r3, #0
 8003272:	d105      	bne.n	8003280 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	4619      	mov	r1, r3
 800327a:	485d      	ldr	r0, [pc, #372]	; (80033f0 <HAL_ADC_Init+0x288>)
 800327c:	f7ff fd9a 	bl	8002db4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	7e5b      	ldrb	r3, [r3, #25]
 8003284:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800328a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8003290:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8003296:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800329e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80032a0:	4313      	orrs	r3, r2
 80032a2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80032aa:	2b01      	cmp	r3, #1
 80032ac:	d106      	bne.n	80032bc <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b2:	3b01      	subs	r3, #1
 80032b4:	045b      	lsls	r3, r3, #17
 80032b6:	69ba      	ldr	r2, [r7, #24]
 80032b8:	4313      	orrs	r3, r2
 80032ba:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d009      	beq.n	80032d8 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032c8:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032d0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80032d2:	69ba      	ldr	r2, [r7, #24]
 80032d4:	4313      	orrs	r3, r2
 80032d6:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	68da      	ldr	r2, [r3, #12]
 80032de:	4b45      	ldr	r3, [pc, #276]	; (80033f4 <HAL_ADC_Init+0x28c>)
 80032e0:	4013      	ands	r3, r2
 80032e2:	687a      	ldr	r2, [r7, #4]
 80032e4:	6812      	ldr	r2, [r2, #0]
 80032e6:	69b9      	ldr	r1, [r7, #24]
 80032e8:	430b      	orrs	r3, r1
 80032ea:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4618      	mov	r0, r3
 80032f2:	f7ff ff13 	bl	800311c <LL_ADC_REG_IsConversionOngoing>
 80032f6:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4618      	mov	r0, r3
 80032fe:	f7ff ff20 	bl	8003142 <LL_ADC_INJ_IsConversionOngoing>
 8003302:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003304:	693b      	ldr	r3, [r7, #16]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d13d      	bne.n	8003386 <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d13a      	bne.n	8003386 <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003314:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800331c:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800331e:	4313      	orrs	r3, r2
 8003320:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	68db      	ldr	r3, [r3, #12]
 8003328:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800332c:	f023 0302 	bic.w	r3, r3, #2
 8003330:	687a      	ldr	r2, [r7, #4]
 8003332:	6812      	ldr	r2, [r2, #0]
 8003334:	69b9      	ldr	r1, [r7, #24]
 8003336:	430b      	orrs	r3, r1
 8003338:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003340:	2b01      	cmp	r3, #1
 8003342:	d118      	bne.n	8003376 <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	691b      	ldr	r3, [r3, #16]
 800334a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800334e:	f023 0304 	bic.w	r3, r3, #4
 8003352:	687a      	ldr	r2, [r7, #4]
 8003354:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8003356:	687a      	ldr	r2, [r7, #4]
 8003358:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800335a:	4311      	orrs	r1, r2
 800335c:	687a      	ldr	r2, [r7, #4]
 800335e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003360:	4311      	orrs	r1, r2
 8003362:	687a      	ldr	r2, [r7, #4]
 8003364:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003366:	430a      	orrs	r2, r1
 8003368:	431a      	orrs	r2, r3
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f042 0201 	orr.w	r2, r2, #1
 8003372:	611a      	str	r2, [r3, #16]
 8003374:	e007      	b.n	8003386 <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	691a      	ldr	r2, [r3, #16]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f022 0201 	bic.w	r2, r2, #1
 8003384:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	691b      	ldr	r3, [r3, #16]
 800338a:	2b01      	cmp	r3, #1
 800338c:	d10c      	bne.n	80033a8 <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003394:	f023 010f 	bic.w	r1, r3, #15
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	69db      	ldr	r3, [r3, #28]
 800339c:	1e5a      	subs	r2, r3, #1
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	430a      	orrs	r2, r1
 80033a4:	631a      	str	r2, [r3, #48]	; 0x30
 80033a6:	e007      	b.n	80033b8 <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f022 020f 	bic.w	r2, r2, #15
 80033b6:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033bc:	f023 0303 	bic.w	r3, r3, #3
 80033c0:	f043 0201 	orr.w	r2, r3, #1
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	655a      	str	r2, [r3, #84]	; 0x54
 80033c8:	e007      	b.n	80033da <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033ce:	f043 0210 	orr.w	r2, r3, #16
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80033da:	7ffb      	ldrb	r3, [r7, #31]
}
 80033dc:	4618      	mov	r0, r3
 80033de:	3720      	adds	r7, #32
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}
 80033e4:	2000000c 	.word	0x2000000c
 80033e8:	053e2d63 	.word	0x053e2d63
 80033ec:	50040000 	.word	0x50040000
 80033f0:	50040300 	.word	0x50040300
 80033f4:	fff0c007 	.word	0xfff0c007

080033f8 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b084      	sub	sp, #16
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4618      	mov	r0, r3
 8003406:	f7ff fe89 	bl	800311c <LL_ADC_REG_IsConversionOngoing>
 800340a:	4603      	mov	r3, r0
 800340c:	2b00      	cmp	r3, #0
 800340e:	d14f      	bne.n	80034b0 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003416:	2b01      	cmp	r3, #1
 8003418:	d101      	bne.n	800341e <HAL_ADC_Start+0x26>
 800341a:	2302      	movs	r3, #2
 800341c:	e04b      	b.n	80034b6 <HAL_ADC_Start+0xbe>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2201      	movs	r2, #1
 8003422:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	f000 fc36 	bl	8003c98 <ADC_Enable>
 800342c:	4603      	mov	r3, r0
 800342e:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003430:	7bfb      	ldrb	r3, [r7, #15]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d137      	bne.n	80034a6 <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800343a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800343e:	f023 0301 	bic.w	r3, r3, #1
 8003442:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800344e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003452:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003456:	d106      	bne.n	8003466 <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800345c:	f023 0206 	bic.w	r2, r3, #6
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	659a      	str	r2, [r3, #88]	; 0x58
 8003464:	e002      	b.n	800346c <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2200      	movs	r2, #0
 800346a:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	221c      	movs	r2, #28
 8003472:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2200      	movs	r2, #0
 8003478:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	68db      	ldr	r3, [r3, #12]
 8003482:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003486:	2b00      	cmp	r3, #0
 8003488:	d007      	beq.n	800349a <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800348e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003492:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4618      	mov	r0, r3
 80034a0:	f7ff fe28 	bl	80030f4 <LL_ADC_REG_StartConversion>
 80034a4:	e006      	b.n	80034b4 <HAL_ADC_Start+0xbc>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2200      	movs	r2, #0
 80034aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80034ae:	e001      	b.n	80034b4 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80034b0:	2302      	movs	r3, #2
 80034b2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 80034b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3710      	adds	r7, #16
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}

080034be <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80034be:	b480      	push	{r7}
 80034c0:	b083      	sub	sp, #12
 80034c2:	af00      	add	r7, sp, #0
 80034c4:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80034cc:	4618      	mov	r0, r3
 80034ce:	370c      	adds	r7, #12
 80034d0:	46bd      	mov	sp, r7
 80034d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d6:	4770      	bx	lr

080034d8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b0b6      	sub	sp, #216	; 0xd8
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
 80034e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80034e2:	2300      	movs	r3, #0
 80034e4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80034e8:	2300      	movs	r3, #0
 80034ea:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80034f2:	2b01      	cmp	r3, #1
 80034f4:	d101      	bne.n	80034fa <HAL_ADC_ConfigChannel+0x22>
 80034f6:	2302      	movs	r3, #2
 80034f8:	e3b9      	b.n	8003c6e <HAL_ADC_ConfigChannel+0x796>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2201      	movs	r2, #1
 80034fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4618      	mov	r0, r3
 8003508:	f7ff fe08 	bl	800311c <LL_ADC_REG_IsConversionOngoing>
 800350c:	4603      	mov	r3, r0
 800350e:	2b00      	cmp	r3, #0
 8003510:	f040 839e 	bne.w	8003c50 <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	2b05      	cmp	r3, #5
 800351a:	d824      	bhi.n	8003566 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	3b02      	subs	r3, #2
 8003522:	2b03      	cmp	r3, #3
 8003524:	d81b      	bhi.n	800355e <HAL_ADC_ConfigChannel+0x86>
 8003526:	a201      	add	r2, pc, #4	; (adr r2, 800352c <HAL_ADC_ConfigChannel+0x54>)
 8003528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800352c:	0800353d 	.word	0x0800353d
 8003530:	08003545 	.word	0x08003545
 8003534:	0800354d 	.word	0x0800354d
 8003538:	08003555 	.word	0x08003555
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	220c      	movs	r2, #12
 8003540:	605a      	str	r2, [r3, #4]
          break;
 8003542:	e011      	b.n	8003568 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	2212      	movs	r2, #18
 8003548:	605a      	str	r2, [r3, #4]
          break;
 800354a:	e00d      	b.n	8003568 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	2218      	movs	r2, #24
 8003550:	605a      	str	r2, [r3, #4]
          break;
 8003552:	e009      	b.n	8003568 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	f44f 7280 	mov.w	r2, #256	; 0x100
 800355a:	605a      	str	r2, [r3, #4]
          break;
 800355c:	e004      	b.n	8003568 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	2206      	movs	r2, #6
 8003562:	605a      	str	r2, [r3, #4]
          break;
 8003564:	e000      	b.n	8003568 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8003566:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6818      	ldr	r0, [r3, #0]
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	6859      	ldr	r1, [r3, #4]
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	461a      	mov	r2, r3
 8003576:	f7ff fca6 	bl	8002ec6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4618      	mov	r0, r3
 8003580:	f7ff fdcc 	bl	800311c <LL_ADC_REG_IsConversionOngoing>
 8003584:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4618      	mov	r0, r3
 800358e:	f7ff fdd8 	bl	8003142 <LL_ADC_INJ_IsConversionOngoing>
 8003592:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003596:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800359a:	2b00      	cmp	r3, #0
 800359c:	f040 81a6 	bne.w	80038ec <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80035a0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	f040 81a1 	bne.w	80038ec <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6818      	ldr	r0, [r3, #0]
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	6819      	ldr	r1, [r3, #0]
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	461a      	mov	r2, r3
 80035b8:	f7ff fcb1 	bl	8002f1e <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	695a      	ldr	r2, [r3, #20]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	68db      	ldr	r3, [r3, #12]
 80035c6:	08db      	lsrs	r3, r3, #3
 80035c8:	f003 0303 	and.w	r3, r3, #3
 80035cc:	005b      	lsls	r3, r3, #1
 80035ce:	fa02 f303 	lsl.w	r3, r2, r3
 80035d2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	691b      	ldr	r3, [r3, #16]
 80035da:	2b04      	cmp	r3, #4
 80035dc:	d00a      	beq.n	80035f4 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6818      	ldr	r0, [r3, #0]
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	6919      	ldr	r1, [r3, #16]
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	681a      	ldr	r2, [r3, #0]
 80035ea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80035ee:	f7ff fc15 	bl	8002e1c <LL_ADC_SetOffset>
 80035f2:	e17b      	b.n	80038ec <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	2100      	movs	r1, #0
 80035fa:	4618      	mov	r0, r3
 80035fc:	f7ff fc32 	bl	8002e64 <LL_ADC_GetOffsetChannel>
 8003600:	4603      	mov	r3, r0
 8003602:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003606:	2b00      	cmp	r3, #0
 8003608:	d10a      	bne.n	8003620 <HAL_ADC_ConfigChannel+0x148>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	2100      	movs	r1, #0
 8003610:	4618      	mov	r0, r3
 8003612:	f7ff fc27 	bl	8002e64 <LL_ADC_GetOffsetChannel>
 8003616:	4603      	mov	r3, r0
 8003618:	0e9b      	lsrs	r3, r3, #26
 800361a:	f003 021f 	and.w	r2, r3, #31
 800361e:	e01e      	b.n	800365e <HAL_ADC_ConfigChannel+0x186>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	2100      	movs	r1, #0
 8003626:	4618      	mov	r0, r3
 8003628:	f7ff fc1c 	bl	8002e64 <LL_ADC_GetOffsetChannel>
 800362c:	4603      	mov	r3, r0
 800362e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003632:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003636:	fa93 f3a3 	rbit	r3, r3
 800363a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800363e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003642:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003646:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800364a:	2b00      	cmp	r3, #0
 800364c:	d101      	bne.n	8003652 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 800364e:	2320      	movs	r3, #32
 8003650:	e004      	b.n	800365c <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8003652:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003656:	fab3 f383 	clz	r3, r3
 800365a:	b2db      	uxtb	r3, r3
 800365c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003666:	2b00      	cmp	r3, #0
 8003668:	d105      	bne.n	8003676 <HAL_ADC_ConfigChannel+0x19e>
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	0e9b      	lsrs	r3, r3, #26
 8003670:	f003 031f 	and.w	r3, r3, #31
 8003674:	e018      	b.n	80036a8 <HAL_ADC_ConfigChannel+0x1d0>
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800367e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003682:	fa93 f3a3 	rbit	r3, r3
 8003686:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800368a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800368e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8003692:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003696:	2b00      	cmp	r3, #0
 8003698:	d101      	bne.n	800369e <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 800369a:	2320      	movs	r3, #32
 800369c:	e004      	b.n	80036a8 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 800369e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80036a2:	fab3 f383 	clz	r3, r3
 80036a6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d106      	bne.n	80036ba <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	2200      	movs	r2, #0
 80036b2:	2100      	movs	r1, #0
 80036b4:	4618      	mov	r0, r3
 80036b6:	f7ff fbeb 	bl	8002e90 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	2101      	movs	r1, #1
 80036c0:	4618      	mov	r0, r3
 80036c2:	f7ff fbcf 	bl	8002e64 <LL_ADC_GetOffsetChannel>
 80036c6:	4603      	mov	r3, r0
 80036c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d10a      	bne.n	80036e6 <HAL_ADC_ConfigChannel+0x20e>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	2101      	movs	r1, #1
 80036d6:	4618      	mov	r0, r3
 80036d8:	f7ff fbc4 	bl	8002e64 <LL_ADC_GetOffsetChannel>
 80036dc:	4603      	mov	r3, r0
 80036de:	0e9b      	lsrs	r3, r3, #26
 80036e0:	f003 021f 	and.w	r2, r3, #31
 80036e4:	e01e      	b.n	8003724 <HAL_ADC_ConfigChannel+0x24c>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	2101      	movs	r1, #1
 80036ec:	4618      	mov	r0, r3
 80036ee:	f7ff fbb9 	bl	8002e64 <LL_ADC_GetOffsetChannel>
 80036f2:	4603      	mov	r3, r0
 80036f4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036f8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80036fc:	fa93 f3a3 	rbit	r3, r3
 8003700:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8003704:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003708:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800370c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003710:	2b00      	cmp	r3, #0
 8003712:	d101      	bne.n	8003718 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8003714:	2320      	movs	r3, #32
 8003716:	e004      	b.n	8003722 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8003718:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800371c:	fab3 f383 	clz	r3, r3
 8003720:	b2db      	uxtb	r3, r3
 8003722:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800372c:	2b00      	cmp	r3, #0
 800372e:	d105      	bne.n	800373c <HAL_ADC_ConfigChannel+0x264>
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	0e9b      	lsrs	r3, r3, #26
 8003736:	f003 031f 	and.w	r3, r3, #31
 800373a:	e018      	b.n	800376e <HAL_ADC_ConfigChannel+0x296>
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003744:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003748:	fa93 f3a3 	rbit	r3, r3
 800374c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8003750:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003754:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003758:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800375c:	2b00      	cmp	r3, #0
 800375e:	d101      	bne.n	8003764 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8003760:	2320      	movs	r3, #32
 8003762:	e004      	b.n	800376e <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8003764:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003768:	fab3 f383 	clz	r3, r3
 800376c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800376e:	429a      	cmp	r2, r3
 8003770:	d106      	bne.n	8003780 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	2200      	movs	r2, #0
 8003778:	2101      	movs	r1, #1
 800377a:	4618      	mov	r0, r3
 800377c:	f7ff fb88 	bl	8002e90 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	2102      	movs	r1, #2
 8003786:	4618      	mov	r0, r3
 8003788:	f7ff fb6c 	bl	8002e64 <LL_ADC_GetOffsetChannel>
 800378c:	4603      	mov	r3, r0
 800378e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003792:	2b00      	cmp	r3, #0
 8003794:	d10a      	bne.n	80037ac <HAL_ADC_ConfigChannel+0x2d4>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	2102      	movs	r1, #2
 800379c:	4618      	mov	r0, r3
 800379e:	f7ff fb61 	bl	8002e64 <LL_ADC_GetOffsetChannel>
 80037a2:	4603      	mov	r3, r0
 80037a4:	0e9b      	lsrs	r3, r3, #26
 80037a6:	f003 021f 	and.w	r2, r3, #31
 80037aa:	e01e      	b.n	80037ea <HAL_ADC_ConfigChannel+0x312>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	2102      	movs	r1, #2
 80037b2:	4618      	mov	r0, r3
 80037b4:	f7ff fb56 	bl	8002e64 <LL_ADC_GetOffsetChannel>
 80037b8:	4603      	mov	r3, r0
 80037ba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80037c2:	fa93 f3a3 	rbit	r3, r3
 80037c6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80037ca:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80037ce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80037d2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d101      	bne.n	80037de <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 80037da:	2320      	movs	r3, #32
 80037dc:	e004      	b.n	80037e8 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80037de:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80037e2:	fab3 f383 	clz	r3, r3
 80037e6:	b2db      	uxtb	r3, r3
 80037e8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d105      	bne.n	8003802 <HAL_ADC_ConfigChannel+0x32a>
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	0e9b      	lsrs	r3, r3, #26
 80037fc:	f003 031f 	and.w	r3, r3, #31
 8003800:	e016      	b.n	8003830 <HAL_ADC_ConfigChannel+0x358>
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800380a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800380e:	fa93 f3a3 	rbit	r3, r3
 8003812:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003814:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003816:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800381a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800381e:	2b00      	cmp	r3, #0
 8003820:	d101      	bne.n	8003826 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8003822:	2320      	movs	r3, #32
 8003824:	e004      	b.n	8003830 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8003826:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800382a:	fab3 f383 	clz	r3, r3
 800382e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003830:	429a      	cmp	r2, r3
 8003832:	d106      	bne.n	8003842 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	2200      	movs	r2, #0
 800383a:	2102      	movs	r1, #2
 800383c:	4618      	mov	r0, r3
 800383e:	f7ff fb27 	bl	8002e90 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	2103      	movs	r1, #3
 8003848:	4618      	mov	r0, r3
 800384a:	f7ff fb0b 	bl	8002e64 <LL_ADC_GetOffsetChannel>
 800384e:	4603      	mov	r3, r0
 8003850:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003854:	2b00      	cmp	r3, #0
 8003856:	d10a      	bne.n	800386e <HAL_ADC_ConfigChannel+0x396>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	2103      	movs	r1, #3
 800385e:	4618      	mov	r0, r3
 8003860:	f7ff fb00 	bl	8002e64 <LL_ADC_GetOffsetChannel>
 8003864:	4603      	mov	r3, r0
 8003866:	0e9b      	lsrs	r3, r3, #26
 8003868:	f003 021f 	and.w	r2, r3, #31
 800386c:	e017      	b.n	800389e <HAL_ADC_ConfigChannel+0x3c6>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	2103      	movs	r1, #3
 8003874:	4618      	mov	r0, r3
 8003876:	f7ff faf5 	bl	8002e64 <LL_ADC_GetOffsetChannel>
 800387a:	4603      	mov	r3, r0
 800387c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800387e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003880:	fa93 f3a3 	rbit	r3, r3
 8003884:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003886:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003888:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800388a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800388c:	2b00      	cmp	r3, #0
 800388e:	d101      	bne.n	8003894 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8003890:	2320      	movs	r3, #32
 8003892:	e003      	b.n	800389c <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8003894:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003896:	fab3 f383 	clz	r3, r3
 800389a:	b2db      	uxtb	r3, r3
 800389c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d105      	bne.n	80038b6 <HAL_ADC_ConfigChannel+0x3de>
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	0e9b      	lsrs	r3, r3, #26
 80038b0:	f003 031f 	and.w	r3, r3, #31
 80038b4:	e011      	b.n	80038da <HAL_ADC_ConfigChannel+0x402>
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038bc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80038be:	fa93 f3a3 	rbit	r3, r3
 80038c2:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80038c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80038c6:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80038c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d101      	bne.n	80038d2 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 80038ce:	2320      	movs	r3, #32
 80038d0:	e003      	b.n	80038da <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 80038d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038d4:	fab3 f383 	clz	r3, r3
 80038d8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80038da:	429a      	cmp	r2, r3
 80038dc:	d106      	bne.n	80038ec <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	2200      	movs	r2, #0
 80038e4:	2103      	movs	r1, #3
 80038e6:	4618      	mov	r0, r3
 80038e8:	f7ff fad2 	bl	8002e90 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4618      	mov	r0, r3
 80038f2:	f7ff fbd9 	bl	80030a8 <LL_ADC_IsEnabled>
 80038f6:	4603      	mov	r3, r0
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	f040 813f 	bne.w	8003b7c <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6818      	ldr	r0, [r3, #0]
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	6819      	ldr	r1, [r3, #0]
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	68db      	ldr	r3, [r3, #12]
 800390a:	461a      	mov	r2, r3
 800390c:	f7ff fb32 	bl	8002f74 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	68db      	ldr	r3, [r3, #12]
 8003914:	4a8e      	ldr	r2, [pc, #568]	; (8003b50 <HAL_ADC_ConfigChannel+0x678>)
 8003916:	4293      	cmp	r3, r2
 8003918:	f040 8130 	bne.w	8003b7c <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003928:	2b00      	cmp	r3, #0
 800392a:	d10b      	bne.n	8003944 <HAL_ADC_ConfigChannel+0x46c>
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	0e9b      	lsrs	r3, r3, #26
 8003932:	3301      	adds	r3, #1
 8003934:	f003 031f 	and.w	r3, r3, #31
 8003938:	2b09      	cmp	r3, #9
 800393a:	bf94      	ite	ls
 800393c:	2301      	movls	r3, #1
 800393e:	2300      	movhi	r3, #0
 8003940:	b2db      	uxtb	r3, r3
 8003942:	e019      	b.n	8003978 <HAL_ADC_ConfigChannel+0x4a0>
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800394a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800394c:	fa93 f3a3 	rbit	r3, r3
 8003950:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003952:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003954:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003956:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003958:	2b00      	cmp	r3, #0
 800395a:	d101      	bne.n	8003960 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 800395c:	2320      	movs	r3, #32
 800395e:	e003      	b.n	8003968 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8003960:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003962:	fab3 f383 	clz	r3, r3
 8003966:	b2db      	uxtb	r3, r3
 8003968:	3301      	adds	r3, #1
 800396a:	f003 031f 	and.w	r3, r3, #31
 800396e:	2b09      	cmp	r3, #9
 8003970:	bf94      	ite	ls
 8003972:	2301      	movls	r3, #1
 8003974:	2300      	movhi	r3, #0
 8003976:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003978:	2b00      	cmp	r3, #0
 800397a:	d079      	beq.n	8003a70 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003984:	2b00      	cmp	r3, #0
 8003986:	d107      	bne.n	8003998 <HAL_ADC_ConfigChannel+0x4c0>
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	0e9b      	lsrs	r3, r3, #26
 800398e:	3301      	adds	r3, #1
 8003990:	069b      	lsls	r3, r3, #26
 8003992:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003996:	e015      	b.n	80039c4 <HAL_ADC_ConfigChannel+0x4ec>
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800399e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80039a0:	fa93 f3a3 	rbit	r3, r3
 80039a4:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80039a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039a8:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80039aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d101      	bne.n	80039b4 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 80039b0:	2320      	movs	r3, #32
 80039b2:	e003      	b.n	80039bc <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 80039b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039b6:	fab3 f383 	clz	r3, r3
 80039ba:	b2db      	uxtb	r3, r3
 80039bc:	3301      	adds	r3, #1
 80039be:	069b      	lsls	r3, r3, #26
 80039c0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d109      	bne.n	80039e4 <HAL_ADC_ConfigChannel+0x50c>
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	0e9b      	lsrs	r3, r3, #26
 80039d6:	3301      	adds	r3, #1
 80039d8:	f003 031f 	and.w	r3, r3, #31
 80039dc:	2101      	movs	r1, #1
 80039de:	fa01 f303 	lsl.w	r3, r1, r3
 80039e2:	e017      	b.n	8003a14 <HAL_ADC_ConfigChannel+0x53c>
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039ec:	fa93 f3a3 	rbit	r3, r3
 80039f0:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80039f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80039f4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80039f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d101      	bne.n	8003a00 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 80039fc:	2320      	movs	r3, #32
 80039fe:	e003      	b.n	8003a08 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8003a00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a02:	fab3 f383 	clz	r3, r3
 8003a06:	b2db      	uxtb	r3, r3
 8003a08:	3301      	adds	r3, #1
 8003a0a:	f003 031f 	and.w	r3, r3, #31
 8003a0e:	2101      	movs	r1, #1
 8003a10:	fa01 f303 	lsl.w	r3, r1, r3
 8003a14:	ea42 0103 	orr.w	r1, r2, r3
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d10a      	bne.n	8003a3a <HAL_ADC_ConfigChannel+0x562>
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	0e9b      	lsrs	r3, r3, #26
 8003a2a:	3301      	adds	r3, #1
 8003a2c:	f003 021f 	and.w	r2, r3, #31
 8003a30:	4613      	mov	r3, r2
 8003a32:	005b      	lsls	r3, r3, #1
 8003a34:	4413      	add	r3, r2
 8003a36:	051b      	lsls	r3, r3, #20
 8003a38:	e018      	b.n	8003a6c <HAL_ADC_ConfigChannel+0x594>
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a42:	fa93 f3a3 	rbit	r3, r3
 8003a46:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003a48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a4a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003a4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d101      	bne.n	8003a56 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8003a52:	2320      	movs	r3, #32
 8003a54:	e003      	b.n	8003a5e <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8003a56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a58:	fab3 f383 	clz	r3, r3
 8003a5c:	b2db      	uxtb	r3, r3
 8003a5e:	3301      	adds	r3, #1
 8003a60:	f003 021f 	and.w	r2, r3, #31
 8003a64:	4613      	mov	r3, r2
 8003a66:	005b      	lsls	r3, r3, #1
 8003a68:	4413      	add	r3, r2
 8003a6a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003a6c:	430b      	orrs	r3, r1
 8003a6e:	e080      	b.n	8003b72 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d107      	bne.n	8003a8c <HAL_ADC_ConfigChannel+0x5b4>
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	0e9b      	lsrs	r3, r3, #26
 8003a82:	3301      	adds	r3, #1
 8003a84:	069b      	lsls	r3, r3, #26
 8003a86:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003a8a:	e015      	b.n	8003ab8 <HAL_ADC_ConfigChannel+0x5e0>
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a94:	fa93 f3a3 	rbit	r3, r3
 8003a98:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003a9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a9c:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d101      	bne.n	8003aa8 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8003aa4:	2320      	movs	r3, #32
 8003aa6:	e003      	b.n	8003ab0 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8003aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aaa:	fab3 f383 	clz	r3, r3
 8003aae:	b2db      	uxtb	r3, r3
 8003ab0:	3301      	adds	r3, #1
 8003ab2:	069b      	lsls	r3, r3, #26
 8003ab4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d109      	bne.n	8003ad8 <HAL_ADC_ConfigChannel+0x600>
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	0e9b      	lsrs	r3, r3, #26
 8003aca:	3301      	adds	r3, #1
 8003acc:	f003 031f 	and.w	r3, r3, #31
 8003ad0:	2101      	movs	r1, #1
 8003ad2:	fa01 f303 	lsl.w	r3, r1, r3
 8003ad6:	e017      	b.n	8003b08 <HAL_ADC_ConfigChannel+0x630>
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ade:	6a3b      	ldr	r3, [r7, #32]
 8003ae0:	fa93 f3a3 	rbit	r3, r3
 8003ae4:	61fb      	str	r3, [r7, #28]
  return result;
 8003ae6:	69fb      	ldr	r3, [r7, #28]
 8003ae8:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d101      	bne.n	8003af4 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8003af0:	2320      	movs	r3, #32
 8003af2:	e003      	b.n	8003afc <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8003af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af6:	fab3 f383 	clz	r3, r3
 8003afa:	b2db      	uxtb	r3, r3
 8003afc:	3301      	adds	r3, #1
 8003afe:	f003 031f 	and.w	r3, r3, #31
 8003b02:	2101      	movs	r1, #1
 8003b04:	fa01 f303 	lsl.w	r3, r1, r3
 8003b08:	ea42 0103 	orr.w	r1, r2, r3
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d10d      	bne.n	8003b34 <HAL_ADC_ConfigChannel+0x65c>
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	0e9b      	lsrs	r3, r3, #26
 8003b1e:	3301      	adds	r3, #1
 8003b20:	f003 021f 	and.w	r2, r3, #31
 8003b24:	4613      	mov	r3, r2
 8003b26:	005b      	lsls	r3, r3, #1
 8003b28:	4413      	add	r3, r2
 8003b2a:	3b1e      	subs	r3, #30
 8003b2c:	051b      	lsls	r3, r3, #20
 8003b2e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003b32:	e01d      	b.n	8003b70 <HAL_ADC_ConfigChannel+0x698>
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	fa93 f3a3 	rbit	r3, r3
 8003b40:	613b      	str	r3, [r7, #16]
  return result;
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003b46:	69bb      	ldr	r3, [r7, #24]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d103      	bne.n	8003b54 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8003b4c:	2320      	movs	r3, #32
 8003b4e:	e005      	b.n	8003b5c <HAL_ADC_ConfigChannel+0x684>
 8003b50:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003b54:	69bb      	ldr	r3, [r7, #24]
 8003b56:	fab3 f383 	clz	r3, r3
 8003b5a:	b2db      	uxtb	r3, r3
 8003b5c:	3301      	adds	r3, #1
 8003b5e:	f003 021f 	and.w	r2, r3, #31
 8003b62:	4613      	mov	r3, r2
 8003b64:	005b      	lsls	r3, r3, #1
 8003b66:	4413      	add	r3, r2
 8003b68:	3b1e      	subs	r3, #30
 8003b6a:	051b      	lsls	r3, r3, #20
 8003b6c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003b70:	430b      	orrs	r3, r1
 8003b72:	683a      	ldr	r2, [r7, #0]
 8003b74:	6892      	ldr	r2, [r2, #8]
 8003b76:	4619      	mov	r1, r3
 8003b78:	f7ff f9d1 	bl	8002f1e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	681a      	ldr	r2, [r3, #0]
 8003b80:	4b3d      	ldr	r3, [pc, #244]	; (8003c78 <HAL_ADC_ConfigChannel+0x7a0>)
 8003b82:	4013      	ands	r3, r2
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d06c      	beq.n	8003c62 <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003b88:	483c      	ldr	r0, [pc, #240]	; (8003c7c <HAL_ADC_ConfigChannel+0x7a4>)
 8003b8a:	f7ff f939 	bl	8002e00 <LL_ADC_GetCommonPathInternalCh>
 8003b8e:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a3a      	ldr	r2, [pc, #232]	; (8003c80 <HAL_ADC_ConfigChannel+0x7a8>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d127      	bne.n	8003bec <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003b9c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003ba0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d121      	bne.n	8003bec <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a35      	ldr	r2, [pc, #212]	; (8003c84 <HAL_ADC_ConfigChannel+0x7ac>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d157      	bne.n	8003c62 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003bb2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003bb6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003bba:	4619      	mov	r1, r3
 8003bbc:	482f      	ldr	r0, [pc, #188]	; (8003c7c <HAL_ADC_ConfigChannel+0x7a4>)
 8003bbe:	f7ff f90c 	bl	8002dda <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003bc2:	4b31      	ldr	r3, [pc, #196]	; (8003c88 <HAL_ADC_ConfigChannel+0x7b0>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	099b      	lsrs	r3, r3, #6
 8003bc8:	4a30      	ldr	r2, [pc, #192]	; (8003c8c <HAL_ADC_ConfigChannel+0x7b4>)
 8003bca:	fba2 2303 	umull	r2, r3, r2, r3
 8003bce:	099b      	lsrs	r3, r3, #6
 8003bd0:	1c5a      	adds	r2, r3, #1
 8003bd2:	4613      	mov	r3, r2
 8003bd4:	005b      	lsls	r3, r3, #1
 8003bd6:	4413      	add	r3, r2
 8003bd8:	009b      	lsls	r3, r3, #2
 8003bda:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003bdc:	e002      	b.n	8003be4 <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	3b01      	subs	r3, #1
 8003be2:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d1f9      	bne.n	8003bde <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003bea:	e03a      	b.n	8003c62 <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a27      	ldr	r2, [pc, #156]	; (8003c90 <HAL_ADC_ConfigChannel+0x7b8>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d113      	bne.n	8003c1e <HAL_ADC_ConfigChannel+0x746>
 8003bf6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003bfa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d10d      	bne.n	8003c1e <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a1f      	ldr	r2, [pc, #124]	; (8003c84 <HAL_ADC_ConfigChannel+0x7ac>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d12a      	bne.n	8003c62 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003c0c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003c10:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c14:	4619      	mov	r1, r3
 8003c16:	4819      	ldr	r0, [pc, #100]	; (8003c7c <HAL_ADC_ConfigChannel+0x7a4>)
 8003c18:	f7ff f8df 	bl	8002dda <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003c1c:	e021      	b.n	8003c62 <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a1c      	ldr	r2, [pc, #112]	; (8003c94 <HAL_ADC_ConfigChannel+0x7bc>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d11c      	bne.n	8003c62 <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003c28:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003c2c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d116      	bne.n	8003c62 <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a12      	ldr	r2, [pc, #72]	; (8003c84 <HAL_ADC_ConfigChannel+0x7ac>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d111      	bne.n	8003c62 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003c3e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003c42:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003c46:	4619      	mov	r1, r3
 8003c48:	480c      	ldr	r0, [pc, #48]	; (8003c7c <HAL_ADC_ConfigChannel+0x7a4>)
 8003c4a:	f7ff f8c6 	bl	8002dda <LL_ADC_SetCommonPathInternalCh>
 8003c4e:	e008      	b.n	8003c62 <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c54:	f043 0220 	orr.w	r2, r3, #32
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2200      	movs	r2, #0
 8003c66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003c6a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	37d8      	adds	r7, #216	; 0xd8
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}
 8003c76:	bf00      	nop
 8003c78:	80080000 	.word	0x80080000
 8003c7c:	50040300 	.word	0x50040300
 8003c80:	c7520000 	.word	0xc7520000
 8003c84:	50040000 	.word	0x50040000
 8003c88:	2000000c 	.word	0x2000000c
 8003c8c:	053e2d63 	.word	0x053e2d63
 8003c90:	cb840000 	.word	0xcb840000
 8003c94:	80000001 	.word	0x80000001

08003c98 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b084      	sub	sp, #16
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4618      	mov	r0, r3
 8003caa:	f7ff f9fd 	bl	80030a8 <LL_ADC_IsEnabled>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d169      	bne.n	8003d88 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	689a      	ldr	r2, [r3, #8]
 8003cba:	4b36      	ldr	r3, [pc, #216]	; (8003d94 <ADC_Enable+0xfc>)
 8003cbc:	4013      	ands	r3, r2
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d00d      	beq.n	8003cde <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cc6:	f043 0210 	orr.w	r2, r3, #16
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cd2:	f043 0201 	orr.w	r2, r3, #1
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	e055      	b.n	8003d8a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f7ff f9b8 	bl	8003058 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003ce8:	482b      	ldr	r0, [pc, #172]	; (8003d98 <ADC_Enable+0x100>)
 8003cea:	f7ff f889 	bl	8002e00 <LL_ADC_GetCommonPathInternalCh>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d013      	beq.n	8003d20 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003cf8:	4b28      	ldr	r3, [pc, #160]	; (8003d9c <ADC_Enable+0x104>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	099b      	lsrs	r3, r3, #6
 8003cfe:	4a28      	ldr	r2, [pc, #160]	; (8003da0 <ADC_Enable+0x108>)
 8003d00:	fba2 2303 	umull	r2, r3, r2, r3
 8003d04:	099b      	lsrs	r3, r3, #6
 8003d06:	1c5a      	adds	r2, r3, #1
 8003d08:	4613      	mov	r3, r2
 8003d0a:	005b      	lsls	r3, r3, #1
 8003d0c:	4413      	add	r3, r2
 8003d0e:	009b      	lsls	r3, r3, #2
 8003d10:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8003d12:	e002      	b.n	8003d1a <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	3b01      	subs	r3, #1
 8003d18:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d1f9      	bne.n	8003d14 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003d20:	f7ff f818 	bl	8002d54 <HAL_GetTick>
 8003d24:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003d26:	e028      	b.n	8003d7a <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	f7ff f9bb 	bl	80030a8 <LL_ADC_IsEnabled>
 8003d32:	4603      	mov	r3, r0
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d104      	bne.n	8003d42 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	f7ff f98b 	bl	8003058 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003d42:	f7ff f807 	bl	8002d54 <HAL_GetTick>
 8003d46:	4602      	mov	r2, r0
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	1ad3      	subs	r3, r2, r3
 8003d4c:	2b02      	cmp	r3, #2
 8003d4e:	d914      	bls.n	8003d7a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f003 0301 	and.w	r3, r3, #1
 8003d5a:	2b01      	cmp	r3, #1
 8003d5c:	d00d      	beq.n	8003d7a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d62:	f043 0210 	orr.w	r2, r3, #16
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d6e:	f043 0201 	orr.w	r2, r3, #1
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	e007      	b.n	8003d8a <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f003 0301 	and.w	r3, r3, #1
 8003d84:	2b01      	cmp	r3, #1
 8003d86:	d1cf      	bne.n	8003d28 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003d88:	2300      	movs	r3, #0
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	3710      	adds	r7, #16
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}
 8003d92:	bf00      	nop
 8003d94:	8000003f 	.word	0x8000003f
 8003d98:	50040300 	.word	0x50040300
 8003d9c:	2000000c 	.word	0x2000000c
 8003da0:	053e2d63 	.word	0x053e2d63

08003da4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b084      	sub	sp, #16
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4618      	mov	r0, r3
 8003db2:	f7ff f98c 	bl	80030ce <LL_ADC_IsDisableOngoing>
 8003db6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	f7ff f973 	bl	80030a8 <LL_ADC_IsEnabled>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d047      	beq.n	8003e58 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d144      	bne.n	8003e58 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	689b      	ldr	r3, [r3, #8]
 8003dd4:	f003 030d 	and.w	r3, r3, #13
 8003dd8:	2b01      	cmp	r3, #1
 8003dda:	d10c      	bne.n	8003df6 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4618      	mov	r0, r3
 8003de2:	f7ff f94d 	bl	8003080 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	2203      	movs	r2, #3
 8003dec:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003dee:	f7fe ffb1 	bl	8002d54 <HAL_GetTick>
 8003df2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003df4:	e029      	b.n	8003e4a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dfa:	f043 0210 	orr.w	r2, r3, #16
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e06:	f043 0201 	orr.w	r2, r3, #1
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	e023      	b.n	8003e5a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003e12:	f7fe ff9f 	bl	8002d54 <HAL_GetTick>
 8003e16:	4602      	mov	r2, r0
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	1ad3      	subs	r3, r2, r3
 8003e1c:	2b02      	cmp	r3, #2
 8003e1e:	d914      	bls.n	8003e4a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	689b      	ldr	r3, [r3, #8]
 8003e26:	f003 0301 	and.w	r3, r3, #1
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d00d      	beq.n	8003e4a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e32:	f043 0210 	orr.w	r2, r3, #16
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e3e:	f043 0201 	orr.w	r2, r3, #1
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003e46:	2301      	movs	r3, #1
 8003e48:	e007      	b.n	8003e5a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	689b      	ldr	r3, [r3, #8]
 8003e50:	f003 0301 	and.w	r3, r3, #1
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d1dc      	bne.n	8003e12 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003e58:	2300      	movs	r3, #0
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	3710      	adds	r7, #16
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}

08003e62 <LL_ADC_StartCalibration>:
{
 8003e62:	b480      	push	{r7}
 8003e64:	b083      	sub	sp, #12
 8003e66:	af00      	add	r7, sp, #0
 8003e68:	6078      	str	r0, [r7, #4]
 8003e6a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8003e74:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003e78:	683a      	ldr	r2, [r7, #0]
 8003e7a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	609a      	str	r2, [r3, #8]
}
 8003e88:	bf00      	nop
 8003e8a:	370c      	adds	r7, #12
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e92:	4770      	bx	lr

08003e94 <LL_ADC_IsCalibrationOnGoing>:
{
 8003e94:	b480      	push	{r7}
 8003e96:	b083      	sub	sp, #12
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	689b      	ldr	r3, [r3, #8]
 8003ea0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003ea4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003ea8:	d101      	bne.n	8003eae <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003eaa:	2301      	movs	r3, #1
 8003eac:	e000      	b.n	8003eb0 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003eae:	2300      	movs	r3, #0
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	370c      	adds	r7, #12
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eba:	4770      	bx	lr

08003ebc <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b084      	sub	sp, #16
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
 8003ec4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003ed0:	2b01      	cmp	r3, #1
 8003ed2:	d101      	bne.n	8003ed8 <HAL_ADCEx_Calibration_Start+0x1c>
 8003ed4:	2302      	movs	r3, #2
 8003ed6:	e04d      	b.n	8003f74 <HAL_ADCEx_Calibration_Start+0xb8>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2201      	movs	r2, #1
 8003edc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003ee0:	6878      	ldr	r0, [r7, #4]
 8003ee2:	f7ff ff5f 	bl	8003da4 <ADC_Disable>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003eea:	7bfb      	ldrb	r3, [r7, #15]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d136      	bne.n	8003f5e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ef4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003ef8:	f023 0302 	bic.w	r3, r3, #2
 8003efc:	f043 0202 	orr.w	r2, r3, #2
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	6839      	ldr	r1, [r7, #0]
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	f7ff ffa9 	bl	8003e62 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003f10:	e014      	b.n	8003f3c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	3301      	adds	r3, #1
 8003f16:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 8003f1e:	d30d      	bcc.n	8003f3c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f24:	f023 0312 	bic.w	r3, r3, #18
 8003f28:	f043 0210 	orr.w	r2, r3, #16
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2200      	movs	r2, #0
 8003f34:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8003f38:	2301      	movs	r3, #1
 8003f3a:	e01b      	b.n	8003f74 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4618      	mov	r0, r3
 8003f42:	f7ff ffa7 	bl	8003e94 <LL_ADC_IsCalibrationOnGoing>
 8003f46:	4603      	mov	r3, r0
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d1e2      	bne.n	8003f12 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f50:	f023 0303 	bic.w	r3, r3, #3
 8003f54:	f043 0201 	orr.w	r2, r3, #1
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	655a      	str	r2, [r3, #84]	; 0x54
 8003f5c:	e005      	b.n	8003f6a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f62:	f043 0210 	orr.w	r2, r3, #16
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003f72:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f74:	4618      	mov	r0, r3
 8003f76:	3710      	adds	r7, #16
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bd80      	pop	{r7, pc}

08003f7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b085      	sub	sp, #20
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	f003 0307 	and.w	r3, r3, #7
 8003f8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003f8c:	4b0c      	ldr	r3, [pc, #48]	; (8003fc0 <__NVIC_SetPriorityGrouping+0x44>)
 8003f8e:	68db      	ldr	r3, [r3, #12]
 8003f90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003f92:	68ba      	ldr	r2, [r7, #8]
 8003f94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003f98:	4013      	ands	r3, r2
 8003f9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003fa4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003fa8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003fac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003fae:	4a04      	ldr	r2, [pc, #16]	; (8003fc0 <__NVIC_SetPriorityGrouping+0x44>)
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	60d3      	str	r3, [r2, #12]
}
 8003fb4:	bf00      	nop
 8003fb6:	3714      	adds	r7, #20
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbe:	4770      	bx	lr
 8003fc0:	e000ed00 	.word	0xe000ed00

08003fc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003fc8:	4b04      	ldr	r3, [pc, #16]	; (8003fdc <__NVIC_GetPriorityGrouping+0x18>)
 8003fca:	68db      	ldr	r3, [r3, #12]
 8003fcc:	0a1b      	lsrs	r3, r3, #8
 8003fce:	f003 0307 	and.w	r3, r3, #7
}
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fda:	4770      	bx	lr
 8003fdc:	e000ed00 	.word	0xe000ed00

08003fe0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b083      	sub	sp, #12
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	6039      	str	r1, [r7, #0]
 8003fea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003fec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	db0a      	blt.n	800400a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	b2da      	uxtb	r2, r3
 8003ff8:	490c      	ldr	r1, [pc, #48]	; (800402c <__NVIC_SetPriority+0x4c>)
 8003ffa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ffe:	0112      	lsls	r2, r2, #4
 8004000:	b2d2      	uxtb	r2, r2
 8004002:	440b      	add	r3, r1
 8004004:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004008:	e00a      	b.n	8004020 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	b2da      	uxtb	r2, r3
 800400e:	4908      	ldr	r1, [pc, #32]	; (8004030 <__NVIC_SetPriority+0x50>)
 8004010:	79fb      	ldrb	r3, [r7, #7]
 8004012:	f003 030f 	and.w	r3, r3, #15
 8004016:	3b04      	subs	r3, #4
 8004018:	0112      	lsls	r2, r2, #4
 800401a:	b2d2      	uxtb	r2, r2
 800401c:	440b      	add	r3, r1
 800401e:	761a      	strb	r2, [r3, #24]
}
 8004020:	bf00      	nop
 8004022:	370c      	adds	r7, #12
 8004024:	46bd      	mov	sp, r7
 8004026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402a:	4770      	bx	lr
 800402c:	e000e100 	.word	0xe000e100
 8004030:	e000ed00 	.word	0xe000ed00

08004034 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004034:	b480      	push	{r7}
 8004036:	b089      	sub	sp, #36	; 0x24
 8004038:	af00      	add	r7, sp, #0
 800403a:	60f8      	str	r0, [r7, #12]
 800403c:	60b9      	str	r1, [r7, #8]
 800403e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	f003 0307 	and.w	r3, r3, #7
 8004046:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004048:	69fb      	ldr	r3, [r7, #28]
 800404a:	f1c3 0307 	rsb	r3, r3, #7
 800404e:	2b04      	cmp	r3, #4
 8004050:	bf28      	it	cs
 8004052:	2304      	movcs	r3, #4
 8004054:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004056:	69fb      	ldr	r3, [r7, #28]
 8004058:	3304      	adds	r3, #4
 800405a:	2b06      	cmp	r3, #6
 800405c:	d902      	bls.n	8004064 <NVIC_EncodePriority+0x30>
 800405e:	69fb      	ldr	r3, [r7, #28]
 8004060:	3b03      	subs	r3, #3
 8004062:	e000      	b.n	8004066 <NVIC_EncodePriority+0x32>
 8004064:	2300      	movs	r3, #0
 8004066:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004068:	f04f 32ff 	mov.w	r2, #4294967295
 800406c:	69bb      	ldr	r3, [r7, #24]
 800406e:	fa02 f303 	lsl.w	r3, r2, r3
 8004072:	43da      	mvns	r2, r3
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	401a      	ands	r2, r3
 8004078:	697b      	ldr	r3, [r7, #20]
 800407a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800407c:	f04f 31ff 	mov.w	r1, #4294967295
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	fa01 f303 	lsl.w	r3, r1, r3
 8004086:	43d9      	mvns	r1, r3
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800408c:	4313      	orrs	r3, r2
         );
}
 800408e:	4618      	mov	r0, r3
 8004090:	3724      	adds	r7, #36	; 0x24
 8004092:	46bd      	mov	sp, r7
 8004094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004098:	4770      	bx	lr
	...

0800409c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b082      	sub	sp, #8
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	3b01      	subs	r3, #1
 80040a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80040ac:	d301      	bcc.n	80040b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80040ae:	2301      	movs	r3, #1
 80040b0:	e00f      	b.n	80040d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80040b2:	4a0a      	ldr	r2, [pc, #40]	; (80040dc <SysTick_Config+0x40>)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	3b01      	subs	r3, #1
 80040b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80040ba:	210f      	movs	r1, #15
 80040bc:	f04f 30ff 	mov.w	r0, #4294967295
 80040c0:	f7ff ff8e 	bl	8003fe0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80040c4:	4b05      	ldr	r3, [pc, #20]	; (80040dc <SysTick_Config+0x40>)
 80040c6:	2200      	movs	r2, #0
 80040c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80040ca:	4b04      	ldr	r3, [pc, #16]	; (80040dc <SysTick_Config+0x40>)
 80040cc:	2207      	movs	r2, #7
 80040ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80040d0:	2300      	movs	r3, #0
}
 80040d2:	4618      	mov	r0, r3
 80040d4:	3708      	adds	r7, #8
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}
 80040da:	bf00      	nop
 80040dc:	e000e010 	.word	0xe000e010

080040e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b082      	sub	sp, #8
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80040e8:	6878      	ldr	r0, [r7, #4]
 80040ea:	f7ff ff47 	bl	8003f7c <__NVIC_SetPriorityGrouping>
}
 80040ee:	bf00      	nop
 80040f0:	3708      	adds	r7, #8
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd80      	pop	{r7, pc}

080040f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80040f6:	b580      	push	{r7, lr}
 80040f8:	b086      	sub	sp, #24
 80040fa:	af00      	add	r7, sp, #0
 80040fc:	4603      	mov	r3, r0
 80040fe:	60b9      	str	r1, [r7, #8]
 8004100:	607a      	str	r2, [r7, #4]
 8004102:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004104:	2300      	movs	r3, #0
 8004106:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004108:	f7ff ff5c 	bl	8003fc4 <__NVIC_GetPriorityGrouping>
 800410c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800410e:	687a      	ldr	r2, [r7, #4]
 8004110:	68b9      	ldr	r1, [r7, #8]
 8004112:	6978      	ldr	r0, [r7, #20]
 8004114:	f7ff ff8e 	bl	8004034 <NVIC_EncodePriority>
 8004118:	4602      	mov	r2, r0
 800411a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800411e:	4611      	mov	r1, r2
 8004120:	4618      	mov	r0, r3
 8004122:	f7ff ff5d 	bl	8003fe0 <__NVIC_SetPriority>
}
 8004126:	bf00      	nop
 8004128:	3718      	adds	r7, #24
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}

0800412e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800412e:	b580      	push	{r7, lr}
 8004130:	b082      	sub	sp, #8
 8004132:	af00      	add	r7, sp, #0
 8004134:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004136:	6878      	ldr	r0, [r7, #4]
 8004138:	f7ff ffb0 	bl	800409c <SysTick_Config>
 800413c:	4603      	mov	r3, r0
}
 800413e:	4618      	mov	r0, r3
 8004140:	3708      	adds	r7, #8
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}
	...

08004148 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004148:	b480      	push	{r7}
 800414a:	b087      	sub	sp, #28
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
 8004150:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004152:	2300      	movs	r3, #0
 8004154:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004156:	e148      	b.n	80043ea <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	681a      	ldr	r2, [r3, #0]
 800415c:	2101      	movs	r1, #1
 800415e:	697b      	ldr	r3, [r7, #20]
 8004160:	fa01 f303 	lsl.w	r3, r1, r3
 8004164:	4013      	ands	r3, r2
 8004166:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	2b00      	cmp	r3, #0
 800416c:	f000 813a 	beq.w	80043e4 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	f003 0303 	and.w	r3, r3, #3
 8004178:	2b01      	cmp	r3, #1
 800417a:	d005      	beq.n	8004188 <HAL_GPIO_Init+0x40>
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	f003 0303 	and.w	r3, r3, #3
 8004184:	2b02      	cmp	r3, #2
 8004186:	d130      	bne.n	80041ea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	689b      	ldr	r3, [r3, #8]
 800418c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	005b      	lsls	r3, r3, #1
 8004192:	2203      	movs	r2, #3
 8004194:	fa02 f303 	lsl.w	r3, r2, r3
 8004198:	43db      	mvns	r3, r3
 800419a:	693a      	ldr	r2, [r7, #16]
 800419c:	4013      	ands	r3, r2
 800419e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	68da      	ldr	r2, [r3, #12]
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	005b      	lsls	r3, r3, #1
 80041a8:	fa02 f303 	lsl.w	r3, r2, r3
 80041ac:	693a      	ldr	r2, [r7, #16]
 80041ae:	4313      	orrs	r3, r2
 80041b0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	693a      	ldr	r2, [r7, #16]
 80041b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80041be:	2201      	movs	r2, #1
 80041c0:	697b      	ldr	r3, [r7, #20]
 80041c2:	fa02 f303 	lsl.w	r3, r2, r3
 80041c6:	43db      	mvns	r3, r3
 80041c8:	693a      	ldr	r2, [r7, #16]
 80041ca:	4013      	ands	r3, r2
 80041cc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	091b      	lsrs	r3, r3, #4
 80041d4:	f003 0201 	and.w	r2, r3, #1
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	fa02 f303 	lsl.w	r3, r2, r3
 80041de:	693a      	ldr	r2, [r7, #16]
 80041e0:	4313      	orrs	r3, r2
 80041e2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	693a      	ldr	r2, [r7, #16]
 80041e8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	f003 0303 	and.w	r3, r3, #3
 80041f2:	2b03      	cmp	r3, #3
 80041f4:	d017      	beq.n	8004226 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	68db      	ldr	r3, [r3, #12]
 80041fa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	005b      	lsls	r3, r3, #1
 8004200:	2203      	movs	r2, #3
 8004202:	fa02 f303 	lsl.w	r3, r2, r3
 8004206:	43db      	mvns	r3, r3
 8004208:	693a      	ldr	r2, [r7, #16]
 800420a:	4013      	ands	r3, r2
 800420c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	689a      	ldr	r2, [r3, #8]
 8004212:	697b      	ldr	r3, [r7, #20]
 8004214:	005b      	lsls	r3, r3, #1
 8004216:	fa02 f303 	lsl.w	r3, r2, r3
 800421a:	693a      	ldr	r2, [r7, #16]
 800421c:	4313      	orrs	r3, r2
 800421e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	693a      	ldr	r2, [r7, #16]
 8004224:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	f003 0303 	and.w	r3, r3, #3
 800422e:	2b02      	cmp	r3, #2
 8004230:	d123      	bne.n	800427a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	08da      	lsrs	r2, r3, #3
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	3208      	adds	r2, #8
 800423a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800423e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	f003 0307 	and.w	r3, r3, #7
 8004246:	009b      	lsls	r3, r3, #2
 8004248:	220f      	movs	r2, #15
 800424a:	fa02 f303 	lsl.w	r3, r2, r3
 800424e:	43db      	mvns	r3, r3
 8004250:	693a      	ldr	r2, [r7, #16]
 8004252:	4013      	ands	r3, r2
 8004254:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	691a      	ldr	r2, [r3, #16]
 800425a:	697b      	ldr	r3, [r7, #20]
 800425c:	f003 0307 	and.w	r3, r3, #7
 8004260:	009b      	lsls	r3, r3, #2
 8004262:	fa02 f303 	lsl.w	r3, r2, r3
 8004266:	693a      	ldr	r2, [r7, #16]
 8004268:	4313      	orrs	r3, r2
 800426a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	08da      	lsrs	r2, r3, #3
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	3208      	adds	r2, #8
 8004274:	6939      	ldr	r1, [r7, #16]
 8004276:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004280:	697b      	ldr	r3, [r7, #20]
 8004282:	005b      	lsls	r3, r3, #1
 8004284:	2203      	movs	r2, #3
 8004286:	fa02 f303 	lsl.w	r3, r2, r3
 800428a:	43db      	mvns	r3, r3
 800428c:	693a      	ldr	r2, [r7, #16]
 800428e:	4013      	ands	r3, r2
 8004290:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	f003 0203 	and.w	r2, r3, #3
 800429a:	697b      	ldr	r3, [r7, #20]
 800429c:	005b      	lsls	r3, r3, #1
 800429e:	fa02 f303 	lsl.w	r3, r2, r3
 80042a2:	693a      	ldr	r2, [r7, #16]
 80042a4:	4313      	orrs	r3, r2
 80042a6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	693a      	ldr	r2, [r7, #16]
 80042ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	f000 8094 	beq.w	80043e4 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80042bc:	4b52      	ldr	r3, [pc, #328]	; (8004408 <HAL_GPIO_Init+0x2c0>)
 80042be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042c0:	4a51      	ldr	r2, [pc, #324]	; (8004408 <HAL_GPIO_Init+0x2c0>)
 80042c2:	f043 0301 	orr.w	r3, r3, #1
 80042c6:	6613      	str	r3, [r2, #96]	; 0x60
 80042c8:	4b4f      	ldr	r3, [pc, #316]	; (8004408 <HAL_GPIO_Init+0x2c0>)
 80042ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042cc:	f003 0301 	and.w	r3, r3, #1
 80042d0:	60bb      	str	r3, [r7, #8]
 80042d2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80042d4:	4a4d      	ldr	r2, [pc, #308]	; (800440c <HAL_GPIO_Init+0x2c4>)
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	089b      	lsrs	r3, r3, #2
 80042da:	3302      	adds	r3, #2
 80042dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042e0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	f003 0303 	and.w	r3, r3, #3
 80042e8:	009b      	lsls	r3, r3, #2
 80042ea:	220f      	movs	r2, #15
 80042ec:	fa02 f303 	lsl.w	r3, r2, r3
 80042f0:	43db      	mvns	r3, r3
 80042f2:	693a      	ldr	r2, [r7, #16]
 80042f4:	4013      	ands	r3, r2
 80042f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80042fe:	d00d      	beq.n	800431c <HAL_GPIO_Init+0x1d4>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	4a43      	ldr	r2, [pc, #268]	; (8004410 <HAL_GPIO_Init+0x2c8>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d007      	beq.n	8004318 <HAL_GPIO_Init+0x1d0>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	4a42      	ldr	r2, [pc, #264]	; (8004414 <HAL_GPIO_Init+0x2cc>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d101      	bne.n	8004314 <HAL_GPIO_Init+0x1cc>
 8004310:	2302      	movs	r3, #2
 8004312:	e004      	b.n	800431e <HAL_GPIO_Init+0x1d6>
 8004314:	2307      	movs	r3, #7
 8004316:	e002      	b.n	800431e <HAL_GPIO_Init+0x1d6>
 8004318:	2301      	movs	r3, #1
 800431a:	e000      	b.n	800431e <HAL_GPIO_Init+0x1d6>
 800431c:	2300      	movs	r3, #0
 800431e:	697a      	ldr	r2, [r7, #20]
 8004320:	f002 0203 	and.w	r2, r2, #3
 8004324:	0092      	lsls	r2, r2, #2
 8004326:	4093      	lsls	r3, r2
 8004328:	693a      	ldr	r2, [r7, #16]
 800432a:	4313      	orrs	r3, r2
 800432c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800432e:	4937      	ldr	r1, [pc, #220]	; (800440c <HAL_GPIO_Init+0x2c4>)
 8004330:	697b      	ldr	r3, [r7, #20]
 8004332:	089b      	lsrs	r3, r3, #2
 8004334:	3302      	adds	r3, #2
 8004336:	693a      	ldr	r2, [r7, #16]
 8004338:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800433c:	4b36      	ldr	r3, [pc, #216]	; (8004418 <HAL_GPIO_Init+0x2d0>)
 800433e:	689b      	ldr	r3, [r3, #8]
 8004340:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	43db      	mvns	r3, r3
 8004346:	693a      	ldr	r2, [r7, #16]
 8004348:	4013      	ands	r3, r2
 800434a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004354:	2b00      	cmp	r3, #0
 8004356:	d003      	beq.n	8004360 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8004358:	693a      	ldr	r2, [r7, #16]
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	4313      	orrs	r3, r2
 800435e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004360:	4a2d      	ldr	r2, [pc, #180]	; (8004418 <HAL_GPIO_Init+0x2d0>)
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004366:	4b2c      	ldr	r3, [pc, #176]	; (8004418 <HAL_GPIO_Init+0x2d0>)
 8004368:	68db      	ldr	r3, [r3, #12]
 800436a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	43db      	mvns	r3, r3
 8004370:	693a      	ldr	r2, [r7, #16]
 8004372:	4013      	ands	r3, r2
 8004374:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800437e:	2b00      	cmp	r3, #0
 8004380:	d003      	beq.n	800438a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8004382:	693a      	ldr	r2, [r7, #16]
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	4313      	orrs	r3, r2
 8004388:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800438a:	4a23      	ldr	r2, [pc, #140]	; (8004418 <HAL_GPIO_Init+0x2d0>)
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004390:	4b21      	ldr	r3, [pc, #132]	; (8004418 <HAL_GPIO_Init+0x2d0>)
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	43db      	mvns	r3, r3
 800439a:	693a      	ldr	r2, [r7, #16]
 800439c:	4013      	ands	r3, r2
 800439e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d003      	beq.n	80043b4 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80043ac:	693a      	ldr	r2, [r7, #16]
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	4313      	orrs	r3, r2
 80043b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80043b4:	4a18      	ldr	r2, [pc, #96]	; (8004418 <HAL_GPIO_Init+0x2d0>)
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80043ba:	4b17      	ldr	r3, [pc, #92]	; (8004418 <HAL_GPIO_Init+0x2d0>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	43db      	mvns	r3, r3
 80043c4:	693a      	ldr	r2, [r7, #16]
 80043c6:	4013      	ands	r3, r2
 80043c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d003      	beq.n	80043de <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80043d6:	693a      	ldr	r2, [r7, #16]
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	4313      	orrs	r3, r2
 80043dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80043de:	4a0e      	ldr	r2, [pc, #56]	; (8004418 <HAL_GPIO_Init+0x2d0>)
 80043e0:	693b      	ldr	r3, [r7, #16]
 80043e2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	3301      	adds	r3, #1
 80043e8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	681a      	ldr	r2, [r3, #0]
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	fa22 f303 	lsr.w	r3, r2, r3
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	f47f aeaf 	bne.w	8004158 <HAL_GPIO_Init+0x10>
  }
}
 80043fa:	bf00      	nop
 80043fc:	bf00      	nop
 80043fe:	371c      	adds	r7, #28
 8004400:	46bd      	mov	sp, r7
 8004402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004406:	4770      	bx	lr
 8004408:	40021000 	.word	0x40021000
 800440c:	40010000 	.word	0x40010000
 8004410:	48000400 	.word	0x48000400
 8004414:	48000800 	.word	0x48000800
 8004418:	40010400 	.word	0x40010400

0800441c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800441c:	b480      	push	{r7}
 800441e:	b085      	sub	sp, #20
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
 8004424:	460b      	mov	r3, r1
 8004426:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	691a      	ldr	r2, [r3, #16]
 800442c:	887b      	ldrh	r3, [r7, #2]
 800442e:	4013      	ands	r3, r2
 8004430:	2b00      	cmp	r3, #0
 8004432:	d002      	beq.n	800443a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004434:	2301      	movs	r3, #1
 8004436:	73fb      	strb	r3, [r7, #15]
 8004438:	e001      	b.n	800443e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800443a:	2300      	movs	r3, #0
 800443c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800443e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004440:	4618      	mov	r0, r3
 8004442:	3714      	adds	r7, #20
 8004444:	46bd      	mov	sp, r7
 8004446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444a:	4770      	bx	lr

0800444c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800444c:	b480      	push	{r7}
 800444e:	b083      	sub	sp, #12
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
 8004454:	460b      	mov	r3, r1
 8004456:	807b      	strh	r3, [r7, #2]
 8004458:	4613      	mov	r3, r2
 800445a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800445c:	787b      	ldrb	r3, [r7, #1]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d003      	beq.n	800446a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004462:	887a      	ldrh	r2, [r7, #2]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004468:	e002      	b.n	8004470 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800446a:	887a      	ldrh	r2, [r7, #2]
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004470:	bf00      	nop
 8004472:	370c      	adds	r7, #12
 8004474:	46bd      	mov	sp, r7
 8004476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447a:	4770      	bx	lr

0800447c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800447c:	b480      	push	{r7}
 800447e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004480:	4b05      	ldr	r3, [pc, #20]	; (8004498 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a04      	ldr	r2, [pc, #16]	; (8004498 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004486:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800448a:	6013      	str	r3, [r2, #0]
}
 800448c:	bf00      	nop
 800448e:	46bd      	mov	sp, r7
 8004490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004494:	4770      	bx	lr
 8004496:	bf00      	nop
 8004498:	40007000 	.word	0x40007000

0800449c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800449c:	b480      	push	{r7}
 800449e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80044a0:	4b04      	ldr	r3, [pc, #16]	; (80044b4 <HAL_PWREx_GetVoltageRange+0x18>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80044a8:	4618      	mov	r0, r3
 80044aa:	46bd      	mov	sp, r7
 80044ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b0:	4770      	bx	lr
 80044b2:	bf00      	nop
 80044b4:	40007000 	.word	0x40007000

080044b8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80044b8:	b480      	push	{r7}
 80044ba:	b085      	sub	sp, #20
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044c6:	d130      	bne.n	800452a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80044c8:	4b23      	ldr	r3, [pc, #140]	; (8004558 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80044d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044d4:	d038      	beq.n	8004548 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80044d6:	4b20      	ldr	r3, [pc, #128]	; (8004558 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80044de:	4a1e      	ldr	r2, [pc, #120]	; (8004558 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80044e0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80044e4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80044e6:	4b1d      	ldr	r3, [pc, #116]	; (800455c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	2232      	movs	r2, #50	; 0x32
 80044ec:	fb02 f303 	mul.w	r3, r2, r3
 80044f0:	4a1b      	ldr	r2, [pc, #108]	; (8004560 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80044f2:	fba2 2303 	umull	r2, r3, r2, r3
 80044f6:	0c9b      	lsrs	r3, r3, #18
 80044f8:	3301      	adds	r3, #1
 80044fa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80044fc:	e002      	b.n	8004504 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	3b01      	subs	r3, #1
 8004502:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004504:	4b14      	ldr	r3, [pc, #80]	; (8004558 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004506:	695b      	ldr	r3, [r3, #20]
 8004508:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800450c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004510:	d102      	bne.n	8004518 <HAL_PWREx_ControlVoltageScaling+0x60>
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d1f2      	bne.n	80044fe <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004518:	4b0f      	ldr	r3, [pc, #60]	; (8004558 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800451a:	695b      	ldr	r3, [r3, #20]
 800451c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004520:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004524:	d110      	bne.n	8004548 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004526:	2303      	movs	r3, #3
 8004528:	e00f      	b.n	800454a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800452a:	4b0b      	ldr	r3, [pc, #44]	; (8004558 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004532:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004536:	d007      	beq.n	8004548 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004538:	4b07      	ldr	r3, [pc, #28]	; (8004558 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004540:	4a05      	ldr	r2, [pc, #20]	; (8004558 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004542:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004546:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004548:	2300      	movs	r3, #0
}
 800454a:	4618      	mov	r0, r3
 800454c:	3714      	adds	r7, #20
 800454e:	46bd      	mov	sp, r7
 8004550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004554:	4770      	bx	lr
 8004556:	bf00      	nop
 8004558:	40007000 	.word	0x40007000
 800455c:	2000000c 	.word	0x2000000c
 8004560:	431bde83 	.word	0x431bde83

08004564 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b088      	sub	sp, #32
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d102      	bne.n	8004578 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004572:	2301      	movs	r3, #1
 8004574:	f000 bc02 	b.w	8004d7c <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004578:	4b96      	ldr	r3, [pc, #600]	; (80047d4 <HAL_RCC_OscConfig+0x270>)
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	f003 030c 	and.w	r3, r3, #12
 8004580:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004582:	4b94      	ldr	r3, [pc, #592]	; (80047d4 <HAL_RCC_OscConfig+0x270>)
 8004584:	68db      	ldr	r3, [r3, #12]
 8004586:	f003 0303 	and.w	r3, r3, #3
 800458a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f003 0310 	and.w	r3, r3, #16
 8004594:	2b00      	cmp	r3, #0
 8004596:	f000 80e4 	beq.w	8004762 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800459a:	69bb      	ldr	r3, [r7, #24]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d007      	beq.n	80045b0 <HAL_RCC_OscConfig+0x4c>
 80045a0:	69bb      	ldr	r3, [r7, #24]
 80045a2:	2b0c      	cmp	r3, #12
 80045a4:	f040 808b 	bne.w	80046be <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	2b01      	cmp	r3, #1
 80045ac:	f040 8087 	bne.w	80046be <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80045b0:	4b88      	ldr	r3, [pc, #544]	; (80047d4 <HAL_RCC_OscConfig+0x270>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f003 0302 	and.w	r3, r3, #2
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d005      	beq.n	80045c8 <HAL_RCC_OscConfig+0x64>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	699b      	ldr	r3, [r3, #24]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d101      	bne.n	80045c8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80045c4:	2301      	movs	r3, #1
 80045c6:	e3d9      	b.n	8004d7c <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6a1a      	ldr	r2, [r3, #32]
 80045cc:	4b81      	ldr	r3, [pc, #516]	; (80047d4 <HAL_RCC_OscConfig+0x270>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f003 0308 	and.w	r3, r3, #8
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d004      	beq.n	80045e2 <HAL_RCC_OscConfig+0x7e>
 80045d8:	4b7e      	ldr	r3, [pc, #504]	; (80047d4 <HAL_RCC_OscConfig+0x270>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80045e0:	e005      	b.n	80045ee <HAL_RCC_OscConfig+0x8a>
 80045e2:	4b7c      	ldr	r3, [pc, #496]	; (80047d4 <HAL_RCC_OscConfig+0x270>)
 80045e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80045e8:	091b      	lsrs	r3, r3, #4
 80045ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d223      	bcs.n	800463a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6a1b      	ldr	r3, [r3, #32]
 80045f6:	4618      	mov	r0, r3
 80045f8:	f000 fd54 	bl	80050a4 <RCC_SetFlashLatencyFromMSIRange>
 80045fc:	4603      	mov	r3, r0
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d001      	beq.n	8004606 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8004602:	2301      	movs	r3, #1
 8004604:	e3ba      	b.n	8004d7c <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004606:	4b73      	ldr	r3, [pc, #460]	; (80047d4 <HAL_RCC_OscConfig+0x270>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4a72      	ldr	r2, [pc, #456]	; (80047d4 <HAL_RCC_OscConfig+0x270>)
 800460c:	f043 0308 	orr.w	r3, r3, #8
 8004610:	6013      	str	r3, [r2, #0]
 8004612:	4b70      	ldr	r3, [pc, #448]	; (80047d4 <HAL_RCC_OscConfig+0x270>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6a1b      	ldr	r3, [r3, #32]
 800461e:	496d      	ldr	r1, [pc, #436]	; (80047d4 <HAL_RCC_OscConfig+0x270>)
 8004620:	4313      	orrs	r3, r2
 8004622:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004624:	4b6b      	ldr	r3, [pc, #428]	; (80047d4 <HAL_RCC_OscConfig+0x270>)
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	69db      	ldr	r3, [r3, #28]
 8004630:	021b      	lsls	r3, r3, #8
 8004632:	4968      	ldr	r1, [pc, #416]	; (80047d4 <HAL_RCC_OscConfig+0x270>)
 8004634:	4313      	orrs	r3, r2
 8004636:	604b      	str	r3, [r1, #4]
 8004638:	e025      	b.n	8004686 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800463a:	4b66      	ldr	r3, [pc, #408]	; (80047d4 <HAL_RCC_OscConfig+0x270>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a65      	ldr	r2, [pc, #404]	; (80047d4 <HAL_RCC_OscConfig+0x270>)
 8004640:	f043 0308 	orr.w	r3, r3, #8
 8004644:	6013      	str	r3, [r2, #0]
 8004646:	4b63      	ldr	r3, [pc, #396]	; (80047d4 <HAL_RCC_OscConfig+0x270>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6a1b      	ldr	r3, [r3, #32]
 8004652:	4960      	ldr	r1, [pc, #384]	; (80047d4 <HAL_RCC_OscConfig+0x270>)
 8004654:	4313      	orrs	r3, r2
 8004656:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004658:	4b5e      	ldr	r3, [pc, #376]	; (80047d4 <HAL_RCC_OscConfig+0x270>)
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	69db      	ldr	r3, [r3, #28]
 8004664:	021b      	lsls	r3, r3, #8
 8004666:	495b      	ldr	r1, [pc, #364]	; (80047d4 <HAL_RCC_OscConfig+0x270>)
 8004668:	4313      	orrs	r3, r2
 800466a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800466c:	69bb      	ldr	r3, [r7, #24]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d109      	bne.n	8004686 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6a1b      	ldr	r3, [r3, #32]
 8004676:	4618      	mov	r0, r3
 8004678:	f000 fd14 	bl	80050a4 <RCC_SetFlashLatencyFromMSIRange>
 800467c:	4603      	mov	r3, r0
 800467e:	2b00      	cmp	r3, #0
 8004680:	d001      	beq.n	8004686 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8004682:	2301      	movs	r3, #1
 8004684:	e37a      	b.n	8004d7c <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004686:	f000 fc81 	bl	8004f8c <HAL_RCC_GetSysClockFreq>
 800468a:	4602      	mov	r2, r0
 800468c:	4b51      	ldr	r3, [pc, #324]	; (80047d4 <HAL_RCC_OscConfig+0x270>)
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	091b      	lsrs	r3, r3, #4
 8004692:	f003 030f 	and.w	r3, r3, #15
 8004696:	4950      	ldr	r1, [pc, #320]	; (80047d8 <HAL_RCC_OscConfig+0x274>)
 8004698:	5ccb      	ldrb	r3, [r1, r3]
 800469a:	f003 031f 	and.w	r3, r3, #31
 800469e:	fa22 f303 	lsr.w	r3, r2, r3
 80046a2:	4a4e      	ldr	r2, [pc, #312]	; (80047dc <HAL_RCC_OscConfig+0x278>)
 80046a4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80046a6:	4b4e      	ldr	r3, [pc, #312]	; (80047e0 <HAL_RCC_OscConfig+0x27c>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4618      	mov	r0, r3
 80046ac:	f7fe fb02 	bl	8002cb4 <HAL_InitTick>
 80046b0:	4603      	mov	r3, r0
 80046b2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80046b4:	7bfb      	ldrb	r3, [r7, #15]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d052      	beq.n	8004760 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80046ba:	7bfb      	ldrb	r3, [r7, #15]
 80046bc:	e35e      	b.n	8004d7c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	699b      	ldr	r3, [r3, #24]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d032      	beq.n	800472c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80046c6:	4b43      	ldr	r3, [pc, #268]	; (80047d4 <HAL_RCC_OscConfig+0x270>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a42      	ldr	r2, [pc, #264]	; (80047d4 <HAL_RCC_OscConfig+0x270>)
 80046cc:	f043 0301 	orr.w	r3, r3, #1
 80046d0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80046d2:	f7fe fb3f 	bl	8002d54 <HAL_GetTick>
 80046d6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80046d8:	e008      	b.n	80046ec <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80046da:	f7fe fb3b 	bl	8002d54 <HAL_GetTick>
 80046de:	4602      	mov	r2, r0
 80046e0:	693b      	ldr	r3, [r7, #16]
 80046e2:	1ad3      	subs	r3, r2, r3
 80046e4:	2b02      	cmp	r3, #2
 80046e6:	d901      	bls.n	80046ec <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80046e8:	2303      	movs	r3, #3
 80046ea:	e347      	b.n	8004d7c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80046ec:	4b39      	ldr	r3, [pc, #228]	; (80047d4 <HAL_RCC_OscConfig+0x270>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f003 0302 	and.w	r3, r3, #2
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d0f0      	beq.n	80046da <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80046f8:	4b36      	ldr	r3, [pc, #216]	; (80047d4 <HAL_RCC_OscConfig+0x270>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a35      	ldr	r2, [pc, #212]	; (80047d4 <HAL_RCC_OscConfig+0x270>)
 80046fe:	f043 0308 	orr.w	r3, r3, #8
 8004702:	6013      	str	r3, [r2, #0]
 8004704:	4b33      	ldr	r3, [pc, #204]	; (80047d4 <HAL_RCC_OscConfig+0x270>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6a1b      	ldr	r3, [r3, #32]
 8004710:	4930      	ldr	r1, [pc, #192]	; (80047d4 <HAL_RCC_OscConfig+0x270>)
 8004712:	4313      	orrs	r3, r2
 8004714:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004716:	4b2f      	ldr	r3, [pc, #188]	; (80047d4 <HAL_RCC_OscConfig+0x270>)
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	69db      	ldr	r3, [r3, #28]
 8004722:	021b      	lsls	r3, r3, #8
 8004724:	492b      	ldr	r1, [pc, #172]	; (80047d4 <HAL_RCC_OscConfig+0x270>)
 8004726:	4313      	orrs	r3, r2
 8004728:	604b      	str	r3, [r1, #4]
 800472a:	e01a      	b.n	8004762 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800472c:	4b29      	ldr	r3, [pc, #164]	; (80047d4 <HAL_RCC_OscConfig+0x270>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a28      	ldr	r2, [pc, #160]	; (80047d4 <HAL_RCC_OscConfig+0x270>)
 8004732:	f023 0301 	bic.w	r3, r3, #1
 8004736:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004738:	f7fe fb0c 	bl	8002d54 <HAL_GetTick>
 800473c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800473e:	e008      	b.n	8004752 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004740:	f7fe fb08 	bl	8002d54 <HAL_GetTick>
 8004744:	4602      	mov	r2, r0
 8004746:	693b      	ldr	r3, [r7, #16]
 8004748:	1ad3      	subs	r3, r2, r3
 800474a:	2b02      	cmp	r3, #2
 800474c:	d901      	bls.n	8004752 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800474e:	2303      	movs	r3, #3
 8004750:	e314      	b.n	8004d7c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004752:	4b20      	ldr	r3, [pc, #128]	; (80047d4 <HAL_RCC_OscConfig+0x270>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f003 0302 	and.w	r3, r3, #2
 800475a:	2b00      	cmp	r3, #0
 800475c:	d1f0      	bne.n	8004740 <HAL_RCC_OscConfig+0x1dc>
 800475e:	e000      	b.n	8004762 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004760:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f003 0301 	and.w	r3, r3, #1
 800476a:	2b00      	cmp	r3, #0
 800476c:	d073      	beq.n	8004856 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800476e:	69bb      	ldr	r3, [r7, #24]
 8004770:	2b08      	cmp	r3, #8
 8004772:	d005      	beq.n	8004780 <HAL_RCC_OscConfig+0x21c>
 8004774:	69bb      	ldr	r3, [r7, #24]
 8004776:	2b0c      	cmp	r3, #12
 8004778:	d10e      	bne.n	8004798 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	2b03      	cmp	r3, #3
 800477e:	d10b      	bne.n	8004798 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004780:	4b14      	ldr	r3, [pc, #80]	; (80047d4 <HAL_RCC_OscConfig+0x270>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004788:	2b00      	cmp	r3, #0
 800478a:	d063      	beq.n	8004854 <HAL_RCC_OscConfig+0x2f0>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d15f      	bne.n	8004854 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004794:	2301      	movs	r3, #1
 8004796:	e2f1      	b.n	8004d7c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047a0:	d106      	bne.n	80047b0 <HAL_RCC_OscConfig+0x24c>
 80047a2:	4b0c      	ldr	r3, [pc, #48]	; (80047d4 <HAL_RCC_OscConfig+0x270>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a0b      	ldr	r2, [pc, #44]	; (80047d4 <HAL_RCC_OscConfig+0x270>)
 80047a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047ac:	6013      	str	r3, [r2, #0]
 80047ae:	e025      	b.n	80047fc <HAL_RCC_OscConfig+0x298>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80047b8:	d114      	bne.n	80047e4 <HAL_RCC_OscConfig+0x280>
 80047ba:	4b06      	ldr	r3, [pc, #24]	; (80047d4 <HAL_RCC_OscConfig+0x270>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a05      	ldr	r2, [pc, #20]	; (80047d4 <HAL_RCC_OscConfig+0x270>)
 80047c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80047c4:	6013      	str	r3, [r2, #0]
 80047c6:	4b03      	ldr	r3, [pc, #12]	; (80047d4 <HAL_RCC_OscConfig+0x270>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a02      	ldr	r2, [pc, #8]	; (80047d4 <HAL_RCC_OscConfig+0x270>)
 80047cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047d0:	6013      	str	r3, [r2, #0]
 80047d2:	e013      	b.n	80047fc <HAL_RCC_OscConfig+0x298>
 80047d4:	40021000 	.word	0x40021000
 80047d8:	08007698 	.word	0x08007698
 80047dc:	2000000c 	.word	0x2000000c
 80047e0:	20000010 	.word	0x20000010
 80047e4:	4ba0      	ldr	r3, [pc, #640]	; (8004a68 <HAL_RCC_OscConfig+0x504>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a9f      	ldr	r2, [pc, #636]	; (8004a68 <HAL_RCC_OscConfig+0x504>)
 80047ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047ee:	6013      	str	r3, [r2, #0]
 80047f0:	4b9d      	ldr	r3, [pc, #628]	; (8004a68 <HAL_RCC_OscConfig+0x504>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a9c      	ldr	r2, [pc, #624]	; (8004a68 <HAL_RCC_OscConfig+0x504>)
 80047f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80047fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d013      	beq.n	800482c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004804:	f7fe faa6 	bl	8002d54 <HAL_GetTick>
 8004808:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800480a:	e008      	b.n	800481e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800480c:	f7fe faa2 	bl	8002d54 <HAL_GetTick>
 8004810:	4602      	mov	r2, r0
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	1ad3      	subs	r3, r2, r3
 8004816:	2b64      	cmp	r3, #100	; 0x64
 8004818:	d901      	bls.n	800481e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800481a:	2303      	movs	r3, #3
 800481c:	e2ae      	b.n	8004d7c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800481e:	4b92      	ldr	r3, [pc, #584]	; (8004a68 <HAL_RCC_OscConfig+0x504>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004826:	2b00      	cmp	r3, #0
 8004828:	d0f0      	beq.n	800480c <HAL_RCC_OscConfig+0x2a8>
 800482a:	e014      	b.n	8004856 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800482c:	f7fe fa92 	bl	8002d54 <HAL_GetTick>
 8004830:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004832:	e008      	b.n	8004846 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004834:	f7fe fa8e 	bl	8002d54 <HAL_GetTick>
 8004838:	4602      	mov	r2, r0
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	1ad3      	subs	r3, r2, r3
 800483e:	2b64      	cmp	r3, #100	; 0x64
 8004840:	d901      	bls.n	8004846 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004842:	2303      	movs	r3, #3
 8004844:	e29a      	b.n	8004d7c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004846:	4b88      	ldr	r3, [pc, #544]	; (8004a68 <HAL_RCC_OscConfig+0x504>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800484e:	2b00      	cmp	r3, #0
 8004850:	d1f0      	bne.n	8004834 <HAL_RCC_OscConfig+0x2d0>
 8004852:	e000      	b.n	8004856 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004854:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f003 0302 	and.w	r3, r3, #2
 800485e:	2b00      	cmp	r3, #0
 8004860:	d060      	beq.n	8004924 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004862:	69bb      	ldr	r3, [r7, #24]
 8004864:	2b04      	cmp	r3, #4
 8004866:	d005      	beq.n	8004874 <HAL_RCC_OscConfig+0x310>
 8004868:	69bb      	ldr	r3, [r7, #24]
 800486a:	2b0c      	cmp	r3, #12
 800486c:	d119      	bne.n	80048a2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	2b02      	cmp	r3, #2
 8004872:	d116      	bne.n	80048a2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004874:	4b7c      	ldr	r3, [pc, #496]	; (8004a68 <HAL_RCC_OscConfig+0x504>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800487c:	2b00      	cmp	r3, #0
 800487e:	d005      	beq.n	800488c <HAL_RCC_OscConfig+0x328>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	68db      	ldr	r3, [r3, #12]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d101      	bne.n	800488c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004888:	2301      	movs	r3, #1
 800488a:	e277      	b.n	8004d7c <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800488c:	4b76      	ldr	r3, [pc, #472]	; (8004a68 <HAL_RCC_OscConfig+0x504>)
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	691b      	ldr	r3, [r3, #16]
 8004898:	061b      	lsls	r3, r3, #24
 800489a:	4973      	ldr	r1, [pc, #460]	; (8004a68 <HAL_RCC_OscConfig+0x504>)
 800489c:	4313      	orrs	r3, r2
 800489e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80048a0:	e040      	b.n	8004924 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	68db      	ldr	r3, [r3, #12]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d023      	beq.n	80048f2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80048aa:	4b6f      	ldr	r3, [pc, #444]	; (8004a68 <HAL_RCC_OscConfig+0x504>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a6e      	ldr	r2, [pc, #440]	; (8004a68 <HAL_RCC_OscConfig+0x504>)
 80048b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048b6:	f7fe fa4d 	bl	8002d54 <HAL_GetTick>
 80048ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80048bc:	e008      	b.n	80048d0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048be:	f7fe fa49 	bl	8002d54 <HAL_GetTick>
 80048c2:	4602      	mov	r2, r0
 80048c4:	693b      	ldr	r3, [r7, #16]
 80048c6:	1ad3      	subs	r3, r2, r3
 80048c8:	2b02      	cmp	r3, #2
 80048ca:	d901      	bls.n	80048d0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80048cc:	2303      	movs	r3, #3
 80048ce:	e255      	b.n	8004d7c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80048d0:	4b65      	ldr	r3, [pc, #404]	; (8004a68 <HAL_RCC_OscConfig+0x504>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d0f0      	beq.n	80048be <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048dc:	4b62      	ldr	r3, [pc, #392]	; (8004a68 <HAL_RCC_OscConfig+0x504>)
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	691b      	ldr	r3, [r3, #16]
 80048e8:	061b      	lsls	r3, r3, #24
 80048ea:	495f      	ldr	r1, [pc, #380]	; (8004a68 <HAL_RCC_OscConfig+0x504>)
 80048ec:	4313      	orrs	r3, r2
 80048ee:	604b      	str	r3, [r1, #4]
 80048f0:	e018      	b.n	8004924 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80048f2:	4b5d      	ldr	r3, [pc, #372]	; (8004a68 <HAL_RCC_OscConfig+0x504>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4a5c      	ldr	r2, [pc, #368]	; (8004a68 <HAL_RCC_OscConfig+0x504>)
 80048f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80048fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048fe:	f7fe fa29 	bl	8002d54 <HAL_GetTick>
 8004902:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004904:	e008      	b.n	8004918 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004906:	f7fe fa25 	bl	8002d54 <HAL_GetTick>
 800490a:	4602      	mov	r2, r0
 800490c:	693b      	ldr	r3, [r7, #16]
 800490e:	1ad3      	subs	r3, r2, r3
 8004910:	2b02      	cmp	r3, #2
 8004912:	d901      	bls.n	8004918 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004914:	2303      	movs	r3, #3
 8004916:	e231      	b.n	8004d7c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004918:	4b53      	ldr	r3, [pc, #332]	; (8004a68 <HAL_RCC_OscConfig+0x504>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004920:	2b00      	cmp	r3, #0
 8004922:	d1f0      	bne.n	8004906 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f003 0308 	and.w	r3, r3, #8
 800492c:	2b00      	cmp	r3, #0
 800492e:	d03c      	beq.n	80049aa <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	695b      	ldr	r3, [r3, #20]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d01c      	beq.n	8004972 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004938:	4b4b      	ldr	r3, [pc, #300]	; (8004a68 <HAL_RCC_OscConfig+0x504>)
 800493a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800493e:	4a4a      	ldr	r2, [pc, #296]	; (8004a68 <HAL_RCC_OscConfig+0x504>)
 8004940:	f043 0301 	orr.w	r3, r3, #1
 8004944:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004948:	f7fe fa04 	bl	8002d54 <HAL_GetTick>
 800494c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800494e:	e008      	b.n	8004962 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004950:	f7fe fa00 	bl	8002d54 <HAL_GetTick>
 8004954:	4602      	mov	r2, r0
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	1ad3      	subs	r3, r2, r3
 800495a:	2b02      	cmp	r3, #2
 800495c:	d901      	bls.n	8004962 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800495e:	2303      	movs	r3, #3
 8004960:	e20c      	b.n	8004d7c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004962:	4b41      	ldr	r3, [pc, #260]	; (8004a68 <HAL_RCC_OscConfig+0x504>)
 8004964:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004968:	f003 0302 	and.w	r3, r3, #2
 800496c:	2b00      	cmp	r3, #0
 800496e:	d0ef      	beq.n	8004950 <HAL_RCC_OscConfig+0x3ec>
 8004970:	e01b      	b.n	80049aa <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004972:	4b3d      	ldr	r3, [pc, #244]	; (8004a68 <HAL_RCC_OscConfig+0x504>)
 8004974:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004978:	4a3b      	ldr	r2, [pc, #236]	; (8004a68 <HAL_RCC_OscConfig+0x504>)
 800497a:	f023 0301 	bic.w	r3, r3, #1
 800497e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004982:	f7fe f9e7 	bl	8002d54 <HAL_GetTick>
 8004986:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004988:	e008      	b.n	800499c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800498a:	f7fe f9e3 	bl	8002d54 <HAL_GetTick>
 800498e:	4602      	mov	r2, r0
 8004990:	693b      	ldr	r3, [r7, #16]
 8004992:	1ad3      	subs	r3, r2, r3
 8004994:	2b02      	cmp	r3, #2
 8004996:	d901      	bls.n	800499c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004998:	2303      	movs	r3, #3
 800499a:	e1ef      	b.n	8004d7c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800499c:	4b32      	ldr	r3, [pc, #200]	; (8004a68 <HAL_RCC_OscConfig+0x504>)
 800499e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049a2:	f003 0302 	and.w	r3, r3, #2
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d1ef      	bne.n	800498a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f003 0304 	and.w	r3, r3, #4
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	f000 80a6 	beq.w	8004b04 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80049b8:	2300      	movs	r3, #0
 80049ba:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80049bc:	4b2a      	ldr	r3, [pc, #168]	; (8004a68 <HAL_RCC_OscConfig+0x504>)
 80049be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d10d      	bne.n	80049e4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80049c8:	4b27      	ldr	r3, [pc, #156]	; (8004a68 <HAL_RCC_OscConfig+0x504>)
 80049ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049cc:	4a26      	ldr	r2, [pc, #152]	; (8004a68 <HAL_RCC_OscConfig+0x504>)
 80049ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049d2:	6593      	str	r3, [r2, #88]	; 0x58
 80049d4:	4b24      	ldr	r3, [pc, #144]	; (8004a68 <HAL_RCC_OscConfig+0x504>)
 80049d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049dc:	60bb      	str	r3, [r7, #8]
 80049de:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80049e0:	2301      	movs	r3, #1
 80049e2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80049e4:	4b21      	ldr	r3, [pc, #132]	; (8004a6c <HAL_RCC_OscConfig+0x508>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d118      	bne.n	8004a22 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80049f0:	4b1e      	ldr	r3, [pc, #120]	; (8004a6c <HAL_RCC_OscConfig+0x508>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a1d      	ldr	r2, [pc, #116]	; (8004a6c <HAL_RCC_OscConfig+0x508>)
 80049f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049fa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80049fc:	f7fe f9aa 	bl	8002d54 <HAL_GetTick>
 8004a00:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a02:	e008      	b.n	8004a16 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a04:	f7fe f9a6 	bl	8002d54 <HAL_GetTick>
 8004a08:	4602      	mov	r2, r0
 8004a0a:	693b      	ldr	r3, [r7, #16]
 8004a0c:	1ad3      	subs	r3, r2, r3
 8004a0e:	2b02      	cmp	r3, #2
 8004a10:	d901      	bls.n	8004a16 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004a12:	2303      	movs	r3, #3
 8004a14:	e1b2      	b.n	8004d7c <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a16:	4b15      	ldr	r3, [pc, #84]	; (8004a6c <HAL_RCC_OscConfig+0x508>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d0f0      	beq.n	8004a04 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	689b      	ldr	r3, [r3, #8]
 8004a26:	2b01      	cmp	r3, #1
 8004a28:	d108      	bne.n	8004a3c <HAL_RCC_OscConfig+0x4d8>
 8004a2a:	4b0f      	ldr	r3, [pc, #60]	; (8004a68 <HAL_RCC_OscConfig+0x504>)
 8004a2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a30:	4a0d      	ldr	r2, [pc, #52]	; (8004a68 <HAL_RCC_OscConfig+0x504>)
 8004a32:	f043 0301 	orr.w	r3, r3, #1
 8004a36:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004a3a:	e029      	b.n	8004a90 <HAL_RCC_OscConfig+0x52c>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	689b      	ldr	r3, [r3, #8]
 8004a40:	2b05      	cmp	r3, #5
 8004a42:	d115      	bne.n	8004a70 <HAL_RCC_OscConfig+0x50c>
 8004a44:	4b08      	ldr	r3, [pc, #32]	; (8004a68 <HAL_RCC_OscConfig+0x504>)
 8004a46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a4a:	4a07      	ldr	r2, [pc, #28]	; (8004a68 <HAL_RCC_OscConfig+0x504>)
 8004a4c:	f043 0304 	orr.w	r3, r3, #4
 8004a50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004a54:	4b04      	ldr	r3, [pc, #16]	; (8004a68 <HAL_RCC_OscConfig+0x504>)
 8004a56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a5a:	4a03      	ldr	r2, [pc, #12]	; (8004a68 <HAL_RCC_OscConfig+0x504>)
 8004a5c:	f043 0301 	orr.w	r3, r3, #1
 8004a60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004a64:	e014      	b.n	8004a90 <HAL_RCC_OscConfig+0x52c>
 8004a66:	bf00      	nop
 8004a68:	40021000 	.word	0x40021000
 8004a6c:	40007000 	.word	0x40007000
 8004a70:	4b9a      	ldr	r3, [pc, #616]	; (8004cdc <HAL_RCC_OscConfig+0x778>)
 8004a72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a76:	4a99      	ldr	r2, [pc, #612]	; (8004cdc <HAL_RCC_OscConfig+0x778>)
 8004a78:	f023 0301 	bic.w	r3, r3, #1
 8004a7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004a80:	4b96      	ldr	r3, [pc, #600]	; (8004cdc <HAL_RCC_OscConfig+0x778>)
 8004a82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a86:	4a95      	ldr	r2, [pc, #596]	; (8004cdc <HAL_RCC_OscConfig+0x778>)
 8004a88:	f023 0304 	bic.w	r3, r3, #4
 8004a8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	689b      	ldr	r3, [r3, #8]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d016      	beq.n	8004ac6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a98:	f7fe f95c 	bl	8002d54 <HAL_GetTick>
 8004a9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a9e:	e00a      	b.n	8004ab6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004aa0:	f7fe f958 	bl	8002d54 <HAL_GetTick>
 8004aa4:	4602      	mov	r2, r0
 8004aa6:	693b      	ldr	r3, [r7, #16]
 8004aa8:	1ad3      	subs	r3, r2, r3
 8004aaa:	f241 3288 	movw	r2, #5000	; 0x1388
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d901      	bls.n	8004ab6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004ab2:	2303      	movs	r3, #3
 8004ab4:	e162      	b.n	8004d7c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ab6:	4b89      	ldr	r3, [pc, #548]	; (8004cdc <HAL_RCC_OscConfig+0x778>)
 8004ab8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004abc:	f003 0302 	and.w	r3, r3, #2
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d0ed      	beq.n	8004aa0 <HAL_RCC_OscConfig+0x53c>
 8004ac4:	e015      	b.n	8004af2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ac6:	f7fe f945 	bl	8002d54 <HAL_GetTick>
 8004aca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004acc:	e00a      	b.n	8004ae4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ace:	f7fe f941 	bl	8002d54 <HAL_GetTick>
 8004ad2:	4602      	mov	r2, r0
 8004ad4:	693b      	ldr	r3, [r7, #16]
 8004ad6:	1ad3      	subs	r3, r2, r3
 8004ad8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d901      	bls.n	8004ae4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004ae0:	2303      	movs	r3, #3
 8004ae2:	e14b      	b.n	8004d7c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004ae4:	4b7d      	ldr	r3, [pc, #500]	; (8004cdc <HAL_RCC_OscConfig+0x778>)
 8004ae6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004aea:	f003 0302 	and.w	r3, r3, #2
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d1ed      	bne.n	8004ace <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004af2:	7ffb      	ldrb	r3, [r7, #31]
 8004af4:	2b01      	cmp	r3, #1
 8004af6:	d105      	bne.n	8004b04 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004af8:	4b78      	ldr	r3, [pc, #480]	; (8004cdc <HAL_RCC_OscConfig+0x778>)
 8004afa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004afc:	4a77      	ldr	r2, [pc, #476]	; (8004cdc <HAL_RCC_OscConfig+0x778>)
 8004afe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b02:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f003 0320 	and.w	r3, r3, #32
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d03c      	beq.n	8004b8a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d01c      	beq.n	8004b52 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004b18:	4b70      	ldr	r3, [pc, #448]	; (8004cdc <HAL_RCC_OscConfig+0x778>)
 8004b1a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004b1e:	4a6f      	ldr	r2, [pc, #444]	; (8004cdc <HAL_RCC_OscConfig+0x778>)
 8004b20:	f043 0301 	orr.w	r3, r3, #1
 8004b24:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b28:	f7fe f914 	bl	8002d54 <HAL_GetTick>
 8004b2c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004b2e:	e008      	b.n	8004b42 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004b30:	f7fe f910 	bl	8002d54 <HAL_GetTick>
 8004b34:	4602      	mov	r2, r0
 8004b36:	693b      	ldr	r3, [r7, #16]
 8004b38:	1ad3      	subs	r3, r2, r3
 8004b3a:	2b02      	cmp	r3, #2
 8004b3c:	d901      	bls.n	8004b42 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004b3e:	2303      	movs	r3, #3
 8004b40:	e11c      	b.n	8004d7c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004b42:	4b66      	ldr	r3, [pc, #408]	; (8004cdc <HAL_RCC_OscConfig+0x778>)
 8004b44:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004b48:	f003 0302 	and.w	r3, r3, #2
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d0ef      	beq.n	8004b30 <HAL_RCC_OscConfig+0x5cc>
 8004b50:	e01b      	b.n	8004b8a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004b52:	4b62      	ldr	r3, [pc, #392]	; (8004cdc <HAL_RCC_OscConfig+0x778>)
 8004b54:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004b58:	4a60      	ldr	r2, [pc, #384]	; (8004cdc <HAL_RCC_OscConfig+0x778>)
 8004b5a:	f023 0301 	bic.w	r3, r3, #1
 8004b5e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b62:	f7fe f8f7 	bl	8002d54 <HAL_GetTick>
 8004b66:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004b68:	e008      	b.n	8004b7c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004b6a:	f7fe f8f3 	bl	8002d54 <HAL_GetTick>
 8004b6e:	4602      	mov	r2, r0
 8004b70:	693b      	ldr	r3, [r7, #16]
 8004b72:	1ad3      	subs	r3, r2, r3
 8004b74:	2b02      	cmp	r3, #2
 8004b76:	d901      	bls.n	8004b7c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004b78:	2303      	movs	r3, #3
 8004b7a:	e0ff      	b.n	8004d7c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004b7c:	4b57      	ldr	r3, [pc, #348]	; (8004cdc <HAL_RCC_OscConfig+0x778>)
 8004b7e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004b82:	f003 0302 	and.w	r3, r3, #2
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d1ef      	bne.n	8004b6a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	f000 80f3 	beq.w	8004d7a <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b98:	2b02      	cmp	r3, #2
 8004b9a:	f040 80c9 	bne.w	8004d30 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004b9e:	4b4f      	ldr	r3, [pc, #316]	; (8004cdc <HAL_RCC_OscConfig+0x778>)
 8004ba0:	68db      	ldr	r3, [r3, #12]
 8004ba2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ba4:	697b      	ldr	r3, [r7, #20]
 8004ba6:	f003 0203 	and.w	r2, r3, #3
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bae:	429a      	cmp	r2, r3
 8004bb0:	d12c      	bne.n	8004c0c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004bb2:	697b      	ldr	r3, [r7, #20]
 8004bb4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bbc:	3b01      	subs	r3, #1
 8004bbe:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bc0:	429a      	cmp	r2, r3
 8004bc2:	d123      	bne.n	8004c0c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004bc4:	697b      	ldr	r3, [r7, #20]
 8004bc6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bce:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004bd0:	429a      	cmp	r2, r3
 8004bd2:	d11b      	bne.n	8004c0c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004bd4:	697b      	ldr	r3, [r7, #20]
 8004bd6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bde:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004be0:	429a      	cmp	r2, r3
 8004be2:	d113      	bne.n	8004c0c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004be4:	697b      	ldr	r3, [r7, #20]
 8004be6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bee:	085b      	lsrs	r3, r3, #1
 8004bf0:	3b01      	subs	r3, #1
 8004bf2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004bf4:	429a      	cmp	r2, r3
 8004bf6:	d109      	bne.n	8004c0c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004bf8:	697b      	ldr	r3, [r7, #20]
 8004bfa:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c02:	085b      	lsrs	r3, r3, #1
 8004c04:	3b01      	subs	r3, #1
 8004c06:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004c08:	429a      	cmp	r2, r3
 8004c0a:	d06b      	beq.n	8004ce4 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004c0c:	69bb      	ldr	r3, [r7, #24]
 8004c0e:	2b0c      	cmp	r3, #12
 8004c10:	d062      	beq.n	8004cd8 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004c12:	4b32      	ldr	r3, [pc, #200]	; (8004cdc <HAL_RCC_OscConfig+0x778>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d001      	beq.n	8004c22 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	e0ac      	b.n	8004d7c <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004c22:	4b2e      	ldr	r3, [pc, #184]	; (8004cdc <HAL_RCC_OscConfig+0x778>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4a2d      	ldr	r2, [pc, #180]	; (8004cdc <HAL_RCC_OscConfig+0x778>)
 8004c28:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004c2c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004c2e:	f7fe f891 	bl	8002d54 <HAL_GetTick>
 8004c32:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c34:	e008      	b.n	8004c48 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c36:	f7fe f88d 	bl	8002d54 <HAL_GetTick>
 8004c3a:	4602      	mov	r2, r0
 8004c3c:	693b      	ldr	r3, [r7, #16]
 8004c3e:	1ad3      	subs	r3, r2, r3
 8004c40:	2b02      	cmp	r3, #2
 8004c42:	d901      	bls.n	8004c48 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8004c44:	2303      	movs	r3, #3
 8004c46:	e099      	b.n	8004d7c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c48:	4b24      	ldr	r3, [pc, #144]	; (8004cdc <HAL_RCC_OscConfig+0x778>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d1f0      	bne.n	8004c36 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004c54:	4b21      	ldr	r3, [pc, #132]	; (8004cdc <HAL_RCC_OscConfig+0x778>)
 8004c56:	68da      	ldr	r2, [r3, #12]
 8004c58:	4b21      	ldr	r3, [pc, #132]	; (8004ce0 <HAL_RCC_OscConfig+0x77c>)
 8004c5a:	4013      	ands	r3, r2
 8004c5c:	687a      	ldr	r2, [r7, #4]
 8004c5e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004c60:	687a      	ldr	r2, [r7, #4]
 8004c62:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004c64:	3a01      	subs	r2, #1
 8004c66:	0112      	lsls	r2, r2, #4
 8004c68:	4311      	orrs	r1, r2
 8004c6a:	687a      	ldr	r2, [r7, #4]
 8004c6c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004c6e:	0212      	lsls	r2, r2, #8
 8004c70:	4311      	orrs	r1, r2
 8004c72:	687a      	ldr	r2, [r7, #4]
 8004c74:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004c76:	0852      	lsrs	r2, r2, #1
 8004c78:	3a01      	subs	r2, #1
 8004c7a:	0552      	lsls	r2, r2, #21
 8004c7c:	4311      	orrs	r1, r2
 8004c7e:	687a      	ldr	r2, [r7, #4]
 8004c80:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004c82:	0852      	lsrs	r2, r2, #1
 8004c84:	3a01      	subs	r2, #1
 8004c86:	0652      	lsls	r2, r2, #25
 8004c88:	4311      	orrs	r1, r2
 8004c8a:	687a      	ldr	r2, [r7, #4]
 8004c8c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004c8e:	06d2      	lsls	r2, r2, #27
 8004c90:	430a      	orrs	r2, r1
 8004c92:	4912      	ldr	r1, [pc, #72]	; (8004cdc <HAL_RCC_OscConfig+0x778>)
 8004c94:	4313      	orrs	r3, r2
 8004c96:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004c98:	4b10      	ldr	r3, [pc, #64]	; (8004cdc <HAL_RCC_OscConfig+0x778>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a0f      	ldr	r2, [pc, #60]	; (8004cdc <HAL_RCC_OscConfig+0x778>)
 8004c9e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ca2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004ca4:	4b0d      	ldr	r3, [pc, #52]	; (8004cdc <HAL_RCC_OscConfig+0x778>)
 8004ca6:	68db      	ldr	r3, [r3, #12]
 8004ca8:	4a0c      	ldr	r2, [pc, #48]	; (8004cdc <HAL_RCC_OscConfig+0x778>)
 8004caa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004cae:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004cb0:	f7fe f850 	bl	8002d54 <HAL_GetTick>
 8004cb4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004cb6:	e008      	b.n	8004cca <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cb8:	f7fe f84c 	bl	8002d54 <HAL_GetTick>
 8004cbc:	4602      	mov	r2, r0
 8004cbe:	693b      	ldr	r3, [r7, #16]
 8004cc0:	1ad3      	subs	r3, r2, r3
 8004cc2:	2b02      	cmp	r3, #2
 8004cc4:	d901      	bls.n	8004cca <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8004cc6:	2303      	movs	r3, #3
 8004cc8:	e058      	b.n	8004d7c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004cca:	4b04      	ldr	r3, [pc, #16]	; (8004cdc <HAL_RCC_OscConfig+0x778>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d0f0      	beq.n	8004cb8 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004cd6:	e050      	b.n	8004d7a <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004cd8:	2301      	movs	r3, #1
 8004cda:	e04f      	b.n	8004d7c <HAL_RCC_OscConfig+0x818>
 8004cdc:	40021000 	.word	0x40021000
 8004ce0:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ce4:	4b27      	ldr	r3, [pc, #156]	; (8004d84 <HAL_RCC_OscConfig+0x820>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d144      	bne.n	8004d7a <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004cf0:	4b24      	ldr	r3, [pc, #144]	; (8004d84 <HAL_RCC_OscConfig+0x820>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a23      	ldr	r2, [pc, #140]	; (8004d84 <HAL_RCC_OscConfig+0x820>)
 8004cf6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004cfa:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004cfc:	4b21      	ldr	r3, [pc, #132]	; (8004d84 <HAL_RCC_OscConfig+0x820>)
 8004cfe:	68db      	ldr	r3, [r3, #12]
 8004d00:	4a20      	ldr	r2, [pc, #128]	; (8004d84 <HAL_RCC_OscConfig+0x820>)
 8004d02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d06:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004d08:	f7fe f824 	bl	8002d54 <HAL_GetTick>
 8004d0c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d0e:	e008      	b.n	8004d22 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d10:	f7fe f820 	bl	8002d54 <HAL_GetTick>
 8004d14:	4602      	mov	r2, r0
 8004d16:	693b      	ldr	r3, [r7, #16]
 8004d18:	1ad3      	subs	r3, r2, r3
 8004d1a:	2b02      	cmp	r3, #2
 8004d1c:	d901      	bls.n	8004d22 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8004d1e:	2303      	movs	r3, #3
 8004d20:	e02c      	b.n	8004d7c <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d22:	4b18      	ldr	r3, [pc, #96]	; (8004d84 <HAL_RCC_OscConfig+0x820>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d0f0      	beq.n	8004d10 <HAL_RCC_OscConfig+0x7ac>
 8004d2e:	e024      	b.n	8004d7a <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004d30:	69bb      	ldr	r3, [r7, #24]
 8004d32:	2b0c      	cmp	r3, #12
 8004d34:	d01f      	beq.n	8004d76 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d36:	4b13      	ldr	r3, [pc, #76]	; (8004d84 <HAL_RCC_OscConfig+0x820>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a12      	ldr	r2, [pc, #72]	; (8004d84 <HAL_RCC_OscConfig+0x820>)
 8004d3c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d42:	f7fe f807 	bl	8002d54 <HAL_GetTick>
 8004d46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d48:	e008      	b.n	8004d5c <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d4a:	f7fe f803 	bl	8002d54 <HAL_GetTick>
 8004d4e:	4602      	mov	r2, r0
 8004d50:	693b      	ldr	r3, [r7, #16]
 8004d52:	1ad3      	subs	r3, r2, r3
 8004d54:	2b02      	cmp	r3, #2
 8004d56:	d901      	bls.n	8004d5c <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8004d58:	2303      	movs	r3, #3
 8004d5a:	e00f      	b.n	8004d7c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d5c:	4b09      	ldr	r3, [pc, #36]	; (8004d84 <HAL_RCC_OscConfig+0x820>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d1f0      	bne.n	8004d4a <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8004d68:	4b06      	ldr	r3, [pc, #24]	; (8004d84 <HAL_RCC_OscConfig+0x820>)
 8004d6a:	68da      	ldr	r2, [r3, #12]
 8004d6c:	4905      	ldr	r1, [pc, #20]	; (8004d84 <HAL_RCC_OscConfig+0x820>)
 8004d6e:	4b06      	ldr	r3, [pc, #24]	; (8004d88 <HAL_RCC_OscConfig+0x824>)
 8004d70:	4013      	ands	r3, r2
 8004d72:	60cb      	str	r3, [r1, #12]
 8004d74:	e001      	b.n	8004d7a <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004d76:	2301      	movs	r3, #1
 8004d78:	e000      	b.n	8004d7c <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8004d7a:	2300      	movs	r3, #0
}
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	3720      	adds	r7, #32
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bd80      	pop	{r7, pc}
 8004d84:	40021000 	.word	0x40021000
 8004d88:	feeefffc 	.word	0xfeeefffc

08004d8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b084      	sub	sp, #16
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
 8004d94:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d101      	bne.n	8004da0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	e0e7      	b.n	8004f70 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004da0:	4b75      	ldr	r3, [pc, #468]	; (8004f78 <HAL_RCC_ClockConfig+0x1ec>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f003 0307 	and.w	r3, r3, #7
 8004da8:	683a      	ldr	r2, [r7, #0]
 8004daa:	429a      	cmp	r2, r3
 8004dac:	d910      	bls.n	8004dd0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dae:	4b72      	ldr	r3, [pc, #456]	; (8004f78 <HAL_RCC_ClockConfig+0x1ec>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f023 0207 	bic.w	r2, r3, #7
 8004db6:	4970      	ldr	r1, [pc, #448]	; (8004f78 <HAL_RCC_ClockConfig+0x1ec>)
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dbe:	4b6e      	ldr	r3, [pc, #440]	; (8004f78 <HAL_RCC_ClockConfig+0x1ec>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f003 0307 	and.w	r3, r3, #7
 8004dc6:	683a      	ldr	r2, [r7, #0]
 8004dc8:	429a      	cmp	r2, r3
 8004dca:	d001      	beq.n	8004dd0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004dcc:	2301      	movs	r3, #1
 8004dce:	e0cf      	b.n	8004f70 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f003 0302 	and.w	r3, r3, #2
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d010      	beq.n	8004dfe <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	689a      	ldr	r2, [r3, #8]
 8004de0:	4b66      	ldr	r3, [pc, #408]	; (8004f7c <HAL_RCC_ClockConfig+0x1f0>)
 8004de2:	689b      	ldr	r3, [r3, #8]
 8004de4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004de8:	429a      	cmp	r2, r3
 8004dea:	d908      	bls.n	8004dfe <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004dec:	4b63      	ldr	r3, [pc, #396]	; (8004f7c <HAL_RCC_ClockConfig+0x1f0>)
 8004dee:	689b      	ldr	r3, [r3, #8]
 8004df0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	689b      	ldr	r3, [r3, #8]
 8004df8:	4960      	ldr	r1, [pc, #384]	; (8004f7c <HAL_RCC_ClockConfig+0x1f0>)
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f003 0301 	and.w	r3, r3, #1
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d04c      	beq.n	8004ea4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	2b03      	cmp	r3, #3
 8004e10:	d107      	bne.n	8004e22 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e12:	4b5a      	ldr	r3, [pc, #360]	; (8004f7c <HAL_RCC_ClockConfig+0x1f0>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d121      	bne.n	8004e62 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004e1e:	2301      	movs	r3, #1
 8004e20:	e0a6      	b.n	8004f70 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	2b02      	cmp	r3, #2
 8004e28:	d107      	bne.n	8004e3a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004e2a:	4b54      	ldr	r3, [pc, #336]	; (8004f7c <HAL_RCC_ClockConfig+0x1f0>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d115      	bne.n	8004e62 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004e36:	2301      	movs	r3, #1
 8004e38:	e09a      	b.n	8004f70 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d107      	bne.n	8004e52 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004e42:	4b4e      	ldr	r3, [pc, #312]	; (8004f7c <HAL_RCC_ClockConfig+0x1f0>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f003 0302 	and.w	r3, r3, #2
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d109      	bne.n	8004e62 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004e4e:	2301      	movs	r3, #1
 8004e50:	e08e      	b.n	8004f70 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004e52:	4b4a      	ldr	r3, [pc, #296]	; (8004f7c <HAL_RCC_ClockConfig+0x1f0>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d101      	bne.n	8004e62 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004e5e:	2301      	movs	r3, #1
 8004e60:	e086      	b.n	8004f70 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004e62:	4b46      	ldr	r3, [pc, #280]	; (8004f7c <HAL_RCC_ClockConfig+0x1f0>)
 8004e64:	689b      	ldr	r3, [r3, #8]
 8004e66:	f023 0203 	bic.w	r2, r3, #3
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	4943      	ldr	r1, [pc, #268]	; (8004f7c <HAL_RCC_ClockConfig+0x1f0>)
 8004e70:	4313      	orrs	r3, r2
 8004e72:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e74:	f7fd ff6e 	bl	8002d54 <HAL_GetTick>
 8004e78:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e7a:	e00a      	b.n	8004e92 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e7c:	f7fd ff6a 	bl	8002d54 <HAL_GetTick>
 8004e80:	4602      	mov	r2, r0
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	1ad3      	subs	r3, r2, r3
 8004e86:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d901      	bls.n	8004e92 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004e8e:	2303      	movs	r3, #3
 8004e90:	e06e      	b.n	8004f70 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e92:	4b3a      	ldr	r3, [pc, #232]	; (8004f7c <HAL_RCC_ClockConfig+0x1f0>)
 8004e94:	689b      	ldr	r3, [r3, #8]
 8004e96:	f003 020c 	and.w	r2, r3, #12
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	009b      	lsls	r3, r3, #2
 8004ea0:	429a      	cmp	r2, r3
 8004ea2:	d1eb      	bne.n	8004e7c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f003 0302 	and.w	r3, r3, #2
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d010      	beq.n	8004ed2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	689a      	ldr	r2, [r3, #8]
 8004eb4:	4b31      	ldr	r3, [pc, #196]	; (8004f7c <HAL_RCC_ClockConfig+0x1f0>)
 8004eb6:	689b      	ldr	r3, [r3, #8]
 8004eb8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ebc:	429a      	cmp	r2, r3
 8004ebe:	d208      	bcs.n	8004ed2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ec0:	4b2e      	ldr	r3, [pc, #184]	; (8004f7c <HAL_RCC_ClockConfig+0x1f0>)
 8004ec2:	689b      	ldr	r3, [r3, #8]
 8004ec4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	689b      	ldr	r3, [r3, #8]
 8004ecc:	492b      	ldr	r1, [pc, #172]	; (8004f7c <HAL_RCC_ClockConfig+0x1f0>)
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004ed2:	4b29      	ldr	r3, [pc, #164]	; (8004f78 <HAL_RCC_ClockConfig+0x1ec>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f003 0307 	and.w	r3, r3, #7
 8004eda:	683a      	ldr	r2, [r7, #0]
 8004edc:	429a      	cmp	r2, r3
 8004ede:	d210      	bcs.n	8004f02 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ee0:	4b25      	ldr	r3, [pc, #148]	; (8004f78 <HAL_RCC_ClockConfig+0x1ec>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f023 0207 	bic.w	r2, r3, #7
 8004ee8:	4923      	ldr	r1, [pc, #140]	; (8004f78 <HAL_RCC_ClockConfig+0x1ec>)
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	4313      	orrs	r3, r2
 8004eee:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ef0:	4b21      	ldr	r3, [pc, #132]	; (8004f78 <HAL_RCC_ClockConfig+0x1ec>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f003 0307 	and.w	r3, r3, #7
 8004ef8:	683a      	ldr	r2, [r7, #0]
 8004efa:	429a      	cmp	r2, r3
 8004efc:	d001      	beq.n	8004f02 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004efe:	2301      	movs	r3, #1
 8004f00:	e036      	b.n	8004f70 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f003 0304 	and.w	r3, r3, #4
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d008      	beq.n	8004f20 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f0e:	4b1b      	ldr	r3, [pc, #108]	; (8004f7c <HAL_RCC_ClockConfig+0x1f0>)
 8004f10:	689b      	ldr	r3, [r3, #8]
 8004f12:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	68db      	ldr	r3, [r3, #12]
 8004f1a:	4918      	ldr	r1, [pc, #96]	; (8004f7c <HAL_RCC_ClockConfig+0x1f0>)
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f003 0308 	and.w	r3, r3, #8
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d009      	beq.n	8004f40 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004f2c:	4b13      	ldr	r3, [pc, #76]	; (8004f7c <HAL_RCC_ClockConfig+0x1f0>)
 8004f2e:	689b      	ldr	r3, [r3, #8]
 8004f30:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	691b      	ldr	r3, [r3, #16]
 8004f38:	00db      	lsls	r3, r3, #3
 8004f3a:	4910      	ldr	r1, [pc, #64]	; (8004f7c <HAL_RCC_ClockConfig+0x1f0>)
 8004f3c:	4313      	orrs	r3, r2
 8004f3e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004f40:	f000 f824 	bl	8004f8c <HAL_RCC_GetSysClockFreq>
 8004f44:	4602      	mov	r2, r0
 8004f46:	4b0d      	ldr	r3, [pc, #52]	; (8004f7c <HAL_RCC_ClockConfig+0x1f0>)
 8004f48:	689b      	ldr	r3, [r3, #8]
 8004f4a:	091b      	lsrs	r3, r3, #4
 8004f4c:	f003 030f 	and.w	r3, r3, #15
 8004f50:	490b      	ldr	r1, [pc, #44]	; (8004f80 <HAL_RCC_ClockConfig+0x1f4>)
 8004f52:	5ccb      	ldrb	r3, [r1, r3]
 8004f54:	f003 031f 	and.w	r3, r3, #31
 8004f58:	fa22 f303 	lsr.w	r3, r2, r3
 8004f5c:	4a09      	ldr	r2, [pc, #36]	; (8004f84 <HAL_RCC_ClockConfig+0x1f8>)
 8004f5e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004f60:	4b09      	ldr	r3, [pc, #36]	; (8004f88 <HAL_RCC_ClockConfig+0x1fc>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4618      	mov	r0, r3
 8004f66:	f7fd fea5 	bl	8002cb4 <HAL_InitTick>
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	72fb      	strb	r3, [r7, #11]

  return status;
 8004f6e:	7afb      	ldrb	r3, [r7, #11]
}
 8004f70:	4618      	mov	r0, r3
 8004f72:	3710      	adds	r7, #16
 8004f74:	46bd      	mov	sp, r7
 8004f76:	bd80      	pop	{r7, pc}
 8004f78:	40022000 	.word	0x40022000
 8004f7c:	40021000 	.word	0x40021000
 8004f80:	08007698 	.word	0x08007698
 8004f84:	2000000c 	.word	0x2000000c
 8004f88:	20000010 	.word	0x20000010

08004f8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f8c:	b480      	push	{r7}
 8004f8e:	b089      	sub	sp, #36	; 0x24
 8004f90:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004f92:	2300      	movs	r3, #0
 8004f94:	61fb      	str	r3, [r7, #28]
 8004f96:	2300      	movs	r3, #0
 8004f98:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f9a:	4b3e      	ldr	r3, [pc, #248]	; (8005094 <HAL_RCC_GetSysClockFreq+0x108>)
 8004f9c:	689b      	ldr	r3, [r3, #8]
 8004f9e:	f003 030c 	and.w	r3, r3, #12
 8004fa2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004fa4:	4b3b      	ldr	r3, [pc, #236]	; (8005094 <HAL_RCC_GetSysClockFreq+0x108>)
 8004fa6:	68db      	ldr	r3, [r3, #12]
 8004fa8:	f003 0303 	and.w	r3, r3, #3
 8004fac:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d005      	beq.n	8004fc0 <HAL_RCC_GetSysClockFreq+0x34>
 8004fb4:	693b      	ldr	r3, [r7, #16]
 8004fb6:	2b0c      	cmp	r3, #12
 8004fb8:	d121      	bne.n	8004ffe <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	2b01      	cmp	r3, #1
 8004fbe:	d11e      	bne.n	8004ffe <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004fc0:	4b34      	ldr	r3, [pc, #208]	; (8005094 <HAL_RCC_GetSysClockFreq+0x108>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f003 0308 	and.w	r3, r3, #8
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d107      	bne.n	8004fdc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004fcc:	4b31      	ldr	r3, [pc, #196]	; (8005094 <HAL_RCC_GetSysClockFreq+0x108>)
 8004fce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004fd2:	0a1b      	lsrs	r3, r3, #8
 8004fd4:	f003 030f 	and.w	r3, r3, #15
 8004fd8:	61fb      	str	r3, [r7, #28]
 8004fda:	e005      	b.n	8004fe8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004fdc:	4b2d      	ldr	r3, [pc, #180]	; (8005094 <HAL_RCC_GetSysClockFreq+0x108>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	091b      	lsrs	r3, r3, #4
 8004fe2:	f003 030f 	and.w	r3, r3, #15
 8004fe6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004fe8:	4a2b      	ldr	r2, [pc, #172]	; (8005098 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004fea:	69fb      	ldr	r3, [r7, #28]
 8004fec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ff0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d10d      	bne.n	8005014 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004ff8:	69fb      	ldr	r3, [r7, #28]
 8004ffa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004ffc:	e00a      	b.n	8005014 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004ffe:	693b      	ldr	r3, [r7, #16]
 8005000:	2b04      	cmp	r3, #4
 8005002:	d102      	bne.n	800500a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005004:	4b25      	ldr	r3, [pc, #148]	; (800509c <HAL_RCC_GetSysClockFreq+0x110>)
 8005006:	61bb      	str	r3, [r7, #24]
 8005008:	e004      	b.n	8005014 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800500a:	693b      	ldr	r3, [r7, #16]
 800500c:	2b08      	cmp	r3, #8
 800500e:	d101      	bne.n	8005014 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005010:	4b23      	ldr	r3, [pc, #140]	; (80050a0 <HAL_RCC_GetSysClockFreq+0x114>)
 8005012:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005014:	693b      	ldr	r3, [r7, #16]
 8005016:	2b0c      	cmp	r3, #12
 8005018:	d134      	bne.n	8005084 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800501a:	4b1e      	ldr	r3, [pc, #120]	; (8005094 <HAL_RCC_GetSysClockFreq+0x108>)
 800501c:	68db      	ldr	r3, [r3, #12]
 800501e:	f003 0303 	and.w	r3, r3, #3
 8005022:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005024:	68bb      	ldr	r3, [r7, #8]
 8005026:	2b02      	cmp	r3, #2
 8005028:	d003      	beq.n	8005032 <HAL_RCC_GetSysClockFreq+0xa6>
 800502a:	68bb      	ldr	r3, [r7, #8]
 800502c:	2b03      	cmp	r3, #3
 800502e:	d003      	beq.n	8005038 <HAL_RCC_GetSysClockFreq+0xac>
 8005030:	e005      	b.n	800503e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005032:	4b1a      	ldr	r3, [pc, #104]	; (800509c <HAL_RCC_GetSysClockFreq+0x110>)
 8005034:	617b      	str	r3, [r7, #20]
      break;
 8005036:	e005      	b.n	8005044 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005038:	4b19      	ldr	r3, [pc, #100]	; (80050a0 <HAL_RCC_GetSysClockFreq+0x114>)
 800503a:	617b      	str	r3, [r7, #20]
      break;
 800503c:	e002      	b.n	8005044 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800503e:	69fb      	ldr	r3, [r7, #28]
 8005040:	617b      	str	r3, [r7, #20]
      break;
 8005042:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005044:	4b13      	ldr	r3, [pc, #76]	; (8005094 <HAL_RCC_GetSysClockFreq+0x108>)
 8005046:	68db      	ldr	r3, [r3, #12]
 8005048:	091b      	lsrs	r3, r3, #4
 800504a:	f003 0307 	and.w	r3, r3, #7
 800504e:	3301      	adds	r3, #1
 8005050:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005052:	4b10      	ldr	r3, [pc, #64]	; (8005094 <HAL_RCC_GetSysClockFreq+0x108>)
 8005054:	68db      	ldr	r3, [r3, #12]
 8005056:	0a1b      	lsrs	r3, r3, #8
 8005058:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800505c:	697a      	ldr	r2, [r7, #20]
 800505e:	fb03 f202 	mul.w	r2, r3, r2
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	fbb2 f3f3 	udiv	r3, r2, r3
 8005068:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800506a:	4b0a      	ldr	r3, [pc, #40]	; (8005094 <HAL_RCC_GetSysClockFreq+0x108>)
 800506c:	68db      	ldr	r3, [r3, #12]
 800506e:	0e5b      	lsrs	r3, r3, #25
 8005070:	f003 0303 	and.w	r3, r3, #3
 8005074:	3301      	adds	r3, #1
 8005076:	005b      	lsls	r3, r3, #1
 8005078:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800507a:	697a      	ldr	r2, [r7, #20]
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005082:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005084:	69bb      	ldr	r3, [r7, #24]
}
 8005086:	4618      	mov	r0, r3
 8005088:	3724      	adds	r7, #36	; 0x24
 800508a:	46bd      	mov	sp, r7
 800508c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005090:	4770      	bx	lr
 8005092:	bf00      	nop
 8005094:	40021000 	.word	0x40021000
 8005098:	080076a8 	.word	0x080076a8
 800509c:	00f42400 	.word	0x00f42400
 80050a0:	007a1200 	.word	0x007a1200

080050a4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b086      	sub	sp, #24
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80050ac:	2300      	movs	r3, #0
 80050ae:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80050b0:	4b2a      	ldr	r3, [pc, #168]	; (800515c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80050b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d003      	beq.n	80050c4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80050bc:	f7ff f9ee 	bl	800449c <HAL_PWREx_GetVoltageRange>
 80050c0:	6178      	str	r0, [r7, #20]
 80050c2:	e014      	b.n	80050ee <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80050c4:	4b25      	ldr	r3, [pc, #148]	; (800515c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80050c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050c8:	4a24      	ldr	r2, [pc, #144]	; (800515c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80050ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050ce:	6593      	str	r3, [r2, #88]	; 0x58
 80050d0:	4b22      	ldr	r3, [pc, #136]	; (800515c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80050d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050d8:	60fb      	str	r3, [r7, #12]
 80050da:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80050dc:	f7ff f9de 	bl	800449c <HAL_PWREx_GetVoltageRange>
 80050e0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80050e2:	4b1e      	ldr	r3, [pc, #120]	; (800515c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80050e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050e6:	4a1d      	ldr	r2, [pc, #116]	; (800515c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80050e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80050ec:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050f4:	d10b      	bne.n	800510e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2b80      	cmp	r3, #128	; 0x80
 80050fa:	d919      	bls.n	8005130 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2ba0      	cmp	r3, #160	; 0xa0
 8005100:	d902      	bls.n	8005108 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005102:	2302      	movs	r3, #2
 8005104:	613b      	str	r3, [r7, #16]
 8005106:	e013      	b.n	8005130 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005108:	2301      	movs	r3, #1
 800510a:	613b      	str	r3, [r7, #16]
 800510c:	e010      	b.n	8005130 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2b80      	cmp	r3, #128	; 0x80
 8005112:	d902      	bls.n	800511a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005114:	2303      	movs	r3, #3
 8005116:	613b      	str	r3, [r7, #16]
 8005118:	e00a      	b.n	8005130 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2b80      	cmp	r3, #128	; 0x80
 800511e:	d102      	bne.n	8005126 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005120:	2302      	movs	r3, #2
 8005122:	613b      	str	r3, [r7, #16]
 8005124:	e004      	b.n	8005130 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2b70      	cmp	r3, #112	; 0x70
 800512a:	d101      	bne.n	8005130 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800512c:	2301      	movs	r3, #1
 800512e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005130:	4b0b      	ldr	r3, [pc, #44]	; (8005160 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f023 0207 	bic.w	r2, r3, #7
 8005138:	4909      	ldr	r1, [pc, #36]	; (8005160 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800513a:	693b      	ldr	r3, [r7, #16]
 800513c:	4313      	orrs	r3, r2
 800513e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005140:	4b07      	ldr	r3, [pc, #28]	; (8005160 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f003 0307 	and.w	r3, r3, #7
 8005148:	693a      	ldr	r2, [r7, #16]
 800514a:	429a      	cmp	r2, r3
 800514c:	d001      	beq.n	8005152 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800514e:	2301      	movs	r3, #1
 8005150:	e000      	b.n	8005154 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005152:	2300      	movs	r3, #0
}
 8005154:	4618      	mov	r0, r3
 8005156:	3718      	adds	r7, #24
 8005158:	46bd      	mov	sp, r7
 800515a:	bd80      	pop	{r7, pc}
 800515c:	40021000 	.word	0x40021000
 8005160:	40022000 	.word	0x40022000

08005164 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b086      	sub	sp, #24
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800516c:	2300      	movs	r3, #0
 800516e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005170:	2300      	movs	r3, #0
 8005172:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800517c:	2b00      	cmp	r3, #0
 800517e:	d031      	beq.n	80051e4 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005184:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005188:	d01a      	beq.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800518a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800518e:	d814      	bhi.n	80051ba <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005190:	2b00      	cmp	r3, #0
 8005192:	d009      	beq.n	80051a8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005194:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005198:	d10f      	bne.n	80051ba <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800519a:	4b5d      	ldr	r3, [pc, #372]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800519c:	68db      	ldr	r3, [r3, #12]
 800519e:	4a5c      	ldr	r2, [pc, #368]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80051a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051a4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80051a6:	e00c      	b.n	80051c2 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	3304      	adds	r3, #4
 80051ac:	2100      	movs	r1, #0
 80051ae:	4618      	mov	r0, r3
 80051b0:	f000 f9de 	bl	8005570 <RCCEx_PLLSAI1_Config>
 80051b4:	4603      	mov	r3, r0
 80051b6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80051b8:	e003      	b.n	80051c2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80051ba:	2301      	movs	r3, #1
 80051bc:	74fb      	strb	r3, [r7, #19]
      break;
 80051be:	e000      	b.n	80051c2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80051c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80051c2:	7cfb      	ldrb	r3, [r7, #19]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d10b      	bne.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80051c8:	4b51      	ldr	r3, [pc, #324]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80051ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051ce:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051d6:	494e      	ldr	r1, [pc, #312]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80051d8:	4313      	orrs	r3, r2
 80051da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80051de:	e001      	b.n	80051e4 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051e0:	7cfb      	ldrb	r3, [r7, #19]
 80051e2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	f000 809e 	beq.w	800532e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80051f2:	2300      	movs	r3, #0
 80051f4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80051f6:	4b46      	ldr	r3, [pc, #280]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80051f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d101      	bne.n	8005206 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8005202:	2301      	movs	r3, #1
 8005204:	e000      	b.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8005206:	2300      	movs	r3, #0
 8005208:	2b00      	cmp	r3, #0
 800520a:	d00d      	beq.n	8005228 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800520c:	4b40      	ldr	r3, [pc, #256]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800520e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005210:	4a3f      	ldr	r2, [pc, #252]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005212:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005216:	6593      	str	r3, [r2, #88]	; 0x58
 8005218:	4b3d      	ldr	r3, [pc, #244]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800521a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800521c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005220:	60bb      	str	r3, [r7, #8]
 8005222:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005224:	2301      	movs	r3, #1
 8005226:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005228:	4b3a      	ldr	r3, [pc, #232]	; (8005314 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4a39      	ldr	r2, [pc, #228]	; (8005314 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800522e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005232:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005234:	f7fd fd8e 	bl	8002d54 <HAL_GetTick>
 8005238:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800523a:	e009      	b.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800523c:	f7fd fd8a 	bl	8002d54 <HAL_GetTick>
 8005240:	4602      	mov	r2, r0
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	1ad3      	subs	r3, r2, r3
 8005246:	2b02      	cmp	r3, #2
 8005248:	d902      	bls.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800524a:	2303      	movs	r3, #3
 800524c:	74fb      	strb	r3, [r7, #19]
        break;
 800524e:	e005      	b.n	800525c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005250:	4b30      	ldr	r3, [pc, #192]	; (8005314 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005258:	2b00      	cmp	r3, #0
 800525a:	d0ef      	beq.n	800523c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 800525c:	7cfb      	ldrb	r3, [r7, #19]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d15a      	bne.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005262:	4b2b      	ldr	r3, [pc, #172]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005264:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005268:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800526c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800526e:	697b      	ldr	r3, [r7, #20]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d01e      	beq.n	80052b2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005278:	697a      	ldr	r2, [r7, #20]
 800527a:	429a      	cmp	r2, r3
 800527c:	d019      	beq.n	80052b2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800527e:	4b24      	ldr	r3, [pc, #144]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005280:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005284:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005288:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800528a:	4b21      	ldr	r3, [pc, #132]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800528c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005290:	4a1f      	ldr	r2, [pc, #124]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005292:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005296:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800529a:	4b1d      	ldr	r3, [pc, #116]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800529c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052a0:	4a1b      	ldr	r2, [pc, #108]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80052a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80052aa:	4a19      	ldr	r2, [pc, #100]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80052ac:	697b      	ldr	r3, [r7, #20]
 80052ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80052b2:	697b      	ldr	r3, [r7, #20]
 80052b4:	f003 0301 	and.w	r3, r3, #1
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d016      	beq.n	80052ea <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052bc:	f7fd fd4a 	bl	8002d54 <HAL_GetTick>
 80052c0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80052c2:	e00b      	b.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052c4:	f7fd fd46 	bl	8002d54 <HAL_GetTick>
 80052c8:	4602      	mov	r2, r0
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	1ad3      	subs	r3, r2, r3
 80052ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d902      	bls.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80052d6:	2303      	movs	r3, #3
 80052d8:	74fb      	strb	r3, [r7, #19]
            break;
 80052da:	e006      	b.n	80052ea <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80052dc:	4b0c      	ldr	r3, [pc, #48]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80052de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052e2:	f003 0302 	and.w	r3, r3, #2
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d0ec      	beq.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80052ea:	7cfb      	ldrb	r3, [r7, #19]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d10b      	bne.n	8005308 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80052f0:	4b07      	ldr	r3, [pc, #28]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80052f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052f6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052fe:	4904      	ldr	r1, [pc, #16]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005300:	4313      	orrs	r3, r2
 8005302:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005306:	e009      	b.n	800531c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005308:	7cfb      	ldrb	r3, [r7, #19]
 800530a:	74bb      	strb	r3, [r7, #18]
 800530c:	e006      	b.n	800531c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800530e:	bf00      	nop
 8005310:	40021000 	.word	0x40021000
 8005314:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005318:	7cfb      	ldrb	r3, [r7, #19]
 800531a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800531c:	7c7b      	ldrb	r3, [r7, #17]
 800531e:	2b01      	cmp	r3, #1
 8005320:	d105      	bne.n	800532e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005322:	4b8a      	ldr	r3, [pc, #552]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005324:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005326:	4a89      	ldr	r2, [pc, #548]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005328:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800532c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f003 0301 	and.w	r3, r3, #1
 8005336:	2b00      	cmp	r3, #0
 8005338:	d00a      	beq.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800533a:	4b84      	ldr	r3, [pc, #528]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800533c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005340:	f023 0203 	bic.w	r2, r3, #3
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6a1b      	ldr	r3, [r3, #32]
 8005348:	4980      	ldr	r1, [pc, #512]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800534a:	4313      	orrs	r3, r2
 800534c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f003 0302 	and.w	r3, r3, #2
 8005358:	2b00      	cmp	r3, #0
 800535a:	d00a      	beq.n	8005372 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800535c:	4b7b      	ldr	r3, [pc, #492]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800535e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005362:	f023 020c 	bic.w	r2, r3, #12
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800536a:	4978      	ldr	r1, [pc, #480]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800536c:	4313      	orrs	r3, r2
 800536e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f003 0320 	and.w	r3, r3, #32
 800537a:	2b00      	cmp	r3, #0
 800537c:	d00a      	beq.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800537e:	4b73      	ldr	r3, [pc, #460]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005380:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005384:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800538c:	496f      	ldr	r1, [pc, #444]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800538e:	4313      	orrs	r3, r2
 8005390:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800539c:	2b00      	cmp	r3, #0
 800539e:	d00a      	beq.n	80053b6 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80053a0:	4b6a      	ldr	r3, [pc, #424]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80053a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053a6:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053ae:	4967      	ldr	r1, [pc, #412]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80053b0:	4313      	orrs	r3, r2
 80053b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d00a      	beq.n	80053d8 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80053c2:	4b62      	ldr	r3, [pc, #392]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80053c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053c8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053d0:	495e      	ldr	r1, [pc, #376]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80053d2:	4313      	orrs	r3, r2
 80053d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d00a      	beq.n	80053fa <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80053e4:	4b59      	ldr	r3, [pc, #356]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80053e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053ea:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053f2:	4956      	ldr	r1, [pc, #344]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80053f4:	4313      	orrs	r3, r2
 80053f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005402:	2b00      	cmp	r3, #0
 8005404:	d00a      	beq.n	800541c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005406:	4b51      	ldr	r3, [pc, #324]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005408:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800540c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005414:	494d      	ldr	r1, [pc, #308]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005416:	4313      	orrs	r3, r2
 8005418:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005424:	2b00      	cmp	r3, #0
 8005426:	d028      	beq.n	800547a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005428:	4b48      	ldr	r3, [pc, #288]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800542a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800542e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005436:	4945      	ldr	r1, [pc, #276]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005438:	4313      	orrs	r3, r2
 800543a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005442:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005446:	d106      	bne.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005448:	4b40      	ldr	r3, [pc, #256]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800544a:	68db      	ldr	r3, [r3, #12]
 800544c:	4a3f      	ldr	r2, [pc, #252]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800544e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005452:	60d3      	str	r3, [r2, #12]
 8005454:	e011      	b.n	800547a <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800545a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800545e:	d10c      	bne.n	800547a <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	3304      	adds	r3, #4
 8005464:	2101      	movs	r1, #1
 8005466:	4618      	mov	r0, r3
 8005468:	f000 f882 	bl	8005570 <RCCEx_PLLSAI1_Config>
 800546c:	4603      	mov	r3, r0
 800546e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005470:	7cfb      	ldrb	r3, [r7, #19]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d001      	beq.n	800547a <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8005476:	7cfb      	ldrb	r3, [r7, #19]
 8005478:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005482:	2b00      	cmp	r3, #0
 8005484:	d028      	beq.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005486:	4b31      	ldr	r3, [pc, #196]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005488:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800548c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005494:	492d      	ldr	r1, [pc, #180]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005496:	4313      	orrs	r3, r2
 8005498:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80054a4:	d106      	bne.n	80054b4 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80054a6:	4b29      	ldr	r3, [pc, #164]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80054a8:	68db      	ldr	r3, [r3, #12]
 80054aa:	4a28      	ldr	r2, [pc, #160]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80054ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80054b0:	60d3      	str	r3, [r2, #12]
 80054b2:	e011      	b.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054b8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80054bc:	d10c      	bne.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	3304      	adds	r3, #4
 80054c2:	2101      	movs	r1, #1
 80054c4:	4618      	mov	r0, r3
 80054c6:	f000 f853 	bl	8005570 <RCCEx_PLLSAI1_Config>
 80054ca:	4603      	mov	r3, r0
 80054cc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80054ce:	7cfb      	ldrb	r3, [r7, #19]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d001      	beq.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 80054d4:	7cfb      	ldrb	r3, [r7, #19]
 80054d6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d01c      	beq.n	800551e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80054e4:	4b19      	ldr	r3, [pc, #100]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80054e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054ea:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054f2:	4916      	ldr	r1, [pc, #88]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80054f4:	4313      	orrs	r3, r2
 80054f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054fe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005502:	d10c      	bne.n	800551e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	3304      	adds	r3, #4
 8005508:	2102      	movs	r1, #2
 800550a:	4618      	mov	r0, r3
 800550c:	f000 f830 	bl	8005570 <RCCEx_PLLSAI1_Config>
 8005510:	4603      	mov	r3, r0
 8005512:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005514:	7cfb      	ldrb	r3, [r7, #19]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d001      	beq.n	800551e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 800551a:	7cfb      	ldrb	r3, [r7, #19]
 800551c:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005526:	2b00      	cmp	r3, #0
 8005528:	d00a      	beq.n	8005540 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800552a:	4b08      	ldr	r3, [pc, #32]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800552c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005530:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005538:	4904      	ldr	r1, [pc, #16]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800553a:	4313      	orrs	r3, r2
 800553c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005540:	7cbb      	ldrb	r3, [r7, #18]
}
 8005542:	4618      	mov	r0, r3
 8005544:	3718      	adds	r7, #24
 8005546:	46bd      	mov	sp, r7
 8005548:	bd80      	pop	{r7, pc}
 800554a:	bf00      	nop
 800554c:	40021000 	.word	0x40021000

08005550 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8005550:	b480      	push	{r7}
 8005552:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8005554:	4b05      	ldr	r3, [pc, #20]	; (800556c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4a04      	ldr	r2, [pc, #16]	; (800556c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800555a:	f043 0304 	orr.w	r3, r3, #4
 800555e:	6013      	str	r3, [r2, #0]
}
 8005560:	bf00      	nop
 8005562:	46bd      	mov	sp, r7
 8005564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005568:	4770      	bx	lr
 800556a:	bf00      	nop
 800556c:	40021000 	.word	0x40021000

08005570 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b084      	sub	sp, #16
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
 8005578:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800557a:	2300      	movs	r3, #0
 800557c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800557e:	4b74      	ldr	r3, [pc, #464]	; (8005750 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005580:	68db      	ldr	r3, [r3, #12]
 8005582:	f003 0303 	and.w	r3, r3, #3
 8005586:	2b00      	cmp	r3, #0
 8005588:	d018      	beq.n	80055bc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800558a:	4b71      	ldr	r3, [pc, #452]	; (8005750 <RCCEx_PLLSAI1_Config+0x1e0>)
 800558c:	68db      	ldr	r3, [r3, #12]
 800558e:	f003 0203 	and.w	r2, r3, #3
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	429a      	cmp	r2, r3
 8005598:	d10d      	bne.n	80055b6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
       ||
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d009      	beq.n	80055b6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80055a2:	4b6b      	ldr	r3, [pc, #428]	; (8005750 <RCCEx_PLLSAI1_Config+0x1e0>)
 80055a4:	68db      	ldr	r3, [r3, #12]
 80055a6:	091b      	lsrs	r3, r3, #4
 80055a8:	f003 0307 	and.w	r3, r3, #7
 80055ac:	1c5a      	adds	r2, r3, #1
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	685b      	ldr	r3, [r3, #4]
       ||
 80055b2:	429a      	cmp	r2, r3
 80055b4:	d047      	beq.n	8005646 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80055b6:	2301      	movs	r3, #1
 80055b8:	73fb      	strb	r3, [r7, #15]
 80055ba:	e044      	b.n	8005646 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	2b03      	cmp	r3, #3
 80055c2:	d018      	beq.n	80055f6 <RCCEx_PLLSAI1_Config+0x86>
 80055c4:	2b03      	cmp	r3, #3
 80055c6:	d825      	bhi.n	8005614 <RCCEx_PLLSAI1_Config+0xa4>
 80055c8:	2b01      	cmp	r3, #1
 80055ca:	d002      	beq.n	80055d2 <RCCEx_PLLSAI1_Config+0x62>
 80055cc:	2b02      	cmp	r3, #2
 80055ce:	d009      	beq.n	80055e4 <RCCEx_PLLSAI1_Config+0x74>
 80055d0:	e020      	b.n	8005614 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80055d2:	4b5f      	ldr	r3, [pc, #380]	; (8005750 <RCCEx_PLLSAI1_Config+0x1e0>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f003 0302 	and.w	r3, r3, #2
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d11d      	bne.n	800561a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80055de:	2301      	movs	r3, #1
 80055e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80055e2:	e01a      	b.n	800561a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80055e4:	4b5a      	ldr	r3, [pc, #360]	; (8005750 <RCCEx_PLLSAI1_Config+0x1e0>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d116      	bne.n	800561e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80055f0:	2301      	movs	r3, #1
 80055f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80055f4:	e013      	b.n	800561e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80055f6:	4b56      	ldr	r3, [pc, #344]	; (8005750 <RCCEx_PLLSAI1_Config+0x1e0>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d10f      	bne.n	8005622 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005602:	4b53      	ldr	r3, [pc, #332]	; (8005750 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800560a:	2b00      	cmp	r3, #0
 800560c:	d109      	bne.n	8005622 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800560e:	2301      	movs	r3, #1
 8005610:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005612:	e006      	b.n	8005622 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005614:	2301      	movs	r3, #1
 8005616:	73fb      	strb	r3, [r7, #15]
      break;
 8005618:	e004      	b.n	8005624 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800561a:	bf00      	nop
 800561c:	e002      	b.n	8005624 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800561e:	bf00      	nop
 8005620:	e000      	b.n	8005624 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005622:	bf00      	nop
    }

    if(status == HAL_OK)
 8005624:	7bfb      	ldrb	r3, [r7, #15]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d10d      	bne.n	8005646 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800562a:	4b49      	ldr	r3, [pc, #292]	; (8005750 <RCCEx_PLLSAI1_Config+0x1e0>)
 800562c:	68db      	ldr	r3, [r3, #12]
 800562e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6819      	ldr	r1, [r3, #0]
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	685b      	ldr	r3, [r3, #4]
 800563a:	3b01      	subs	r3, #1
 800563c:	011b      	lsls	r3, r3, #4
 800563e:	430b      	orrs	r3, r1
 8005640:	4943      	ldr	r1, [pc, #268]	; (8005750 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005642:	4313      	orrs	r3, r2
 8005644:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005646:	7bfb      	ldrb	r3, [r7, #15]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d17c      	bne.n	8005746 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800564c:	4b40      	ldr	r3, [pc, #256]	; (8005750 <RCCEx_PLLSAI1_Config+0x1e0>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4a3f      	ldr	r2, [pc, #252]	; (8005750 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005652:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005656:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005658:	f7fd fb7c 	bl	8002d54 <HAL_GetTick>
 800565c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800565e:	e009      	b.n	8005674 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005660:	f7fd fb78 	bl	8002d54 <HAL_GetTick>
 8005664:	4602      	mov	r2, r0
 8005666:	68bb      	ldr	r3, [r7, #8]
 8005668:	1ad3      	subs	r3, r2, r3
 800566a:	2b02      	cmp	r3, #2
 800566c:	d902      	bls.n	8005674 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800566e:	2303      	movs	r3, #3
 8005670:	73fb      	strb	r3, [r7, #15]
        break;
 8005672:	e005      	b.n	8005680 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005674:	4b36      	ldr	r3, [pc, #216]	; (8005750 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800567c:	2b00      	cmp	r3, #0
 800567e:	d1ef      	bne.n	8005660 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005680:	7bfb      	ldrb	r3, [r7, #15]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d15f      	bne.n	8005746 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d110      	bne.n	80056ae <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800568c:	4b30      	ldr	r3, [pc, #192]	; (8005750 <RCCEx_PLLSAI1_Config+0x1e0>)
 800568e:	691b      	ldr	r3, [r3, #16]
 8005690:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8005694:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005698:	687a      	ldr	r2, [r7, #4]
 800569a:	6892      	ldr	r2, [r2, #8]
 800569c:	0211      	lsls	r1, r2, #8
 800569e:	687a      	ldr	r2, [r7, #4]
 80056a0:	68d2      	ldr	r2, [r2, #12]
 80056a2:	06d2      	lsls	r2, r2, #27
 80056a4:	430a      	orrs	r2, r1
 80056a6:	492a      	ldr	r1, [pc, #168]	; (8005750 <RCCEx_PLLSAI1_Config+0x1e0>)
 80056a8:	4313      	orrs	r3, r2
 80056aa:	610b      	str	r3, [r1, #16]
 80056ac:	e027      	b.n	80056fe <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	2b01      	cmp	r3, #1
 80056b2:	d112      	bne.n	80056da <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80056b4:	4b26      	ldr	r3, [pc, #152]	; (8005750 <RCCEx_PLLSAI1_Config+0x1e0>)
 80056b6:	691b      	ldr	r3, [r3, #16]
 80056b8:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80056bc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80056c0:	687a      	ldr	r2, [r7, #4]
 80056c2:	6892      	ldr	r2, [r2, #8]
 80056c4:	0211      	lsls	r1, r2, #8
 80056c6:	687a      	ldr	r2, [r7, #4]
 80056c8:	6912      	ldr	r2, [r2, #16]
 80056ca:	0852      	lsrs	r2, r2, #1
 80056cc:	3a01      	subs	r2, #1
 80056ce:	0552      	lsls	r2, r2, #21
 80056d0:	430a      	orrs	r2, r1
 80056d2:	491f      	ldr	r1, [pc, #124]	; (8005750 <RCCEx_PLLSAI1_Config+0x1e0>)
 80056d4:	4313      	orrs	r3, r2
 80056d6:	610b      	str	r3, [r1, #16]
 80056d8:	e011      	b.n	80056fe <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80056da:	4b1d      	ldr	r3, [pc, #116]	; (8005750 <RCCEx_PLLSAI1_Config+0x1e0>)
 80056dc:	691b      	ldr	r3, [r3, #16]
 80056de:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80056e2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80056e6:	687a      	ldr	r2, [r7, #4]
 80056e8:	6892      	ldr	r2, [r2, #8]
 80056ea:	0211      	lsls	r1, r2, #8
 80056ec:	687a      	ldr	r2, [r7, #4]
 80056ee:	6952      	ldr	r2, [r2, #20]
 80056f0:	0852      	lsrs	r2, r2, #1
 80056f2:	3a01      	subs	r2, #1
 80056f4:	0652      	lsls	r2, r2, #25
 80056f6:	430a      	orrs	r2, r1
 80056f8:	4915      	ldr	r1, [pc, #84]	; (8005750 <RCCEx_PLLSAI1_Config+0x1e0>)
 80056fa:	4313      	orrs	r3, r2
 80056fc:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80056fe:	4b14      	ldr	r3, [pc, #80]	; (8005750 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	4a13      	ldr	r2, [pc, #76]	; (8005750 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005704:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005708:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800570a:	f7fd fb23 	bl	8002d54 <HAL_GetTick>
 800570e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005710:	e009      	b.n	8005726 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005712:	f7fd fb1f 	bl	8002d54 <HAL_GetTick>
 8005716:	4602      	mov	r2, r0
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	1ad3      	subs	r3, r2, r3
 800571c:	2b02      	cmp	r3, #2
 800571e:	d902      	bls.n	8005726 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8005720:	2303      	movs	r3, #3
 8005722:	73fb      	strb	r3, [r7, #15]
          break;
 8005724:	e005      	b.n	8005732 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005726:	4b0a      	ldr	r3, [pc, #40]	; (8005750 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800572e:	2b00      	cmp	r3, #0
 8005730:	d0ef      	beq.n	8005712 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8005732:	7bfb      	ldrb	r3, [r7, #15]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d106      	bne.n	8005746 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005738:	4b05      	ldr	r3, [pc, #20]	; (8005750 <RCCEx_PLLSAI1_Config+0x1e0>)
 800573a:	691a      	ldr	r2, [r3, #16]
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	699b      	ldr	r3, [r3, #24]
 8005740:	4903      	ldr	r1, [pc, #12]	; (8005750 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005742:	4313      	orrs	r3, r2
 8005744:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005746:	7bfb      	ldrb	r3, [r7, #15]
}
 8005748:	4618      	mov	r0, r3
 800574a:	3710      	adds	r7, #16
 800574c:	46bd      	mov	sp, r7
 800574e:	bd80      	pop	{r7, pc}
 8005750:	40021000 	.word	0x40021000

08005754 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b084      	sub	sp, #16
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d101      	bne.n	8005766 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005762:	2301      	movs	r3, #1
 8005764:	e095      	b.n	8005892 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800576a:	2b00      	cmp	r3, #0
 800576c:	d108      	bne.n	8005780 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	685b      	ldr	r3, [r3, #4]
 8005772:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005776:	d009      	beq.n	800578c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2200      	movs	r2, #0
 800577c:	61da      	str	r2, [r3, #28]
 800577e:	e005      	b.n	800578c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2200      	movs	r2, #0
 8005784:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2200      	movs	r2, #0
 800578a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2200      	movs	r2, #0
 8005790:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005798:	b2db      	uxtb	r3, r3
 800579a:	2b00      	cmp	r3, #0
 800579c:	d106      	bne.n	80057ac <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2200      	movs	r2, #0
 80057a2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80057a6:	6878      	ldr	r0, [r7, #4]
 80057a8:	f7fd f8fe 	bl	80029a8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2202      	movs	r2, #2
 80057b0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	681a      	ldr	r2, [r3, #0]
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80057c2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	68db      	ldr	r3, [r3, #12]
 80057c8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80057cc:	d902      	bls.n	80057d4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80057ce:	2300      	movs	r3, #0
 80057d0:	60fb      	str	r3, [r7, #12]
 80057d2:	e002      	b.n	80057da <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80057d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80057d8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	68db      	ldr	r3, [r3, #12]
 80057de:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80057e2:	d007      	beq.n	80057f4 <HAL_SPI_Init+0xa0>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	68db      	ldr	r3, [r3, #12]
 80057e8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80057ec:	d002      	beq.n	80057f4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2200      	movs	r2, #0
 80057f2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	685b      	ldr	r3, [r3, #4]
 80057f8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	689b      	ldr	r3, [r3, #8]
 8005800:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005804:	431a      	orrs	r2, r3
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	691b      	ldr	r3, [r3, #16]
 800580a:	f003 0302 	and.w	r3, r3, #2
 800580e:	431a      	orrs	r2, r3
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	695b      	ldr	r3, [r3, #20]
 8005814:	f003 0301 	and.w	r3, r3, #1
 8005818:	431a      	orrs	r2, r3
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	699b      	ldr	r3, [r3, #24]
 800581e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005822:	431a      	orrs	r2, r3
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	69db      	ldr	r3, [r3, #28]
 8005828:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800582c:	431a      	orrs	r2, r3
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6a1b      	ldr	r3, [r3, #32]
 8005832:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005836:	ea42 0103 	orr.w	r1, r2, r3
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800583e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	430a      	orrs	r2, r1
 8005848:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	699b      	ldr	r3, [r3, #24]
 800584e:	0c1b      	lsrs	r3, r3, #16
 8005850:	f003 0204 	and.w	r2, r3, #4
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005858:	f003 0310 	and.w	r3, r3, #16
 800585c:	431a      	orrs	r2, r3
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005862:	f003 0308 	and.w	r3, r3, #8
 8005866:	431a      	orrs	r2, r3
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	68db      	ldr	r3, [r3, #12]
 800586c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005870:	ea42 0103 	orr.w	r1, r2, r3
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	430a      	orrs	r2, r1
 8005880:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2200      	movs	r2, #0
 8005886:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2201      	movs	r2, #1
 800588c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005890:	2300      	movs	r3, #0
}
 8005892:	4618      	mov	r0, r3
 8005894:	3710      	adds	r7, #16
 8005896:	46bd      	mov	sp, r7
 8005898:	bd80      	pop	{r7, pc}

0800589a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800589a:	b580      	push	{r7, lr}
 800589c:	b088      	sub	sp, #32
 800589e:	af00      	add	r7, sp, #0
 80058a0:	60f8      	str	r0, [r7, #12]
 80058a2:	60b9      	str	r1, [r7, #8]
 80058a4:	603b      	str	r3, [r7, #0]
 80058a6:	4613      	mov	r3, r2
 80058a8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80058aa:	2300      	movs	r3, #0
 80058ac:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80058b4:	2b01      	cmp	r3, #1
 80058b6:	d101      	bne.n	80058bc <HAL_SPI_Transmit+0x22>
 80058b8:	2302      	movs	r3, #2
 80058ba:	e158      	b.n	8005b6e <HAL_SPI_Transmit+0x2d4>
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	2201      	movs	r2, #1
 80058c0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80058c4:	f7fd fa46 	bl	8002d54 <HAL_GetTick>
 80058c8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80058ca:	88fb      	ldrh	r3, [r7, #6]
 80058cc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80058d4:	b2db      	uxtb	r3, r3
 80058d6:	2b01      	cmp	r3, #1
 80058d8:	d002      	beq.n	80058e0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80058da:	2302      	movs	r3, #2
 80058dc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80058de:	e13d      	b.n	8005b5c <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d002      	beq.n	80058ec <HAL_SPI_Transmit+0x52>
 80058e6:	88fb      	ldrh	r3, [r7, #6]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d102      	bne.n	80058f2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80058ec:	2301      	movs	r3, #1
 80058ee:	77fb      	strb	r3, [r7, #31]
    goto error;
 80058f0:	e134      	b.n	8005b5c <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	2203      	movs	r2, #3
 80058f6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	2200      	movs	r2, #0
 80058fe:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	68ba      	ldr	r2, [r7, #8]
 8005904:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	88fa      	ldrh	r2, [r7, #6]
 800590a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	88fa      	ldrh	r2, [r7, #6]
 8005910:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	2200      	movs	r2, #0
 8005916:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	2200      	movs	r2, #0
 800591c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	2200      	movs	r2, #0
 8005924:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	2200      	movs	r2, #0
 800592c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	2200      	movs	r2, #0
 8005932:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	689b      	ldr	r3, [r3, #8]
 8005938:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800593c:	d10f      	bne.n	800595e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	681a      	ldr	r2, [r3, #0]
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800594c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	681a      	ldr	r2, [r3, #0]
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800595c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005968:	2b40      	cmp	r3, #64	; 0x40
 800596a:	d007      	beq.n	800597c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	681a      	ldr	r2, [r3, #0]
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800597a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	68db      	ldr	r3, [r3, #12]
 8005980:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005984:	d94b      	bls.n	8005a1e <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	685b      	ldr	r3, [r3, #4]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d002      	beq.n	8005994 <HAL_SPI_Transmit+0xfa>
 800598e:	8afb      	ldrh	r3, [r7, #22]
 8005990:	2b01      	cmp	r3, #1
 8005992:	d13e      	bne.n	8005a12 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005998:	881a      	ldrh	r2, [r3, #0]
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059a4:	1c9a      	adds	r2, r3, #2
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059ae:	b29b      	uxth	r3, r3
 80059b0:	3b01      	subs	r3, #1
 80059b2:	b29a      	uxth	r2, r3
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80059b8:	e02b      	b.n	8005a12 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	689b      	ldr	r3, [r3, #8]
 80059c0:	f003 0302 	and.w	r3, r3, #2
 80059c4:	2b02      	cmp	r3, #2
 80059c6:	d112      	bne.n	80059ee <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059cc:	881a      	ldrh	r2, [r3, #0]
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059d8:	1c9a      	adds	r2, r3, #2
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059e2:	b29b      	uxth	r3, r3
 80059e4:	3b01      	subs	r3, #1
 80059e6:	b29a      	uxth	r2, r3
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	87da      	strh	r2, [r3, #62]	; 0x3e
 80059ec:	e011      	b.n	8005a12 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80059ee:	f7fd f9b1 	bl	8002d54 <HAL_GetTick>
 80059f2:	4602      	mov	r2, r0
 80059f4:	69bb      	ldr	r3, [r7, #24]
 80059f6:	1ad3      	subs	r3, r2, r3
 80059f8:	683a      	ldr	r2, [r7, #0]
 80059fa:	429a      	cmp	r2, r3
 80059fc:	d803      	bhi.n	8005a06 <HAL_SPI_Transmit+0x16c>
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a04:	d102      	bne.n	8005a0c <HAL_SPI_Transmit+0x172>
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d102      	bne.n	8005a12 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8005a0c:	2303      	movs	r3, #3
 8005a0e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005a10:	e0a4      	b.n	8005b5c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a16:	b29b      	uxth	r3, r3
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d1ce      	bne.n	80059ba <HAL_SPI_Transmit+0x120>
 8005a1c:	e07c      	b.n	8005b18 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	685b      	ldr	r3, [r3, #4]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d002      	beq.n	8005a2c <HAL_SPI_Transmit+0x192>
 8005a26:	8afb      	ldrh	r3, [r7, #22]
 8005a28:	2b01      	cmp	r3, #1
 8005a2a:	d170      	bne.n	8005b0e <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a30:	b29b      	uxth	r3, r3
 8005a32:	2b01      	cmp	r3, #1
 8005a34:	d912      	bls.n	8005a5c <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a3a:	881a      	ldrh	r2, [r3, #0]
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a46:	1c9a      	adds	r2, r3, #2
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a50:	b29b      	uxth	r3, r3
 8005a52:	3b02      	subs	r3, #2
 8005a54:	b29a      	uxth	r2, r3
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005a5a:	e058      	b.n	8005b0e <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	330c      	adds	r3, #12
 8005a66:	7812      	ldrb	r2, [r2, #0]
 8005a68:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a6e:	1c5a      	adds	r2, r3, #1
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a78:	b29b      	uxth	r3, r3
 8005a7a:	3b01      	subs	r3, #1
 8005a7c:	b29a      	uxth	r2, r3
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005a82:	e044      	b.n	8005b0e <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	689b      	ldr	r3, [r3, #8]
 8005a8a:	f003 0302 	and.w	r3, r3, #2
 8005a8e:	2b02      	cmp	r3, #2
 8005a90:	d12b      	bne.n	8005aea <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a96:	b29b      	uxth	r3, r3
 8005a98:	2b01      	cmp	r3, #1
 8005a9a:	d912      	bls.n	8005ac2 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aa0:	881a      	ldrh	r2, [r3, #0]
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aac:	1c9a      	adds	r2, r3, #2
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ab6:	b29b      	uxth	r3, r3
 8005ab8:	3b02      	subs	r3, #2
 8005aba:	b29a      	uxth	r2, r3
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005ac0:	e025      	b.n	8005b0e <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	330c      	adds	r3, #12
 8005acc:	7812      	ldrb	r2, [r2, #0]
 8005ace:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ad4:	1c5a      	adds	r2, r3, #1
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ade:	b29b      	uxth	r3, r3
 8005ae0:	3b01      	subs	r3, #1
 8005ae2:	b29a      	uxth	r2, r3
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005ae8:	e011      	b.n	8005b0e <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005aea:	f7fd f933 	bl	8002d54 <HAL_GetTick>
 8005aee:	4602      	mov	r2, r0
 8005af0:	69bb      	ldr	r3, [r7, #24]
 8005af2:	1ad3      	subs	r3, r2, r3
 8005af4:	683a      	ldr	r2, [r7, #0]
 8005af6:	429a      	cmp	r2, r3
 8005af8:	d803      	bhi.n	8005b02 <HAL_SPI_Transmit+0x268>
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b00:	d102      	bne.n	8005b08 <HAL_SPI_Transmit+0x26e>
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d102      	bne.n	8005b0e <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8005b08:	2303      	movs	r3, #3
 8005b0a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005b0c:	e026      	b.n	8005b5c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b12:	b29b      	uxth	r3, r3
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d1b5      	bne.n	8005a84 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005b18:	69ba      	ldr	r2, [r7, #24]
 8005b1a:	6839      	ldr	r1, [r7, #0]
 8005b1c:	68f8      	ldr	r0, [r7, #12]
 8005b1e:	f000 f949 	bl	8005db4 <SPI_EndRxTxTransaction>
 8005b22:	4603      	mov	r3, r0
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d002      	beq.n	8005b2e <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	2220      	movs	r2, #32
 8005b2c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	689b      	ldr	r3, [r3, #8]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d10a      	bne.n	8005b4c <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005b36:	2300      	movs	r3, #0
 8005b38:	613b      	str	r3, [r7, #16]
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	68db      	ldr	r3, [r3, #12]
 8005b40:	613b      	str	r3, [r7, #16]
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	689b      	ldr	r3, [r3, #8]
 8005b48:	613b      	str	r3, [r7, #16]
 8005b4a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d002      	beq.n	8005b5a <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8005b54:	2301      	movs	r3, #1
 8005b56:	77fb      	strb	r3, [r7, #31]
 8005b58:	e000      	b.n	8005b5c <HAL_SPI_Transmit+0x2c2>
  }

error:
 8005b5a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	2201      	movs	r2, #1
 8005b60:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	2200      	movs	r2, #0
 8005b68:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005b6c:	7ffb      	ldrb	r3, [r7, #31]
}
 8005b6e:	4618      	mov	r0, r3
 8005b70:	3720      	adds	r7, #32
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bd80      	pop	{r7, pc}
	...

08005b78 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b088      	sub	sp, #32
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	60f8      	str	r0, [r7, #12]
 8005b80:	60b9      	str	r1, [r7, #8]
 8005b82:	603b      	str	r3, [r7, #0]
 8005b84:	4613      	mov	r3, r2
 8005b86:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005b88:	f7fd f8e4 	bl	8002d54 <HAL_GetTick>
 8005b8c:	4602      	mov	r2, r0
 8005b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b90:	1a9b      	subs	r3, r3, r2
 8005b92:	683a      	ldr	r2, [r7, #0]
 8005b94:	4413      	add	r3, r2
 8005b96:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005b98:	f7fd f8dc 	bl	8002d54 <HAL_GetTick>
 8005b9c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005b9e:	4b39      	ldr	r3, [pc, #228]	; (8005c84 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	015b      	lsls	r3, r3, #5
 8005ba4:	0d1b      	lsrs	r3, r3, #20
 8005ba6:	69fa      	ldr	r2, [r7, #28]
 8005ba8:	fb02 f303 	mul.w	r3, r2, r3
 8005bac:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005bae:	e054      	b.n	8005c5a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bb6:	d050      	beq.n	8005c5a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005bb8:	f7fd f8cc 	bl	8002d54 <HAL_GetTick>
 8005bbc:	4602      	mov	r2, r0
 8005bbe:	69bb      	ldr	r3, [r7, #24]
 8005bc0:	1ad3      	subs	r3, r2, r3
 8005bc2:	69fa      	ldr	r2, [r7, #28]
 8005bc4:	429a      	cmp	r2, r3
 8005bc6:	d902      	bls.n	8005bce <SPI_WaitFlagStateUntilTimeout+0x56>
 8005bc8:	69fb      	ldr	r3, [r7, #28]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d13d      	bne.n	8005c4a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	685a      	ldr	r2, [r3, #4]
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005bdc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	685b      	ldr	r3, [r3, #4]
 8005be2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005be6:	d111      	bne.n	8005c0c <SPI_WaitFlagStateUntilTimeout+0x94>
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	689b      	ldr	r3, [r3, #8]
 8005bec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005bf0:	d004      	beq.n	8005bfc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	689b      	ldr	r3, [r3, #8]
 8005bf6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bfa:	d107      	bne.n	8005c0c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	681a      	ldr	r2, [r3, #0]
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c0a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c10:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c14:	d10f      	bne.n	8005c36 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	681a      	ldr	r2, [r3, #0]
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005c24:	601a      	str	r2, [r3, #0]
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	681a      	ldr	r2, [r3, #0]
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005c34:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	2201      	movs	r2, #1
 8005c3a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	2200      	movs	r2, #0
 8005c42:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005c46:	2303      	movs	r3, #3
 8005c48:	e017      	b.n	8005c7a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005c4a:	697b      	ldr	r3, [r7, #20]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d101      	bne.n	8005c54 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005c50:	2300      	movs	r3, #0
 8005c52:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005c54:	697b      	ldr	r3, [r7, #20]
 8005c56:	3b01      	subs	r3, #1
 8005c58:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	689a      	ldr	r2, [r3, #8]
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	4013      	ands	r3, r2
 8005c64:	68ba      	ldr	r2, [r7, #8]
 8005c66:	429a      	cmp	r2, r3
 8005c68:	bf0c      	ite	eq
 8005c6a:	2301      	moveq	r3, #1
 8005c6c:	2300      	movne	r3, #0
 8005c6e:	b2db      	uxtb	r3, r3
 8005c70:	461a      	mov	r2, r3
 8005c72:	79fb      	ldrb	r3, [r7, #7]
 8005c74:	429a      	cmp	r2, r3
 8005c76:	d19b      	bne.n	8005bb0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005c78:	2300      	movs	r3, #0
}
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	3720      	adds	r7, #32
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	bd80      	pop	{r7, pc}
 8005c82:	bf00      	nop
 8005c84:	2000000c 	.word	0x2000000c

08005c88 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b08a      	sub	sp, #40	; 0x28
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	60f8      	str	r0, [r7, #12]
 8005c90:	60b9      	str	r1, [r7, #8]
 8005c92:	607a      	str	r2, [r7, #4]
 8005c94:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005c96:	2300      	movs	r3, #0
 8005c98:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005c9a:	f7fd f85b 	bl	8002d54 <HAL_GetTick>
 8005c9e:	4602      	mov	r2, r0
 8005ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ca2:	1a9b      	subs	r3, r3, r2
 8005ca4:	683a      	ldr	r2, [r7, #0]
 8005ca6:	4413      	add	r3, r2
 8005ca8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8005caa:	f7fd f853 	bl	8002d54 <HAL_GetTick>
 8005cae:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	330c      	adds	r3, #12
 8005cb6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005cb8:	4b3d      	ldr	r3, [pc, #244]	; (8005db0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005cba:	681a      	ldr	r2, [r3, #0]
 8005cbc:	4613      	mov	r3, r2
 8005cbe:	009b      	lsls	r3, r3, #2
 8005cc0:	4413      	add	r3, r2
 8005cc2:	00da      	lsls	r2, r3, #3
 8005cc4:	1ad3      	subs	r3, r2, r3
 8005cc6:	0d1b      	lsrs	r3, r3, #20
 8005cc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cca:	fb02 f303 	mul.w	r3, r2, r3
 8005cce:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005cd0:	e060      	b.n	8005d94 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005cd2:	68bb      	ldr	r3, [r7, #8]
 8005cd4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005cd8:	d107      	bne.n	8005cea <SPI_WaitFifoStateUntilTimeout+0x62>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d104      	bne.n	8005cea <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005ce0:	69fb      	ldr	r3, [r7, #28]
 8005ce2:	781b      	ldrb	r3, [r3, #0]
 8005ce4:	b2db      	uxtb	r3, r3
 8005ce6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005ce8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cf0:	d050      	beq.n	8005d94 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005cf2:	f7fd f82f 	bl	8002d54 <HAL_GetTick>
 8005cf6:	4602      	mov	r2, r0
 8005cf8:	6a3b      	ldr	r3, [r7, #32]
 8005cfa:	1ad3      	subs	r3, r2, r3
 8005cfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cfe:	429a      	cmp	r2, r3
 8005d00:	d902      	bls.n	8005d08 <SPI_WaitFifoStateUntilTimeout+0x80>
 8005d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d13d      	bne.n	8005d84 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	685a      	ldr	r2, [r3, #4]
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005d16:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	685b      	ldr	r3, [r3, #4]
 8005d1c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005d20:	d111      	bne.n	8005d46 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	689b      	ldr	r3, [r3, #8]
 8005d26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d2a:	d004      	beq.n	8005d36 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	689b      	ldr	r3, [r3, #8]
 8005d30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d34:	d107      	bne.n	8005d46 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	681a      	ldr	r2, [r3, #0]
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d44:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d4e:	d10f      	bne.n	8005d70 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	681a      	ldr	r2, [r3, #0]
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005d5e:	601a      	str	r2, [r3, #0]
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	681a      	ldr	r2, [r3, #0]
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005d6e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	2201      	movs	r2, #1
 8005d74:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005d80:	2303      	movs	r3, #3
 8005d82:	e010      	b.n	8005da6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005d84:	69bb      	ldr	r3, [r7, #24]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d101      	bne.n	8005d8e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8005d8e:	69bb      	ldr	r3, [r7, #24]
 8005d90:	3b01      	subs	r3, #1
 8005d92:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	689a      	ldr	r2, [r3, #8]
 8005d9a:	68bb      	ldr	r3, [r7, #8]
 8005d9c:	4013      	ands	r3, r2
 8005d9e:	687a      	ldr	r2, [r7, #4]
 8005da0:	429a      	cmp	r2, r3
 8005da2:	d196      	bne.n	8005cd2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005da4:	2300      	movs	r3, #0
}
 8005da6:	4618      	mov	r0, r3
 8005da8:	3728      	adds	r7, #40	; 0x28
 8005daa:	46bd      	mov	sp, r7
 8005dac:	bd80      	pop	{r7, pc}
 8005dae:	bf00      	nop
 8005db0:	2000000c 	.word	0x2000000c

08005db4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b086      	sub	sp, #24
 8005db8:	af02      	add	r7, sp, #8
 8005dba:	60f8      	str	r0, [r7, #12]
 8005dbc:	60b9      	str	r1, [r7, #8]
 8005dbe:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	9300      	str	r3, [sp, #0]
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005dcc:	68f8      	ldr	r0, [r7, #12]
 8005dce:	f7ff ff5b 	bl	8005c88 <SPI_WaitFifoStateUntilTimeout>
 8005dd2:	4603      	mov	r3, r0
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d007      	beq.n	8005de8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ddc:	f043 0220 	orr.w	r2, r3, #32
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005de4:	2303      	movs	r3, #3
 8005de6:	e027      	b.n	8005e38 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	9300      	str	r3, [sp, #0]
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	2200      	movs	r2, #0
 8005df0:	2180      	movs	r1, #128	; 0x80
 8005df2:	68f8      	ldr	r0, [r7, #12]
 8005df4:	f7ff fec0 	bl	8005b78 <SPI_WaitFlagStateUntilTimeout>
 8005df8:	4603      	mov	r3, r0
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d007      	beq.n	8005e0e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e02:	f043 0220 	orr.w	r2, r3, #32
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005e0a:	2303      	movs	r3, #3
 8005e0c:	e014      	b.n	8005e38 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	9300      	str	r3, [sp, #0]
 8005e12:	68bb      	ldr	r3, [r7, #8]
 8005e14:	2200      	movs	r2, #0
 8005e16:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005e1a:	68f8      	ldr	r0, [r7, #12]
 8005e1c:	f7ff ff34 	bl	8005c88 <SPI_WaitFifoStateUntilTimeout>
 8005e20:	4603      	mov	r3, r0
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d007      	beq.n	8005e36 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e2a:	f043 0220 	orr.w	r2, r3, #32
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005e32:	2303      	movs	r3, #3
 8005e34:	e000      	b.n	8005e38 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005e36:	2300      	movs	r3, #0
}
 8005e38:	4618      	mov	r0, r3
 8005e3a:	3710      	adds	r7, #16
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	bd80      	pop	{r7, pc}

08005e40 <__errno>:
 8005e40:	4b01      	ldr	r3, [pc, #4]	; (8005e48 <__errno+0x8>)
 8005e42:	6818      	ldr	r0, [r3, #0]
 8005e44:	4770      	bx	lr
 8005e46:	bf00      	nop
 8005e48:	20000018 	.word	0x20000018

08005e4c <__libc_init_array>:
 8005e4c:	b570      	push	{r4, r5, r6, lr}
 8005e4e:	4d0d      	ldr	r5, [pc, #52]	; (8005e84 <__libc_init_array+0x38>)
 8005e50:	4c0d      	ldr	r4, [pc, #52]	; (8005e88 <__libc_init_array+0x3c>)
 8005e52:	1b64      	subs	r4, r4, r5
 8005e54:	10a4      	asrs	r4, r4, #2
 8005e56:	2600      	movs	r6, #0
 8005e58:	42a6      	cmp	r6, r4
 8005e5a:	d109      	bne.n	8005e70 <__libc_init_array+0x24>
 8005e5c:	4d0b      	ldr	r5, [pc, #44]	; (8005e8c <__libc_init_array+0x40>)
 8005e5e:	4c0c      	ldr	r4, [pc, #48]	; (8005e90 <__libc_init_array+0x44>)
 8005e60:	f001 f858 	bl	8006f14 <_init>
 8005e64:	1b64      	subs	r4, r4, r5
 8005e66:	10a4      	asrs	r4, r4, #2
 8005e68:	2600      	movs	r6, #0
 8005e6a:	42a6      	cmp	r6, r4
 8005e6c:	d105      	bne.n	8005e7a <__libc_init_array+0x2e>
 8005e6e:	bd70      	pop	{r4, r5, r6, pc}
 8005e70:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e74:	4798      	blx	r3
 8005e76:	3601      	adds	r6, #1
 8005e78:	e7ee      	b.n	8005e58 <__libc_init_array+0xc>
 8005e7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e7e:	4798      	blx	r3
 8005e80:	3601      	adds	r6, #1
 8005e82:	e7f2      	b.n	8005e6a <__libc_init_array+0x1e>
 8005e84:	08007820 	.word	0x08007820
 8005e88:	08007820 	.word	0x08007820
 8005e8c:	08007820 	.word	0x08007820
 8005e90:	08007824 	.word	0x08007824

08005e94 <memset>:
 8005e94:	4402      	add	r2, r0
 8005e96:	4603      	mov	r3, r0
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d100      	bne.n	8005e9e <memset+0xa>
 8005e9c:	4770      	bx	lr
 8005e9e:	f803 1b01 	strb.w	r1, [r3], #1
 8005ea2:	e7f9      	b.n	8005e98 <memset+0x4>

08005ea4 <rand>:
 8005ea4:	4b16      	ldr	r3, [pc, #88]	; (8005f00 <rand+0x5c>)
 8005ea6:	b510      	push	{r4, lr}
 8005ea8:	681c      	ldr	r4, [r3, #0]
 8005eaa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005eac:	b9b3      	cbnz	r3, 8005edc <rand+0x38>
 8005eae:	2018      	movs	r0, #24
 8005eb0:	f000 f866 	bl	8005f80 <malloc>
 8005eb4:	63a0      	str	r0, [r4, #56]	; 0x38
 8005eb6:	b928      	cbnz	r0, 8005ec4 <rand+0x20>
 8005eb8:	4602      	mov	r2, r0
 8005eba:	4b12      	ldr	r3, [pc, #72]	; (8005f04 <rand+0x60>)
 8005ebc:	4812      	ldr	r0, [pc, #72]	; (8005f08 <rand+0x64>)
 8005ebe:	214e      	movs	r1, #78	; 0x4e
 8005ec0:	f000 f82e 	bl	8005f20 <__assert_func>
 8005ec4:	4a11      	ldr	r2, [pc, #68]	; (8005f0c <rand+0x68>)
 8005ec6:	4b12      	ldr	r3, [pc, #72]	; (8005f10 <rand+0x6c>)
 8005ec8:	e9c0 2300 	strd	r2, r3, [r0]
 8005ecc:	4b11      	ldr	r3, [pc, #68]	; (8005f14 <rand+0x70>)
 8005ece:	6083      	str	r3, [r0, #8]
 8005ed0:	230b      	movs	r3, #11
 8005ed2:	8183      	strh	r3, [r0, #12]
 8005ed4:	2201      	movs	r2, #1
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8005edc:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8005ede:	4a0e      	ldr	r2, [pc, #56]	; (8005f18 <rand+0x74>)
 8005ee0:	6920      	ldr	r0, [r4, #16]
 8005ee2:	6963      	ldr	r3, [r4, #20]
 8005ee4:	490d      	ldr	r1, [pc, #52]	; (8005f1c <rand+0x78>)
 8005ee6:	4342      	muls	r2, r0
 8005ee8:	fb01 2203 	mla	r2, r1, r3, r2
 8005eec:	fba0 0101 	umull	r0, r1, r0, r1
 8005ef0:	1c43      	adds	r3, r0, #1
 8005ef2:	eb42 0001 	adc.w	r0, r2, r1
 8005ef6:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8005efa:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8005efe:	bd10      	pop	{r4, pc}
 8005f00:	20000018 	.word	0x20000018
 8005f04:	080076dc 	.word	0x080076dc
 8005f08:	080076f3 	.word	0x080076f3
 8005f0c:	abcd330e 	.word	0xabcd330e
 8005f10:	e66d1234 	.word	0xe66d1234
 8005f14:	0005deec 	.word	0x0005deec
 8005f18:	5851f42d 	.word	0x5851f42d
 8005f1c:	4c957f2d 	.word	0x4c957f2d

08005f20 <__assert_func>:
 8005f20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005f22:	4614      	mov	r4, r2
 8005f24:	461a      	mov	r2, r3
 8005f26:	4b09      	ldr	r3, [pc, #36]	; (8005f4c <__assert_func+0x2c>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	4605      	mov	r5, r0
 8005f2c:	68d8      	ldr	r0, [r3, #12]
 8005f2e:	b14c      	cbz	r4, 8005f44 <__assert_func+0x24>
 8005f30:	4b07      	ldr	r3, [pc, #28]	; (8005f50 <__assert_func+0x30>)
 8005f32:	9100      	str	r1, [sp, #0]
 8005f34:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005f38:	4906      	ldr	r1, [pc, #24]	; (8005f54 <__assert_func+0x34>)
 8005f3a:	462b      	mov	r3, r5
 8005f3c:	f000 f80e 	bl	8005f5c <fiprintf>
 8005f40:	f000 fcc4 	bl	80068cc <abort>
 8005f44:	4b04      	ldr	r3, [pc, #16]	; (8005f58 <__assert_func+0x38>)
 8005f46:	461c      	mov	r4, r3
 8005f48:	e7f3      	b.n	8005f32 <__assert_func+0x12>
 8005f4a:	bf00      	nop
 8005f4c:	20000018 	.word	0x20000018
 8005f50:	0800774e 	.word	0x0800774e
 8005f54:	0800775b 	.word	0x0800775b
 8005f58:	08007789 	.word	0x08007789

08005f5c <fiprintf>:
 8005f5c:	b40e      	push	{r1, r2, r3}
 8005f5e:	b503      	push	{r0, r1, lr}
 8005f60:	4601      	mov	r1, r0
 8005f62:	ab03      	add	r3, sp, #12
 8005f64:	4805      	ldr	r0, [pc, #20]	; (8005f7c <fiprintf+0x20>)
 8005f66:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f6a:	6800      	ldr	r0, [r0, #0]
 8005f6c:	9301      	str	r3, [sp, #4]
 8005f6e:	f000 f919 	bl	80061a4 <_vfiprintf_r>
 8005f72:	b002      	add	sp, #8
 8005f74:	f85d eb04 	ldr.w	lr, [sp], #4
 8005f78:	b003      	add	sp, #12
 8005f7a:	4770      	bx	lr
 8005f7c:	20000018 	.word	0x20000018

08005f80 <malloc>:
 8005f80:	4b02      	ldr	r3, [pc, #8]	; (8005f8c <malloc+0xc>)
 8005f82:	4601      	mov	r1, r0
 8005f84:	6818      	ldr	r0, [r3, #0]
 8005f86:	f000 b86f 	b.w	8006068 <_malloc_r>
 8005f8a:	bf00      	nop
 8005f8c:	20000018 	.word	0x20000018

08005f90 <_free_r>:
 8005f90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005f92:	2900      	cmp	r1, #0
 8005f94:	d044      	beq.n	8006020 <_free_r+0x90>
 8005f96:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f9a:	9001      	str	r0, [sp, #4]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	f1a1 0404 	sub.w	r4, r1, #4
 8005fa2:	bfb8      	it	lt
 8005fa4:	18e4      	addlt	r4, r4, r3
 8005fa6:	f000 feb9 	bl	8006d1c <__malloc_lock>
 8005faa:	4a1e      	ldr	r2, [pc, #120]	; (8006024 <_free_r+0x94>)
 8005fac:	9801      	ldr	r0, [sp, #4]
 8005fae:	6813      	ldr	r3, [r2, #0]
 8005fb0:	b933      	cbnz	r3, 8005fc0 <_free_r+0x30>
 8005fb2:	6063      	str	r3, [r4, #4]
 8005fb4:	6014      	str	r4, [r2, #0]
 8005fb6:	b003      	add	sp, #12
 8005fb8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005fbc:	f000 beb4 	b.w	8006d28 <__malloc_unlock>
 8005fc0:	42a3      	cmp	r3, r4
 8005fc2:	d908      	bls.n	8005fd6 <_free_r+0x46>
 8005fc4:	6825      	ldr	r5, [r4, #0]
 8005fc6:	1961      	adds	r1, r4, r5
 8005fc8:	428b      	cmp	r3, r1
 8005fca:	bf01      	itttt	eq
 8005fcc:	6819      	ldreq	r1, [r3, #0]
 8005fce:	685b      	ldreq	r3, [r3, #4]
 8005fd0:	1949      	addeq	r1, r1, r5
 8005fd2:	6021      	streq	r1, [r4, #0]
 8005fd4:	e7ed      	b.n	8005fb2 <_free_r+0x22>
 8005fd6:	461a      	mov	r2, r3
 8005fd8:	685b      	ldr	r3, [r3, #4]
 8005fda:	b10b      	cbz	r3, 8005fe0 <_free_r+0x50>
 8005fdc:	42a3      	cmp	r3, r4
 8005fde:	d9fa      	bls.n	8005fd6 <_free_r+0x46>
 8005fe0:	6811      	ldr	r1, [r2, #0]
 8005fe2:	1855      	adds	r5, r2, r1
 8005fe4:	42a5      	cmp	r5, r4
 8005fe6:	d10b      	bne.n	8006000 <_free_r+0x70>
 8005fe8:	6824      	ldr	r4, [r4, #0]
 8005fea:	4421      	add	r1, r4
 8005fec:	1854      	adds	r4, r2, r1
 8005fee:	42a3      	cmp	r3, r4
 8005ff0:	6011      	str	r1, [r2, #0]
 8005ff2:	d1e0      	bne.n	8005fb6 <_free_r+0x26>
 8005ff4:	681c      	ldr	r4, [r3, #0]
 8005ff6:	685b      	ldr	r3, [r3, #4]
 8005ff8:	6053      	str	r3, [r2, #4]
 8005ffa:	4421      	add	r1, r4
 8005ffc:	6011      	str	r1, [r2, #0]
 8005ffe:	e7da      	b.n	8005fb6 <_free_r+0x26>
 8006000:	d902      	bls.n	8006008 <_free_r+0x78>
 8006002:	230c      	movs	r3, #12
 8006004:	6003      	str	r3, [r0, #0]
 8006006:	e7d6      	b.n	8005fb6 <_free_r+0x26>
 8006008:	6825      	ldr	r5, [r4, #0]
 800600a:	1961      	adds	r1, r4, r5
 800600c:	428b      	cmp	r3, r1
 800600e:	bf04      	itt	eq
 8006010:	6819      	ldreq	r1, [r3, #0]
 8006012:	685b      	ldreq	r3, [r3, #4]
 8006014:	6063      	str	r3, [r4, #4]
 8006016:	bf04      	itt	eq
 8006018:	1949      	addeq	r1, r1, r5
 800601a:	6021      	streq	r1, [r4, #0]
 800601c:	6054      	str	r4, [r2, #4]
 800601e:	e7ca      	b.n	8005fb6 <_free_r+0x26>
 8006020:	b003      	add	sp, #12
 8006022:	bd30      	pop	{r4, r5, pc}
 8006024:	20002690 	.word	0x20002690

08006028 <sbrk_aligned>:
 8006028:	b570      	push	{r4, r5, r6, lr}
 800602a:	4e0e      	ldr	r6, [pc, #56]	; (8006064 <sbrk_aligned+0x3c>)
 800602c:	460c      	mov	r4, r1
 800602e:	6831      	ldr	r1, [r6, #0]
 8006030:	4605      	mov	r5, r0
 8006032:	b911      	cbnz	r1, 800603a <sbrk_aligned+0x12>
 8006034:	f000 fb7a 	bl	800672c <_sbrk_r>
 8006038:	6030      	str	r0, [r6, #0]
 800603a:	4621      	mov	r1, r4
 800603c:	4628      	mov	r0, r5
 800603e:	f000 fb75 	bl	800672c <_sbrk_r>
 8006042:	1c43      	adds	r3, r0, #1
 8006044:	d00a      	beq.n	800605c <sbrk_aligned+0x34>
 8006046:	1cc4      	adds	r4, r0, #3
 8006048:	f024 0403 	bic.w	r4, r4, #3
 800604c:	42a0      	cmp	r0, r4
 800604e:	d007      	beq.n	8006060 <sbrk_aligned+0x38>
 8006050:	1a21      	subs	r1, r4, r0
 8006052:	4628      	mov	r0, r5
 8006054:	f000 fb6a 	bl	800672c <_sbrk_r>
 8006058:	3001      	adds	r0, #1
 800605a:	d101      	bne.n	8006060 <sbrk_aligned+0x38>
 800605c:	f04f 34ff 	mov.w	r4, #4294967295
 8006060:	4620      	mov	r0, r4
 8006062:	bd70      	pop	{r4, r5, r6, pc}
 8006064:	20002694 	.word	0x20002694

08006068 <_malloc_r>:
 8006068:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800606c:	1ccd      	adds	r5, r1, #3
 800606e:	f025 0503 	bic.w	r5, r5, #3
 8006072:	3508      	adds	r5, #8
 8006074:	2d0c      	cmp	r5, #12
 8006076:	bf38      	it	cc
 8006078:	250c      	movcc	r5, #12
 800607a:	2d00      	cmp	r5, #0
 800607c:	4607      	mov	r7, r0
 800607e:	db01      	blt.n	8006084 <_malloc_r+0x1c>
 8006080:	42a9      	cmp	r1, r5
 8006082:	d905      	bls.n	8006090 <_malloc_r+0x28>
 8006084:	230c      	movs	r3, #12
 8006086:	603b      	str	r3, [r7, #0]
 8006088:	2600      	movs	r6, #0
 800608a:	4630      	mov	r0, r6
 800608c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006090:	4e2e      	ldr	r6, [pc, #184]	; (800614c <_malloc_r+0xe4>)
 8006092:	f000 fe43 	bl	8006d1c <__malloc_lock>
 8006096:	6833      	ldr	r3, [r6, #0]
 8006098:	461c      	mov	r4, r3
 800609a:	bb34      	cbnz	r4, 80060ea <_malloc_r+0x82>
 800609c:	4629      	mov	r1, r5
 800609e:	4638      	mov	r0, r7
 80060a0:	f7ff ffc2 	bl	8006028 <sbrk_aligned>
 80060a4:	1c43      	adds	r3, r0, #1
 80060a6:	4604      	mov	r4, r0
 80060a8:	d14d      	bne.n	8006146 <_malloc_r+0xde>
 80060aa:	6834      	ldr	r4, [r6, #0]
 80060ac:	4626      	mov	r6, r4
 80060ae:	2e00      	cmp	r6, #0
 80060b0:	d140      	bne.n	8006134 <_malloc_r+0xcc>
 80060b2:	6823      	ldr	r3, [r4, #0]
 80060b4:	4631      	mov	r1, r6
 80060b6:	4638      	mov	r0, r7
 80060b8:	eb04 0803 	add.w	r8, r4, r3
 80060bc:	f000 fb36 	bl	800672c <_sbrk_r>
 80060c0:	4580      	cmp	r8, r0
 80060c2:	d13a      	bne.n	800613a <_malloc_r+0xd2>
 80060c4:	6821      	ldr	r1, [r4, #0]
 80060c6:	3503      	adds	r5, #3
 80060c8:	1a6d      	subs	r5, r5, r1
 80060ca:	f025 0503 	bic.w	r5, r5, #3
 80060ce:	3508      	adds	r5, #8
 80060d0:	2d0c      	cmp	r5, #12
 80060d2:	bf38      	it	cc
 80060d4:	250c      	movcc	r5, #12
 80060d6:	4629      	mov	r1, r5
 80060d8:	4638      	mov	r0, r7
 80060da:	f7ff ffa5 	bl	8006028 <sbrk_aligned>
 80060de:	3001      	adds	r0, #1
 80060e0:	d02b      	beq.n	800613a <_malloc_r+0xd2>
 80060e2:	6823      	ldr	r3, [r4, #0]
 80060e4:	442b      	add	r3, r5
 80060e6:	6023      	str	r3, [r4, #0]
 80060e8:	e00e      	b.n	8006108 <_malloc_r+0xa0>
 80060ea:	6822      	ldr	r2, [r4, #0]
 80060ec:	1b52      	subs	r2, r2, r5
 80060ee:	d41e      	bmi.n	800612e <_malloc_r+0xc6>
 80060f0:	2a0b      	cmp	r2, #11
 80060f2:	d916      	bls.n	8006122 <_malloc_r+0xba>
 80060f4:	1961      	adds	r1, r4, r5
 80060f6:	42a3      	cmp	r3, r4
 80060f8:	6025      	str	r5, [r4, #0]
 80060fa:	bf18      	it	ne
 80060fc:	6059      	strne	r1, [r3, #4]
 80060fe:	6863      	ldr	r3, [r4, #4]
 8006100:	bf08      	it	eq
 8006102:	6031      	streq	r1, [r6, #0]
 8006104:	5162      	str	r2, [r4, r5]
 8006106:	604b      	str	r3, [r1, #4]
 8006108:	4638      	mov	r0, r7
 800610a:	f104 060b 	add.w	r6, r4, #11
 800610e:	f000 fe0b 	bl	8006d28 <__malloc_unlock>
 8006112:	f026 0607 	bic.w	r6, r6, #7
 8006116:	1d23      	adds	r3, r4, #4
 8006118:	1af2      	subs	r2, r6, r3
 800611a:	d0b6      	beq.n	800608a <_malloc_r+0x22>
 800611c:	1b9b      	subs	r3, r3, r6
 800611e:	50a3      	str	r3, [r4, r2]
 8006120:	e7b3      	b.n	800608a <_malloc_r+0x22>
 8006122:	6862      	ldr	r2, [r4, #4]
 8006124:	42a3      	cmp	r3, r4
 8006126:	bf0c      	ite	eq
 8006128:	6032      	streq	r2, [r6, #0]
 800612a:	605a      	strne	r2, [r3, #4]
 800612c:	e7ec      	b.n	8006108 <_malloc_r+0xa0>
 800612e:	4623      	mov	r3, r4
 8006130:	6864      	ldr	r4, [r4, #4]
 8006132:	e7b2      	b.n	800609a <_malloc_r+0x32>
 8006134:	4634      	mov	r4, r6
 8006136:	6876      	ldr	r6, [r6, #4]
 8006138:	e7b9      	b.n	80060ae <_malloc_r+0x46>
 800613a:	230c      	movs	r3, #12
 800613c:	603b      	str	r3, [r7, #0]
 800613e:	4638      	mov	r0, r7
 8006140:	f000 fdf2 	bl	8006d28 <__malloc_unlock>
 8006144:	e7a1      	b.n	800608a <_malloc_r+0x22>
 8006146:	6025      	str	r5, [r4, #0]
 8006148:	e7de      	b.n	8006108 <_malloc_r+0xa0>
 800614a:	bf00      	nop
 800614c:	20002690 	.word	0x20002690

08006150 <__sfputc_r>:
 8006150:	6893      	ldr	r3, [r2, #8]
 8006152:	3b01      	subs	r3, #1
 8006154:	2b00      	cmp	r3, #0
 8006156:	b410      	push	{r4}
 8006158:	6093      	str	r3, [r2, #8]
 800615a:	da08      	bge.n	800616e <__sfputc_r+0x1e>
 800615c:	6994      	ldr	r4, [r2, #24]
 800615e:	42a3      	cmp	r3, r4
 8006160:	db01      	blt.n	8006166 <__sfputc_r+0x16>
 8006162:	290a      	cmp	r1, #10
 8006164:	d103      	bne.n	800616e <__sfputc_r+0x1e>
 8006166:	f85d 4b04 	ldr.w	r4, [sp], #4
 800616a:	f000 baef 	b.w	800674c <__swbuf_r>
 800616e:	6813      	ldr	r3, [r2, #0]
 8006170:	1c58      	adds	r0, r3, #1
 8006172:	6010      	str	r0, [r2, #0]
 8006174:	7019      	strb	r1, [r3, #0]
 8006176:	4608      	mov	r0, r1
 8006178:	f85d 4b04 	ldr.w	r4, [sp], #4
 800617c:	4770      	bx	lr

0800617e <__sfputs_r>:
 800617e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006180:	4606      	mov	r6, r0
 8006182:	460f      	mov	r7, r1
 8006184:	4614      	mov	r4, r2
 8006186:	18d5      	adds	r5, r2, r3
 8006188:	42ac      	cmp	r4, r5
 800618a:	d101      	bne.n	8006190 <__sfputs_r+0x12>
 800618c:	2000      	movs	r0, #0
 800618e:	e007      	b.n	80061a0 <__sfputs_r+0x22>
 8006190:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006194:	463a      	mov	r2, r7
 8006196:	4630      	mov	r0, r6
 8006198:	f7ff ffda 	bl	8006150 <__sfputc_r>
 800619c:	1c43      	adds	r3, r0, #1
 800619e:	d1f3      	bne.n	8006188 <__sfputs_r+0xa>
 80061a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080061a4 <_vfiprintf_r>:
 80061a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061a8:	460d      	mov	r5, r1
 80061aa:	b09d      	sub	sp, #116	; 0x74
 80061ac:	4614      	mov	r4, r2
 80061ae:	4698      	mov	r8, r3
 80061b0:	4606      	mov	r6, r0
 80061b2:	b118      	cbz	r0, 80061bc <_vfiprintf_r+0x18>
 80061b4:	6983      	ldr	r3, [r0, #24]
 80061b6:	b90b      	cbnz	r3, 80061bc <_vfiprintf_r+0x18>
 80061b8:	f000 fcaa 	bl	8006b10 <__sinit>
 80061bc:	4b89      	ldr	r3, [pc, #548]	; (80063e4 <_vfiprintf_r+0x240>)
 80061be:	429d      	cmp	r5, r3
 80061c0:	d11b      	bne.n	80061fa <_vfiprintf_r+0x56>
 80061c2:	6875      	ldr	r5, [r6, #4]
 80061c4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80061c6:	07d9      	lsls	r1, r3, #31
 80061c8:	d405      	bmi.n	80061d6 <_vfiprintf_r+0x32>
 80061ca:	89ab      	ldrh	r3, [r5, #12]
 80061cc:	059a      	lsls	r2, r3, #22
 80061ce:	d402      	bmi.n	80061d6 <_vfiprintf_r+0x32>
 80061d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80061d2:	f000 fd3b 	bl	8006c4c <__retarget_lock_acquire_recursive>
 80061d6:	89ab      	ldrh	r3, [r5, #12]
 80061d8:	071b      	lsls	r3, r3, #28
 80061da:	d501      	bpl.n	80061e0 <_vfiprintf_r+0x3c>
 80061dc:	692b      	ldr	r3, [r5, #16]
 80061de:	b9eb      	cbnz	r3, 800621c <_vfiprintf_r+0x78>
 80061e0:	4629      	mov	r1, r5
 80061e2:	4630      	mov	r0, r6
 80061e4:	f000 fb04 	bl	80067f0 <__swsetup_r>
 80061e8:	b1c0      	cbz	r0, 800621c <_vfiprintf_r+0x78>
 80061ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80061ec:	07dc      	lsls	r4, r3, #31
 80061ee:	d50e      	bpl.n	800620e <_vfiprintf_r+0x6a>
 80061f0:	f04f 30ff 	mov.w	r0, #4294967295
 80061f4:	b01d      	add	sp, #116	; 0x74
 80061f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061fa:	4b7b      	ldr	r3, [pc, #492]	; (80063e8 <_vfiprintf_r+0x244>)
 80061fc:	429d      	cmp	r5, r3
 80061fe:	d101      	bne.n	8006204 <_vfiprintf_r+0x60>
 8006200:	68b5      	ldr	r5, [r6, #8]
 8006202:	e7df      	b.n	80061c4 <_vfiprintf_r+0x20>
 8006204:	4b79      	ldr	r3, [pc, #484]	; (80063ec <_vfiprintf_r+0x248>)
 8006206:	429d      	cmp	r5, r3
 8006208:	bf08      	it	eq
 800620a:	68f5      	ldreq	r5, [r6, #12]
 800620c:	e7da      	b.n	80061c4 <_vfiprintf_r+0x20>
 800620e:	89ab      	ldrh	r3, [r5, #12]
 8006210:	0598      	lsls	r0, r3, #22
 8006212:	d4ed      	bmi.n	80061f0 <_vfiprintf_r+0x4c>
 8006214:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006216:	f000 fd1a 	bl	8006c4e <__retarget_lock_release_recursive>
 800621a:	e7e9      	b.n	80061f0 <_vfiprintf_r+0x4c>
 800621c:	2300      	movs	r3, #0
 800621e:	9309      	str	r3, [sp, #36]	; 0x24
 8006220:	2320      	movs	r3, #32
 8006222:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006226:	f8cd 800c 	str.w	r8, [sp, #12]
 800622a:	2330      	movs	r3, #48	; 0x30
 800622c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80063f0 <_vfiprintf_r+0x24c>
 8006230:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006234:	f04f 0901 	mov.w	r9, #1
 8006238:	4623      	mov	r3, r4
 800623a:	469a      	mov	sl, r3
 800623c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006240:	b10a      	cbz	r2, 8006246 <_vfiprintf_r+0xa2>
 8006242:	2a25      	cmp	r2, #37	; 0x25
 8006244:	d1f9      	bne.n	800623a <_vfiprintf_r+0x96>
 8006246:	ebba 0b04 	subs.w	fp, sl, r4
 800624a:	d00b      	beq.n	8006264 <_vfiprintf_r+0xc0>
 800624c:	465b      	mov	r3, fp
 800624e:	4622      	mov	r2, r4
 8006250:	4629      	mov	r1, r5
 8006252:	4630      	mov	r0, r6
 8006254:	f7ff ff93 	bl	800617e <__sfputs_r>
 8006258:	3001      	adds	r0, #1
 800625a:	f000 80aa 	beq.w	80063b2 <_vfiprintf_r+0x20e>
 800625e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006260:	445a      	add	r2, fp
 8006262:	9209      	str	r2, [sp, #36]	; 0x24
 8006264:	f89a 3000 	ldrb.w	r3, [sl]
 8006268:	2b00      	cmp	r3, #0
 800626a:	f000 80a2 	beq.w	80063b2 <_vfiprintf_r+0x20e>
 800626e:	2300      	movs	r3, #0
 8006270:	f04f 32ff 	mov.w	r2, #4294967295
 8006274:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006278:	f10a 0a01 	add.w	sl, sl, #1
 800627c:	9304      	str	r3, [sp, #16]
 800627e:	9307      	str	r3, [sp, #28]
 8006280:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006284:	931a      	str	r3, [sp, #104]	; 0x68
 8006286:	4654      	mov	r4, sl
 8006288:	2205      	movs	r2, #5
 800628a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800628e:	4858      	ldr	r0, [pc, #352]	; (80063f0 <_vfiprintf_r+0x24c>)
 8006290:	f7f9 ff9e 	bl	80001d0 <memchr>
 8006294:	9a04      	ldr	r2, [sp, #16]
 8006296:	b9d8      	cbnz	r0, 80062d0 <_vfiprintf_r+0x12c>
 8006298:	06d1      	lsls	r1, r2, #27
 800629a:	bf44      	itt	mi
 800629c:	2320      	movmi	r3, #32
 800629e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80062a2:	0713      	lsls	r3, r2, #28
 80062a4:	bf44      	itt	mi
 80062a6:	232b      	movmi	r3, #43	; 0x2b
 80062a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80062ac:	f89a 3000 	ldrb.w	r3, [sl]
 80062b0:	2b2a      	cmp	r3, #42	; 0x2a
 80062b2:	d015      	beq.n	80062e0 <_vfiprintf_r+0x13c>
 80062b4:	9a07      	ldr	r2, [sp, #28]
 80062b6:	4654      	mov	r4, sl
 80062b8:	2000      	movs	r0, #0
 80062ba:	f04f 0c0a 	mov.w	ip, #10
 80062be:	4621      	mov	r1, r4
 80062c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80062c4:	3b30      	subs	r3, #48	; 0x30
 80062c6:	2b09      	cmp	r3, #9
 80062c8:	d94e      	bls.n	8006368 <_vfiprintf_r+0x1c4>
 80062ca:	b1b0      	cbz	r0, 80062fa <_vfiprintf_r+0x156>
 80062cc:	9207      	str	r2, [sp, #28]
 80062ce:	e014      	b.n	80062fa <_vfiprintf_r+0x156>
 80062d0:	eba0 0308 	sub.w	r3, r0, r8
 80062d4:	fa09 f303 	lsl.w	r3, r9, r3
 80062d8:	4313      	orrs	r3, r2
 80062da:	9304      	str	r3, [sp, #16]
 80062dc:	46a2      	mov	sl, r4
 80062de:	e7d2      	b.n	8006286 <_vfiprintf_r+0xe2>
 80062e0:	9b03      	ldr	r3, [sp, #12]
 80062e2:	1d19      	adds	r1, r3, #4
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	9103      	str	r1, [sp, #12]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	bfbb      	ittet	lt
 80062ec:	425b      	neglt	r3, r3
 80062ee:	f042 0202 	orrlt.w	r2, r2, #2
 80062f2:	9307      	strge	r3, [sp, #28]
 80062f4:	9307      	strlt	r3, [sp, #28]
 80062f6:	bfb8      	it	lt
 80062f8:	9204      	strlt	r2, [sp, #16]
 80062fa:	7823      	ldrb	r3, [r4, #0]
 80062fc:	2b2e      	cmp	r3, #46	; 0x2e
 80062fe:	d10c      	bne.n	800631a <_vfiprintf_r+0x176>
 8006300:	7863      	ldrb	r3, [r4, #1]
 8006302:	2b2a      	cmp	r3, #42	; 0x2a
 8006304:	d135      	bne.n	8006372 <_vfiprintf_r+0x1ce>
 8006306:	9b03      	ldr	r3, [sp, #12]
 8006308:	1d1a      	adds	r2, r3, #4
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	9203      	str	r2, [sp, #12]
 800630e:	2b00      	cmp	r3, #0
 8006310:	bfb8      	it	lt
 8006312:	f04f 33ff 	movlt.w	r3, #4294967295
 8006316:	3402      	adds	r4, #2
 8006318:	9305      	str	r3, [sp, #20]
 800631a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006400 <_vfiprintf_r+0x25c>
 800631e:	7821      	ldrb	r1, [r4, #0]
 8006320:	2203      	movs	r2, #3
 8006322:	4650      	mov	r0, sl
 8006324:	f7f9 ff54 	bl	80001d0 <memchr>
 8006328:	b140      	cbz	r0, 800633c <_vfiprintf_r+0x198>
 800632a:	2340      	movs	r3, #64	; 0x40
 800632c:	eba0 000a 	sub.w	r0, r0, sl
 8006330:	fa03 f000 	lsl.w	r0, r3, r0
 8006334:	9b04      	ldr	r3, [sp, #16]
 8006336:	4303      	orrs	r3, r0
 8006338:	3401      	adds	r4, #1
 800633a:	9304      	str	r3, [sp, #16]
 800633c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006340:	482c      	ldr	r0, [pc, #176]	; (80063f4 <_vfiprintf_r+0x250>)
 8006342:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006346:	2206      	movs	r2, #6
 8006348:	f7f9 ff42 	bl	80001d0 <memchr>
 800634c:	2800      	cmp	r0, #0
 800634e:	d03f      	beq.n	80063d0 <_vfiprintf_r+0x22c>
 8006350:	4b29      	ldr	r3, [pc, #164]	; (80063f8 <_vfiprintf_r+0x254>)
 8006352:	bb1b      	cbnz	r3, 800639c <_vfiprintf_r+0x1f8>
 8006354:	9b03      	ldr	r3, [sp, #12]
 8006356:	3307      	adds	r3, #7
 8006358:	f023 0307 	bic.w	r3, r3, #7
 800635c:	3308      	adds	r3, #8
 800635e:	9303      	str	r3, [sp, #12]
 8006360:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006362:	443b      	add	r3, r7
 8006364:	9309      	str	r3, [sp, #36]	; 0x24
 8006366:	e767      	b.n	8006238 <_vfiprintf_r+0x94>
 8006368:	fb0c 3202 	mla	r2, ip, r2, r3
 800636c:	460c      	mov	r4, r1
 800636e:	2001      	movs	r0, #1
 8006370:	e7a5      	b.n	80062be <_vfiprintf_r+0x11a>
 8006372:	2300      	movs	r3, #0
 8006374:	3401      	adds	r4, #1
 8006376:	9305      	str	r3, [sp, #20]
 8006378:	4619      	mov	r1, r3
 800637a:	f04f 0c0a 	mov.w	ip, #10
 800637e:	4620      	mov	r0, r4
 8006380:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006384:	3a30      	subs	r2, #48	; 0x30
 8006386:	2a09      	cmp	r2, #9
 8006388:	d903      	bls.n	8006392 <_vfiprintf_r+0x1ee>
 800638a:	2b00      	cmp	r3, #0
 800638c:	d0c5      	beq.n	800631a <_vfiprintf_r+0x176>
 800638e:	9105      	str	r1, [sp, #20]
 8006390:	e7c3      	b.n	800631a <_vfiprintf_r+0x176>
 8006392:	fb0c 2101 	mla	r1, ip, r1, r2
 8006396:	4604      	mov	r4, r0
 8006398:	2301      	movs	r3, #1
 800639a:	e7f0      	b.n	800637e <_vfiprintf_r+0x1da>
 800639c:	ab03      	add	r3, sp, #12
 800639e:	9300      	str	r3, [sp, #0]
 80063a0:	462a      	mov	r2, r5
 80063a2:	4b16      	ldr	r3, [pc, #88]	; (80063fc <_vfiprintf_r+0x258>)
 80063a4:	a904      	add	r1, sp, #16
 80063a6:	4630      	mov	r0, r6
 80063a8:	f3af 8000 	nop.w
 80063ac:	4607      	mov	r7, r0
 80063ae:	1c78      	adds	r0, r7, #1
 80063b0:	d1d6      	bne.n	8006360 <_vfiprintf_r+0x1bc>
 80063b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80063b4:	07d9      	lsls	r1, r3, #31
 80063b6:	d405      	bmi.n	80063c4 <_vfiprintf_r+0x220>
 80063b8:	89ab      	ldrh	r3, [r5, #12]
 80063ba:	059a      	lsls	r2, r3, #22
 80063bc:	d402      	bmi.n	80063c4 <_vfiprintf_r+0x220>
 80063be:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80063c0:	f000 fc45 	bl	8006c4e <__retarget_lock_release_recursive>
 80063c4:	89ab      	ldrh	r3, [r5, #12]
 80063c6:	065b      	lsls	r3, r3, #25
 80063c8:	f53f af12 	bmi.w	80061f0 <_vfiprintf_r+0x4c>
 80063cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80063ce:	e711      	b.n	80061f4 <_vfiprintf_r+0x50>
 80063d0:	ab03      	add	r3, sp, #12
 80063d2:	9300      	str	r3, [sp, #0]
 80063d4:	462a      	mov	r2, r5
 80063d6:	4b09      	ldr	r3, [pc, #36]	; (80063fc <_vfiprintf_r+0x258>)
 80063d8:	a904      	add	r1, sp, #16
 80063da:	4630      	mov	r0, r6
 80063dc:	f000 f880 	bl	80064e0 <_printf_i>
 80063e0:	e7e4      	b.n	80063ac <_vfiprintf_r+0x208>
 80063e2:	bf00      	nop
 80063e4:	080077e0 	.word	0x080077e0
 80063e8:	08007800 	.word	0x08007800
 80063ec:	080077c0 	.word	0x080077c0
 80063f0:	0800778a 	.word	0x0800778a
 80063f4:	08007794 	.word	0x08007794
 80063f8:	00000000 	.word	0x00000000
 80063fc:	0800617f 	.word	0x0800617f
 8006400:	08007790 	.word	0x08007790

08006404 <_printf_common>:
 8006404:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006408:	4616      	mov	r6, r2
 800640a:	4699      	mov	r9, r3
 800640c:	688a      	ldr	r2, [r1, #8]
 800640e:	690b      	ldr	r3, [r1, #16]
 8006410:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006414:	4293      	cmp	r3, r2
 8006416:	bfb8      	it	lt
 8006418:	4613      	movlt	r3, r2
 800641a:	6033      	str	r3, [r6, #0]
 800641c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006420:	4607      	mov	r7, r0
 8006422:	460c      	mov	r4, r1
 8006424:	b10a      	cbz	r2, 800642a <_printf_common+0x26>
 8006426:	3301      	adds	r3, #1
 8006428:	6033      	str	r3, [r6, #0]
 800642a:	6823      	ldr	r3, [r4, #0]
 800642c:	0699      	lsls	r1, r3, #26
 800642e:	bf42      	ittt	mi
 8006430:	6833      	ldrmi	r3, [r6, #0]
 8006432:	3302      	addmi	r3, #2
 8006434:	6033      	strmi	r3, [r6, #0]
 8006436:	6825      	ldr	r5, [r4, #0]
 8006438:	f015 0506 	ands.w	r5, r5, #6
 800643c:	d106      	bne.n	800644c <_printf_common+0x48>
 800643e:	f104 0a19 	add.w	sl, r4, #25
 8006442:	68e3      	ldr	r3, [r4, #12]
 8006444:	6832      	ldr	r2, [r6, #0]
 8006446:	1a9b      	subs	r3, r3, r2
 8006448:	42ab      	cmp	r3, r5
 800644a:	dc26      	bgt.n	800649a <_printf_common+0x96>
 800644c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006450:	1e13      	subs	r3, r2, #0
 8006452:	6822      	ldr	r2, [r4, #0]
 8006454:	bf18      	it	ne
 8006456:	2301      	movne	r3, #1
 8006458:	0692      	lsls	r2, r2, #26
 800645a:	d42b      	bmi.n	80064b4 <_printf_common+0xb0>
 800645c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006460:	4649      	mov	r1, r9
 8006462:	4638      	mov	r0, r7
 8006464:	47c0      	blx	r8
 8006466:	3001      	adds	r0, #1
 8006468:	d01e      	beq.n	80064a8 <_printf_common+0xa4>
 800646a:	6823      	ldr	r3, [r4, #0]
 800646c:	68e5      	ldr	r5, [r4, #12]
 800646e:	6832      	ldr	r2, [r6, #0]
 8006470:	f003 0306 	and.w	r3, r3, #6
 8006474:	2b04      	cmp	r3, #4
 8006476:	bf08      	it	eq
 8006478:	1aad      	subeq	r5, r5, r2
 800647a:	68a3      	ldr	r3, [r4, #8]
 800647c:	6922      	ldr	r2, [r4, #16]
 800647e:	bf0c      	ite	eq
 8006480:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006484:	2500      	movne	r5, #0
 8006486:	4293      	cmp	r3, r2
 8006488:	bfc4      	itt	gt
 800648a:	1a9b      	subgt	r3, r3, r2
 800648c:	18ed      	addgt	r5, r5, r3
 800648e:	2600      	movs	r6, #0
 8006490:	341a      	adds	r4, #26
 8006492:	42b5      	cmp	r5, r6
 8006494:	d11a      	bne.n	80064cc <_printf_common+0xc8>
 8006496:	2000      	movs	r0, #0
 8006498:	e008      	b.n	80064ac <_printf_common+0xa8>
 800649a:	2301      	movs	r3, #1
 800649c:	4652      	mov	r2, sl
 800649e:	4649      	mov	r1, r9
 80064a0:	4638      	mov	r0, r7
 80064a2:	47c0      	blx	r8
 80064a4:	3001      	adds	r0, #1
 80064a6:	d103      	bne.n	80064b0 <_printf_common+0xac>
 80064a8:	f04f 30ff 	mov.w	r0, #4294967295
 80064ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064b0:	3501      	adds	r5, #1
 80064b2:	e7c6      	b.n	8006442 <_printf_common+0x3e>
 80064b4:	18e1      	adds	r1, r4, r3
 80064b6:	1c5a      	adds	r2, r3, #1
 80064b8:	2030      	movs	r0, #48	; 0x30
 80064ba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80064be:	4422      	add	r2, r4
 80064c0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80064c4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80064c8:	3302      	adds	r3, #2
 80064ca:	e7c7      	b.n	800645c <_printf_common+0x58>
 80064cc:	2301      	movs	r3, #1
 80064ce:	4622      	mov	r2, r4
 80064d0:	4649      	mov	r1, r9
 80064d2:	4638      	mov	r0, r7
 80064d4:	47c0      	blx	r8
 80064d6:	3001      	adds	r0, #1
 80064d8:	d0e6      	beq.n	80064a8 <_printf_common+0xa4>
 80064da:	3601      	adds	r6, #1
 80064dc:	e7d9      	b.n	8006492 <_printf_common+0x8e>
	...

080064e0 <_printf_i>:
 80064e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80064e4:	7e0f      	ldrb	r7, [r1, #24]
 80064e6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80064e8:	2f78      	cmp	r7, #120	; 0x78
 80064ea:	4691      	mov	r9, r2
 80064ec:	4680      	mov	r8, r0
 80064ee:	460c      	mov	r4, r1
 80064f0:	469a      	mov	sl, r3
 80064f2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80064f6:	d807      	bhi.n	8006508 <_printf_i+0x28>
 80064f8:	2f62      	cmp	r7, #98	; 0x62
 80064fa:	d80a      	bhi.n	8006512 <_printf_i+0x32>
 80064fc:	2f00      	cmp	r7, #0
 80064fe:	f000 80d8 	beq.w	80066b2 <_printf_i+0x1d2>
 8006502:	2f58      	cmp	r7, #88	; 0x58
 8006504:	f000 80a3 	beq.w	800664e <_printf_i+0x16e>
 8006508:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800650c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006510:	e03a      	b.n	8006588 <_printf_i+0xa8>
 8006512:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006516:	2b15      	cmp	r3, #21
 8006518:	d8f6      	bhi.n	8006508 <_printf_i+0x28>
 800651a:	a101      	add	r1, pc, #4	; (adr r1, 8006520 <_printf_i+0x40>)
 800651c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006520:	08006579 	.word	0x08006579
 8006524:	0800658d 	.word	0x0800658d
 8006528:	08006509 	.word	0x08006509
 800652c:	08006509 	.word	0x08006509
 8006530:	08006509 	.word	0x08006509
 8006534:	08006509 	.word	0x08006509
 8006538:	0800658d 	.word	0x0800658d
 800653c:	08006509 	.word	0x08006509
 8006540:	08006509 	.word	0x08006509
 8006544:	08006509 	.word	0x08006509
 8006548:	08006509 	.word	0x08006509
 800654c:	08006699 	.word	0x08006699
 8006550:	080065bd 	.word	0x080065bd
 8006554:	0800667b 	.word	0x0800667b
 8006558:	08006509 	.word	0x08006509
 800655c:	08006509 	.word	0x08006509
 8006560:	080066bb 	.word	0x080066bb
 8006564:	08006509 	.word	0x08006509
 8006568:	080065bd 	.word	0x080065bd
 800656c:	08006509 	.word	0x08006509
 8006570:	08006509 	.word	0x08006509
 8006574:	08006683 	.word	0x08006683
 8006578:	682b      	ldr	r3, [r5, #0]
 800657a:	1d1a      	adds	r2, r3, #4
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	602a      	str	r2, [r5, #0]
 8006580:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006584:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006588:	2301      	movs	r3, #1
 800658a:	e0a3      	b.n	80066d4 <_printf_i+0x1f4>
 800658c:	6820      	ldr	r0, [r4, #0]
 800658e:	6829      	ldr	r1, [r5, #0]
 8006590:	0606      	lsls	r6, r0, #24
 8006592:	f101 0304 	add.w	r3, r1, #4
 8006596:	d50a      	bpl.n	80065ae <_printf_i+0xce>
 8006598:	680e      	ldr	r6, [r1, #0]
 800659a:	602b      	str	r3, [r5, #0]
 800659c:	2e00      	cmp	r6, #0
 800659e:	da03      	bge.n	80065a8 <_printf_i+0xc8>
 80065a0:	232d      	movs	r3, #45	; 0x2d
 80065a2:	4276      	negs	r6, r6
 80065a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80065a8:	485e      	ldr	r0, [pc, #376]	; (8006724 <_printf_i+0x244>)
 80065aa:	230a      	movs	r3, #10
 80065ac:	e019      	b.n	80065e2 <_printf_i+0x102>
 80065ae:	680e      	ldr	r6, [r1, #0]
 80065b0:	602b      	str	r3, [r5, #0]
 80065b2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80065b6:	bf18      	it	ne
 80065b8:	b236      	sxthne	r6, r6
 80065ba:	e7ef      	b.n	800659c <_printf_i+0xbc>
 80065bc:	682b      	ldr	r3, [r5, #0]
 80065be:	6820      	ldr	r0, [r4, #0]
 80065c0:	1d19      	adds	r1, r3, #4
 80065c2:	6029      	str	r1, [r5, #0]
 80065c4:	0601      	lsls	r1, r0, #24
 80065c6:	d501      	bpl.n	80065cc <_printf_i+0xec>
 80065c8:	681e      	ldr	r6, [r3, #0]
 80065ca:	e002      	b.n	80065d2 <_printf_i+0xf2>
 80065cc:	0646      	lsls	r6, r0, #25
 80065ce:	d5fb      	bpl.n	80065c8 <_printf_i+0xe8>
 80065d0:	881e      	ldrh	r6, [r3, #0]
 80065d2:	4854      	ldr	r0, [pc, #336]	; (8006724 <_printf_i+0x244>)
 80065d4:	2f6f      	cmp	r7, #111	; 0x6f
 80065d6:	bf0c      	ite	eq
 80065d8:	2308      	moveq	r3, #8
 80065da:	230a      	movne	r3, #10
 80065dc:	2100      	movs	r1, #0
 80065de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80065e2:	6865      	ldr	r5, [r4, #4]
 80065e4:	60a5      	str	r5, [r4, #8]
 80065e6:	2d00      	cmp	r5, #0
 80065e8:	bfa2      	ittt	ge
 80065ea:	6821      	ldrge	r1, [r4, #0]
 80065ec:	f021 0104 	bicge.w	r1, r1, #4
 80065f0:	6021      	strge	r1, [r4, #0]
 80065f2:	b90e      	cbnz	r6, 80065f8 <_printf_i+0x118>
 80065f4:	2d00      	cmp	r5, #0
 80065f6:	d04d      	beq.n	8006694 <_printf_i+0x1b4>
 80065f8:	4615      	mov	r5, r2
 80065fa:	fbb6 f1f3 	udiv	r1, r6, r3
 80065fe:	fb03 6711 	mls	r7, r3, r1, r6
 8006602:	5dc7      	ldrb	r7, [r0, r7]
 8006604:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006608:	4637      	mov	r7, r6
 800660a:	42bb      	cmp	r3, r7
 800660c:	460e      	mov	r6, r1
 800660e:	d9f4      	bls.n	80065fa <_printf_i+0x11a>
 8006610:	2b08      	cmp	r3, #8
 8006612:	d10b      	bne.n	800662c <_printf_i+0x14c>
 8006614:	6823      	ldr	r3, [r4, #0]
 8006616:	07de      	lsls	r6, r3, #31
 8006618:	d508      	bpl.n	800662c <_printf_i+0x14c>
 800661a:	6923      	ldr	r3, [r4, #16]
 800661c:	6861      	ldr	r1, [r4, #4]
 800661e:	4299      	cmp	r1, r3
 8006620:	bfde      	ittt	le
 8006622:	2330      	movle	r3, #48	; 0x30
 8006624:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006628:	f105 35ff 	addle.w	r5, r5, #4294967295
 800662c:	1b52      	subs	r2, r2, r5
 800662e:	6122      	str	r2, [r4, #16]
 8006630:	f8cd a000 	str.w	sl, [sp]
 8006634:	464b      	mov	r3, r9
 8006636:	aa03      	add	r2, sp, #12
 8006638:	4621      	mov	r1, r4
 800663a:	4640      	mov	r0, r8
 800663c:	f7ff fee2 	bl	8006404 <_printf_common>
 8006640:	3001      	adds	r0, #1
 8006642:	d14c      	bne.n	80066de <_printf_i+0x1fe>
 8006644:	f04f 30ff 	mov.w	r0, #4294967295
 8006648:	b004      	add	sp, #16
 800664a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800664e:	4835      	ldr	r0, [pc, #212]	; (8006724 <_printf_i+0x244>)
 8006650:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006654:	6829      	ldr	r1, [r5, #0]
 8006656:	6823      	ldr	r3, [r4, #0]
 8006658:	f851 6b04 	ldr.w	r6, [r1], #4
 800665c:	6029      	str	r1, [r5, #0]
 800665e:	061d      	lsls	r5, r3, #24
 8006660:	d514      	bpl.n	800668c <_printf_i+0x1ac>
 8006662:	07df      	lsls	r7, r3, #31
 8006664:	bf44      	itt	mi
 8006666:	f043 0320 	orrmi.w	r3, r3, #32
 800666a:	6023      	strmi	r3, [r4, #0]
 800666c:	b91e      	cbnz	r6, 8006676 <_printf_i+0x196>
 800666e:	6823      	ldr	r3, [r4, #0]
 8006670:	f023 0320 	bic.w	r3, r3, #32
 8006674:	6023      	str	r3, [r4, #0]
 8006676:	2310      	movs	r3, #16
 8006678:	e7b0      	b.n	80065dc <_printf_i+0xfc>
 800667a:	6823      	ldr	r3, [r4, #0]
 800667c:	f043 0320 	orr.w	r3, r3, #32
 8006680:	6023      	str	r3, [r4, #0]
 8006682:	2378      	movs	r3, #120	; 0x78
 8006684:	4828      	ldr	r0, [pc, #160]	; (8006728 <_printf_i+0x248>)
 8006686:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800668a:	e7e3      	b.n	8006654 <_printf_i+0x174>
 800668c:	0659      	lsls	r1, r3, #25
 800668e:	bf48      	it	mi
 8006690:	b2b6      	uxthmi	r6, r6
 8006692:	e7e6      	b.n	8006662 <_printf_i+0x182>
 8006694:	4615      	mov	r5, r2
 8006696:	e7bb      	b.n	8006610 <_printf_i+0x130>
 8006698:	682b      	ldr	r3, [r5, #0]
 800669a:	6826      	ldr	r6, [r4, #0]
 800669c:	6961      	ldr	r1, [r4, #20]
 800669e:	1d18      	adds	r0, r3, #4
 80066a0:	6028      	str	r0, [r5, #0]
 80066a2:	0635      	lsls	r5, r6, #24
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	d501      	bpl.n	80066ac <_printf_i+0x1cc>
 80066a8:	6019      	str	r1, [r3, #0]
 80066aa:	e002      	b.n	80066b2 <_printf_i+0x1d2>
 80066ac:	0670      	lsls	r0, r6, #25
 80066ae:	d5fb      	bpl.n	80066a8 <_printf_i+0x1c8>
 80066b0:	8019      	strh	r1, [r3, #0]
 80066b2:	2300      	movs	r3, #0
 80066b4:	6123      	str	r3, [r4, #16]
 80066b6:	4615      	mov	r5, r2
 80066b8:	e7ba      	b.n	8006630 <_printf_i+0x150>
 80066ba:	682b      	ldr	r3, [r5, #0]
 80066bc:	1d1a      	adds	r2, r3, #4
 80066be:	602a      	str	r2, [r5, #0]
 80066c0:	681d      	ldr	r5, [r3, #0]
 80066c2:	6862      	ldr	r2, [r4, #4]
 80066c4:	2100      	movs	r1, #0
 80066c6:	4628      	mov	r0, r5
 80066c8:	f7f9 fd82 	bl	80001d0 <memchr>
 80066cc:	b108      	cbz	r0, 80066d2 <_printf_i+0x1f2>
 80066ce:	1b40      	subs	r0, r0, r5
 80066d0:	6060      	str	r0, [r4, #4]
 80066d2:	6863      	ldr	r3, [r4, #4]
 80066d4:	6123      	str	r3, [r4, #16]
 80066d6:	2300      	movs	r3, #0
 80066d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80066dc:	e7a8      	b.n	8006630 <_printf_i+0x150>
 80066de:	6923      	ldr	r3, [r4, #16]
 80066e0:	462a      	mov	r2, r5
 80066e2:	4649      	mov	r1, r9
 80066e4:	4640      	mov	r0, r8
 80066e6:	47d0      	blx	sl
 80066e8:	3001      	adds	r0, #1
 80066ea:	d0ab      	beq.n	8006644 <_printf_i+0x164>
 80066ec:	6823      	ldr	r3, [r4, #0]
 80066ee:	079b      	lsls	r3, r3, #30
 80066f0:	d413      	bmi.n	800671a <_printf_i+0x23a>
 80066f2:	68e0      	ldr	r0, [r4, #12]
 80066f4:	9b03      	ldr	r3, [sp, #12]
 80066f6:	4298      	cmp	r0, r3
 80066f8:	bfb8      	it	lt
 80066fa:	4618      	movlt	r0, r3
 80066fc:	e7a4      	b.n	8006648 <_printf_i+0x168>
 80066fe:	2301      	movs	r3, #1
 8006700:	4632      	mov	r2, r6
 8006702:	4649      	mov	r1, r9
 8006704:	4640      	mov	r0, r8
 8006706:	47d0      	blx	sl
 8006708:	3001      	adds	r0, #1
 800670a:	d09b      	beq.n	8006644 <_printf_i+0x164>
 800670c:	3501      	adds	r5, #1
 800670e:	68e3      	ldr	r3, [r4, #12]
 8006710:	9903      	ldr	r1, [sp, #12]
 8006712:	1a5b      	subs	r3, r3, r1
 8006714:	42ab      	cmp	r3, r5
 8006716:	dcf2      	bgt.n	80066fe <_printf_i+0x21e>
 8006718:	e7eb      	b.n	80066f2 <_printf_i+0x212>
 800671a:	2500      	movs	r5, #0
 800671c:	f104 0619 	add.w	r6, r4, #25
 8006720:	e7f5      	b.n	800670e <_printf_i+0x22e>
 8006722:	bf00      	nop
 8006724:	0800779b 	.word	0x0800779b
 8006728:	080077ac 	.word	0x080077ac

0800672c <_sbrk_r>:
 800672c:	b538      	push	{r3, r4, r5, lr}
 800672e:	4d06      	ldr	r5, [pc, #24]	; (8006748 <_sbrk_r+0x1c>)
 8006730:	2300      	movs	r3, #0
 8006732:	4604      	mov	r4, r0
 8006734:	4608      	mov	r0, r1
 8006736:	602b      	str	r3, [r5, #0]
 8006738:	f7fc fa32 	bl	8002ba0 <_sbrk>
 800673c:	1c43      	adds	r3, r0, #1
 800673e:	d102      	bne.n	8006746 <_sbrk_r+0x1a>
 8006740:	682b      	ldr	r3, [r5, #0]
 8006742:	b103      	cbz	r3, 8006746 <_sbrk_r+0x1a>
 8006744:	6023      	str	r3, [r4, #0]
 8006746:	bd38      	pop	{r3, r4, r5, pc}
 8006748:	2000269c 	.word	0x2000269c

0800674c <__swbuf_r>:
 800674c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800674e:	460e      	mov	r6, r1
 8006750:	4614      	mov	r4, r2
 8006752:	4605      	mov	r5, r0
 8006754:	b118      	cbz	r0, 800675e <__swbuf_r+0x12>
 8006756:	6983      	ldr	r3, [r0, #24]
 8006758:	b90b      	cbnz	r3, 800675e <__swbuf_r+0x12>
 800675a:	f000 f9d9 	bl	8006b10 <__sinit>
 800675e:	4b21      	ldr	r3, [pc, #132]	; (80067e4 <__swbuf_r+0x98>)
 8006760:	429c      	cmp	r4, r3
 8006762:	d12b      	bne.n	80067bc <__swbuf_r+0x70>
 8006764:	686c      	ldr	r4, [r5, #4]
 8006766:	69a3      	ldr	r3, [r4, #24]
 8006768:	60a3      	str	r3, [r4, #8]
 800676a:	89a3      	ldrh	r3, [r4, #12]
 800676c:	071a      	lsls	r2, r3, #28
 800676e:	d52f      	bpl.n	80067d0 <__swbuf_r+0x84>
 8006770:	6923      	ldr	r3, [r4, #16]
 8006772:	b36b      	cbz	r3, 80067d0 <__swbuf_r+0x84>
 8006774:	6923      	ldr	r3, [r4, #16]
 8006776:	6820      	ldr	r0, [r4, #0]
 8006778:	1ac0      	subs	r0, r0, r3
 800677a:	6963      	ldr	r3, [r4, #20]
 800677c:	b2f6      	uxtb	r6, r6
 800677e:	4283      	cmp	r3, r0
 8006780:	4637      	mov	r7, r6
 8006782:	dc04      	bgt.n	800678e <__swbuf_r+0x42>
 8006784:	4621      	mov	r1, r4
 8006786:	4628      	mov	r0, r5
 8006788:	f000 f92e 	bl	80069e8 <_fflush_r>
 800678c:	bb30      	cbnz	r0, 80067dc <__swbuf_r+0x90>
 800678e:	68a3      	ldr	r3, [r4, #8]
 8006790:	3b01      	subs	r3, #1
 8006792:	60a3      	str	r3, [r4, #8]
 8006794:	6823      	ldr	r3, [r4, #0]
 8006796:	1c5a      	adds	r2, r3, #1
 8006798:	6022      	str	r2, [r4, #0]
 800679a:	701e      	strb	r6, [r3, #0]
 800679c:	6963      	ldr	r3, [r4, #20]
 800679e:	3001      	adds	r0, #1
 80067a0:	4283      	cmp	r3, r0
 80067a2:	d004      	beq.n	80067ae <__swbuf_r+0x62>
 80067a4:	89a3      	ldrh	r3, [r4, #12]
 80067a6:	07db      	lsls	r3, r3, #31
 80067a8:	d506      	bpl.n	80067b8 <__swbuf_r+0x6c>
 80067aa:	2e0a      	cmp	r6, #10
 80067ac:	d104      	bne.n	80067b8 <__swbuf_r+0x6c>
 80067ae:	4621      	mov	r1, r4
 80067b0:	4628      	mov	r0, r5
 80067b2:	f000 f919 	bl	80069e8 <_fflush_r>
 80067b6:	b988      	cbnz	r0, 80067dc <__swbuf_r+0x90>
 80067b8:	4638      	mov	r0, r7
 80067ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80067bc:	4b0a      	ldr	r3, [pc, #40]	; (80067e8 <__swbuf_r+0x9c>)
 80067be:	429c      	cmp	r4, r3
 80067c0:	d101      	bne.n	80067c6 <__swbuf_r+0x7a>
 80067c2:	68ac      	ldr	r4, [r5, #8]
 80067c4:	e7cf      	b.n	8006766 <__swbuf_r+0x1a>
 80067c6:	4b09      	ldr	r3, [pc, #36]	; (80067ec <__swbuf_r+0xa0>)
 80067c8:	429c      	cmp	r4, r3
 80067ca:	bf08      	it	eq
 80067cc:	68ec      	ldreq	r4, [r5, #12]
 80067ce:	e7ca      	b.n	8006766 <__swbuf_r+0x1a>
 80067d0:	4621      	mov	r1, r4
 80067d2:	4628      	mov	r0, r5
 80067d4:	f000 f80c 	bl	80067f0 <__swsetup_r>
 80067d8:	2800      	cmp	r0, #0
 80067da:	d0cb      	beq.n	8006774 <__swbuf_r+0x28>
 80067dc:	f04f 37ff 	mov.w	r7, #4294967295
 80067e0:	e7ea      	b.n	80067b8 <__swbuf_r+0x6c>
 80067e2:	bf00      	nop
 80067e4:	080077e0 	.word	0x080077e0
 80067e8:	08007800 	.word	0x08007800
 80067ec:	080077c0 	.word	0x080077c0

080067f0 <__swsetup_r>:
 80067f0:	4b32      	ldr	r3, [pc, #200]	; (80068bc <__swsetup_r+0xcc>)
 80067f2:	b570      	push	{r4, r5, r6, lr}
 80067f4:	681d      	ldr	r5, [r3, #0]
 80067f6:	4606      	mov	r6, r0
 80067f8:	460c      	mov	r4, r1
 80067fa:	b125      	cbz	r5, 8006806 <__swsetup_r+0x16>
 80067fc:	69ab      	ldr	r3, [r5, #24]
 80067fe:	b913      	cbnz	r3, 8006806 <__swsetup_r+0x16>
 8006800:	4628      	mov	r0, r5
 8006802:	f000 f985 	bl	8006b10 <__sinit>
 8006806:	4b2e      	ldr	r3, [pc, #184]	; (80068c0 <__swsetup_r+0xd0>)
 8006808:	429c      	cmp	r4, r3
 800680a:	d10f      	bne.n	800682c <__swsetup_r+0x3c>
 800680c:	686c      	ldr	r4, [r5, #4]
 800680e:	89a3      	ldrh	r3, [r4, #12]
 8006810:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006814:	0719      	lsls	r1, r3, #28
 8006816:	d42c      	bmi.n	8006872 <__swsetup_r+0x82>
 8006818:	06dd      	lsls	r5, r3, #27
 800681a:	d411      	bmi.n	8006840 <__swsetup_r+0x50>
 800681c:	2309      	movs	r3, #9
 800681e:	6033      	str	r3, [r6, #0]
 8006820:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006824:	81a3      	strh	r3, [r4, #12]
 8006826:	f04f 30ff 	mov.w	r0, #4294967295
 800682a:	e03e      	b.n	80068aa <__swsetup_r+0xba>
 800682c:	4b25      	ldr	r3, [pc, #148]	; (80068c4 <__swsetup_r+0xd4>)
 800682e:	429c      	cmp	r4, r3
 8006830:	d101      	bne.n	8006836 <__swsetup_r+0x46>
 8006832:	68ac      	ldr	r4, [r5, #8]
 8006834:	e7eb      	b.n	800680e <__swsetup_r+0x1e>
 8006836:	4b24      	ldr	r3, [pc, #144]	; (80068c8 <__swsetup_r+0xd8>)
 8006838:	429c      	cmp	r4, r3
 800683a:	bf08      	it	eq
 800683c:	68ec      	ldreq	r4, [r5, #12]
 800683e:	e7e6      	b.n	800680e <__swsetup_r+0x1e>
 8006840:	0758      	lsls	r0, r3, #29
 8006842:	d512      	bpl.n	800686a <__swsetup_r+0x7a>
 8006844:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006846:	b141      	cbz	r1, 800685a <__swsetup_r+0x6a>
 8006848:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800684c:	4299      	cmp	r1, r3
 800684e:	d002      	beq.n	8006856 <__swsetup_r+0x66>
 8006850:	4630      	mov	r0, r6
 8006852:	f7ff fb9d 	bl	8005f90 <_free_r>
 8006856:	2300      	movs	r3, #0
 8006858:	6363      	str	r3, [r4, #52]	; 0x34
 800685a:	89a3      	ldrh	r3, [r4, #12]
 800685c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006860:	81a3      	strh	r3, [r4, #12]
 8006862:	2300      	movs	r3, #0
 8006864:	6063      	str	r3, [r4, #4]
 8006866:	6923      	ldr	r3, [r4, #16]
 8006868:	6023      	str	r3, [r4, #0]
 800686a:	89a3      	ldrh	r3, [r4, #12]
 800686c:	f043 0308 	orr.w	r3, r3, #8
 8006870:	81a3      	strh	r3, [r4, #12]
 8006872:	6923      	ldr	r3, [r4, #16]
 8006874:	b94b      	cbnz	r3, 800688a <__swsetup_r+0x9a>
 8006876:	89a3      	ldrh	r3, [r4, #12]
 8006878:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800687c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006880:	d003      	beq.n	800688a <__swsetup_r+0x9a>
 8006882:	4621      	mov	r1, r4
 8006884:	4630      	mov	r0, r6
 8006886:	f000 fa09 	bl	8006c9c <__smakebuf_r>
 800688a:	89a0      	ldrh	r0, [r4, #12]
 800688c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006890:	f010 0301 	ands.w	r3, r0, #1
 8006894:	d00a      	beq.n	80068ac <__swsetup_r+0xbc>
 8006896:	2300      	movs	r3, #0
 8006898:	60a3      	str	r3, [r4, #8]
 800689a:	6963      	ldr	r3, [r4, #20]
 800689c:	425b      	negs	r3, r3
 800689e:	61a3      	str	r3, [r4, #24]
 80068a0:	6923      	ldr	r3, [r4, #16]
 80068a2:	b943      	cbnz	r3, 80068b6 <__swsetup_r+0xc6>
 80068a4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80068a8:	d1ba      	bne.n	8006820 <__swsetup_r+0x30>
 80068aa:	bd70      	pop	{r4, r5, r6, pc}
 80068ac:	0781      	lsls	r1, r0, #30
 80068ae:	bf58      	it	pl
 80068b0:	6963      	ldrpl	r3, [r4, #20]
 80068b2:	60a3      	str	r3, [r4, #8]
 80068b4:	e7f4      	b.n	80068a0 <__swsetup_r+0xb0>
 80068b6:	2000      	movs	r0, #0
 80068b8:	e7f7      	b.n	80068aa <__swsetup_r+0xba>
 80068ba:	bf00      	nop
 80068bc:	20000018 	.word	0x20000018
 80068c0:	080077e0 	.word	0x080077e0
 80068c4:	08007800 	.word	0x08007800
 80068c8:	080077c0 	.word	0x080077c0

080068cc <abort>:
 80068cc:	b508      	push	{r3, lr}
 80068ce:	2006      	movs	r0, #6
 80068d0:	f000 fa58 	bl	8006d84 <raise>
 80068d4:	2001      	movs	r0, #1
 80068d6:	f7fc f8eb 	bl	8002ab0 <_exit>
	...

080068dc <__sflush_r>:
 80068dc:	898a      	ldrh	r2, [r1, #12]
 80068de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068e2:	4605      	mov	r5, r0
 80068e4:	0710      	lsls	r0, r2, #28
 80068e6:	460c      	mov	r4, r1
 80068e8:	d458      	bmi.n	800699c <__sflush_r+0xc0>
 80068ea:	684b      	ldr	r3, [r1, #4]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	dc05      	bgt.n	80068fc <__sflush_r+0x20>
 80068f0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	dc02      	bgt.n	80068fc <__sflush_r+0x20>
 80068f6:	2000      	movs	r0, #0
 80068f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80068fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80068fe:	2e00      	cmp	r6, #0
 8006900:	d0f9      	beq.n	80068f6 <__sflush_r+0x1a>
 8006902:	2300      	movs	r3, #0
 8006904:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006908:	682f      	ldr	r7, [r5, #0]
 800690a:	602b      	str	r3, [r5, #0]
 800690c:	d032      	beq.n	8006974 <__sflush_r+0x98>
 800690e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006910:	89a3      	ldrh	r3, [r4, #12]
 8006912:	075a      	lsls	r2, r3, #29
 8006914:	d505      	bpl.n	8006922 <__sflush_r+0x46>
 8006916:	6863      	ldr	r3, [r4, #4]
 8006918:	1ac0      	subs	r0, r0, r3
 800691a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800691c:	b10b      	cbz	r3, 8006922 <__sflush_r+0x46>
 800691e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006920:	1ac0      	subs	r0, r0, r3
 8006922:	2300      	movs	r3, #0
 8006924:	4602      	mov	r2, r0
 8006926:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006928:	6a21      	ldr	r1, [r4, #32]
 800692a:	4628      	mov	r0, r5
 800692c:	47b0      	blx	r6
 800692e:	1c43      	adds	r3, r0, #1
 8006930:	89a3      	ldrh	r3, [r4, #12]
 8006932:	d106      	bne.n	8006942 <__sflush_r+0x66>
 8006934:	6829      	ldr	r1, [r5, #0]
 8006936:	291d      	cmp	r1, #29
 8006938:	d82c      	bhi.n	8006994 <__sflush_r+0xb8>
 800693a:	4a2a      	ldr	r2, [pc, #168]	; (80069e4 <__sflush_r+0x108>)
 800693c:	40ca      	lsrs	r2, r1
 800693e:	07d6      	lsls	r6, r2, #31
 8006940:	d528      	bpl.n	8006994 <__sflush_r+0xb8>
 8006942:	2200      	movs	r2, #0
 8006944:	6062      	str	r2, [r4, #4]
 8006946:	04d9      	lsls	r1, r3, #19
 8006948:	6922      	ldr	r2, [r4, #16]
 800694a:	6022      	str	r2, [r4, #0]
 800694c:	d504      	bpl.n	8006958 <__sflush_r+0x7c>
 800694e:	1c42      	adds	r2, r0, #1
 8006950:	d101      	bne.n	8006956 <__sflush_r+0x7a>
 8006952:	682b      	ldr	r3, [r5, #0]
 8006954:	b903      	cbnz	r3, 8006958 <__sflush_r+0x7c>
 8006956:	6560      	str	r0, [r4, #84]	; 0x54
 8006958:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800695a:	602f      	str	r7, [r5, #0]
 800695c:	2900      	cmp	r1, #0
 800695e:	d0ca      	beq.n	80068f6 <__sflush_r+0x1a>
 8006960:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006964:	4299      	cmp	r1, r3
 8006966:	d002      	beq.n	800696e <__sflush_r+0x92>
 8006968:	4628      	mov	r0, r5
 800696a:	f7ff fb11 	bl	8005f90 <_free_r>
 800696e:	2000      	movs	r0, #0
 8006970:	6360      	str	r0, [r4, #52]	; 0x34
 8006972:	e7c1      	b.n	80068f8 <__sflush_r+0x1c>
 8006974:	6a21      	ldr	r1, [r4, #32]
 8006976:	2301      	movs	r3, #1
 8006978:	4628      	mov	r0, r5
 800697a:	47b0      	blx	r6
 800697c:	1c41      	adds	r1, r0, #1
 800697e:	d1c7      	bne.n	8006910 <__sflush_r+0x34>
 8006980:	682b      	ldr	r3, [r5, #0]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d0c4      	beq.n	8006910 <__sflush_r+0x34>
 8006986:	2b1d      	cmp	r3, #29
 8006988:	d001      	beq.n	800698e <__sflush_r+0xb2>
 800698a:	2b16      	cmp	r3, #22
 800698c:	d101      	bne.n	8006992 <__sflush_r+0xb6>
 800698e:	602f      	str	r7, [r5, #0]
 8006990:	e7b1      	b.n	80068f6 <__sflush_r+0x1a>
 8006992:	89a3      	ldrh	r3, [r4, #12]
 8006994:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006998:	81a3      	strh	r3, [r4, #12]
 800699a:	e7ad      	b.n	80068f8 <__sflush_r+0x1c>
 800699c:	690f      	ldr	r7, [r1, #16]
 800699e:	2f00      	cmp	r7, #0
 80069a0:	d0a9      	beq.n	80068f6 <__sflush_r+0x1a>
 80069a2:	0793      	lsls	r3, r2, #30
 80069a4:	680e      	ldr	r6, [r1, #0]
 80069a6:	bf08      	it	eq
 80069a8:	694b      	ldreq	r3, [r1, #20]
 80069aa:	600f      	str	r7, [r1, #0]
 80069ac:	bf18      	it	ne
 80069ae:	2300      	movne	r3, #0
 80069b0:	eba6 0807 	sub.w	r8, r6, r7
 80069b4:	608b      	str	r3, [r1, #8]
 80069b6:	f1b8 0f00 	cmp.w	r8, #0
 80069ba:	dd9c      	ble.n	80068f6 <__sflush_r+0x1a>
 80069bc:	6a21      	ldr	r1, [r4, #32]
 80069be:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80069c0:	4643      	mov	r3, r8
 80069c2:	463a      	mov	r2, r7
 80069c4:	4628      	mov	r0, r5
 80069c6:	47b0      	blx	r6
 80069c8:	2800      	cmp	r0, #0
 80069ca:	dc06      	bgt.n	80069da <__sflush_r+0xfe>
 80069cc:	89a3      	ldrh	r3, [r4, #12]
 80069ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80069d2:	81a3      	strh	r3, [r4, #12]
 80069d4:	f04f 30ff 	mov.w	r0, #4294967295
 80069d8:	e78e      	b.n	80068f8 <__sflush_r+0x1c>
 80069da:	4407      	add	r7, r0
 80069dc:	eba8 0800 	sub.w	r8, r8, r0
 80069e0:	e7e9      	b.n	80069b6 <__sflush_r+0xda>
 80069e2:	bf00      	nop
 80069e4:	20400001 	.word	0x20400001

080069e8 <_fflush_r>:
 80069e8:	b538      	push	{r3, r4, r5, lr}
 80069ea:	690b      	ldr	r3, [r1, #16]
 80069ec:	4605      	mov	r5, r0
 80069ee:	460c      	mov	r4, r1
 80069f0:	b913      	cbnz	r3, 80069f8 <_fflush_r+0x10>
 80069f2:	2500      	movs	r5, #0
 80069f4:	4628      	mov	r0, r5
 80069f6:	bd38      	pop	{r3, r4, r5, pc}
 80069f8:	b118      	cbz	r0, 8006a02 <_fflush_r+0x1a>
 80069fa:	6983      	ldr	r3, [r0, #24]
 80069fc:	b90b      	cbnz	r3, 8006a02 <_fflush_r+0x1a>
 80069fe:	f000 f887 	bl	8006b10 <__sinit>
 8006a02:	4b14      	ldr	r3, [pc, #80]	; (8006a54 <_fflush_r+0x6c>)
 8006a04:	429c      	cmp	r4, r3
 8006a06:	d11b      	bne.n	8006a40 <_fflush_r+0x58>
 8006a08:	686c      	ldr	r4, [r5, #4]
 8006a0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d0ef      	beq.n	80069f2 <_fflush_r+0xa>
 8006a12:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006a14:	07d0      	lsls	r0, r2, #31
 8006a16:	d404      	bmi.n	8006a22 <_fflush_r+0x3a>
 8006a18:	0599      	lsls	r1, r3, #22
 8006a1a:	d402      	bmi.n	8006a22 <_fflush_r+0x3a>
 8006a1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006a1e:	f000 f915 	bl	8006c4c <__retarget_lock_acquire_recursive>
 8006a22:	4628      	mov	r0, r5
 8006a24:	4621      	mov	r1, r4
 8006a26:	f7ff ff59 	bl	80068dc <__sflush_r>
 8006a2a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006a2c:	07da      	lsls	r2, r3, #31
 8006a2e:	4605      	mov	r5, r0
 8006a30:	d4e0      	bmi.n	80069f4 <_fflush_r+0xc>
 8006a32:	89a3      	ldrh	r3, [r4, #12]
 8006a34:	059b      	lsls	r3, r3, #22
 8006a36:	d4dd      	bmi.n	80069f4 <_fflush_r+0xc>
 8006a38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006a3a:	f000 f908 	bl	8006c4e <__retarget_lock_release_recursive>
 8006a3e:	e7d9      	b.n	80069f4 <_fflush_r+0xc>
 8006a40:	4b05      	ldr	r3, [pc, #20]	; (8006a58 <_fflush_r+0x70>)
 8006a42:	429c      	cmp	r4, r3
 8006a44:	d101      	bne.n	8006a4a <_fflush_r+0x62>
 8006a46:	68ac      	ldr	r4, [r5, #8]
 8006a48:	e7df      	b.n	8006a0a <_fflush_r+0x22>
 8006a4a:	4b04      	ldr	r3, [pc, #16]	; (8006a5c <_fflush_r+0x74>)
 8006a4c:	429c      	cmp	r4, r3
 8006a4e:	bf08      	it	eq
 8006a50:	68ec      	ldreq	r4, [r5, #12]
 8006a52:	e7da      	b.n	8006a0a <_fflush_r+0x22>
 8006a54:	080077e0 	.word	0x080077e0
 8006a58:	08007800 	.word	0x08007800
 8006a5c:	080077c0 	.word	0x080077c0

08006a60 <std>:
 8006a60:	2300      	movs	r3, #0
 8006a62:	b510      	push	{r4, lr}
 8006a64:	4604      	mov	r4, r0
 8006a66:	e9c0 3300 	strd	r3, r3, [r0]
 8006a6a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006a6e:	6083      	str	r3, [r0, #8]
 8006a70:	8181      	strh	r1, [r0, #12]
 8006a72:	6643      	str	r3, [r0, #100]	; 0x64
 8006a74:	81c2      	strh	r2, [r0, #14]
 8006a76:	6183      	str	r3, [r0, #24]
 8006a78:	4619      	mov	r1, r3
 8006a7a:	2208      	movs	r2, #8
 8006a7c:	305c      	adds	r0, #92	; 0x5c
 8006a7e:	f7ff fa09 	bl	8005e94 <memset>
 8006a82:	4b05      	ldr	r3, [pc, #20]	; (8006a98 <std+0x38>)
 8006a84:	6263      	str	r3, [r4, #36]	; 0x24
 8006a86:	4b05      	ldr	r3, [pc, #20]	; (8006a9c <std+0x3c>)
 8006a88:	62a3      	str	r3, [r4, #40]	; 0x28
 8006a8a:	4b05      	ldr	r3, [pc, #20]	; (8006aa0 <std+0x40>)
 8006a8c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006a8e:	4b05      	ldr	r3, [pc, #20]	; (8006aa4 <std+0x44>)
 8006a90:	6224      	str	r4, [r4, #32]
 8006a92:	6323      	str	r3, [r4, #48]	; 0x30
 8006a94:	bd10      	pop	{r4, pc}
 8006a96:	bf00      	nop
 8006a98:	08006dbd 	.word	0x08006dbd
 8006a9c:	08006ddf 	.word	0x08006ddf
 8006aa0:	08006e17 	.word	0x08006e17
 8006aa4:	08006e3b 	.word	0x08006e3b

08006aa8 <_cleanup_r>:
 8006aa8:	4901      	ldr	r1, [pc, #4]	; (8006ab0 <_cleanup_r+0x8>)
 8006aaa:	f000 b8af 	b.w	8006c0c <_fwalk_reent>
 8006aae:	bf00      	nop
 8006ab0:	080069e9 	.word	0x080069e9

08006ab4 <__sfmoreglue>:
 8006ab4:	b570      	push	{r4, r5, r6, lr}
 8006ab6:	2268      	movs	r2, #104	; 0x68
 8006ab8:	1e4d      	subs	r5, r1, #1
 8006aba:	4355      	muls	r5, r2
 8006abc:	460e      	mov	r6, r1
 8006abe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006ac2:	f7ff fad1 	bl	8006068 <_malloc_r>
 8006ac6:	4604      	mov	r4, r0
 8006ac8:	b140      	cbz	r0, 8006adc <__sfmoreglue+0x28>
 8006aca:	2100      	movs	r1, #0
 8006acc:	e9c0 1600 	strd	r1, r6, [r0]
 8006ad0:	300c      	adds	r0, #12
 8006ad2:	60a0      	str	r0, [r4, #8]
 8006ad4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006ad8:	f7ff f9dc 	bl	8005e94 <memset>
 8006adc:	4620      	mov	r0, r4
 8006ade:	bd70      	pop	{r4, r5, r6, pc}

08006ae0 <__sfp_lock_acquire>:
 8006ae0:	4801      	ldr	r0, [pc, #4]	; (8006ae8 <__sfp_lock_acquire+0x8>)
 8006ae2:	f000 b8b3 	b.w	8006c4c <__retarget_lock_acquire_recursive>
 8006ae6:	bf00      	nop
 8006ae8:	20002699 	.word	0x20002699

08006aec <__sfp_lock_release>:
 8006aec:	4801      	ldr	r0, [pc, #4]	; (8006af4 <__sfp_lock_release+0x8>)
 8006aee:	f000 b8ae 	b.w	8006c4e <__retarget_lock_release_recursive>
 8006af2:	bf00      	nop
 8006af4:	20002699 	.word	0x20002699

08006af8 <__sinit_lock_acquire>:
 8006af8:	4801      	ldr	r0, [pc, #4]	; (8006b00 <__sinit_lock_acquire+0x8>)
 8006afa:	f000 b8a7 	b.w	8006c4c <__retarget_lock_acquire_recursive>
 8006afe:	bf00      	nop
 8006b00:	2000269a 	.word	0x2000269a

08006b04 <__sinit_lock_release>:
 8006b04:	4801      	ldr	r0, [pc, #4]	; (8006b0c <__sinit_lock_release+0x8>)
 8006b06:	f000 b8a2 	b.w	8006c4e <__retarget_lock_release_recursive>
 8006b0a:	bf00      	nop
 8006b0c:	2000269a 	.word	0x2000269a

08006b10 <__sinit>:
 8006b10:	b510      	push	{r4, lr}
 8006b12:	4604      	mov	r4, r0
 8006b14:	f7ff fff0 	bl	8006af8 <__sinit_lock_acquire>
 8006b18:	69a3      	ldr	r3, [r4, #24]
 8006b1a:	b11b      	cbz	r3, 8006b24 <__sinit+0x14>
 8006b1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b20:	f7ff bff0 	b.w	8006b04 <__sinit_lock_release>
 8006b24:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006b28:	6523      	str	r3, [r4, #80]	; 0x50
 8006b2a:	4b13      	ldr	r3, [pc, #76]	; (8006b78 <__sinit+0x68>)
 8006b2c:	4a13      	ldr	r2, [pc, #76]	; (8006b7c <__sinit+0x6c>)
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	62a2      	str	r2, [r4, #40]	; 0x28
 8006b32:	42a3      	cmp	r3, r4
 8006b34:	bf04      	itt	eq
 8006b36:	2301      	moveq	r3, #1
 8006b38:	61a3      	streq	r3, [r4, #24]
 8006b3a:	4620      	mov	r0, r4
 8006b3c:	f000 f820 	bl	8006b80 <__sfp>
 8006b40:	6060      	str	r0, [r4, #4]
 8006b42:	4620      	mov	r0, r4
 8006b44:	f000 f81c 	bl	8006b80 <__sfp>
 8006b48:	60a0      	str	r0, [r4, #8]
 8006b4a:	4620      	mov	r0, r4
 8006b4c:	f000 f818 	bl	8006b80 <__sfp>
 8006b50:	2200      	movs	r2, #0
 8006b52:	60e0      	str	r0, [r4, #12]
 8006b54:	2104      	movs	r1, #4
 8006b56:	6860      	ldr	r0, [r4, #4]
 8006b58:	f7ff ff82 	bl	8006a60 <std>
 8006b5c:	68a0      	ldr	r0, [r4, #8]
 8006b5e:	2201      	movs	r2, #1
 8006b60:	2109      	movs	r1, #9
 8006b62:	f7ff ff7d 	bl	8006a60 <std>
 8006b66:	68e0      	ldr	r0, [r4, #12]
 8006b68:	2202      	movs	r2, #2
 8006b6a:	2112      	movs	r1, #18
 8006b6c:	f7ff ff78 	bl	8006a60 <std>
 8006b70:	2301      	movs	r3, #1
 8006b72:	61a3      	str	r3, [r4, #24]
 8006b74:	e7d2      	b.n	8006b1c <__sinit+0xc>
 8006b76:	bf00      	nop
 8006b78:	080076d8 	.word	0x080076d8
 8006b7c:	08006aa9 	.word	0x08006aa9

08006b80 <__sfp>:
 8006b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b82:	4607      	mov	r7, r0
 8006b84:	f7ff ffac 	bl	8006ae0 <__sfp_lock_acquire>
 8006b88:	4b1e      	ldr	r3, [pc, #120]	; (8006c04 <__sfp+0x84>)
 8006b8a:	681e      	ldr	r6, [r3, #0]
 8006b8c:	69b3      	ldr	r3, [r6, #24]
 8006b8e:	b913      	cbnz	r3, 8006b96 <__sfp+0x16>
 8006b90:	4630      	mov	r0, r6
 8006b92:	f7ff ffbd 	bl	8006b10 <__sinit>
 8006b96:	3648      	adds	r6, #72	; 0x48
 8006b98:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006b9c:	3b01      	subs	r3, #1
 8006b9e:	d503      	bpl.n	8006ba8 <__sfp+0x28>
 8006ba0:	6833      	ldr	r3, [r6, #0]
 8006ba2:	b30b      	cbz	r3, 8006be8 <__sfp+0x68>
 8006ba4:	6836      	ldr	r6, [r6, #0]
 8006ba6:	e7f7      	b.n	8006b98 <__sfp+0x18>
 8006ba8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006bac:	b9d5      	cbnz	r5, 8006be4 <__sfp+0x64>
 8006bae:	4b16      	ldr	r3, [pc, #88]	; (8006c08 <__sfp+0x88>)
 8006bb0:	60e3      	str	r3, [r4, #12]
 8006bb2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006bb6:	6665      	str	r5, [r4, #100]	; 0x64
 8006bb8:	f000 f847 	bl	8006c4a <__retarget_lock_init_recursive>
 8006bbc:	f7ff ff96 	bl	8006aec <__sfp_lock_release>
 8006bc0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006bc4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006bc8:	6025      	str	r5, [r4, #0]
 8006bca:	61a5      	str	r5, [r4, #24]
 8006bcc:	2208      	movs	r2, #8
 8006bce:	4629      	mov	r1, r5
 8006bd0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006bd4:	f7ff f95e 	bl	8005e94 <memset>
 8006bd8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006bdc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006be0:	4620      	mov	r0, r4
 8006be2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006be4:	3468      	adds	r4, #104	; 0x68
 8006be6:	e7d9      	b.n	8006b9c <__sfp+0x1c>
 8006be8:	2104      	movs	r1, #4
 8006bea:	4638      	mov	r0, r7
 8006bec:	f7ff ff62 	bl	8006ab4 <__sfmoreglue>
 8006bf0:	4604      	mov	r4, r0
 8006bf2:	6030      	str	r0, [r6, #0]
 8006bf4:	2800      	cmp	r0, #0
 8006bf6:	d1d5      	bne.n	8006ba4 <__sfp+0x24>
 8006bf8:	f7ff ff78 	bl	8006aec <__sfp_lock_release>
 8006bfc:	230c      	movs	r3, #12
 8006bfe:	603b      	str	r3, [r7, #0]
 8006c00:	e7ee      	b.n	8006be0 <__sfp+0x60>
 8006c02:	bf00      	nop
 8006c04:	080076d8 	.word	0x080076d8
 8006c08:	ffff0001 	.word	0xffff0001

08006c0c <_fwalk_reent>:
 8006c0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c10:	4606      	mov	r6, r0
 8006c12:	4688      	mov	r8, r1
 8006c14:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006c18:	2700      	movs	r7, #0
 8006c1a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006c1e:	f1b9 0901 	subs.w	r9, r9, #1
 8006c22:	d505      	bpl.n	8006c30 <_fwalk_reent+0x24>
 8006c24:	6824      	ldr	r4, [r4, #0]
 8006c26:	2c00      	cmp	r4, #0
 8006c28:	d1f7      	bne.n	8006c1a <_fwalk_reent+0xe>
 8006c2a:	4638      	mov	r0, r7
 8006c2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c30:	89ab      	ldrh	r3, [r5, #12]
 8006c32:	2b01      	cmp	r3, #1
 8006c34:	d907      	bls.n	8006c46 <_fwalk_reent+0x3a>
 8006c36:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006c3a:	3301      	adds	r3, #1
 8006c3c:	d003      	beq.n	8006c46 <_fwalk_reent+0x3a>
 8006c3e:	4629      	mov	r1, r5
 8006c40:	4630      	mov	r0, r6
 8006c42:	47c0      	blx	r8
 8006c44:	4307      	orrs	r7, r0
 8006c46:	3568      	adds	r5, #104	; 0x68
 8006c48:	e7e9      	b.n	8006c1e <_fwalk_reent+0x12>

08006c4a <__retarget_lock_init_recursive>:
 8006c4a:	4770      	bx	lr

08006c4c <__retarget_lock_acquire_recursive>:
 8006c4c:	4770      	bx	lr

08006c4e <__retarget_lock_release_recursive>:
 8006c4e:	4770      	bx	lr

08006c50 <__swhatbuf_r>:
 8006c50:	b570      	push	{r4, r5, r6, lr}
 8006c52:	460e      	mov	r6, r1
 8006c54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c58:	2900      	cmp	r1, #0
 8006c5a:	b096      	sub	sp, #88	; 0x58
 8006c5c:	4614      	mov	r4, r2
 8006c5e:	461d      	mov	r5, r3
 8006c60:	da08      	bge.n	8006c74 <__swhatbuf_r+0x24>
 8006c62:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006c66:	2200      	movs	r2, #0
 8006c68:	602a      	str	r2, [r5, #0]
 8006c6a:	061a      	lsls	r2, r3, #24
 8006c6c:	d410      	bmi.n	8006c90 <__swhatbuf_r+0x40>
 8006c6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006c72:	e00e      	b.n	8006c92 <__swhatbuf_r+0x42>
 8006c74:	466a      	mov	r2, sp
 8006c76:	f000 f907 	bl	8006e88 <_fstat_r>
 8006c7a:	2800      	cmp	r0, #0
 8006c7c:	dbf1      	blt.n	8006c62 <__swhatbuf_r+0x12>
 8006c7e:	9a01      	ldr	r2, [sp, #4]
 8006c80:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006c84:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006c88:	425a      	negs	r2, r3
 8006c8a:	415a      	adcs	r2, r3
 8006c8c:	602a      	str	r2, [r5, #0]
 8006c8e:	e7ee      	b.n	8006c6e <__swhatbuf_r+0x1e>
 8006c90:	2340      	movs	r3, #64	; 0x40
 8006c92:	2000      	movs	r0, #0
 8006c94:	6023      	str	r3, [r4, #0]
 8006c96:	b016      	add	sp, #88	; 0x58
 8006c98:	bd70      	pop	{r4, r5, r6, pc}
	...

08006c9c <__smakebuf_r>:
 8006c9c:	898b      	ldrh	r3, [r1, #12]
 8006c9e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006ca0:	079d      	lsls	r5, r3, #30
 8006ca2:	4606      	mov	r6, r0
 8006ca4:	460c      	mov	r4, r1
 8006ca6:	d507      	bpl.n	8006cb8 <__smakebuf_r+0x1c>
 8006ca8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006cac:	6023      	str	r3, [r4, #0]
 8006cae:	6123      	str	r3, [r4, #16]
 8006cb0:	2301      	movs	r3, #1
 8006cb2:	6163      	str	r3, [r4, #20]
 8006cb4:	b002      	add	sp, #8
 8006cb6:	bd70      	pop	{r4, r5, r6, pc}
 8006cb8:	ab01      	add	r3, sp, #4
 8006cba:	466a      	mov	r2, sp
 8006cbc:	f7ff ffc8 	bl	8006c50 <__swhatbuf_r>
 8006cc0:	9900      	ldr	r1, [sp, #0]
 8006cc2:	4605      	mov	r5, r0
 8006cc4:	4630      	mov	r0, r6
 8006cc6:	f7ff f9cf 	bl	8006068 <_malloc_r>
 8006cca:	b948      	cbnz	r0, 8006ce0 <__smakebuf_r+0x44>
 8006ccc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006cd0:	059a      	lsls	r2, r3, #22
 8006cd2:	d4ef      	bmi.n	8006cb4 <__smakebuf_r+0x18>
 8006cd4:	f023 0303 	bic.w	r3, r3, #3
 8006cd8:	f043 0302 	orr.w	r3, r3, #2
 8006cdc:	81a3      	strh	r3, [r4, #12]
 8006cde:	e7e3      	b.n	8006ca8 <__smakebuf_r+0xc>
 8006ce0:	4b0d      	ldr	r3, [pc, #52]	; (8006d18 <__smakebuf_r+0x7c>)
 8006ce2:	62b3      	str	r3, [r6, #40]	; 0x28
 8006ce4:	89a3      	ldrh	r3, [r4, #12]
 8006ce6:	6020      	str	r0, [r4, #0]
 8006ce8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cec:	81a3      	strh	r3, [r4, #12]
 8006cee:	9b00      	ldr	r3, [sp, #0]
 8006cf0:	6163      	str	r3, [r4, #20]
 8006cf2:	9b01      	ldr	r3, [sp, #4]
 8006cf4:	6120      	str	r0, [r4, #16]
 8006cf6:	b15b      	cbz	r3, 8006d10 <__smakebuf_r+0x74>
 8006cf8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006cfc:	4630      	mov	r0, r6
 8006cfe:	f000 f8d5 	bl	8006eac <_isatty_r>
 8006d02:	b128      	cbz	r0, 8006d10 <__smakebuf_r+0x74>
 8006d04:	89a3      	ldrh	r3, [r4, #12]
 8006d06:	f023 0303 	bic.w	r3, r3, #3
 8006d0a:	f043 0301 	orr.w	r3, r3, #1
 8006d0e:	81a3      	strh	r3, [r4, #12]
 8006d10:	89a0      	ldrh	r0, [r4, #12]
 8006d12:	4305      	orrs	r5, r0
 8006d14:	81a5      	strh	r5, [r4, #12]
 8006d16:	e7cd      	b.n	8006cb4 <__smakebuf_r+0x18>
 8006d18:	08006aa9 	.word	0x08006aa9

08006d1c <__malloc_lock>:
 8006d1c:	4801      	ldr	r0, [pc, #4]	; (8006d24 <__malloc_lock+0x8>)
 8006d1e:	f7ff bf95 	b.w	8006c4c <__retarget_lock_acquire_recursive>
 8006d22:	bf00      	nop
 8006d24:	20002698 	.word	0x20002698

08006d28 <__malloc_unlock>:
 8006d28:	4801      	ldr	r0, [pc, #4]	; (8006d30 <__malloc_unlock+0x8>)
 8006d2a:	f7ff bf90 	b.w	8006c4e <__retarget_lock_release_recursive>
 8006d2e:	bf00      	nop
 8006d30:	20002698 	.word	0x20002698

08006d34 <_raise_r>:
 8006d34:	291f      	cmp	r1, #31
 8006d36:	b538      	push	{r3, r4, r5, lr}
 8006d38:	4604      	mov	r4, r0
 8006d3a:	460d      	mov	r5, r1
 8006d3c:	d904      	bls.n	8006d48 <_raise_r+0x14>
 8006d3e:	2316      	movs	r3, #22
 8006d40:	6003      	str	r3, [r0, #0]
 8006d42:	f04f 30ff 	mov.w	r0, #4294967295
 8006d46:	bd38      	pop	{r3, r4, r5, pc}
 8006d48:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006d4a:	b112      	cbz	r2, 8006d52 <_raise_r+0x1e>
 8006d4c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006d50:	b94b      	cbnz	r3, 8006d66 <_raise_r+0x32>
 8006d52:	4620      	mov	r0, r4
 8006d54:	f000 f830 	bl	8006db8 <_getpid_r>
 8006d58:	462a      	mov	r2, r5
 8006d5a:	4601      	mov	r1, r0
 8006d5c:	4620      	mov	r0, r4
 8006d5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006d62:	f000 b817 	b.w	8006d94 <_kill_r>
 8006d66:	2b01      	cmp	r3, #1
 8006d68:	d00a      	beq.n	8006d80 <_raise_r+0x4c>
 8006d6a:	1c59      	adds	r1, r3, #1
 8006d6c:	d103      	bne.n	8006d76 <_raise_r+0x42>
 8006d6e:	2316      	movs	r3, #22
 8006d70:	6003      	str	r3, [r0, #0]
 8006d72:	2001      	movs	r0, #1
 8006d74:	e7e7      	b.n	8006d46 <_raise_r+0x12>
 8006d76:	2400      	movs	r4, #0
 8006d78:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006d7c:	4628      	mov	r0, r5
 8006d7e:	4798      	blx	r3
 8006d80:	2000      	movs	r0, #0
 8006d82:	e7e0      	b.n	8006d46 <_raise_r+0x12>

08006d84 <raise>:
 8006d84:	4b02      	ldr	r3, [pc, #8]	; (8006d90 <raise+0xc>)
 8006d86:	4601      	mov	r1, r0
 8006d88:	6818      	ldr	r0, [r3, #0]
 8006d8a:	f7ff bfd3 	b.w	8006d34 <_raise_r>
 8006d8e:	bf00      	nop
 8006d90:	20000018 	.word	0x20000018

08006d94 <_kill_r>:
 8006d94:	b538      	push	{r3, r4, r5, lr}
 8006d96:	4d07      	ldr	r5, [pc, #28]	; (8006db4 <_kill_r+0x20>)
 8006d98:	2300      	movs	r3, #0
 8006d9a:	4604      	mov	r4, r0
 8006d9c:	4608      	mov	r0, r1
 8006d9e:	4611      	mov	r1, r2
 8006da0:	602b      	str	r3, [r5, #0]
 8006da2:	f7fb fe75 	bl	8002a90 <_kill>
 8006da6:	1c43      	adds	r3, r0, #1
 8006da8:	d102      	bne.n	8006db0 <_kill_r+0x1c>
 8006daa:	682b      	ldr	r3, [r5, #0]
 8006dac:	b103      	cbz	r3, 8006db0 <_kill_r+0x1c>
 8006dae:	6023      	str	r3, [r4, #0]
 8006db0:	bd38      	pop	{r3, r4, r5, pc}
 8006db2:	bf00      	nop
 8006db4:	2000269c 	.word	0x2000269c

08006db8 <_getpid_r>:
 8006db8:	f7fb be62 	b.w	8002a80 <_getpid>

08006dbc <__sread>:
 8006dbc:	b510      	push	{r4, lr}
 8006dbe:	460c      	mov	r4, r1
 8006dc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006dc4:	f000 f894 	bl	8006ef0 <_read_r>
 8006dc8:	2800      	cmp	r0, #0
 8006dca:	bfab      	itete	ge
 8006dcc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006dce:	89a3      	ldrhlt	r3, [r4, #12]
 8006dd0:	181b      	addge	r3, r3, r0
 8006dd2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006dd6:	bfac      	ite	ge
 8006dd8:	6563      	strge	r3, [r4, #84]	; 0x54
 8006dda:	81a3      	strhlt	r3, [r4, #12]
 8006ddc:	bd10      	pop	{r4, pc}

08006dde <__swrite>:
 8006dde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006de2:	461f      	mov	r7, r3
 8006de4:	898b      	ldrh	r3, [r1, #12]
 8006de6:	05db      	lsls	r3, r3, #23
 8006de8:	4605      	mov	r5, r0
 8006dea:	460c      	mov	r4, r1
 8006dec:	4616      	mov	r6, r2
 8006dee:	d505      	bpl.n	8006dfc <__swrite+0x1e>
 8006df0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006df4:	2302      	movs	r3, #2
 8006df6:	2200      	movs	r2, #0
 8006df8:	f000 f868 	bl	8006ecc <_lseek_r>
 8006dfc:	89a3      	ldrh	r3, [r4, #12]
 8006dfe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006e02:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006e06:	81a3      	strh	r3, [r4, #12]
 8006e08:	4632      	mov	r2, r6
 8006e0a:	463b      	mov	r3, r7
 8006e0c:	4628      	mov	r0, r5
 8006e0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006e12:	f000 b817 	b.w	8006e44 <_write_r>

08006e16 <__sseek>:
 8006e16:	b510      	push	{r4, lr}
 8006e18:	460c      	mov	r4, r1
 8006e1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e1e:	f000 f855 	bl	8006ecc <_lseek_r>
 8006e22:	1c43      	adds	r3, r0, #1
 8006e24:	89a3      	ldrh	r3, [r4, #12]
 8006e26:	bf15      	itete	ne
 8006e28:	6560      	strne	r0, [r4, #84]	; 0x54
 8006e2a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006e2e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006e32:	81a3      	strheq	r3, [r4, #12]
 8006e34:	bf18      	it	ne
 8006e36:	81a3      	strhne	r3, [r4, #12]
 8006e38:	bd10      	pop	{r4, pc}

08006e3a <__sclose>:
 8006e3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e3e:	f000 b813 	b.w	8006e68 <_close_r>
	...

08006e44 <_write_r>:
 8006e44:	b538      	push	{r3, r4, r5, lr}
 8006e46:	4d07      	ldr	r5, [pc, #28]	; (8006e64 <_write_r+0x20>)
 8006e48:	4604      	mov	r4, r0
 8006e4a:	4608      	mov	r0, r1
 8006e4c:	4611      	mov	r1, r2
 8006e4e:	2200      	movs	r2, #0
 8006e50:	602a      	str	r2, [r5, #0]
 8006e52:	461a      	mov	r2, r3
 8006e54:	f7fb fe53 	bl	8002afe <_write>
 8006e58:	1c43      	adds	r3, r0, #1
 8006e5a:	d102      	bne.n	8006e62 <_write_r+0x1e>
 8006e5c:	682b      	ldr	r3, [r5, #0]
 8006e5e:	b103      	cbz	r3, 8006e62 <_write_r+0x1e>
 8006e60:	6023      	str	r3, [r4, #0]
 8006e62:	bd38      	pop	{r3, r4, r5, pc}
 8006e64:	2000269c 	.word	0x2000269c

08006e68 <_close_r>:
 8006e68:	b538      	push	{r3, r4, r5, lr}
 8006e6a:	4d06      	ldr	r5, [pc, #24]	; (8006e84 <_close_r+0x1c>)
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	4604      	mov	r4, r0
 8006e70:	4608      	mov	r0, r1
 8006e72:	602b      	str	r3, [r5, #0]
 8006e74:	f7fb fe5f 	bl	8002b36 <_close>
 8006e78:	1c43      	adds	r3, r0, #1
 8006e7a:	d102      	bne.n	8006e82 <_close_r+0x1a>
 8006e7c:	682b      	ldr	r3, [r5, #0]
 8006e7e:	b103      	cbz	r3, 8006e82 <_close_r+0x1a>
 8006e80:	6023      	str	r3, [r4, #0]
 8006e82:	bd38      	pop	{r3, r4, r5, pc}
 8006e84:	2000269c 	.word	0x2000269c

08006e88 <_fstat_r>:
 8006e88:	b538      	push	{r3, r4, r5, lr}
 8006e8a:	4d07      	ldr	r5, [pc, #28]	; (8006ea8 <_fstat_r+0x20>)
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	4604      	mov	r4, r0
 8006e90:	4608      	mov	r0, r1
 8006e92:	4611      	mov	r1, r2
 8006e94:	602b      	str	r3, [r5, #0]
 8006e96:	f7fb fe5a 	bl	8002b4e <_fstat>
 8006e9a:	1c43      	adds	r3, r0, #1
 8006e9c:	d102      	bne.n	8006ea4 <_fstat_r+0x1c>
 8006e9e:	682b      	ldr	r3, [r5, #0]
 8006ea0:	b103      	cbz	r3, 8006ea4 <_fstat_r+0x1c>
 8006ea2:	6023      	str	r3, [r4, #0]
 8006ea4:	bd38      	pop	{r3, r4, r5, pc}
 8006ea6:	bf00      	nop
 8006ea8:	2000269c 	.word	0x2000269c

08006eac <_isatty_r>:
 8006eac:	b538      	push	{r3, r4, r5, lr}
 8006eae:	4d06      	ldr	r5, [pc, #24]	; (8006ec8 <_isatty_r+0x1c>)
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	4604      	mov	r4, r0
 8006eb4:	4608      	mov	r0, r1
 8006eb6:	602b      	str	r3, [r5, #0]
 8006eb8:	f7fb fe59 	bl	8002b6e <_isatty>
 8006ebc:	1c43      	adds	r3, r0, #1
 8006ebe:	d102      	bne.n	8006ec6 <_isatty_r+0x1a>
 8006ec0:	682b      	ldr	r3, [r5, #0]
 8006ec2:	b103      	cbz	r3, 8006ec6 <_isatty_r+0x1a>
 8006ec4:	6023      	str	r3, [r4, #0]
 8006ec6:	bd38      	pop	{r3, r4, r5, pc}
 8006ec8:	2000269c 	.word	0x2000269c

08006ecc <_lseek_r>:
 8006ecc:	b538      	push	{r3, r4, r5, lr}
 8006ece:	4d07      	ldr	r5, [pc, #28]	; (8006eec <_lseek_r+0x20>)
 8006ed0:	4604      	mov	r4, r0
 8006ed2:	4608      	mov	r0, r1
 8006ed4:	4611      	mov	r1, r2
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	602a      	str	r2, [r5, #0]
 8006eda:	461a      	mov	r2, r3
 8006edc:	f7fb fe52 	bl	8002b84 <_lseek>
 8006ee0:	1c43      	adds	r3, r0, #1
 8006ee2:	d102      	bne.n	8006eea <_lseek_r+0x1e>
 8006ee4:	682b      	ldr	r3, [r5, #0]
 8006ee6:	b103      	cbz	r3, 8006eea <_lseek_r+0x1e>
 8006ee8:	6023      	str	r3, [r4, #0]
 8006eea:	bd38      	pop	{r3, r4, r5, pc}
 8006eec:	2000269c 	.word	0x2000269c

08006ef0 <_read_r>:
 8006ef0:	b538      	push	{r3, r4, r5, lr}
 8006ef2:	4d07      	ldr	r5, [pc, #28]	; (8006f10 <_read_r+0x20>)
 8006ef4:	4604      	mov	r4, r0
 8006ef6:	4608      	mov	r0, r1
 8006ef8:	4611      	mov	r1, r2
 8006efa:	2200      	movs	r2, #0
 8006efc:	602a      	str	r2, [r5, #0]
 8006efe:	461a      	mov	r2, r3
 8006f00:	f7fb fde0 	bl	8002ac4 <_read>
 8006f04:	1c43      	adds	r3, r0, #1
 8006f06:	d102      	bne.n	8006f0e <_read_r+0x1e>
 8006f08:	682b      	ldr	r3, [r5, #0]
 8006f0a:	b103      	cbz	r3, 8006f0e <_read_r+0x1e>
 8006f0c:	6023      	str	r3, [r4, #0]
 8006f0e:	bd38      	pop	{r3, r4, r5, pc}
 8006f10:	2000269c 	.word	0x2000269c

08006f14 <_init>:
 8006f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f16:	bf00      	nop
 8006f18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f1a:	bc08      	pop	{r3}
 8006f1c:	469e      	mov	lr, r3
 8006f1e:	4770      	bx	lr

08006f20 <_fini>:
 8006f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f22:	bf00      	nop
 8006f24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f26:	bc08      	pop	{r3}
 8006f28:	469e      	mov	lr, r3
 8006f2a:	4770      	bx	lr
