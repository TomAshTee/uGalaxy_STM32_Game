
SpaceShooter-v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ec8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008e0  08009058  08009058  0000a058  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009938  08009938  0000b074  2**0
                  CONTENTS
  4 .ARM          00000008  08009938  08009938  0000a938  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009940  08009940  0000b074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009940  08009940  0000a940  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009944  08009944  0000a944  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08009948  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003af8  20000074  080099bc  0000b074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20003b6c  080099bc  0000bb6c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e578  00000000  00000000  0000b0a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000272c  00000000  00000000  0001961c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ec0  00000000  00000000  0001bd48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b09  00000000  00000000  0001cc08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000230f6  00000000  00000000  0001d711  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000111e2  00000000  00000000  00040807  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d21e5  00000000  00000000  000519e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00123bce  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000499c  00000000  00000000  00123c14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  001285b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009040 	.word	0x08009040

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08009040 	.word	0x08009040

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	@ 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmpun>:
 8000b1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b24:	d102      	bne.n	8000b2c <__aeabi_dcmpun+0x10>
 8000b26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b2a:	d10a      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x20>
 8000b36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b3a:	d102      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	f04f 0001 	mov.w	r0, #1
 8000b46:	4770      	bx	lr

08000b48 <GFX_DrowLine>:
	        }
	   }
}

//Bresenham's algorithm - Wikipedia
void GFX_DrowLine(int X1, int Y1,int X2,int Y2,int I_O) {
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b08e      	sub	sp, #56	@ 0x38
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	60f8      	str	r0, [r7, #12]
 8000b50:	60b9      	str	r1, [r7, #8]
 8000b52:	607a      	str	r2, [r7, #4]
 8000b54:	603b      	str	r3, [r7, #0]
	int CurrentX, CurrentY, Xinc, Yinc,
		Dx, Dy, TwoDx, TwoDy,
		TwoDxAccumulatedError, TwoDyAccumulatedError;

	Dx = (X2-X1);
 8000b56:	687a      	ldr	r2, [r7, #4]
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	1ad3      	subs	r3, r2, r3
 8000b5c:	627b      	str	r3, [r7, #36]	@ 0x24
	Dy = (Y2-Y1);
 8000b5e:	683a      	ldr	r2, [r7, #0]
 8000b60:	68bb      	ldr	r3, [r7, #8]
 8000b62:	1ad3      	subs	r3, r2, r3
 8000b64:	623b      	str	r3, [r7, #32]

	TwoDx = Dx + Dx;
 8000b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b68:	005b      	lsls	r3, r3, #1
 8000b6a:	61fb      	str	r3, [r7, #28]
	TwoDy = Dy + Dy;
 8000b6c:	6a3b      	ldr	r3, [r7, #32]
 8000b6e:	005b      	lsls	r3, r3, #1
 8000b70:	61bb      	str	r3, [r7, #24]

	CurrentX = X1;
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	637b      	str	r3, [r7, #52]	@ 0x34
	CurrentY = Y1;
 8000b76:	68bb      	ldr	r3, [r7, #8]
 8000b78:	633b      	str	r3, [r7, #48]	@ 0x30

	Xinc = 1;
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	Yinc = 1;
 8000b7e:	2301      	movs	r3, #1
 8000b80:	62bb      	str	r3, [r7, #40]	@ 0x28

	if(Dx < 0) {
 8000b82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	da08      	bge.n	8000b9a <GFX_DrowLine+0x52>

		Xinc = -1;
 8000b88:	f04f 33ff 	mov.w	r3, #4294967295
 8000b8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
		Dx = -Dx;
 8000b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b90:	425b      	negs	r3, r3
 8000b92:	627b      	str	r3, [r7, #36]	@ 0x24
		TwoDx = -TwoDx;
 8000b94:	69fb      	ldr	r3, [r7, #28]
 8000b96:	425b      	negs	r3, r3
 8000b98:	61fb      	str	r3, [r7, #28]
	}

	if (Dy < 0) {
 8000b9a:	6a3b      	ldr	r3, [r7, #32]
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	da08      	bge.n	8000bb2 <GFX_DrowLine+0x6a>
		Yinc = -1;
 8000ba0:	f04f 33ff 	mov.w	r3, #4294967295
 8000ba4:	62bb      	str	r3, [r7, #40]	@ 0x28
		Dy = -Dy;
 8000ba6:	6a3b      	ldr	r3, [r7, #32]
 8000ba8:	425b      	negs	r3, r3
 8000baa:	623b      	str	r3, [r7, #32]
		TwoDy = -TwoDy;
 8000bac:	69bb      	ldr	r3, [r7, #24]
 8000bae:	425b      	negs	r3, r3
 8000bb0:	61bb      	str	r3, [r7, #24]
	}

	ssd1327_setPixel(X1,Y1,I_O);
 8000bb2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000bb4:	b2db      	uxtb	r3, r3
 8000bb6:	461a      	mov	r2, r3
 8000bb8:	68b9      	ldr	r1, [r7, #8]
 8000bba:	68f8      	ldr	r0, [r7, #12]
 8000bbc:	f002 ffb0 	bl	8003b20 <ssd1327_setPixel>

	if ((Dx != 0) || (Dy != 0)) {
 8000bc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d102      	bne.n	8000bcc <GFX_DrowLine+0x84>
 8000bc6:	6a3b      	ldr	r3, [r7, #32]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d046      	beq.n	8000c5a <GFX_DrowLine+0x112>

		if (Dy <= Dx) {
 8000bcc:	6a3a      	ldr	r2, [r7, #32]
 8000bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bd0:	429a      	cmp	r2, r3
 8000bd2:	dc21      	bgt.n	8000c18 <GFX_DrowLine+0xd0>
			TwoDxAccumulatedError = 0;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	617b      	str	r3, [r7, #20]
			do {
			    CurrentX += Xinc;
 8000bd8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000bda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000bdc:	4413      	add	r3, r2
 8000bde:	637b      	str	r3, [r7, #52]	@ 0x34
			    TwoDxAccumulatedError += TwoDy;
 8000be0:	697a      	ldr	r2, [r7, #20]
 8000be2:	69bb      	ldr	r3, [r7, #24]
 8000be4:	4413      	add	r3, r2
 8000be6:	617b      	str	r3, [r7, #20]
			    if(TwoDxAccumulatedError > Dx) {
 8000be8:	697a      	ldr	r2, [r7, #20]
 8000bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bec:	429a      	cmp	r2, r3
 8000bee:	dd07      	ble.n	8000c00 <GFX_DrowLine+0xb8>
			        CurrentY += Yinc;
 8000bf0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000bf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000bf4:	4413      	add	r3, r2
 8000bf6:	633b      	str	r3, [r7, #48]	@ 0x30
			        TwoDxAccumulatedError -= TwoDx;
 8000bf8:	697a      	ldr	r2, [r7, #20]
 8000bfa:	69fb      	ldr	r3, [r7, #28]
 8000bfc:	1ad3      	subs	r3, r2, r3
 8000bfe:	617b      	str	r3, [r7, #20]
			    }
			    ssd1327_setPixel(CurrentX,CurrentY,I_O);
 8000c00:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000c02:	b2db      	uxtb	r3, r3
 8000c04:	461a      	mov	r2, r3
 8000c06:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8000c08:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8000c0a:	f002 ff89 	bl	8003b20 <ssd1327_setPixel>
			  } while (CurrentX != X2);
 8000c0e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	429a      	cmp	r2, r3
 8000c14:	d1e0      	bne.n	8000bd8 <GFX_DrowLine+0x90>
			      }
			      ssd1327_setPixel(CurrentX,CurrentY,I_O);
			  } while (CurrentY != Y2);
		  }
	}
}
 8000c16:	e020      	b.n	8000c5a <GFX_DrowLine+0x112>
			  TwoDyAccumulatedError = 0;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	613b      	str	r3, [r7, #16]
			      CurrentY += Yinc;
 8000c1c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000c1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000c20:	4413      	add	r3, r2
 8000c22:	633b      	str	r3, [r7, #48]	@ 0x30
			      TwoDyAccumulatedError += TwoDx;
 8000c24:	693a      	ldr	r2, [r7, #16]
 8000c26:	69fb      	ldr	r3, [r7, #28]
 8000c28:	4413      	add	r3, r2
 8000c2a:	613b      	str	r3, [r7, #16]
			      if(TwoDyAccumulatedError>Dy) {
 8000c2c:	693a      	ldr	r2, [r7, #16]
 8000c2e:	6a3b      	ldr	r3, [r7, #32]
 8000c30:	429a      	cmp	r2, r3
 8000c32:	dd07      	ble.n	8000c44 <GFX_DrowLine+0xfc>
				      CurrentX += Xinc;
 8000c34:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000c36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c38:	4413      	add	r3, r2
 8000c3a:	637b      	str	r3, [r7, #52]	@ 0x34
				      TwoDyAccumulatedError -= TwoDy;
 8000c3c:	693a      	ldr	r2, [r7, #16]
 8000c3e:	69bb      	ldr	r3, [r7, #24]
 8000c40:	1ad3      	subs	r3, r2, r3
 8000c42:	613b      	str	r3, [r7, #16]
			      ssd1327_setPixel(CurrentX,CurrentY,I_O);
 8000c44:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000c46:	b2db      	uxtb	r3, r3
 8000c48:	461a      	mov	r2, r3
 8000c4a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8000c4c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8000c4e:	f002 ff67 	bl	8003b20 <ssd1327_setPixel>
			  } while (CurrentY != Y2);
 8000c52:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	429a      	cmp	r2, r3
 8000c58:	d1e0      	bne.n	8000c1c <GFX_DrowLine+0xd4>
}
 8000c5a:	bf00      	nop
 8000c5c:	3738      	adds	r7, #56	@ 0x38
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}

08000c62 <GFX_DrowCircleHelper>:
		}
	}
}

void GFX_DrowCircleHelper(int x0, int y0, int r, uint8_t cornername, uint8_t color )
{
 8000c62:	b580      	push	{r7, lr}
 8000c64:	b08a      	sub	sp, #40	@ 0x28
 8000c66:	af00      	add	r7, sp, #0
 8000c68:	60f8      	str	r0, [r7, #12]
 8000c6a:	60b9      	str	r1, [r7, #8]
 8000c6c:	607a      	str	r2, [r7, #4]
 8000c6e:	70fb      	strb	r3, [r7, #3]
	int f 		= 1 - r;
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	f1c3 0301 	rsb	r3, r3, #1
 8000c76:	627b      	str	r3, [r7, #36]	@ 0x24
	int ddF_x 	= 1;
 8000c78:	2301      	movs	r3, #1
 8000c7a:	623b      	str	r3, [r7, #32]
	int ddF_y	= -2 * r;
 8000c7c:	687a      	ldr	r2, [r7, #4]
 8000c7e:	4613      	mov	r3, r2
 8000c80:	07db      	lsls	r3, r3, #31
 8000c82:	1a9b      	subs	r3, r3, r2
 8000c84:	005b      	lsls	r3, r3, #1
 8000c86:	61fb      	str	r3, [r7, #28]
	int x		= 0;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	61bb      	str	r3, [r7, #24]
	int y		= r;
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	617b      	str	r3, [r7, #20]

	while(x<y)
 8000c90:	e082      	b.n	8000d98 <GFX_DrowCircleHelper+0x136>
	{
		if(f >= 0)
 8000c92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	db09      	blt.n	8000cac <GFX_DrowCircleHelper+0x4a>
		{
			y--;
 8000c98:	697b      	ldr	r3, [r7, #20]
 8000c9a:	3b01      	subs	r3, #1
 8000c9c:	617b      	str	r3, [r7, #20]
			ddF_y += 2;
 8000c9e:	69fb      	ldr	r3, [r7, #28]
 8000ca0:	3302      	adds	r3, #2
 8000ca2:	61fb      	str	r3, [r7, #28]
			f += ddF_y;
 8000ca4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000ca6:	69fb      	ldr	r3, [r7, #28]
 8000ca8:	4413      	add	r3, r2
 8000caa:	627b      	str	r3, [r7, #36]	@ 0x24
		}
		x++;
 8000cac:	69bb      	ldr	r3, [r7, #24]
 8000cae:	3301      	adds	r3, #1
 8000cb0:	61bb      	str	r3, [r7, #24]
		ddF_x += 2;
 8000cb2:	6a3b      	ldr	r3, [r7, #32]
 8000cb4:	3302      	adds	r3, #2
 8000cb6:	623b      	str	r3, [r7, #32]
		f += ddF_x;
 8000cb8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000cba:	6a3b      	ldr	r3, [r7, #32]
 8000cbc:	4413      	add	r3, r2
 8000cbe:	627b      	str	r3, [r7, #36]	@ 0x24

		if(cornername & 0x4)
 8000cc0:	78fb      	ldrb	r3, [r7, #3]
 8000cc2:	f003 0304 	and.w	r3, r3, #4
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d015      	beq.n	8000cf6 <GFX_DrowCircleHelper+0x94>
		{
			ssd1327_setPixel(x0 + x, y0 + y, color);
 8000cca:	68fa      	ldr	r2, [r7, #12]
 8000ccc:	69bb      	ldr	r3, [r7, #24]
 8000cce:	18d0      	adds	r0, r2, r3
 8000cd0:	68ba      	ldr	r2, [r7, #8]
 8000cd2:	697b      	ldr	r3, [r7, #20]
 8000cd4:	4413      	add	r3, r2
 8000cd6:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8000cda:	4619      	mov	r1, r3
 8000cdc:	f002 ff20 	bl	8003b20 <ssd1327_setPixel>
			ssd1327_setPixel(x0 + y, y0 + x, color);
 8000ce0:	68fa      	ldr	r2, [r7, #12]
 8000ce2:	697b      	ldr	r3, [r7, #20]
 8000ce4:	18d0      	adds	r0, r2, r3
 8000ce6:	68ba      	ldr	r2, [r7, #8]
 8000ce8:	69bb      	ldr	r3, [r7, #24]
 8000cea:	4413      	add	r3, r2
 8000cec:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	f002 ff15 	bl	8003b20 <ssd1327_setPixel>
		}
		if(cornername & 0x2)
 8000cf6:	78fb      	ldrb	r3, [r7, #3]
 8000cf8:	f003 0302 	and.w	r3, r3, #2
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d015      	beq.n	8000d2c <GFX_DrowCircleHelper+0xca>
		{
			ssd1327_setPixel(x0 + x, y0 - y, color);
 8000d00:	68fa      	ldr	r2, [r7, #12]
 8000d02:	69bb      	ldr	r3, [r7, #24]
 8000d04:	18d0      	adds	r0, r2, r3
 8000d06:	68ba      	ldr	r2, [r7, #8]
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	1ad3      	subs	r3, r2, r3
 8000d0c:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8000d10:	4619      	mov	r1, r3
 8000d12:	f002 ff05 	bl	8003b20 <ssd1327_setPixel>
			ssd1327_setPixel(x0 + y, y0 - x, color);
 8000d16:	68fa      	ldr	r2, [r7, #12]
 8000d18:	697b      	ldr	r3, [r7, #20]
 8000d1a:	18d0      	adds	r0, r2, r3
 8000d1c:	68ba      	ldr	r2, [r7, #8]
 8000d1e:	69bb      	ldr	r3, [r7, #24]
 8000d20:	1ad3      	subs	r3, r2, r3
 8000d22:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8000d26:	4619      	mov	r1, r3
 8000d28:	f002 fefa 	bl	8003b20 <ssd1327_setPixel>
		}
		if(cornername & 0x8)
 8000d2c:	78fb      	ldrb	r3, [r7, #3]
 8000d2e:	f003 0308 	and.w	r3, r3, #8
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d015      	beq.n	8000d62 <GFX_DrowCircleHelper+0x100>
		{
			ssd1327_setPixel(x0 - x, y0 + y, color);
 8000d36:	68fa      	ldr	r2, [r7, #12]
 8000d38:	69bb      	ldr	r3, [r7, #24]
 8000d3a:	1ad0      	subs	r0, r2, r3
 8000d3c:	68ba      	ldr	r2, [r7, #8]
 8000d3e:	697b      	ldr	r3, [r7, #20]
 8000d40:	4413      	add	r3, r2
 8000d42:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8000d46:	4619      	mov	r1, r3
 8000d48:	f002 feea 	bl	8003b20 <ssd1327_setPixel>
			ssd1327_setPixel(x0 - y, y0 + x, color);
 8000d4c:	68fa      	ldr	r2, [r7, #12]
 8000d4e:	697b      	ldr	r3, [r7, #20]
 8000d50:	1ad0      	subs	r0, r2, r3
 8000d52:	68ba      	ldr	r2, [r7, #8]
 8000d54:	69bb      	ldr	r3, [r7, #24]
 8000d56:	4413      	add	r3, r2
 8000d58:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	f002 fedf 	bl	8003b20 <ssd1327_setPixel>
		}
		if(cornername & 0x1)
 8000d62:	78fb      	ldrb	r3, [r7, #3]
 8000d64:	f003 0301 	and.w	r3, r3, #1
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d015      	beq.n	8000d98 <GFX_DrowCircleHelper+0x136>
		{
			ssd1327_setPixel(x0 - x, y0 - y, color);
 8000d6c:	68fa      	ldr	r2, [r7, #12]
 8000d6e:	69bb      	ldr	r3, [r7, #24]
 8000d70:	1ad0      	subs	r0, r2, r3
 8000d72:	68ba      	ldr	r2, [r7, #8]
 8000d74:	697b      	ldr	r3, [r7, #20]
 8000d76:	1ad3      	subs	r3, r2, r3
 8000d78:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	f002 fecf 	bl	8003b20 <ssd1327_setPixel>
			ssd1327_setPixel(x0 - y, y0 - x, color);
 8000d82:	68fa      	ldr	r2, [r7, #12]
 8000d84:	697b      	ldr	r3, [r7, #20]
 8000d86:	1ad0      	subs	r0, r2, r3
 8000d88:	68ba      	ldr	r2, [r7, #8]
 8000d8a:	69bb      	ldr	r3, [r7, #24]
 8000d8c:	1ad3      	subs	r3, r2, r3
 8000d8e:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8000d92:	4619      	mov	r1, r3
 8000d94:	f002 fec4 	bl	8003b20 <ssd1327_setPixel>
	while(x<y)
 8000d98:	69ba      	ldr	r2, [r7, #24]
 8000d9a:	697b      	ldr	r3, [r7, #20]
 8000d9c:	429a      	cmp	r2, r3
 8000d9e:	f6ff af78 	blt.w	8000c92 <GFX_DrowCircleHelper+0x30>
		}
	}
}
 8000da2:	bf00      	nop
 8000da4:	bf00      	nop
 8000da6:	3728      	adds	r7, #40	@ 0x28
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}

08000dac <GFX_DrowBitMap_P>:
		GFX_DrowLine(x0-y, y0+x, x0-y, y0-x,I_O);
  	}
}

void GFX_DrowBitMap_P (int x, int y, const uint8_t *bitmap, uint8_t w, uint8_t h, uint8_t color)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b086      	sub	sp, #24
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	60f8      	str	r0, [r7, #12]
 8000db4:	60b9      	str	r1, [r7, #8]
 8000db6:	607a      	str	r2, [r7, #4]
 8000db8:	70fb      	strb	r3, [r7, #3]
//
//			ssd1327_setPixel(x+i, y+j, );
//		}
//	}

	uint8_t i, j, byteWidth = (w+7)/8;
 8000dba:	78fb      	ldrb	r3, [r7, #3]
 8000dbc:	3307      	adds	r3, #7
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	da00      	bge.n	8000dc4 <GFX_DrowBitMap_P+0x18>
 8000dc2:	3307      	adds	r3, #7
 8000dc4:	10db      	asrs	r3, r3, #3
 8000dc6:	757b      	strb	r3, [r7, #21]

	for(j = 0; j < h; j++)
 8000dc8:	2300      	movs	r3, #0
 8000dca:	75bb      	strb	r3, [r7, #22]
 8000dcc:	e02d      	b.n	8000e2a <GFX_DrowBitMap_P+0x7e>
	{
		for(i = 0; i < w; i++)
 8000dce:	2300      	movs	r3, #0
 8000dd0:	75fb      	strb	r3, [r7, #23]
 8000dd2:	e023      	b.n	8000e1c <GFX_DrowBitMap_P+0x70>
		{
			if(*(bitmap + j *byteWidth + i /8) & (128 >> (i&7)) )
 8000dd4:	7dbb      	ldrb	r3, [r7, #22]
 8000dd6:	7d7a      	ldrb	r2, [r7, #21]
 8000dd8:	fb02 f303 	mul.w	r3, r2, r3
 8000ddc:	461a      	mov	r2, r3
 8000dde:	7dfb      	ldrb	r3, [r7, #23]
 8000de0:	08db      	lsrs	r3, r3, #3
 8000de2:	b2db      	uxtb	r3, r3
 8000de4:	4413      	add	r3, r2
 8000de6:	687a      	ldr	r2, [r7, #4]
 8000de8:	4413      	add	r3, r2
 8000dea:	781b      	ldrb	r3, [r3, #0]
 8000dec:	4619      	mov	r1, r3
 8000dee:	7dfb      	ldrb	r3, [r7, #23]
 8000df0:	f003 0307 	and.w	r3, r3, #7
 8000df4:	2280      	movs	r2, #128	@ 0x80
 8000df6:	fa42 f303 	asr.w	r3, r2, r3
 8000dfa:	400b      	ands	r3, r1
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d00a      	beq.n	8000e16 <GFX_DrowBitMap_P+0x6a>
				ssd1327_setPixel(x+i, y+j, color);
 8000e00:	7dfa      	ldrb	r2, [r7, #23]
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	18d0      	adds	r0, r2, r3
 8000e06:	7dba      	ldrb	r2, [r7, #22]
 8000e08:	68bb      	ldr	r3, [r7, #8]
 8000e0a:	4413      	add	r3, r2
 8000e0c:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8000e10:	4619      	mov	r1, r3
 8000e12:	f002 fe85 	bl	8003b20 <ssd1327_setPixel>
		for(i = 0; i < w; i++)
 8000e16:	7dfb      	ldrb	r3, [r7, #23]
 8000e18:	3301      	adds	r3, #1
 8000e1a:	75fb      	strb	r3, [r7, #23]
 8000e1c:	7dfa      	ldrb	r2, [r7, #23]
 8000e1e:	78fb      	ldrb	r3, [r7, #3]
 8000e20:	429a      	cmp	r2, r3
 8000e22:	d3d7      	bcc.n	8000dd4 <GFX_DrowBitMap_P+0x28>
	for(j = 0; j < h; j++)
 8000e24:	7dbb      	ldrb	r3, [r7, #22]
 8000e26:	3301      	adds	r3, #1
 8000e28:	75bb      	strb	r3, [r7, #22]
 8000e2a:	7dba      	ldrb	r2, [r7, #22]
 8000e2c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000e30:	429a      	cmp	r2, r3
 8000e32:	d3cc      	bcc.n	8000dce <GFX_DrowBitMap_P+0x22>
		}
	}

}
 8000e34:	bf00      	nop
 8000e36:	bf00      	nop
 8000e38:	3718      	adds	r7, #24
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
	...

08000e40 <GFX_DrowChar>:

void GFX_DrowChar(int x, int y, char c, uint8_t color, uint8_t bg, uint8_t size)
{
 8000e40:	b590      	push	{r4, r7, lr}
 8000e42:	b089      	sub	sp, #36	@ 0x24
 8000e44:	af02      	add	r7, sp, #8
 8000e46:	60f8      	str	r0, [r7, #12]
 8000e48:	60b9      	str	r1, [r7, #8]
 8000e4a:	4611      	mov	r1, r2
 8000e4c:	461a      	mov	r2, r3
 8000e4e:	460b      	mov	r3, r1
 8000e50:	71fb      	strb	r3, [r7, #7]
 8000e52:	4613      	mov	r3, r2
 8000e54:	71bb      	strb	r3, [r7, #6]

	  uint8_t line;
	  int8_t i,j;
	  if((x >= SSD1327_WIDTH)            || // Clip right
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	2b7f      	cmp	r3, #127	@ 0x7f
 8000e5a:	f300 80a9 	bgt.w	8000fb0 <GFX_DrowChar+0x170>
 8000e5e:	68bb      	ldr	r3, [r7, #8]
 8000e60:	2b7f      	cmp	r3, #127	@ 0x7f
 8000e62:	f300 80a5 	bgt.w	8000fb0 <GFX_DrowChar+0x170>
	     (y >= SSD1327_HEIGHT)           || // Clip bottom
	     ((x + 6 * size - 1) < 0) || // Clip left
 8000e66:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8000e6a:	4613      	mov	r3, r2
 8000e6c:	005b      	lsls	r3, r3, #1
 8000e6e:	4413      	add	r3, r2
 8000e70:	005b      	lsls	r3, r3, #1
 8000e72:	461a      	mov	r2, r3
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	4413      	add	r3, r2
	     (y >= SSD1327_HEIGHT)           || // Clip bottom
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	f340 8099 	ble.w	8000fb0 <GFX_DrowChar+0x170>
	     ((y + 8 * size - 1) < 0))   // Clip top
 8000e7e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000e82:	00da      	lsls	r2, r3, #3
 8000e84:	68bb      	ldr	r3, [r7, #8]
 8000e86:	4413      	add	r3, r2
	     ((x + 6 * size - 1) < 0) || // Clip left
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	f340 8091 	ble.w	8000fb0 <GFX_DrowChar+0x170>
	    return;

	  for  (i=0; i<6; i++ ) {
 8000e8e:	2300      	movs	r3, #0
 8000e90:	75bb      	strb	r3, [r7, #22]
 8000e92:	e087      	b.n	8000fa4 <GFX_DrowChar+0x164>
	    if (i == 5)
 8000e94:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8000e98:	2b05      	cmp	r3, #5
 8000e9a:	d102      	bne.n	8000ea2 <GFX_DrowChar+0x62>
	      line = 0x0;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	75fb      	strb	r3, [r7, #23]
 8000ea0:	e009      	b.n	8000eb6 <GFX_DrowChar+0x76>
	    else
	      //line = pgm_read_byte(font+(c*5)+i);
	    	line = (font[(c*5)+i]);
 8000ea2:	79fa      	ldrb	r2, [r7, #7]
 8000ea4:	4613      	mov	r3, r2
 8000ea6:	009b      	lsls	r3, r3, #2
 8000ea8:	441a      	add	r2, r3
 8000eaa:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8000eae:	4413      	add	r3, r2
 8000eb0:	4a41      	ldr	r2, [pc, #260]	@ (8000fb8 <GFX_DrowChar+0x178>)
 8000eb2:	5cd3      	ldrb	r3, [r2, r3]
 8000eb4:	75fb      	strb	r3, [r7, #23]
	    for (j = 0; j<8; j++) {
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	757b      	strb	r3, [r7, #21]
 8000eba:	e069      	b.n	8000f90 <GFX_DrowChar+0x150>
	      if (line & 0x1) {
 8000ebc:	7dfb      	ldrb	r3, [r7, #23]
 8000ebe:	f003 0301 	and.w	r3, r3, #1
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d02a      	beq.n	8000f1c <GFX_DrowChar+0xdc>
	        if (size == 1) // default size
 8000ec6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000eca:	2b01      	cmp	r3, #1
 8000ecc:	d10c      	bne.n	8000ee8 <GFX_DrowChar+0xa8>
	        	ssd1327_setPixel(x+i, y+j, color);
 8000ece:	f997 2016 	ldrsb.w	r2, [r7, #22]
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	18d0      	adds	r0, r2, r3
 8000ed6:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8000eda:	68bb      	ldr	r3, [r7, #8]
 8000edc:	4413      	add	r3, r2
 8000ede:	79ba      	ldrb	r2, [r7, #6]
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	f002 fe1d 	bl	8003b20 <ssd1327_setPixel>
 8000ee6:	e04a      	b.n	8000f7e <GFX_DrowChar+0x13e>
	        else {  // big size
	        	GFX_FillRect(x+(i*size), y+(j*size), size, size, color);
 8000ee8:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8000eec:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8000ef0:	fb03 f202 	mul.w	r2, r3, r2
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	18d0      	adds	r0, r2, r3
 8000ef8:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000efc:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8000f00:	fb03 f202 	mul.w	r2, r3, r2
 8000f04:	68bb      	ldr	r3, [r7, #8]
 8000f06:	18d1      	adds	r1, r2, r3
 8000f08:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8000f0c:	f897 402c 	ldrb.w	r4, [r7, #44]	@ 0x2c
 8000f10:	79bb      	ldrb	r3, [r7, #6]
 8000f12:	9300      	str	r3, [sp, #0]
 8000f14:	4623      	mov	r3, r4
 8000f16:	f000 f851 	bl	8000fbc <GFX_FillRect>
 8000f1a:	e030      	b.n	8000f7e <GFX_DrowChar+0x13e>
	        }
	      } else if (bg != color) {
 8000f1c:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8000f20:	79bb      	ldrb	r3, [r7, #6]
 8000f22:	429a      	cmp	r2, r3
 8000f24:	d02b      	beq.n	8000f7e <GFX_DrowChar+0x13e>
	        if (size == 1) // default size
 8000f26:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000f2a:	2b01      	cmp	r3, #1
 8000f2c:	d10d      	bne.n	8000f4a <GFX_DrowChar+0x10a>
	        	ssd1327_setPixel(x+i, y+j, bg);
 8000f2e:	f997 2016 	ldrsb.w	r2, [r7, #22]
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	18d0      	adds	r0, r2, r3
 8000f36:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8000f3a:	68bb      	ldr	r3, [r7, #8]
 8000f3c:	4413      	add	r3, r2
 8000f3e:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8000f42:	4619      	mov	r1, r3
 8000f44:	f002 fdec 	bl	8003b20 <ssd1327_setPixel>
 8000f48:	e019      	b.n	8000f7e <GFX_DrowChar+0x13e>
	        else {  // big size
	        	GFX_FillRect(x+i*size, y+j*size, size, size, bg);
 8000f4a:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8000f4e:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8000f52:	fb03 f202 	mul.w	r2, r3, r2
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	18d0      	adds	r0, r2, r3
 8000f5a:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000f5e:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8000f62:	fb03 f202 	mul.w	r2, r3, r2
 8000f66:	68bb      	ldr	r3, [r7, #8]
 8000f68:	18d1      	adds	r1, r2, r3
 8000f6a:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8000f6e:	f897 402c 	ldrb.w	r4, [r7, #44]	@ 0x2c
 8000f72:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000f76:	9300      	str	r3, [sp, #0]
 8000f78:	4623      	mov	r3, r4
 8000f7a:	f000 f81f 	bl	8000fbc <GFX_FillRect>
	        }
	      }
	      line >>= 1;
 8000f7e:	7dfb      	ldrb	r3, [r7, #23]
 8000f80:	085b      	lsrs	r3, r3, #1
 8000f82:	75fb      	strb	r3, [r7, #23]
	    for (j = 0; j<8; j++) {
 8000f84:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000f88:	b2db      	uxtb	r3, r3
 8000f8a:	3301      	adds	r3, #1
 8000f8c:	b2db      	uxtb	r3, r3
 8000f8e:	757b      	strb	r3, [r7, #21]
 8000f90:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000f94:	2b07      	cmp	r3, #7
 8000f96:	dd91      	ble.n	8000ebc <GFX_DrowChar+0x7c>
	  for  (i=0; i<6; i++ ) {
 8000f98:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8000f9c:	b2db      	uxtb	r3, r3
 8000f9e:	3301      	adds	r3, #1
 8000fa0:	b2db      	uxtb	r3, r3
 8000fa2:	75bb      	strb	r3, [r7, #22]
 8000fa4:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8000fa8:	2b05      	cmp	r3, #5
 8000faa:	f77f af73 	ble.w	8000e94 <GFX_DrowChar+0x54>
 8000fae:	e000      	b.n	8000fb2 <GFX_DrowChar+0x172>
	    return;
 8000fb0:	bf00      	nop
	    }
	  }
}
 8000fb2:	371c      	adds	r7, #28
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd90      	pop	{r4, r7, pc}
 8000fb8:	08009058 	.word	0x08009058

08000fbc <GFX_FillRect>:

void GFX_FillRect (int x, int y, int w, int h, uint8_t color )
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b086      	sub	sp, #24
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	60f8      	str	r0, [r7, #12]
 8000fc4:	60b9      	str	r1, [r7, #8]
 8000fc6:	607a      	str	r2, [r7, #4]
 8000fc8:	603b      	str	r3, [r7, #0]
	int16_t i;
	for(i=x; i <x+w; i++)
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	82fb      	strh	r3, [r7, #22]
 8000fce:	e00d      	b.n	8000fec <GFX_FillRect+0x30>
	{
		GFX_DrowFastVLine(i, y, h, color);
 8000fd0:	f9b7 0016 	ldrsh.w	r0, [r7, #22]
 8000fd4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000fd8:	683a      	ldr	r2, [r7, #0]
 8000fda:	68b9      	ldr	r1, [r7, #8]
 8000fdc:	f000 f812 	bl	8001004 <GFX_DrowFastVLine>
	for(i=x; i <x+w; i++)
 8000fe0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000fe4:	b29b      	uxth	r3, r3
 8000fe6:	3301      	adds	r3, #1
 8000fe8:	b29b      	uxth	r3, r3
 8000fea:	82fb      	strh	r3, [r7, #22]
 8000fec:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8000ff0:	68f9      	ldr	r1, [r7, #12]
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	440b      	add	r3, r1
 8000ff6:	429a      	cmp	r2, r3
 8000ff8:	dbea      	blt.n	8000fd0 <GFX_FillRect+0x14>
	}
}
 8000ffa:	bf00      	nop
 8000ffc:	bf00      	nop
 8000ffe:	3718      	adds	r7, #24
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}

08001004 <GFX_DrowFastVLine>:

void GFX_DrowFastVLine(int x, int y, int h, uint8_t color)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b086      	sub	sp, #24
 8001008:	af02      	add	r7, sp, #8
 800100a:	60f8      	str	r0, [r7, #12]
 800100c:	60b9      	str	r1, [r7, #8]
 800100e:	607a      	str	r2, [r7, #4]
 8001010:	70fb      	strb	r3, [r7, #3]
	GFX_DrowLine(x, y, x, y+h-1, color);
 8001012:	68ba      	ldr	r2, [r7, #8]
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	4413      	add	r3, r2
 8001018:	1e5a      	subs	r2, r3, #1
 800101a:	78fb      	ldrb	r3, [r7, #3]
 800101c:	9300      	str	r3, [sp, #0]
 800101e:	4613      	mov	r3, r2
 8001020:	68fa      	ldr	r2, [r7, #12]
 8001022:	68b9      	ldr	r1, [r7, #8]
 8001024:	68f8      	ldr	r0, [r7, #12]
 8001026:	f7ff fd8f 	bl	8000b48 <GFX_DrowLine>
}
 800102a:	bf00      	nop
 800102c:	3710      	adds	r7, #16
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}

08001032 <GFX_DrowFastHLine>:

void GFX_DrowFastHLine(int x, int y, int w, uint8_t color)
{
 8001032:	b580      	push	{r7, lr}
 8001034:	b086      	sub	sp, #24
 8001036:	af02      	add	r7, sp, #8
 8001038:	60f8      	str	r0, [r7, #12]
 800103a:	60b9      	str	r1, [r7, #8]
 800103c:	607a      	str	r2, [r7, #4]
 800103e:	70fb      	strb	r3, [r7, #3]
	GFX_DrowLine(x, y, x+w-1 ,y , color);
 8001040:	68fa      	ldr	r2, [r7, #12]
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	4413      	add	r3, r2
 8001046:	1e5a      	subs	r2, r3, #1
 8001048:	78fb      	ldrb	r3, [r7, #3]
 800104a:	9300      	str	r3, [sp, #0]
 800104c:	68bb      	ldr	r3, [r7, #8]
 800104e:	68b9      	ldr	r1, [r7, #8]
 8001050:	68f8      	ldr	r0, [r7, #12]
 8001052:	f7ff fd79 	bl	8000b48 <GFX_DrowLine>
}
 8001056:	bf00      	nop
 8001058:	3710      	adds	r7, #16
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
	...

08001060 <GFX_PutString>:

void GFX_PutString(int x, int y, char* str, uint8_t txt_size, uint8_t color, uint8_t bg)
{
 8001060:	b590      	push	{r4, r7, lr}
 8001062:	b087      	sub	sp, #28
 8001064:	af02      	add	r7, sp, #8
 8001066:	60f8      	str	r0, [r7, #12]
 8001068:	60b9      	str	r1, [r7, #8]
 800106a:	607a      	str	r2, [r7, #4]
 800106c:	70fb      	strb	r3, [r7, #3]
	cursor_x = x;
 800106e:	4a16      	ldr	r2, [pc, #88]	@ (80010c8 <GFX_PutString+0x68>)
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	6013      	str	r3, [r2, #0]
	cursor_y = y;
 8001074:	4a15      	ldr	r2, [pc, #84]	@ (80010cc <GFX_PutString+0x6c>)
 8001076:	68bb      	ldr	r3, [r7, #8]
 8001078:	6013      	str	r3, [r2, #0]

	while(*str)		//do kiedy jest cos w stringu
 800107a:	e01c      	b.n	80010b6 <GFX_PutString+0x56>
	{
		GFX_DrowChar(cursor_x,cursor_y, *str++, color, bg, txt_size);
 800107c:	4b12      	ldr	r3, [pc, #72]	@ (80010c8 <GFX_PutString+0x68>)
 800107e:	6818      	ldr	r0, [r3, #0]
 8001080:	4b12      	ldr	r3, [pc, #72]	@ (80010cc <GFX_PutString+0x6c>)
 8001082:	6819      	ldr	r1, [r3, #0]
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	1c5a      	adds	r2, r3, #1
 8001088:	607a      	str	r2, [r7, #4]
 800108a:	781a      	ldrb	r2, [r3, #0]
 800108c:	f897 4020 	ldrb.w	r4, [r7, #32]
 8001090:	78fb      	ldrb	r3, [r7, #3]
 8001092:	9301      	str	r3, [sp, #4]
 8001094:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001098:	9300      	str	r3, [sp, #0]
 800109a:	4623      	mov	r3, r4
 800109c:	f7ff fed0 	bl	8000e40 <GFX_DrowChar>
		cursor_x += txt_size*6; // tylko pod dany font trzeba potem to korygowa�
 80010a0:	78fa      	ldrb	r2, [r7, #3]
 80010a2:	4613      	mov	r3, r2
 80010a4:	005b      	lsls	r3, r3, #1
 80010a6:	4413      	add	r3, r2
 80010a8:	005b      	lsls	r3, r3, #1
 80010aa:	461a      	mov	r2, r3
 80010ac:	4b06      	ldr	r3, [pc, #24]	@ (80010c8 <GFX_PutString+0x68>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4413      	add	r3, r2
 80010b2:	4a05      	ldr	r2, [pc, #20]	@ (80010c8 <GFX_PutString+0x68>)
 80010b4:	6013      	str	r3, [r2, #0]
	while(*str)		//do kiedy jest cos w stringu
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	781b      	ldrb	r3, [r3, #0]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d1de      	bne.n	800107c <GFX_PutString+0x1c>
	}
}
 80010be:	bf00      	nop
 80010c0:	bf00      	nop
 80010c2:	3714      	adds	r7, #20
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd90      	pop	{r4, r7, pc}
 80010c8:	20000090 	.word	0x20000090
 80010cc:	20000094 	.word	0x20000094

080010d0 <GFX_PutInt>:

void GFX_PutInt (int x, int y, int data, uint8_t txt_size, uint8_t color, uint8_t bg)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b08a      	sub	sp, #40	@ 0x28
 80010d4:	af02      	add	r7, sp, #8
 80010d6:	60f8      	str	r0, [r7, #12]
 80010d8:	60b9      	str	r1, [r7, #8]
 80010da:	607a      	str	r2, [r7, #4]
 80010dc:	70fb      	strb	r3, [r7, #3]
	char buf[16];
	GFX_PutString(x, y, itoa(data, buf,10), txt_size, color, bg);
 80010de:	f107 0310 	add.w	r3, r7, #16
 80010e2:	220a      	movs	r2, #10
 80010e4:	4619      	mov	r1, r3
 80010e6:	6878      	ldr	r0, [r7, #4]
 80010e8:	f000 f88c 	bl	8001204 <itoa>
 80010ec:	4601      	mov	r1, r0
 80010ee:	78fa      	ldrb	r2, [r7, #3]
 80010f0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80010f4:	9301      	str	r3, [sp, #4]
 80010f6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80010fa:	9300      	str	r3, [sp, #0]
 80010fc:	4613      	mov	r3, r2
 80010fe:	460a      	mov	r2, r1
 8001100:	68b9      	ldr	r1, [r7, #8]
 8001102:	68f8      	ldr	r0, [r7, #12]
 8001104:	f7ff ffac 	bl	8001060 <GFX_PutString>
	//GFX_PutString(x, y, dtoa((double)data,1,1,1,1,buf), txt_size, color, bg);
	//itoa(data,buf);
	//GFX_PutString(x, y, buf , txt_size, color, bg);
}
 8001108:	bf00      	nop
 800110a:	3720      	adds	r7, #32
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}

08001110 <GFX_DrowRoundRect>:

void GFX_DrowRoundRect(int x, int y, int w, int h, uint8_t r, uint8_t color)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b086      	sub	sp, #24
 8001114:	af02      	add	r7, sp, #8
 8001116:	60f8      	str	r0, [r7, #12]
 8001118:	60b9      	str	r1, [r7, #8]
 800111a:	607a      	str	r2, [r7, #4]
 800111c:	603b      	str	r3, [r7, #0]
	// r - to jest wielkosc zaokraglonego naro�nika
	GFX_DrowFastHLine(x+r	,y		,w-2*r	,color );
 800111e:	7e3a      	ldrb	r2, [r7, #24]
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	18d0      	adds	r0, r2, r3
 8001124:	7e3b      	ldrb	r3, [r7, #24]
 8001126:	005b      	lsls	r3, r3, #1
 8001128:	687a      	ldr	r2, [r7, #4]
 800112a:	1ad2      	subs	r2, r2, r3
 800112c:	7f3b      	ldrb	r3, [r7, #28]
 800112e:	68b9      	ldr	r1, [r7, #8]
 8001130:	f7ff ff7f 	bl	8001032 <GFX_DrowFastHLine>
	GFX_DrowFastHLine(x+r	,y+h-1	,w-2*r	,color );
 8001134:	7e3a      	ldrb	r2, [r7, #24]
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	18d0      	adds	r0, r2, r3
 800113a:	68ba      	ldr	r2, [r7, #8]
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	4413      	add	r3, r2
 8001140:	1e59      	subs	r1, r3, #1
 8001142:	7e3b      	ldrb	r3, [r7, #24]
 8001144:	005b      	lsls	r3, r3, #1
 8001146:	687a      	ldr	r2, [r7, #4]
 8001148:	1ad2      	subs	r2, r2, r3
 800114a:	7f3b      	ldrb	r3, [r7, #28]
 800114c:	f7ff ff71 	bl	8001032 <GFX_DrowFastHLine>
	GFX_DrowFastVLine(x		,y+r	,h-2*r	,color );
 8001150:	7e3a      	ldrb	r2, [r7, #24]
 8001152:	68bb      	ldr	r3, [r7, #8]
 8001154:	18d1      	adds	r1, r2, r3
 8001156:	7e3b      	ldrb	r3, [r7, #24]
 8001158:	005b      	lsls	r3, r3, #1
 800115a:	683a      	ldr	r2, [r7, #0]
 800115c:	1ad2      	subs	r2, r2, r3
 800115e:	7f3b      	ldrb	r3, [r7, #28]
 8001160:	68f8      	ldr	r0, [r7, #12]
 8001162:	f7ff ff4f 	bl	8001004 <GFX_DrowFastVLine>
	GFX_DrowFastVLine(x+w-1	,y+r	,h-2*r	,color );
 8001166:	68fa      	ldr	r2, [r7, #12]
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	4413      	add	r3, r2
 800116c:	1e58      	subs	r0, r3, #1
 800116e:	7e3a      	ldrb	r2, [r7, #24]
 8001170:	68bb      	ldr	r3, [r7, #8]
 8001172:	18d1      	adds	r1, r2, r3
 8001174:	7e3b      	ldrb	r3, [r7, #24]
 8001176:	005b      	lsls	r3, r3, #1
 8001178:	683a      	ldr	r2, [r7, #0]
 800117a:	1ad2      	subs	r2, r2, r3
 800117c:	7f3b      	ldrb	r3, [r7, #28]
 800117e:	f7ff ff41 	bl	8001004 <GFX_DrowFastVLine>

	GFX_DrowCircleHelper(x+r	,y+r	,r	,1	,color);
 8001182:	7e3a      	ldrb	r2, [r7, #24]
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	18d0      	adds	r0, r2, r3
 8001188:	7e3a      	ldrb	r2, [r7, #24]
 800118a:	68bb      	ldr	r3, [r7, #8]
 800118c:	18d1      	adds	r1, r2, r3
 800118e:	7e3a      	ldrb	r2, [r7, #24]
 8001190:	7f3b      	ldrb	r3, [r7, #28]
 8001192:	9300      	str	r3, [sp, #0]
 8001194:	2301      	movs	r3, #1
 8001196:	f7ff fd64 	bl	8000c62 <GFX_DrowCircleHelper>
	GFX_DrowCircleHelper(x+w-r-1,y+r	,r	,2	,color);
 800119a:	68fa      	ldr	r2, [r7, #12]
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	441a      	add	r2, r3
 80011a0:	7e3b      	ldrb	r3, [r7, #24]
 80011a2:	1ad3      	subs	r3, r2, r3
 80011a4:	1e58      	subs	r0, r3, #1
 80011a6:	7e3a      	ldrb	r2, [r7, #24]
 80011a8:	68bb      	ldr	r3, [r7, #8]
 80011aa:	18d1      	adds	r1, r2, r3
 80011ac:	7e3a      	ldrb	r2, [r7, #24]
 80011ae:	7f3b      	ldrb	r3, [r7, #28]
 80011b0:	9300      	str	r3, [sp, #0]
 80011b2:	2302      	movs	r3, #2
 80011b4:	f7ff fd55 	bl	8000c62 <GFX_DrowCircleHelper>
	GFX_DrowCircleHelper(x+w-r-1,y+h-r-1,r	,4	,color);
 80011b8:	68fa      	ldr	r2, [r7, #12]
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	441a      	add	r2, r3
 80011be:	7e3b      	ldrb	r3, [r7, #24]
 80011c0:	1ad3      	subs	r3, r2, r3
 80011c2:	1e58      	subs	r0, r3, #1
 80011c4:	68ba      	ldr	r2, [r7, #8]
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	441a      	add	r2, r3
 80011ca:	7e3b      	ldrb	r3, [r7, #24]
 80011cc:	1ad3      	subs	r3, r2, r3
 80011ce:	1e59      	subs	r1, r3, #1
 80011d0:	7e3a      	ldrb	r2, [r7, #24]
 80011d2:	7f3b      	ldrb	r3, [r7, #28]
 80011d4:	9300      	str	r3, [sp, #0]
 80011d6:	2304      	movs	r3, #4
 80011d8:	f7ff fd43 	bl	8000c62 <GFX_DrowCircleHelper>
	GFX_DrowCircleHelper(x+r	,y+h-r-1,r	,8	,color);
 80011dc:	7e3a      	ldrb	r2, [r7, #24]
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	18d0      	adds	r0, r2, r3
 80011e2:	68ba      	ldr	r2, [r7, #8]
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	441a      	add	r2, r3
 80011e8:	7e3b      	ldrb	r3, [r7, #24]
 80011ea:	1ad3      	subs	r3, r2, r3
 80011ec:	1e59      	subs	r1, r3, #1
 80011ee:	7e3a      	ldrb	r2, [r7, #24]
 80011f0:	7f3b      	ldrb	r3, [r7, #28]
 80011f2:	9300      	str	r3, [sp, #0]
 80011f4:	2308      	movs	r3, #8
 80011f6:	f7ff fd34 	bl	8000c62 <GFX_DrowCircleHelper>
}
 80011fa:	bf00      	nop
 80011fc:	3710      	adds	r7, #16
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
	...

08001204 <itoa>:
* \param [in] base the base of conversion
* \return pointer to \em buffer
*//*-------------------------------------------------------------------------*/

char* itoa(int value, char* buffer, int base)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b088      	sub	sp, #32
 8001208:	af00      	add	r7, sp, #0
 800120a:	60f8      	str	r0, [r7, #12]
 800120c:	60b9      	str	r1, [r7, #8]
 800120e:	607a      	str	r2, [r7, #4]
	static const char digits[]="0123456789abcdef";

	char* buffer_copy=buffer;
 8001210:	68bb      	ldr	r3, [r7, #8]
 8001212:	61bb      	str	r3, [r7, #24]
	int32_t sign=0;
 8001214:	2300      	movs	r3, #0
 8001216:	61fb      	str	r3, [r7, #28]
	int32_t quot,rem;

	if ((base>=2)&&(base<=16))				// is the base valid?
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	2b01      	cmp	r3, #1
 800121c:	dd36      	ble.n	800128c <itoa+0x88>
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	2b10      	cmp	r3, #16
 8001222:	dc33      	bgt.n	800128c <itoa+0x88>
	{
		if (base == 10 && (sign = value) < 0)// negative value and base == 10? store the copy (sign)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	2b0a      	cmp	r3, #10
 8001228:	d107      	bne.n	800123a <itoa+0x36>
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	61fb      	str	r3, [r7, #28]
 800122e:	69fb      	ldr	r3, [r7, #28]
 8001230:	2b00      	cmp	r3, #0
 8001232:	da02      	bge.n	800123a <itoa+0x36>
			value = -value;					// make it positive
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	425b      	negs	r3, r3
 8001238:	60fb      	str	r3, [r7, #12]

		do
		{
			quot=value/base;				// calculate quotient and remainder
 800123a:	68fa      	ldr	r2, [r7, #12]
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001242:	617b      	str	r3, [r7, #20]
			rem=value%base;
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	687a      	ldr	r2, [r7, #4]
 8001248:	fb93 f2f2 	sdiv	r2, r3, r2
 800124c:	6879      	ldr	r1, [r7, #4]
 800124e:	fb01 f202 	mul.w	r2, r1, r2
 8001252:	1a9b      	subs	r3, r3, r2
 8001254:	613b      	str	r3, [r7, #16]
			*buffer++ = digits[rem];		// append the remainder to the string
 8001256:	68bb      	ldr	r3, [r7, #8]
 8001258:	1c5a      	adds	r2, r3, #1
 800125a:	60ba      	str	r2, [r7, #8]
 800125c:	490f      	ldr	r1, [pc, #60]	@ (800129c <itoa+0x98>)
 800125e:	693a      	ldr	r2, [r7, #16]
 8001260:	440a      	add	r2, r1
 8001262:	7812      	ldrb	r2, [r2, #0]
 8001264:	701a      	strb	r2, [r3, #0]
		} while ((value=quot));				// loop while there is something to convert
 8001266:	697b      	ldr	r3, [r7, #20]
 8001268:	60fb      	str	r3, [r7, #12]
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d1e4      	bne.n	800123a <itoa+0x36>

		if (sign<0)							// was the value negative?
 8001270:	69fb      	ldr	r3, [r7, #28]
 8001272:	2b00      	cmp	r3, #0
 8001274:	da04      	bge.n	8001280 <itoa+0x7c>
			*buffer++='-';					// append the sign
 8001276:	68bb      	ldr	r3, [r7, #8]
 8001278:	1c5a      	adds	r2, r3, #1
 800127a:	60ba      	str	r2, [r7, #8]
 800127c:	222d      	movs	r2, #45	@ 0x2d
 800127e:	701a      	strb	r2, [r3, #0]

		__reverse(buffer_copy,buffer-1);		// reverse the string
 8001280:	68bb      	ldr	r3, [r7, #8]
 8001282:	3b01      	subs	r3, #1
 8001284:	4619      	mov	r1, r3
 8001286:	69b8      	ldr	r0, [r7, #24]
 8001288:	f000 f80a 	bl	80012a0 <__reverse>
	}

	*buffer='\0';
 800128c:	68bb      	ldr	r3, [r7, #8]
 800128e:	2200      	movs	r2, #0
 8001290:	701a      	strb	r2, [r3, #0]
	return buffer_copy;
 8001292:	69bb      	ldr	r3, [r7, #24]
}
 8001294:	4618      	mov	r0, r3
 8001296:	3720      	adds	r7, #32
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	080097c4 	.word	0x080097c4

080012a0 <__reverse>:
* \param [in,out] begin pointer to the beginning of the string
* \param [in,out] end pointer to the end of the string
*//*-------------------------------------------------------------------------*/

static void __reverse(char* begin,char* end)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b085      	sub	sp, #20
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
 80012a8:	6039      	str	r1, [r7, #0]
	char temp;

	while (end>begin)
 80012aa:	e00d      	b.n	80012c8 <__reverse+0x28>
	{
		temp=*end;
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	73fb      	strb	r3, [r7, #15]
		*end--=*begin;
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	1e5a      	subs	r2, r3, #1
 80012b6:	603a      	str	r2, [r7, #0]
 80012b8:	687a      	ldr	r2, [r7, #4]
 80012ba:	7812      	ldrb	r2, [r2, #0]
 80012bc:	701a      	strb	r2, [r3, #0]
		*begin++=temp;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	1c5a      	adds	r2, r3, #1
 80012c2:	607a      	str	r2, [r7, #4]
 80012c4:	7bfa      	ldrb	r2, [r7, #15]
 80012c6:	701a      	strb	r2, [r3, #0]
	while (end>begin)
 80012c8:	683a      	ldr	r2, [r7, #0]
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	429a      	cmp	r2, r3
 80012ce:	d8ed      	bhi.n	80012ac <__reverse+0xc>
	}
}
 80012d0:	bf00      	nop
 80012d2:	bf00      	nop
 80012d4:	3714      	adds	r7, #20
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
	...

080012e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012e4:	f002 fe67 	bl	8003fb6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012e8:	f000 f834 	bl	8001354 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012ec:	f000 f936 	bl	800155c <MX_GPIO_Init>
  MX_ADC1_Init();
 80012f0:	f000 f892 	bl	8001418 <MX_ADC1_Init>
  MX_SPI1_Init();
 80012f4:	f000 f8f4 	bl	80014e0 <MX_SPI1_Init>

//  // Konfiguracja ADC z DMA
//  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
//  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)value, 2);

  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 80012f8:	217f      	movs	r1, #127	@ 0x7f
 80012fa:	4813      	ldr	r0, [pc, #76]	@ (8001348 <main+0x68>)
 80012fc:	f003 ff78 	bl	80051f0 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start(&hadc1);
 8001300:	4811      	ldr	r0, [pc, #68]	@ (8001348 <main+0x68>)
 8001302:	f003 fa13 	bl	800472c <HAL_ADC_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  ssd1327_SpiInit(&hspi1);
 8001306:	4811      	ldr	r0, [pc, #68]	@ (800134c <main+0x6c>)
 8001308:	f002 fb44 	bl	8003994 <ssd1327_SpiInit>
  ssd1327_CLR();
 800130c:	f002 fbfc 	bl	8003b08 <ssd1327_CLR>
  ssd1327_display();
 8001310:	f002 fbc2 	bl	8003a98 <ssd1327_display>

  start_game();
 8001314:	f001 ff56 	bl	80031c4 <start_game>
  add_enemy();
 8001318:	f001 ffec 	bl	80032f4 <add_enemy>

  while (1)
  {
		switch (state)
 800131c:	4b0c      	ldr	r3, [pc, #48]	@ (8001350 <main+0x70>)
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	2b02      	cmp	r3, #2
 8001322:	d00c      	beq.n	800133e <main+0x5e>
 8001324:	2b02      	cmp	r3, #2
 8001326:	dcf9      	bgt.n	800131c <main+0x3c>
 8001328:	2b00      	cmp	r3, #0
 800132a:	d002      	beq.n	8001332 <main+0x52>
 800132c:	2b01      	cmp	r3, #1
 800132e:	d003      	beq.n	8001338 <main+0x58>
 8001330:	e7f4      	b.n	800131c <main+0x3c>
		{
		case st_menu:
			run_menu(); break;
 8001332:	f001 fef5 	bl	8003120 <run_menu>
 8001336:	e005      	b.n	8001344 <main+0x64>
		case st_playing:
			run_game(); break;
 8001338:	f001 fee0 	bl	80030fc <run_game>
 800133c:	e002      	b.n	8001344 <main+0x64>
		case st_dead:
			run_dead();	break;
 800133e:	f000 fb2b 	bl	8001998 <run_dead>
 8001342:	bf00      	nop
		switch (state)
 8001344:	e7ea      	b.n	800131c <main+0x3c>
 8001346:	bf00      	nop
 8001348:	20000098 	.word	0x20000098
 800134c:	200000fc 	.word	0x200000fc
 8001350:	20001a04 	.word	0x20001a04

08001354 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b096      	sub	sp, #88	@ 0x58
 8001358:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800135a:	f107 0314 	add.w	r3, r7, #20
 800135e:	2244      	movs	r2, #68	@ 0x44
 8001360:	2100      	movs	r1, #0
 8001362:	4618      	mov	r0, r3
 8001364:	f006 f849 	bl	80073fa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001368:	463b      	mov	r3, r7
 800136a:	2200      	movs	r2, #0
 800136c:	601a      	str	r2, [r3, #0]
 800136e:	605a      	str	r2, [r3, #4]
 8001370:	609a      	str	r2, [r3, #8]
 8001372:	60da      	str	r2, [r3, #12]
 8001374:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001376:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800137a:	f004 fa37 	bl	80057ec <HAL_PWREx_ControlVoltageScaling>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d001      	beq.n	8001388 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001384:	f002 fac4 	bl	8003910 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001388:	f004 fa12 	bl	80057b0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800138c:	4b21      	ldr	r3, [pc, #132]	@ (8001414 <SystemClock_Config+0xc0>)
 800138e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001392:	4a20      	ldr	r2, [pc, #128]	@ (8001414 <SystemClock_Config+0xc0>)
 8001394:	f023 0318 	bic.w	r3, r3, #24
 8001398:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 800139c:	2314      	movs	r3, #20
 800139e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80013a0:	2301      	movs	r3, #1
 80013a2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80013a4:	2301      	movs	r3, #1
 80013a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80013a8:	2300      	movs	r3, #0
 80013aa:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80013ac:	2360      	movs	r3, #96	@ 0x60
 80013ae:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013b0:	2302      	movs	r3, #2
 80013b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80013b4:	2301      	movs	r3, #1
 80013b6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80013b8:	2301      	movs	r3, #1
 80013ba:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80013bc:	2328      	movs	r3, #40	@ 0x28
 80013be:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80013c0:	2307      	movs	r3, #7
 80013c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80013c4:	2302      	movs	r3, #2
 80013c6:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80013c8:	2302      	movs	r3, #2
 80013ca:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013cc:	f107 0314 	add.w	r3, r7, #20
 80013d0:	4618      	mov	r0, r3
 80013d2:	f004 fa61 	bl	8005898 <HAL_RCC_OscConfig>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d001      	beq.n	80013e0 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80013dc:	f002 fa98 	bl	8003910 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013e0:	230f      	movs	r3, #15
 80013e2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013e4:	2303      	movs	r3, #3
 80013e6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013e8:	2300      	movs	r3, #0
 80013ea:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013ec:	2300      	movs	r3, #0
 80013ee:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013f0:	2300      	movs	r3, #0
 80013f2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80013f4:	463b      	mov	r3, r7
 80013f6:	2104      	movs	r1, #4
 80013f8:	4618      	mov	r0, r3
 80013fa:	f004 fe61 	bl	80060c0 <HAL_RCC_ClockConfig>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d001      	beq.n	8001408 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001404:	f002 fa84 	bl	8003910 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001408:	f005 fa3c 	bl	8006884 <HAL_RCCEx_EnableMSIPLLMode>
}
 800140c:	bf00      	nop
 800140e:	3758      	adds	r7, #88	@ 0x58
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	40021000 	.word	0x40021000

08001418 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b086      	sub	sp, #24
 800141c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800141e:	463b      	mov	r3, r7
 8001420:	2200      	movs	r2, #0
 8001422:	601a      	str	r2, [r3, #0]
 8001424:	605a      	str	r2, [r3, #4]
 8001426:	609a      	str	r2, [r3, #8]
 8001428:	60da      	str	r2, [r3, #12]
 800142a:	611a      	str	r2, [r3, #16]
 800142c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800142e:	4b29      	ldr	r3, [pc, #164]	@ (80014d4 <MX_ADC1_Init+0xbc>)
 8001430:	4a29      	ldr	r2, [pc, #164]	@ (80014d8 <MX_ADC1_Init+0xc0>)
 8001432:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001434:	4b27      	ldr	r3, [pc, #156]	@ (80014d4 <MX_ADC1_Init+0xbc>)
 8001436:	2200      	movs	r2, #0
 8001438:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800143a:	4b26      	ldr	r3, [pc, #152]	@ (80014d4 <MX_ADC1_Init+0xbc>)
 800143c:	2200      	movs	r2, #0
 800143e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001440:	4b24      	ldr	r3, [pc, #144]	@ (80014d4 <MX_ADC1_Init+0xbc>)
 8001442:	2200      	movs	r2, #0
 8001444:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001446:	4b23      	ldr	r3, [pc, #140]	@ (80014d4 <MX_ADC1_Init+0xbc>)
 8001448:	2200      	movs	r2, #0
 800144a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800144c:	4b21      	ldr	r3, [pc, #132]	@ (80014d4 <MX_ADC1_Init+0xbc>)
 800144e:	2204      	movs	r2, #4
 8001450:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001452:	4b20      	ldr	r3, [pc, #128]	@ (80014d4 <MX_ADC1_Init+0xbc>)
 8001454:	2200      	movs	r2, #0
 8001456:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001458:	4b1e      	ldr	r3, [pc, #120]	@ (80014d4 <MX_ADC1_Init+0xbc>)
 800145a:	2201      	movs	r2, #1
 800145c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800145e:	4b1d      	ldr	r3, [pc, #116]	@ (80014d4 <MX_ADC1_Init+0xbc>)
 8001460:	2201      	movs	r2, #1
 8001462:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001464:	4b1b      	ldr	r3, [pc, #108]	@ (80014d4 <MX_ADC1_Init+0xbc>)
 8001466:	2200      	movs	r2, #0
 8001468:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800146c:	4b19      	ldr	r3, [pc, #100]	@ (80014d4 <MX_ADC1_Init+0xbc>)
 800146e:	2200      	movs	r2, #0
 8001470:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001472:	4b18      	ldr	r3, [pc, #96]	@ (80014d4 <MX_ADC1_Init+0xbc>)
 8001474:	2200      	movs	r2, #0
 8001476:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001478:	4b16      	ldr	r3, [pc, #88]	@ (80014d4 <MX_ADC1_Init+0xbc>)
 800147a:	2200      	movs	r2, #0
 800147c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001480:	4b14      	ldr	r3, [pc, #80]	@ (80014d4 <MX_ADC1_Init+0xbc>)
 8001482:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001486:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001488:	4b12      	ldr	r3, [pc, #72]	@ (80014d4 <MX_ADC1_Init+0xbc>)
 800148a:	2200      	movs	r2, #0
 800148c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001490:	4810      	ldr	r0, [pc, #64]	@ (80014d4 <MX_ADC1_Init+0xbc>)
 8001492:	f003 f803 	bl	800449c <HAL_ADC_Init>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d001      	beq.n	80014a0 <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 800149c:	f002 fa38 	bl	8003910 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80014a0:	4b0e      	ldr	r3, [pc, #56]	@ (80014dc <MX_ADC1_Init+0xc4>)
 80014a2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80014a4:	2306      	movs	r3, #6
 80014a6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 80014a8:	2307      	movs	r3, #7
 80014aa:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80014ac:	237f      	movs	r3, #127	@ 0x7f
 80014ae:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80014b0:	2304      	movs	r3, #4
 80014b2:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80014b4:	2300      	movs	r3, #0
 80014b6:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014b8:	463b      	mov	r3, r7
 80014ba:	4619      	mov	r1, r3
 80014bc:	4805      	ldr	r0, [pc, #20]	@ (80014d4 <MX_ADC1_Init+0xbc>)
 80014be:	f003 f9a5 	bl	800480c <HAL_ADC_ConfigChannel>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d001      	beq.n	80014cc <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 80014c8:	f002 fa22 	bl	8003910 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80014cc:	bf00      	nop
 80014ce:	3718      	adds	r7, #24
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	20000098 	.word	0x20000098
 80014d8:	50040000 	.word	0x50040000
 80014dc:	14f00020 	.word	0x14f00020

080014e0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80014e4:	4b1b      	ldr	r3, [pc, #108]	@ (8001554 <MX_SPI1_Init+0x74>)
 80014e6:	4a1c      	ldr	r2, [pc, #112]	@ (8001558 <MX_SPI1_Init+0x78>)
 80014e8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80014ea:	4b1a      	ldr	r3, [pc, #104]	@ (8001554 <MX_SPI1_Init+0x74>)
 80014ec:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80014f0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80014f2:	4b18      	ldr	r3, [pc, #96]	@ (8001554 <MX_SPI1_Init+0x74>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80014f8:	4b16      	ldr	r3, [pc, #88]	@ (8001554 <MX_SPI1_Init+0x74>)
 80014fa:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80014fe:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001500:	4b14      	ldr	r3, [pc, #80]	@ (8001554 <MX_SPI1_Init+0x74>)
 8001502:	2200      	movs	r2, #0
 8001504:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001506:	4b13      	ldr	r3, [pc, #76]	@ (8001554 <MX_SPI1_Init+0x74>)
 8001508:	2200      	movs	r2, #0
 800150a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800150c:	4b11      	ldr	r3, [pc, #68]	@ (8001554 <MX_SPI1_Init+0x74>)
 800150e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001512:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001514:	4b0f      	ldr	r3, [pc, #60]	@ (8001554 <MX_SPI1_Init+0x74>)
 8001516:	2210      	movs	r2, #16
 8001518:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800151a:	4b0e      	ldr	r3, [pc, #56]	@ (8001554 <MX_SPI1_Init+0x74>)
 800151c:	2200      	movs	r2, #0
 800151e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001520:	4b0c      	ldr	r3, [pc, #48]	@ (8001554 <MX_SPI1_Init+0x74>)
 8001522:	2200      	movs	r2, #0
 8001524:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001526:	4b0b      	ldr	r3, [pc, #44]	@ (8001554 <MX_SPI1_Init+0x74>)
 8001528:	2200      	movs	r2, #0
 800152a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 800152c:	4b09      	ldr	r3, [pc, #36]	@ (8001554 <MX_SPI1_Init+0x74>)
 800152e:	2207      	movs	r2, #7
 8001530:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001532:	4b08      	ldr	r3, [pc, #32]	@ (8001554 <MX_SPI1_Init+0x74>)
 8001534:	2200      	movs	r2, #0
 8001536:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001538:	4b06      	ldr	r3, [pc, #24]	@ (8001554 <MX_SPI1_Init+0x74>)
 800153a:	2208      	movs	r2, #8
 800153c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800153e:	4805      	ldr	r0, [pc, #20]	@ (8001554 <MX_SPI1_Init+0x74>)
 8001540:	f005 faa2 	bl	8006a88 <HAL_SPI_Init>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800154a:	f002 f9e1 	bl	8003910 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800154e:	bf00      	nop
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	200000fc 	.word	0x200000fc
 8001558:	40013000 	.word	0x40013000

0800155c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b088      	sub	sp, #32
 8001560:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001562:	f107 030c 	add.w	r3, r7, #12
 8001566:	2200      	movs	r2, #0
 8001568:	601a      	str	r2, [r3, #0]
 800156a:	605a      	str	r2, [r3, #4]
 800156c:	609a      	str	r2, [r3, #8]
 800156e:	60da      	str	r2, [r3, #12]
 8001570:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001572:	4b30      	ldr	r3, [pc, #192]	@ (8001634 <MX_GPIO_Init+0xd8>)
 8001574:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001576:	4a2f      	ldr	r2, [pc, #188]	@ (8001634 <MX_GPIO_Init+0xd8>)
 8001578:	f043 0304 	orr.w	r3, r3, #4
 800157c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800157e:	4b2d      	ldr	r3, [pc, #180]	@ (8001634 <MX_GPIO_Init+0xd8>)
 8001580:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001582:	f003 0304 	and.w	r3, r3, #4
 8001586:	60bb      	str	r3, [r7, #8]
 8001588:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800158a:	4b2a      	ldr	r3, [pc, #168]	@ (8001634 <MX_GPIO_Init+0xd8>)
 800158c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800158e:	4a29      	ldr	r2, [pc, #164]	@ (8001634 <MX_GPIO_Init+0xd8>)
 8001590:	f043 0301 	orr.w	r3, r3, #1
 8001594:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001596:	4b27      	ldr	r3, [pc, #156]	@ (8001634 <MX_GPIO_Init+0xd8>)
 8001598:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800159a:	f003 0301 	and.w	r3, r3, #1
 800159e:	607b      	str	r3, [r7, #4]
 80015a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015a2:	4b24      	ldr	r3, [pc, #144]	@ (8001634 <MX_GPIO_Init+0xd8>)
 80015a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015a6:	4a23      	ldr	r2, [pc, #140]	@ (8001634 <MX_GPIO_Init+0xd8>)
 80015a8:	f043 0302 	orr.w	r3, r3, #2
 80015ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015ae:	4b21      	ldr	r3, [pc, #132]	@ (8001634 <MX_GPIO_Init+0xd8>)
 80015b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015b2:	f003 0302 	and.w	r3, r3, #2
 80015b6:	603b      	str	r3, [r7, #0]
 80015b8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_RESET);
 80015ba:	2200      	movs	r2, #0
 80015bc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80015c0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015c4:	f004 f8dc 	bl	8005780 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|CS_Pin|DC_Pin, GPIO_PIN_RESET);
 80015c8:	2200      	movs	r2, #0
 80015ca:	2138      	movs	r1, #56	@ 0x38
 80015cc:	481a      	ldr	r0, [pc, #104]	@ (8001638 <MX_GPIO_Init+0xdc>)
 80015ce:	f004 f8d7 	bl	8005780 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_BTN_1_Pin */
  GPIO_InitStruct.Pin = USER_BTN_1_Pin;
 80015d2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80015d6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015d8:	2300      	movs	r3, #0
 80015da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80015dc:	2302      	movs	r3, #2
 80015de:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(USER_BTN_1_GPIO_Port, &GPIO_InitStruct);
 80015e0:	f107 030c 	add.w	r3, r7, #12
 80015e4:	4619      	mov	r1, r3
 80015e6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015ea:	f003 ff47 	bl	800547c <HAL_GPIO_Init>

  /*Configure GPIO pin : RST_Pin */
  GPIO_InitStruct.Pin = RST_Pin;
 80015ee:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80015f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015f4:	2301      	movs	r3, #1
 80015f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f8:	2300      	movs	r3, #0
 80015fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015fc:	2300      	movs	r3, #0
 80015fe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 8001600:	f107 030c 	add.w	r3, r7, #12
 8001604:	4619      	mov	r1, r3
 8001606:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800160a:	f003 ff37 	bl	800547c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin CS_Pin DC_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|CS_Pin|DC_Pin;
 800160e:	2338      	movs	r3, #56	@ 0x38
 8001610:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001612:	2301      	movs	r3, #1
 8001614:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001616:	2300      	movs	r3, #0
 8001618:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800161a:	2300      	movs	r3, #0
 800161c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800161e:	f107 030c 	add.w	r3, r7, #12
 8001622:	4619      	mov	r1, r3
 8001624:	4804      	ldr	r0, [pc, #16]	@ (8001638 <MX_GPIO_Init+0xdc>)
 8001626:	f003 ff29 	bl	800547c <HAL_GPIO_Init>

}
 800162a:	bf00      	nop
 800162c:	3720      	adds	r7, #32
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	40021000 	.word	0x40021000
 8001638:	48000400 	.word	0x48000400

0800163c <add_background>:

/* USER CODE BEGIN 4 */

void add_background(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
	 * In addition, it sets the random parameters for its
	 * refreshment and a random position on the Y axis.
	 */
	uint8_t i;

	for(i = 0; i < num_background; i++)
 8001642:	2300      	movs	r3, #0
 8001644:	71fb      	strb	r3, [r7, #7]
 8001646:	e052      	b.n	80016ee <add_background+0xb2>
	{
		if(!background[i].active)
 8001648:	79fa      	ldrb	r2, [r7, #7]
 800164a:	492d      	ldr	r1, [pc, #180]	@ (8001700 <add_background+0xc4>)
 800164c:	4613      	mov	r3, r2
 800164e:	009b      	lsls	r3, r3, #2
 8001650:	4413      	add	r3, r2
 8001652:	009b      	lsls	r3, r3, #2
 8001654:	440b      	add	r3, r1
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	f083 0301 	eor.w	r3, r3, #1
 800165c:	b2db      	uxtb	r3, r3
 800165e:	2b00      	cmp	r3, #0
 8001660:	d042      	beq.n	80016e8 <add_background+0xac>
		{
			background[i].active 	= true;
 8001662:	79fa      	ldrb	r2, [r7, #7]
 8001664:	4926      	ldr	r1, [pc, #152]	@ (8001700 <add_background+0xc4>)
 8001666:	4613      	mov	r3, r2
 8001668:	009b      	lsls	r3, r3, #2
 800166a:	4413      	add	r3, r2
 800166c:	009b      	lsls	r3, r3, #2
 800166e:	440b      	add	r3, r1
 8001670:	2201      	movs	r2, #1
 8001672:	701a      	strb	r2, [r3, #0]
			background[i].x 		= 128;
 8001674:	79fa      	ldrb	r2, [r7, #7]
 8001676:	4922      	ldr	r1, [pc, #136]	@ (8001700 <add_background+0xc4>)
 8001678:	4613      	mov	r3, r2
 800167a:	009b      	lsls	r3, r3, #2
 800167c:	4413      	add	r3, r2
 800167e:	009b      	lsls	r3, r3, #2
 8001680:	440b      	add	r3, r1
 8001682:	3304      	adds	r3, #4
 8001684:	2280      	movs	r2, #128	@ 0x80
 8001686:	601a      	str	r2, [r3, #0]
			background[i].y			= (rand()%(screen_height-10)) +10;
 8001688:	f005 fd74 	bl	8007174 <rand>
 800168c:	4602      	mov	r2, r0
 800168e:	4b1d      	ldr	r3, [pc, #116]	@ (8001704 <add_background+0xc8>)
 8001690:	fb83 1302 	smull	r1, r3, r3, r2
 8001694:	1119      	asrs	r1, r3, #4
 8001696:	17d3      	asrs	r3, r2, #31
 8001698:	1acb      	subs	r3, r1, r3
 800169a:	2176      	movs	r1, #118	@ 0x76
 800169c:	fb01 f303 	mul.w	r3, r1, r3
 80016a0:	1ad3      	subs	r3, r2, r3
 80016a2:	79fa      	ldrb	r2, [r7, #7]
 80016a4:	f103 010a 	add.w	r1, r3, #10
 80016a8:	4815      	ldr	r0, [pc, #84]	@ (8001700 <add_background+0xc4>)
 80016aa:	4613      	mov	r3, r2
 80016ac:	009b      	lsls	r3, r3, #2
 80016ae:	4413      	add	r3, r2
 80016b0:	009b      	lsls	r3, r3, #2
 80016b2:	4403      	add	r3, r0
 80016b4:	3308      	adds	r3, #8
 80016b6:	6019      	str	r1, [r3, #0]
			background[i].update_delay = (rand()%6)+2; // def. (rand()%4)+2;
 80016b8:	f005 fd5c 	bl	8007174 <rand>
 80016bc:	4601      	mov	r1, r0
 80016be:	4b12      	ldr	r3, [pc, #72]	@ (8001708 <add_background+0xcc>)
 80016c0:	fb83 3201 	smull	r3, r2, r3, r1
 80016c4:	17cb      	asrs	r3, r1, #31
 80016c6:	1ad2      	subs	r2, r2, r3
 80016c8:	4613      	mov	r3, r2
 80016ca:	005b      	lsls	r3, r3, #1
 80016cc:	4413      	add	r3, r2
 80016ce:	005b      	lsls	r3, r3, #1
 80016d0:	1aca      	subs	r2, r1, r3
 80016d2:	79f9      	ldrb	r1, [r7, #7]
 80016d4:	3202      	adds	r2, #2
 80016d6:	480a      	ldr	r0, [pc, #40]	@ (8001700 <add_background+0xc4>)
 80016d8:	460b      	mov	r3, r1
 80016da:	009b      	lsls	r3, r3, #2
 80016dc:	440b      	add	r3, r1
 80016de:	009b      	lsls	r3, r3, #2
 80016e0:	4403      	add	r3, r0
 80016e2:	3310      	adds	r3, #16
 80016e4:	601a      	str	r2, [r3, #0]

			break;
 80016e6:	e006      	b.n	80016f6 <add_background+0xba>
	for(i = 0; i < num_background; i++)
 80016e8:	79fb      	ldrb	r3, [r7, #7]
 80016ea:	3301      	adds	r3, #1
 80016ec:	71fb      	strb	r3, [r7, #7]
 80016ee:	79fb      	ldrb	r3, [r7, #7]
 80016f0:	2bf9      	cmp	r3, #249	@ 0xf9
 80016f2:	d9a9      	bls.n	8001648 <add_background+0xc>
		}
	}
}
 80016f4:	bf00      	nop
 80016f6:	bf00      	nop
 80016f8:	3708      	adds	r7, #8
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	2000060c 	.word	0x2000060c
 8001704:	22b63cbf 	.word	0x22b63cbf
 8001708:	2aaaaaab 	.word	0x2aaaaaab

0800170c <update_backgrand>:

void update_backgrand(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	af00      	add	r7, sp, #0
	 * Refreshes the background effect, stars.
	 * Moves elements and randomises when a new element have to be added.
	 */
	uint8_t i;

	for(i = 0; i < num_background; i++)
 8001712:	2300      	movs	r3, #0
 8001714:	71fb      	strb	r3, [r7, #7]
 8001716:	e06e      	b.n	80017f6 <update_backgrand+0xea>
	{
		if(background[i].active)
 8001718:	79fa      	ldrb	r2, [r7, #7]
 800171a:	4943      	ldr	r1, [pc, #268]	@ (8001828 <update_backgrand+0x11c>)
 800171c:	4613      	mov	r3, r2
 800171e:	009b      	lsls	r3, r3, #2
 8001720:	4413      	add	r3, r2
 8001722:	009b      	lsls	r3, r3, #2
 8001724:	440b      	add	r3, r1
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d061      	beq.n	80017f0 <update_backgrand+0xe4>
		{
			background[i].next_update -= 1;
 800172c:	79fa      	ldrb	r2, [r7, #7]
 800172e:	493e      	ldr	r1, [pc, #248]	@ (8001828 <update_backgrand+0x11c>)
 8001730:	4613      	mov	r3, r2
 8001732:	009b      	lsls	r3, r3, #2
 8001734:	4413      	add	r3, r2
 8001736:	009b      	lsls	r3, r3, #2
 8001738:	440b      	add	r3, r1
 800173a:	330c      	adds	r3, #12
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	79fa      	ldrb	r2, [r7, #7]
 8001740:	1e59      	subs	r1, r3, #1
 8001742:	4839      	ldr	r0, [pc, #228]	@ (8001828 <update_backgrand+0x11c>)
 8001744:	4613      	mov	r3, r2
 8001746:	009b      	lsls	r3, r3, #2
 8001748:	4413      	add	r3, r2
 800174a:	009b      	lsls	r3, r3, #2
 800174c:	4403      	add	r3, r0
 800174e:	330c      	adds	r3, #12
 8001750:	6019      	str	r1, [r3, #0]
			if(background[i].next_update <= 0)
 8001752:	79fa      	ldrb	r2, [r7, #7]
 8001754:	4934      	ldr	r1, [pc, #208]	@ (8001828 <update_backgrand+0x11c>)
 8001756:	4613      	mov	r3, r2
 8001758:	009b      	lsls	r3, r3, #2
 800175a:	4413      	add	r3, r2
 800175c:	009b      	lsls	r3, r3, #2
 800175e:	440b      	add	r3, r1
 8001760:	330c      	adds	r3, #12
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	2b00      	cmp	r3, #0
 8001766:	dc43      	bgt.n	80017f0 <update_backgrand+0xe4>
			{
				background[i].next_update = background[i].update_delay;
 8001768:	79f9      	ldrb	r1, [r7, #7]
 800176a:	79fa      	ldrb	r2, [r7, #7]
 800176c:	482e      	ldr	r0, [pc, #184]	@ (8001828 <update_backgrand+0x11c>)
 800176e:	460b      	mov	r3, r1
 8001770:	009b      	lsls	r3, r3, #2
 8001772:	440b      	add	r3, r1
 8001774:	009b      	lsls	r3, r3, #2
 8001776:	4403      	add	r3, r0
 8001778:	3310      	adds	r3, #16
 800177a:	6819      	ldr	r1, [r3, #0]
 800177c:	482a      	ldr	r0, [pc, #168]	@ (8001828 <update_backgrand+0x11c>)
 800177e:	4613      	mov	r3, r2
 8001780:	009b      	lsls	r3, r3, #2
 8001782:	4413      	add	r3, r2
 8001784:	009b      	lsls	r3, r3, #2
 8001786:	4403      	add	r3, r0
 8001788:	330c      	adds	r3, #12
 800178a:	6019      	str	r1, [r3, #0]
				if(background[i].active)
 800178c:	79fa      	ldrb	r2, [r7, #7]
 800178e:	4926      	ldr	r1, [pc, #152]	@ (8001828 <update_backgrand+0x11c>)
 8001790:	4613      	mov	r3, r2
 8001792:	009b      	lsls	r3, r3, #2
 8001794:	4413      	add	r3, r2
 8001796:	009b      	lsls	r3, r3, #2
 8001798:	440b      	add	r3, r1
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d027      	beq.n	80017f0 <update_backgrand+0xe4>
				{
					background[i].x -= 1;
 80017a0:	79fa      	ldrb	r2, [r7, #7]
 80017a2:	4921      	ldr	r1, [pc, #132]	@ (8001828 <update_backgrand+0x11c>)
 80017a4:	4613      	mov	r3, r2
 80017a6:	009b      	lsls	r3, r3, #2
 80017a8:	4413      	add	r3, r2
 80017aa:	009b      	lsls	r3, r3, #2
 80017ac:	440b      	add	r3, r1
 80017ae:	3304      	adds	r3, #4
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	79fa      	ldrb	r2, [r7, #7]
 80017b4:	1e59      	subs	r1, r3, #1
 80017b6:	481c      	ldr	r0, [pc, #112]	@ (8001828 <update_backgrand+0x11c>)
 80017b8:	4613      	mov	r3, r2
 80017ba:	009b      	lsls	r3, r3, #2
 80017bc:	4413      	add	r3, r2
 80017be:	009b      	lsls	r3, r3, #2
 80017c0:	4403      	add	r3, r0
 80017c2:	3304      	adds	r3, #4
 80017c4:	6019      	str	r1, [r3, #0]

					if(background[i].x <= -2)
 80017c6:	79fa      	ldrb	r2, [r7, #7]
 80017c8:	4917      	ldr	r1, [pc, #92]	@ (8001828 <update_backgrand+0x11c>)
 80017ca:	4613      	mov	r3, r2
 80017cc:	009b      	lsls	r3, r3, #2
 80017ce:	4413      	add	r3, r2
 80017d0:	009b      	lsls	r3, r3, #2
 80017d2:	440b      	add	r3, r1
 80017d4:	3304      	adds	r3, #4
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017dc:	da08      	bge.n	80017f0 <update_backgrand+0xe4>
						background[i].active = false;
 80017de:	79fa      	ldrb	r2, [r7, #7]
 80017e0:	4911      	ldr	r1, [pc, #68]	@ (8001828 <update_backgrand+0x11c>)
 80017e2:	4613      	mov	r3, r2
 80017e4:	009b      	lsls	r3, r3, #2
 80017e6:	4413      	add	r3, r2
 80017e8:	009b      	lsls	r3, r3, #2
 80017ea:	440b      	add	r3, r1
 80017ec:	2200      	movs	r2, #0
 80017ee:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < num_background; i++)
 80017f0:	79fb      	ldrb	r3, [r7, #7]
 80017f2:	3301      	adds	r3, #1
 80017f4:	71fb      	strb	r3, [r7, #7]
 80017f6:	79fb      	ldrb	r3, [r7, #7]
 80017f8:	2bf9      	cmp	r3, #249	@ 0xf9
 80017fa:	d98d      	bls.n	8001718 <update_backgrand+0xc>
				}
			}
		}
	}

	if ((rand()%100) < num_background_freq) 		//Frequency of background additions
 80017fc:	f005 fcba 	bl	8007174 <rand>
 8001800:	4602      	mov	r2, r0
 8001802:	4b0a      	ldr	r3, [pc, #40]	@ (800182c <update_backgrand+0x120>)
 8001804:	fb83 1302 	smull	r1, r3, r3, r2
 8001808:	1159      	asrs	r1, r3, #5
 800180a:	17d3      	asrs	r3, r2, #31
 800180c:	1acb      	subs	r3, r1, r3
 800180e:	2164      	movs	r1, #100	@ 0x64
 8001810:	fb01 f303 	mul.w	r3, r1, r3
 8001814:	1ad3      	subs	r3, r2, r3
 8001816:	2b0b      	cmp	r3, #11
 8001818:	dc01      	bgt.n	800181e <update_backgrand+0x112>
		add_background();
 800181a:	f7ff ff0f 	bl	800163c <add_background>

}
 800181e:	bf00      	nop
 8001820:	3708      	adds	r7, #8
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	2000060c 	.word	0x2000060c
 800182c:	51eb851f 	.word	0x51eb851f

08001830 <update_lvl>:

void update_lvl(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0
	 * their initial parameters and adjusts the level of play to its progress.
	 */
	static uint8_t i = 0;

	//Calculation of game progress
	if(i > 70)
 8001834:	4b55      	ldr	r3, [pc, #340]	@ (800198c <update_lvl+0x15c>)
 8001836:	781b      	ldrb	r3, [r3, #0]
 8001838:	2b46      	cmp	r3, #70	@ 0x46
 800183a:	d907      	bls.n	800184c <update_lvl+0x1c>
	{
		player.game_progres += 1;
 800183c:	4b54      	ldr	r3, [pc, #336]	@ (8001990 <update_lvl+0x160>)
 800183e:	699b      	ldr	r3, [r3, #24]
 8001840:	3301      	adds	r3, #1
 8001842:	4a53      	ldr	r2, [pc, #332]	@ (8001990 <update_lvl+0x160>)
 8001844:	6193      	str	r3, [r2, #24]
		i = 0;
 8001846:	4b51      	ldr	r3, [pc, #324]	@ (800198c <update_lvl+0x15c>)
 8001848:	2200      	movs	r2, #0
 800184a:	701a      	strb	r2, [r3, #0]
	}

	//If the boss is not active count the progress
	if(!boss.active) i++;
 800184c:	4b51      	ldr	r3, [pc, #324]	@ (8001994 <update_lvl+0x164>)
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	f083 0301 	eor.w	r3, r3, #1
 8001854:	b2db      	uxtb	r3, r3
 8001856:	2b00      	cmp	r3, #0
 8001858:	d005      	beq.n	8001866 <update_lvl+0x36>
 800185a:	4b4c      	ldr	r3, [pc, #304]	@ (800198c <update_lvl+0x15c>)
 800185c:	781b      	ldrb	r3, [r3, #0]
 800185e:	3301      	adds	r3, #1
 8001860:	b2da      	uxtb	r2, r3
 8001862:	4b4a      	ldr	r3, [pc, #296]	@ (800198c <update_lvl+0x15c>)
 8001864:	701a      	strb	r2, [r3, #0]

	//---- Moments of boss appearance -----
	if(player.game_progres == 29)
 8001866:	4b4a      	ldr	r3, [pc, #296]	@ (8001990 <update_lvl+0x160>)
 8001868:	699b      	ldr	r3, [r3, #24]
 800186a:	2b1d      	cmp	r3, #29
 800186c:	d10d      	bne.n	800188a <update_lvl+0x5a>
	{
		boss.active = true;
 800186e:	4b49      	ldr	r3, [pc, #292]	@ (8001994 <update_lvl+0x164>)
 8001870:	2201      	movs	r2, #1
 8001872:	701a      	strb	r2, [r3, #0]
		boss.lives = 3;
 8001874:	4b47      	ldr	r3, [pc, #284]	@ (8001994 <update_lvl+0x164>)
 8001876:	2203      	movs	r2, #3
 8001878:	615a      	str	r2, [r3, #20]
		boss.update_delay = 4;
 800187a:	4b46      	ldr	r3, [pc, #280]	@ (8001994 <update_lvl+0x164>)
 800187c:	2204      	movs	r2, #4
 800187e:	611a      	str	r2, [r3, #16]
		player.game_progres += 1;
 8001880:	4b43      	ldr	r3, [pc, #268]	@ (8001990 <update_lvl+0x160>)
 8001882:	699b      	ldr	r3, [r3, #24]
 8001884:	3301      	adds	r3, #1
 8001886:	4a42      	ldr	r2, [pc, #264]	@ (8001990 <update_lvl+0x160>)
 8001888:	6193      	str	r3, [r2, #24]

	}
	if(player.game_progres == 59)
 800188a:	4b41      	ldr	r3, [pc, #260]	@ (8001990 <update_lvl+0x160>)
 800188c:	699b      	ldr	r3, [r3, #24]
 800188e:	2b3b      	cmp	r3, #59	@ 0x3b
 8001890:	d10d      	bne.n	80018ae <update_lvl+0x7e>
	{
		boss.active = true;
 8001892:	4b40      	ldr	r3, [pc, #256]	@ (8001994 <update_lvl+0x164>)
 8001894:	2201      	movs	r2, #1
 8001896:	701a      	strb	r2, [r3, #0]
		boss.lives = 6;
 8001898:	4b3e      	ldr	r3, [pc, #248]	@ (8001994 <update_lvl+0x164>)
 800189a:	2206      	movs	r2, #6
 800189c:	615a      	str	r2, [r3, #20]
		boss.update_delay = 2;
 800189e:	4b3d      	ldr	r3, [pc, #244]	@ (8001994 <update_lvl+0x164>)
 80018a0:	2202      	movs	r2, #2
 80018a2:	611a      	str	r2, [r3, #16]
		player.game_progres += 1;
 80018a4:	4b3a      	ldr	r3, [pc, #232]	@ (8001990 <update_lvl+0x160>)
 80018a6:	699b      	ldr	r3, [r3, #24]
 80018a8:	3301      	adds	r3, #1
 80018aa:	4a39      	ldr	r2, [pc, #228]	@ (8001990 <update_lvl+0x160>)
 80018ac:	6193      	str	r3, [r2, #24]
	}
	//--------------------------------------

	//Next levels
	if(player.game_progres > 9 && player.game_progres < 10 )
 80018ae:	4b38      	ldr	r3, [pc, #224]	@ (8001990 <update_lvl+0x160>)
 80018b0:	699b      	ldr	r3, [r3, #24]
 80018b2:	2b09      	cmp	r3, #9
 80018b4:	dd06      	ble.n	80018c4 <update_lvl+0x94>
 80018b6:	4b36      	ldr	r3, [pc, #216]	@ (8001990 <update_lvl+0x160>)
 80018b8:	699b      	ldr	r3, [r3, #24]
 80018ba:	2b09      	cmp	r3, #9
 80018bc:	dc02      	bgt.n	80018c4 <update_lvl+0x94>
		player.level = 1;
 80018be:	4b34      	ldr	r3, [pc, #208]	@ (8001990 <update_lvl+0x160>)
 80018c0:	2201      	movs	r2, #1
 80018c2:	615a      	str	r2, [r3, #20]
	if(player.game_progres > 10 && player.game_progres < 19)
 80018c4:	4b32      	ldr	r3, [pc, #200]	@ (8001990 <update_lvl+0x160>)
 80018c6:	699b      	ldr	r3, [r3, #24]
 80018c8:	2b0a      	cmp	r3, #10
 80018ca:	dd06      	ble.n	80018da <update_lvl+0xaa>
 80018cc:	4b30      	ldr	r3, [pc, #192]	@ (8001990 <update_lvl+0x160>)
 80018ce:	699b      	ldr	r3, [r3, #24]
 80018d0:	2b12      	cmp	r3, #18
 80018d2:	dc02      	bgt.n	80018da <update_lvl+0xaa>
		player.level = 2;
 80018d4:	4b2e      	ldr	r3, [pc, #184]	@ (8001990 <update_lvl+0x160>)
 80018d6:	2202      	movs	r2, #2
 80018d8:	615a      	str	r2, [r3, #20]
	if(player.game_progres > 20 && player.game_progres < 29)
 80018da:	4b2d      	ldr	r3, [pc, #180]	@ (8001990 <update_lvl+0x160>)
 80018dc:	699b      	ldr	r3, [r3, #24]
 80018de:	2b14      	cmp	r3, #20
 80018e0:	dd06      	ble.n	80018f0 <update_lvl+0xc0>
 80018e2:	4b2b      	ldr	r3, [pc, #172]	@ (8001990 <update_lvl+0x160>)
 80018e4:	699b      	ldr	r3, [r3, #24]
 80018e6:	2b1c      	cmp	r3, #28
 80018e8:	dc02      	bgt.n	80018f0 <update_lvl+0xc0>
		player.level = 3;
 80018ea:	4b29      	ldr	r3, [pc, #164]	@ (8001990 <update_lvl+0x160>)
 80018ec:	2203      	movs	r2, #3
 80018ee:	615a      	str	r2, [r3, #20]
	if(player.game_progres > 30 && player.game_progres < 39)
 80018f0:	4b27      	ldr	r3, [pc, #156]	@ (8001990 <update_lvl+0x160>)
 80018f2:	699b      	ldr	r3, [r3, #24]
 80018f4:	2b1e      	cmp	r3, #30
 80018f6:	dd06      	ble.n	8001906 <update_lvl+0xd6>
 80018f8:	4b25      	ldr	r3, [pc, #148]	@ (8001990 <update_lvl+0x160>)
 80018fa:	699b      	ldr	r3, [r3, #24]
 80018fc:	2b26      	cmp	r3, #38	@ 0x26
 80018fe:	dc02      	bgt.n	8001906 <update_lvl+0xd6>
		player.level = 4;
 8001900:	4b23      	ldr	r3, [pc, #140]	@ (8001990 <update_lvl+0x160>)
 8001902:	2204      	movs	r2, #4
 8001904:	615a      	str	r2, [r3, #20]
	if(player.game_progres > 40 && player.game_progres < 49)
 8001906:	4b22      	ldr	r3, [pc, #136]	@ (8001990 <update_lvl+0x160>)
 8001908:	699b      	ldr	r3, [r3, #24]
 800190a:	2b28      	cmp	r3, #40	@ 0x28
 800190c:	dd06      	ble.n	800191c <update_lvl+0xec>
 800190e:	4b20      	ldr	r3, [pc, #128]	@ (8001990 <update_lvl+0x160>)
 8001910:	699b      	ldr	r3, [r3, #24]
 8001912:	2b30      	cmp	r3, #48	@ 0x30
 8001914:	dc02      	bgt.n	800191c <update_lvl+0xec>
		player.level = 5;
 8001916:	4b1e      	ldr	r3, [pc, #120]	@ (8001990 <update_lvl+0x160>)
 8001918:	2205      	movs	r2, #5
 800191a:	615a      	str	r2, [r3, #20]
	if(player.game_progres > 50 && player.game_progres < 59)
 800191c:	4b1c      	ldr	r3, [pc, #112]	@ (8001990 <update_lvl+0x160>)
 800191e:	699b      	ldr	r3, [r3, #24]
 8001920:	2b32      	cmp	r3, #50	@ 0x32
 8001922:	dd06      	ble.n	8001932 <update_lvl+0x102>
 8001924:	4b1a      	ldr	r3, [pc, #104]	@ (8001990 <update_lvl+0x160>)
 8001926:	699b      	ldr	r3, [r3, #24]
 8001928:	2b3a      	cmp	r3, #58	@ 0x3a
 800192a:	dc02      	bgt.n	8001932 <update_lvl+0x102>
		player.level = 6;
 800192c:	4b18      	ldr	r3, [pc, #96]	@ (8001990 <update_lvl+0x160>)
 800192e:	2206      	movs	r2, #6
 8001930:	615a      	str	r2, [r3, #20]
	if(player.game_progres > 60 && player.game_progres < 69)
 8001932:	4b17      	ldr	r3, [pc, #92]	@ (8001990 <update_lvl+0x160>)
 8001934:	699b      	ldr	r3, [r3, #24]
 8001936:	2b3c      	cmp	r3, #60	@ 0x3c
 8001938:	dd06      	ble.n	8001948 <update_lvl+0x118>
 800193a:	4b15      	ldr	r3, [pc, #84]	@ (8001990 <update_lvl+0x160>)
 800193c:	699b      	ldr	r3, [r3, #24]
 800193e:	2b44      	cmp	r3, #68	@ 0x44
 8001940:	dc02      	bgt.n	8001948 <update_lvl+0x118>
		player.level = 7;
 8001942:	4b13      	ldr	r3, [pc, #76]	@ (8001990 <update_lvl+0x160>)
 8001944:	2207      	movs	r2, #7
 8001946:	615a      	str	r2, [r3, #20]
	if(player.game_progres > 70 && player.game_progres < 79)
 8001948:	4b11      	ldr	r3, [pc, #68]	@ (8001990 <update_lvl+0x160>)
 800194a:	699b      	ldr	r3, [r3, #24]
 800194c:	2b46      	cmp	r3, #70	@ 0x46
 800194e:	dd06      	ble.n	800195e <update_lvl+0x12e>
 8001950:	4b0f      	ldr	r3, [pc, #60]	@ (8001990 <update_lvl+0x160>)
 8001952:	699b      	ldr	r3, [r3, #24]
 8001954:	2b4e      	cmp	r3, #78	@ 0x4e
 8001956:	dc02      	bgt.n	800195e <update_lvl+0x12e>
		player.level = 8;
 8001958:	4b0d      	ldr	r3, [pc, #52]	@ (8001990 <update_lvl+0x160>)
 800195a:	2208      	movs	r2, #8
 800195c:	615a      	str	r2, [r3, #20]
	if(player.game_progres > 80 && player.game_progres < 89)
 800195e:	4b0c      	ldr	r3, [pc, #48]	@ (8001990 <update_lvl+0x160>)
 8001960:	699b      	ldr	r3, [r3, #24]
 8001962:	2b50      	cmp	r3, #80	@ 0x50
 8001964:	dd06      	ble.n	8001974 <update_lvl+0x144>
 8001966:	4b0a      	ldr	r3, [pc, #40]	@ (8001990 <update_lvl+0x160>)
 8001968:	699b      	ldr	r3, [r3, #24]
 800196a:	2b58      	cmp	r3, #88	@ 0x58
 800196c:	dc02      	bgt.n	8001974 <update_lvl+0x144>
		player.level = 9;
 800196e:	4b08      	ldr	r3, [pc, #32]	@ (8001990 <update_lvl+0x160>)
 8001970:	2209      	movs	r2, #9
 8001972:	615a      	str	r2, [r3, #20]
	if(player.game_progres > 90)
 8001974:	4b06      	ldr	r3, [pc, #24]	@ (8001990 <update_lvl+0x160>)
 8001976:	699b      	ldr	r3, [r3, #24]
 8001978:	2b5a      	cmp	r3, #90	@ 0x5a
 800197a:	dd02      	ble.n	8001982 <update_lvl+0x152>
		player.level = 10;
 800197c:	4b04      	ldr	r3, [pc, #16]	@ (8001990 <update_lvl+0x160>)
 800197e:	220a      	movs	r2, #10
 8001980:	615a      	str	r2, [r3, #20]

}
 8001982:	bf00      	nop
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr
 800198c:	20001a06 	.word	0x20001a06
 8001990:	20000160 	.word	0x20000160
 8001994:	20001994 	.word	0x20001994

08001998 <run_dead>:

void run_dead(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b082      	sub	sp, #8
 800199c:	af02      	add	r7, sp, #8
	 */

	static int x = 0, dx = 1;


	x += dx;
 800199e:	4b22      	ldr	r3, [pc, #136]	@ (8001a28 <run_dead+0x90>)
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	4b22      	ldr	r3, [pc, #136]	@ (8001a2c <run_dead+0x94>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4413      	add	r3, r2
 80019a8:	4a1f      	ldr	r2, [pc, #124]	@ (8001a28 <run_dead+0x90>)
 80019aa:	6013      	str	r3, [r2, #0]
	if (x < 1 || x > 55) dx = -dx;
 80019ac:	4b1e      	ldr	r3, [pc, #120]	@ (8001a28 <run_dead+0x90>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	dd03      	ble.n	80019bc <run_dead+0x24>
 80019b4:	4b1c      	ldr	r3, [pc, #112]	@ (8001a28 <run_dead+0x90>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	2b37      	cmp	r3, #55	@ 0x37
 80019ba:	dd04      	ble.n	80019c6 <run_dead+0x2e>
 80019bc:	4b1b      	ldr	r3, [pc, #108]	@ (8001a2c <run_dead+0x94>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	425b      	negs	r3, r3
 80019c2:	4a1a      	ldr	r2, [pc, #104]	@ (8001a2c <run_dead+0x94>)
 80019c4:	6013      	str	r3, [r2, #0]
	ssd1327_CLR();
 80019c6:	f002 f89f 	bl	8003b08 <ssd1327_CLR>
	GFX_DrowBitMap_P(x,(screen_height/2) - 4,Defeated_map,67,16,1);
 80019ca:	4b17      	ldr	r3, [pc, #92]	@ (8001a28 <run_dead+0x90>)
 80019cc:	6818      	ldr	r0, [r3, #0]
 80019ce:	2301      	movs	r3, #1
 80019d0:	9301      	str	r3, [sp, #4]
 80019d2:	2310      	movs	r3, #16
 80019d4:	9300      	str	r3, [sp, #0]
 80019d6:	2343      	movs	r3, #67	@ 0x43
 80019d8:	4a15      	ldr	r2, [pc, #84]	@ (8001a30 <run_dead+0x98>)
 80019da:	213c      	movs	r1, #60	@ 0x3c
 80019dc:	f7ff f9e6 	bl	8000dac <GFX_DrowBitMap_P>
	GFX_DrowBitMap_P(35,(screen_height/2) + 24,Score_map,37,10,1);
 80019e0:	2301      	movs	r3, #1
 80019e2:	9301      	str	r3, [sp, #4]
 80019e4:	230a      	movs	r3, #10
 80019e6:	9300      	str	r3, [sp, #0]
 80019e8:	2325      	movs	r3, #37	@ 0x25
 80019ea:	4a12      	ldr	r2, [pc, #72]	@ (8001a34 <run_dead+0x9c>)
 80019ec:	2158      	movs	r1, #88	@ 0x58
 80019ee:	2023      	movs	r0, #35	@ 0x23
 80019f0:	f7ff f9dc 	bl	8000dac <GFX_DrowBitMap_P>
	GFX_PutInt(73,(screen_height/2) + 27,player.score,1,1,0);
 80019f4:	4b10      	ldr	r3, [pc, #64]	@ (8001a38 <run_dead+0xa0>)
 80019f6:	689a      	ldr	r2, [r3, #8]
 80019f8:	2300      	movs	r3, #0
 80019fa:	9301      	str	r3, [sp, #4]
 80019fc:	2301      	movs	r3, #1
 80019fe:	9300      	str	r3, [sp, #0]
 8001a00:	2301      	movs	r3, #1
 8001a02:	215b      	movs	r1, #91	@ 0x5b
 8001a04:	2049      	movs	r0, #73	@ 0x49
 8001a06:	f7ff fb63 	bl	80010d0 <GFX_PutInt>
	ssd1327_display();
 8001a0a:	f002 f845 	bl	8003a98 <ssd1327_display>

	if(button_pressed())
 8001a0e:	f001 ff4f 	bl	80038b0 <button_pressed>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d004      	beq.n	8001a22 <run_dead+0x8a>
	{
		play_dead_anim();
 8001a18:	f000 f812 	bl	8001a40 <play_dead_anim>
		state = st_menu;
 8001a1c:	4b07      	ldr	r3, [pc, #28]	@ (8001a3c <run_dead+0xa4>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	701a      	strb	r2, [r3, #0]
	}
}
 8001a22:	bf00      	nop
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	20001a08 	.word	0x20001a08
 8001a2c:	20000000 	.word	0x20000000
 8001a30:	080095c4 	.word	0x080095c4
 8001a34:	08009590 	.word	0x08009590
 8001a38:	20000160 	.word	0x20000160
 8001a3c:	20001a04 	.word	0x20001a04

08001a40 <play_dead_anim>:

void play_dead_anim(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b084      	sub	sp, #16
 8001a44:	af02      	add	r7, sp, #8
	/*
	 * Animation between separate screens. Gives the illusion of an old game.
	 */
	uint8_t i;

	for (i = 0; i < 10; ++i)
 8001a46:	2300      	movs	r3, #0
 8001a48:	71fb      	strb	r3, [r7, #7]
 8001a4a:	e012      	b.n	8001a72 <play_dead_anim+0x32>
	{
		ssd1327_CLR();
 8001a4c:	f002 f85c 	bl	8003b08 <ssd1327_CLR>
		GFX_FillRect(0,0,128,128,1);
 8001a50:	2301      	movs	r3, #1
 8001a52:	9300      	str	r3, [sp, #0]
 8001a54:	2380      	movs	r3, #128	@ 0x80
 8001a56:	2280      	movs	r2, #128	@ 0x80
 8001a58:	2100      	movs	r1, #0
 8001a5a:	2000      	movs	r0, #0
 8001a5c:	f7ff faae 	bl	8000fbc <GFX_FillRect>
		ssd1327_display();
 8001a60:	f002 f81a 	bl	8003a98 <ssd1327_display>

		ssd1327_CLR();
 8001a64:	f002 f850 	bl	8003b08 <ssd1327_CLR>
		ssd1327_display();
 8001a68:	f002 f816 	bl	8003a98 <ssd1327_display>
	for (i = 0; i < 10; ++i)
 8001a6c:	79fb      	ldrb	r3, [r7, #7]
 8001a6e:	3301      	adds	r3, #1
 8001a70:	71fb      	strb	r3, [r7, #7]
 8001a72:	79fb      	ldrb	r3, [r7, #7]
 8001a74:	2b09      	cmp	r3, #9
 8001a76:	d9e9      	bls.n	8001a4c <play_dead_anim+0xc>

	}
}
 8001a78:	bf00      	nop
 8001a7a:	bf00      	nop
 8001a7c:	3708      	adds	r7, #8
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	0000      	movs	r0, r0
 8001a84:	0000      	movs	r0, r0
	...

08001a88 <shot>:

void shot(void)
{
 8001a88:	b5b0      	push	{r4, r5, r7, lr}
 8001a8a:	b088      	sub	sp, #32
 8001a8c:	af00      	add	r7, sp, #0
	/*
	 * Activate the shot in the player's shot table and set the initial parameters.
	 */
	uint8_t i;

	bool is_any_enemies_active = false;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	77bb      	strb	r3, [r7, #30]

	int closest_enemy_number;
	double temp_distance;
	double smolest_distance = 500;
 8001a92:	f04f 0200 	mov.w	r2, #0
 8001a96:	4b82      	ldr	r3, [pc, #520]	@ (8001ca0 <shot+0x218>)
 8001a98:	e9c7 2304 	strd	r2, r3, [r7, #16]
	int random_tracking_number;

	for (i = 0; i < num_shots; ++i)
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	77fb      	strb	r3, [r7, #31]
 8001aa0:	e0f0      	b.n	8001c84 <shot+0x1fc>
	{
		if (!shots[i].active)
 8001aa2:	7ffa      	ldrb	r2, [r7, #31]
 8001aa4:	497f      	ldr	r1, [pc, #508]	@ (8001ca4 <shot+0x21c>)
 8001aa6:	4613      	mov	r3, r2
 8001aa8:	009b      	lsls	r3, r3, #2
 8001aaa:	4413      	add	r3, r2
 8001aac:	009b      	lsls	r3, r3, #2
 8001aae:	440b      	add	r3, r1
 8001ab0:	781b      	ldrb	r3, [r3, #0]
 8001ab2:	f083 0301 	eor.w	r3, r3, #1
 8001ab6:	b2db      	uxtb	r3, r3
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	f000 80e0 	beq.w	8001c7e <shot+0x1f6>
		{
			shots[i].active = true;
 8001abe:	7ffa      	ldrb	r2, [r7, #31]
 8001ac0:	4978      	ldr	r1, [pc, #480]	@ (8001ca4 <shot+0x21c>)
 8001ac2:	4613      	mov	r3, r2
 8001ac4:	009b      	lsls	r3, r3, #2
 8001ac6:	4413      	add	r3, r2
 8001ac8:	009b      	lsls	r3, r3, #2
 8001aca:	440b      	add	r3, r1
 8001acc:	2201      	movs	r2, #1
 8001ace:	701a      	strb	r2, [r3, #0]
			shots[i].x = 11;
 8001ad0:	7ffa      	ldrb	r2, [r7, #31]
 8001ad2:	4974      	ldr	r1, [pc, #464]	@ (8001ca4 <shot+0x21c>)
 8001ad4:	4613      	mov	r3, r2
 8001ad6:	009b      	lsls	r3, r3, #2
 8001ad8:	4413      	add	r3, r2
 8001ada:	009b      	lsls	r3, r3, #2
 8001adc:	440b      	add	r3, r1
 8001ade:	3304      	adds	r3, #4
 8001ae0:	220b      	movs	r2, #11
 8001ae2:	601a      	str	r2, [r3, #0]
			shots[i].y = player.y + 5;
 8001ae4:	4b70      	ldr	r3, [pc, #448]	@ (8001ca8 <shot+0x220>)
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	7ffa      	ldrb	r2, [r7, #31]
 8001aea:	1d59      	adds	r1, r3, #5
 8001aec:	486d      	ldr	r0, [pc, #436]	@ (8001ca4 <shot+0x21c>)
 8001aee:	4613      	mov	r3, r2
 8001af0:	009b      	lsls	r3, r3, #2
 8001af2:	4413      	add	r3, r2
 8001af4:	009b      	lsls	r3, r3, #2
 8001af6:	4403      	add	r3, r0
 8001af8:	3308      	adds	r3, #8
 8001afa:	6019      	str	r1, [r3, #0]

			//Setting the type of shot
			switch(player.shoot_type)
 8001afc:	4b6a      	ldr	r3, [pc, #424]	@ (8001ca8 <shot+0x220>)
 8001afe:	7f1b      	ldrb	r3, [r3, #28]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d002      	beq.n	8001b0a <shot+0x82>
 8001b04:	2b01      	cmp	r3, #1
 8001b06:	d00b      	beq.n	8001b20 <shot+0x98>
					// If you haven't found a target act like a normal shot
					shots[i].type = st_normal;
				}
				break;
			}
			return;
 8001b08:	e0c0      	b.n	8001c8c <shot+0x204>
				shots[i].type = st_normal;
 8001b0a:	7ffa      	ldrb	r2, [r7, #31]
 8001b0c:	4965      	ldr	r1, [pc, #404]	@ (8001ca4 <shot+0x21c>)
 8001b0e:	4613      	mov	r3, r2
 8001b10:	009b      	lsls	r3, r3, #2
 8001b12:	4413      	add	r3, r2
 8001b14:	009b      	lsls	r3, r3, #2
 8001b16:	440b      	add	r3, r1
 8001b18:	330c      	adds	r3, #12
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	701a      	strb	r2, [r3, #0]
				break;
 8001b1e:	e0ad      	b.n	8001c7c <shot+0x1f4>
				for(int j = 0; j < num_enemies; j++)
 8001b20:	2300      	movs	r3, #0
 8001b22:	60fb      	str	r3, [r7, #12]
 8001b24:	e06d      	b.n	8001c02 <shot+0x17a>
					if(enemies[j].active && !enemies[j].tracked_by_missile)
 8001b26:	4961      	ldr	r1, [pc, #388]	@ (8001cac <shot+0x224>)
 8001b28:	68fa      	ldr	r2, [r7, #12]
 8001b2a:	4613      	mov	r3, r2
 8001b2c:	00db      	lsls	r3, r3, #3
 8001b2e:	4413      	add	r3, r2
 8001b30:	009b      	lsls	r3, r3, #2
 8001b32:	440b      	add	r3, r1
 8001b34:	781b      	ldrb	r3, [r3, #0]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d060      	beq.n	8001bfc <shot+0x174>
 8001b3a:	495c      	ldr	r1, [pc, #368]	@ (8001cac <shot+0x224>)
 8001b3c:	68fa      	ldr	r2, [r7, #12]
 8001b3e:	4613      	mov	r3, r2
 8001b40:	00db      	lsls	r3, r3, #3
 8001b42:	4413      	add	r3, r2
 8001b44:	009b      	lsls	r3, r3, #2
 8001b46:	440b      	add	r3, r1
 8001b48:	331c      	adds	r3, #28
 8001b4a:	781b      	ldrb	r3, [r3, #0]
 8001b4c:	f083 0301 	eor.w	r3, r3, #1
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d052      	beq.n	8001bfc <shot+0x174>
						is_any_enemies_active = true;
 8001b56:	2301      	movs	r3, #1
 8001b58:	77bb      	strb	r3, [r7, #30]
						temp_distance = sqrt(pow(enemies[j].x - player.x, 2) + pow(enemies[j].y - player.y, 2));
 8001b5a:	4954      	ldr	r1, [pc, #336]	@ (8001cac <shot+0x224>)
 8001b5c:	68fa      	ldr	r2, [r7, #12]
 8001b5e:	4613      	mov	r3, r2
 8001b60:	00db      	lsls	r3, r3, #3
 8001b62:	4413      	add	r3, r2
 8001b64:	009b      	lsls	r3, r3, #2
 8001b66:	440b      	add	r3, r1
 8001b68:	3304      	adds	r3, #4
 8001b6a:	681a      	ldr	r2, [r3, #0]
 8001b6c:	4b4e      	ldr	r3, [pc, #312]	@ (8001ca8 <shot+0x220>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	4618      	mov	r0, r3
 8001b74:	f7fe fcce 	bl	8000514 <__aeabi_i2d>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	460b      	mov	r3, r1
 8001b7c:	ed9f 1b46 	vldr	d1, [pc, #280]	@ 8001c98 <shot+0x210>
 8001b80:	ec43 2b10 	vmov	d0, r2, r3
 8001b84:	f006 fad2 	bl	800812c <pow>
 8001b88:	ec55 4b10 	vmov	r4, r5, d0
 8001b8c:	4947      	ldr	r1, [pc, #284]	@ (8001cac <shot+0x224>)
 8001b8e:	68fa      	ldr	r2, [r7, #12]
 8001b90:	4613      	mov	r3, r2
 8001b92:	00db      	lsls	r3, r3, #3
 8001b94:	4413      	add	r3, r2
 8001b96:	009b      	lsls	r3, r3, #2
 8001b98:	440b      	add	r3, r1
 8001b9a:	3308      	adds	r3, #8
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	4b42      	ldr	r3, [pc, #264]	@ (8001ca8 <shot+0x220>)
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	1ad3      	subs	r3, r2, r3
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f7fe fcb5 	bl	8000514 <__aeabi_i2d>
 8001baa:	4602      	mov	r2, r0
 8001bac:	460b      	mov	r3, r1
 8001bae:	ed9f 1b3a 	vldr	d1, [pc, #232]	@ 8001c98 <shot+0x210>
 8001bb2:	ec43 2b10 	vmov	d0, r2, r3
 8001bb6:	f006 fab9 	bl	800812c <pow>
 8001bba:	ec53 2b10 	vmov	r2, r3, d0
 8001bbe:	4620      	mov	r0, r4
 8001bc0:	4629      	mov	r1, r5
 8001bc2:	f7fe fb5b 	bl	800027c <__adddf3>
 8001bc6:	4602      	mov	r2, r0
 8001bc8:	460b      	mov	r3, r1
 8001bca:	ec43 2b17 	vmov	d7, r2, r3
 8001bce:	eeb0 0a47 	vmov.f32	s0, s14
 8001bd2:	eef0 0a67 	vmov.f32	s1, s15
 8001bd6:	f006 fb19 	bl	800820c <sqrt>
 8001bda:	ed87 0b00 	vstr	d0, [r7]
						if (temp_distance < smolest_distance)
 8001bde:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001be2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001be6:	f7fe ff71 	bl	8000acc <__aeabi_dcmplt>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d005      	beq.n	8001bfc <shot+0x174>
							smolest_distance = temp_distance;
 8001bf0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001bf4:	e9c7 2304 	strd	r2, r3, [r7, #16]
							closest_enemy_number = j;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	61bb      	str	r3, [r7, #24]
				for(int j = 0; j < num_enemies; j++)
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	3301      	adds	r3, #1
 8001c00:	60fb      	str	r3, [r7, #12]
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	2b09      	cmp	r3, #9
 8001c06:	dd8e      	ble.n	8001b26 <shot+0x9e>
				if(is_any_enemies_active)
 8001c08:	7fbb      	ldrb	r3, [r7, #30]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d02b      	beq.n	8001c66 <shot+0x1de>
					random_tracking_number = rand();
 8001c0e:	f005 fab1 	bl	8007174 <rand>
 8001c12:	60b8      	str	r0, [r7, #8]
					enemies[closest_enemy_number].track_number = random_tracking_number;
 8001c14:	4925      	ldr	r1, [pc, #148]	@ (8001cac <shot+0x224>)
 8001c16:	69ba      	ldr	r2, [r7, #24]
 8001c18:	4613      	mov	r3, r2
 8001c1a:	00db      	lsls	r3, r3, #3
 8001c1c:	4413      	add	r3, r2
 8001c1e:	009b      	lsls	r3, r3, #2
 8001c20:	440b      	add	r3, r1
 8001c22:	3320      	adds	r3, #32
 8001c24:	68ba      	ldr	r2, [r7, #8]
 8001c26:	601a      	str	r2, [r3, #0]
					enemies[closest_enemy_number].tracked_by_missile = true;
 8001c28:	4920      	ldr	r1, [pc, #128]	@ (8001cac <shot+0x224>)
 8001c2a:	69ba      	ldr	r2, [r7, #24]
 8001c2c:	4613      	mov	r3, r2
 8001c2e:	00db      	lsls	r3, r3, #3
 8001c30:	4413      	add	r3, r2
 8001c32:	009b      	lsls	r3, r3, #2
 8001c34:	440b      	add	r3, r1
 8001c36:	331c      	adds	r3, #28
 8001c38:	2201      	movs	r2, #1
 8001c3a:	701a      	strb	r2, [r3, #0]
					shots[i].type = st_tracker;
 8001c3c:	7ffa      	ldrb	r2, [r7, #31]
 8001c3e:	4919      	ldr	r1, [pc, #100]	@ (8001ca4 <shot+0x21c>)
 8001c40:	4613      	mov	r3, r2
 8001c42:	009b      	lsls	r3, r3, #2
 8001c44:	4413      	add	r3, r2
 8001c46:	009b      	lsls	r3, r3, #2
 8001c48:	440b      	add	r3, r1
 8001c4a:	330c      	adds	r3, #12
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	701a      	strb	r2, [r3, #0]
					shots[i].track_number = random_tracking_number;
 8001c50:	7ffa      	ldrb	r2, [r7, #31]
 8001c52:	4914      	ldr	r1, [pc, #80]	@ (8001ca4 <shot+0x21c>)
 8001c54:	4613      	mov	r3, r2
 8001c56:	009b      	lsls	r3, r3, #2
 8001c58:	4413      	add	r3, r2
 8001c5a:	009b      	lsls	r3, r3, #2
 8001c5c:	440b      	add	r3, r1
 8001c5e:	3310      	adds	r3, #16
 8001c60:	68ba      	ldr	r2, [r7, #8]
 8001c62:	601a      	str	r2, [r3, #0]
				break;
 8001c64:	e009      	b.n	8001c7a <shot+0x1f2>
					shots[i].type = st_normal;
 8001c66:	7ffa      	ldrb	r2, [r7, #31]
 8001c68:	490e      	ldr	r1, [pc, #56]	@ (8001ca4 <shot+0x21c>)
 8001c6a:	4613      	mov	r3, r2
 8001c6c:	009b      	lsls	r3, r3, #2
 8001c6e:	4413      	add	r3, r2
 8001c70:	009b      	lsls	r3, r3, #2
 8001c72:	440b      	add	r3, r1
 8001c74:	330c      	adds	r3, #12
 8001c76:	2200      	movs	r2, #0
 8001c78:	701a      	strb	r2, [r3, #0]
				break;
 8001c7a:	bf00      	nop
			return;
 8001c7c:	e006      	b.n	8001c8c <shot+0x204>
	for (i = 0; i < num_shots; ++i)
 8001c7e:	7ffb      	ldrb	r3, [r7, #31]
 8001c80:	3301      	adds	r3, #1
 8001c82:	77fb      	strb	r3, [r7, #31]
 8001c84:	7ffb      	ldrb	r3, [r7, #31]
 8001c86:	2b22      	cmp	r3, #34	@ 0x22
 8001c88:	f67f af0b 	bls.w	8001aa2 <shot+0x1a>
		}
	}
}
 8001c8c:	3720      	adds	r7, #32
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bdb0      	pop	{r4, r5, r7, pc}
 8001c92:	bf00      	nop
 8001c94:	f3af 8000 	nop.w
 8001c98:	00000000 	.word	0x00000000
 8001c9c:	40000000 	.word	0x40000000
 8001ca0:	407f4000 	.word	0x407f4000
 8001ca4:	20000184 	.word	0x20000184
 8001ca8:	20000160 	.word	0x20000160
 8001cac:	200004a4 	.word	0x200004a4

08001cb0 <boss_shoot>:

void boss_shoot(void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b083      	sub	sp, #12
 8001cb4:	af00      	add	r7, sp, #0
	/*
	 * Handling boss shots.
	 */
	uint8_t i;

	for (i = 0; i < num_shots; ++i)
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	71fb      	strb	r3, [r7, #7]
 8001cba:	e030      	b.n	8001d1e <boss_shoot+0x6e>
	{
		if (!boss_shots[i].active)
 8001cbc:	79fa      	ldrb	r2, [r7, #7]
 8001cbe:	491c      	ldr	r1, [pc, #112]	@ (8001d30 <boss_shoot+0x80>)
 8001cc0:	4613      	mov	r3, r2
 8001cc2:	009b      	lsls	r3, r3, #2
 8001cc4:	4413      	add	r3, r2
 8001cc6:	009b      	lsls	r3, r3, #2
 8001cc8:	440b      	add	r3, r1
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	f083 0301 	eor.w	r3, r3, #1
 8001cd0:	b2db      	uxtb	r3, r3
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d020      	beq.n	8001d18 <boss_shoot+0x68>
		{
			boss_shots[i].active = true;
 8001cd6:	79fa      	ldrb	r2, [r7, #7]
 8001cd8:	4915      	ldr	r1, [pc, #84]	@ (8001d30 <boss_shoot+0x80>)
 8001cda:	4613      	mov	r3, r2
 8001cdc:	009b      	lsls	r3, r3, #2
 8001cde:	4413      	add	r3, r2
 8001ce0:	009b      	lsls	r3, r3, #2
 8001ce2:	440b      	add	r3, r1
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	701a      	strb	r2, [r3, #0]
			boss_shots[i].x = boss.x;
 8001ce8:	79fa      	ldrb	r2, [r7, #7]
 8001cea:	4b12      	ldr	r3, [pc, #72]	@ (8001d34 <boss_shoot+0x84>)
 8001cec:	6859      	ldr	r1, [r3, #4]
 8001cee:	4810      	ldr	r0, [pc, #64]	@ (8001d30 <boss_shoot+0x80>)
 8001cf0:	4613      	mov	r3, r2
 8001cf2:	009b      	lsls	r3, r3, #2
 8001cf4:	4413      	add	r3, r2
 8001cf6:	009b      	lsls	r3, r3, #2
 8001cf8:	4403      	add	r3, r0
 8001cfa:	3304      	adds	r3, #4
 8001cfc:	6019      	str	r1, [r3, #0]
			boss_shots[i].y = boss.y + 5;
 8001cfe:	4b0d      	ldr	r3, [pc, #52]	@ (8001d34 <boss_shoot+0x84>)
 8001d00:	689b      	ldr	r3, [r3, #8]
 8001d02:	79fa      	ldrb	r2, [r7, #7]
 8001d04:	1d59      	adds	r1, r3, #5
 8001d06:	480a      	ldr	r0, [pc, #40]	@ (8001d30 <boss_shoot+0x80>)
 8001d08:	4613      	mov	r3, r2
 8001d0a:	009b      	lsls	r3, r3, #2
 8001d0c:	4413      	add	r3, r2
 8001d0e:	009b      	lsls	r3, r3, #2
 8001d10:	4403      	add	r3, r0
 8001d12:	3308      	adds	r3, #8
 8001d14:	6019      	str	r1, [r3, #0]
			return;
 8001d16:	e005      	b.n	8001d24 <boss_shoot+0x74>
	for (i = 0; i < num_shots; ++i)
 8001d18:	79fb      	ldrb	r3, [r7, #7]
 8001d1a:	3301      	adds	r3, #1
 8001d1c:	71fb      	strb	r3, [r7, #7]
 8001d1e:	79fb      	ldrb	r3, [r7, #7]
 8001d20:	2b22      	cmp	r3, #34	@ 0x22
 8001d22:	d9cb      	bls.n	8001cbc <boss_shoot+0xc>
		}
	}
}
 8001d24:	370c      	adds	r7, #12
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr
 8001d2e:	bf00      	nop
 8001d30:	20000440 	.word	0x20000440
 8001d34:	20001994 	.word	0x20001994

08001d38 <colliding>:

bool colliding(int x0, int y0, int x1, int y1)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b087      	sub	sp, #28
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	60f8      	str	r0, [r7, #12]
 8001d40:	60b9      	str	r1, [r7, #8]
 8001d42:	607a      	str	r2, [r7, #4]
 8001d44:	603b      	str	r3, [r7, #0]
	/*
	 * Checking whether objects collide with each other.
	 */
	int dx = abs(x0 - x1);
 8001d46:	68fa      	ldr	r2, [r7, #12]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	1ad3      	subs	r3, r2, r3
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	bfb8      	it	lt
 8001d50:	425b      	neglt	r3, r3
 8001d52:	617b      	str	r3, [r7, #20]
	int dy = abs(y0 - y1);
 8001d54:	68ba      	ldr	r2, [r7, #8]
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	1ad3      	subs	r3, r2, r3
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	bfb8      	it	lt
 8001d5e:	425b      	neglt	r3, r3
 8001d60:	613b      	str	r3, [r7, #16]
	return dx < 6 && dy < 9;
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	2b05      	cmp	r3, #5
 8001d66:	dc04      	bgt.n	8001d72 <colliding+0x3a>
 8001d68:	693b      	ldr	r3, [r7, #16]
 8001d6a:	2b08      	cmp	r3, #8
 8001d6c:	dc01      	bgt.n	8001d72 <colliding+0x3a>
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e000      	b.n	8001d74 <colliding+0x3c>
 8001d72:	2300      	movs	r3, #0
 8001d74:	f003 0301 	and.w	r3, r3, #1
 8001d78:	b2db      	uxtb	r3, r3
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	371c      	adds	r7, #28
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr
	...

08001d88 <update_scene>:

void update_scene(void)
{
 8001d88:	b5b0      	push	{r4, r5, r7, lr}
 8001d8a:	b086      	sub	sp, #24
 8001d8c:	af02      	add	r7, sp, #8
	 */
	uint8_t i,j;

	static uint8_t y = 0, dy = 1;
	// Read analog stick
	int stick = joystick_value_y();
 8001d8e:	f001 fdb5 	bl	80038fc <joystick_value_y>
 8001d92:	6038      	str	r0, [r7, #0]

	if (stick < 1000)
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001d9a:	da05      	bge.n	8001da8 <update_scene+0x20>
		player.y -= 1;
 8001d9c:	4bb3      	ldr	r3, [pc, #716]	@ (800206c <update_scene+0x2e4>)
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	3b01      	subs	r3, #1
 8001da2:	4ab2      	ldr	r2, [pc, #712]	@ (800206c <update_scene+0x2e4>)
 8001da4:	6053      	str	r3, [r2, #4]
 8001da6:	e009      	b.n	8001dbc <update_scene+0x34>
	else if (stick > 3500)
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	f640 52ac 	movw	r2, #3500	@ 0xdac
 8001dae:	4293      	cmp	r3, r2
 8001db0:	dd04      	ble.n	8001dbc <update_scene+0x34>
		player.y += 1;
 8001db2:	4bae      	ldr	r3, [pc, #696]	@ (800206c <update_scene+0x2e4>)
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	3301      	adds	r3, #1
 8001db8:	4aac      	ldr	r2, [pc, #688]	@ (800206c <update_scene+0x2e4>)
 8001dba:	6053      	str	r3, [r2, #4]

	// Keeping the player within the screen
	if (player.y < 10) player.y = 10;
 8001dbc:	4bab      	ldr	r3, [pc, #684]	@ (800206c <update_scene+0x2e4>)
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	2b09      	cmp	r3, #9
 8001dc2:	dc02      	bgt.n	8001dca <update_scene+0x42>
 8001dc4:	4ba9      	ldr	r3, [pc, #676]	@ (800206c <update_scene+0x2e4>)
 8001dc6:	220a      	movs	r2, #10
 8001dc8:	605a      	str	r2, [r3, #4]
	if (player.y > (screen_height - 14)) player.y = (screen_height - 14);
 8001dca:	4ba8      	ldr	r3, [pc, #672]	@ (800206c <update_scene+0x2e4>)
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	2b72      	cmp	r3, #114	@ 0x72
 8001dd0:	dd02      	ble.n	8001dd8 <update_scene+0x50>
 8001dd2:	4ba6      	ldr	r3, [pc, #664]	@ (800206c <update_scene+0x2e4>)
 8001dd4:	2272      	movs	r2, #114	@ 0x72
 8001dd6:	605a      	str	r2, [r3, #4]

	// Shifting shots forward
	bool shoot_updated = false;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	737b      	strb	r3, [r7, #13]

	for (i = 0; i < num_shots; ++i)
 8001ddc:	2300      	movs	r3, #0
 8001dde:	73fb      	strb	r3, [r7, #15]
 8001de0:	e14e      	b.n	8002080 <update_scene+0x2f8>
	{
		switch(shots[i].type)
 8001de2:	7bfa      	ldrb	r2, [r7, #15]
 8001de4:	49a2      	ldr	r1, [pc, #648]	@ (8002070 <update_scene+0x2e8>)
 8001de6:	4613      	mov	r3, r2
 8001de8:	009b      	lsls	r3, r3, #2
 8001dea:	4413      	add	r3, r2
 8001dec:	009b      	lsls	r3, r3, #2
 8001dee:	440b      	add	r3, r1
 8001df0:	330c      	adds	r3, #12
 8001df2:	781b      	ldrb	r3, [r3, #0]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d002      	beq.n	8001dfe <update_scene+0x76>
 8001df8:	2b01      	cmp	r3, #1
 8001dfa:	d032      	beq.n	8001e62 <update_scene+0xda>
 8001dfc:	e13d      	b.n	800207a <update_scene+0x2f2>
		{
		case st_normal:
			if (shots[i].active)
 8001dfe:	7bfa      	ldrb	r2, [r7, #15]
 8001e00:	499b      	ldr	r1, [pc, #620]	@ (8002070 <update_scene+0x2e8>)
 8001e02:	4613      	mov	r3, r2
 8001e04:	009b      	lsls	r3, r3, #2
 8001e06:	4413      	add	r3, r2
 8001e08:	009b      	lsls	r3, r3, #2
 8001e0a:	440b      	add	r3, r1
 8001e0c:	781b      	ldrb	r3, [r3, #0]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d011      	beq.n	8001e36 <update_scene+0xae>
				shots[i].x++;
 8001e12:	7bfa      	ldrb	r2, [r7, #15]
 8001e14:	4996      	ldr	r1, [pc, #600]	@ (8002070 <update_scene+0x2e8>)
 8001e16:	4613      	mov	r3, r2
 8001e18:	009b      	lsls	r3, r3, #2
 8001e1a:	4413      	add	r3, r2
 8001e1c:	009b      	lsls	r3, r3, #2
 8001e1e:	440b      	add	r3, r1
 8001e20:	3304      	adds	r3, #4
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	1c59      	adds	r1, r3, #1
 8001e26:	4892      	ldr	r0, [pc, #584]	@ (8002070 <update_scene+0x2e8>)
 8001e28:	4613      	mov	r3, r2
 8001e2a:	009b      	lsls	r3, r3, #2
 8001e2c:	4413      	add	r3, r2
 8001e2e:	009b      	lsls	r3, r3, #2
 8001e30:	4403      	add	r3, r0
 8001e32:	3304      	adds	r3, #4
 8001e34:	6019      	str	r1, [r3, #0]
			if (shots[i].x > 128)
 8001e36:	7bfa      	ldrb	r2, [r7, #15]
 8001e38:	498d      	ldr	r1, [pc, #564]	@ (8002070 <update_scene+0x2e8>)
 8001e3a:	4613      	mov	r3, r2
 8001e3c:	009b      	lsls	r3, r3, #2
 8001e3e:	4413      	add	r3, r2
 8001e40:	009b      	lsls	r3, r3, #2
 8001e42:	440b      	add	r3, r1
 8001e44:	3304      	adds	r3, #4
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	2b80      	cmp	r3, #128	@ 0x80
 8001e4a:	f340 810d 	ble.w	8002068 <update_scene+0x2e0>
				shots[i].active = false;
 8001e4e:	7bfa      	ldrb	r2, [r7, #15]
 8001e50:	4987      	ldr	r1, [pc, #540]	@ (8002070 <update_scene+0x2e8>)
 8001e52:	4613      	mov	r3, r2
 8001e54:	009b      	lsls	r3, r3, #2
 8001e56:	4413      	add	r3, r2
 8001e58:	009b      	lsls	r3, r3, #2
 8001e5a:	440b      	add	r3, r1
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	701a      	strb	r2, [r3, #0]
			break;
 8001e60:	e102      	b.n	8002068 <update_scene+0x2e0>
		case st_tracker:

			for (int j = 0; j < num_enemies; j++)
 8001e62:	2300      	movs	r3, #0
 8001e64:	60bb      	str	r3, [r7, #8]
 8001e66:	e0b6      	b.n	8001fd6 <update_scene+0x24e>
			{
				if (shots[i].track_number == enemies[j].track_number)
 8001e68:	7bfa      	ldrb	r2, [r7, #15]
 8001e6a:	4981      	ldr	r1, [pc, #516]	@ (8002070 <update_scene+0x2e8>)
 8001e6c:	4613      	mov	r3, r2
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	4413      	add	r3, r2
 8001e72:	009b      	lsls	r3, r3, #2
 8001e74:	440b      	add	r3, r1
 8001e76:	3310      	adds	r3, #16
 8001e78:	6819      	ldr	r1, [r3, #0]
 8001e7a:	487e      	ldr	r0, [pc, #504]	@ (8002074 <update_scene+0x2ec>)
 8001e7c:	68ba      	ldr	r2, [r7, #8]
 8001e7e:	4613      	mov	r3, r2
 8001e80:	00db      	lsls	r3, r3, #3
 8001e82:	4413      	add	r3, r2
 8001e84:	009b      	lsls	r3, r3, #2
 8001e86:	4403      	add	r3, r0
 8001e88:	3320      	adds	r3, #32
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4299      	cmp	r1, r3
 8001e8e:	f040 809f 	bne.w	8001fd0 <update_scene+0x248>
				{
					if(shots[i].x > enemies[j].x) shots[i].x -= 2;
 8001e92:	7bfa      	ldrb	r2, [r7, #15]
 8001e94:	4976      	ldr	r1, [pc, #472]	@ (8002070 <update_scene+0x2e8>)
 8001e96:	4613      	mov	r3, r2
 8001e98:	009b      	lsls	r3, r3, #2
 8001e9a:	4413      	add	r3, r2
 8001e9c:	009b      	lsls	r3, r3, #2
 8001e9e:	440b      	add	r3, r1
 8001ea0:	3304      	adds	r3, #4
 8001ea2:	6819      	ldr	r1, [r3, #0]
 8001ea4:	4873      	ldr	r0, [pc, #460]	@ (8002074 <update_scene+0x2ec>)
 8001ea6:	68ba      	ldr	r2, [r7, #8]
 8001ea8:	4613      	mov	r3, r2
 8001eaa:	00db      	lsls	r3, r3, #3
 8001eac:	4413      	add	r3, r2
 8001eae:	009b      	lsls	r3, r3, #2
 8001eb0:	4403      	add	r3, r0
 8001eb2:	3304      	adds	r3, #4
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4299      	cmp	r1, r3
 8001eb8:	dd12      	ble.n	8001ee0 <update_scene+0x158>
 8001eba:	7bfa      	ldrb	r2, [r7, #15]
 8001ebc:	496c      	ldr	r1, [pc, #432]	@ (8002070 <update_scene+0x2e8>)
 8001ebe:	4613      	mov	r3, r2
 8001ec0:	009b      	lsls	r3, r3, #2
 8001ec2:	4413      	add	r3, r2
 8001ec4:	009b      	lsls	r3, r3, #2
 8001ec6:	440b      	add	r3, r1
 8001ec8:	3304      	adds	r3, #4
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	7bfa      	ldrb	r2, [r7, #15]
 8001ece:	1e99      	subs	r1, r3, #2
 8001ed0:	4867      	ldr	r0, [pc, #412]	@ (8002070 <update_scene+0x2e8>)
 8001ed2:	4613      	mov	r3, r2
 8001ed4:	009b      	lsls	r3, r3, #2
 8001ed6:	4413      	add	r3, r2
 8001ed8:	009b      	lsls	r3, r3, #2
 8001eda:	4403      	add	r3, r0
 8001edc:	3304      	adds	r3, #4
 8001ede:	6019      	str	r1, [r3, #0]
					if(shots[i].x < enemies[j].x) shots[i].x += 2;
 8001ee0:	7bfa      	ldrb	r2, [r7, #15]
 8001ee2:	4963      	ldr	r1, [pc, #396]	@ (8002070 <update_scene+0x2e8>)
 8001ee4:	4613      	mov	r3, r2
 8001ee6:	009b      	lsls	r3, r3, #2
 8001ee8:	4413      	add	r3, r2
 8001eea:	009b      	lsls	r3, r3, #2
 8001eec:	440b      	add	r3, r1
 8001eee:	3304      	adds	r3, #4
 8001ef0:	6819      	ldr	r1, [r3, #0]
 8001ef2:	4860      	ldr	r0, [pc, #384]	@ (8002074 <update_scene+0x2ec>)
 8001ef4:	68ba      	ldr	r2, [r7, #8]
 8001ef6:	4613      	mov	r3, r2
 8001ef8:	00db      	lsls	r3, r3, #3
 8001efa:	4413      	add	r3, r2
 8001efc:	009b      	lsls	r3, r3, #2
 8001efe:	4403      	add	r3, r0
 8001f00:	3304      	adds	r3, #4
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4299      	cmp	r1, r3
 8001f06:	da12      	bge.n	8001f2e <update_scene+0x1a6>
 8001f08:	7bfa      	ldrb	r2, [r7, #15]
 8001f0a:	4959      	ldr	r1, [pc, #356]	@ (8002070 <update_scene+0x2e8>)
 8001f0c:	4613      	mov	r3, r2
 8001f0e:	009b      	lsls	r3, r3, #2
 8001f10:	4413      	add	r3, r2
 8001f12:	009b      	lsls	r3, r3, #2
 8001f14:	440b      	add	r3, r1
 8001f16:	3304      	adds	r3, #4
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	7bfa      	ldrb	r2, [r7, #15]
 8001f1c:	1c99      	adds	r1, r3, #2
 8001f1e:	4854      	ldr	r0, [pc, #336]	@ (8002070 <update_scene+0x2e8>)
 8001f20:	4613      	mov	r3, r2
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	4413      	add	r3, r2
 8001f26:	009b      	lsls	r3, r3, #2
 8001f28:	4403      	add	r3, r0
 8001f2a:	3304      	adds	r3, #4
 8001f2c:	6019      	str	r1, [r3, #0]
					if(shots[i].y > enemies[j].y) shots[i].y -= 2;
 8001f2e:	7bfa      	ldrb	r2, [r7, #15]
 8001f30:	494f      	ldr	r1, [pc, #316]	@ (8002070 <update_scene+0x2e8>)
 8001f32:	4613      	mov	r3, r2
 8001f34:	009b      	lsls	r3, r3, #2
 8001f36:	4413      	add	r3, r2
 8001f38:	009b      	lsls	r3, r3, #2
 8001f3a:	440b      	add	r3, r1
 8001f3c:	3308      	adds	r3, #8
 8001f3e:	6819      	ldr	r1, [r3, #0]
 8001f40:	484c      	ldr	r0, [pc, #304]	@ (8002074 <update_scene+0x2ec>)
 8001f42:	68ba      	ldr	r2, [r7, #8]
 8001f44:	4613      	mov	r3, r2
 8001f46:	00db      	lsls	r3, r3, #3
 8001f48:	4413      	add	r3, r2
 8001f4a:	009b      	lsls	r3, r3, #2
 8001f4c:	4403      	add	r3, r0
 8001f4e:	3308      	adds	r3, #8
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4299      	cmp	r1, r3
 8001f54:	dd12      	ble.n	8001f7c <update_scene+0x1f4>
 8001f56:	7bfa      	ldrb	r2, [r7, #15]
 8001f58:	4945      	ldr	r1, [pc, #276]	@ (8002070 <update_scene+0x2e8>)
 8001f5a:	4613      	mov	r3, r2
 8001f5c:	009b      	lsls	r3, r3, #2
 8001f5e:	4413      	add	r3, r2
 8001f60:	009b      	lsls	r3, r3, #2
 8001f62:	440b      	add	r3, r1
 8001f64:	3308      	adds	r3, #8
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	7bfa      	ldrb	r2, [r7, #15]
 8001f6a:	1e99      	subs	r1, r3, #2
 8001f6c:	4840      	ldr	r0, [pc, #256]	@ (8002070 <update_scene+0x2e8>)
 8001f6e:	4613      	mov	r3, r2
 8001f70:	009b      	lsls	r3, r3, #2
 8001f72:	4413      	add	r3, r2
 8001f74:	009b      	lsls	r3, r3, #2
 8001f76:	4403      	add	r3, r0
 8001f78:	3308      	adds	r3, #8
 8001f7a:	6019      	str	r1, [r3, #0]
					if(shots[i].y < enemies[j].y) shots[i].y += 2;
 8001f7c:	7bfa      	ldrb	r2, [r7, #15]
 8001f7e:	493c      	ldr	r1, [pc, #240]	@ (8002070 <update_scene+0x2e8>)
 8001f80:	4613      	mov	r3, r2
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	4413      	add	r3, r2
 8001f86:	009b      	lsls	r3, r3, #2
 8001f88:	440b      	add	r3, r1
 8001f8a:	3308      	adds	r3, #8
 8001f8c:	6819      	ldr	r1, [r3, #0]
 8001f8e:	4839      	ldr	r0, [pc, #228]	@ (8002074 <update_scene+0x2ec>)
 8001f90:	68ba      	ldr	r2, [r7, #8]
 8001f92:	4613      	mov	r3, r2
 8001f94:	00db      	lsls	r3, r3, #3
 8001f96:	4413      	add	r3, r2
 8001f98:	009b      	lsls	r3, r3, #2
 8001f9a:	4403      	add	r3, r0
 8001f9c:	3308      	adds	r3, #8
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4299      	cmp	r1, r3
 8001fa2:	da12      	bge.n	8001fca <update_scene+0x242>
 8001fa4:	7bfa      	ldrb	r2, [r7, #15]
 8001fa6:	4932      	ldr	r1, [pc, #200]	@ (8002070 <update_scene+0x2e8>)
 8001fa8:	4613      	mov	r3, r2
 8001faa:	009b      	lsls	r3, r3, #2
 8001fac:	4413      	add	r3, r2
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	440b      	add	r3, r1
 8001fb2:	3308      	adds	r3, #8
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	7bfa      	ldrb	r2, [r7, #15]
 8001fb8:	1c99      	adds	r1, r3, #2
 8001fba:	482d      	ldr	r0, [pc, #180]	@ (8002070 <update_scene+0x2e8>)
 8001fbc:	4613      	mov	r3, r2
 8001fbe:	009b      	lsls	r3, r3, #2
 8001fc0:	4413      	add	r3, r2
 8001fc2:	009b      	lsls	r3, r3, #2
 8001fc4:	4403      	add	r3, r0
 8001fc6:	3308      	adds	r3, #8
 8001fc8:	6019      	str	r1, [r3, #0]
					shoot_updated = true;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	737b      	strb	r3, [r7, #13]
					break;
 8001fce:	e006      	b.n	8001fde <update_scene+0x256>
			for (int j = 0; j < num_enemies; j++)
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	3301      	adds	r3, #1
 8001fd4:	60bb      	str	r3, [r7, #8]
 8001fd6:	68bb      	ldr	r3, [r7, #8]
 8001fd8:	2b09      	cmp	r3, #9
 8001fda:	f77f af45 	ble.w	8001e68 <update_scene+0xe0>
				}
			}
			//Remove tracking missiles that have no target
			if(!shoot_updated && shots[i].type == st_tracker)
 8001fde:	7b7b      	ldrb	r3, [r7, #13]
 8001fe0:	f083 0301 	eor.w	r3, r3, #1
 8001fe4:	b2db      	uxtb	r3, r3
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d01f      	beq.n	800202a <update_scene+0x2a2>
 8001fea:	7bfa      	ldrb	r2, [r7, #15]
 8001fec:	4920      	ldr	r1, [pc, #128]	@ (8002070 <update_scene+0x2e8>)
 8001fee:	4613      	mov	r3, r2
 8001ff0:	009b      	lsls	r3, r3, #2
 8001ff2:	4413      	add	r3, r2
 8001ff4:	009b      	lsls	r3, r3, #2
 8001ff6:	440b      	add	r3, r1
 8001ff8:	330c      	adds	r3, #12
 8001ffa:	781b      	ldrb	r3, [r3, #0]
 8001ffc:	2b01      	cmp	r3, #1
 8001ffe:	d114      	bne.n	800202a <update_scene+0x2a2>
			{
				shots[i].active = false;
 8002000:	7bfa      	ldrb	r2, [r7, #15]
 8002002:	491b      	ldr	r1, [pc, #108]	@ (8002070 <update_scene+0x2e8>)
 8002004:	4613      	mov	r3, r2
 8002006:	009b      	lsls	r3, r3, #2
 8002008:	4413      	add	r3, r2
 800200a:	009b      	lsls	r3, r3, #2
 800200c:	440b      	add	r3, r1
 800200e:	2200      	movs	r2, #0
 8002010:	701a      	strb	r2, [r3, #0]
				shots[i].track_number = 0;
 8002012:	7bfa      	ldrb	r2, [r7, #15]
 8002014:	4916      	ldr	r1, [pc, #88]	@ (8002070 <update_scene+0x2e8>)
 8002016:	4613      	mov	r3, r2
 8002018:	009b      	lsls	r3, r3, #2
 800201a:	4413      	add	r3, r2
 800201c:	009b      	lsls	r3, r3, #2
 800201e:	440b      	add	r3, r1
 8002020:	3310      	adds	r3, #16
 8002022:	2200      	movs	r2, #0
 8002024:	601a      	str	r2, [r3, #0]
				shoot_updated = false;
 8002026:	2300      	movs	r3, #0
 8002028:	737b      	strb	r3, [r7, #13]
			}

			//Remove off-map shots
			if(shots[i].x > 128)
 800202a:	7bfa      	ldrb	r2, [r7, #15]
 800202c:	4910      	ldr	r1, [pc, #64]	@ (8002070 <update_scene+0x2e8>)
 800202e:	4613      	mov	r3, r2
 8002030:	009b      	lsls	r3, r3, #2
 8002032:	4413      	add	r3, r2
 8002034:	009b      	lsls	r3, r3, #2
 8002036:	440b      	add	r3, r1
 8002038:	3304      	adds	r3, #4
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	2b80      	cmp	r3, #128	@ 0x80
 800203e:	dd1b      	ble.n	8002078 <update_scene+0x2f0>
			{
				shots[i].active = false;
 8002040:	7bfa      	ldrb	r2, [r7, #15]
 8002042:	490b      	ldr	r1, [pc, #44]	@ (8002070 <update_scene+0x2e8>)
 8002044:	4613      	mov	r3, r2
 8002046:	009b      	lsls	r3, r3, #2
 8002048:	4413      	add	r3, r2
 800204a:	009b      	lsls	r3, r3, #2
 800204c:	440b      	add	r3, r1
 800204e:	2200      	movs	r2, #0
 8002050:	701a      	strb	r2, [r3, #0]
				shots[i].track_number = 0;
 8002052:	7bfa      	ldrb	r2, [r7, #15]
 8002054:	4906      	ldr	r1, [pc, #24]	@ (8002070 <update_scene+0x2e8>)
 8002056:	4613      	mov	r3, r2
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	4413      	add	r3, r2
 800205c:	009b      	lsls	r3, r3, #2
 800205e:	440b      	add	r3, r1
 8002060:	3310      	adds	r3, #16
 8002062:	2200      	movs	r2, #0
 8002064:	601a      	str	r2, [r3, #0]
			}
			break;
 8002066:	e007      	b.n	8002078 <update_scene+0x2f0>
			break;
 8002068:	bf00      	nop
 800206a:	e006      	b.n	800207a <update_scene+0x2f2>
 800206c:	20000160 	.word	0x20000160
 8002070:	20000184 	.word	0x20000184
 8002074:	200004a4 	.word	0x200004a4
			break;
 8002078:	bf00      	nop
	for (i = 0; i < num_shots; ++i)
 800207a:	7bfb      	ldrb	r3, [r7, #15]
 800207c:	3301      	adds	r3, #1
 800207e:	73fb      	strb	r3, [r7, #15]
 8002080:	7bfb      	ldrb	r3, [r7, #15]
 8002082:	2b22      	cmp	r3, #34	@ 0x22
 8002084:	f67f aead 	bls.w	8001de2 <update_scene+0x5a>

	}

	//Remove the markers on enemies whose shots have been used on others
	bool is_there_a_missile;
	for(i = 0; i < num_enemies; i++)
 8002088:	2300      	movs	r3, #0
 800208a:	73fb      	strb	r3, [r7, #15]
 800208c:	e033      	b.n	80020f6 <update_scene+0x36e>
	{
		is_there_a_missile = false;
 800208e:	2300      	movs	r3, #0
 8002090:	71fb      	strb	r3, [r7, #7]

		for(j = 0; j < num_shots; j++)
 8002092:	2300      	movs	r3, #0
 8002094:	73bb      	strb	r3, [r7, #14]
 8002096:	e018      	b.n	80020ca <update_scene+0x342>
		{
			if(enemies[i].track_number == shots[j].track_number)
 8002098:	7bfa      	ldrb	r2, [r7, #15]
 800209a:	491a      	ldr	r1, [pc, #104]	@ (8002104 <update_scene+0x37c>)
 800209c:	4613      	mov	r3, r2
 800209e:	00db      	lsls	r3, r3, #3
 80020a0:	4413      	add	r3, r2
 80020a2:	009b      	lsls	r3, r3, #2
 80020a4:	440b      	add	r3, r1
 80020a6:	3320      	adds	r3, #32
 80020a8:	6819      	ldr	r1, [r3, #0]
 80020aa:	7bba      	ldrb	r2, [r7, #14]
 80020ac:	4816      	ldr	r0, [pc, #88]	@ (8002108 <update_scene+0x380>)
 80020ae:	4613      	mov	r3, r2
 80020b0:	009b      	lsls	r3, r3, #2
 80020b2:	4413      	add	r3, r2
 80020b4:	009b      	lsls	r3, r3, #2
 80020b6:	4403      	add	r3, r0
 80020b8:	3310      	adds	r3, #16
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4299      	cmp	r1, r3
 80020be:	d101      	bne.n	80020c4 <update_scene+0x33c>
				is_there_a_missile = true;
 80020c0:	2301      	movs	r3, #1
 80020c2:	71fb      	strb	r3, [r7, #7]
		for(j = 0; j < num_shots; j++)
 80020c4:	7bbb      	ldrb	r3, [r7, #14]
 80020c6:	3301      	adds	r3, #1
 80020c8:	73bb      	strb	r3, [r7, #14]
 80020ca:	7bbb      	ldrb	r3, [r7, #14]
 80020cc:	2b22      	cmp	r3, #34	@ 0x22
 80020ce:	d9e3      	bls.n	8002098 <update_scene+0x310>
		}

		if(!is_there_a_missile)
 80020d0:	79fb      	ldrb	r3, [r7, #7]
 80020d2:	f083 0301 	eor.w	r3, r3, #1
 80020d6:	b2db      	uxtb	r3, r3
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d009      	beq.n	80020f0 <update_scene+0x368>
			enemies[i].track_number = 0;
 80020dc:	7bfa      	ldrb	r2, [r7, #15]
 80020de:	4909      	ldr	r1, [pc, #36]	@ (8002104 <update_scene+0x37c>)
 80020e0:	4613      	mov	r3, r2
 80020e2:	00db      	lsls	r3, r3, #3
 80020e4:	4413      	add	r3, r2
 80020e6:	009b      	lsls	r3, r3, #2
 80020e8:	440b      	add	r3, r1
 80020ea:	3320      	adds	r3, #32
 80020ec:	2200      	movs	r2, #0
 80020ee:	601a      	str	r2, [r3, #0]
	for(i = 0; i < num_enemies; i++)
 80020f0:	7bfb      	ldrb	r3, [r7, #15]
 80020f2:	3301      	adds	r3, #1
 80020f4:	73fb      	strb	r3, [r7, #15]
 80020f6:	7bfb      	ldrb	r3, [r7, #15]
 80020f8:	2b09      	cmp	r3, #9
 80020fa:	d9c8      	bls.n	800208e <update_scene+0x306>
	}

	// Updated enemies
	for (i = 0; i < num_enemies; ++i)
 80020fc:	2300      	movs	r3, #0
 80020fe:	73fb      	strb	r3, [r7, #15]
 8002100:	e277      	b.n	80025f2 <update_scene+0x86a>
 8002102:	bf00      	nop
 8002104:	200004a4 	.word	0x200004a4
 8002108:	20000184 	.word	0x20000184
	{

		if (enemies[i].active)
 800210c:	7bfa      	ldrb	r2, [r7, #15]
 800210e:	49b6      	ldr	r1, [pc, #728]	@ (80023e8 <update_scene+0x660>)
 8002110:	4613      	mov	r3, r2
 8002112:	00db      	lsls	r3, r3, #3
 8002114:	4413      	add	r3, r2
 8002116:	009b      	lsls	r3, r3, #2
 8002118:	440b      	add	r3, r1
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	2b00      	cmp	r3, #0
 800211e:	f000 8265 	beq.w	80025ec <update_scene+0x864>
		{
			enemies[i].next_update -= 1;
 8002122:	7bfa      	ldrb	r2, [r7, #15]
 8002124:	49b0      	ldr	r1, [pc, #704]	@ (80023e8 <update_scene+0x660>)
 8002126:	4613      	mov	r3, r2
 8002128:	00db      	lsls	r3, r3, #3
 800212a:	4413      	add	r3, r2
 800212c:	009b      	lsls	r3, r3, #2
 800212e:	440b      	add	r3, r1
 8002130:	3314      	adds	r3, #20
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	7bfa      	ldrb	r2, [r7, #15]
 8002136:	1e59      	subs	r1, r3, #1
 8002138:	48ab      	ldr	r0, [pc, #684]	@ (80023e8 <update_scene+0x660>)
 800213a:	4613      	mov	r3, r2
 800213c:	00db      	lsls	r3, r3, #3
 800213e:	4413      	add	r3, r2
 8002140:	009b      	lsls	r3, r3, #2
 8002142:	4403      	add	r3, r0
 8002144:	3314      	adds	r3, #20
 8002146:	6019      	str	r1, [r3, #0]
				if (enemies[i].next_update <= 0)
 8002148:	7bfa      	ldrb	r2, [r7, #15]
 800214a:	49a7      	ldr	r1, [pc, #668]	@ (80023e8 <update_scene+0x660>)
 800214c:	4613      	mov	r3, r2
 800214e:	00db      	lsls	r3, r3, #3
 8002150:	4413      	add	r3, r2
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	440b      	add	r3, r1
 8002156:	3314      	adds	r3, #20
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	2b00      	cmp	r3, #0
 800215c:	f300 8246 	bgt.w	80025ec <update_scene+0x864>
				{
					if (enemies[i].active)
 8002160:	7bfa      	ldrb	r2, [r7, #15]
 8002162:	49a1      	ldr	r1, [pc, #644]	@ (80023e8 <update_scene+0x660>)
 8002164:	4613      	mov	r3, r2
 8002166:	00db      	lsls	r3, r3, #3
 8002168:	4413      	add	r3, r2
 800216a:	009b      	lsls	r3, r3, #2
 800216c:	440b      	add	r3, r1
 800216e:	781b      	ldrb	r3, [r3, #0]
 8002170:	2b00      	cmp	r3, #0
 8002172:	f000 823b 	beq.w	80025ec <update_scene+0x864>
					{

						enemies[i].next_update = enemies[i].update_delay;
 8002176:	7bf9      	ldrb	r1, [r7, #15]
 8002178:	7bfa      	ldrb	r2, [r7, #15]
 800217a:	489b      	ldr	r0, [pc, #620]	@ (80023e8 <update_scene+0x660>)
 800217c:	460b      	mov	r3, r1
 800217e:	00db      	lsls	r3, r3, #3
 8002180:	440b      	add	r3, r1
 8002182:	009b      	lsls	r3, r3, #2
 8002184:	4403      	add	r3, r0
 8002186:	3318      	adds	r3, #24
 8002188:	6819      	ldr	r1, [r3, #0]
 800218a:	4897      	ldr	r0, [pc, #604]	@ (80023e8 <update_scene+0x660>)
 800218c:	4613      	mov	r3, r2
 800218e:	00db      	lsls	r3, r3, #3
 8002190:	4413      	add	r3, r2
 8002192:	009b      	lsls	r3, r3, #2
 8002194:	4403      	add	r3, r0
 8002196:	3314      	adds	r3, #20
 8002198:	6019      	str	r1, [r3, #0]

						//Checking for collisions between opponents and the player
						if (colliding(enemies[i].x,enemies[i].y, player.x, player.y) 	||
 800219a:	7bfa      	ldrb	r2, [r7, #15]
 800219c:	4992      	ldr	r1, [pc, #584]	@ (80023e8 <update_scene+0x660>)
 800219e:	4613      	mov	r3, r2
 80021a0:	00db      	lsls	r3, r3, #3
 80021a2:	4413      	add	r3, r2
 80021a4:	009b      	lsls	r3, r3, #2
 80021a6:	440b      	add	r3, r1
 80021a8:	3304      	adds	r3, #4
 80021aa:	6818      	ldr	r0, [r3, #0]
 80021ac:	7bfa      	ldrb	r2, [r7, #15]
 80021ae:	498e      	ldr	r1, [pc, #568]	@ (80023e8 <update_scene+0x660>)
 80021b0:	4613      	mov	r3, r2
 80021b2:	00db      	lsls	r3, r3, #3
 80021b4:	4413      	add	r3, r2
 80021b6:	009b      	lsls	r3, r3, #2
 80021b8:	440b      	add	r3, r1
 80021ba:	3308      	adds	r3, #8
 80021bc:	6819      	ldr	r1, [r3, #0]
 80021be:	4b8b      	ldr	r3, [pc, #556]	@ (80023ec <update_scene+0x664>)
 80021c0:	681a      	ldr	r2, [r3, #0]
 80021c2:	4b8a      	ldr	r3, [pc, #552]	@ (80023ec <update_scene+0x664>)
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	f7ff fdb7 	bl	8001d38 <colliding>
 80021ca:	4603      	mov	r3, r0
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d154      	bne.n	800227a <update_scene+0x4f2>
							colliding(enemies[i].x,enemies[i].y, player.x, player.y+5) 	||
 80021d0:	7bfa      	ldrb	r2, [r7, #15]
 80021d2:	4985      	ldr	r1, [pc, #532]	@ (80023e8 <update_scene+0x660>)
 80021d4:	4613      	mov	r3, r2
 80021d6:	00db      	lsls	r3, r3, #3
 80021d8:	4413      	add	r3, r2
 80021da:	009b      	lsls	r3, r3, #2
 80021dc:	440b      	add	r3, r1
 80021de:	3304      	adds	r3, #4
 80021e0:	6818      	ldr	r0, [r3, #0]
 80021e2:	7bfa      	ldrb	r2, [r7, #15]
 80021e4:	4980      	ldr	r1, [pc, #512]	@ (80023e8 <update_scene+0x660>)
 80021e6:	4613      	mov	r3, r2
 80021e8:	00db      	lsls	r3, r3, #3
 80021ea:	4413      	add	r3, r2
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	440b      	add	r3, r1
 80021f0:	3308      	adds	r3, #8
 80021f2:	6819      	ldr	r1, [r3, #0]
 80021f4:	4b7d      	ldr	r3, [pc, #500]	@ (80023ec <update_scene+0x664>)
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	4b7c      	ldr	r3, [pc, #496]	@ (80023ec <update_scene+0x664>)
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	3305      	adds	r3, #5
 80021fe:	f7ff fd9b 	bl	8001d38 <colliding>
 8002202:	4603      	mov	r3, r0
						if (colliding(enemies[i].x,enemies[i].y, player.x, player.y) 	||
 8002204:	2b00      	cmp	r3, #0
 8002206:	d138      	bne.n	800227a <update_scene+0x4f2>
							colliding(enemies[i].x,enemies[i].y, player.x+7, player.y)	||
 8002208:	7bfa      	ldrb	r2, [r7, #15]
 800220a:	4977      	ldr	r1, [pc, #476]	@ (80023e8 <update_scene+0x660>)
 800220c:	4613      	mov	r3, r2
 800220e:	00db      	lsls	r3, r3, #3
 8002210:	4413      	add	r3, r2
 8002212:	009b      	lsls	r3, r3, #2
 8002214:	440b      	add	r3, r1
 8002216:	3304      	adds	r3, #4
 8002218:	6818      	ldr	r0, [r3, #0]
 800221a:	7bfa      	ldrb	r2, [r7, #15]
 800221c:	4972      	ldr	r1, [pc, #456]	@ (80023e8 <update_scene+0x660>)
 800221e:	4613      	mov	r3, r2
 8002220:	00db      	lsls	r3, r3, #3
 8002222:	4413      	add	r3, r2
 8002224:	009b      	lsls	r3, r3, #2
 8002226:	440b      	add	r3, r1
 8002228:	3308      	adds	r3, #8
 800222a:	6819      	ldr	r1, [r3, #0]
 800222c:	4b6f      	ldr	r3, [pc, #444]	@ (80023ec <update_scene+0x664>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	1dda      	adds	r2, r3, #7
 8002232:	4b6e      	ldr	r3, [pc, #440]	@ (80023ec <update_scene+0x664>)
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	f7ff fd7f 	bl	8001d38 <colliding>
 800223a:	4603      	mov	r3, r0
							colliding(enemies[i].x,enemies[i].y, player.x, player.y+5) 	||
 800223c:	2b00      	cmp	r3, #0
 800223e:	d11c      	bne.n	800227a <update_scene+0x4f2>
							colliding(enemies[i].x,enemies[i].y, player.x+7, player.y+5)
 8002240:	7bfa      	ldrb	r2, [r7, #15]
 8002242:	4969      	ldr	r1, [pc, #420]	@ (80023e8 <update_scene+0x660>)
 8002244:	4613      	mov	r3, r2
 8002246:	00db      	lsls	r3, r3, #3
 8002248:	4413      	add	r3, r2
 800224a:	009b      	lsls	r3, r3, #2
 800224c:	440b      	add	r3, r1
 800224e:	3304      	adds	r3, #4
 8002250:	6818      	ldr	r0, [r3, #0]
 8002252:	7bfa      	ldrb	r2, [r7, #15]
 8002254:	4964      	ldr	r1, [pc, #400]	@ (80023e8 <update_scene+0x660>)
 8002256:	4613      	mov	r3, r2
 8002258:	00db      	lsls	r3, r3, #3
 800225a:	4413      	add	r3, r2
 800225c:	009b      	lsls	r3, r3, #2
 800225e:	440b      	add	r3, r1
 8002260:	3308      	adds	r3, #8
 8002262:	6819      	ldr	r1, [r3, #0]
 8002264:	4b61      	ldr	r3, [pc, #388]	@ (80023ec <update_scene+0x664>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	1dda      	adds	r2, r3, #7
 800226a:	4b60      	ldr	r3, [pc, #384]	@ (80023ec <update_scene+0x664>)
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	3305      	adds	r3, #5
 8002270:	f7ff fd62 	bl	8001d38 <colliding>
 8002274:	4603      	mov	r3, r0
							colliding(enemies[i].x,enemies[i].y, player.x+7, player.y)	||
 8002276:	2b00      	cmp	r3, #0
 8002278:	d062      	beq.n	8002340 <update_scene+0x5b8>
							)
						{
							player.lives -= 1;;
 800227a:	4b5c      	ldr	r3, [pc, #368]	@ (80023ec <update_scene+0x664>)
 800227c:	691b      	ldr	r3, [r3, #16]
 800227e:	3b01      	subs	r3, #1
 8002280:	4a5a      	ldr	r2, [pc, #360]	@ (80023ec <update_scene+0x664>)
 8002282:	6113      	str	r3, [r2, #16]
							enemies[i].active = false;
 8002284:	7bfa      	ldrb	r2, [r7, #15]
 8002286:	4958      	ldr	r1, [pc, #352]	@ (80023e8 <update_scene+0x660>)
 8002288:	4613      	mov	r3, r2
 800228a:	00db      	lsls	r3, r3, #3
 800228c:	4413      	add	r3, r2
 800228e:	009b      	lsls	r3, r3, #2
 8002290:	440b      	add	r3, r1
 8002292:	2200      	movs	r2, #0
 8002294:	701a      	strb	r2, [r3, #0]
							enemies[i].tracked_by_missile = false;
 8002296:	7bfa      	ldrb	r2, [r7, #15]
 8002298:	4953      	ldr	r1, [pc, #332]	@ (80023e8 <update_scene+0x660>)
 800229a:	4613      	mov	r3, r2
 800229c:	00db      	lsls	r3, r3, #3
 800229e:	4413      	add	r3, r2
 80022a0:	009b      	lsls	r3, r3, #2
 80022a2:	440b      	add	r3, r1
 80022a4:	331c      	adds	r3, #28
 80022a6:	2200      	movs	r2, #0
 80022a8:	701a      	strb	r2, [r3, #0]
							enemies[i].track_number = 0;
 80022aa:	7bfa      	ldrb	r2, [r7, #15]
 80022ac:	494e      	ldr	r1, [pc, #312]	@ (80023e8 <update_scene+0x660>)
 80022ae:	4613      	mov	r3, r2
 80022b0:	00db      	lsls	r3, r3, #3
 80022b2:	4413      	add	r3, r2
 80022b4:	009b      	lsls	r3, r3, #2
 80022b6:	440b      	add	r3, r1
 80022b8:	3320      	adds	r3, #32
 80022ba:	2200      	movs	r2, #0
 80022bc:	601a      	str	r2, [r3, #0]
							GFX_DrowBitMap_P(enemies[i].x+2, enemies[i].y, explosion_map,10,10,1);
 80022be:	7bfa      	ldrb	r2, [r7, #15]
 80022c0:	4949      	ldr	r1, [pc, #292]	@ (80023e8 <update_scene+0x660>)
 80022c2:	4613      	mov	r3, r2
 80022c4:	00db      	lsls	r3, r3, #3
 80022c6:	4413      	add	r3, r2
 80022c8:	009b      	lsls	r3, r3, #2
 80022ca:	440b      	add	r3, r1
 80022cc:	3304      	adds	r3, #4
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	1c98      	adds	r0, r3, #2
 80022d2:	7bfa      	ldrb	r2, [r7, #15]
 80022d4:	4944      	ldr	r1, [pc, #272]	@ (80023e8 <update_scene+0x660>)
 80022d6:	4613      	mov	r3, r2
 80022d8:	00db      	lsls	r3, r3, #3
 80022da:	4413      	add	r3, r2
 80022dc:	009b      	lsls	r3, r3, #2
 80022de:	440b      	add	r3, r1
 80022e0:	3308      	adds	r3, #8
 80022e2:	6819      	ldr	r1, [r3, #0]
 80022e4:	2301      	movs	r3, #1
 80022e6:	9301      	str	r3, [sp, #4]
 80022e8:	230a      	movs	r3, #10
 80022ea:	9300      	str	r3, [sp, #0]
 80022ec:	230a      	movs	r3, #10
 80022ee:	4a40      	ldr	r2, [pc, #256]	@ (80023f0 <update_scene+0x668>)
 80022f0:	f7fe fd5c 	bl	8000dac <GFX_DrowBitMap_P>
							GFX_DrowBitMap_P(player.x + 8, player.y-2, player_shield_map,10 ,16,1);
 80022f4:	4b3d      	ldr	r3, [pc, #244]	@ (80023ec <update_scene+0x664>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f103 0008 	add.w	r0, r3, #8
 80022fc:	4b3b      	ldr	r3, [pc, #236]	@ (80023ec <update_scene+0x664>)
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	1e99      	subs	r1, r3, #2
 8002302:	2301      	movs	r3, #1
 8002304:	9301      	str	r3, [sp, #4]
 8002306:	2310      	movs	r3, #16
 8002308:	9300      	str	r3, [sp, #0]
 800230a:	230a      	movs	r3, #10
 800230c:	4a39      	ldr	r2, [pc, #228]	@ (80023f4 <update_scene+0x66c>)
 800230e:	f7fe fd4d 	bl	8000dac <GFX_DrowBitMap_P>
							GFX_DrowBitMap_P(player.x, player.y, player_map, 11, 11, 1);
 8002312:	4b36      	ldr	r3, [pc, #216]	@ (80023ec <update_scene+0x664>)
 8002314:	6818      	ldr	r0, [r3, #0]
 8002316:	4b35      	ldr	r3, [pc, #212]	@ (80023ec <update_scene+0x664>)
 8002318:	6859      	ldr	r1, [r3, #4]
 800231a:	2301      	movs	r3, #1
 800231c:	9301      	str	r3, [sp, #4]
 800231e:	230b      	movs	r3, #11
 8002320:	9300      	str	r3, [sp, #0]
 8002322:	230b      	movs	r3, #11
 8002324:	4a34      	ldr	r2, [pc, #208]	@ (80023f8 <update_scene+0x670>)
 8002326:	f7fe fd41 	bl	8000dac <GFX_DrowBitMap_P>

							ssd1327_display();
 800232a:	f001 fbb5 	bl	8003a98 <ssd1327_display>
							if (player.lives <= 0)
 800232e:	4b2f      	ldr	r3, [pc, #188]	@ (80023ec <update_scene+0x664>)
 8002330:	691b      	ldr	r3, [r3, #16]
 8002332:	2b00      	cmp	r3, #0
 8002334:	dc04      	bgt.n	8002340 <update_scene+0x5b8>
							{
								play_dead_anim();
 8002336:	f7ff fb83 	bl	8001a40 <play_dead_anim>
								state = st_dead;
 800233a:	4b30      	ldr	r3, [pc, #192]	@ (80023fc <update_scene+0x674>)
 800233c:	2202      	movs	r2, #2
 800233e:	701a      	strb	r2, [r3, #0]
							}
						}

						// Moving to the left and making special moves
						enemies[i].x -= 1;
 8002340:	7bfa      	ldrb	r2, [r7, #15]
 8002342:	4929      	ldr	r1, [pc, #164]	@ (80023e8 <update_scene+0x660>)
 8002344:	4613      	mov	r3, r2
 8002346:	00db      	lsls	r3, r3, #3
 8002348:	4413      	add	r3, r2
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	440b      	add	r3, r1
 800234e:	3304      	adds	r3, #4
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	7bfa      	ldrb	r2, [r7, #15]
 8002354:	1e59      	subs	r1, r3, #1
 8002356:	4824      	ldr	r0, [pc, #144]	@ (80023e8 <update_scene+0x660>)
 8002358:	4613      	mov	r3, r2
 800235a:	00db      	lsls	r3, r3, #3
 800235c:	4413      	add	r3, r2
 800235e:	009b      	lsls	r3, r3, #2
 8002360:	4403      	add	r3, r0
 8002362:	3304      	adds	r3, #4
 8002364:	6019      	str	r1, [r3, #0]

						switch (enemies[i].type)
 8002366:	7bfa      	ldrb	r2, [r7, #15]
 8002368:	491f      	ldr	r1, [pc, #124]	@ (80023e8 <update_scene+0x660>)
 800236a:	4613      	mov	r3, r2
 800236c:	00db      	lsls	r3, r3, #3
 800236e:	4413      	add	r3, r2
 8002370:	009b      	lsls	r3, r3, #2
 8002372:	440b      	add	r3, r1
 8002374:	330c      	adds	r3, #12
 8002376:	781b      	ldrb	r3, [r3, #0]
 8002378:	2b02      	cmp	r3, #2
 800237a:	d063      	beq.n	8002444 <update_scene+0x6bc>
 800237c:	2b02      	cmp	r3, #2
 800237e:	f300 810c 	bgt.w	800259a <update_scene+0x812>
 8002382:	2b00      	cmp	r3, #0
 8002384:	f000 8104 	beq.w	8002590 <update_scene+0x808>
 8002388:	2b01      	cmp	r3, #1
 800238a:	f040 8106 	bne.w	800259a <update_scene+0x812>
						{
						case et_tracker:
							if (enemies[i].x < 70)
 800238e:	7bfa      	ldrb	r2, [r7, #15]
 8002390:	4915      	ldr	r1, [pc, #84]	@ (80023e8 <update_scene+0x660>)
 8002392:	4613      	mov	r3, r2
 8002394:	00db      	lsls	r3, r3, #3
 8002396:	4413      	add	r3, r2
 8002398:	009b      	lsls	r3, r3, #2
 800239a:	440b      	add	r3, r1
 800239c:	3304      	adds	r3, #4
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	2b45      	cmp	r3, #69	@ 0x45
 80023a2:	f300 80f7 	bgt.w	8002594 <update_scene+0x80c>
							{
								if (player.y > enemies[i].y) enemies[i].y += 1;
 80023a6:	4b11      	ldr	r3, [pc, #68]	@ (80023ec <update_scene+0x664>)
 80023a8:	6859      	ldr	r1, [r3, #4]
 80023aa:	7bfa      	ldrb	r2, [r7, #15]
 80023ac:	480e      	ldr	r0, [pc, #56]	@ (80023e8 <update_scene+0x660>)
 80023ae:	4613      	mov	r3, r2
 80023b0:	00db      	lsls	r3, r3, #3
 80023b2:	4413      	add	r3, r2
 80023b4:	009b      	lsls	r3, r3, #2
 80023b6:	4403      	add	r3, r0
 80023b8:	3308      	adds	r3, #8
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4299      	cmp	r1, r3
 80023be:	dd1f      	ble.n	8002400 <update_scene+0x678>
 80023c0:	7bfa      	ldrb	r2, [r7, #15]
 80023c2:	4909      	ldr	r1, [pc, #36]	@ (80023e8 <update_scene+0x660>)
 80023c4:	4613      	mov	r3, r2
 80023c6:	00db      	lsls	r3, r3, #3
 80023c8:	4413      	add	r3, r2
 80023ca:	009b      	lsls	r3, r3, #2
 80023cc:	440b      	add	r3, r1
 80023ce:	3308      	adds	r3, #8
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	7bfa      	ldrb	r2, [r7, #15]
 80023d4:	1c59      	adds	r1, r3, #1
 80023d6:	4804      	ldr	r0, [pc, #16]	@ (80023e8 <update_scene+0x660>)
 80023d8:	4613      	mov	r3, r2
 80023da:	00db      	lsls	r3, r3, #3
 80023dc:	4413      	add	r3, r2
 80023de:	009b      	lsls	r3, r3, #2
 80023e0:	4403      	add	r3, r0
 80023e2:	3308      	adds	r3, #8
 80023e4:	6019      	str	r1, [r3, #0]
 80023e6:	e00b      	b.n	8002400 <update_scene+0x678>
 80023e8:	200004a4 	.word	0x200004a4
 80023ec:	20000160 	.word	0x20000160
 80023f0:	08009758 	.word	0x08009758
 80023f4:	08009720 	.word	0x08009720
 80023f8:	08009558 	.word	0x08009558
 80023fc:	20001a04 	.word	0x20001a04
								if (player.y < enemies[i].y) enemies[i].y -= 1;
 8002400:	4bad      	ldr	r3, [pc, #692]	@ (80026b8 <update_scene+0x930>)
 8002402:	6859      	ldr	r1, [r3, #4]
 8002404:	7bfa      	ldrb	r2, [r7, #15]
 8002406:	48ad      	ldr	r0, [pc, #692]	@ (80026bc <update_scene+0x934>)
 8002408:	4613      	mov	r3, r2
 800240a:	00db      	lsls	r3, r3, #3
 800240c:	4413      	add	r3, r2
 800240e:	009b      	lsls	r3, r3, #2
 8002410:	4403      	add	r3, r0
 8002412:	3308      	adds	r3, #8
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4299      	cmp	r1, r3
 8002418:	f280 80bc 	bge.w	8002594 <update_scene+0x80c>
 800241c:	7bfa      	ldrb	r2, [r7, #15]
 800241e:	49a7      	ldr	r1, [pc, #668]	@ (80026bc <update_scene+0x934>)
 8002420:	4613      	mov	r3, r2
 8002422:	00db      	lsls	r3, r3, #3
 8002424:	4413      	add	r3, r2
 8002426:	009b      	lsls	r3, r3, #2
 8002428:	440b      	add	r3, r1
 800242a:	3308      	adds	r3, #8
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	7bfa      	ldrb	r2, [r7, #15]
 8002430:	1e59      	subs	r1, r3, #1
 8002432:	48a2      	ldr	r0, [pc, #648]	@ (80026bc <update_scene+0x934>)
 8002434:	4613      	mov	r3, r2
 8002436:	00db      	lsls	r3, r3, #3
 8002438:	4413      	add	r3, r2
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	4403      	add	r3, r0
 800243e:	3308      	adds	r3, #8
 8002440:	6019      	str	r1, [r3, #0]
							}
							break;
 8002442:	e0a7      	b.n	8002594 <update_scene+0x80c>
						case et_diver:
							break;
						case et_bobber:
							if((enemies[i].x%4 == 0) && (enemies[i].x%8 == 0))
 8002444:	7bfa      	ldrb	r2, [r7, #15]
 8002446:	499d      	ldr	r1, [pc, #628]	@ (80026bc <update_scene+0x934>)
 8002448:	4613      	mov	r3, r2
 800244a:	00db      	lsls	r3, r3, #3
 800244c:	4413      	add	r3, r2
 800244e:	009b      	lsls	r3, r3, #2
 8002450:	440b      	add	r3, r1
 8002452:	3304      	adds	r3, #4
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f003 0303 	and.w	r3, r3, #3
 800245a:	2b00      	cmp	r3, #0
 800245c:	d11f      	bne.n	800249e <update_scene+0x716>
 800245e:	7bfa      	ldrb	r2, [r7, #15]
 8002460:	4996      	ldr	r1, [pc, #600]	@ (80026bc <update_scene+0x934>)
 8002462:	4613      	mov	r3, r2
 8002464:	00db      	lsls	r3, r3, #3
 8002466:	4413      	add	r3, r2
 8002468:	009b      	lsls	r3, r3, #2
 800246a:	440b      	add	r3, r1
 800246c:	3304      	adds	r3, #4
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f003 0307 	and.w	r3, r3, #7
 8002474:	2b00      	cmp	r3, #0
 8002476:	d112      	bne.n	800249e <update_scene+0x716>
								enemies[i].y += 4;
 8002478:	7bfa      	ldrb	r2, [r7, #15]
 800247a:	4990      	ldr	r1, [pc, #576]	@ (80026bc <update_scene+0x934>)
 800247c:	4613      	mov	r3, r2
 800247e:	00db      	lsls	r3, r3, #3
 8002480:	4413      	add	r3, r2
 8002482:	009b      	lsls	r3, r3, #2
 8002484:	440b      	add	r3, r1
 8002486:	3308      	adds	r3, #8
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	7bfa      	ldrb	r2, [r7, #15]
 800248c:	1d19      	adds	r1, r3, #4
 800248e:	488b      	ldr	r0, [pc, #556]	@ (80026bc <update_scene+0x934>)
 8002490:	4613      	mov	r3, r2
 8002492:	00db      	lsls	r3, r3, #3
 8002494:	4413      	add	r3, r2
 8002496:	009b      	lsls	r3, r3, #2
 8002498:	4403      	add	r3, r0
 800249a:	3308      	adds	r3, #8
 800249c:	6019      	str	r1, [r3, #0]
							if((enemies[i].x%4 == 0) && !(enemies[i].x%8 == 0))
 800249e:	7bfa      	ldrb	r2, [r7, #15]
 80024a0:	4986      	ldr	r1, [pc, #536]	@ (80026bc <update_scene+0x934>)
 80024a2:	4613      	mov	r3, r2
 80024a4:	00db      	lsls	r3, r3, #3
 80024a6:	4413      	add	r3, r2
 80024a8:	009b      	lsls	r3, r3, #2
 80024aa:	440b      	add	r3, r1
 80024ac:	3304      	adds	r3, #4
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f003 0303 	and.w	r3, r3, #3
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d11f      	bne.n	80024f8 <update_scene+0x770>
 80024b8:	7bfa      	ldrb	r2, [r7, #15]
 80024ba:	4980      	ldr	r1, [pc, #512]	@ (80026bc <update_scene+0x934>)
 80024bc:	4613      	mov	r3, r2
 80024be:	00db      	lsls	r3, r3, #3
 80024c0:	4413      	add	r3, r2
 80024c2:	009b      	lsls	r3, r3, #2
 80024c4:	440b      	add	r3, r1
 80024c6:	3304      	adds	r3, #4
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 0307 	and.w	r3, r3, #7
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d012      	beq.n	80024f8 <update_scene+0x770>
								enemies[i].y -= 4;
 80024d2:	7bfa      	ldrb	r2, [r7, #15]
 80024d4:	4979      	ldr	r1, [pc, #484]	@ (80026bc <update_scene+0x934>)
 80024d6:	4613      	mov	r3, r2
 80024d8:	00db      	lsls	r3, r3, #3
 80024da:	4413      	add	r3, r2
 80024dc:	009b      	lsls	r3, r3, #2
 80024de:	440b      	add	r3, r1
 80024e0:	3308      	adds	r3, #8
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	7bfa      	ldrb	r2, [r7, #15]
 80024e6:	1f19      	subs	r1, r3, #4
 80024e8:	4874      	ldr	r0, [pc, #464]	@ (80026bc <update_scene+0x934>)
 80024ea:	4613      	mov	r3, r2
 80024ec:	00db      	lsls	r3, r3, #3
 80024ee:	4413      	add	r3, r2
 80024f0:	009b      	lsls	r3, r3, #2
 80024f2:	4403      	add	r3, r0
 80024f4:	3308      	adds	r3, #8
 80024f6:	6019      	str	r1, [r3, #0]
							if (enemies[i].x < 70)
 80024f8:	7bfa      	ldrb	r2, [r7, #15]
 80024fa:	4970      	ldr	r1, [pc, #448]	@ (80026bc <update_scene+0x934>)
 80024fc:	4613      	mov	r3, r2
 80024fe:	00db      	lsls	r3, r3, #3
 8002500:	4413      	add	r3, r2
 8002502:	009b      	lsls	r3, r3, #2
 8002504:	440b      	add	r3, r1
 8002506:	3304      	adds	r3, #4
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	2b45      	cmp	r3, #69	@ 0x45
 800250c:	dc44      	bgt.n	8002598 <update_scene+0x810>
							{
								if (player.y > enemies[i].y) enemies[i].y += 1;
 800250e:	4b6a      	ldr	r3, [pc, #424]	@ (80026b8 <update_scene+0x930>)
 8002510:	6859      	ldr	r1, [r3, #4]
 8002512:	7bfa      	ldrb	r2, [r7, #15]
 8002514:	4869      	ldr	r0, [pc, #420]	@ (80026bc <update_scene+0x934>)
 8002516:	4613      	mov	r3, r2
 8002518:	00db      	lsls	r3, r3, #3
 800251a:	4413      	add	r3, r2
 800251c:	009b      	lsls	r3, r3, #2
 800251e:	4403      	add	r3, r0
 8002520:	3308      	adds	r3, #8
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4299      	cmp	r1, r3
 8002526:	dd12      	ble.n	800254e <update_scene+0x7c6>
 8002528:	7bfa      	ldrb	r2, [r7, #15]
 800252a:	4964      	ldr	r1, [pc, #400]	@ (80026bc <update_scene+0x934>)
 800252c:	4613      	mov	r3, r2
 800252e:	00db      	lsls	r3, r3, #3
 8002530:	4413      	add	r3, r2
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	440b      	add	r3, r1
 8002536:	3308      	adds	r3, #8
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	7bfa      	ldrb	r2, [r7, #15]
 800253c:	1c59      	adds	r1, r3, #1
 800253e:	485f      	ldr	r0, [pc, #380]	@ (80026bc <update_scene+0x934>)
 8002540:	4613      	mov	r3, r2
 8002542:	00db      	lsls	r3, r3, #3
 8002544:	4413      	add	r3, r2
 8002546:	009b      	lsls	r3, r3, #2
 8002548:	4403      	add	r3, r0
 800254a:	3308      	adds	r3, #8
 800254c:	6019      	str	r1, [r3, #0]
								if (player.y < enemies[i].y) enemies[i].y -= 1;
 800254e:	4b5a      	ldr	r3, [pc, #360]	@ (80026b8 <update_scene+0x930>)
 8002550:	6859      	ldr	r1, [r3, #4]
 8002552:	7bfa      	ldrb	r2, [r7, #15]
 8002554:	4859      	ldr	r0, [pc, #356]	@ (80026bc <update_scene+0x934>)
 8002556:	4613      	mov	r3, r2
 8002558:	00db      	lsls	r3, r3, #3
 800255a:	4413      	add	r3, r2
 800255c:	009b      	lsls	r3, r3, #2
 800255e:	4403      	add	r3, r0
 8002560:	3308      	adds	r3, #8
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4299      	cmp	r1, r3
 8002566:	da17      	bge.n	8002598 <update_scene+0x810>
 8002568:	7bfa      	ldrb	r2, [r7, #15]
 800256a:	4954      	ldr	r1, [pc, #336]	@ (80026bc <update_scene+0x934>)
 800256c:	4613      	mov	r3, r2
 800256e:	00db      	lsls	r3, r3, #3
 8002570:	4413      	add	r3, r2
 8002572:	009b      	lsls	r3, r3, #2
 8002574:	440b      	add	r3, r1
 8002576:	3308      	adds	r3, #8
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	7bfa      	ldrb	r2, [r7, #15]
 800257c:	1e59      	subs	r1, r3, #1
 800257e:	484f      	ldr	r0, [pc, #316]	@ (80026bc <update_scene+0x934>)
 8002580:	4613      	mov	r3, r2
 8002582:	00db      	lsls	r3, r3, #3
 8002584:	4413      	add	r3, r2
 8002586:	009b      	lsls	r3, r3, #2
 8002588:	4403      	add	r3, r0
 800258a:	3308      	adds	r3, #8
 800258c:	6019      	str	r1, [r3, #0]
							}
							break;
 800258e:	e003      	b.n	8002598 <update_scene+0x810>
							break;
 8002590:	bf00      	nop
 8002592:	e002      	b.n	800259a <update_scene+0x812>
							break;
 8002594:	bf00      	nop
 8002596:	e000      	b.n	800259a <update_scene+0x812>
							break;
 8002598:	bf00      	nop
						}

						// If off-screen, deactivation
						if (enemies[i].x < -4)
 800259a:	7bfa      	ldrb	r2, [r7, #15]
 800259c:	4947      	ldr	r1, [pc, #284]	@ (80026bc <update_scene+0x934>)
 800259e:	4613      	mov	r3, r2
 80025a0:	00db      	lsls	r3, r3, #3
 80025a2:	4413      	add	r3, r2
 80025a4:	009b      	lsls	r3, r3, #2
 80025a6:	440b      	add	r3, r1
 80025a8:	3304      	adds	r3, #4
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f113 0f04 	cmn.w	r3, #4
 80025b0:	da1c      	bge.n	80025ec <update_scene+0x864>
						{
							enemies[i].active = false;
 80025b2:	7bfa      	ldrb	r2, [r7, #15]
 80025b4:	4941      	ldr	r1, [pc, #260]	@ (80026bc <update_scene+0x934>)
 80025b6:	4613      	mov	r3, r2
 80025b8:	00db      	lsls	r3, r3, #3
 80025ba:	4413      	add	r3, r2
 80025bc:	009b      	lsls	r3, r3, #2
 80025be:	440b      	add	r3, r1
 80025c0:	2200      	movs	r2, #0
 80025c2:	701a      	strb	r2, [r3, #0]
							enemies[i].tracked_by_missile = false;
 80025c4:	7bfa      	ldrb	r2, [r7, #15]
 80025c6:	493d      	ldr	r1, [pc, #244]	@ (80026bc <update_scene+0x934>)
 80025c8:	4613      	mov	r3, r2
 80025ca:	00db      	lsls	r3, r3, #3
 80025cc:	4413      	add	r3, r2
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	440b      	add	r3, r1
 80025d2:	331c      	adds	r3, #28
 80025d4:	2200      	movs	r2, #0
 80025d6:	701a      	strb	r2, [r3, #0]
							enemies[i].track_number = 0;
 80025d8:	7bfa      	ldrb	r2, [r7, #15]
 80025da:	4938      	ldr	r1, [pc, #224]	@ (80026bc <update_scene+0x934>)
 80025dc:	4613      	mov	r3, r2
 80025de:	00db      	lsls	r3, r3, #3
 80025e0:	4413      	add	r3, r2
 80025e2:	009b      	lsls	r3, r3, #2
 80025e4:	440b      	add	r3, r1
 80025e6:	3320      	adds	r3, #32
 80025e8:	2200      	movs	r2, #0
 80025ea:	601a      	str	r2, [r3, #0]
	for (i = 0; i < num_enemies; ++i)
 80025ec:	7bfb      	ldrb	r3, [r7, #15]
 80025ee:	3301      	adds	r3, #1
 80025f0:	73fb      	strb	r3, [r7, #15]
 80025f2:	7bfb      	ldrb	r3, [r7, #15]
 80025f4:	2b09      	cmp	r3, #9
 80025f6:	f67f ad89 	bls.w	800210c <update_scene+0x384>
				}
		}
	}

	//------------- Boss service ---------------
	if(boss.active)
 80025fa:	4b31      	ldr	r3, [pc, #196]	@ (80026c0 <update_scene+0x938>)
 80025fc:	781b      	ldrb	r3, [r3, #0]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	f000 8226 	beq.w	8002a50 <update_scene+0xcc8>
	{
		boss.next_update -= 1;
 8002604:	4b2e      	ldr	r3, [pc, #184]	@ (80026c0 <update_scene+0x938>)
 8002606:	68db      	ldr	r3, [r3, #12]
 8002608:	3b01      	subs	r3, #1
 800260a:	4a2d      	ldr	r2, [pc, #180]	@ (80026c0 <update_scene+0x938>)
 800260c:	60d3      	str	r3, [r2, #12]

		//Boss position
		if(boss.next_update <= 0)
 800260e:	4b2c      	ldr	r3, [pc, #176]	@ (80026c0 <update_scene+0x938>)
 8002610:	68db      	ldr	r3, [r3, #12]
 8002612:	2b00      	cmp	r3, #0
 8002614:	dc38      	bgt.n	8002688 <update_scene+0x900>
		{
			boss.next_update = boss.update_delay;
 8002616:	4b2a      	ldr	r3, [pc, #168]	@ (80026c0 <update_scene+0x938>)
 8002618:	691b      	ldr	r3, [r3, #16]
 800261a:	4a29      	ldr	r2, [pc, #164]	@ (80026c0 <update_scene+0x938>)
 800261c:	60d3      	str	r3, [r2, #12]

			y += dy;
 800261e:	4b29      	ldr	r3, [pc, #164]	@ (80026c4 <update_scene+0x93c>)
 8002620:	781a      	ldrb	r2, [r3, #0]
 8002622:	4b29      	ldr	r3, [pc, #164]	@ (80026c8 <update_scene+0x940>)
 8002624:	781b      	ldrb	r3, [r3, #0]
 8002626:	4413      	add	r3, r2
 8002628:	b2da      	uxtb	r2, r3
 800262a:	4b26      	ldr	r3, [pc, #152]	@ (80026c4 <update_scene+0x93c>)
 800262c:	701a      	strb	r2, [r3, #0]
			if (y < 1 || y > (screen_height - 24)) dy = -dy;
 800262e:	4b25      	ldr	r3, [pc, #148]	@ (80026c4 <update_scene+0x93c>)
 8002630:	781b      	ldrb	r3, [r3, #0]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d003      	beq.n	800263e <update_scene+0x8b6>
 8002636:	4b23      	ldr	r3, [pc, #140]	@ (80026c4 <update_scene+0x93c>)
 8002638:	781b      	ldrb	r3, [r3, #0]
 800263a:	2b68      	cmp	r3, #104	@ 0x68
 800263c:	d905      	bls.n	800264a <update_scene+0x8c2>
 800263e:	4b22      	ldr	r3, [pc, #136]	@ (80026c8 <update_scene+0x940>)
 8002640:	781b      	ldrb	r3, [r3, #0]
 8002642:	425b      	negs	r3, r3
 8002644:	b2da      	uxtb	r2, r3
 8002646:	4b20      	ldr	r3, [pc, #128]	@ (80026c8 <update_scene+0x940>)
 8002648:	701a      	strb	r2, [r3, #0]

			boss.y = y;
 800264a:	4b1e      	ldr	r3, [pc, #120]	@ (80026c4 <update_scene+0x93c>)
 800264c:	781b      	ldrb	r3, [r3, #0]
 800264e:	461a      	mov	r2, r3
 8002650:	4b1b      	ldr	r3, [pc, #108]	@ (80026c0 <update_scene+0x938>)
 8002652:	609a      	str	r2, [r3, #8]

			if(boss.y < 10) boss.y = 10;
 8002654:	4b1a      	ldr	r3, [pc, #104]	@ (80026c0 <update_scene+0x938>)
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	2b09      	cmp	r3, #9
 800265a:	dc02      	bgt.n	8002662 <update_scene+0x8da>
 800265c:	4b18      	ldr	r3, [pc, #96]	@ (80026c0 <update_scene+0x938>)
 800265e:	220a      	movs	r2, #10
 8002660:	609a      	str	r2, [r3, #8]
			if(boss.y > (screen_height - 24)) boss.y = (screen_height - 24);
 8002662:	4b17      	ldr	r3, [pc, #92]	@ (80026c0 <update_scene+0x938>)
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	2b68      	cmp	r3, #104	@ 0x68
 8002668:	dd02      	ble.n	8002670 <update_scene+0x8e8>
 800266a:	4b15      	ldr	r3, [pc, #84]	@ (80026c0 <update_scene+0x938>)
 800266c:	2268      	movs	r2, #104	@ 0x68
 800266e:	609a      	str	r2, [r3, #8]

			boss.x -= 1;
 8002670:	4b13      	ldr	r3, [pc, #76]	@ (80026c0 <update_scene+0x938>)
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	3b01      	subs	r3, #1
 8002676:	4a12      	ldr	r2, [pc, #72]	@ (80026c0 <update_scene+0x938>)
 8002678:	6053      	str	r3, [r2, #4]
			if(boss.x < 100) boss.x = 100;
 800267a:	4b11      	ldr	r3, [pc, #68]	@ (80026c0 <update_scene+0x938>)
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	2b63      	cmp	r3, #99	@ 0x63
 8002680:	dc02      	bgt.n	8002688 <update_scene+0x900>
 8002682:	4b0f      	ldr	r3, [pc, #60]	@ (80026c0 <update_scene+0x938>)
 8002684:	2264      	movs	r2, #100	@ 0x64
 8002686:	605a      	str	r2, [r3, #4]
		}

		//Frequency of boss shots
		if((rand()%100) < (boss.level * 2 ))
 8002688:	f004 fd74 	bl	8007174 <rand>
 800268c:	4602      	mov	r2, r0
 800268e:	4b0f      	ldr	r3, [pc, #60]	@ (80026cc <update_scene+0x944>)
 8002690:	fb83 1302 	smull	r1, r3, r3, r2
 8002694:	1159      	asrs	r1, r3, #5
 8002696:	17d3      	asrs	r3, r2, #31
 8002698:	1acb      	subs	r3, r1, r3
 800269a:	2164      	movs	r1, #100	@ 0x64
 800269c:	fb01 f303 	mul.w	r3, r1, r3
 80026a0:	1ad3      	subs	r3, r2, r3
 80026a2:	4a07      	ldr	r2, [pc, #28]	@ (80026c0 <update_scene+0x938>)
 80026a4:	6992      	ldr	r2, [r2, #24]
 80026a6:	0052      	lsls	r2, r2, #1
 80026a8:	4293      	cmp	r3, r2
 80026aa:	da01      	bge.n	80026b0 <update_scene+0x928>
			boss_shoot();
 80026ac:	f7ff fb00 	bl	8001cb0 <boss_shoot>

		for (i = 0; i < num_boss_shots; ++i)
 80026b0:	2300      	movs	r3, #0
 80026b2:	73fb      	strb	r3, [r7, #15]
 80026b4:	e040      	b.n	8002738 <update_scene+0x9b0>
 80026b6:	bf00      	nop
 80026b8:	20000160 	.word	0x20000160
 80026bc:	200004a4 	.word	0x200004a4
 80026c0:	20001994 	.word	0x20001994
 80026c4:	20001a0c 	.word	0x20001a0c
 80026c8:	20000004 	.word	0x20000004
 80026cc:	51eb851f 	.word	0x51eb851f
		{
			if (boss_shots[i].active)
 80026d0:	7bfa      	ldrb	r2, [r7, #15]
 80026d2:	4986      	ldr	r1, [pc, #536]	@ (80028ec <update_scene+0xb64>)
 80026d4:	4613      	mov	r3, r2
 80026d6:	009b      	lsls	r3, r3, #2
 80026d8:	4413      	add	r3, r2
 80026da:	009b      	lsls	r3, r3, #2
 80026dc:	440b      	add	r3, r1
 80026de:	781b      	ldrb	r3, [r3, #0]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d011      	beq.n	8002708 <update_scene+0x980>
				--boss_shots[i].x;
 80026e4:	7bfa      	ldrb	r2, [r7, #15]
 80026e6:	4981      	ldr	r1, [pc, #516]	@ (80028ec <update_scene+0xb64>)
 80026e8:	4613      	mov	r3, r2
 80026ea:	009b      	lsls	r3, r3, #2
 80026ec:	4413      	add	r3, r2
 80026ee:	009b      	lsls	r3, r3, #2
 80026f0:	440b      	add	r3, r1
 80026f2:	3304      	adds	r3, #4
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	1e59      	subs	r1, r3, #1
 80026f8:	487c      	ldr	r0, [pc, #496]	@ (80028ec <update_scene+0xb64>)
 80026fa:	4613      	mov	r3, r2
 80026fc:	009b      	lsls	r3, r3, #2
 80026fe:	4413      	add	r3, r2
 8002700:	009b      	lsls	r3, r3, #2
 8002702:	4403      	add	r3, r0
 8002704:	3304      	adds	r3, #4
 8002706:	6019      	str	r1, [r3, #0]
			if (boss_shots[i].x < -4)
 8002708:	7bfa      	ldrb	r2, [r7, #15]
 800270a:	4978      	ldr	r1, [pc, #480]	@ (80028ec <update_scene+0xb64>)
 800270c:	4613      	mov	r3, r2
 800270e:	009b      	lsls	r3, r3, #2
 8002710:	4413      	add	r3, r2
 8002712:	009b      	lsls	r3, r3, #2
 8002714:	440b      	add	r3, r1
 8002716:	3304      	adds	r3, #4
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f113 0f04 	cmn.w	r3, #4
 800271e:	da08      	bge.n	8002732 <update_scene+0x9aa>
				boss_shots[i].active = false;
 8002720:	7bfa      	ldrb	r2, [r7, #15]
 8002722:	4972      	ldr	r1, [pc, #456]	@ (80028ec <update_scene+0xb64>)
 8002724:	4613      	mov	r3, r2
 8002726:	009b      	lsls	r3, r3, #2
 8002728:	4413      	add	r3, r2
 800272a:	009b      	lsls	r3, r3, #2
 800272c:	440b      	add	r3, r1
 800272e:	2200      	movs	r2, #0
 8002730:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < num_boss_shots; ++i)
 8002732:	7bfb      	ldrb	r3, [r7, #15]
 8002734:	3301      	adds	r3, #1
 8002736:	73fb      	strb	r3, [r7, #15]
 8002738:	7bfb      	ldrb	r3, [r7, #15]
 800273a:	2b04      	cmp	r3, #4
 800273c:	d9c8      	bls.n	80026d0 <update_scene+0x948>
		}

		for(i = 0; i < num_boss_shots; i++)
 800273e:	2300      	movs	r3, #0
 8002740:	73fb      	strb	r3, [r7, #15]
 8002742:	e0cc      	b.n	80028de <update_scene+0xb56>
		{
			if(boss_shots[i].active)
 8002744:	7bfa      	ldrb	r2, [r7, #15]
 8002746:	4969      	ldr	r1, [pc, #420]	@ (80028ec <update_scene+0xb64>)
 8002748:	4613      	mov	r3, r2
 800274a:	009b      	lsls	r3, r3, #2
 800274c:	4413      	add	r3, r2
 800274e:	009b      	lsls	r3, r3, #2
 8002750:	440b      	add	r3, r1
 8002752:	781b      	ldrb	r3, [r3, #0]
 8002754:	2b00      	cmp	r3, #0
 8002756:	f000 80bf 	beq.w	80028d8 <update_scene+0xb50>
			{
				if (colliding(boss_shots[i].x,boss_shots[i].y, player.x, player.y) 	||
 800275a:	7bfa      	ldrb	r2, [r7, #15]
 800275c:	4963      	ldr	r1, [pc, #396]	@ (80028ec <update_scene+0xb64>)
 800275e:	4613      	mov	r3, r2
 8002760:	009b      	lsls	r3, r3, #2
 8002762:	4413      	add	r3, r2
 8002764:	009b      	lsls	r3, r3, #2
 8002766:	440b      	add	r3, r1
 8002768:	3304      	adds	r3, #4
 800276a:	6818      	ldr	r0, [r3, #0]
 800276c:	7bfa      	ldrb	r2, [r7, #15]
 800276e:	495f      	ldr	r1, [pc, #380]	@ (80028ec <update_scene+0xb64>)
 8002770:	4613      	mov	r3, r2
 8002772:	009b      	lsls	r3, r3, #2
 8002774:	4413      	add	r3, r2
 8002776:	009b      	lsls	r3, r3, #2
 8002778:	440b      	add	r3, r1
 800277a:	3308      	adds	r3, #8
 800277c:	6819      	ldr	r1, [r3, #0]
 800277e:	4b5c      	ldr	r3, [pc, #368]	@ (80028f0 <update_scene+0xb68>)
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	4b5b      	ldr	r3, [pc, #364]	@ (80028f0 <update_scene+0xb68>)
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	f7ff fad7 	bl	8001d38 <colliding>
 800278a:	4603      	mov	r3, r0
 800278c:	2b00      	cmp	r3, #0
 800278e:	d154      	bne.n	800283a <update_scene+0xab2>
					colliding(boss_shots[i].x,boss_shots[i].y, player.x, player.y+5) 	||
 8002790:	7bfa      	ldrb	r2, [r7, #15]
 8002792:	4956      	ldr	r1, [pc, #344]	@ (80028ec <update_scene+0xb64>)
 8002794:	4613      	mov	r3, r2
 8002796:	009b      	lsls	r3, r3, #2
 8002798:	4413      	add	r3, r2
 800279a:	009b      	lsls	r3, r3, #2
 800279c:	440b      	add	r3, r1
 800279e:	3304      	adds	r3, #4
 80027a0:	6818      	ldr	r0, [r3, #0]
 80027a2:	7bfa      	ldrb	r2, [r7, #15]
 80027a4:	4951      	ldr	r1, [pc, #324]	@ (80028ec <update_scene+0xb64>)
 80027a6:	4613      	mov	r3, r2
 80027a8:	009b      	lsls	r3, r3, #2
 80027aa:	4413      	add	r3, r2
 80027ac:	009b      	lsls	r3, r3, #2
 80027ae:	440b      	add	r3, r1
 80027b0:	3308      	adds	r3, #8
 80027b2:	6819      	ldr	r1, [r3, #0]
 80027b4:	4b4e      	ldr	r3, [pc, #312]	@ (80028f0 <update_scene+0xb68>)
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	4b4d      	ldr	r3, [pc, #308]	@ (80028f0 <update_scene+0xb68>)
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	3305      	adds	r3, #5
 80027be:	f7ff fabb 	bl	8001d38 <colliding>
 80027c2:	4603      	mov	r3, r0
				if (colliding(boss_shots[i].x,boss_shots[i].y, player.x, player.y) 	||
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d138      	bne.n	800283a <update_scene+0xab2>
					colliding(boss_shots[i].x,boss_shots[i].y, player.x+7, player.y)	||
 80027c8:	7bfa      	ldrb	r2, [r7, #15]
 80027ca:	4948      	ldr	r1, [pc, #288]	@ (80028ec <update_scene+0xb64>)
 80027cc:	4613      	mov	r3, r2
 80027ce:	009b      	lsls	r3, r3, #2
 80027d0:	4413      	add	r3, r2
 80027d2:	009b      	lsls	r3, r3, #2
 80027d4:	440b      	add	r3, r1
 80027d6:	3304      	adds	r3, #4
 80027d8:	6818      	ldr	r0, [r3, #0]
 80027da:	7bfa      	ldrb	r2, [r7, #15]
 80027dc:	4943      	ldr	r1, [pc, #268]	@ (80028ec <update_scene+0xb64>)
 80027de:	4613      	mov	r3, r2
 80027e0:	009b      	lsls	r3, r3, #2
 80027e2:	4413      	add	r3, r2
 80027e4:	009b      	lsls	r3, r3, #2
 80027e6:	440b      	add	r3, r1
 80027e8:	3308      	adds	r3, #8
 80027ea:	6819      	ldr	r1, [r3, #0]
 80027ec:	4b40      	ldr	r3, [pc, #256]	@ (80028f0 <update_scene+0xb68>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	1dda      	adds	r2, r3, #7
 80027f2:	4b3f      	ldr	r3, [pc, #252]	@ (80028f0 <update_scene+0xb68>)
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	f7ff fa9f 	bl	8001d38 <colliding>
 80027fa:	4603      	mov	r3, r0
					colliding(boss_shots[i].x,boss_shots[i].y, player.x, player.y+5) 	||
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d11c      	bne.n	800283a <update_scene+0xab2>
					colliding(boss_shots[i].x,boss_shots[i].y, player.x+7, player.y+5))
 8002800:	7bfa      	ldrb	r2, [r7, #15]
 8002802:	493a      	ldr	r1, [pc, #232]	@ (80028ec <update_scene+0xb64>)
 8002804:	4613      	mov	r3, r2
 8002806:	009b      	lsls	r3, r3, #2
 8002808:	4413      	add	r3, r2
 800280a:	009b      	lsls	r3, r3, #2
 800280c:	440b      	add	r3, r1
 800280e:	3304      	adds	r3, #4
 8002810:	6818      	ldr	r0, [r3, #0]
 8002812:	7bfa      	ldrb	r2, [r7, #15]
 8002814:	4935      	ldr	r1, [pc, #212]	@ (80028ec <update_scene+0xb64>)
 8002816:	4613      	mov	r3, r2
 8002818:	009b      	lsls	r3, r3, #2
 800281a:	4413      	add	r3, r2
 800281c:	009b      	lsls	r3, r3, #2
 800281e:	440b      	add	r3, r1
 8002820:	3308      	adds	r3, #8
 8002822:	6819      	ldr	r1, [r3, #0]
 8002824:	4b32      	ldr	r3, [pc, #200]	@ (80028f0 <update_scene+0xb68>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	1dda      	adds	r2, r3, #7
 800282a:	4b31      	ldr	r3, [pc, #196]	@ (80028f0 <update_scene+0xb68>)
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	3305      	adds	r3, #5
 8002830:	f7ff fa82 	bl	8001d38 <colliding>
 8002834:	4603      	mov	r3, r0
					colliding(boss_shots[i].x,boss_shots[i].y, player.x+7, player.y)	||
 8002836:	2b00      	cmp	r3, #0
 8002838:	d04e      	beq.n	80028d8 <update_scene+0xb50>
				{
					player.lives -= 1;;
 800283a:	4b2d      	ldr	r3, [pc, #180]	@ (80028f0 <update_scene+0xb68>)
 800283c:	691b      	ldr	r3, [r3, #16]
 800283e:	3b01      	subs	r3, #1
 8002840:	4a2b      	ldr	r2, [pc, #172]	@ (80028f0 <update_scene+0xb68>)
 8002842:	6113      	str	r3, [r2, #16]
					boss_shots[i].active = false;
 8002844:	7bfa      	ldrb	r2, [r7, #15]
 8002846:	4929      	ldr	r1, [pc, #164]	@ (80028ec <update_scene+0xb64>)
 8002848:	4613      	mov	r3, r2
 800284a:	009b      	lsls	r3, r3, #2
 800284c:	4413      	add	r3, r2
 800284e:	009b      	lsls	r3, r3, #2
 8002850:	440b      	add	r3, r1
 8002852:	2200      	movs	r2, #0
 8002854:	701a      	strb	r2, [r3, #0]
					GFX_DrowBitMap_P(boss_shots[i].x+2, boss_shots[i].y, explosion_map,10,10,1);
 8002856:	7bfa      	ldrb	r2, [r7, #15]
 8002858:	4924      	ldr	r1, [pc, #144]	@ (80028ec <update_scene+0xb64>)
 800285a:	4613      	mov	r3, r2
 800285c:	009b      	lsls	r3, r3, #2
 800285e:	4413      	add	r3, r2
 8002860:	009b      	lsls	r3, r3, #2
 8002862:	440b      	add	r3, r1
 8002864:	3304      	adds	r3, #4
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	1c98      	adds	r0, r3, #2
 800286a:	7bfa      	ldrb	r2, [r7, #15]
 800286c:	491f      	ldr	r1, [pc, #124]	@ (80028ec <update_scene+0xb64>)
 800286e:	4613      	mov	r3, r2
 8002870:	009b      	lsls	r3, r3, #2
 8002872:	4413      	add	r3, r2
 8002874:	009b      	lsls	r3, r3, #2
 8002876:	440b      	add	r3, r1
 8002878:	3308      	adds	r3, #8
 800287a:	6819      	ldr	r1, [r3, #0]
 800287c:	2301      	movs	r3, #1
 800287e:	9301      	str	r3, [sp, #4]
 8002880:	230a      	movs	r3, #10
 8002882:	9300      	str	r3, [sp, #0]
 8002884:	230a      	movs	r3, #10
 8002886:	4a1b      	ldr	r2, [pc, #108]	@ (80028f4 <update_scene+0xb6c>)
 8002888:	f7fe fa90 	bl	8000dac <GFX_DrowBitMap_P>
					GFX_DrowBitMap_P(player.x + 8, player.y-2, player_shield_map,10 ,16,1);
 800288c:	4b18      	ldr	r3, [pc, #96]	@ (80028f0 <update_scene+0xb68>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f103 0008 	add.w	r0, r3, #8
 8002894:	4b16      	ldr	r3, [pc, #88]	@ (80028f0 <update_scene+0xb68>)
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	1e99      	subs	r1, r3, #2
 800289a:	2301      	movs	r3, #1
 800289c:	9301      	str	r3, [sp, #4]
 800289e:	2310      	movs	r3, #16
 80028a0:	9300      	str	r3, [sp, #0]
 80028a2:	230a      	movs	r3, #10
 80028a4:	4a14      	ldr	r2, [pc, #80]	@ (80028f8 <update_scene+0xb70>)
 80028a6:	f7fe fa81 	bl	8000dac <GFX_DrowBitMap_P>
					GFX_DrowBitMap_P(player.x, player.y, player_map, 11, 11, 1);
 80028aa:	4b11      	ldr	r3, [pc, #68]	@ (80028f0 <update_scene+0xb68>)
 80028ac:	6818      	ldr	r0, [r3, #0]
 80028ae:	4b10      	ldr	r3, [pc, #64]	@ (80028f0 <update_scene+0xb68>)
 80028b0:	6859      	ldr	r1, [r3, #4]
 80028b2:	2301      	movs	r3, #1
 80028b4:	9301      	str	r3, [sp, #4]
 80028b6:	230b      	movs	r3, #11
 80028b8:	9300      	str	r3, [sp, #0]
 80028ba:	230b      	movs	r3, #11
 80028bc:	4a0f      	ldr	r2, [pc, #60]	@ (80028fc <update_scene+0xb74>)
 80028be:	f7fe fa75 	bl	8000dac <GFX_DrowBitMap_P>

					ssd1327_display();
 80028c2:	f001 f8e9 	bl	8003a98 <ssd1327_display>
					if (player.lives <= 0)
 80028c6:	4b0a      	ldr	r3, [pc, #40]	@ (80028f0 <update_scene+0xb68>)
 80028c8:	691b      	ldr	r3, [r3, #16]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	dc04      	bgt.n	80028d8 <update_scene+0xb50>
					{
						play_dead_anim();
 80028ce:	f7ff f8b7 	bl	8001a40 <play_dead_anim>
						state = st_dead;
 80028d2:	4b0b      	ldr	r3, [pc, #44]	@ (8002900 <update_scene+0xb78>)
 80028d4:	2202      	movs	r2, #2
 80028d6:	701a      	strb	r2, [r3, #0]
		for(i = 0; i < num_boss_shots; i++)
 80028d8:	7bfb      	ldrb	r3, [r7, #15]
 80028da:	3301      	adds	r3, #1
 80028dc:	73fb      	strb	r3, [r7, #15]
 80028de:	7bfb      	ldrb	r3, [r7, #15]
 80028e0:	2b04      	cmp	r3, #4
 80028e2:	f67f af2f 	bls.w	8002744 <update_scene+0x9bc>
				}
			}
		}

		// Player's shots to the boss
		for(i = 0; i < num_shots; i++)
 80028e6:	2300      	movs	r3, #0
 80028e8:	73fb      	strb	r3, [r7, #15]
 80028ea:	e0ad      	b.n	8002a48 <update_scene+0xcc0>
 80028ec:	20000440 	.word	0x20000440
 80028f0:	20000160 	.word	0x20000160
 80028f4:	08009758 	.word	0x08009758
 80028f8:	08009720 	.word	0x08009720
 80028fc:	08009558 	.word	0x08009558
 8002900:	20001a04 	.word	0x20001a04
		{
			if(shots[i].active)
 8002904:	7bfa      	ldrb	r2, [r7, #15]
 8002906:	4977      	ldr	r1, [pc, #476]	@ (8002ae4 <update_scene+0xd5c>)
 8002908:	4613      	mov	r3, r2
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	4413      	add	r3, r2
 800290e:	009b      	lsls	r3, r3, #2
 8002910:	440b      	add	r3, r1
 8002912:	781b      	ldrb	r3, [r3, #0]
 8002914:	2b00      	cmp	r3, #0
 8002916:	f000 8094 	beq.w	8002a42 <update_scene+0xcba>
			{
				if(colliding(boss.x, boss.y, shots[i].x, shots[i].y) ||
 800291a:	4b73      	ldr	r3, [pc, #460]	@ (8002ae8 <update_scene+0xd60>)
 800291c:	6858      	ldr	r0, [r3, #4]
 800291e:	4b72      	ldr	r3, [pc, #456]	@ (8002ae8 <update_scene+0xd60>)
 8002920:	6899      	ldr	r1, [r3, #8]
 8002922:	7bfa      	ldrb	r2, [r7, #15]
 8002924:	4c6f      	ldr	r4, [pc, #444]	@ (8002ae4 <update_scene+0xd5c>)
 8002926:	4613      	mov	r3, r2
 8002928:	009b      	lsls	r3, r3, #2
 800292a:	4413      	add	r3, r2
 800292c:	009b      	lsls	r3, r3, #2
 800292e:	4423      	add	r3, r4
 8002930:	3304      	adds	r3, #4
 8002932:	681c      	ldr	r4, [r3, #0]
 8002934:	7bfa      	ldrb	r2, [r7, #15]
 8002936:	4d6b      	ldr	r5, [pc, #428]	@ (8002ae4 <update_scene+0xd5c>)
 8002938:	4613      	mov	r3, r2
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	4413      	add	r3, r2
 800293e:	009b      	lsls	r3, r3, #2
 8002940:	442b      	add	r3, r5
 8002942:	3308      	adds	r3, #8
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4622      	mov	r2, r4
 8002948:	f7ff f9f6 	bl	8001d38 <colliding>
 800294c:	4603      	mov	r3, r0
 800294e:	2b00      	cmp	r3, #0
 8002950:	d13a      	bne.n	80029c8 <update_scene+0xc40>
				   colliding(boss.x, boss.y+6, shots[i].x, shots[i].y) ||
 8002952:	4b65      	ldr	r3, [pc, #404]	@ (8002ae8 <update_scene+0xd60>)
 8002954:	6858      	ldr	r0, [r3, #4]
 8002956:	4b64      	ldr	r3, [pc, #400]	@ (8002ae8 <update_scene+0xd60>)
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	1d99      	adds	r1, r3, #6
 800295c:	7bfa      	ldrb	r2, [r7, #15]
 800295e:	4c61      	ldr	r4, [pc, #388]	@ (8002ae4 <update_scene+0xd5c>)
 8002960:	4613      	mov	r3, r2
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	4413      	add	r3, r2
 8002966:	009b      	lsls	r3, r3, #2
 8002968:	4423      	add	r3, r4
 800296a:	3304      	adds	r3, #4
 800296c:	681c      	ldr	r4, [r3, #0]
 800296e:	7bfa      	ldrb	r2, [r7, #15]
 8002970:	4d5c      	ldr	r5, [pc, #368]	@ (8002ae4 <update_scene+0xd5c>)
 8002972:	4613      	mov	r3, r2
 8002974:	009b      	lsls	r3, r3, #2
 8002976:	4413      	add	r3, r2
 8002978:	009b      	lsls	r3, r3, #2
 800297a:	442b      	add	r3, r5
 800297c:	3308      	adds	r3, #8
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4622      	mov	r2, r4
 8002982:	f7ff f9d9 	bl	8001d38 <colliding>
 8002986:	4603      	mov	r3, r0
				if(colliding(boss.x, boss.y, shots[i].x, shots[i].y) ||
 8002988:	2b00      	cmp	r3, #0
 800298a:	d11d      	bne.n	80029c8 <update_scene+0xc40>
				   colliding(boss.x, boss.y+12, shots[i].x, shots[i].y))
 800298c:	4b56      	ldr	r3, [pc, #344]	@ (8002ae8 <update_scene+0xd60>)
 800298e:	6858      	ldr	r0, [r3, #4]
 8002990:	4b55      	ldr	r3, [pc, #340]	@ (8002ae8 <update_scene+0xd60>)
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	f103 010c 	add.w	r1, r3, #12
 8002998:	7bfa      	ldrb	r2, [r7, #15]
 800299a:	4c52      	ldr	r4, [pc, #328]	@ (8002ae4 <update_scene+0xd5c>)
 800299c:	4613      	mov	r3, r2
 800299e:	009b      	lsls	r3, r3, #2
 80029a0:	4413      	add	r3, r2
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	4423      	add	r3, r4
 80029a6:	3304      	adds	r3, #4
 80029a8:	681c      	ldr	r4, [r3, #0]
 80029aa:	7bfa      	ldrb	r2, [r7, #15]
 80029ac:	4d4d      	ldr	r5, [pc, #308]	@ (8002ae4 <update_scene+0xd5c>)
 80029ae:	4613      	mov	r3, r2
 80029b0:	009b      	lsls	r3, r3, #2
 80029b2:	4413      	add	r3, r2
 80029b4:	009b      	lsls	r3, r3, #2
 80029b6:	442b      	add	r3, r5
 80029b8:	3308      	adds	r3, #8
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4622      	mov	r2, r4
 80029be:	f7ff f9bb 	bl	8001d38 <colliding>
 80029c2:	4603      	mov	r3, r0
				   colliding(boss.x, boss.y+6, shots[i].x, shots[i].y) ||
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d03c      	beq.n	8002a42 <update_scene+0xcba>
				{
					boss.lives -= 1;
 80029c8:	4b47      	ldr	r3, [pc, #284]	@ (8002ae8 <update_scene+0xd60>)
 80029ca:	695b      	ldr	r3, [r3, #20]
 80029cc:	3b01      	subs	r3, #1
 80029ce:	4a46      	ldr	r2, [pc, #280]	@ (8002ae8 <update_scene+0xd60>)
 80029d0:	6153      	str	r3, [r2, #20]
					shots[i].active = false;
 80029d2:	7bfa      	ldrb	r2, [r7, #15]
 80029d4:	4943      	ldr	r1, [pc, #268]	@ (8002ae4 <update_scene+0xd5c>)
 80029d6:	4613      	mov	r3, r2
 80029d8:	009b      	lsls	r3, r3, #2
 80029da:	4413      	add	r3, r2
 80029dc:	009b      	lsls	r3, r3, #2
 80029de:	440b      	add	r3, r1
 80029e0:	2200      	movs	r2, #0
 80029e2:	701a      	strb	r2, [r3, #0]
					shots[i].track_number = 0;
 80029e4:	7bfa      	ldrb	r2, [r7, #15]
 80029e6:	493f      	ldr	r1, [pc, #252]	@ (8002ae4 <update_scene+0xd5c>)
 80029e8:	4613      	mov	r3, r2
 80029ea:	009b      	lsls	r3, r3, #2
 80029ec:	4413      	add	r3, r2
 80029ee:	009b      	lsls	r3, r3, #2
 80029f0:	440b      	add	r3, r1
 80029f2:	3310      	adds	r3, #16
 80029f4:	2200      	movs	r2, #0
 80029f6:	601a      	str	r2, [r3, #0]
					GFX_DrowBitMap_P(shots[i].x, shots[i].y, explosion_map, 10,10,1);
 80029f8:	7bfa      	ldrb	r2, [r7, #15]
 80029fa:	493a      	ldr	r1, [pc, #232]	@ (8002ae4 <update_scene+0xd5c>)
 80029fc:	4613      	mov	r3, r2
 80029fe:	009b      	lsls	r3, r3, #2
 8002a00:	4413      	add	r3, r2
 8002a02:	009b      	lsls	r3, r3, #2
 8002a04:	440b      	add	r3, r1
 8002a06:	3304      	adds	r3, #4
 8002a08:	6818      	ldr	r0, [r3, #0]
 8002a0a:	7bfa      	ldrb	r2, [r7, #15]
 8002a0c:	4935      	ldr	r1, [pc, #212]	@ (8002ae4 <update_scene+0xd5c>)
 8002a0e:	4613      	mov	r3, r2
 8002a10:	009b      	lsls	r3, r3, #2
 8002a12:	4413      	add	r3, r2
 8002a14:	009b      	lsls	r3, r3, #2
 8002a16:	440b      	add	r3, r1
 8002a18:	3308      	adds	r3, #8
 8002a1a:	6819      	ldr	r1, [r3, #0]
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	9301      	str	r3, [sp, #4]
 8002a20:	230a      	movs	r3, #10
 8002a22:	9300      	str	r3, [sp, #0]
 8002a24:	230a      	movs	r3, #10
 8002a26:	4a31      	ldr	r2, [pc, #196]	@ (8002aec <update_scene+0xd64>)
 8002a28:	f7fe f9c0 	bl	8000dac <GFX_DrowBitMap_P>

					if(boss.lives <= 0)
 8002a2c:	4b2e      	ldr	r3, [pc, #184]	@ (8002ae8 <update_scene+0xd60>)
 8002a2e:	695b      	ldr	r3, [r3, #20]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	dc06      	bgt.n	8002a42 <update_scene+0xcba>
					{
						boss.active = false;
 8002a34:	4b2c      	ldr	r3, [pc, #176]	@ (8002ae8 <update_scene+0xd60>)
 8002a36:	2200      	movs	r2, #0
 8002a38:	701a      	strb	r2, [r3, #0]
						boss.lives = 0;
 8002a3a:	4b2b      	ldr	r3, [pc, #172]	@ (8002ae8 <update_scene+0xd60>)
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	615a      	str	r2, [r3, #20]
						break;
 8002a40:	e006      	b.n	8002a50 <update_scene+0xcc8>
		for(i = 0; i < num_shots; i++)
 8002a42:	7bfb      	ldrb	r3, [r7, #15]
 8002a44:	3301      	adds	r3, #1
 8002a46:	73fb      	strb	r3, [r7, #15]
 8002a48:	7bfb      	ldrb	r3, [r7, #15]
 8002a4a:	2b22      	cmp	r3, #34	@ 0x22
 8002a4c:	f67f af5a 	bls.w	8002904 <update_scene+0xb7c>
			}
		}
	}

	//Painting over and deactivating shots left over from the boss
	if(!boss.active)
 8002a50:	4b25      	ldr	r3, [pc, #148]	@ (8002ae8 <update_scene+0xd60>)
 8002a52:	781b      	ldrb	r3, [r3, #0]
 8002a54:	f083 0301 	eor.w	r3, r3, #1
 8002a58:	b2db      	uxtb	r3, r3
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d035      	beq.n	8002aca <update_scene+0xd42>
	{
		for(i = 0; i < num_boss_shots; i++)
 8002a5e:	2300      	movs	r3, #0
 8002a60:	73fb      	strb	r3, [r7, #15]
 8002a62:	e02f      	b.n	8002ac4 <update_scene+0xd3c>
		{
			if(boss_shots[i].active)
 8002a64:	7bfa      	ldrb	r2, [r7, #15]
 8002a66:	4922      	ldr	r1, [pc, #136]	@ (8002af0 <update_scene+0xd68>)
 8002a68:	4613      	mov	r3, r2
 8002a6a:	009b      	lsls	r3, r3, #2
 8002a6c:	4413      	add	r3, r2
 8002a6e:	009b      	lsls	r3, r3, #2
 8002a70:	440b      	add	r3, r1
 8002a72:	781b      	ldrb	r3, [r3, #0]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d022      	beq.n	8002abe <update_scene+0xd36>
			{
				boss_shots[i].active = false;
 8002a78:	7bfa      	ldrb	r2, [r7, #15]
 8002a7a:	491d      	ldr	r1, [pc, #116]	@ (8002af0 <update_scene+0xd68>)
 8002a7c:	4613      	mov	r3, r2
 8002a7e:	009b      	lsls	r3, r3, #2
 8002a80:	4413      	add	r3, r2
 8002a82:	009b      	lsls	r3, r3, #2
 8002a84:	440b      	add	r3, r1
 8002a86:	2200      	movs	r2, #0
 8002a88:	701a      	strb	r2, [r3, #0]
				GFX_DrowBitMap_P(boss_shots[i].x, boss_shots[i].y, player_shot_map,4,1,0);
 8002a8a:	7bfa      	ldrb	r2, [r7, #15]
 8002a8c:	4918      	ldr	r1, [pc, #96]	@ (8002af0 <update_scene+0xd68>)
 8002a8e:	4613      	mov	r3, r2
 8002a90:	009b      	lsls	r3, r3, #2
 8002a92:	4413      	add	r3, r2
 8002a94:	009b      	lsls	r3, r3, #2
 8002a96:	440b      	add	r3, r1
 8002a98:	3304      	adds	r3, #4
 8002a9a:	6818      	ldr	r0, [r3, #0]
 8002a9c:	7bfa      	ldrb	r2, [r7, #15]
 8002a9e:	4914      	ldr	r1, [pc, #80]	@ (8002af0 <update_scene+0xd68>)
 8002aa0:	4613      	mov	r3, r2
 8002aa2:	009b      	lsls	r3, r3, #2
 8002aa4:	4413      	add	r3, r2
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	440b      	add	r3, r1
 8002aaa:	3308      	adds	r3, #8
 8002aac:	6819      	ldr	r1, [r3, #0]
 8002aae:	2300      	movs	r3, #0
 8002ab0:	9301      	str	r3, [sp, #4]
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	9300      	str	r3, [sp, #0]
 8002ab6:	2304      	movs	r3, #4
 8002ab8:	4a0e      	ldr	r2, [pc, #56]	@ (8002af4 <update_scene+0xd6c>)
 8002aba:	f7fe f977 	bl	8000dac <GFX_DrowBitMap_P>
		for(i = 0; i < num_boss_shots; i++)
 8002abe:	7bfb      	ldrb	r3, [r7, #15]
 8002ac0:	3301      	adds	r3, #1
 8002ac2:	73fb      	strb	r3, [r7, #15]
 8002ac4:	7bfb      	ldrb	r3, [r7, #15]
 8002ac6:	2b04      	cmp	r3, #4
 8002ac8:	d9cc      	bls.n	8002a64 <update_scene+0xcdc>
			}
		}
	}
	//-------------------------------------------

	if (button_pressed())
 8002aca:	f000 fef1 	bl	80038b0 <button_pressed>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d001      	beq.n	8002ad8 <update_scene+0xd50>
		shot();
 8002ad4:	f7fe ffd8 	bl	8001a88 <shot>

	// Checking the collision of a player's shots with opponents. Adding Bonuses
	for (i = 0; i < num_shots; ++i)
 8002ad8:	2300      	movs	r3, #0
 8002ada:	73fb      	strb	r3, [r7, #15]
 8002adc:	e0bf      	b.n	8002c5e <update_scene+0xed6>
	{
		for (j = 0; j < num_enemies; ++j)
 8002ade:	2300      	movs	r3, #0
 8002ae0:	73bb      	strb	r3, [r7, #14]
 8002ae2:	e0b5      	b.n	8002c50 <update_scene+0xec8>
 8002ae4:	20000184 	.word	0x20000184
 8002ae8:	20001994 	.word	0x20001994
 8002aec:	08009758 	.word	0x08009758
 8002af0:	20000440 	.word	0x20000440
 8002af4:	08009554 	.word	0x08009554
		{
			if (shots[i].active && enemies[j].active)
 8002af8:	7bfa      	ldrb	r2, [r7, #15]
 8002afa:	496a      	ldr	r1, [pc, #424]	@ (8002ca4 <update_scene+0xf1c>)
 8002afc:	4613      	mov	r3, r2
 8002afe:	009b      	lsls	r3, r3, #2
 8002b00:	4413      	add	r3, r2
 8002b02:	009b      	lsls	r3, r3, #2
 8002b04:	440b      	add	r3, r1
 8002b06:	781b      	ldrb	r3, [r3, #0]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	f000 809e 	beq.w	8002c4a <update_scene+0xec2>
 8002b0e:	7bba      	ldrb	r2, [r7, #14]
 8002b10:	4965      	ldr	r1, [pc, #404]	@ (8002ca8 <update_scene+0xf20>)
 8002b12:	4613      	mov	r3, r2
 8002b14:	00db      	lsls	r3, r3, #3
 8002b16:	4413      	add	r3, r2
 8002b18:	009b      	lsls	r3, r3, #2
 8002b1a:	440b      	add	r3, r1
 8002b1c:	781b      	ldrb	r3, [r3, #0]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	f000 8093 	beq.w	8002c4a <update_scene+0xec2>
			{
				if (colliding(enemies[j].x, enemies[j].y, shots[i].x, shots[i].y))
 8002b24:	7bba      	ldrb	r2, [r7, #14]
 8002b26:	4960      	ldr	r1, [pc, #384]	@ (8002ca8 <update_scene+0xf20>)
 8002b28:	4613      	mov	r3, r2
 8002b2a:	00db      	lsls	r3, r3, #3
 8002b2c:	4413      	add	r3, r2
 8002b2e:	009b      	lsls	r3, r3, #2
 8002b30:	440b      	add	r3, r1
 8002b32:	3304      	adds	r3, #4
 8002b34:	6818      	ldr	r0, [r3, #0]
 8002b36:	7bba      	ldrb	r2, [r7, #14]
 8002b38:	495b      	ldr	r1, [pc, #364]	@ (8002ca8 <update_scene+0xf20>)
 8002b3a:	4613      	mov	r3, r2
 8002b3c:	00db      	lsls	r3, r3, #3
 8002b3e:	4413      	add	r3, r2
 8002b40:	009b      	lsls	r3, r3, #2
 8002b42:	440b      	add	r3, r1
 8002b44:	3308      	adds	r3, #8
 8002b46:	6819      	ldr	r1, [r3, #0]
 8002b48:	7bfa      	ldrb	r2, [r7, #15]
 8002b4a:	4c56      	ldr	r4, [pc, #344]	@ (8002ca4 <update_scene+0xf1c>)
 8002b4c:	4613      	mov	r3, r2
 8002b4e:	009b      	lsls	r3, r3, #2
 8002b50:	4413      	add	r3, r2
 8002b52:	009b      	lsls	r3, r3, #2
 8002b54:	4423      	add	r3, r4
 8002b56:	3304      	adds	r3, #4
 8002b58:	681c      	ldr	r4, [r3, #0]
 8002b5a:	7bfa      	ldrb	r2, [r7, #15]
 8002b5c:	4d51      	ldr	r5, [pc, #324]	@ (8002ca4 <update_scene+0xf1c>)
 8002b5e:	4613      	mov	r3, r2
 8002b60:	009b      	lsls	r3, r3, #2
 8002b62:	4413      	add	r3, r2
 8002b64:	009b      	lsls	r3, r3, #2
 8002b66:	442b      	add	r3, r5
 8002b68:	3308      	adds	r3, #8
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4622      	mov	r2, r4
 8002b6e:	f7ff f8e3 	bl	8001d38 <colliding>
 8002b72:	4603      	mov	r3, r0
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d068      	beq.n	8002c4a <update_scene+0xec2>
				{
					enemies[j].active = false;
 8002b78:	7bba      	ldrb	r2, [r7, #14]
 8002b7a:	494b      	ldr	r1, [pc, #300]	@ (8002ca8 <update_scene+0xf20>)
 8002b7c:	4613      	mov	r3, r2
 8002b7e:	00db      	lsls	r3, r3, #3
 8002b80:	4413      	add	r3, r2
 8002b82:	009b      	lsls	r3, r3, #2
 8002b84:	440b      	add	r3, r1
 8002b86:	2200      	movs	r2, #0
 8002b88:	701a      	strb	r2, [r3, #0]
					enemies[j].tracked_by_missile = false;
 8002b8a:	7bba      	ldrb	r2, [r7, #14]
 8002b8c:	4946      	ldr	r1, [pc, #280]	@ (8002ca8 <update_scene+0xf20>)
 8002b8e:	4613      	mov	r3, r2
 8002b90:	00db      	lsls	r3, r3, #3
 8002b92:	4413      	add	r3, r2
 8002b94:	009b      	lsls	r3, r3, #2
 8002b96:	440b      	add	r3, r1
 8002b98:	331c      	adds	r3, #28
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	701a      	strb	r2, [r3, #0]
					enemies[j].track_number = 0;
 8002b9e:	7bba      	ldrb	r2, [r7, #14]
 8002ba0:	4941      	ldr	r1, [pc, #260]	@ (8002ca8 <update_scene+0xf20>)
 8002ba2:	4613      	mov	r3, r2
 8002ba4:	00db      	lsls	r3, r3, #3
 8002ba6:	4413      	add	r3, r2
 8002ba8:	009b      	lsls	r3, r3, #2
 8002baa:	440b      	add	r3, r1
 8002bac:	3320      	adds	r3, #32
 8002bae:	2200      	movs	r2, #0
 8002bb0:	601a      	str	r2, [r3, #0]
					shots[i].active = false;
 8002bb2:	7bfa      	ldrb	r2, [r7, #15]
 8002bb4:	493b      	ldr	r1, [pc, #236]	@ (8002ca4 <update_scene+0xf1c>)
 8002bb6:	4613      	mov	r3, r2
 8002bb8:	009b      	lsls	r3, r3, #2
 8002bba:	4413      	add	r3, r2
 8002bbc:	009b      	lsls	r3, r3, #2
 8002bbe:	440b      	add	r3, r1
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	701a      	strb	r2, [r3, #0]
					player.score += 1;
 8002bc4:	4b39      	ldr	r3, [pc, #228]	@ (8002cac <update_scene+0xf24>)
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	3301      	adds	r3, #1
 8002bca:	4a38      	ldr	r2, [pc, #224]	@ (8002cac <update_scene+0xf24>)
 8002bcc:	6093      	str	r3, [r2, #8]
					GFX_DrowBitMap_P(enemies[j].x, enemies[j].y, explosion_map,10,10,1);
 8002bce:	7bba      	ldrb	r2, [r7, #14]
 8002bd0:	4935      	ldr	r1, [pc, #212]	@ (8002ca8 <update_scene+0xf20>)
 8002bd2:	4613      	mov	r3, r2
 8002bd4:	00db      	lsls	r3, r3, #3
 8002bd6:	4413      	add	r3, r2
 8002bd8:	009b      	lsls	r3, r3, #2
 8002bda:	440b      	add	r3, r1
 8002bdc:	3304      	adds	r3, #4
 8002bde:	6818      	ldr	r0, [r3, #0]
 8002be0:	7bba      	ldrb	r2, [r7, #14]
 8002be2:	4931      	ldr	r1, [pc, #196]	@ (8002ca8 <update_scene+0xf20>)
 8002be4:	4613      	mov	r3, r2
 8002be6:	00db      	lsls	r3, r3, #3
 8002be8:	4413      	add	r3, r2
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	440b      	add	r3, r1
 8002bee:	3308      	adds	r3, #8
 8002bf0:	6819      	ldr	r1, [r3, #0]
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	9301      	str	r3, [sp, #4]
 8002bf6:	230a      	movs	r3, #10
 8002bf8:	9300      	str	r3, [sp, #0]
 8002bfa:	230a      	movs	r3, #10
 8002bfc:	4a2c      	ldr	r2, [pc, #176]	@ (8002cb0 <update_scene+0xf28>)
 8002bfe:	f7fe f8d5 	bl	8000dac <GFX_DrowBitMap_P>

					//Dodanie bonusa w miejscu zestrzelenia
					if((rand()%100) < frequ_bonus)
 8002c02:	f004 fab7 	bl	8007174 <rand>
 8002c06:	4602      	mov	r2, r0
 8002c08:	4b2a      	ldr	r3, [pc, #168]	@ (8002cb4 <update_scene+0xf2c>)
 8002c0a:	fb83 1302 	smull	r1, r3, r3, r2
 8002c0e:	1159      	asrs	r1, r3, #5
 8002c10:	17d3      	asrs	r3, r2, #31
 8002c12:	1acb      	subs	r3, r1, r3
 8002c14:	2164      	movs	r1, #100	@ 0x64
 8002c16:	fb01 f303 	mul.w	r3, r1, r3
 8002c1a:	1ad3      	subs	r3, r2, r3
 8002c1c:	2b0e      	cmp	r3, #14
 8002c1e:	dc14      	bgt.n	8002c4a <update_scene+0xec2>
						add_bonus(enemies[j].x, enemies[j].y);
 8002c20:	7bba      	ldrb	r2, [r7, #14]
 8002c22:	4921      	ldr	r1, [pc, #132]	@ (8002ca8 <update_scene+0xf20>)
 8002c24:	4613      	mov	r3, r2
 8002c26:	00db      	lsls	r3, r3, #3
 8002c28:	4413      	add	r3, r2
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	440b      	add	r3, r1
 8002c2e:	3304      	adds	r3, #4
 8002c30:	6818      	ldr	r0, [r3, #0]
 8002c32:	7bba      	ldrb	r2, [r7, #14]
 8002c34:	491c      	ldr	r1, [pc, #112]	@ (8002ca8 <update_scene+0xf20>)
 8002c36:	4613      	mov	r3, r2
 8002c38:	00db      	lsls	r3, r3, #3
 8002c3a:	4413      	add	r3, r2
 8002c3c:	009b      	lsls	r3, r3, #2
 8002c3e:	440b      	add	r3, r1
 8002c40:	3308      	adds	r3, #8
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4619      	mov	r1, r3
 8002c46:	f000 fc69 	bl	800351c <add_bonus>
		for (j = 0; j < num_enemies; ++j)
 8002c4a:	7bbb      	ldrb	r3, [r7, #14]
 8002c4c:	3301      	adds	r3, #1
 8002c4e:	73bb      	strb	r3, [r7, #14]
 8002c50:	7bbb      	ldrb	r3, [r7, #14]
 8002c52:	2b09      	cmp	r3, #9
 8002c54:	f67f af50 	bls.w	8002af8 <update_scene+0xd70>
	for (i = 0; i < num_shots; ++i)
 8002c58:	7bfb      	ldrb	r3, [r7, #15]
 8002c5a:	3301      	adds	r3, #1
 8002c5c:	73fb      	strb	r3, [r7, #15]
 8002c5e:	7bfb      	ldrb	r3, [r7, #15]
 8002c60:	2b22      	cmp	r3, #34	@ 0x22
 8002c62:	f67f af3c 	bls.w	8002ade <update_scene+0xd56>
				}
			}
		}
	}
	if ((rand()%100) < (player.level * 2) && !(boss.active)) //Frequency of adding opponents according to level
 8002c66:	f004 fa85 	bl	8007174 <rand>
 8002c6a:	4602      	mov	r2, r0
 8002c6c:	4b11      	ldr	r3, [pc, #68]	@ (8002cb4 <update_scene+0xf2c>)
 8002c6e:	fb83 1302 	smull	r1, r3, r3, r2
 8002c72:	1159      	asrs	r1, r3, #5
 8002c74:	17d3      	asrs	r3, r2, #31
 8002c76:	1acb      	subs	r3, r1, r3
 8002c78:	2164      	movs	r1, #100	@ 0x64
 8002c7a:	fb01 f303 	mul.w	r3, r1, r3
 8002c7e:	1ad3      	subs	r3, r2, r3
 8002c80:	4a0a      	ldr	r2, [pc, #40]	@ (8002cac <update_scene+0xf24>)
 8002c82:	6952      	ldr	r2, [r2, #20]
 8002c84:	0052      	lsls	r2, r2, #1
 8002c86:	4293      	cmp	r3, r2
 8002c88:	da08      	bge.n	8002c9c <update_scene+0xf14>
 8002c8a:	4b0b      	ldr	r3, [pc, #44]	@ (8002cb8 <update_scene+0xf30>)
 8002c8c:	781b      	ldrb	r3, [r3, #0]
 8002c8e:	f083 0301 	eor.w	r3, r3, #1
 8002c92:	b2db      	uxtb	r3, r3
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d001      	beq.n	8002c9c <update_scene+0xf14>
			add_enemy();
 8002c98:	f000 fb2c 	bl	80032f4 <add_enemy>
}
 8002c9c:	bf00      	nop
 8002c9e:	3710      	adds	r7, #16
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bdb0      	pop	{r4, r5, r7, pc}
 8002ca4:	20000184 	.word	0x20000184
 8002ca8:	200004a4 	.word	0x200004a4
 8002cac:	20000160 	.word	0x20000160
 8002cb0:	08009758 	.word	0x08009758
 8002cb4:	51eb851f 	.word	0x51eb851f
 8002cb8:	20001994 	.word	0x20001994

08002cbc <drow_game>:

void drow_game(void)
{
 8002cbc:	b5b0      	push	{r4, r5, r7, lr}
 8002cbe:	b084      	sub	sp, #16
 8002cc0:	af02      	add	r7, sp, #8
	 * Drawing all game graphics
	 */
	uint8_t i;

	//Rsownanie informacji o grze
	GFX_PutInt(5,0,player.score,1,1,0);
 8002cc2:	4b9f      	ldr	r3, [pc, #636]	@ (8002f40 <drow_game+0x284>)
 8002cc4:	689a      	ldr	r2, [r3, #8]
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	9301      	str	r3, [sp, #4]
 8002cca:	2301      	movs	r3, #1
 8002ccc:	9300      	str	r3, [sp, #0]
 8002cce:	2301      	movs	r3, #1
 8002cd0:	2100      	movs	r1, #0
 8002cd2:	2005      	movs	r0, #5
 8002cd4:	f7fe f9fc 	bl	80010d0 <GFX_PutInt>
	GFX_DrowBitMap_P(102,0,lives_map,8,6,1);
 8002cd8:	2301      	movs	r3, #1
 8002cda:	9301      	str	r3, [sp, #4]
 8002cdc:	2306      	movs	r3, #6
 8002cde:	9300      	str	r3, [sp, #0]
 8002ce0:	2308      	movs	r3, #8
 8002ce2:	4a98      	ldr	r2, [pc, #608]	@ (8002f44 <drow_game+0x288>)
 8002ce4:	2100      	movs	r1, #0
 8002ce6:	2066      	movs	r0, #102	@ 0x66
 8002ce8:	f7fe f860 	bl	8000dac <GFX_DrowBitMap_P>
	GFX_PutInt(114,0,player.lives,1,1,0);
 8002cec:	4b94      	ldr	r3, [pc, #592]	@ (8002f40 <drow_game+0x284>)
 8002cee:	691a      	ldr	r2, [r3, #16]
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	9301      	str	r3, [sp, #4]
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	9300      	str	r3, [sp, #0]
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	2100      	movs	r1, #0
 8002cfc:	2072      	movs	r0, #114	@ 0x72
 8002cfe:	f7fe f9e7 	bl	80010d0 <GFX_PutInt>
	GFX_DrowBitMap_P(50,0,Level_map,20,7,1);
 8002d02:	2301      	movs	r3, #1
 8002d04:	9301      	str	r3, [sp, #4]
 8002d06:	2307      	movs	r3, #7
 8002d08:	9300      	str	r3, [sp, #0]
 8002d0a:	2314      	movs	r3, #20
 8002d0c:	4a8e      	ldr	r2, [pc, #568]	@ (8002f48 <drow_game+0x28c>)
 8002d0e:	2100      	movs	r1, #0
 8002d10:	2032      	movs	r0, #50	@ 0x32
 8002d12:	f7fe f84b 	bl	8000dac <GFX_DrowBitMap_P>
	GFX_PutInt(80,0,player.level,1,1,0);
 8002d16:	4b8a      	ldr	r3, [pc, #552]	@ (8002f40 <drow_game+0x284>)
 8002d18:	695a      	ldr	r2, [r3, #20]
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	9301      	str	r3, [sp, #4]
 8002d1e:	2301      	movs	r3, #1
 8002d20:	9300      	str	r3, [sp, #0]
 8002d22:	2301      	movs	r3, #1
 8002d24:	2100      	movs	r1, #0
 8002d26:	2050      	movs	r0, #80	@ 0x50
 8002d28:	f7fe f9d2 	bl	80010d0 <GFX_PutInt>

	//Drawing graphics of a player's shot
	for(i = 0; i < num_shots; i++)
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	71fb      	strb	r3, [r7, #7]
 8002d30:	e026      	b.n	8002d80 <drow_game+0xc4>
	{
		if(shots[i].active)
 8002d32:	79fa      	ldrb	r2, [r7, #7]
 8002d34:	4985      	ldr	r1, [pc, #532]	@ (8002f4c <drow_game+0x290>)
 8002d36:	4613      	mov	r3, r2
 8002d38:	009b      	lsls	r3, r3, #2
 8002d3a:	4413      	add	r3, r2
 8002d3c:	009b      	lsls	r3, r3, #2
 8002d3e:	440b      	add	r3, r1
 8002d40:	781b      	ldrb	r3, [r3, #0]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d019      	beq.n	8002d7a <drow_game+0xbe>
		{
			GFX_DrowBitMap_P(shots[i].x, shots[i].y, player_shot_map,4,1,1);
 8002d46:	79fa      	ldrb	r2, [r7, #7]
 8002d48:	4980      	ldr	r1, [pc, #512]	@ (8002f4c <drow_game+0x290>)
 8002d4a:	4613      	mov	r3, r2
 8002d4c:	009b      	lsls	r3, r3, #2
 8002d4e:	4413      	add	r3, r2
 8002d50:	009b      	lsls	r3, r3, #2
 8002d52:	440b      	add	r3, r1
 8002d54:	3304      	adds	r3, #4
 8002d56:	6818      	ldr	r0, [r3, #0]
 8002d58:	79fa      	ldrb	r2, [r7, #7]
 8002d5a:	497c      	ldr	r1, [pc, #496]	@ (8002f4c <drow_game+0x290>)
 8002d5c:	4613      	mov	r3, r2
 8002d5e:	009b      	lsls	r3, r3, #2
 8002d60:	4413      	add	r3, r2
 8002d62:	009b      	lsls	r3, r3, #2
 8002d64:	440b      	add	r3, r1
 8002d66:	3308      	adds	r3, #8
 8002d68:	6819      	ldr	r1, [r3, #0]
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	9301      	str	r3, [sp, #4]
 8002d6e:	2301      	movs	r3, #1
 8002d70:	9300      	str	r3, [sp, #0]
 8002d72:	2304      	movs	r3, #4
 8002d74:	4a76      	ldr	r2, [pc, #472]	@ (8002f50 <drow_game+0x294>)
 8002d76:	f7fe f819 	bl	8000dac <GFX_DrowBitMap_P>
	for(i = 0; i < num_shots; i++)
 8002d7a:	79fb      	ldrb	r3, [r7, #7]
 8002d7c:	3301      	adds	r3, #1
 8002d7e:	71fb      	strb	r3, [r7, #7]
 8002d80:	79fb      	ldrb	r3, [r7, #7]
 8002d82:	2b22      	cmp	r3, #34	@ 0x22
 8002d84:	d9d5      	bls.n	8002d32 <drow_game+0x76>
		}
	}

	//Drawing graphics of a boss shot
	if(boss.active)
 8002d86:	4b73      	ldr	r3, [pc, #460]	@ (8002f54 <drow_game+0x298>)
 8002d88:	781b      	ldrb	r3, [r3, #0]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d02c      	beq.n	8002de8 <drow_game+0x12c>
	{
		for(i = 0; i < num_boss_shots; i++)
 8002d8e:	2300      	movs	r3, #0
 8002d90:	71fb      	strb	r3, [r7, #7]
 8002d92:	e026      	b.n	8002de2 <drow_game+0x126>
		{
			if(boss_shots[i].active)
 8002d94:	79fa      	ldrb	r2, [r7, #7]
 8002d96:	4970      	ldr	r1, [pc, #448]	@ (8002f58 <drow_game+0x29c>)
 8002d98:	4613      	mov	r3, r2
 8002d9a:	009b      	lsls	r3, r3, #2
 8002d9c:	4413      	add	r3, r2
 8002d9e:	009b      	lsls	r3, r3, #2
 8002da0:	440b      	add	r3, r1
 8002da2:	781b      	ldrb	r3, [r3, #0]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d019      	beq.n	8002ddc <drow_game+0x120>
			{
				GFX_DrowBitMap_P(boss_shots[i].x, boss_shots[i].y, player_shot_map,4,1,1);
 8002da8:	79fa      	ldrb	r2, [r7, #7]
 8002daa:	496b      	ldr	r1, [pc, #428]	@ (8002f58 <drow_game+0x29c>)
 8002dac:	4613      	mov	r3, r2
 8002dae:	009b      	lsls	r3, r3, #2
 8002db0:	4413      	add	r3, r2
 8002db2:	009b      	lsls	r3, r3, #2
 8002db4:	440b      	add	r3, r1
 8002db6:	3304      	adds	r3, #4
 8002db8:	6818      	ldr	r0, [r3, #0]
 8002dba:	79fa      	ldrb	r2, [r7, #7]
 8002dbc:	4966      	ldr	r1, [pc, #408]	@ (8002f58 <drow_game+0x29c>)
 8002dbe:	4613      	mov	r3, r2
 8002dc0:	009b      	lsls	r3, r3, #2
 8002dc2:	4413      	add	r3, r2
 8002dc4:	009b      	lsls	r3, r3, #2
 8002dc6:	440b      	add	r3, r1
 8002dc8:	3308      	adds	r3, #8
 8002dca:	6819      	ldr	r1, [r3, #0]
 8002dcc:	2301      	movs	r3, #1
 8002dce:	9301      	str	r3, [sp, #4]
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	9300      	str	r3, [sp, #0]
 8002dd4:	2304      	movs	r3, #4
 8002dd6:	4a5e      	ldr	r2, [pc, #376]	@ (8002f50 <drow_game+0x294>)
 8002dd8:	f7fd ffe8 	bl	8000dac <GFX_DrowBitMap_P>
		for(i = 0; i < num_boss_shots; i++)
 8002ddc:	79fb      	ldrb	r3, [r7, #7]
 8002dde:	3301      	adds	r3, #1
 8002de0:	71fb      	strb	r3, [r7, #7]
 8002de2:	79fb      	ldrb	r3, [r7, #7]
 8002de4:	2b04      	cmp	r3, #4
 8002de6:	d9d5      	bls.n	8002d94 <drow_game+0xd8>
			}
		}
	}

	//Drawing graphics of enemies
	for(i = 0; i < num_enemies; i++)
 8002de8:	2300      	movs	r3, #0
 8002dea:	71fb      	strb	r3, [r7, #7]
 8002dec:	e094      	b.n	8002f18 <drow_game+0x25c>
	{
		if(enemies[i].active)
 8002dee:	79fa      	ldrb	r2, [r7, #7]
 8002df0:	495a      	ldr	r1, [pc, #360]	@ (8002f5c <drow_game+0x2a0>)
 8002df2:	4613      	mov	r3, r2
 8002df4:	00db      	lsls	r3, r3, #3
 8002df6:	4413      	add	r3, r2
 8002df8:	009b      	lsls	r3, r3, #2
 8002dfa:	440b      	add	r3, r1
 8002dfc:	781b      	ldrb	r3, [r3, #0]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	f000 8087 	beq.w	8002f12 <drow_game+0x256>
		{
			if(enemies[i].type == et_tracker)
 8002e04:	79fa      	ldrb	r2, [r7, #7]
 8002e06:	4955      	ldr	r1, [pc, #340]	@ (8002f5c <drow_game+0x2a0>)
 8002e08:	4613      	mov	r3, r2
 8002e0a:	00db      	lsls	r3, r3, #3
 8002e0c:	4413      	add	r3, r2
 8002e0e:	009b      	lsls	r3, r3, #2
 8002e10:	440b      	add	r3, r1
 8002e12:	330c      	adds	r3, #12
 8002e14:	781b      	ldrb	r3, [r3, #0]
 8002e16:	2b01      	cmp	r3, #1
 8002e18:	d121      	bne.n	8002e5e <drow_game+0x1a2>
				GFX_DrowBitMap_P(enemies[i].x, enemies[i].y, enemies[i].bit_map,5,5,1);
 8002e1a:	79fa      	ldrb	r2, [r7, #7]
 8002e1c:	494f      	ldr	r1, [pc, #316]	@ (8002f5c <drow_game+0x2a0>)
 8002e1e:	4613      	mov	r3, r2
 8002e20:	00db      	lsls	r3, r3, #3
 8002e22:	4413      	add	r3, r2
 8002e24:	009b      	lsls	r3, r3, #2
 8002e26:	440b      	add	r3, r1
 8002e28:	3304      	adds	r3, #4
 8002e2a:	6818      	ldr	r0, [r3, #0]
 8002e2c:	79fa      	ldrb	r2, [r7, #7]
 8002e2e:	494b      	ldr	r1, [pc, #300]	@ (8002f5c <drow_game+0x2a0>)
 8002e30:	4613      	mov	r3, r2
 8002e32:	00db      	lsls	r3, r3, #3
 8002e34:	4413      	add	r3, r2
 8002e36:	009b      	lsls	r3, r3, #2
 8002e38:	440b      	add	r3, r1
 8002e3a:	3308      	adds	r3, #8
 8002e3c:	6819      	ldr	r1, [r3, #0]
 8002e3e:	79fa      	ldrb	r2, [r7, #7]
 8002e40:	4c46      	ldr	r4, [pc, #280]	@ (8002f5c <drow_game+0x2a0>)
 8002e42:	4613      	mov	r3, r2
 8002e44:	00db      	lsls	r3, r3, #3
 8002e46:	4413      	add	r3, r2
 8002e48:	009b      	lsls	r3, r3, #2
 8002e4a:	4423      	add	r3, r4
 8002e4c:	3310      	adds	r3, #16
 8002e4e:	681a      	ldr	r2, [r3, #0]
 8002e50:	2301      	movs	r3, #1
 8002e52:	9301      	str	r3, [sp, #4]
 8002e54:	2305      	movs	r3, #5
 8002e56:	9300      	str	r3, [sp, #0]
 8002e58:	2305      	movs	r3, #5
 8002e5a:	f7fd ffa7 	bl	8000dac <GFX_DrowBitMap_P>
			if(enemies[i].type == et_diver)
 8002e5e:	79fa      	ldrb	r2, [r7, #7]
 8002e60:	493e      	ldr	r1, [pc, #248]	@ (8002f5c <drow_game+0x2a0>)
 8002e62:	4613      	mov	r3, r2
 8002e64:	00db      	lsls	r3, r3, #3
 8002e66:	4413      	add	r3, r2
 8002e68:	009b      	lsls	r3, r3, #2
 8002e6a:	440b      	add	r3, r1
 8002e6c:	330c      	adds	r3, #12
 8002e6e:	781b      	ldrb	r3, [r3, #0]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d121      	bne.n	8002eb8 <drow_game+0x1fc>
				GFX_DrowBitMap_P(enemies[i].x, enemies[i].y, enemies[i].bit_map,3,7,1);
 8002e74:	79fa      	ldrb	r2, [r7, #7]
 8002e76:	4939      	ldr	r1, [pc, #228]	@ (8002f5c <drow_game+0x2a0>)
 8002e78:	4613      	mov	r3, r2
 8002e7a:	00db      	lsls	r3, r3, #3
 8002e7c:	4413      	add	r3, r2
 8002e7e:	009b      	lsls	r3, r3, #2
 8002e80:	440b      	add	r3, r1
 8002e82:	3304      	adds	r3, #4
 8002e84:	6818      	ldr	r0, [r3, #0]
 8002e86:	79fa      	ldrb	r2, [r7, #7]
 8002e88:	4934      	ldr	r1, [pc, #208]	@ (8002f5c <drow_game+0x2a0>)
 8002e8a:	4613      	mov	r3, r2
 8002e8c:	00db      	lsls	r3, r3, #3
 8002e8e:	4413      	add	r3, r2
 8002e90:	009b      	lsls	r3, r3, #2
 8002e92:	440b      	add	r3, r1
 8002e94:	3308      	adds	r3, #8
 8002e96:	6819      	ldr	r1, [r3, #0]
 8002e98:	79fa      	ldrb	r2, [r7, #7]
 8002e9a:	4c30      	ldr	r4, [pc, #192]	@ (8002f5c <drow_game+0x2a0>)
 8002e9c:	4613      	mov	r3, r2
 8002e9e:	00db      	lsls	r3, r3, #3
 8002ea0:	4413      	add	r3, r2
 8002ea2:	009b      	lsls	r3, r3, #2
 8002ea4:	4423      	add	r3, r4
 8002ea6:	3310      	adds	r3, #16
 8002ea8:	681a      	ldr	r2, [r3, #0]
 8002eaa:	2301      	movs	r3, #1
 8002eac:	9301      	str	r3, [sp, #4]
 8002eae:	2307      	movs	r3, #7
 8002eb0:	9300      	str	r3, [sp, #0]
 8002eb2:	2303      	movs	r3, #3
 8002eb4:	f7fd ff7a 	bl	8000dac <GFX_DrowBitMap_P>
			if(enemies[i].type == et_bobber)
 8002eb8:	79fa      	ldrb	r2, [r7, #7]
 8002eba:	4928      	ldr	r1, [pc, #160]	@ (8002f5c <drow_game+0x2a0>)
 8002ebc:	4613      	mov	r3, r2
 8002ebe:	00db      	lsls	r3, r3, #3
 8002ec0:	4413      	add	r3, r2
 8002ec2:	009b      	lsls	r3, r3, #2
 8002ec4:	440b      	add	r3, r1
 8002ec6:	330c      	adds	r3, #12
 8002ec8:	781b      	ldrb	r3, [r3, #0]
 8002eca:	2b02      	cmp	r3, #2
 8002ecc:	d121      	bne.n	8002f12 <drow_game+0x256>
				GFX_DrowBitMap_P(enemies[i].x, enemies[i].y, enemies[i].bit_map,5,5,1);
 8002ece:	79fa      	ldrb	r2, [r7, #7]
 8002ed0:	4922      	ldr	r1, [pc, #136]	@ (8002f5c <drow_game+0x2a0>)
 8002ed2:	4613      	mov	r3, r2
 8002ed4:	00db      	lsls	r3, r3, #3
 8002ed6:	4413      	add	r3, r2
 8002ed8:	009b      	lsls	r3, r3, #2
 8002eda:	440b      	add	r3, r1
 8002edc:	3304      	adds	r3, #4
 8002ede:	6818      	ldr	r0, [r3, #0]
 8002ee0:	79fa      	ldrb	r2, [r7, #7]
 8002ee2:	491e      	ldr	r1, [pc, #120]	@ (8002f5c <drow_game+0x2a0>)
 8002ee4:	4613      	mov	r3, r2
 8002ee6:	00db      	lsls	r3, r3, #3
 8002ee8:	4413      	add	r3, r2
 8002eea:	009b      	lsls	r3, r3, #2
 8002eec:	440b      	add	r3, r1
 8002eee:	3308      	adds	r3, #8
 8002ef0:	6819      	ldr	r1, [r3, #0]
 8002ef2:	79fa      	ldrb	r2, [r7, #7]
 8002ef4:	4c19      	ldr	r4, [pc, #100]	@ (8002f5c <drow_game+0x2a0>)
 8002ef6:	4613      	mov	r3, r2
 8002ef8:	00db      	lsls	r3, r3, #3
 8002efa:	4413      	add	r3, r2
 8002efc:	009b      	lsls	r3, r3, #2
 8002efe:	4423      	add	r3, r4
 8002f00:	3310      	adds	r3, #16
 8002f02:	681a      	ldr	r2, [r3, #0]
 8002f04:	2301      	movs	r3, #1
 8002f06:	9301      	str	r3, [sp, #4]
 8002f08:	2305      	movs	r3, #5
 8002f0a:	9300      	str	r3, [sp, #0]
 8002f0c:	2305      	movs	r3, #5
 8002f0e:	f7fd ff4d 	bl	8000dac <GFX_DrowBitMap_P>
	for(i = 0; i < num_enemies; i++)
 8002f12:	79fb      	ldrb	r3, [r7, #7]
 8002f14:	3301      	adds	r3, #1
 8002f16:	71fb      	strb	r3, [r7, #7]
 8002f18:	79fb      	ldrb	r3, [r7, #7]
 8002f1a:	2b09      	cmp	r3, #9
 8002f1c:	f67f af67 	bls.w	8002dee <drow_game+0x132>
		}
	}

	//Drawing the player's graphics
	GFX_DrowBitMap_P(player.x,player.y,player_map,11,11,1);
 8002f20:	4b07      	ldr	r3, [pc, #28]	@ (8002f40 <drow_game+0x284>)
 8002f22:	6818      	ldr	r0, [r3, #0]
 8002f24:	4b06      	ldr	r3, [pc, #24]	@ (8002f40 <drow_game+0x284>)
 8002f26:	6859      	ldr	r1, [r3, #4]
 8002f28:	2301      	movs	r3, #1
 8002f2a:	9301      	str	r3, [sp, #4]
 8002f2c:	230b      	movs	r3, #11
 8002f2e:	9300      	str	r3, [sp, #0]
 8002f30:	230b      	movs	r3, #11
 8002f32:	4a0b      	ldr	r2, [pc, #44]	@ (8002f60 <drow_game+0x2a4>)
 8002f34:	f7fd ff3a 	bl	8000dac <GFX_DrowBitMap_P>

	//Drawing a background
	for(i = 0; i < num_background; i++)
 8002f38:	2300      	movs	r3, #0
 8002f3a:	71fb      	strb	r3, [r7, #7]
 8002f3c:	e045      	b.n	8002fca <drow_game+0x30e>
 8002f3e:	bf00      	nop
 8002f40:	20000160 	.word	0x20000160
 8002f44:	08009588 	.word	0x08009588
 8002f48:	08009570 	.word	0x08009570
 8002f4c:	20000184 	.word	0x20000184
 8002f50:	08009554 	.word	0x08009554
 8002f54:	20001994 	.word	0x20001994
 8002f58:	20000440 	.word	0x20000440
 8002f5c:	200004a4 	.word	0x200004a4
 8002f60:	08009558 	.word	0x08009558
	{
		if(background[i].active)
 8002f64:	79fa      	ldrb	r2, [r7, #7]
 8002f66:	495c      	ldr	r1, [pc, #368]	@ (80030d8 <drow_game+0x41c>)
 8002f68:	4613      	mov	r3, r2
 8002f6a:	009b      	lsls	r3, r3, #2
 8002f6c:	4413      	add	r3, r2
 8002f6e:	009b      	lsls	r3, r3, #2
 8002f70:	440b      	add	r3, r1
 8002f72:	781b      	ldrb	r3, [r3, #0]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d025      	beq.n	8002fc4 <drow_game+0x308>
		{
			ssd1327_setPixel(background[i].x, background[i].y,(rand()%15));
 8002f78:	79fa      	ldrb	r2, [r7, #7]
 8002f7a:	4957      	ldr	r1, [pc, #348]	@ (80030d8 <drow_game+0x41c>)
 8002f7c:	4613      	mov	r3, r2
 8002f7e:	009b      	lsls	r3, r3, #2
 8002f80:	4413      	add	r3, r2
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	440b      	add	r3, r1
 8002f86:	3304      	adds	r3, #4
 8002f88:	681c      	ldr	r4, [r3, #0]
 8002f8a:	79fa      	ldrb	r2, [r7, #7]
 8002f8c:	4952      	ldr	r1, [pc, #328]	@ (80030d8 <drow_game+0x41c>)
 8002f8e:	4613      	mov	r3, r2
 8002f90:	009b      	lsls	r3, r3, #2
 8002f92:	4413      	add	r3, r2
 8002f94:	009b      	lsls	r3, r3, #2
 8002f96:	440b      	add	r3, r1
 8002f98:	3308      	adds	r3, #8
 8002f9a:	681d      	ldr	r5, [r3, #0]
 8002f9c:	f004 f8ea 	bl	8007174 <rand>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	4b4e      	ldr	r3, [pc, #312]	@ (80030dc <drow_game+0x420>)
 8002fa4:	fb83 1302 	smull	r1, r3, r3, r2
 8002fa8:	4413      	add	r3, r2
 8002faa:	10d9      	asrs	r1, r3, #3
 8002fac:	17d3      	asrs	r3, r2, #31
 8002fae:	1ac9      	subs	r1, r1, r3
 8002fb0:	460b      	mov	r3, r1
 8002fb2:	011b      	lsls	r3, r3, #4
 8002fb4:	1a5b      	subs	r3, r3, r1
 8002fb6:	1ad1      	subs	r1, r2, r3
 8002fb8:	b2cb      	uxtb	r3, r1
 8002fba:	461a      	mov	r2, r3
 8002fbc:	4629      	mov	r1, r5
 8002fbe:	4620      	mov	r0, r4
 8002fc0:	f000 fdae 	bl	8003b20 <ssd1327_setPixel>
	for(i = 0; i < num_background; i++)
 8002fc4:	79fb      	ldrb	r3, [r7, #7]
 8002fc6:	3301      	adds	r3, #1
 8002fc8:	71fb      	strb	r3, [r7, #7]
 8002fca:	79fb      	ldrb	r3, [r7, #7]
 8002fcc:	2bf9      	cmp	r3, #249	@ 0xf9
 8002fce:	d9c9      	bls.n	8002f64 <drow_game+0x2a8>
		}
	}

	//Drawing Boss
	if(boss.active && player.game_progres == 30)
 8002fd0:	4b43      	ldr	r3, [pc, #268]	@ (80030e0 <drow_game+0x424>)
 8002fd2:	781b      	ldrb	r3, [r3, #0]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d00f      	beq.n	8002ff8 <drow_game+0x33c>
 8002fd8:	4b42      	ldr	r3, [pc, #264]	@ (80030e4 <drow_game+0x428>)
 8002fda:	699b      	ldr	r3, [r3, #24]
 8002fdc:	2b1e      	cmp	r3, #30
 8002fde:	d10b      	bne.n	8002ff8 <drow_game+0x33c>
		GFX_DrowBitMap_P(boss.x, boss.y, boss_map_1,10,18,1);
 8002fe0:	4b3f      	ldr	r3, [pc, #252]	@ (80030e0 <drow_game+0x424>)
 8002fe2:	6858      	ldr	r0, [r3, #4]
 8002fe4:	4b3e      	ldr	r3, [pc, #248]	@ (80030e0 <drow_game+0x424>)
 8002fe6:	6899      	ldr	r1, [r3, #8]
 8002fe8:	2301      	movs	r3, #1
 8002fea:	9301      	str	r3, [sp, #4]
 8002fec:	2312      	movs	r3, #18
 8002fee:	9300      	str	r3, [sp, #0]
 8002ff0:	230a      	movs	r3, #10
 8002ff2:	4a3d      	ldr	r2, [pc, #244]	@ (80030e8 <drow_game+0x42c>)
 8002ff4:	f7fd feda 	bl	8000dac <GFX_DrowBitMap_P>
	if(boss.active && player.game_progres == 60)
 8002ff8:	4b39      	ldr	r3, [pc, #228]	@ (80030e0 <drow_game+0x424>)
 8002ffa:	781b      	ldrb	r3, [r3, #0]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d00f      	beq.n	8003020 <drow_game+0x364>
 8003000:	4b38      	ldr	r3, [pc, #224]	@ (80030e4 <drow_game+0x428>)
 8003002:	699b      	ldr	r3, [r3, #24]
 8003004:	2b3c      	cmp	r3, #60	@ 0x3c
 8003006:	d10b      	bne.n	8003020 <drow_game+0x364>
		GFX_DrowBitMap_P(boss.x, boss.y, boss_map_2, 10, 18, 1);
 8003008:	4b35      	ldr	r3, [pc, #212]	@ (80030e0 <drow_game+0x424>)
 800300a:	6858      	ldr	r0, [r3, #4]
 800300c:	4b34      	ldr	r3, [pc, #208]	@ (80030e0 <drow_game+0x424>)
 800300e:	6899      	ldr	r1, [r3, #8]
 8003010:	2301      	movs	r3, #1
 8003012:	9301      	str	r3, [sp, #4]
 8003014:	2312      	movs	r3, #18
 8003016:	9300      	str	r3, [sp, #0]
 8003018:	230a      	movs	r3, #10
 800301a:	4a34      	ldr	r2, [pc, #208]	@ (80030ec <drow_game+0x430>)
 800301c:	f7fd fec6 	bl	8000dac <GFX_DrowBitMap_P>

	//Drawing bonuses
	for(i = 0; i < num_bonus; i++)
 8003020:	2300      	movs	r3, #0
 8003022:	71fb      	strb	r3, [r7, #7]
 8003024:	e050      	b.n	80030c8 <drow_game+0x40c>
	{
		if(bonuses[i].active)
 8003026:	79fa      	ldrb	r2, [r7, #7]
 8003028:	4931      	ldr	r1, [pc, #196]	@ (80030f0 <drow_game+0x434>)
 800302a:	4613      	mov	r3, r2
 800302c:	00db      	lsls	r3, r3, #3
 800302e:	1a9b      	subs	r3, r3, r2
 8003030:	009b      	lsls	r3, r3, #2
 8003032:	440b      	add	r3, r1
 8003034:	781b      	ldrb	r3, [r3, #0]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d043      	beq.n	80030c2 <drow_game+0x406>
		{
			switch(bonuses[i].type)
 800303a:	79fa      	ldrb	r2, [r7, #7]
 800303c:	492c      	ldr	r1, [pc, #176]	@ (80030f0 <drow_game+0x434>)
 800303e:	4613      	mov	r3, r2
 8003040:	00db      	lsls	r3, r3, #3
 8003042:	1a9b      	subs	r3, r3, r2
 8003044:	009b      	lsls	r3, r3, #2
 8003046:	440b      	add	r3, r1
 8003048:	330c      	adds	r3, #12
 800304a:	781b      	ldrb	r3, [r3, #0]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d002      	beq.n	8003056 <drow_game+0x39a>
 8003050:	2b01      	cmp	r3, #1
 8003052:	d01b      	beq.n	800308c <drow_game+0x3d0>
 8003054:	e035      	b.n	80030c2 <drow_game+0x406>
			{
			case bt_live:
				GFX_DrowBitMap_P(bonuses[i].x, bonuses[i].y, bonus_live_map, 7, 7, 1);
 8003056:	79fa      	ldrb	r2, [r7, #7]
 8003058:	4925      	ldr	r1, [pc, #148]	@ (80030f0 <drow_game+0x434>)
 800305a:	4613      	mov	r3, r2
 800305c:	00db      	lsls	r3, r3, #3
 800305e:	1a9b      	subs	r3, r3, r2
 8003060:	009b      	lsls	r3, r3, #2
 8003062:	440b      	add	r3, r1
 8003064:	3304      	adds	r3, #4
 8003066:	6818      	ldr	r0, [r3, #0]
 8003068:	79fa      	ldrb	r2, [r7, #7]
 800306a:	4921      	ldr	r1, [pc, #132]	@ (80030f0 <drow_game+0x434>)
 800306c:	4613      	mov	r3, r2
 800306e:	00db      	lsls	r3, r3, #3
 8003070:	1a9b      	subs	r3, r3, r2
 8003072:	009b      	lsls	r3, r3, #2
 8003074:	440b      	add	r3, r1
 8003076:	3308      	adds	r3, #8
 8003078:	6819      	ldr	r1, [r3, #0]
 800307a:	2301      	movs	r3, #1
 800307c:	9301      	str	r3, [sp, #4]
 800307e:	2307      	movs	r3, #7
 8003080:	9300      	str	r3, [sp, #0]
 8003082:	2307      	movs	r3, #7
 8003084:	4a1b      	ldr	r2, [pc, #108]	@ (80030f4 <drow_game+0x438>)
 8003086:	f7fd fe91 	bl	8000dac <GFX_DrowBitMap_P>
				break;
 800308a:	e01a      	b.n	80030c2 <drow_game+0x406>
			case bt_tracker_shoot:
				GFX_DrowBitMap_P(bonuses[i].x, bonuses[i].y, bonus_tracker_shoot_map, 7, 7, 1);
 800308c:	79fa      	ldrb	r2, [r7, #7]
 800308e:	4918      	ldr	r1, [pc, #96]	@ (80030f0 <drow_game+0x434>)
 8003090:	4613      	mov	r3, r2
 8003092:	00db      	lsls	r3, r3, #3
 8003094:	1a9b      	subs	r3, r3, r2
 8003096:	009b      	lsls	r3, r3, #2
 8003098:	440b      	add	r3, r1
 800309a:	3304      	adds	r3, #4
 800309c:	6818      	ldr	r0, [r3, #0]
 800309e:	79fa      	ldrb	r2, [r7, #7]
 80030a0:	4913      	ldr	r1, [pc, #76]	@ (80030f0 <drow_game+0x434>)
 80030a2:	4613      	mov	r3, r2
 80030a4:	00db      	lsls	r3, r3, #3
 80030a6:	1a9b      	subs	r3, r3, r2
 80030a8:	009b      	lsls	r3, r3, #2
 80030aa:	440b      	add	r3, r1
 80030ac:	3308      	adds	r3, #8
 80030ae:	6819      	ldr	r1, [r3, #0]
 80030b0:	2301      	movs	r3, #1
 80030b2:	9301      	str	r3, [sp, #4]
 80030b4:	2307      	movs	r3, #7
 80030b6:	9300      	str	r3, [sp, #0]
 80030b8:	2307      	movs	r3, #7
 80030ba:	4a0f      	ldr	r2, [pc, #60]	@ (80030f8 <drow_game+0x43c>)
 80030bc:	f7fd fe76 	bl	8000dac <GFX_DrowBitMap_P>
				break;
 80030c0:	bf00      	nop
	for(i = 0; i < num_bonus; i++)
 80030c2:	79fb      	ldrb	r3, [r7, #7]
 80030c4:	3301      	adds	r3, #1
 80030c6:	71fb      	strb	r3, [r7, #7]
 80030c8:	79fb      	ldrb	r3, [r7, #7]
 80030ca:	2b02      	cmp	r3, #2
 80030cc:	d9ab      	bls.n	8003026 <drow_game+0x36a>
			}
		}
	}
}
 80030ce:	bf00      	nop
 80030d0:	bf00      	nop
 80030d2:	3708      	adds	r7, #8
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bdb0      	pop	{r4, r5, r7, pc}
 80030d8:	2000060c 	.word	0x2000060c
 80030dc:	88888889 	.word	0x88888889
 80030e0:	20001994 	.word	0x20001994
 80030e4:	20000160 	.word	0x20000160
 80030e8:	0800976c 	.word	0x0800976c
 80030ec:	08009790 	.word	0x08009790
 80030f0:	200019b0 	.word	0x200019b0
 80030f4:	080097b4 	.word	0x080097b4
 80030f8:	080097bc 	.word	0x080097bc

080030fc <run_game>:

void run_game (void)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	af00      	add	r7, sp, #0
	/*
	 * The main loop of the game, executing the relevant functions one by one
	 */
	drow_game();
 8003100:	f7ff fddc 	bl	8002cbc <drow_game>
	ssd1327_display();
 8003104:	f000 fcc8 	bl	8003a98 <ssd1327_display>
	ssd1327_CLR();
 8003108:	f000 fcfe 	bl	8003b08 <ssd1327_CLR>

	update_lvl();
 800310c:	f7fe fb90 	bl	8001830 <update_lvl>
	update_scene();
 8003110:	f7fe fe3a 	bl	8001d88 <update_scene>
	update_backgrand();
 8003114:	f7fe fafa 	bl	800170c <update_backgrand>
	update_bonus();
 8003118:	f000 fa8c 	bl	8003634 <update_bonus>

}
 800311c:	bf00      	nop
 800311e:	bd80      	pop	{r7, pc}

08003120 <run_menu>:

void run_menu (void)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b082      	sub	sp, #8
 8003124:	af02      	add	r7, sp, #8
	/*
	 * Start screen, basic information for the player at the beginning
	 */
	static int x = 0, dx = 1;
	x += dx;
 8003126:	4b22      	ldr	r3, [pc, #136]	@ (80031b0 <run_menu+0x90>)
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	4b22      	ldr	r3, [pc, #136]	@ (80031b4 <run_menu+0x94>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4413      	add	r3, r2
 8003130:	4a1f      	ldr	r2, [pc, #124]	@ (80031b0 <run_menu+0x90>)
 8003132:	6013      	str	r3, [r2, #0]
	if (x < 1 || x > 65) dx = -dx;
 8003134:	4b1e      	ldr	r3, [pc, #120]	@ (80031b0 <run_menu+0x90>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	2b00      	cmp	r3, #0
 800313a:	dd03      	ble.n	8003144 <run_menu+0x24>
 800313c:	4b1c      	ldr	r3, [pc, #112]	@ (80031b0 <run_menu+0x90>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	2b41      	cmp	r3, #65	@ 0x41
 8003142:	dd04      	ble.n	800314e <run_menu+0x2e>
 8003144:	4b1b      	ldr	r3, [pc, #108]	@ (80031b4 <run_menu+0x94>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	425b      	negs	r3, r3
 800314a:	4a1a      	ldr	r2, [pc, #104]	@ (80031b4 <run_menu+0x94>)
 800314c:	6013      	str	r3, [r2, #0]
	ssd1327_CLR();
 800314e:	f000 fcdb 	bl	8003b08 <ssd1327_CLR>

	GFX_DrowBitMap_P(x,(screen_height/2) - 10,uGalaxy_map,54,16,1);
 8003152:	4b17      	ldr	r3, [pc, #92]	@ (80031b0 <run_menu+0x90>)
 8003154:	6818      	ldr	r0, [r3, #0]
 8003156:	2301      	movs	r3, #1
 8003158:	9301      	str	r3, [sp, #4]
 800315a:	2310      	movs	r3, #16
 800315c:	9300      	str	r3, [sp, #0]
 800315e:	2336      	movs	r3, #54	@ 0x36
 8003160:	4a15      	ldr	r2, [pc, #84]	@ (80031b8 <run_menu+0x98>)
 8003162:	2136      	movs	r1, #54	@ 0x36
 8003164:	f7fd fe22 	bl	8000dac <GFX_DrowBitMap_P>
	GFX_DrowRoundRect(15,(screen_height/2) + 34,93,20,8,1);
 8003168:	2301      	movs	r3, #1
 800316a:	9301      	str	r3, [sp, #4]
 800316c:	2308      	movs	r3, #8
 800316e:	9300      	str	r3, [sp, #0]
 8003170:	2314      	movs	r3, #20
 8003172:	225d      	movs	r2, #93	@ 0x5d
 8003174:	2162      	movs	r1, #98	@ 0x62
 8003176:	200f      	movs	r0, #15
 8003178:	f7fd ffca 	bl	8001110 <GFX_DrowRoundRect>
	GFX_DrowBitMap_P(26, (screen_height/2)+ 37, PressToStart_map, 66,10,1);
 800317c:	2301      	movs	r3, #1
 800317e:	9301      	str	r3, [sp, #4]
 8003180:	230a      	movs	r3, #10
 8003182:	9300      	str	r3, [sp, #0]
 8003184:	2342      	movs	r3, #66	@ 0x42
 8003186:	4a0d      	ldr	r2, [pc, #52]	@ (80031bc <run_menu+0x9c>)
 8003188:	2165      	movs	r1, #101	@ 0x65
 800318a:	201a      	movs	r0, #26
 800318c:	f7fd fe0e 	bl	8000dac <GFX_DrowBitMap_P>

	if(button_pressed())
 8003190:	f000 fb8e 	bl	80038b0 <button_pressed>
 8003194:	4603      	mov	r3, r0
 8003196:	2b00      	cmp	r3, #0
 8003198:	d004      	beq.n	80031a4 <run_menu+0x84>
	{
		start_game();
 800319a:	f000 f813 	bl	80031c4 <start_game>
		state = st_playing;
 800319e:	4b08      	ldr	r3, [pc, #32]	@ (80031c0 <run_menu+0xa0>)
 80031a0:	2201      	movs	r2, #1
 80031a2:	701a      	strb	r2, [r3, #0]
	}
	ssd1327_display();
 80031a4:	f000 fc78 	bl	8003a98 <ssd1327_display>

}
 80031a8:	bf00      	nop
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}
 80031ae:	bf00      	nop
 80031b0:	20001a10 	.word	0x20001a10
 80031b4:	20000008 	.word	0x20000008
 80031b8:	08009654 	.word	0x08009654
 80031bc:	080096c4 	.word	0x080096c4
 80031c0:	20001a04 	.word	0x20001a04

080031c4 <start_game>:

void start_game(void)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b083      	sub	sp, #12
 80031c8:	af00      	add	r7, sp, #0
	 * the player and the first boss. Furthermore, it "resets"
	 * the arrays of shot, opponents and bonuses.
	 */
	uint8_t i;
	//Player initial settings
	player.lives = initial_lives;
 80031ca:	4b44      	ldr	r3, [pc, #272]	@ (80032dc <start_game+0x118>)
 80031cc:	220a      	movs	r2, #10
 80031ce:	611a      	str	r2, [r3, #16]
	player.score = initial_score;
 80031d0:	4b42      	ldr	r3, [pc, #264]	@ (80032dc <start_game+0x118>)
 80031d2:	2200      	movs	r2, #0
 80031d4:	609a      	str	r2, [r3, #8]
	player.x = initial_x;
 80031d6:	4b41      	ldr	r3, [pc, #260]	@ (80032dc <start_game+0x118>)
 80031d8:	2202      	movs	r2, #2
 80031da:	601a      	str	r2, [r3, #0]
	player.y = initial_y;
 80031dc:	4b3f      	ldr	r3, [pc, #252]	@ (80032dc <start_game+0x118>)
 80031de:	2240      	movs	r2, #64	@ 0x40
 80031e0:	605a      	str	r2, [r3, #4]
	player.level = initial_level;
 80031e2:	4b3e      	ldr	r3, [pc, #248]	@ (80032dc <start_game+0x118>)
 80031e4:	2201      	movs	r2, #1
 80031e6:	615a      	str	r2, [r3, #20]
	player.game_progres = initial_game_progres;
 80031e8:	4b3c      	ldr	r3, [pc, #240]	@ (80032dc <start_game+0x118>)
 80031ea:	2200      	movs	r2, #0
 80031ec:	619a      	str	r2, [r3, #24]
	player.shoot_type = st_normal;
 80031ee:	4b3b      	ldr	r3, [pc, #236]	@ (80032dc <start_game+0x118>)
 80031f0:	2200      	movs	r2, #0
 80031f2:	771a      	strb	r2, [r3, #28]

	//Deactivation of player shots
	for (i = 0; i < num_shots; ++i)
 80031f4:	2300      	movs	r3, #0
 80031f6:	71fb      	strb	r3, [r7, #7]
 80031f8:	e00b      	b.n	8003212 <start_game+0x4e>
		shots[i].active = false;
 80031fa:	79fa      	ldrb	r2, [r7, #7]
 80031fc:	4938      	ldr	r1, [pc, #224]	@ (80032e0 <start_game+0x11c>)
 80031fe:	4613      	mov	r3, r2
 8003200:	009b      	lsls	r3, r3, #2
 8003202:	4413      	add	r3, r2
 8003204:	009b      	lsls	r3, r3, #2
 8003206:	440b      	add	r3, r1
 8003208:	2200      	movs	r2, #0
 800320a:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < num_shots; ++i)
 800320c:	79fb      	ldrb	r3, [r7, #7]
 800320e:	3301      	adds	r3, #1
 8003210:	71fb      	strb	r3, [r7, #7]
 8003212:	79fb      	ldrb	r3, [r7, #7]
 8003214:	2b22      	cmp	r3, #34	@ 0x22
 8003216:	d9f0      	bls.n	80031fa <start_game+0x36>

	//Deactivation of boss shots
	for (i = 0; i < num_boss_shots; ++i)
 8003218:	2300      	movs	r3, #0
 800321a:	71fb      	strb	r3, [r7, #7]
 800321c:	e00b      	b.n	8003236 <start_game+0x72>
		boss_shots[i].active = false;
 800321e:	79fa      	ldrb	r2, [r7, #7]
 8003220:	4930      	ldr	r1, [pc, #192]	@ (80032e4 <start_game+0x120>)
 8003222:	4613      	mov	r3, r2
 8003224:	009b      	lsls	r3, r3, #2
 8003226:	4413      	add	r3, r2
 8003228:	009b      	lsls	r3, r3, #2
 800322a:	440b      	add	r3, r1
 800322c:	2200      	movs	r2, #0
 800322e:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < num_boss_shots; ++i)
 8003230:	79fb      	ldrb	r3, [r7, #7]
 8003232:	3301      	adds	r3, #1
 8003234:	71fb      	strb	r3, [r7, #7]
 8003236:	79fb      	ldrb	r3, [r7, #7]
 8003238:	2b04      	cmp	r3, #4
 800323a:	d9f0      	bls.n	800321e <start_game+0x5a>

	//Deactivation enemies
	for (i = 0; i < num_enemies; i++)
 800323c:	2300      	movs	r3, #0
 800323e:	71fb      	strb	r3, [r7, #7]
 8003240:	e01f      	b.n	8003282 <start_game+0xbe>
	{
		enemies[i].active = false;
 8003242:	79fa      	ldrb	r2, [r7, #7]
 8003244:	4928      	ldr	r1, [pc, #160]	@ (80032e8 <start_game+0x124>)
 8003246:	4613      	mov	r3, r2
 8003248:	00db      	lsls	r3, r3, #3
 800324a:	4413      	add	r3, r2
 800324c:	009b      	lsls	r3, r3, #2
 800324e:	440b      	add	r3, r1
 8003250:	2200      	movs	r2, #0
 8003252:	701a      	strb	r2, [r3, #0]
		enemies[i].track_number = 0;
 8003254:	79fa      	ldrb	r2, [r7, #7]
 8003256:	4924      	ldr	r1, [pc, #144]	@ (80032e8 <start_game+0x124>)
 8003258:	4613      	mov	r3, r2
 800325a:	00db      	lsls	r3, r3, #3
 800325c:	4413      	add	r3, r2
 800325e:	009b      	lsls	r3, r3, #2
 8003260:	440b      	add	r3, r1
 8003262:	3320      	adds	r3, #32
 8003264:	2200      	movs	r2, #0
 8003266:	601a      	str	r2, [r3, #0]
		enemies[i].tracked_by_missile = false;
 8003268:	79fa      	ldrb	r2, [r7, #7]
 800326a:	491f      	ldr	r1, [pc, #124]	@ (80032e8 <start_game+0x124>)
 800326c:	4613      	mov	r3, r2
 800326e:	00db      	lsls	r3, r3, #3
 8003270:	4413      	add	r3, r2
 8003272:	009b      	lsls	r3, r3, #2
 8003274:	440b      	add	r3, r1
 8003276:	331c      	adds	r3, #28
 8003278:	2200      	movs	r2, #0
 800327a:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < num_enemies; i++)
 800327c:	79fb      	ldrb	r3, [r7, #7]
 800327e:	3301      	adds	r3, #1
 8003280:	71fb      	strb	r3, [r7, #7]
 8003282:	79fb      	ldrb	r3, [r7, #7]
 8003284:	2b09      	cmp	r3, #9
 8003286:	d9dc      	bls.n	8003242 <start_game+0x7e>
	}

	//Deactivation bonuses
	for (i = 0; i < num_bonus; i++)
 8003288:	2300      	movs	r3, #0
 800328a:	71fb      	strb	r3, [r7, #7]
 800328c:	e00b      	b.n	80032a6 <start_game+0xe2>
		bonuses[i].active = false;
 800328e:	79fa      	ldrb	r2, [r7, #7]
 8003290:	4916      	ldr	r1, [pc, #88]	@ (80032ec <start_game+0x128>)
 8003292:	4613      	mov	r3, r2
 8003294:	00db      	lsls	r3, r3, #3
 8003296:	1a9b      	subs	r3, r3, r2
 8003298:	009b      	lsls	r3, r3, #2
 800329a:	440b      	add	r3, r1
 800329c:	2200      	movs	r2, #0
 800329e:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < num_bonus; i++)
 80032a0:	79fb      	ldrb	r3, [r7, #7]
 80032a2:	3301      	adds	r3, #1
 80032a4:	71fb      	strb	r3, [r7, #7]
 80032a6:	79fb      	ldrb	r3, [r7, #7]
 80032a8:	2b02      	cmp	r3, #2
 80032aa:	d9f0      	bls.n	800328e <start_game+0xca>

	//Deactivation boss
	boss.active = false;
 80032ac:	4b10      	ldr	r3, [pc, #64]	@ (80032f0 <start_game+0x12c>)
 80032ae:	2200      	movs	r2, #0
 80032b0:	701a      	strb	r2, [r3, #0]
	boss.lives = 6;
 80032b2:	4b0f      	ldr	r3, [pc, #60]	@ (80032f0 <start_game+0x12c>)
 80032b4:	2206      	movs	r2, #6
 80032b6:	615a      	str	r2, [r3, #20]
	boss.level = 1;
 80032b8:	4b0d      	ldr	r3, [pc, #52]	@ (80032f0 <start_game+0x12c>)
 80032ba:	2201      	movs	r2, #1
 80032bc:	619a      	str	r2, [r3, #24]
	boss.x = 140;
 80032be:	4b0c      	ldr	r3, [pc, #48]	@ (80032f0 <start_game+0x12c>)
 80032c0:	228c      	movs	r2, #140	@ 0x8c
 80032c2:	605a      	str	r2, [r3, #4]
	boss.y = 32;
 80032c4:	4b0a      	ldr	r3, [pc, #40]	@ (80032f0 <start_game+0x12c>)
 80032c6:	2220      	movs	r2, #32
 80032c8:	609a      	str	r2, [r3, #8]
	boss.update_delay = 3;
 80032ca:	4b09      	ldr	r3, [pc, #36]	@ (80032f0 <start_game+0x12c>)
 80032cc:	2203      	movs	r2, #3
 80032ce:	611a      	str	r2, [r3, #16]

}
 80032d0:	bf00      	nop
 80032d2:	370c      	adds	r7, #12
 80032d4:	46bd      	mov	sp, r7
 80032d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032da:	4770      	bx	lr
 80032dc:	20000160 	.word	0x20000160
 80032e0:	20000184 	.word	0x20000184
 80032e4:	20000440 	.word	0x20000440
 80032e8:	200004a4 	.word	0x200004a4
 80032ec:	200019b0 	.word	0x200019b0
 80032f0:	20001994 	.word	0x20001994

080032f4 <add_enemy>:

void add_enemy(void)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b082      	sub	sp, #8
 80032f8:	af00      	add	r7, sp, #0
	 * Setting its initial parameters, i.e. position, refreshment, graphics, type.
	 */
	uint8_t i;
	uint8_t enemy_type;

	for(i = 0; i < player.level; i++)
 80032fa:	2300      	movs	r3, #0
 80032fc:	71fb      	strb	r3, [r7, #7]
 80032fe:	e0f0      	b.n	80034e2 <add_enemy+0x1ee>
	{
		if(!enemies[i].active)
 8003300:	79fa      	ldrb	r2, [r7, #7]
 8003302:	497e      	ldr	r1, [pc, #504]	@ (80034fc <add_enemy+0x208>)
 8003304:	4613      	mov	r3, r2
 8003306:	00db      	lsls	r3, r3, #3
 8003308:	4413      	add	r3, r2
 800330a:	009b      	lsls	r3, r3, #2
 800330c:	440b      	add	r3, r1
 800330e:	781b      	ldrb	r3, [r3, #0]
 8003310:	f083 0301 	eor.w	r3, r3, #1
 8003314:	b2db      	uxtb	r3, r3
 8003316:	2b00      	cmp	r3, #0
 8003318:	f000 80e0 	beq.w	80034dc <add_enemy+0x1e8>
		{
			enemies[i].active = true;
 800331c:	79fa      	ldrb	r2, [r7, #7]
 800331e:	4977      	ldr	r1, [pc, #476]	@ (80034fc <add_enemy+0x208>)
 8003320:	4613      	mov	r3, r2
 8003322:	00db      	lsls	r3, r3, #3
 8003324:	4413      	add	r3, r2
 8003326:	009b      	lsls	r3, r3, #2
 8003328:	440b      	add	r3, r1
 800332a:	2201      	movs	r2, #1
 800332c:	701a      	strb	r2, [r3, #0]
			enemies[i].x = 140;
 800332e:	79fa      	ldrb	r2, [r7, #7]
 8003330:	4972      	ldr	r1, [pc, #456]	@ (80034fc <add_enemy+0x208>)
 8003332:	4613      	mov	r3, r2
 8003334:	00db      	lsls	r3, r3, #3
 8003336:	4413      	add	r3, r2
 8003338:	009b      	lsls	r3, r3, #2
 800333a:	440b      	add	r3, r1
 800333c:	3304      	adds	r3, #4
 800333e:	228c      	movs	r2, #140	@ 0x8c
 8003340:	601a      	str	r2, [r3, #0]
			enemies[i].y = ((rand()%(screen_height - 10))+10);
 8003342:	f003 ff17 	bl	8007174 <rand>
 8003346:	4602      	mov	r2, r0
 8003348:	4b6d      	ldr	r3, [pc, #436]	@ (8003500 <add_enemy+0x20c>)
 800334a:	fb83 1302 	smull	r1, r3, r3, r2
 800334e:	1119      	asrs	r1, r3, #4
 8003350:	17d3      	asrs	r3, r2, #31
 8003352:	1acb      	subs	r3, r1, r3
 8003354:	2176      	movs	r1, #118	@ 0x76
 8003356:	fb01 f303 	mul.w	r3, r1, r3
 800335a:	1ad3      	subs	r3, r2, r3
 800335c:	79fa      	ldrb	r2, [r7, #7]
 800335e:	f103 010a 	add.w	r1, r3, #10
 8003362:	4866      	ldr	r0, [pc, #408]	@ (80034fc <add_enemy+0x208>)
 8003364:	4613      	mov	r3, r2
 8003366:	00db      	lsls	r3, r3, #3
 8003368:	4413      	add	r3, r2
 800336a:	009b      	lsls	r3, r3, #2
 800336c:	4403      	add	r3, r0
 800336e:	3308      	adds	r3, #8
 8003370:	6019      	str	r1, [r3, #0]
			enemies[i].tracked_by_missile = false;
 8003372:	79fa      	ldrb	r2, [r7, #7]
 8003374:	4961      	ldr	r1, [pc, #388]	@ (80034fc <add_enemy+0x208>)
 8003376:	4613      	mov	r3, r2
 8003378:	00db      	lsls	r3, r3, #3
 800337a:	4413      	add	r3, r2
 800337c:	009b      	lsls	r3, r3, #2
 800337e:	440b      	add	r3, r1
 8003380:	331c      	adds	r3, #28
 8003382:	2200      	movs	r2, #0
 8003384:	701a      	strb	r2, [r3, #0]
			enemies[i].track_number = 0;
 8003386:	79fa      	ldrb	r2, [r7, #7]
 8003388:	495c      	ldr	r1, [pc, #368]	@ (80034fc <add_enemy+0x208>)
 800338a:	4613      	mov	r3, r2
 800338c:	00db      	lsls	r3, r3, #3
 800338e:	4413      	add	r3, r2
 8003390:	009b      	lsls	r3, r3, #2
 8003392:	440b      	add	r3, r1
 8003394:	3320      	adds	r3, #32
 8003396:	2200      	movs	r2, #0
 8003398:	601a      	str	r2, [r3, #0]

			enemy_type = (rand()%100);
 800339a:	f003 feeb 	bl	8007174 <rand>
 800339e:	4603      	mov	r3, r0
 80033a0:	4a58      	ldr	r2, [pc, #352]	@ (8003504 <add_enemy+0x210>)
 80033a2:	fb82 1203 	smull	r1, r2, r2, r3
 80033a6:	1151      	asrs	r1, r2, #5
 80033a8:	17da      	asrs	r2, r3, #31
 80033aa:	1a8a      	subs	r2, r1, r2
 80033ac:	2164      	movs	r1, #100	@ 0x64
 80033ae:	fb01 f202 	mul.w	r2, r1, r2
 80033b2:	1a9a      	subs	r2, r3, r2
 80033b4:	4613      	mov	r3, r2
 80033b6:	71bb      	strb	r3, [r7, #6]

			if((enemy_type > 50))
 80033b8:	79bb      	ldrb	r3, [r7, #6]
 80033ba:	2b32      	cmp	r3, #50	@ 0x32
 80033bc:	d928      	bls.n	8003410 <add_enemy+0x11c>
			{

				enemies[i].type = et_diver;
 80033be:	79fa      	ldrb	r2, [r7, #7]
 80033c0:	494e      	ldr	r1, [pc, #312]	@ (80034fc <add_enemy+0x208>)
 80033c2:	4613      	mov	r3, r2
 80033c4:	00db      	lsls	r3, r3, #3
 80033c6:	4413      	add	r3, r2
 80033c8:	009b      	lsls	r3, r3, #2
 80033ca:	440b      	add	r3, r1
 80033cc:	330c      	adds	r3, #12
 80033ce:	2200      	movs	r2, #0
 80033d0:	701a      	strb	r2, [r3, #0]
				enemies[i].update_delay = (rand()%3);	//Speed setting (less = faster)
 80033d2:	f003 fecf 	bl	8007174 <rand>
 80033d6:	4601      	mov	r1, r0
 80033d8:	79f8      	ldrb	r0, [r7, #7]
 80033da:	4b4b      	ldr	r3, [pc, #300]	@ (8003508 <add_enemy+0x214>)
 80033dc:	fb83 3201 	smull	r3, r2, r3, r1
 80033e0:	17cb      	asrs	r3, r1, #31
 80033e2:	1ad2      	subs	r2, r2, r3
 80033e4:	4613      	mov	r3, r2
 80033e6:	005b      	lsls	r3, r3, #1
 80033e8:	4413      	add	r3, r2
 80033ea:	1aca      	subs	r2, r1, r3
 80033ec:	4943      	ldr	r1, [pc, #268]	@ (80034fc <add_enemy+0x208>)
 80033ee:	4603      	mov	r3, r0
 80033f0:	00db      	lsls	r3, r3, #3
 80033f2:	4403      	add	r3, r0
 80033f4:	009b      	lsls	r3, r3, #2
 80033f6:	440b      	add	r3, r1
 80033f8:	3318      	adds	r3, #24
 80033fa:	601a      	str	r2, [r3, #0]
				enemies[i].bit_map = driver_map;
 80033fc:	79fa      	ldrb	r2, [r7, #7]
 80033fe:	493f      	ldr	r1, [pc, #252]	@ (80034fc <add_enemy+0x208>)
 8003400:	4613      	mov	r3, r2
 8003402:	00db      	lsls	r3, r3, #3
 8003404:	4413      	add	r3, r2
 8003406:	009b      	lsls	r3, r3, #2
 8003408:	440b      	add	r3, r1
 800340a:	3310      	adds	r3, #16
 800340c:	4a3f      	ldr	r2, [pc, #252]	@ (800350c <add_enemy+0x218>)
 800340e:	601a      	str	r2, [r3, #0]
			}
			if((enemy_type > 20 && enemy_type < 50) && (player.level > 4))
 8003410:	79bb      	ldrb	r3, [r7, #6]
 8003412:	2b14      	cmp	r3, #20
 8003414:	d930      	bls.n	8003478 <add_enemy+0x184>
 8003416:	79bb      	ldrb	r3, [r7, #6]
 8003418:	2b31      	cmp	r3, #49	@ 0x31
 800341a:	d82d      	bhi.n	8003478 <add_enemy+0x184>
 800341c:	4b3c      	ldr	r3, [pc, #240]	@ (8003510 <add_enemy+0x21c>)
 800341e:	695b      	ldr	r3, [r3, #20]
 8003420:	2b04      	cmp	r3, #4
 8003422:	dd29      	ble.n	8003478 <add_enemy+0x184>
			{
				enemies[i].type = et_tracker;
 8003424:	79fa      	ldrb	r2, [r7, #7]
 8003426:	4935      	ldr	r1, [pc, #212]	@ (80034fc <add_enemy+0x208>)
 8003428:	4613      	mov	r3, r2
 800342a:	00db      	lsls	r3, r3, #3
 800342c:	4413      	add	r3, r2
 800342e:	009b      	lsls	r3, r3, #2
 8003430:	440b      	add	r3, r1
 8003432:	330c      	adds	r3, #12
 8003434:	2201      	movs	r2, #1
 8003436:	701a      	strb	r2, [r3, #0]
				enemies[i].update_delay = ((rand()%3)+1);
 8003438:	f003 fe9c 	bl	8007174 <rand>
 800343c:	4601      	mov	r1, r0
 800343e:	4b32      	ldr	r3, [pc, #200]	@ (8003508 <add_enemy+0x214>)
 8003440:	fb83 3201 	smull	r3, r2, r3, r1
 8003444:	17cb      	asrs	r3, r1, #31
 8003446:	1ad2      	subs	r2, r2, r3
 8003448:	4613      	mov	r3, r2
 800344a:	005b      	lsls	r3, r3, #1
 800344c:	4413      	add	r3, r2
 800344e:	1aca      	subs	r2, r1, r3
 8003450:	79f9      	ldrb	r1, [r7, #7]
 8003452:	3201      	adds	r2, #1
 8003454:	4829      	ldr	r0, [pc, #164]	@ (80034fc <add_enemy+0x208>)
 8003456:	460b      	mov	r3, r1
 8003458:	00db      	lsls	r3, r3, #3
 800345a:	440b      	add	r3, r1
 800345c:	009b      	lsls	r3, r3, #2
 800345e:	4403      	add	r3, r0
 8003460:	3318      	adds	r3, #24
 8003462:	601a      	str	r2, [r3, #0]
				enemies[i].bit_map = tracker_map;
 8003464:	79fa      	ldrb	r2, [r7, #7]
 8003466:	4925      	ldr	r1, [pc, #148]	@ (80034fc <add_enemy+0x208>)
 8003468:	4613      	mov	r3, r2
 800346a:	00db      	lsls	r3, r3, #3
 800346c:	4413      	add	r3, r2
 800346e:	009b      	lsls	r3, r3, #2
 8003470:	440b      	add	r3, r1
 8003472:	3310      	adds	r3, #16
 8003474:	4a27      	ldr	r2, [pc, #156]	@ (8003514 <add_enemy+0x220>)
 8003476:	601a      	str	r2, [r3, #0]
			}
			if((enemy_type < 20) && (player.level > 7))
 8003478:	79bb      	ldrb	r3, [r7, #6]
 800347a:	2b13      	cmp	r3, #19
 800347c:	d838      	bhi.n	80034f0 <add_enemy+0x1fc>
 800347e:	4b24      	ldr	r3, [pc, #144]	@ (8003510 <add_enemy+0x21c>)
 8003480:	695b      	ldr	r3, [r3, #20]
 8003482:	2b07      	cmp	r3, #7
 8003484:	dd34      	ble.n	80034f0 <add_enemy+0x1fc>
			{
				enemies[i].type = et_bobber;
 8003486:	79fa      	ldrb	r2, [r7, #7]
 8003488:	491c      	ldr	r1, [pc, #112]	@ (80034fc <add_enemy+0x208>)
 800348a:	4613      	mov	r3, r2
 800348c:	00db      	lsls	r3, r3, #3
 800348e:	4413      	add	r3, r2
 8003490:	009b      	lsls	r3, r3, #2
 8003492:	440b      	add	r3, r1
 8003494:	330c      	adds	r3, #12
 8003496:	2202      	movs	r2, #2
 8003498:	701a      	strb	r2, [r3, #0]
				enemies[i].update_delay = ((rand()%3)+2);
 800349a:	f003 fe6b 	bl	8007174 <rand>
 800349e:	4601      	mov	r1, r0
 80034a0:	4b19      	ldr	r3, [pc, #100]	@ (8003508 <add_enemy+0x214>)
 80034a2:	fb83 3201 	smull	r3, r2, r3, r1
 80034a6:	17cb      	asrs	r3, r1, #31
 80034a8:	1ad2      	subs	r2, r2, r3
 80034aa:	4613      	mov	r3, r2
 80034ac:	005b      	lsls	r3, r3, #1
 80034ae:	4413      	add	r3, r2
 80034b0:	1aca      	subs	r2, r1, r3
 80034b2:	79f9      	ldrb	r1, [r7, #7]
 80034b4:	3202      	adds	r2, #2
 80034b6:	4811      	ldr	r0, [pc, #68]	@ (80034fc <add_enemy+0x208>)
 80034b8:	460b      	mov	r3, r1
 80034ba:	00db      	lsls	r3, r3, #3
 80034bc:	440b      	add	r3, r1
 80034be:	009b      	lsls	r3, r3, #2
 80034c0:	4403      	add	r3, r0
 80034c2:	3318      	adds	r3, #24
 80034c4:	601a      	str	r2, [r3, #0]
				enemies[i].bit_map = bobber_map;
 80034c6:	79fa      	ldrb	r2, [r7, #7]
 80034c8:	490c      	ldr	r1, [pc, #48]	@ (80034fc <add_enemy+0x208>)
 80034ca:	4613      	mov	r3, r2
 80034cc:	00db      	lsls	r3, r3, #3
 80034ce:	4413      	add	r3, r2
 80034d0:	009b      	lsls	r3, r3, #2
 80034d2:	440b      	add	r3, r1
 80034d4:	3310      	adds	r3, #16
 80034d6:	4a10      	ldr	r2, [pc, #64]	@ (8003518 <add_enemy+0x224>)
 80034d8:	601a      	str	r2, [r3, #0]
			}
			break;
 80034da:	e009      	b.n	80034f0 <add_enemy+0x1fc>
	for(i = 0; i < player.level; i++)
 80034dc:	79fb      	ldrb	r3, [r7, #7]
 80034de:	3301      	adds	r3, #1
 80034e0:	71fb      	strb	r3, [r7, #7]
 80034e2:	79fa      	ldrb	r2, [r7, #7]
 80034e4:	4b0a      	ldr	r3, [pc, #40]	@ (8003510 <add_enemy+0x21c>)
 80034e6:	695b      	ldr	r3, [r3, #20]
 80034e8:	429a      	cmp	r2, r3
 80034ea:	f6ff af09 	blt.w	8003300 <add_enemy+0xc>
		}
	}
}
 80034ee:	e000      	b.n	80034f2 <add_enemy+0x1fe>
			break;
 80034f0:	bf00      	nop
}
 80034f2:	bf00      	nop
 80034f4:	3708      	adds	r7, #8
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}
 80034fa:	bf00      	nop
 80034fc:	200004a4 	.word	0x200004a4
 8003500:	22b63cbf 	.word	0x22b63cbf
 8003504:	51eb851f 	.word	0x51eb851f
 8003508:	55555556 	.word	0x55555556
 800350c:	08009748 	.word	0x08009748
 8003510:	20000160 	.word	0x20000160
 8003514:	08009740 	.word	0x08009740
 8003518:	08009750 	.word	0x08009750

0800351c <add_bonus>:

void add_bonus(int x, int y)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b084      	sub	sp, #16
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
 8003524:	6039      	str	r1, [r7, #0]
	 */

	uint8_t i;
	int bonus_type;

	for (i = 0; i < num_bonus; i++)
 8003526:	2300      	movs	r3, #0
 8003528:	73fb      	strb	r3, [r7, #15]
 800352a:	e073      	b.n	8003614 <add_bonus+0xf8>
	{
		if (!bonuses[i].active)
 800352c:	7bfa      	ldrb	r2, [r7, #15]
 800352e:	493d      	ldr	r1, [pc, #244]	@ (8003624 <add_bonus+0x108>)
 8003530:	4613      	mov	r3, r2
 8003532:	00db      	lsls	r3, r3, #3
 8003534:	1a9b      	subs	r3, r3, r2
 8003536:	009b      	lsls	r3, r3, #2
 8003538:	440b      	add	r3, r1
 800353a:	781b      	ldrb	r3, [r3, #0]
 800353c:	f083 0301 	eor.w	r3, r3, #1
 8003540:	b2db      	uxtb	r3, r3
 8003542:	2b00      	cmp	r3, #0
 8003544:	d063      	beq.n	800360e <add_bonus+0xf2>
		{
			bonuses[i].active = true;
 8003546:	7bfa      	ldrb	r2, [r7, #15]
 8003548:	4936      	ldr	r1, [pc, #216]	@ (8003624 <add_bonus+0x108>)
 800354a:	4613      	mov	r3, r2
 800354c:	00db      	lsls	r3, r3, #3
 800354e:	1a9b      	subs	r3, r3, r2
 8003550:	009b      	lsls	r3, r3, #2
 8003552:	440b      	add	r3, r1
 8003554:	2201      	movs	r2, #1
 8003556:	701a      	strb	r2, [r3, #0]
			bonuses[i].x = x;
 8003558:	7bfa      	ldrb	r2, [r7, #15]
 800355a:	4932      	ldr	r1, [pc, #200]	@ (8003624 <add_bonus+0x108>)
 800355c:	4613      	mov	r3, r2
 800355e:	00db      	lsls	r3, r3, #3
 8003560:	1a9b      	subs	r3, r3, r2
 8003562:	009b      	lsls	r3, r3, #2
 8003564:	440b      	add	r3, r1
 8003566:	3304      	adds	r3, #4
 8003568:	687a      	ldr	r2, [r7, #4]
 800356a:	601a      	str	r2, [r3, #0]
			bonuses[i].y = y;
 800356c:	7bfa      	ldrb	r2, [r7, #15]
 800356e:	492d      	ldr	r1, [pc, #180]	@ (8003624 <add_bonus+0x108>)
 8003570:	4613      	mov	r3, r2
 8003572:	00db      	lsls	r3, r3, #3
 8003574:	1a9b      	subs	r3, r3, r2
 8003576:	009b      	lsls	r3, r3, #2
 8003578:	440b      	add	r3, r1
 800357a:	3308      	adds	r3, #8
 800357c:	683a      	ldr	r2, [r7, #0]
 800357e:	601a      	str	r2, [r3, #0]
			bonuses[i].update_delay = 3;
 8003580:	7bfa      	ldrb	r2, [r7, #15]
 8003582:	4928      	ldr	r1, [pc, #160]	@ (8003624 <add_bonus+0x108>)
 8003584:	4613      	mov	r3, r2
 8003586:	00db      	lsls	r3, r3, #3
 8003588:	1a9b      	subs	r3, r3, r2
 800358a:	009b      	lsls	r3, r3, #2
 800358c:	440b      	add	r3, r1
 800358e:	3318      	adds	r3, #24
 8003590:	2203      	movs	r2, #3
 8003592:	601a      	str	r2, [r3, #0]

			bonus_type = rand()%100;
 8003594:	f003 fdee 	bl	8007174 <rand>
 8003598:	4603      	mov	r3, r0
 800359a:	4a23      	ldr	r2, [pc, #140]	@ (8003628 <add_bonus+0x10c>)
 800359c:	fb82 1203 	smull	r1, r2, r2, r3
 80035a0:	1151      	asrs	r1, r2, #5
 80035a2:	17da      	asrs	r2, r3, #31
 80035a4:	1a8a      	subs	r2, r1, r2
 80035a6:	2164      	movs	r1, #100	@ 0x64
 80035a8:	fb01 f202 	mul.w	r2, r1, r2
 80035ac:	1a9b      	subs	r3, r3, r2
 80035ae:	60bb      	str	r3, [r7, #8]

			if(bonus_type > 30)
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	2b1e      	cmp	r3, #30
 80035b4:	dd13      	ble.n	80035de <add_bonus+0xc2>
			{
				bonuses[i].bit_map = bonus_live_map;
 80035b6:	7bfa      	ldrb	r2, [r7, #15]
 80035b8:	491a      	ldr	r1, [pc, #104]	@ (8003624 <add_bonus+0x108>)
 80035ba:	4613      	mov	r3, r2
 80035bc:	00db      	lsls	r3, r3, #3
 80035be:	1a9b      	subs	r3, r3, r2
 80035c0:	009b      	lsls	r3, r3, #2
 80035c2:	440b      	add	r3, r1
 80035c4:	3310      	adds	r3, #16
 80035c6:	4a19      	ldr	r2, [pc, #100]	@ (800362c <add_bonus+0x110>)
 80035c8:	601a      	str	r2, [r3, #0]
				bonuses[i].type = st_normal;
 80035ca:	7bfa      	ldrb	r2, [r7, #15]
 80035cc:	4915      	ldr	r1, [pc, #84]	@ (8003624 <add_bonus+0x108>)
 80035ce:	4613      	mov	r3, r2
 80035d0:	00db      	lsls	r3, r3, #3
 80035d2:	1a9b      	subs	r3, r3, r2
 80035d4:	009b      	lsls	r3, r3, #2
 80035d6:	440b      	add	r3, r1
 80035d8:	330c      	adds	r3, #12
 80035da:	2200      	movs	r2, #0
 80035dc:	701a      	strb	r2, [r3, #0]
			}
			if(bonus_type < 30)
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	2b1d      	cmp	r3, #29
 80035e2:	dc1b      	bgt.n	800361c <add_bonus+0x100>
			{
				bonuses[i].bit_map = bonus_tracker_shoot_map;
 80035e4:	7bfa      	ldrb	r2, [r7, #15]
 80035e6:	490f      	ldr	r1, [pc, #60]	@ (8003624 <add_bonus+0x108>)
 80035e8:	4613      	mov	r3, r2
 80035ea:	00db      	lsls	r3, r3, #3
 80035ec:	1a9b      	subs	r3, r3, r2
 80035ee:	009b      	lsls	r3, r3, #2
 80035f0:	440b      	add	r3, r1
 80035f2:	3310      	adds	r3, #16
 80035f4:	4a0e      	ldr	r2, [pc, #56]	@ (8003630 <add_bonus+0x114>)
 80035f6:	601a      	str	r2, [r3, #0]
				bonuses[i].type = st_tracker;
 80035f8:	7bfa      	ldrb	r2, [r7, #15]
 80035fa:	490a      	ldr	r1, [pc, #40]	@ (8003624 <add_bonus+0x108>)
 80035fc:	4613      	mov	r3, r2
 80035fe:	00db      	lsls	r3, r3, #3
 8003600:	1a9b      	subs	r3, r3, r2
 8003602:	009b      	lsls	r3, r3, #2
 8003604:	440b      	add	r3, r1
 8003606:	330c      	adds	r3, #12
 8003608:	2201      	movs	r2, #1
 800360a:	701a      	strb	r2, [r3, #0]
			}
			return;
 800360c:	e006      	b.n	800361c <add_bonus+0x100>
	for (i = 0; i < num_bonus; i++)
 800360e:	7bfb      	ldrb	r3, [r7, #15]
 8003610:	3301      	adds	r3, #1
 8003612:	73fb      	strb	r3, [r7, #15]
 8003614:	7bfb      	ldrb	r3, [r7, #15]
 8003616:	2b02      	cmp	r3, #2
 8003618:	d988      	bls.n	800352c <add_bonus+0x10>
 800361a:	e000      	b.n	800361e <add_bonus+0x102>
			return;
 800361c:	bf00      	nop
		}
	}
}
 800361e:	3710      	adds	r7, #16
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}
 8003624:	200019b0 	.word	0x200019b0
 8003628:	51eb851f 	.word	0x51eb851f
 800362c:	080097b4 	.word	0x080097b4
 8003630:	080097bc 	.word	0x080097bc

08003634 <update_bonus>:

void update_bonus(void)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b082      	sub	sp, #8
 8003638:	af00      	add	r7, sp, #0
	/*
	 * Checking whether a player has hovered over a bonus.
	 * Moving a bonus on the map
	 * */
	int i = 0;
 800363a:	2300      	movs	r3, #0
 800363c:	607b      	str	r3, [r7, #4]

	//Check duration of st_tracekr if active

	if(player.bonus_duration > 0)
 800363e:	4b9a      	ldr	r3, [pc, #616]	@ (80038a8 <update_bonus+0x274>)
 8003640:	6a1b      	ldr	r3, [r3, #32]
 8003642:	2b00      	cmp	r3, #0
 8003644:	dd04      	ble.n	8003650 <update_bonus+0x1c>
		player.bonus_duration -= 1;
 8003646:	4b98      	ldr	r3, [pc, #608]	@ (80038a8 <update_bonus+0x274>)
 8003648:	6a1b      	ldr	r3, [r3, #32]
 800364a:	3b01      	subs	r3, #1
 800364c:	4a96      	ldr	r2, [pc, #600]	@ (80038a8 <update_bonus+0x274>)
 800364e:	6213      	str	r3, [r2, #32]
	if(player.bonus_duration == 0 && player.shoot_type == st_tracker)
 8003650:	4b95      	ldr	r3, [pc, #596]	@ (80038a8 <update_bonus+0x274>)
 8003652:	6a1b      	ldr	r3, [r3, #32]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d106      	bne.n	8003666 <update_bonus+0x32>
 8003658:	4b93      	ldr	r3, [pc, #588]	@ (80038a8 <update_bonus+0x274>)
 800365a:	7f1b      	ldrb	r3, [r3, #28]
 800365c:	2b01      	cmp	r3, #1
 800365e:	d102      	bne.n	8003666 <update_bonus+0x32>
		player.shoot_type = st_normal;
 8003660:	4b91      	ldr	r3, [pc, #580]	@ (80038a8 <update_bonus+0x274>)
 8003662:	2200      	movs	r2, #0
 8003664:	771a      	strb	r2, [r3, #28]

	// Checking whether a player has hovered over a bonus
	for (i = 0; i < num_bonus; i++)
 8003666:	2300      	movs	r3, #0
 8003668:	607b      	str	r3, [r7, #4]
 800366a:	e113      	b.n	8003894 <update_bonus+0x260>
	{
		if(bonuses[i].active)
 800366c:	498f      	ldr	r1, [pc, #572]	@ (80038ac <update_bonus+0x278>)
 800366e:	687a      	ldr	r2, [r7, #4]
 8003670:	4613      	mov	r3, r2
 8003672:	00db      	lsls	r3, r3, #3
 8003674:	1a9b      	subs	r3, r3, r2
 8003676:	009b      	lsls	r3, r3, #2
 8003678:	440b      	add	r3, r1
 800367a:	781b      	ldrb	r3, [r3, #0]
 800367c:	2b00      	cmp	r3, #0
 800367e:	f000 8106 	beq.w	800388e <update_bonus+0x25a>
		{
			bonuses[i].next_update -= 1;
 8003682:	498a      	ldr	r1, [pc, #552]	@ (80038ac <update_bonus+0x278>)
 8003684:	687a      	ldr	r2, [r7, #4]
 8003686:	4613      	mov	r3, r2
 8003688:	00db      	lsls	r3, r3, #3
 800368a:	1a9b      	subs	r3, r3, r2
 800368c:	009b      	lsls	r3, r3, #2
 800368e:	440b      	add	r3, r1
 8003690:	3314      	adds	r3, #20
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	1e59      	subs	r1, r3, #1
 8003696:	4885      	ldr	r0, [pc, #532]	@ (80038ac <update_bonus+0x278>)
 8003698:	687a      	ldr	r2, [r7, #4]
 800369a:	4613      	mov	r3, r2
 800369c:	00db      	lsls	r3, r3, #3
 800369e:	1a9b      	subs	r3, r3, r2
 80036a0:	009b      	lsls	r3, r3, #2
 80036a2:	4403      	add	r3, r0
 80036a4:	3314      	adds	r3, #20
 80036a6:	6019      	str	r1, [r3, #0]
			if(bonuses[i].next_update <= 0)
 80036a8:	4980      	ldr	r1, [pc, #512]	@ (80038ac <update_bonus+0x278>)
 80036aa:	687a      	ldr	r2, [r7, #4]
 80036ac:	4613      	mov	r3, r2
 80036ae:	00db      	lsls	r3, r3, #3
 80036b0:	1a9b      	subs	r3, r3, r2
 80036b2:	009b      	lsls	r3, r3, #2
 80036b4:	440b      	add	r3, r1
 80036b6:	3314      	adds	r3, #20
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	f300 80e7 	bgt.w	800388e <update_bonus+0x25a>
			{
				if(bonuses[i].active)
 80036c0:	497a      	ldr	r1, [pc, #488]	@ (80038ac <update_bonus+0x278>)
 80036c2:	687a      	ldr	r2, [r7, #4]
 80036c4:	4613      	mov	r3, r2
 80036c6:	00db      	lsls	r3, r3, #3
 80036c8:	1a9b      	subs	r3, r3, r2
 80036ca:	009b      	lsls	r3, r3, #2
 80036cc:	440b      	add	r3, r1
 80036ce:	781b      	ldrb	r3, [r3, #0]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	f000 80dc 	beq.w	800388e <update_bonus+0x25a>
				{
					bonuses[i].next_update = bonuses[i].update_delay;
 80036d6:	4975      	ldr	r1, [pc, #468]	@ (80038ac <update_bonus+0x278>)
 80036d8:	687a      	ldr	r2, [r7, #4]
 80036da:	4613      	mov	r3, r2
 80036dc:	00db      	lsls	r3, r3, #3
 80036de:	1a9b      	subs	r3, r3, r2
 80036e0:	009b      	lsls	r3, r3, #2
 80036e2:	440b      	add	r3, r1
 80036e4:	3318      	adds	r3, #24
 80036e6:	6819      	ldr	r1, [r3, #0]
 80036e8:	4870      	ldr	r0, [pc, #448]	@ (80038ac <update_bonus+0x278>)
 80036ea:	687a      	ldr	r2, [r7, #4]
 80036ec:	4613      	mov	r3, r2
 80036ee:	00db      	lsls	r3, r3, #3
 80036f0:	1a9b      	subs	r3, r3, r2
 80036f2:	009b      	lsls	r3, r3, #2
 80036f4:	4403      	add	r3, r0
 80036f6:	3314      	adds	r3, #20
 80036f8:	6019      	str	r1, [r3, #0]

					if (colliding(bonuses[i].x,bonuses[i].y, player.x, player.y) 	||
 80036fa:	496c      	ldr	r1, [pc, #432]	@ (80038ac <update_bonus+0x278>)
 80036fc:	687a      	ldr	r2, [r7, #4]
 80036fe:	4613      	mov	r3, r2
 8003700:	00db      	lsls	r3, r3, #3
 8003702:	1a9b      	subs	r3, r3, r2
 8003704:	009b      	lsls	r3, r3, #2
 8003706:	440b      	add	r3, r1
 8003708:	3304      	adds	r3, #4
 800370a:	6818      	ldr	r0, [r3, #0]
 800370c:	4967      	ldr	r1, [pc, #412]	@ (80038ac <update_bonus+0x278>)
 800370e:	687a      	ldr	r2, [r7, #4]
 8003710:	4613      	mov	r3, r2
 8003712:	00db      	lsls	r3, r3, #3
 8003714:	1a9b      	subs	r3, r3, r2
 8003716:	009b      	lsls	r3, r3, #2
 8003718:	440b      	add	r3, r1
 800371a:	3308      	adds	r3, #8
 800371c:	6819      	ldr	r1, [r3, #0]
 800371e:	4b62      	ldr	r3, [pc, #392]	@ (80038a8 <update_bonus+0x274>)
 8003720:	681a      	ldr	r2, [r3, #0]
 8003722:	4b61      	ldr	r3, [pc, #388]	@ (80038a8 <update_bonus+0x274>)
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	f7fe fb07 	bl	8001d38 <colliding>
 800372a:	4603      	mov	r3, r0
 800372c:	2b00      	cmp	r3, #0
 800372e:	d154      	bne.n	80037da <update_bonus+0x1a6>
						colliding(bonuses[i].x,bonuses[i].y, player.x, player.y+5) 	||
 8003730:	495e      	ldr	r1, [pc, #376]	@ (80038ac <update_bonus+0x278>)
 8003732:	687a      	ldr	r2, [r7, #4]
 8003734:	4613      	mov	r3, r2
 8003736:	00db      	lsls	r3, r3, #3
 8003738:	1a9b      	subs	r3, r3, r2
 800373a:	009b      	lsls	r3, r3, #2
 800373c:	440b      	add	r3, r1
 800373e:	3304      	adds	r3, #4
 8003740:	6818      	ldr	r0, [r3, #0]
 8003742:	495a      	ldr	r1, [pc, #360]	@ (80038ac <update_bonus+0x278>)
 8003744:	687a      	ldr	r2, [r7, #4]
 8003746:	4613      	mov	r3, r2
 8003748:	00db      	lsls	r3, r3, #3
 800374a:	1a9b      	subs	r3, r3, r2
 800374c:	009b      	lsls	r3, r3, #2
 800374e:	440b      	add	r3, r1
 8003750:	3308      	adds	r3, #8
 8003752:	6819      	ldr	r1, [r3, #0]
 8003754:	4b54      	ldr	r3, [pc, #336]	@ (80038a8 <update_bonus+0x274>)
 8003756:	681a      	ldr	r2, [r3, #0]
 8003758:	4b53      	ldr	r3, [pc, #332]	@ (80038a8 <update_bonus+0x274>)
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	3305      	adds	r3, #5
 800375e:	f7fe faeb 	bl	8001d38 <colliding>
 8003762:	4603      	mov	r3, r0
					if (colliding(bonuses[i].x,bonuses[i].y, player.x, player.y) 	||
 8003764:	2b00      	cmp	r3, #0
 8003766:	d138      	bne.n	80037da <update_bonus+0x1a6>
						colliding(bonuses[i].x,bonuses[i].y, player.x+7, player.y)	||
 8003768:	4950      	ldr	r1, [pc, #320]	@ (80038ac <update_bonus+0x278>)
 800376a:	687a      	ldr	r2, [r7, #4]
 800376c:	4613      	mov	r3, r2
 800376e:	00db      	lsls	r3, r3, #3
 8003770:	1a9b      	subs	r3, r3, r2
 8003772:	009b      	lsls	r3, r3, #2
 8003774:	440b      	add	r3, r1
 8003776:	3304      	adds	r3, #4
 8003778:	6818      	ldr	r0, [r3, #0]
 800377a:	494c      	ldr	r1, [pc, #304]	@ (80038ac <update_bonus+0x278>)
 800377c:	687a      	ldr	r2, [r7, #4]
 800377e:	4613      	mov	r3, r2
 8003780:	00db      	lsls	r3, r3, #3
 8003782:	1a9b      	subs	r3, r3, r2
 8003784:	009b      	lsls	r3, r3, #2
 8003786:	440b      	add	r3, r1
 8003788:	3308      	adds	r3, #8
 800378a:	6819      	ldr	r1, [r3, #0]
 800378c:	4b46      	ldr	r3, [pc, #280]	@ (80038a8 <update_bonus+0x274>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	1dda      	adds	r2, r3, #7
 8003792:	4b45      	ldr	r3, [pc, #276]	@ (80038a8 <update_bonus+0x274>)
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	f7fe facf 	bl	8001d38 <colliding>
 800379a:	4603      	mov	r3, r0
						colliding(bonuses[i].x,bonuses[i].y, player.x, player.y+5) 	||
 800379c:	2b00      	cmp	r3, #0
 800379e:	d11c      	bne.n	80037da <update_bonus+0x1a6>
						colliding(bonuses[i].x,bonuses[i].y, player.x+7, player.y+5)
 80037a0:	4942      	ldr	r1, [pc, #264]	@ (80038ac <update_bonus+0x278>)
 80037a2:	687a      	ldr	r2, [r7, #4]
 80037a4:	4613      	mov	r3, r2
 80037a6:	00db      	lsls	r3, r3, #3
 80037a8:	1a9b      	subs	r3, r3, r2
 80037aa:	009b      	lsls	r3, r3, #2
 80037ac:	440b      	add	r3, r1
 80037ae:	3304      	adds	r3, #4
 80037b0:	6818      	ldr	r0, [r3, #0]
 80037b2:	493e      	ldr	r1, [pc, #248]	@ (80038ac <update_bonus+0x278>)
 80037b4:	687a      	ldr	r2, [r7, #4]
 80037b6:	4613      	mov	r3, r2
 80037b8:	00db      	lsls	r3, r3, #3
 80037ba:	1a9b      	subs	r3, r3, r2
 80037bc:	009b      	lsls	r3, r3, #2
 80037be:	440b      	add	r3, r1
 80037c0:	3308      	adds	r3, #8
 80037c2:	6819      	ldr	r1, [r3, #0]
 80037c4:	4b38      	ldr	r3, [pc, #224]	@ (80038a8 <update_bonus+0x274>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	1dda      	adds	r2, r3, #7
 80037ca:	4b37      	ldr	r3, [pc, #220]	@ (80038a8 <update_bonus+0x274>)
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	3305      	adds	r3, #5
 80037d0:	f7fe fab2 	bl	8001d38 <colliding>
 80037d4:	4603      	mov	r3, r0
						colliding(bonuses[i].x,bonuses[i].y, player.x+7, player.y)	||
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d031      	beq.n	800383e <update_bonus+0x20a>
						)
					{
						switch(bonuses[i].type)
 80037da:	4934      	ldr	r1, [pc, #208]	@ (80038ac <update_bonus+0x278>)
 80037dc:	687a      	ldr	r2, [r7, #4]
 80037de:	4613      	mov	r3, r2
 80037e0:	00db      	lsls	r3, r3, #3
 80037e2:	1a9b      	subs	r3, r3, r2
 80037e4:	009b      	lsls	r3, r3, #2
 80037e6:	440b      	add	r3, r1
 80037e8:	330c      	adds	r3, #12
 80037ea:	781b      	ldrb	r3, [r3, #0]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d002      	beq.n	80037f6 <update_bonus+0x1c2>
 80037f0:	2b01      	cmp	r3, #1
 80037f2:	d00f      	beq.n	8003814 <update_bonus+0x1e0>
 80037f4:	e023      	b.n	800383e <update_bonus+0x20a>
						{
						case bt_live:
							player.lives += 1;
 80037f6:	4b2c      	ldr	r3, [pc, #176]	@ (80038a8 <update_bonus+0x274>)
 80037f8:	691b      	ldr	r3, [r3, #16]
 80037fa:	3301      	adds	r3, #1
 80037fc:	4a2a      	ldr	r2, [pc, #168]	@ (80038a8 <update_bonus+0x274>)
 80037fe:	6113      	str	r3, [r2, #16]
							bonuses[i].active = false;
 8003800:	492a      	ldr	r1, [pc, #168]	@ (80038ac <update_bonus+0x278>)
 8003802:	687a      	ldr	r2, [r7, #4]
 8003804:	4613      	mov	r3, r2
 8003806:	00db      	lsls	r3, r3, #3
 8003808:	1a9b      	subs	r3, r3, r2
 800380a:	009b      	lsls	r3, r3, #2
 800380c:	440b      	add	r3, r1
 800380e:	2200      	movs	r2, #0
 8003810:	701a      	strb	r2, [r3, #0]
							break;
 8003812:	e014      	b.n	800383e <update_bonus+0x20a>
						case bt_tracker_shoot:
							player.shoot_type = st_tracker;
 8003814:	4b24      	ldr	r3, [pc, #144]	@ (80038a8 <update_bonus+0x274>)
 8003816:	2201      	movs	r2, #1
 8003818:	771a      	strb	r2, [r3, #28]
							player.bonus_duration = duration_bonus + (player.level * 50);
 800381a:	4b23      	ldr	r3, [pc, #140]	@ (80038a8 <update_bonus+0x274>)
 800381c:	695b      	ldr	r3, [r3, #20]
 800381e:	2232      	movs	r2, #50	@ 0x32
 8003820:	fb02 f303 	mul.w	r3, r2, r3
 8003824:	3396      	adds	r3, #150	@ 0x96
 8003826:	4a20      	ldr	r2, [pc, #128]	@ (80038a8 <update_bonus+0x274>)
 8003828:	6213      	str	r3, [r2, #32]
							bonuses[i].active = false;
 800382a:	4920      	ldr	r1, [pc, #128]	@ (80038ac <update_bonus+0x278>)
 800382c:	687a      	ldr	r2, [r7, #4]
 800382e:	4613      	mov	r3, r2
 8003830:	00db      	lsls	r3, r3, #3
 8003832:	1a9b      	subs	r3, r3, r2
 8003834:	009b      	lsls	r3, r3, #2
 8003836:	440b      	add	r3, r1
 8003838:	2200      	movs	r2, #0
 800383a:	701a      	strb	r2, [r3, #0]
							break;
 800383c:	bf00      	nop
						}

					}

					bonuses[i].x -= 1;
 800383e:	491b      	ldr	r1, [pc, #108]	@ (80038ac <update_bonus+0x278>)
 8003840:	687a      	ldr	r2, [r7, #4]
 8003842:	4613      	mov	r3, r2
 8003844:	00db      	lsls	r3, r3, #3
 8003846:	1a9b      	subs	r3, r3, r2
 8003848:	009b      	lsls	r3, r3, #2
 800384a:	440b      	add	r3, r1
 800384c:	3304      	adds	r3, #4
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	1e59      	subs	r1, r3, #1
 8003852:	4816      	ldr	r0, [pc, #88]	@ (80038ac <update_bonus+0x278>)
 8003854:	687a      	ldr	r2, [r7, #4]
 8003856:	4613      	mov	r3, r2
 8003858:	00db      	lsls	r3, r3, #3
 800385a:	1a9b      	subs	r3, r3, r2
 800385c:	009b      	lsls	r3, r3, #2
 800385e:	4403      	add	r3, r0
 8003860:	3304      	adds	r3, #4
 8003862:	6019      	str	r1, [r3, #0]
					if(bonuses[i].x <= -2){
 8003864:	4911      	ldr	r1, [pc, #68]	@ (80038ac <update_bonus+0x278>)
 8003866:	687a      	ldr	r2, [r7, #4]
 8003868:	4613      	mov	r3, r2
 800386a:	00db      	lsls	r3, r3, #3
 800386c:	1a9b      	subs	r3, r3, r2
 800386e:	009b      	lsls	r3, r3, #2
 8003870:	440b      	add	r3, r1
 8003872:	3304      	adds	r3, #4
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f1b3 3fff 	cmp.w	r3, #4294967295
 800387a:	da08      	bge.n	800388e <update_bonus+0x25a>
						bonuses[i].active = false;
 800387c:	490b      	ldr	r1, [pc, #44]	@ (80038ac <update_bonus+0x278>)
 800387e:	687a      	ldr	r2, [r7, #4]
 8003880:	4613      	mov	r3, r2
 8003882:	00db      	lsls	r3, r3, #3
 8003884:	1a9b      	subs	r3, r3, r2
 8003886:	009b      	lsls	r3, r3, #2
 8003888:	440b      	add	r3, r1
 800388a:	2200      	movs	r2, #0
 800388c:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < num_bonus; i++)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	3301      	adds	r3, #1
 8003892:	607b      	str	r3, [r7, #4]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2b02      	cmp	r3, #2
 8003898:	f77f aee8 	ble.w	800366c <update_bonus+0x38>
					}
				}
			}
		}
	}
}
 800389c:	bf00      	nop
 800389e:	bf00      	nop
 80038a0:	3708      	adds	r7, #8
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}
 80038a6:	bf00      	nop
 80038a8:	20000160 	.word	0x20000160
 80038ac:	200019b0 	.word	0x200019b0

080038b0 <button_pressed>:

uint8_t button_pressed (void)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	af00      	add	r7, sp, #0
	/*
	 * Checking whether a button has been pressed. Prevention of repetition.
	 */

	if((HAL_GPIO_ReadPin(USER_BTN_1_GPIO_Port, USER_BTN_1_Pin) == GPIO_PIN_SET) && btn_prev == 0)
 80038b4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80038b8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80038bc:	f001 ff48 	bl	8005750 <HAL_GPIO_ReadPin>
 80038c0:	4603      	mov	r3, r0
 80038c2:	2b01      	cmp	r3, #1
 80038c4:	d108      	bne.n	80038d8 <button_pressed+0x28>
 80038c6:	4b0c      	ldr	r3, [pc, #48]	@ (80038f8 <button_pressed+0x48>)
 80038c8:	781b      	ldrb	r3, [r3, #0]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d104      	bne.n	80038d8 <button_pressed+0x28>
	{
		btn_prev = 1;
 80038ce:	4b0a      	ldr	r3, [pc, #40]	@ (80038f8 <button_pressed+0x48>)
 80038d0:	2201      	movs	r2, #1
 80038d2:	701a      	strb	r2, [r3, #0]
		return 1;
 80038d4:	2301      	movs	r3, #1
 80038d6:	e00c      	b.n	80038f2 <button_pressed+0x42>
	}

	if(HAL_GPIO_ReadPin(USER_BTN_1_GPIO_Port, USER_BTN_1_Pin) == GPIO_PIN_RESET)
 80038d8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80038dc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80038e0:	f001 ff36 	bl	8005750 <HAL_GPIO_ReadPin>
 80038e4:	4603      	mov	r3, r0
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d102      	bne.n	80038f0 <button_pressed+0x40>
	{
		btn_prev = 0;
 80038ea:	4b03      	ldr	r3, [pc, #12]	@ (80038f8 <button_pressed+0x48>)
 80038ec:	2200      	movs	r2, #0
 80038ee:	701a      	strb	r2, [r3, #0]
	}
	return 0;
 80038f0:	2300      	movs	r3, #0
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	bd80      	pop	{r7, pc}
 80038f6:	bf00      	nop
 80038f8:	20001a05 	.word	0x20001a05

080038fc <joystick_value_y>:

int joystick_value_y (void){
 80038fc:	b580      	push	{r7, lr}
 80038fe:	af00      	add	r7, sp, #0
	return HAL_ADC_GetValue(&hadc1);
 8003900:	4802      	ldr	r0, [pc, #8]	@ (800390c <joystick_value_y+0x10>)
 8003902:	f000 ff76 	bl	80047f2 <HAL_ADC_GetValue>
 8003906:	4603      	mov	r3, r0
}
 8003908:	4618      	mov	r0, r3
 800390a:	bd80      	pop	{r7, pc}
 800390c:	20000098 	.word	0x20000098

08003910 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003910:	b480      	push	{r7}
 8003912:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003914:	b672      	cpsid	i
}
 8003916:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003918:	bf00      	nop
 800391a:	e7fd      	b.n	8003918 <Error_Handler+0x8>

0800391c <ssd1327_cmd>:
SPI_HandleTypeDef *ssd1337_spi;

static uint8_t buffer[BUF_SIZE];


void ssd1327_cmd (uint8_t cmd){
 800391c:	b580      	push	{r7, lr}
 800391e:	b082      	sub	sp, #8
 8003920:	af00      	add	r7, sp, #0
 8003922:	4603      	mov	r3, r0
 8003924:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(DC_PORT, DC, GPIO_PIN_RESET);
 8003926:	2200      	movs	r2, #0
 8003928:	2120      	movs	r1, #32
 800392a:	480c      	ldr	r0, [pc, #48]	@ (800395c <ssd1327_cmd+0x40>)
 800392c:	f001 ff28 	bl	8005780 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS_PORT, CS, GPIO_PIN_RESET);
 8003930:	2200      	movs	r2, #0
 8003932:	2110      	movs	r1, #16
 8003934:	4809      	ldr	r0, [pc, #36]	@ (800395c <ssd1327_cmd+0x40>)
 8003936:	f001 ff23 	bl	8005780 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(ssd1337_spi, &cmd, 1, 10);
 800393a:	4b09      	ldr	r3, [pc, #36]	@ (8003960 <ssd1327_cmd+0x44>)
 800393c:	6818      	ldr	r0, [r3, #0]
 800393e:	1df9      	adds	r1, r7, #7
 8003940:	230a      	movs	r3, #10
 8003942:	2201      	movs	r2, #1
 8003944:	f003 f943 	bl	8006bce <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CS_PORT, CS, GPIO_PIN_SET);
 8003948:	2201      	movs	r2, #1
 800394a:	2110      	movs	r1, #16
 800394c:	4803      	ldr	r0, [pc, #12]	@ (800395c <ssd1327_cmd+0x40>)
 800394e:	f001 ff17 	bl	8005780 <HAL_GPIO_WritePin>

}
 8003952:	bf00      	nop
 8003954:	3708      	adds	r7, #8
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}
 800395a:	bf00      	nop
 800395c:	48000400 	.word	0x48000400
 8003960:	20001a14 	.word	0x20001a14

08003964 <ssd1327_Reset>:
{
	ssd1327_cmd(SSD1327_SETCONTRASTCURRENT);	// Set Contrast Control
	ssd1327_cmd(Contrast);
}

void ssd1327_Reset(void){
 8003964:	b580      	push	{r7, lr}
 8003966:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(RST_PORT, RST, GPIO_PIN_RESET);
 8003968:	2200      	movs	r2, #0
 800396a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800396e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003972:	f001 ff05 	bl	8005780 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8003976:	2014      	movs	r0, #20
 8003978:	f000 fb92 	bl	80040a0 <HAL_Delay>
	HAL_GPIO_WritePin(RST_PORT, RST, GPIO_PIN_SET);
 800397c:	2201      	movs	r2, #1
 800397e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003982:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003986:	f001 fefb 	bl	8005780 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 800398a:	2014      	movs	r0, #20
 800398c:	f000 fb88 	bl	80040a0 <HAL_Delay>

}
 8003990:	bf00      	nop
 8003992:	bd80      	pop	{r7, pc}

08003994 <ssd1327_SpiInit>:

void ssd1327_SpiInit(SPI_HandleTypeDef *spi){
 8003994:	b580      	push	{r7, lr}
 8003996:	b082      	sub	sp, #8
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]

	ssd1337_spi = spi;
 800399c:	4a05      	ldr	r2, [pc, #20]	@ (80039b4 <ssd1327_SpiInit+0x20>)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6013      	str	r3, [r2, #0]

	ssd1327_Reset();
 80039a2:	f7ff ffdf 	bl	8003964 <ssd1327_Reset>
	ssd1327_Init();
 80039a6:	f000 f807 	bl	80039b8 <ssd1327_Init>

}
 80039aa:	bf00      	nop
 80039ac:	3708      	adds	r7, #8
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}
 80039b2:	bf00      	nop
 80039b4:	20001a14 	.word	0x20001a14

080039b8 <ssd1327_Init>:

void ssd1327_Init (void){
 80039b8:	b580      	push	{r7, lr}
 80039ba:	af00      	add	r7, sp, #0
//
//	ssd1327_cmd(SSD1327_DISPLAYALLON_RESUME);  // Entire Display ON

//--------------------------------------------------------------------------

	ssd1327_cmd(0xae);//--turn off oled panel
 80039bc:	20ae      	movs	r0, #174	@ 0xae
 80039be:	f7ff ffad 	bl	800391c <ssd1327_cmd>

	ssd1327_cmd(0x15);  //set column addresses
 80039c2:	2015      	movs	r0, #21
 80039c4:	f7ff ffaa 	bl	800391c <ssd1327_cmd>
	ssd1327_cmd(0x00);  //start column  0
 80039c8:	2000      	movs	r0, #0
 80039ca:	f7ff ffa7 	bl	800391c <ssd1327_cmd>
	ssd1327_cmd(0x7f);  //end column  127
 80039ce:	207f      	movs	r0, #127	@ 0x7f
 80039d0:	f7ff ffa4 	bl	800391c <ssd1327_cmd>

	ssd1327_cmd(0x75);  //set row addresses
 80039d4:	2075      	movs	r0, #117	@ 0x75
 80039d6:	f7ff ffa1 	bl	800391c <ssd1327_cmd>
	ssd1327_cmd(0x00);  //start row  0
 80039da:	2000      	movs	r0, #0
 80039dc:	f7ff ff9e 	bl	800391c <ssd1327_cmd>
	ssd1327_cmd(0x7f);  //end row  127
 80039e0:	207f      	movs	r0, #127	@ 0x7f
 80039e2:	f7ff ff9b 	bl	800391c <ssd1327_cmd>

	ssd1327_cmd(0x81);  //set contrast control
 80039e6:	2081      	movs	r0, #129	@ 0x81
 80039e8:	f7ff ff98 	bl	800391c <ssd1327_cmd>
	ssd1327_cmd(0x80);  //50% (128/255) def.0x80
 80039ec:	2080      	movs	r0, #128	@ 0x80
 80039ee:	f7ff ff95 	bl	800391c <ssd1327_cmd>

	ssd1327_cmd(0xa0);   //gment remap
 80039f2:	20a0      	movs	r0, #160	@ 0xa0
 80039f4:	f7ff ff92 	bl	800391c <ssd1327_cmd>
	ssd1327_cmd(0x51);  //51 (To my understanding, this is orientation
 80039f8:	2051      	movs	r0, #81	@ 0x51
 80039fa:	f7ff ff8f 	bl	800391c <ssd1327_cmd>

	ssd1327_cmd(0xa1);  //start line
 80039fe:	20a1      	movs	r0, #161	@ 0xa1
 8003a00:	f7ff ff8c 	bl	800391c <ssd1327_cmd>
	ssd1327_cmd(0x00);
 8003a04:	2000      	movs	r0, #0
 8003a06:	f7ff ff89 	bl	800391c <ssd1327_cmd>

	ssd1327_cmd(0xa2);  //display offset
 8003a0a:	20a2      	movs	r0, #162	@ 0xa2
 8003a0c:	f7ff ff86 	bl	800391c <ssd1327_cmd>
	ssd1327_cmd(0x00);
 8003a10:	2000      	movs	r0, #0
 8003a12:	f7ff ff83 	bl	800391c <ssd1327_cmd>

	ssd1327_cmd(0xa4);  //rmal display
 8003a16:	20a4      	movs	r0, #164	@ 0xa4
 8003a18:	f7ff ff80 	bl	800391c <ssd1327_cmd>
	ssd1327_cmd(0xa8);  //set multiplex ratio
 8003a1c:	20a8      	movs	r0, #168	@ 0xa8
 8003a1e:	f7ff ff7d 	bl	800391c <ssd1327_cmd>
	ssd1327_cmd(0x7f);
 8003a22:	207f      	movs	r0, #127	@ 0x7f
 8003a24:	f7ff ff7a 	bl	800391c <ssd1327_cmd>

	ssd1327_cmd(0xb1);  //set phase leghth
 8003a28:	20b1      	movs	r0, #177	@ 0xb1
 8003a2a:	f7ff ff77 	bl	800391c <ssd1327_cmd>
	ssd1327_cmd(0xf1);
 8003a2e:	20f1      	movs	r0, #241	@ 0xf1
 8003a30:	f7ff ff74 	bl	800391c <ssd1327_cmd>

	ssd1327_cmd(0xb3);  //set dclk
 8003a34:	20b3      	movs	r0, #179	@ 0xb3
 8003a36:	f7ff ff71 	bl	800391c <ssd1327_cmd>
	ssd1327_cmd(0x00);  //80Hz:0xc1 90Hz:0xe1  100Hz:0x00  110Hz:0x30 120Hz:0x50  130Hz:0x70   01
 8003a3a:	2000      	movs	r0, #0
 8003a3c:	f7ff ff6e 	bl	800391c <ssd1327_cmd>

	ssd1327_cmd(0xab);  //Enable vReg
 8003a40:	20ab      	movs	r0, #171	@ 0xab
 8003a42:	f7ff ff6b 	bl	800391c <ssd1327_cmd>
	ssd1327_cmd(0x01);
 8003a46:	2001      	movs	r0, #1
 8003a48:	f7ff ff68 	bl	800391c <ssd1327_cmd>

	ssd1327_cmd(0xb6);  //set phase leghth
 8003a4c:	20b6      	movs	r0, #182	@ 0xb6
 8003a4e:	f7ff ff65 	bl	800391c <ssd1327_cmd>
	ssd1327_cmd(0x0f);
 8003a52:	200f      	movs	r0, #15
 8003a54:	f7ff ff62 	bl	800391c <ssd1327_cmd>

	ssd1327_cmd(0xbe); //Set vcomh voltage
 8003a58:	20be      	movs	r0, #190	@ 0xbe
 8003a5a:	f7ff ff5f 	bl	800391c <ssd1327_cmd>
	ssd1327_cmd(0x0f);
 8003a5e:	200f      	movs	r0, #15
 8003a60:	f7ff ff5c 	bl	800391c <ssd1327_cmd>

	ssd1327_cmd(0xbc); //set pre-charge voltage
 8003a64:	20bc      	movs	r0, #188	@ 0xbc
 8003a66:	f7ff ff59 	bl	800391c <ssd1327_cmd>
	ssd1327_cmd(0x08);
 8003a6a:	2008      	movs	r0, #8
 8003a6c:	f7ff ff56 	bl	800391c <ssd1327_cmd>

	ssd1327_cmd(0xd5); //second precharge period
 8003a70:	20d5      	movs	r0, #213	@ 0xd5
 8003a72:	f7ff ff53 	bl	800391c <ssd1327_cmd>
	ssd1327_cmd(0x62);
 8003a76:	2062      	movs	r0, #98	@ 0x62
 8003a78:	f7ff ff50 	bl	800391c <ssd1327_cmd>

	ssd1327_cmd(0xfd); //Unlock commands
 8003a7c:	20fd      	movs	r0, #253	@ 0xfd
 8003a7e:	f7ff ff4d 	bl	800391c <ssd1327_cmd>
	ssd1327_cmd(0x12);
 8003a82:	2012      	movs	r0, #18
 8003a84:	f7ff ff4a 	bl	800391c <ssd1327_cmd>

	ssd1327_cmd(0xA4);
 8003a88:	20a4      	movs	r0, #164	@ 0xa4
 8003a8a:	f7ff ff47 	bl	800391c <ssd1327_cmd>

	ssd1327_cmd(SSD1327_DISPLAYON);
 8003a8e:	20af      	movs	r0, #175	@ 0xaf
 8003a90:	f7ff ff44 	bl	800391c <ssd1327_cmd>
}
 8003a94:	bf00      	nop
 8003a96:	bd80      	pop	{r7, pc}

08003a98 <ssd1327_display>:

void ssd1327_display (void){
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	af00      	add	r7, sp, #0

	ssd1327_cmd(SSD1327_SETCOLUMNADDRESS);
 8003a9c:	2015      	movs	r0, #21
 8003a9e:	f7ff ff3d 	bl	800391c <ssd1327_cmd>
	ssd1327_cmd(0x00);
 8003aa2:	2000      	movs	r0, #0
 8003aa4:	f7ff ff3a 	bl	800391c <ssd1327_cmd>
	ssd1327_cmd(0x7F);
 8003aa8:	207f      	movs	r0, #127	@ 0x7f
 8003aaa:	f7ff ff37 	bl	800391c <ssd1327_cmd>

	ssd1327_cmd(SSD1327_SETROWADDRESS);
 8003aae:	2075      	movs	r0, #117	@ 0x75
 8003ab0:	f7ff ff34 	bl	800391c <ssd1327_cmd>
	ssd1327_cmd(0x00);
 8003ab4:	2000      	movs	r0, #0
 8003ab6:	f7ff ff31 	bl	800391c <ssd1327_cmd>
	ssd1327_cmd(0x7F);
 8003aba:	207f      	movs	r0, #127	@ 0x7f
 8003abc:	f7ff ff2e 	bl	800391c <ssd1327_cmd>

	HAL_GPIO_WritePin(CS_PORT, CS, GPIO_PIN_RESET);
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	2110      	movs	r1, #16
 8003ac4:	480d      	ldr	r0, [pc, #52]	@ (8003afc <ssd1327_display+0x64>)
 8003ac6:	f001 fe5b 	bl	8005780 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DC_PORT, DC, GPIO_PIN_SET);
 8003aca:	2201      	movs	r2, #1
 8003acc:	2120      	movs	r1, #32
 8003ace:	480b      	ldr	r0, [pc, #44]	@ (8003afc <ssd1327_display+0x64>)
 8003ad0:	f001 fe56 	bl	8005780 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS_PORT, CS, GPIO_PIN_RESET);
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	2110      	movs	r1, #16
 8003ad8:	4808      	ldr	r0, [pc, #32]	@ (8003afc <ssd1327_display+0x64>)
 8003ada:	f001 fe51 	bl	8005780 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(ssd1337_spi, (uint8_t*)&buffer, BUF_SIZE, 100);
 8003ade:	4b08      	ldr	r3, [pc, #32]	@ (8003b00 <ssd1327_display+0x68>)
 8003ae0:	6818      	ldr	r0, [r3, #0]
 8003ae2:	2364      	movs	r3, #100	@ 0x64
 8003ae4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003ae8:	4906      	ldr	r1, [pc, #24]	@ (8003b04 <ssd1327_display+0x6c>)
 8003aea:	f003 f870 	bl	8006bce <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CS_PORT, CS, GPIO_PIN_SET);
 8003aee:	2201      	movs	r2, #1
 8003af0:	2110      	movs	r1, #16
 8003af2:	4802      	ldr	r0, [pc, #8]	@ (8003afc <ssd1327_display+0x64>)
 8003af4:	f001 fe44 	bl	8005780 <HAL_GPIO_WritePin>

}
 8003af8:	bf00      	nop
 8003afa:	bd80      	pop	{r7, pc}
 8003afc:	48000400 	.word	0x48000400
 8003b00:	20001a14 	.word	0x20001a14
 8003b04:	20001a18 	.word	0x20001a18

08003b08 <ssd1327_CLR>:

void ssd1327_CLR(void){
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	af00      	add	r7, sp, #0
		memset(buffer, (0 << 4 | 0), BUF_SIZE);
 8003b0c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003b10:	2100      	movs	r1, #0
 8003b12:	4802      	ldr	r0, [pc, #8]	@ (8003b1c <ssd1327_CLR+0x14>)
 8003b14:	f003 fc71 	bl	80073fa <memset>
}
 8003b18:	bf00      	nop
 8003b1a:	bd80      	pop	{r7, pc}
 8003b1c:	20001a18 	.word	0x20001a18

08003b20 <ssd1327_setPixel>:

void ssd1327_setPixel( int x , int y , uint8_t bw){
 8003b20:	b480      	push	{r7}
 8003b22:	b087      	sub	sp, #28
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	60f8      	str	r0, [r7, #12]
 8003b28:	60b9      	str	r1, [r7, #8]
 8003b2a:	4613      	mov	r3, r2
 8003b2c:	71fb      	strb	r3, [r7, #7]
	if ((x < 0) || (x >= SSD1327_WIDTH) || (y < 0) || (y >= SSD1327_HEIGHT))
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	db3d      	blt.n	8003bb0 <ssd1327_setPixel+0x90>
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	2b7f      	cmp	r3, #127	@ 0x7f
 8003b38:	dc3a      	bgt.n	8003bb0 <ssd1327_setPixel+0x90>
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	db37      	blt.n	8003bb0 <ssd1327_setPixel+0x90>
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	2b7f      	cmp	r3, #127	@ 0x7f
 8003b44:	dc34      	bgt.n	8003bb0 <ssd1327_setPixel+0x90>
		return;

	uint8_t SelectedCell = buffer[x/2 + y*(SSD1327_WIDTH/2)];
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	0fda      	lsrs	r2, r3, #31
 8003b4a:	4413      	add	r3, r2
 8003b4c:	105b      	asrs	r3, r3, #1
 8003b4e:	461a      	mov	r2, r3
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	019b      	lsls	r3, r3, #6
 8003b54:	4413      	add	r3, r2
 8003b56:	4a19      	ldr	r2, [pc, #100]	@ (8003bbc <ssd1327_setPixel+0x9c>)
 8003b58:	5cd3      	ldrb	r3, [r2, r3]
 8003b5a:	75fb      	strb	r3, [r7, #23]

	if(x % 2)
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	f003 0301 	and.w	r3, r3, #1
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d00b      	beq.n	8003b7e <ssd1327_setPixel+0x5e>
	{
		SelectedCell &= ~(0x0F);
 8003b66:	7dfb      	ldrb	r3, [r7, #23]
 8003b68:	f023 030f 	bic.w	r3, r3, #15
 8003b6c:	75fb      	strb	r3, [r7, #23]
		SelectedCell |= (0x0F & bw);
 8003b6e:	79fb      	ldrb	r3, [r7, #7]
 8003b70:	f003 030f 	and.w	r3, r3, #15
 8003b74:	b2da      	uxtb	r2, r3
 8003b76:	7dfb      	ldrb	r3, [r7, #23]
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	75fb      	strb	r3, [r7, #23]
 8003b7c:	e00c      	b.n	8003b98 <ssd1327_setPixel+0x78>
	}
	else
	{
		SelectedCell &= ~(0xF0);
 8003b7e:	7dfb      	ldrb	r3, [r7, #23]
 8003b80:	f003 030f 	and.w	r3, r3, #15
 8003b84:	75fb      	strb	r3, [r7, #23]
		SelectedCell |= (0xF0 & (bw<<4));
 8003b86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b8a:	011b      	lsls	r3, r3, #4
 8003b8c:	b25a      	sxtb	r2, r3
 8003b8e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003b92:	4313      	orrs	r3, r2
 8003b94:	b25b      	sxtb	r3, r3
 8003b96:	75fb      	strb	r3, [r7, #23]
	}

	buffer[x/2 + y*(SSD1327_WIDTH/2)] = SelectedCell;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	0fda      	lsrs	r2, r3, #31
 8003b9c:	4413      	add	r3, r2
 8003b9e:	105b      	asrs	r3, r3, #1
 8003ba0:	461a      	mov	r2, r3
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	019b      	lsls	r3, r3, #6
 8003ba6:	4413      	add	r3, r2
 8003ba8:	4904      	ldr	r1, [pc, #16]	@ (8003bbc <ssd1327_setPixel+0x9c>)
 8003baa:	7dfa      	ldrb	r2, [r7, #23]
 8003bac:	54ca      	strb	r2, [r1, r3]
 8003bae:	e000      	b.n	8003bb2 <ssd1327_setPixel+0x92>
		return;
 8003bb0:	bf00      	nop

//	if ((x < 0) || (x >= SSD1327_WIDTH) || (y < 0) || (y >= SSD1327_HEIGHT))
//		return;
//	if (bw) buffer[x + (y/4)*SSD1327_WIDTH] |= (1<<(y%4));
//	else buffer[x + (y/4)*SSD1327_WIDTH] &= ~(1<<(y%4));
}
 8003bb2:	371c      	adds	r7, #28
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bba:	4770      	bx	lr
 8003bbc:	20001a18 	.word	0x20001a18

08003bc0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b083      	sub	sp, #12
 8003bc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003bc6:	4b0f      	ldr	r3, [pc, #60]	@ (8003c04 <HAL_MspInit+0x44>)
 8003bc8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bca:	4a0e      	ldr	r2, [pc, #56]	@ (8003c04 <HAL_MspInit+0x44>)
 8003bcc:	f043 0301 	orr.w	r3, r3, #1
 8003bd0:	6613      	str	r3, [r2, #96]	@ 0x60
 8003bd2:	4b0c      	ldr	r3, [pc, #48]	@ (8003c04 <HAL_MspInit+0x44>)
 8003bd4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bd6:	f003 0301 	and.w	r3, r3, #1
 8003bda:	607b      	str	r3, [r7, #4]
 8003bdc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003bde:	4b09      	ldr	r3, [pc, #36]	@ (8003c04 <HAL_MspInit+0x44>)
 8003be0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003be2:	4a08      	ldr	r2, [pc, #32]	@ (8003c04 <HAL_MspInit+0x44>)
 8003be4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003be8:	6593      	str	r3, [r2, #88]	@ 0x58
 8003bea:	4b06      	ldr	r3, [pc, #24]	@ (8003c04 <HAL_MspInit+0x44>)
 8003bec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003bf2:	603b      	str	r3, [r7, #0]
 8003bf4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003bf6:	bf00      	nop
 8003bf8:	370c      	adds	r7, #12
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c00:	4770      	bx	lr
 8003c02:	bf00      	nop
 8003c04:	40021000 	.word	0x40021000

08003c08 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b09e      	sub	sp, #120	@ 0x78
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c10:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003c14:	2200      	movs	r2, #0
 8003c16:	601a      	str	r2, [r3, #0]
 8003c18:	605a      	str	r2, [r3, #4]
 8003c1a:	609a      	str	r2, [r3, #8]
 8003c1c:	60da      	str	r2, [r3, #12]
 8003c1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003c20:	f107 0310 	add.w	r3, r7, #16
 8003c24:	2254      	movs	r2, #84	@ 0x54
 8003c26:	2100      	movs	r1, #0
 8003c28:	4618      	mov	r0, r3
 8003c2a:	f003 fbe6 	bl	80073fa <memset>
  if(hadc->Instance==ADC1)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a25      	ldr	r2, [pc, #148]	@ (8003cc8 <HAL_ADC_MspInit+0xc0>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d143      	bne.n	8003cc0 <HAL_ADC_MspInit+0xb8>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8003c38:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003c3c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8003c3e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8003c42:	65bb      	str	r3, [r7, #88]	@ 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8003c44:	2301      	movs	r3, #1
 8003c46:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8003c48:	2301      	movs	r3, #1
 8003c4a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8003c4c:	2310      	movs	r3, #16
 8003c4e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8003c50:	2307      	movs	r3, #7
 8003c52:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8003c54:	2302      	movs	r3, #2
 8003c56:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8003c58:	2302      	movs	r3, #2
 8003c5a:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8003c5c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003c60:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003c62:	f107 0310 	add.w	r3, r7, #16
 8003c66:	4618      	mov	r0, r3
 8003c68:	f002 fc16 	bl	8006498 <HAL_RCCEx_PeriphCLKConfig>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d001      	beq.n	8003c76 <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8003c72:	f7ff fe4d 	bl	8003910 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8003c76:	4b15      	ldr	r3, [pc, #84]	@ (8003ccc <HAL_ADC_MspInit+0xc4>)
 8003c78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c7a:	4a14      	ldr	r2, [pc, #80]	@ (8003ccc <HAL_ADC_MspInit+0xc4>)
 8003c7c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003c80:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003c82:	4b12      	ldr	r3, [pc, #72]	@ (8003ccc <HAL_ADC_MspInit+0xc4>)
 8003c84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c86:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003c8a:	60fb      	str	r3, [r7, #12]
 8003c8c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c8e:	4b0f      	ldr	r3, [pc, #60]	@ (8003ccc <HAL_ADC_MspInit+0xc4>)
 8003c90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c92:	4a0e      	ldr	r2, [pc, #56]	@ (8003ccc <HAL_ADC_MspInit+0xc4>)
 8003c94:	f043 0301 	orr.w	r3, r3, #1
 8003c98:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003c9a:	4b0c      	ldr	r3, [pc, #48]	@ (8003ccc <HAL_ADC_MspInit+0xc4>)
 8003c9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c9e:	f003 0301 	and.w	r3, r3, #1
 8003ca2:	60bb      	str	r3, [r7, #8]
 8003ca4:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8003caa:	230b      	movs	r3, #11
 8003cac:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003cb2:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003cb6:	4619      	mov	r1, r3
 8003cb8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003cbc:	f001 fbde 	bl	800547c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003cc0:	bf00      	nop
 8003cc2:	3778      	adds	r7, #120	@ 0x78
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bd80      	pop	{r7, pc}
 8003cc8:	50040000 	.word	0x50040000
 8003ccc:	40021000 	.word	0x40021000

08003cd0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b08a      	sub	sp, #40	@ 0x28
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cd8:	f107 0314 	add.w	r3, r7, #20
 8003cdc:	2200      	movs	r2, #0
 8003cde:	601a      	str	r2, [r3, #0]
 8003ce0:	605a      	str	r2, [r3, #4]
 8003ce2:	609a      	str	r2, [r3, #8]
 8003ce4:	60da      	str	r2, [r3, #12]
 8003ce6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a17      	ldr	r2, [pc, #92]	@ (8003d4c <HAL_SPI_MspInit+0x7c>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d128      	bne.n	8003d44 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003cf2:	4b17      	ldr	r3, [pc, #92]	@ (8003d50 <HAL_SPI_MspInit+0x80>)
 8003cf4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003cf6:	4a16      	ldr	r2, [pc, #88]	@ (8003d50 <HAL_SPI_MspInit+0x80>)
 8003cf8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003cfc:	6613      	str	r3, [r2, #96]	@ 0x60
 8003cfe:	4b14      	ldr	r3, [pc, #80]	@ (8003d50 <HAL_SPI_MspInit+0x80>)
 8003d00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d02:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003d06:	613b      	str	r3, [r7, #16]
 8003d08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d0a:	4b11      	ldr	r3, [pc, #68]	@ (8003d50 <HAL_SPI_MspInit+0x80>)
 8003d0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d0e:	4a10      	ldr	r2, [pc, #64]	@ (8003d50 <HAL_SPI_MspInit+0x80>)
 8003d10:	f043 0301 	orr.w	r3, r3, #1
 8003d14:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003d16:	4b0e      	ldr	r3, [pc, #56]	@ (8003d50 <HAL_SPI_MspInit+0x80>)
 8003d18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d1a:	f003 0301 	and.w	r3, r3, #1
 8003d1e:	60fb      	str	r3, [r7, #12]
 8003d20:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_7;
 8003d22:	2382      	movs	r3, #130	@ 0x82
 8003d24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d26:	2302      	movs	r3, #2
 8003d28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d2e:	2303      	movs	r3, #3
 8003d30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003d32:	2305      	movs	r3, #5
 8003d34:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d36:	f107 0314 	add.w	r3, r7, #20
 8003d3a:	4619      	mov	r1, r3
 8003d3c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003d40:	f001 fb9c 	bl	800547c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003d44:	bf00      	nop
 8003d46:	3728      	adds	r7, #40	@ 0x28
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bd80      	pop	{r7, pc}
 8003d4c:	40013000 	.word	0x40013000
 8003d50:	40021000 	.word	0x40021000

08003d54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003d54:	b480      	push	{r7}
 8003d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003d58:	bf00      	nop
 8003d5a:	e7fd      	b.n	8003d58 <NMI_Handler+0x4>

08003d5c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003d60:	bf00      	nop
 8003d62:	e7fd      	b.n	8003d60 <HardFault_Handler+0x4>

08003d64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003d64:	b480      	push	{r7}
 8003d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003d68:	bf00      	nop
 8003d6a:	e7fd      	b.n	8003d68 <MemManage_Handler+0x4>

08003d6c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003d70:	bf00      	nop
 8003d72:	e7fd      	b.n	8003d70 <BusFault_Handler+0x4>

08003d74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003d74:	b480      	push	{r7}
 8003d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003d78:	bf00      	nop
 8003d7a:	e7fd      	b.n	8003d78 <UsageFault_Handler+0x4>

08003d7c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003d80:	bf00      	nop
 8003d82:	46bd      	mov	sp, r7
 8003d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d88:	4770      	bx	lr

08003d8a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003d8a:	b480      	push	{r7}
 8003d8c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003d8e:	bf00      	nop
 8003d90:	46bd      	mov	sp, r7
 8003d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d96:	4770      	bx	lr

08003d98 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003d9c:	bf00      	nop
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da4:	4770      	bx	lr

08003da6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003da6:	b580      	push	{r7, lr}
 8003da8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003daa:	f000 f959 	bl	8004060 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003dae:	bf00      	nop
 8003db0:	bd80      	pop	{r7, pc}

08003db2 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003db2:	b480      	push	{r7}
 8003db4:	af00      	add	r7, sp, #0
	return 1;
 8003db6:	2301      	movs	r3, #1
}
 8003db8:	4618      	mov	r0, r3
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc0:	4770      	bx	lr

08003dc2 <_kill>:

int _kill(int pid, int sig)
{
 8003dc2:	b580      	push	{r7, lr}
 8003dc4:	b082      	sub	sp, #8
 8003dc6:	af00      	add	r7, sp, #0
 8003dc8:	6078      	str	r0, [r7, #4]
 8003dca:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003dcc:	f003 fb64 	bl	8007498 <__errno>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	2216      	movs	r2, #22
 8003dd4:	601a      	str	r2, [r3, #0]
	return -1;
 8003dd6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	3708      	adds	r7, #8
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}

08003de2 <_exit>:

void _exit (int status)
{
 8003de2:	b580      	push	{r7, lr}
 8003de4:	b082      	sub	sp, #8
 8003de6:	af00      	add	r7, sp, #0
 8003de8:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003dea:	f04f 31ff 	mov.w	r1, #4294967295
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	f7ff ffe7 	bl	8003dc2 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003df4:	bf00      	nop
 8003df6:	e7fd      	b.n	8003df4 <_exit+0x12>

08003df8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b086      	sub	sp, #24
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	60f8      	str	r0, [r7, #12]
 8003e00:	60b9      	str	r1, [r7, #8]
 8003e02:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e04:	2300      	movs	r3, #0
 8003e06:	617b      	str	r3, [r7, #20]
 8003e08:	e00a      	b.n	8003e20 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003e0a:	f3af 8000 	nop.w
 8003e0e:	4601      	mov	r1, r0
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	1c5a      	adds	r2, r3, #1
 8003e14:	60ba      	str	r2, [r7, #8]
 8003e16:	b2ca      	uxtb	r2, r1
 8003e18:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	3301      	adds	r3, #1
 8003e1e:	617b      	str	r3, [r7, #20]
 8003e20:	697a      	ldr	r2, [r7, #20]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	429a      	cmp	r2, r3
 8003e26:	dbf0      	blt.n	8003e0a <_read+0x12>
	}

return len;
 8003e28:	687b      	ldr	r3, [r7, #4]
}
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	3718      	adds	r7, #24
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}

08003e32 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003e32:	b580      	push	{r7, lr}
 8003e34:	b086      	sub	sp, #24
 8003e36:	af00      	add	r7, sp, #0
 8003e38:	60f8      	str	r0, [r7, #12]
 8003e3a:	60b9      	str	r1, [r7, #8]
 8003e3c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e3e:	2300      	movs	r3, #0
 8003e40:	617b      	str	r3, [r7, #20]
 8003e42:	e009      	b.n	8003e58 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	1c5a      	adds	r2, r3, #1
 8003e48:	60ba      	str	r2, [r7, #8]
 8003e4a:	781b      	ldrb	r3, [r3, #0]
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	3301      	adds	r3, #1
 8003e56:	617b      	str	r3, [r7, #20]
 8003e58:	697a      	ldr	r2, [r7, #20]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	429a      	cmp	r2, r3
 8003e5e:	dbf1      	blt.n	8003e44 <_write+0x12>
	}
	return len;
 8003e60:	687b      	ldr	r3, [r7, #4]
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	3718      	adds	r7, #24
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}

08003e6a <_close>:

int _close(int file)
{
 8003e6a:	b480      	push	{r7}
 8003e6c:	b083      	sub	sp, #12
 8003e6e:	af00      	add	r7, sp, #0
 8003e70:	6078      	str	r0, [r7, #4]
	return -1;
 8003e72:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003e76:	4618      	mov	r0, r3
 8003e78:	370c      	adds	r7, #12
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e80:	4770      	bx	lr

08003e82 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003e82:	b480      	push	{r7}
 8003e84:	b083      	sub	sp, #12
 8003e86:	af00      	add	r7, sp, #0
 8003e88:	6078      	str	r0, [r7, #4]
 8003e8a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003e92:	605a      	str	r2, [r3, #4]
	return 0;
 8003e94:	2300      	movs	r3, #0
}
 8003e96:	4618      	mov	r0, r3
 8003e98:	370c      	adds	r7, #12
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea0:	4770      	bx	lr

08003ea2 <_isatty>:

int _isatty(int file)
{
 8003ea2:	b480      	push	{r7}
 8003ea4:	b083      	sub	sp, #12
 8003ea6:	af00      	add	r7, sp, #0
 8003ea8:	6078      	str	r0, [r7, #4]
	return 1;
 8003eaa:	2301      	movs	r3, #1
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	370c      	adds	r7, #12
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb6:	4770      	bx	lr

08003eb8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b085      	sub	sp, #20
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	60f8      	str	r0, [r7, #12]
 8003ec0:	60b9      	str	r1, [r7, #8]
 8003ec2:	607a      	str	r2, [r7, #4]
	return 0;
 8003ec4:	2300      	movs	r3, #0
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	3714      	adds	r7, #20
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed0:	4770      	bx	lr
	...

08003ed4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b086      	sub	sp, #24
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003edc:	4a14      	ldr	r2, [pc, #80]	@ (8003f30 <_sbrk+0x5c>)
 8003ede:	4b15      	ldr	r3, [pc, #84]	@ (8003f34 <_sbrk+0x60>)
 8003ee0:	1ad3      	subs	r3, r2, r3
 8003ee2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003ee4:	697b      	ldr	r3, [r7, #20]
 8003ee6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003ee8:	4b13      	ldr	r3, [pc, #76]	@ (8003f38 <_sbrk+0x64>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d102      	bne.n	8003ef6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003ef0:	4b11      	ldr	r3, [pc, #68]	@ (8003f38 <_sbrk+0x64>)
 8003ef2:	4a12      	ldr	r2, [pc, #72]	@ (8003f3c <_sbrk+0x68>)
 8003ef4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003ef6:	4b10      	ldr	r3, [pc, #64]	@ (8003f38 <_sbrk+0x64>)
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	4413      	add	r3, r2
 8003efe:	693a      	ldr	r2, [r7, #16]
 8003f00:	429a      	cmp	r2, r3
 8003f02:	d207      	bcs.n	8003f14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003f04:	f003 fac8 	bl	8007498 <__errno>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	220c      	movs	r2, #12
 8003f0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003f0e:	f04f 33ff 	mov.w	r3, #4294967295
 8003f12:	e009      	b.n	8003f28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003f14:	4b08      	ldr	r3, [pc, #32]	@ (8003f38 <_sbrk+0x64>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003f1a:	4b07      	ldr	r3, [pc, #28]	@ (8003f38 <_sbrk+0x64>)
 8003f1c:	681a      	ldr	r2, [r3, #0]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	4413      	add	r3, r2
 8003f22:	4a05      	ldr	r2, [pc, #20]	@ (8003f38 <_sbrk+0x64>)
 8003f24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003f26:	68fb      	ldr	r3, [r7, #12]
}
 8003f28:	4618      	mov	r0, r3
 8003f2a:	3718      	adds	r7, #24
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bd80      	pop	{r7, pc}
 8003f30:	20010000 	.word	0x20010000
 8003f34:	00000400 	.word	0x00000400
 8003f38:	20003a18 	.word	0x20003a18
 8003f3c:	20003b70 	.word	0x20003b70

08003f40 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003f40:	b480      	push	{r7}
 8003f42:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003f44:	4b06      	ldr	r3, [pc, #24]	@ (8003f60 <SystemInit+0x20>)
 8003f46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f4a:	4a05      	ldr	r2, [pc, #20]	@ (8003f60 <SystemInit+0x20>)
 8003f4c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003f50:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8003f54:	bf00      	nop
 8003f56:	46bd      	mov	sp, r7
 8003f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5c:	4770      	bx	lr
 8003f5e:	bf00      	nop
 8003f60:	e000ed00 	.word	0xe000ed00

08003f64 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003f64:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003f9c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003f68:	f7ff ffea 	bl	8003f40 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003f6c:	480c      	ldr	r0, [pc, #48]	@ (8003fa0 <LoopForever+0x6>)
  ldr r1, =_edata
 8003f6e:	490d      	ldr	r1, [pc, #52]	@ (8003fa4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003f70:	4a0d      	ldr	r2, [pc, #52]	@ (8003fa8 <LoopForever+0xe>)
  movs r3, #0
 8003f72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003f74:	e002      	b.n	8003f7c <LoopCopyDataInit>

08003f76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003f76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003f78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003f7a:	3304      	adds	r3, #4

08003f7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003f7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003f7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003f80:	d3f9      	bcc.n	8003f76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003f82:	4a0a      	ldr	r2, [pc, #40]	@ (8003fac <LoopForever+0x12>)
  ldr r4, =_ebss
 8003f84:	4c0a      	ldr	r4, [pc, #40]	@ (8003fb0 <LoopForever+0x16>)
  movs r3, #0
 8003f86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003f88:	e001      	b.n	8003f8e <LoopFillZerobss>

08003f8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003f8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003f8c:	3204      	adds	r2, #4

08003f8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003f8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003f90:	d3fb      	bcc.n	8003f8a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003f92:	f003 fa87 	bl	80074a4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003f96:	f7fd f9a3 	bl	80012e0 <main>

08003f9a <LoopForever>:

LoopForever:
    b LoopForever
 8003f9a:	e7fe      	b.n	8003f9a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003f9c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8003fa0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003fa4:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8003fa8:	08009948 	.word	0x08009948
  ldr r2, =_sbss
 8003fac:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8003fb0:	20003b6c 	.word	0x20003b6c

08003fb4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003fb4:	e7fe      	b.n	8003fb4 <ADC1_IRQHandler>

08003fb6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003fb6:	b580      	push	{r7, lr}
 8003fb8:	b082      	sub	sp, #8
 8003fba:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003fc0:	2003      	movs	r0, #3
 8003fc2:	f001 fa27 	bl	8005414 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003fc6:	200f      	movs	r0, #15
 8003fc8:	f000 f80e 	bl	8003fe8 <HAL_InitTick>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d002      	beq.n	8003fd8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	71fb      	strb	r3, [r7, #7]
 8003fd6:	e001      	b.n	8003fdc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003fd8:	f7ff fdf2 	bl	8003bc0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003fdc:	79fb      	ldrb	r3, [r7, #7]
}
 8003fde:	4618      	mov	r0, r3
 8003fe0:	3708      	adds	r7, #8
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bd80      	pop	{r7, pc}
	...

08003fe8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b084      	sub	sp, #16
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003ff4:	4b17      	ldr	r3, [pc, #92]	@ (8004054 <HAL_InitTick+0x6c>)
 8003ff6:	781b      	ldrb	r3, [r3, #0]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d023      	beq.n	8004044 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003ffc:	4b16      	ldr	r3, [pc, #88]	@ (8004058 <HAL_InitTick+0x70>)
 8003ffe:	681a      	ldr	r2, [r3, #0]
 8004000:	4b14      	ldr	r3, [pc, #80]	@ (8004054 <HAL_InitTick+0x6c>)
 8004002:	781b      	ldrb	r3, [r3, #0]
 8004004:	4619      	mov	r1, r3
 8004006:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800400a:	fbb3 f3f1 	udiv	r3, r3, r1
 800400e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004012:	4618      	mov	r0, r3
 8004014:	f001 fa25 	bl	8005462 <HAL_SYSTICK_Config>
 8004018:	4603      	mov	r3, r0
 800401a:	2b00      	cmp	r3, #0
 800401c:	d10f      	bne.n	800403e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2b0f      	cmp	r3, #15
 8004022:	d809      	bhi.n	8004038 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004024:	2200      	movs	r2, #0
 8004026:	6879      	ldr	r1, [r7, #4]
 8004028:	f04f 30ff 	mov.w	r0, #4294967295
 800402c:	f001 f9fd 	bl	800542a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004030:	4a0a      	ldr	r2, [pc, #40]	@ (800405c <HAL_InitTick+0x74>)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6013      	str	r3, [r2, #0]
 8004036:	e007      	b.n	8004048 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8004038:	2301      	movs	r3, #1
 800403a:	73fb      	strb	r3, [r7, #15]
 800403c:	e004      	b.n	8004048 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	73fb      	strb	r3, [r7, #15]
 8004042:	e001      	b.n	8004048 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004044:	2301      	movs	r3, #1
 8004046:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004048:	7bfb      	ldrb	r3, [r7, #15]
}
 800404a:	4618      	mov	r0, r3
 800404c:	3710      	adds	r7, #16
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}
 8004052:	bf00      	nop
 8004054:	20000014 	.word	0x20000014
 8004058:	2000000c 	.word	0x2000000c
 800405c:	20000010 	.word	0x20000010

08004060 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004060:	b480      	push	{r7}
 8004062:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004064:	4b06      	ldr	r3, [pc, #24]	@ (8004080 <HAL_IncTick+0x20>)
 8004066:	781b      	ldrb	r3, [r3, #0]
 8004068:	461a      	mov	r2, r3
 800406a:	4b06      	ldr	r3, [pc, #24]	@ (8004084 <HAL_IncTick+0x24>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4413      	add	r3, r2
 8004070:	4a04      	ldr	r2, [pc, #16]	@ (8004084 <HAL_IncTick+0x24>)
 8004072:	6013      	str	r3, [r2, #0]
}
 8004074:	bf00      	nop
 8004076:	46bd      	mov	sp, r7
 8004078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407c:	4770      	bx	lr
 800407e:	bf00      	nop
 8004080:	20000014 	.word	0x20000014
 8004084:	20003a1c 	.word	0x20003a1c

08004088 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004088:	b480      	push	{r7}
 800408a:	af00      	add	r7, sp, #0
  return uwTick;
 800408c:	4b03      	ldr	r3, [pc, #12]	@ (800409c <HAL_GetTick+0x14>)
 800408e:	681b      	ldr	r3, [r3, #0]
}
 8004090:	4618      	mov	r0, r3
 8004092:	46bd      	mov	sp, r7
 8004094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004098:	4770      	bx	lr
 800409a:	bf00      	nop
 800409c:	20003a1c 	.word	0x20003a1c

080040a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b084      	sub	sp, #16
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80040a8:	f7ff ffee 	bl	8004088 <HAL_GetTick>
 80040ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040b8:	d005      	beq.n	80040c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80040ba:	4b0a      	ldr	r3, [pc, #40]	@ (80040e4 <HAL_Delay+0x44>)
 80040bc:	781b      	ldrb	r3, [r3, #0]
 80040be:	461a      	mov	r2, r3
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	4413      	add	r3, r2
 80040c4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80040c6:	bf00      	nop
 80040c8:	f7ff ffde 	bl	8004088 <HAL_GetTick>
 80040cc:	4602      	mov	r2, r0
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	1ad3      	subs	r3, r2, r3
 80040d2:	68fa      	ldr	r2, [r7, #12]
 80040d4:	429a      	cmp	r2, r3
 80040d6:	d8f7      	bhi.n	80040c8 <HAL_Delay+0x28>
  {
  }
}
 80040d8:	bf00      	nop
 80040da:	bf00      	nop
 80040dc:	3710      	adds	r7, #16
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}
 80040e2:	bf00      	nop
 80040e4:	20000014 	.word	0x20000014

080040e8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80040e8:	b480      	push	{r7}
 80040ea:	b083      	sub	sp, #12
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
 80040f0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	689b      	ldr	r3, [r3, #8]
 80040f6:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	431a      	orrs	r2, r3
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	609a      	str	r2, [r3, #8]
}
 8004102:	bf00      	nop
 8004104:	370c      	adds	r7, #12
 8004106:	46bd      	mov	sp, r7
 8004108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410c:	4770      	bx	lr

0800410e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800410e:	b480      	push	{r7}
 8004110:	b083      	sub	sp, #12
 8004112:	af00      	add	r7, sp, #0
 8004114:	6078      	str	r0, [r7, #4]
 8004116:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	689b      	ldr	r3, [r3, #8]
 800411c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	431a      	orrs	r2, r3
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	609a      	str	r2, [r3, #8]
}
 8004128:	bf00      	nop
 800412a:	370c      	adds	r7, #12
 800412c:	46bd      	mov	sp, r7
 800412e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004132:	4770      	bx	lr

08004134 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004134:	b480      	push	{r7}
 8004136:	b083      	sub	sp, #12
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8004144:	4618      	mov	r0, r3
 8004146:	370c      	adds	r7, #12
 8004148:	46bd      	mov	sp, r7
 800414a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414e:	4770      	bx	lr

08004150 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004150:	b480      	push	{r7}
 8004152:	b087      	sub	sp, #28
 8004154:	af00      	add	r7, sp, #0
 8004156:	60f8      	str	r0, [r7, #12]
 8004158:	60b9      	str	r1, [r7, #8]
 800415a:	607a      	str	r2, [r7, #4]
 800415c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	3360      	adds	r3, #96	@ 0x60
 8004162:	461a      	mov	r2, r3
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	009b      	lsls	r3, r3, #2
 8004168:	4413      	add	r3, r2
 800416a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	681a      	ldr	r2, [r3, #0]
 8004170:	4b08      	ldr	r3, [pc, #32]	@ (8004194 <LL_ADC_SetOffset+0x44>)
 8004172:	4013      	ands	r3, r2
 8004174:	687a      	ldr	r2, [r7, #4]
 8004176:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800417a:	683a      	ldr	r2, [r7, #0]
 800417c:	430a      	orrs	r2, r1
 800417e:	4313      	orrs	r3, r2
 8004180:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8004188:	bf00      	nop
 800418a:	371c      	adds	r7, #28
 800418c:	46bd      	mov	sp, r7
 800418e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004192:	4770      	bx	lr
 8004194:	03fff000 	.word	0x03fff000

08004198 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8004198:	b480      	push	{r7}
 800419a:	b085      	sub	sp, #20
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
 80041a0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	3360      	adds	r3, #96	@ 0x60
 80041a6:	461a      	mov	r2, r3
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	009b      	lsls	r3, r3, #2
 80041ac:	4413      	add	r3, r2
 80041ae:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80041b8:	4618      	mov	r0, r3
 80041ba:	3714      	adds	r7, #20
 80041bc:	46bd      	mov	sp, r7
 80041be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c2:	4770      	bx	lr

080041c4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80041c4:	b480      	push	{r7}
 80041c6:	b087      	sub	sp, #28
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	60f8      	str	r0, [r7, #12]
 80041cc:	60b9      	str	r1, [r7, #8]
 80041ce:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	3360      	adds	r3, #96	@ 0x60
 80041d4:	461a      	mov	r2, r3
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	009b      	lsls	r3, r3, #2
 80041da:	4413      	add	r3, r2
 80041dc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80041de:	697b      	ldr	r3, [r7, #20]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	431a      	orrs	r2, r3
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80041ee:	bf00      	nop
 80041f0:	371c      	adds	r7, #28
 80041f2:	46bd      	mov	sp, r7
 80041f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f8:	4770      	bx	lr

080041fa <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80041fa:	b480      	push	{r7}
 80041fc:	b087      	sub	sp, #28
 80041fe:	af00      	add	r7, sp, #0
 8004200:	60f8      	str	r0, [r7, #12]
 8004202:	60b9      	str	r1, [r7, #8]
 8004204:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	3330      	adds	r3, #48	@ 0x30
 800420a:	461a      	mov	r2, r3
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	0a1b      	lsrs	r3, r3, #8
 8004210:	009b      	lsls	r3, r3, #2
 8004212:	f003 030c 	and.w	r3, r3, #12
 8004216:	4413      	add	r3, r2
 8004218:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	681a      	ldr	r2, [r3, #0]
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	f003 031f 	and.w	r3, r3, #31
 8004224:	211f      	movs	r1, #31
 8004226:	fa01 f303 	lsl.w	r3, r1, r3
 800422a:	43db      	mvns	r3, r3
 800422c:	401a      	ands	r2, r3
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	0e9b      	lsrs	r3, r3, #26
 8004232:	f003 011f 	and.w	r1, r3, #31
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	f003 031f 	and.w	r3, r3, #31
 800423c:	fa01 f303 	lsl.w	r3, r1, r3
 8004240:	431a      	orrs	r2, r3
 8004242:	697b      	ldr	r3, [r7, #20]
 8004244:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004246:	bf00      	nop
 8004248:	371c      	adds	r7, #28
 800424a:	46bd      	mov	sp, r7
 800424c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004250:	4770      	bx	lr

08004252 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004252:	b480      	push	{r7}
 8004254:	b087      	sub	sp, #28
 8004256:	af00      	add	r7, sp, #0
 8004258:	60f8      	str	r0, [r7, #12]
 800425a:	60b9      	str	r1, [r7, #8]
 800425c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	3314      	adds	r3, #20
 8004262:	461a      	mov	r2, r3
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	0e5b      	lsrs	r3, r3, #25
 8004268:	009b      	lsls	r3, r3, #2
 800426a:	f003 0304 	and.w	r3, r3, #4
 800426e:	4413      	add	r3, r2
 8004270:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	681a      	ldr	r2, [r3, #0]
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	0d1b      	lsrs	r3, r3, #20
 800427a:	f003 031f 	and.w	r3, r3, #31
 800427e:	2107      	movs	r1, #7
 8004280:	fa01 f303 	lsl.w	r3, r1, r3
 8004284:	43db      	mvns	r3, r3
 8004286:	401a      	ands	r2, r3
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	0d1b      	lsrs	r3, r3, #20
 800428c:	f003 031f 	and.w	r3, r3, #31
 8004290:	6879      	ldr	r1, [r7, #4]
 8004292:	fa01 f303 	lsl.w	r3, r1, r3
 8004296:	431a      	orrs	r2, r3
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800429c:	bf00      	nop
 800429e:	371c      	adds	r7, #28
 80042a0:	46bd      	mov	sp, r7
 80042a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a6:	4770      	bx	lr

080042a8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b085      	sub	sp, #20
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	60f8      	str	r0, [r7, #12]
 80042b0:	60b9      	str	r1, [r7, #8]
 80042b2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042c0:	43db      	mvns	r3, r3
 80042c2:	401a      	ands	r2, r3
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	f003 0318 	and.w	r3, r3, #24
 80042ca:	4908      	ldr	r1, [pc, #32]	@ (80042ec <LL_ADC_SetChannelSingleDiff+0x44>)
 80042cc:	40d9      	lsrs	r1, r3
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	400b      	ands	r3, r1
 80042d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042d6:	431a      	orrs	r2, r3
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80042de:	bf00      	nop
 80042e0:	3714      	adds	r7, #20
 80042e2:	46bd      	mov	sp, r7
 80042e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e8:	4770      	bx	lr
 80042ea:	bf00      	nop
 80042ec:	0007ffff 	.word	0x0007ffff

080042f0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80042f0:	b480      	push	{r7}
 80042f2:	b083      	sub	sp, #12
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	689b      	ldr	r3, [r3, #8]
 80042fc:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8004300:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004304:	687a      	ldr	r2, [r7, #4]
 8004306:	6093      	str	r3, [r2, #8]
}
 8004308:	bf00      	nop
 800430a:	370c      	adds	r7, #12
 800430c:	46bd      	mov	sp, r7
 800430e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004312:	4770      	bx	lr

08004314 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8004314:	b480      	push	{r7}
 8004316:	b083      	sub	sp, #12
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	689b      	ldr	r3, [r3, #8]
 8004320:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004324:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004328:	d101      	bne.n	800432e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800432a:	2301      	movs	r3, #1
 800432c:	e000      	b.n	8004330 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800432e:	2300      	movs	r3, #0
}
 8004330:	4618      	mov	r0, r3
 8004332:	370c      	adds	r7, #12
 8004334:	46bd      	mov	sp, r7
 8004336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433a:	4770      	bx	lr

0800433c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800433c:	b480      	push	{r7}
 800433e:	b083      	sub	sp, #12
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	689b      	ldr	r3, [r3, #8]
 8004348:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 800434c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004350:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004358:	bf00      	nop
 800435a:	370c      	adds	r7, #12
 800435c:	46bd      	mov	sp, r7
 800435e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004362:	4770      	bx	lr

08004364 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8004364:	b480      	push	{r7}
 8004366:	b083      	sub	sp, #12
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004374:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004378:	d101      	bne.n	800437e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800437a:	2301      	movs	r3, #1
 800437c:	e000      	b.n	8004380 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800437e:	2300      	movs	r3, #0
}
 8004380:	4618      	mov	r0, r3
 8004382:	370c      	adds	r7, #12
 8004384:	46bd      	mov	sp, r7
 8004386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438a:	4770      	bx	lr

0800438c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800438c:	b480      	push	{r7}
 800438e:	b083      	sub	sp, #12
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800439c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80043a0:	f043 0201 	orr.w	r2, r3, #1
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80043a8:	bf00      	nop
 80043aa:	370c      	adds	r7, #12
 80043ac:	46bd      	mov	sp, r7
 80043ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b2:	4770      	bx	lr

080043b4 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80043b4:	b480      	push	{r7}
 80043b6:	b083      	sub	sp, #12
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	689b      	ldr	r3, [r3, #8]
 80043c0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80043c4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80043c8:	f043 0202 	orr.w	r2, r3, #2
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80043d0:	bf00      	nop
 80043d2:	370c      	adds	r7, #12
 80043d4:	46bd      	mov	sp, r7
 80043d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043da:	4770      	bx	lr

080043dc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80043dc:	b480      	push	{r7}
 80043de:	b083      	sub	sp, #12
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	689b      	ldr	r3, [r3, #8]
 80043e8:	f003 0301 	and.w	r3, r3, #1
 80043ec:	2b01      	cmp	r3, #1
 80043ee:	d101      	bne.n	80043f4 <LL_ADC_IsEnabled+0x18>
 80043f0:	2301      	movs	r3, #1
 80043f2:	e000      	b.n	80043f6 <LL_ADC_IsEnabled+0x1a>
 80043f4:	2300      	movs	r3, #0
}
 80043f6:	4618      	mov	r0, r3
 80043f8:	370c      	adds	r7, #12
 80043fa:	46bd      	mov	sp, r7
 80043fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004400:	4770      	bx	lr

08004402 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8004402:	b480      	push	{r7}
 8004404:	b083      	sub	sp, #12
 8004406:	af00      	add	r7, sp, #0
 8004408:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	689b      	ldr	r3, [r3, #8]
 800440e:	f003 0302 	and.w	r3, r3, #2
 8004412:	2b02      	cmp	r3, #2
 8004414:	d101      	bne.n	800441a <LL_ADC_IsDisableOngoing+0x18>
 8004416:	2301      	movs	r3, #1
 8004418:	e000      	b.n	800441c <LL_ADC_IsDisableOngoing+0x1a>
 800441a:	2300      	movs	r3, #0
}
 800441c:	4618      	mov	r0, r3
 800441e:	370c      	adds	r7, #12
 8004420:	46bd      	mov	sp, r7
 8004422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004426:	4770      	bx	lr

08004428 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004428:	b480      	push	{r7}
 800442a:	b083      	sub	sp, #12
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	689b      	ldr	r3, [r3, #8]
 8004434:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004438:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800443c:	f043 0204 	orr.w	r2, r3, #4
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8004444:	bf00      	nop
 8004446:	370c      	adds	r7, #12
 8004448:	46bd      	mov	sp, r7
 800444a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444e:	4770      	bx	lr

08004450 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004450:	b480      	push	{r7}
 8004452:	b083      	sub	sp, #12
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	689b      	ldr	r3, [r3, #8]
 800445c:	f003 0304 	and.w	r3, r3, #4
 8004460:	2b04      	cmp	r3, #4
 8004462:	d101      	bne.n	8004468 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004464:	2301      	movs	r3, #1
 8004466:	e000      	b.n	800446a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004468:	2300      	movs	r3, #0
}
 800446a:	4618      	mov	r0, r3
 800446c:	370c      	adds	r7, #12
 800446e:	46bd      	mov	sp, r7
 8004470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004474:	4770      	bx	lr

08004476 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004476:	b480      	push	{r7}
 8004478:	b083      	sub	sp, #12
 800447a:	af00      	add	r7, sp, #0
 800447c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	689b      	ldr	r3, [r3, #8]
 8004482:	f003 0308 	and.w	r3, r3, #8
 8004486:	2b08      	cmp	r3, #8
 8004488:	d101      	bne.n	800448e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800448a:	2301      	movs	r3, #1
 800448c:	e000      	b.n	8004490 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800448e:	2300      	movs	r3, #0
}
 8004490:	4618      	mov	r0, r3
 8004492:	370c      	adds	r7, #12
 8004494:	46bd      	mov	sp, r7
 8004496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449a:	4770      	bx	lr

0800449c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b088      	sub	sp, #32
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80044a4:	2300      	movs	r3, #0
 80044a6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80044a8:	2300      	movs	r3, #0
 80044aa:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d101      	bne.n	80044b6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80044b2:	2301      	movs	r3, #1
 80044b4:	e12c      	b.n	8004710 <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	691b      	ldr	r3, [r3, #16]
 80044ba:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d109      	bne.n	80044d8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80044c4:	6878      	ldr	r0, [r7, #4]
 80044c6:	f7ff fb9f 	bl	8003c08 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2200      	movs	r2, #0
 80044ce:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2200      	movs	r2, #0
 80044d4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4618      	mov	r0, r3
 80044de:	f7ff ff19 	bl	8004314 <LL_ADC_IsDeepPowerDownEnabled>
 80044e2:	4603      	mov	r3, r0
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d004      	beq.n	80044f2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4618      	mov	r0, r3
 80044ee:	f7ff feff 	bl	80042f0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4618      	mov	r0, r3
 80044f8:	f7ff ff34 	bl	8004364 <LL_ADC_IsInternalRegulatorEnabled>
 80044fc:	4603      	mov	r3, r0
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d115      	bne.n	800452e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4618      	mov	r0, r3
 8004508:	f7ff ff18 	bl	800433c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800450c:	4b82      	ldr	r3, [pc, #520]	@ (8004718 <HAL_ADC_Init+0x27c>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	099b      	lsrs	r3, r3, #6
 8004512:	4a82      	ldr	r2, [pc, #520]	@ (800471c <HAL_ADC_Init+0x280>)
 8004514:	fba2 2303 	umull	r2, r3, r2, r3
 8004518:	099b      	lsrs	r3, r3, #6
 800451a:	3301      	adds	r3, #1
 800451c:	005b      	lsls	r3, r3, #1
 800451e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004520:	e002      	b.n	8004528 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	3b01      	subs	r3, #1
 8004526:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d1f9      	bne.n	8004522 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4618      	mov	r0, r3
 8004534:	f7ff ff16 	bl	8004364 <LL_ADC_IsInternalRegulatorEnabled>
 8004538:	4603      	mov	r3, r0
 800453a:	2b00      	cmp	r3, #0
 800453c:	d10d      	bne.n	800455a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004542:	f043 0210 	orr.w	r2, r3, #16
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800454e:	f043 0201 	orr.w	r2, r3, #1
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8004556:	2301      	movs	r3, #1
 8004558:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4618      	mov	r0, r3
 8004560:	f7ff ff76 	bl	8004450 <LL_ADC_REG_IsConversionOngoing>
 8004564:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800456a:	f003 0310 	and.w	r3, r3, #16
 800456e:	2b00      	cmp	r3, #0
 8004570:	f040 80c5 	bne.w	80046fe <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8004574:	697b      	ldr	r3, [r7, #20]
 8004576:	2b00      	cmp	r3, #0
 8004578:	f040 80c1 	bne.w	80046fe <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004580:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8004584:	f043 0202 	orr.w	r2, r3, #2
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4618      	mov	r0, r3
 8004592:	f7ff ff23 	bl	80043dc <LL_ADC_IsEnabled>
 8004596:	4603      	mov	r3, r0
 8004598:	2b00      	cmp	r3, #0
 800459a:	d10b      	bne.n	80045b4 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800459c:	4860      	ldr	r0, [pc, #384]	@ (8004720 <HAL_ADC_Init+0x284>)
 800459e:	f7ff ff1d 	bl	80043dc <LL_ADC_IsEnabled>
 80045a2:	4603      	mov	r3, r0
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d105      	bne.n	80045b4 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	4619      	mov	r1, r3
 80045ae:	485d      	ldr	r0, [pc, #372]	@ (8004724 <HAL_ADC_Init+0x288>)
 80045b0:	f7ff fd9a 	bl	80040e8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	7e5b      	ldrb	r3, [r3, #25]
 80045b8:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80045be:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80045c4:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80045ca:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 80045d2:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80045d4:	4313      	orrs	r3, r2
 80045d6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80045de:	2b01      	cmp	r3, #1
 80045e0:	d106      	bne.n	80045f0 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045e6:	3b01      	subs	r3, #1
 80045e8:	045b      	lsls	r3, r3, #17
 80045ea:	69ba      	ldr	r2, [r7, #24]
 80045ec:	4313      	orrs	r3, r2
 80045ee:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d009      	beq.n	800460c <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045fc:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004604:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004606:	69ba      	ldr	r2, [r7, #24]
 8004608:	4313      	orrs	r3, r2
 800460a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	68da      	ldr	r2, [r3, #12]
 8004612:	4b45      	ldr	r3, [pc, #276]	@ (8004728 <HAL_ADC_Init+0x28c>)
 8004614:	4013      	ands	r3, r2
 8004616:	687a      	ldr	r2, [r7, #4]
 8004618:	6812      	ldr	r2, [r2, #0]
 800461a:	69b9      	ldr	r1, [r7, #24]
 800461c:	430b      	orrs	r3, r1
 800461e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4618      	mov	r0, r3
 8004626:	f7ff ff13 	bl	8004450 <LL_ADC_REG_IsConversionOngoing>
 800462a:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4618      	mov	r0, r3
 8004632:	f7ff ff20 	bl	8004476 <LL_ADC_INJ_IsConversionOngoing>
 8004636:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004638:	693b      	ldr	r3, [r7, #16]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d13d      	bne.n	80046ba <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d13a      	bne.n	80046ba <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8004648:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004650:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8004652:	4313      	orrs	r3, r2
 8004654:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	68db      	ldr	r3, [r3, #12]
 800465c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004660:	f023 0302 	bic.w	r3, r3, #2
 8004664:	687a      	ldr	r2, [r7, #4]
 8004666:	6812      	ldr	r2, [r2, #0]
 8004668:	69b9      	ldr	r1, [r7, #24]
 800466a:	430b      	orrs	r3, r1
 800466c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004674:	2b01      	cmp	r3, #1
 8004676:	d118      	bne.n	80046aa <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	691b      	ldr	r3, [r3, #16]
 800467e:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004682:	f023 0304 	bic.w	r3, r3, #4
 8004686:	687a      	ldr	r2, [r7, #4]
 8004688:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 800468a:	687a      	ldr	r2, [r7, #4]
 800468c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800468e:	4311      	orrs	r1, r2
 8004690:	687a      	ldr	r2, [r7, #4]
 8004692:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8004694:	4311      	orrs	r1, r2
 8004696:	687a      	ldr	r2, [r7, #4]
 8004698:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800469a:	430a      	orrs	r2, r1
 800469c:	431a      	orrs	r2, r3
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f042 0201 	orr.w	r2, r2, #1
 80046a6:	611a      	str	r2, [r3, #16]
 80046a8:	e007      	b.n	80046ba <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	691a      	ldr	r2, [r3, #16]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f022 0201 	bic.w	r2, r2, #1
 80046b8:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	691b      	ldr	r3, [r3, #16]
 80046be:	2b01      	cmp	r3, #1
 80046c0:	d10c      	bne.n	80046dc <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046c8:	f023 010f 	bic.w	r1, r3, #15
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	69db      	ldr	r3, [r3, #28]
 80046d0:	1e5a      	subs	r2, r3, #1
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	430a      	orrs	r2, r1
 80046d8:	631a      	str	r2, [r3, #48]	@ 0x30
 80046da:	e007      	b.n	80046ec <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f022 020f 	bic.w	r2, r2, #15
 80046ea:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046f0:	f023 0303 	bic.w	r3, r3, #3
 80046f4:	f043 0201 	orr.w	r2, r3, #1
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	655a      	str	r2, [r3, #84]	@ 0x54
 80046fc:	e007      	b.n	800470e <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004702:	f043 0210 	orr.w	r2, r3, #16
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800470a:	2301      	movs	r3, #1
 800470c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800470e:	7ffb      	ldrb	r3, [r7, #31]
}
 8004710:	4618      	mov	r0, r3
 8004712:	3720      	adds	r7, #32
 8004714:	46bd      	mov	sp, r7
 8004716:	bd80      	pop	{r7, pc}
 8004718:	2000000c 	.word	0x2000000c
 800471c:	053e2d63 	.word	0x053e2d63
 8004720:	50040000 	.word	0x50040000
 8004724:	50040300 	.word	0x50040300
 8004728:	fff0c007 	.word	0xfff0c007

0800472c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b084      	sub	sp, #16
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4618      	mov	r0, r3
 800473a:	f7ff fe89 	bl	8004450 <LL_ADC_REG_IsConversionOngoing>
 800473e:	4603      	mov	r3, r0
 8004740:	2b00      	cmp	r3, #0
 8004742:	d14f      	bne.n	80047e4 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800474a:	2b01      	cmp	r3, #1
 800474c:	d101      	bne.n	8004752 <HAL_ADC_Start+0x26>
 800474e:	2302      	movs	r3, #2
 8004750:	e04b      	b.n	80047ea <HAL_ADC_Start+0xbe>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2201      	movs	r2, #1
 8004756:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800475a:	6878      	ldr	r0, [r7, #4]
 800475c:	f000 fc36 	bl	8004fcc <ADC_Enable>
 8004760:	4603      	mov	r3, r0
 8004762:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8004764:	7bfb      	ldrb	r3, [r7, #15]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d137      	bne.n	80047da <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800476e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004772:	f023 0301 	bic.w	r3, r3, #1
 8004776:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	655a      	str	r2, [r3, #84]	@ 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004782:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004786:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800478a:	d106      	bne.n	800479a <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004790:	f023 0206 	bic.w	r2, r3, #6
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	659a      	str	r2, [r3, #88]	@ 0x58
 8004798:	e002      	b.n	80047a0 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2200      	movs	r2, #0
 800479e:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	221c      	movs	r2, #28
 80047a6:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2200      	movs	r2, #0
 80047ac:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	68db      	ldr	r3, [r3, #12]
 80047b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d007      	beq.n	80047ce <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047c2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80047c6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	655a      	str	r2, [r3, #84]	@ 0x54
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4618      	mov	r0, r3
 80047d4:	f7ff fe28 	bl	8004428 <LL_ADC_REG_StartConversion>
 80047d8:	e006      	b.n	80047e8 <HAL_ADC_Start+0xbc>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2200      	movs	r2, #0
 80047de:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80047e2:	e001      	b.n	80047e8 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80047e4:	2302      	movs	r3, #2
 80047e6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 80047e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80047ea:	4618      	mov	r0, r3
 80047ec:	3710      	adds	r7, #16
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}

080047f2 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80047f2:	b480      	push	{r7}
 80047f4:	b083      	sub	sp, #12
 80047f6:	af00      	add	r7, sp, #0
 80047f8:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8004800:	4618      	mov	r0, r3
 8004802:	370c      	adds	r7, #12
 8004804:	46bd      	mov	sp, r7
 8004806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480a:	4770      	bx	lr

0800480c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b0b6      	sub	sp, #216	@ 0xd8
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
 8004814:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004816:	2300      	movs	r3, #0
 8004818:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800481c:	2300      	movs	r3, #0
 800481e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004826:	2b01      	cmp	r3, #1
 8004828:	d101      	bne.n	800482e <HAL_ADC_ConfigChannel+0x22>
 800482a:	2302      	movs	r3, #2
 800482c:	e3b9      	b.n	8004fa2 <HAL_ADC_ConfigChannel+0x796>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2201      	movs	r2, #1
 8004832:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4618      	mov	r0, r3
 800483c:	f7ff fe08 	bl	8004450 <LL_ADC_REG_IsConversionOngoing>
 8004840:	4603      	mov	r3, r0
 8004842:	2b00      	cmp	r3, #0
 8004844:	f040 839e 	bne.w	8004f84 <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	2b05      	cmp	r3, #5
 800484e:	d824      	bhi.n	800489a <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	3b02      	subs	r3, #2
 8004856:	2b03      	cmp	r3, #3
 8004858:	d81b      	bhi.n	8004892 <HAL_ADC_ConfigChannel+0x86>
 800485a:	a201      	add	r2, pc, #4	@ (adr r2, 8004860 <HAL_ADC_ConfigChannel+0x54>)
 800485c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004860:	08004871 	.word	0x08004871
 8004864:	08004879 	.word	0x08004879
 8004868:	08004881 	.word	0x08004881
 800486c:	08004889 	.word	0x08004889
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	220c      	movs	r2, #12
 8004874:	605a      	str	r2, [r3, #4]
          break;
 8004876:	e010      	b.n	800489a <HAL_ADC_ConfigChannel+0x8e>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	2212      	movs	r2, #18
 800487c:	605a      	str	r2, [r3, #4]
          break;
 800487e:	e00c      	b.n	800489a <HAL_ADC_ConfigChannel+0x8e>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	2218      	movs	r2, #24
 8004884:	605a      	str	r2, [r3, #4]
          break;
 8004886:	e008      	b.n	800489a <HAL_ADC_ConfigChannel+0x8e>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800488e:	605a      	str	r2, [r3, #4]
          break;
 8004890:	e003      	b.n	800489a <HAL_ADC_ConfigChannel+0x8e>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	2206      	movs	r2, #6
 8004896:	605a      	str	r2, [r3, #4]
          break;
 8004898:	bf00      	nop
      }
    }
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6818      	ldr	r0, [r3, #0]
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	6859      	ldr	r1, [r3, #4]
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	461a      	mov	r2, r3
 80048a8:	f7ff fca7 	bl	80041fa <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4618      	mov	r0, r3
 80048b2:	f7ff fdcd 	bl	8004450 <LL_ADC_REG_IsConversionOngoing>
 80048b6:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4618      	mov	r0, r3
 80048c0:	f7ff fdd9 	bl	8004476 <LL_ADC_INJ_IsConversionOngoing>
 80048c4:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80048c8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	f040 81a6 	bne.w	8004c1e <HAL_ADC_ConfigChannel+0x412>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80048d2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	f040 81a1 	bne.w	8004c1e <HAL_ADC_ConfigChannel+0x412>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6818      	ldr	r0, [r3, #0]
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	6819      	ldr	r1, [r3, #0]
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	689b      	ldr	r3, [r3, #8]
 80048e8:	461a      	mov	r2, r3
 80048ea:	f7ff fcb2 	bl	8004252 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	695a      	ldr	r2, [r3, #20]
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	68db      	ldr	r3, [r3, #12]
 80048f8:	08db      	lsrs	r3, r3, #3
 80048fa:	f003 0303 	and.w	r3, r3, #3
 80048fe:	005b      	lsls	r3, r3, #1
 8004900:	fa02 f303 	lsl.w	r3, r2, r3
 8004904:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	691b      	ldr	r3, [r3, #16]
 800490c:	2b04      	cmp	r3, #4
 800490e:	d00a      	beq.n	8004926 <HAL_ADC_ConfigChannel+0x11a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6818      	ldr	r0, [r3, #0]
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	6919      	ldr	r1, [r3, #16]
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	681a      	ldr	r2, [r3, #0]
 800491c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004920:	f7ff fc16 	bl	8004150 <LL_ADC_SetOffset>
 8004924:	e17b      	b.n	8004c1e <HAL_ADC_ConfigChannel+0x412>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	2100      	movs	r1, #0
 800492c:	4618      	mov	r0, r3
 800492e:	f7ff fc33 	bl	8004198 <LL_ADC_GetOffsetChannel>
 8004932:	4603      	mov	r3, r0
 8004934:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004938:	2b00      	cmp	r3, #0
 800493a:	d10a      	bne.n	8004952 <HAL_ADC_ConfigChannel+0x146>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	2100      	movs	r1, #0
 8004942:	4618      	mov	r0, r3
 8004944:	f7ff fc28 	bl	8004198 <LL_ADC_GetOffsetChannel>
 8004948:	4603      	mov	r3, r0
 800494a:	0e9b      	lsrs	r3, r3, #26
 800494c:	f003 021f 	and.w	r2, r3, #31
 8004950:	e01e      	b.n	8004990 <HAL_ADC_ConfigChannel+0x184>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	2100      	movs	r1, #0
 8004958:	4618      	mov	r0, r3
 800495a:	f7ff fc1d 	bl	8004198 <LL_ADC_GetOffsetChannel>
 800495e:	4603      	mov	r3, r0
 8004960:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004964:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004968:	fa93 f3a3 	rbit	r3, r3
 800496c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004970:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004974:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004978:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800497c:	2b00      	cmp	r3, #0
 800497e:	d101      	bne.n	8004984 <HAL_ADC_ConfigChannel+0x178>
  {
    return 32U;
 8004980:	2320      	movs	r3, #32
 8004982:	e004      	b.n	800498e <HAL_ADC_ConfigChannel+0x182>
  }
  return __builtin_clz(value);
 8004984:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004988:	fab3 f383 	clz	r3, r3
 800498c:	b2db      	uxtb	r3, r3
 800498e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004998:	2b00      	cmp	r3, #0
 800499a:	d105      	bne.n	80049a8 <HAL_ADC_ConfigChannel+0x19c>
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	0e9b      	lsrs	r3, r3, #26
 80049a2:	f003 031f 	and.w	r3, r3, #31
 80049a6:	e018      	b.n	80049da <HAL_ADC_ConfigChannel+0x1ce>
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049b0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80049b4:	fa93 f3a3 	rbit	r3, r3
 80049b8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80049bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80049c0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80049c4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d101      	bne.n	80049d0 <HAL_ADC_ConfigChannel+0x1c4>
    return 32U;
 80049cc:	2320      	movs	r3, #32
 80049ce:	e004      	b.n	80049da <HAL_ADC_ConfigChannel+0x1ce>
  return __builtin_clz(value);
 80049d0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80049d4:	fab3 f383 	clz	r3, r3
 80049d8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80049da:	429a      	cmp	r2, r3
 80049dc:	d106      	bne.n	80049ec <HAL_ADC_ConfigChannel+0x1e0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	2200      	movs	r2, #0
 80049e4:	2100      	movs	r1, #0
 80049e6:	4618      	mov	r0, r3
 80049e8:	f7ff fbec 	bl	80041c4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	2101      	movs	r1, #1
 80049f2:	4618      	mov	r0, r3
 80049f4:	f7ff fbd0 	bl	8004198 <LL_ADC_GetOffsetChannel>
 80049f8:	4603      	mov	r3, r0
 80049fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d10a      	bne.n	8004a18 <HAL_ADC_ConfigChannel+0x20c>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	2101      	movs	r1, #1
 8004a08:	4618      	mov	r0, r3
 8004a0a:	f7ff fbc5 	bl	8004198 <LL_ADC_GetOffsetChannel>
 8004a0e:	4603      	mov	r3, r0
 8004a10:	0e9b      	lsrs	r3, r3, #26
 8004a12:	f003 021f 	and.w	r2, r3, #31
 8004a16:	e01e      	b.n	8004a56 <HAL_ADC_ConfigChannel+0x24a>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	2101      	movs	r1, #1
 8004a1e:	4618      	mov	r0, r3
 8004a20:	f7ff fbba 	bl	8004198 <LL_ADC_GetOffsetChannel>
 8004a24:	4603      	mov	r3, r0
 8004a26:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a2a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004a2e:	fa93 f3a3 	rbit	r3, r3
 8004a32:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8004a36:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004a3a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8004a3e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d101      	bne.n	8004a4a <HAL_ADC_ConfigChannel+0x23e>
    return 32U;
 8004a46:	2320      	movs	r3, #32
 8004a48:	e004      	b.n	8004a54 <HAL_ADC_ConfigChannel+0x248>
  return __builtin_clz(value);
 8004a4a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004a4e:	fab3 f383 	clz	r3, r3
 8004a52:	b2db      	uxtb	r3, r3
 8004a54:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d105      	bne.n	8004a6e <HAL_ADC_ConfigChannel+0x262>
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	0e9b      	lsrs	r3, r3, #26
 8004a68:	f003 031f 	and.w	r3, r3, #31
 8004a6c:	e018      	b.n	8004aa0 <HAL_ADC_ConfigChannel+0x294>
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a76:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004a7a:	fa93 f3a3 	rbit	r3, r3
 8004a7e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8004a82:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004a86:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8004a8a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d101      	bne.n	8004a96 <HAL_ADC_ConfigChannel+0x28a>
    return 32U;
 8004a92:	2320      	movs	r3, #32
 8004a94:	e004      	b.n	8004aa0 <HAL_ADC_ConfigChannel+0x294>
  return __builtin_clz(value);
 8004a96:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004a9a:	fab3 f383 	clz	r3, r3
 8004a9e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004aa0:	429a      	cmp	r2, r3
 8004aa2:	d106      	bne.n	8004ab2 <HAL_ADC_ConfigChannel+0x2a6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	2101      	movs	r1, #1
 8004aac:	4618      	mov	r0, r3
 8004aae:	f7ff fb89 	bl	80041c4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	2102      	movs	r1, #2
 8004ab8:	4618      	mov	r0, r3
 8004aba:	f7ff fb6d 	bl	8004198 <LL_ADC_GetOffsetChannel>
 8004abe:	4603      	mov	r3, r0
 8004ac0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d10a      	bne.n	8004ade <HAL_ADC_ConfigChannel+0x2d2>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	2102      	movs	r1, #2
 8004ace:	4618      	mov	r0, r3
 8004ad0:	f7ff fb62 	bl	8004198 <LL_ADC_GetOffsetChannel>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	0e9b      	lsrs	r3, r3, #26
 8004ad8:	f003 021f 	and.w	r2, r3, #31
 8004adc:	e01e      	b.n	8004b1c <HAL_ADC_ConfigChannel+0x310>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	2102      	movs	r1, #2
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	f7ff fb57 	bl	8004198 <LL_ADC_GetOffsetChannel>
 8004aea:	4603      	mov	r3, r0
 8004aec:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004af0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004af4:	fa93 f3a3 	rbit	r3, r3
 8004af8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8004afc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004b00:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8004b04:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d101      	bne.n	8004b10 <HAL_ADC_ConfigChannel+0x304>
    return 32U;
 8004b0c:	2320      	movs	r3, #32
 8004b0e:	e004      	b.n	8004b1a <HAL_ADC_ConfigChannel+0x30e>
  return __builtin_clz(value);
 8004b10:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004b14:	fab3 f383 	clz	r3, r3
 8004b18:	b2db      	uxtb	r3, r3
 8004b1a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d105      	bne.n	8004b34 <HAL_ADC_ConfigChannel+0x328>
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	0e9b      	lsrs	r3, r3, #26
 8004b2e:	f003 031f 	and.w	r3, r3, #31
 8004b32:	e016      	b.n	8004b62 <HAL_ADC_ConfigChannel+0x356>
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b3c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004b40:	fa93 f3a3 	rbit	r3, r3
 8004b44:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8004b46:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004b48:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8004b4c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d101      	bne.n	8004b58 <HAL_ADC_ConfigChannel+0x34c>
    return 32U;
 8004b54:	2320      	movs	r3, #32
 8004b56:	e004      	b.n	8004b62 <HAL_ADC_ConfigChannel+0x356>
  return __builtin_clz(value);
 8004b58:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004b5c:	fab3 f383 	clz	r3, r3
 8004b60:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004b62:	429a      	cmp	r2, r3
 8004b64:	d106      	bne.n	8004b74 <HAL_ADC_ConfigChannel+0x368>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	2102      	movs	r1, #2
 8004b6e:	4618      	mov	r0, r3
 8004b70:	f7ff fb28 	bl	80041c4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	2103      	movs	r1, #3
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	f7ff fb0c 	bl	8004198 <LL_ADC_GetOffsetChannel>
 8004b80:	4603      	mov	r3, r0
 8004b82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d10a      	bne.n	8004ba0 <HAL_ADC_ConfigChannel+0x394>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	2103      	movs	r1, #3
 8004b90:	4618      	mov	r0, r3
 8004b92:	f7ff fb01 	bl	8004198 <LL_ADC_GetOffsetChannel>
 8004b96:	4603      	mov	r3, r0
 8004b98:	0e9b      	lsrs	r3, r3, #26
 8004b9a:	f003 021f 	and.w	r2, r3, #31
 8004b9e:	e017      	b.n	8004bd0 <HAL_ADC_ConfigChannel+0x3c4>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	2103      	movs	r1, #3
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	f7ff faf6 	bl	8004198 <LL_ADC_GetOffsetChannel>
 8004bac:	4603      	mov	r3, r0
 8004bae:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bb0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004bb2:	fa93 f3a3 	rbit	r3, r3
 8004bb6:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8004bb8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004bba:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8004bbc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d101      	bne.n	8004bc6 <HAL_ADC_ConfigChannel+0x3ba>
    return 32U;
 8004bc2:	2320      	movs	r3, #32
 8004bc4:	e003      	b.n	8004bce <HAL_ADC_ConfigChannel+0x3c2>
  return __builtin_clz(value);
 8004bc6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004bc8:	fab3 f383 	clz	r3, r3
 8004bcc:	b2db      	uxtb	r3, r3
 8004bce:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d105      	bne.n	8004be8 <HAL_ADC_ConfigChannel+0x3dc>
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	0e9b      	lsrs	r3, r3, #26
 8004be2:	f003 031f 	and.w	r3, r3, #31
 8004be6:	e011      	b.n	8004c0c <HAL_ADC_ConfigChannel+0x400>
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bee:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004bf0:	fa93 f3a3 	rbit	r3, r3
 8004bf4:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8004bf6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004bf8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8004bfa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d101      	bne.n	8004c04 <HAL_ADC_ConfigChannel+0x3f8>
    return 32U;
 8004c00:	2320      	movs	r3, #32
 8004c02:	e003      	b.n	8004c0c <HAL_ADC_ConfigChannel+0x400>
  return __builtin_clz(value);
 8004c04:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004c06:	fab3 f383 	clz	r3, r3
 8004c0a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004c0c:	429a      	cmp	r2, r3
 8004c0e:	d106      	bne.n	8004c1e <HAL_ADC_ConfigChannel+0x412>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	2200      	movs	r2, #0
 8004c16:	2103      	movs	r1, #3
 8004c18:	4618      	mov	r0, r3
 8004c1a:	f7ff fad3 	bl	80041c4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4618      	mov	r0, r3
 8004c24:	f7ff fbda 	bl	80043dc <LL_ADC_IsEnabled>
 8004c28:	4603      	mov	r3, r0
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	f040 8140 	bne.w	8004eb0 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6818      	ldr	r0, [r3, #0]
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	6819      	ldr	r1, [r3, #0]
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	68db      	ldr	r3, [r3, #12]
 8004c3c:	461a      	mov	r2, r3
 8004c3e:	f7ff fb33 	bl	80042a8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	68db      	ldr	r3, [r3, #12]
 8004c46:	4a8f      	ldr	r2, [pc, #572]	@ (8004e84 <HAL_ADC_ConfigChannel+0x678>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	f040 8131 	bne.w	8004eb0 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d10b      	bne.n	8004c76 <HAL_ADC_ConfigChannel+0x46a>
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	0e9b      	lsrs	r3, r3, #26
 8004c64:	3301      	adds	r3, #1
 8004c66:	f003 031f 	and.w	r3, r3, #31
 8004c6a:	2b09      	cmp	r3, #9
 8004c6c:	bf94      	ite	ls
 8004c6e:	2301      	movls	r3, #1
 8004c70:	2300      	movhi	r3, #0
 8004c72:	b2db      	uxtb	r3, r3
 8004c74:	e019      	b.n	8004caa <HAL_ADC_ConfigChannel+0x49e>
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c7c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004c7e:	fa93 f3a3 	rbit	r3, r3
 8004c82:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8004c84:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004c86:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8004c88:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d101      	bne.n	8004c92 <HAL_ADC_ConfigChannel+0x486>
    return 32U;
 8004c8e:	2320      	movs	r3, #32
 8004c90:	e003      	b.n	8004c9a <HAL_ADC_ConfigChannel+0x48e>
  return __builtin_clz(value);
 8004c92:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004c94:	fab3 f383 	clz	r3, r3
 8004c98:	b2db      	uxtb	r3, r3
 8004c9a:	3301      	adds	r3, #1
 8004c9c:	f003 031f 	and.w	r3, r3, #31
 8004ca0:	2b09      	cmp	r3, #9
 8004ca2:	bf94      	ite	ls
 8004ca4:	2301      	movls	r3, #1
 8004ca6:	2300      	movhi	r3, #0
 8004ca8:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d079      	beq.n	8004da2 <HAL_ADC_ConfigChannel+0x596>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d107      	bne.n	8004cca <HAL_ADC_ConfigChannel+0x4be>
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	0e9b      	lsrs	r3, r3, #26
 8004cc0:	3301      	adds	r3, #1
 8004cc2:	069b      	lsls	r3, r3, #26
 8004cc4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004cc8:	e015      	b.n	8004cf6 <HAL_ADC_ConfigChannel+0x4ea>
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cd0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004cd2:	fa93 f3a3 	rbit	r3, r3
 8004cd6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8004cd8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004cda:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8004cdc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d101      	bne.n	8004ce6 <HAL_ADC_ConfigChannel+0x4da>
    return 32U;
 8004ce2:	2320      	movs	r3, #32
 8004ce4:	e003      	b.n	8004cee <HAL_ADC_ConfigChannel+0x4e2>
  return __builtin_clz(value);
 8004ce6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ce8:	fab3 f383 	clz	r3, r3
 8004cec:	b2db      	uxtb	r3, r3
 8004cee:	3301      	adds	r3, #1
 8004cf0:	069b      	lsls	r3, r3, #26
 8004cf2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d109      	bne.n	8004d16 <HAL_ADC_ConfigChannel+0x50a>
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	0e9b      	lsrs	r3, r3, #26
 8004d08:	3301      	adds	r3, #1
 8004d0a:	f003 031f 	and.w	r3, r3, #31
 8004d0e:	2101      	movs	r1, #1
 8004d10:	fa01 f303 	lsl.w	r3, r1, r3
 8004d14:	e017      	b.n	8004d46 <HAL_ADC_ConfigChannel+0x53a>
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d1c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d1e:	fa93 f3a3 	rbit	r3, r3
 8004d22:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8004d24:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d26:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8004d28:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d101      	bne.n	8004d32 <HAL_ADC_ConfigChannel+0x526>
    return 32U;
 8004d2e:	2320      	movs	r3, #32
 8004d30:	e003      	b.n	8004d3a <HAL_ADC_ConfigChannel+0x52e>
  return __builtin_clz(value);
 8004d32:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004d34:	fab3 f383 	clz	r3, r3
 8004d38:	b2db      	uxtb	r3, r3
 8004d3a:	3301      	adds	r3, #1
 8004d3c:	f003 031f 	and.w	r3, r3, #31
 8004d40:	2101      	movs	r1, #1
 8004d42:	fa01 f303 	lsl.w	r3, r1, r3
 8004d46:	ea42 0103 	orr.w	r1, r2, r3
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d10a      	bne.n	8004d6c <HAL_ADC_ConfigChannel+0x560>
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	0e9b      	lsrs	r3, r3, #26
 8004d5c:	3301      	adds	r3, #1
 8004d5e:	f003 021f 	and.w	r2, r3, #31
 8004d62:	4613      	mov	r3, r2
 8004d64:	005b      	lsls	r3, r3, #1
 8004d66:	4413      	add	r3, r2
 8004d68:	051b      	lsls	r3, r3, #20
 8004d6a:	e018      	b.n	8004d9e <HAL_ADC_ConfigChannel+0x592>
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d74:	fa93 f3a3 	rbit	r3, r3
 8004d78:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8004d7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8004d7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d101      	bne.n	8004d88 <HAL_ADC_ConfigChannel+0x57c>
    return 32U;
 8004d84:	2320      	movs	r3, #32
 8004d86:	e003      	b.n	8004d90 <HAL_ADC_ConfigChannel+0x584>
  return __builtin_clz(value);
 8004d88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d8a:	fab3 f383 	clz	r3, r3
 8004d8e:	b2db      	uxtb	r3, r3
 8004d90:	3301      	adds	r3, #1
 8004d92:	f003 021f 	and.w	r2, r3, #31
 8004d96:	4613      	mov	r3, r2
 8004d98:	005b      	lsls	r3, r3, #1
 8004d9a:	4413      	add	r3, r2
 8004d9c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004d9e:	430b      	orrs	r3, r1
 8004da0:	e081      	b.n	8004ea6 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d107      	bne.n	8004dbe <HAL_ADC_ConfigChannel+0x5b2>
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	0e9b      	lsrs	r3, r3, #26
 8004db4:	3301      	adds	r3, #1
 8004db6:	069b      	lsls	r3, r3, #26
 8004db8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004dbc:	e015      	b.n	8004dea <HAL_ADC_ConfigChannel+0x5de>
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004dc6:	fa93 f3a3 	rbit	r3, r3
 8004dca:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8004dcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dce:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8004dd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d101      	bne.n	8004dda <HAL_ADC_ConfigChannel+0x5ce>
    return 32U;
 8004dd6:	2320      	movs	r3, #32
 8004dd8:	e003      	b.n	8004de2 <HAL_ADC_ConfigChannel+0x5d6>
  return __builtin_clz(value);
 8004dda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ddc:	fab3 f383 	clz	r3, r3
 8004de0:	b2db      	uxtb	r3, r3
 8004de2:	3301      	adds	r3, #1
 8004de4:	069b      	lsls	r3, r3, #26
 8004de6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d109      	bne.n	8004e0a <HAL_ADC_ConfigChannel+0x5fe>
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	0e9b      	lsrs	r3, r3, #26
 8004dfc:	3301      	adds	r3, #1
 8004dfe:	f003 031f 	and.w	r3, r3, #31
 8004e02:	2101      	movs	r1, #1
 8004e04:	fa01 f303 	lsl.w	r3, r1, r3
 8004e08:	e017      	b.n	8004e3a <HAL_ADC_ConfigChannel+0x62e>
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e10:	6a3b      	ldr	r3, [r7, #32]
 8004e12:	fa93 f3a3 	rbit	r3, r3
 8004e16:	61fb      	str	r3, [r7, #28]
  return result;
 8004e18:	69fb      	ldr	r3, [r7, #28]
 8004e1a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8004e1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d101      	bne.n	8004e26 <HAL_ADC_ConfigChannel+0x61a>
    return 32U;
 8004e22:	2320      	movs	r3, #32
 8004e24:	e003      	b.n	8004e2e <HAL_ADC_ConfigChannel+0x622>
  return __builtin_clz(value);
 8004e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e28:	fab3 f383 	clz	r3, r3
 8004e2c:	b2db      	uxtb	r3, r3
 8004e2e:	3301      	adds	r3, #1
 8004e30:	f003 031f 	and.w	r3, r3, #31
 8004e34:	2101      	movs	r1, #1
 8004e36:	fa01 f303 	lsl.w	r3, r1, r3
 8004e3a:	ea42 0103 	orr.w	r1, r2, r3
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d10d      	bne.n	8004e66 <HAL_ADC_ConfigChannel+0x65a>
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	0e9b      	lsrs	r3, r3, #26
 8004e50:	3301      	adds	r3, #1
 8004e52:	f003 021f 	and.w	r2, r3, #31
 8004e56:	4613      	mov	r3, r2
 8004e58:	005b      	lsls	r3, r3, #1
 8004e5a:	4413      	add	r3, r2
 8004e5c:	3b1e      	subs	r3, #30
 8004e5e:	051b      	lsls	r3, r3, #20
 8004e60:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004e64:	e01e      	b.n	8004ea4 <HAL_ADC_ConfigChannel+0x698>
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e6c:	697b      	ldr	r3, [r7, #20]
 8004e6e:	fa93 f3a3 	rbit	r3, r3
 8004e72:	613b      	str	r3, [r7, #16]
  return result;
 8004e74:	693b      	ldr	r3, [r7, #16]
 8004e76:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004e78:	69bb      	ldr	r3, [r7, #24]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d104      	bne.n	8004e88 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8004e7e:	2320      	movs	r3, #32
 8004e80:	e006      	b.n	8004e90 <HAL_ADC_ConfigChannel+0x684>
 8004e82:	bf00      	nop
 8004e84:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004e88:	69bb      	ldr	r3, [r7, #24]
 8004e8a:	fab3 f383 	clz	r3, r3
 8004e8e:	b2db      	uxtb	r3, r3
 8004e90:	3301      	adds	r3, #1
 8004e92:	f003 021f 	and.w	r2, r3, #31
 8004e96:	4613      	mov	r3, r2
 8004e98:	005b      	lsls	r3, r3, #1
 8004e9a:	4413      	add	r3, r2
 8004e9c:	3b1e      	subs	r3, #30
 8004e9e:	051b      	lsls	r3, r3, #20
 8004ea0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004ea4:	430b      	orrs	r3, r1
 8004ea6:	683a      	ldr	r2, [r7, #0]
 8004ea8:	6892      	ldr	r2, [r2, #8]
 8004eaa:	4619      	mov	r1, r3
 8004eac:	f7ff f9d1 	bl	8004252 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	681a      	ldr	r2, [r3, #0]
 8004eb4:	4b3d      	ldr	r3, [pc, #244]	@ (8004fac <HAL_ADC_ConfigChannel+0x7a0>)
 8004eb6:	4013      	ands	r3, r2
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d06c      	beq.n	8004f96 <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004ebc:	483c      	ldr	r0, [pc, #240]	@ (8004fb0 <HAL_ADC_ConfigChannel+0x7a4>)
 8004ebe:	f7ff f939 	bl	8004134 <LL_ADC_GetCommonPathInternalCh>
 8004ec2:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4a3a      	ldr	r2, [pc, #232]	@ (8004fb4 <HAL_ADC_ConfigChannel+0x7a8>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d127      	bne.n	8004f20 <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004ed0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004ed4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d121      	bne.n	8004f20 <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4a35      	ldr	r2, [pc, #212]	@ (8004fb8 <HAL_ADC_ConfigChannel+0x7ac>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d157      	bne.n	8004f96 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004ee6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004eea:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004eee:	4619      	mov	r1, r3
 8004ef0:	482f      	ldr	r0, [pc, #188]	@ (8004fb0 <HAL_ADC_ConfigChannel+0x7a4>)
 8004ef2:	f7ff f90c 	bl	800410e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004ef6:	4b31      	ldr	r3, [pc, #196]	@ (8004fbc <HAL_ADC_ConfigChannel+0x7b0>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	099b      	lsrs	r3, r3, #6
 8004efc:	4a30      	ldr	r2, [pc, #192]	@ (8004fc0 <HAL_ADC_ConfigChannel+0x7b4>)
 8004efe:	fba2 2303 	umull	r2, r3, r2, r3
 8004f02:	099b      	lsrs	r3, r3, #6
 8004f04:	1c5a      	adds	r2, r3, #1
 8004f06:	4613      	mov	r3, r2
 8004f08:	005b      	lsls	r3, r3, #1
 8004f0a:	4413      	add	r3, r2
 8004f0c:	009b      	lsls	r3, r3, #2
 8004f0e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004f10:	e002      	b.n	8004f18 <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	3b01      	subs	r3, #1
 8004f16:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d1f9      	bne.n	8004f12 <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004f1e:	e03a      	b.n	8004f96 <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4a27      	ldr	r2, [pc, #156]	@ (8004fc4 <HAL_ADC_ConfigChannel+0x7b8>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d113      	bne.n	8004f52 <HAL_ADC_ConfigChannel+0x746>
 8004f2a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004f2e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d10d      	bne.n	8004f52 <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4a1f      	ldr	r2, [pc, #124]	@ (8004fb8 <HAL_ADC_ConfigChannel+0x7ac>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d12a      	bne.n	8004f96 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004f40:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004f44:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004f48:	4619      	mov	r1, r3
 8004f4a:	4819      	ldr	r0, [pc, #100]	@ (8004fb0 <HAL_ADC_ConfigChannel+0x7a4>)
 8004f4c:	f7ff f8df 	bl	800410e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004f50:	e021      	b.n	8004f96 <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4a1c      	ldr	r2, [pc, #112]	@ (8004fc8 <HAL_ADC_ConfigChannel+0x7bc>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d11c      	bne.n	8004f96 <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004f5c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004f60:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d116      	bne.n	8004f96 <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4a12      	ldr	r2, [pc, #72]	@ (8004fb8 <HAL_ADC_ConfigChannel+0x7ac>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d111      	bne.n	8004f96 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004f72:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004f76:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004f7a:	4619      	mov	r1, r3
 8004f7c:	480c      	ldr	r0, [pc, #48]	@ (8004fb0 <HAL_ADC_ConfigChannel+0x7a4>)
 8004f7e:	f7ff f8c6 	bl	800410e <LL_ADC_SetCommonPathInternalCh>
 8004f82:	e008      	b.n	8004f96 <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f88:	f043 0220 	orr.w	r2, r3, #32
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8004f90:	2301      	movs	r3, #1
 8004f92:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2200      	movs	r2, #0
 8004f9a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8004f9e:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	37d8      	adds	r7, #216	@ 0xd8
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bd80      	pop	{r7, pc}
 8004faa:	bf00      	nop
 8004fac:	80080000 	.word	0x80080000
 8004fb0:	50040300 	.word	0x50040300
 8004fb4:	c7520000 	.word	0xc7520000
 8004fb8:	50040000 	.word	0x50040000
 8004fbc:	2000000c 	.word	0x2000000c
 8004fc0:	053e2d63 	.word	0x053e2d63
 8004fc4:	cb840000 	.word	0xcb840000
 8004fc8:	80000001 	.word	0x80000001

08004fcc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b084      	sub	sp, #16
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4618      	mov	r0, r3
 8004fde:	f7ff f9fd 	bl	80043dc <LL_ADC_IsEnabled>
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d169      	bne.n	80050bc <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	689a      	ldr	r2, [r3, #8]
 8004fee:	4b36      	ldr	r3, [pc, #216]	@ (80050c8 <ADC_Enable+0xfc>)
 8004ff0:	4013      	ands	r3, r2
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d00d      	beq.n	8005012 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ffa:	f043 0210 	orr.w	r2, r3, #16
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005006:	f043 0201 	orr.w	r2, r3, #1
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800500e:	2301      	movs	r3, #1
 8005010:	e055      	b.n	80050be <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4618      	mov	r0, r3
 8005018:	f7ff f9b8 	bl	800438c <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800501c:	482b      	ldr	r0, [pc, #172]	@ (80050cc <ADC_Enable+0x100>)
 800501e:	f7ff f889 	bl	8004134 <LL_ADC_GetCommonPathInternalCh>
 8005022:	4603      	mov	r3, r0
 8005024:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005028:	2b00      	cmp	r3, #0
 800502a:	d013      	beq.n	8005054 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800502c:	4b28      	ldr	r3, [pc, #160]	@ (80050d0 <ADC_Enable+0x104>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	099b      	lsrs	r3, r3, #6
 8005032:	4a28      	ldr	r2, [pc, #160]	@ (80050d4 <ADC_Enable+0x108>)
 8005034:	fba2 2303 	umull	r2, r3, r2, r3
 8005038:	099b      	lsrs	r3, r3, #6
 800503a:	1c5a      	adds	r2, r3, #1
 800503c:	4613      	mov	r3, r2
 800503e:	005b      	lsls	r3, r3, #1
 8005040:	4413      	add	r3, r2
 8005042:	009b      	lsls	r3, r3, #2
 8005044:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8005046:	e002      	b.n	800504e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	3b01      	subs	r3, #1
 800504c:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800504e:	68bb      	ldr	r3, [r7, #8]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d1f9      	bne.n	8005048 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8005054:	f7ff f818 	bl	8004088 <HAL_GetTick>
 8005058:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800505a:	e028      	b.n	80050ae <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4618      	mov	r0, r3
 8005062:	f7ff f9bb 	bl	80043dc <LL_ADC_IsEnabled>
 8005066:	4603      	mov	r3, r0
 8005068:	2b00      	cmp	r3, #0
 800506a:	d104      	bne.n	8005076 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4618      	mov	r0, r3
 8005072:	f7ff f98b 	bl	800438c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005076:	f7ff f807 	bl	8004088 <HAL_GetTick>
 800507a:	4602      	mov	r2, r0
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	1ad3      	subs	r3, r2, r3
 8005080:	2b02      	cmp	r3, #2
 8005082:	d914      	bls.n	80050ae <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f003 0301 	and.w	r3, r3, #1
 800508e:	2b01      	cmp	r3, #1
 8005090:	d00d      	beq.n	80050ae <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005096:	f043 0210 	orr.w	r2, r3, #16
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050a2:	f043 0201 	orr.w	r2, r3, #1
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80050aa:	2301      	movs	r3, #1
 80050ac:	e007      	b.n	80050be <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f003 0301 	and.w	r3, r3, #1
 80050b8:	2b01      	cmp	r3, #1
 80050ba:	d1cf      	bne.n	800505c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80050bc:	2300      	movs	r3, #0
}
 80050be:	4618      	mov	r0, r3
 80050c0:	3710      	adds	r7, #16
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bd80      	pop	{r7, pc}
 80050c6:	bf00      	nop
 80050c8:	8000003f 	.word	0x8000003f
 80050cc:	50040300 	.word	0x50040300
 80050d0:	2000000c 	.word	0x2000000c
 80050d4:	053e2d63 	.word	0x053e2d63

080050d8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b084      	sub	sp, #16
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4618      	mov	r0, r3
 80050e6:	f7ff f98c 	bl	8004402 <LL_ADC_IsDisableOngoing>
 80050ea:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4618      	mov	r0, r3
 80050f2:	f7ff f973 	bl	80043dc <LL_ADC_IsEnabled>
 80050f6:	4603      	mov	r3, r0
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d047      	beq.n	800518c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d144      	bne.n	800518c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	689b      	ldr	r3, [r3, #8]
 8005108:	f003 030d 	and.w	r3, r3, #13
 800510c:	2b01      	cmp	r3, #1
 800510e:	d10c      	bne.n	800512a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4618      	mov	r0, r3
 8005116:	f7ff f94d 	bl	80043b4 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	2203      	movs	r2, #3
 8005120:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8005122:	f7fe ffb1 	bl	8004088 <HAL_GetTick>
 8005126:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005128:	e029      	b.n	800517e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800512e:	f043 0210 	orr.w	r2, r3, #16
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800513a:	f043 0201 	orr.w	r2, r3, #1
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 8005142:	2301      	movs	r3, #1
 8005144:	e023      	b.n	800518e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005146:	f7fe ff9f 	bl	8004088 <HAL_GetTick>
 800514a:	4602      	mov	r2, r0
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	1ad3      	subs	r3, r2, r3
 8005150:	2b02      	cmp	r3, #2
 8005152:	d914      	bls.n	800517e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	689b      	ldr	r3, [r3, #8]
 800515a:	f003 0301 	and.w	r3, r3, #1
 800515e:	2b00      	cmp	r3, #0
 8005160:	d00d      	beq.n	800517e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005166:	f043 0210 	orr.w	r2, r3, #16
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005172:	f043 0201 	orr.w	r2, r3, #1
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800517a:	2301      	movs	r3, #1
 800517c:	e007      	b.n	800518e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	689b      	ldr	r3, [r3, #8]
 8005184:	f003 0301 	and.w	r3, r3, #1
 8005188:	2b00      	cmp	r3, #0
 800518a:	d1dc      	bne.n	8005146 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800518c:	2300      	movs	r3, #0
}
 800518e:	4618      	mov	r0, r3
 8005190:	3710      	adds	r7, #16
 8005192:	46bd      	mov	sp, r7
 8005194:	bd80      	pop	{r7, pc}

08005196 <LL_ADC_StartCalibration>:
{
 8005196:	b480      	push	{r7}
 8005198:	b083      	sub	sp, #12
 800519a:	af00      	add	r7, sp, #0
 800519c:	6078      	str	r0, [r7, #4]
 800519e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	689b      	ldr	r3, [r3, #8]
 80051a4:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 80051a8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80051ac:	683a      	ldr	r2, [r7, #0]
 80051ae:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80051b2:	4313      	orrs	r3, r2
 80051b4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	609a      	str	r2, [r3, #8]
}
 80051bc:	bf00      	nop
 80051be:	370c      	adds	r7, #12
 80051c0:	46bd      	mov	sp, r7
 80051c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c6:	4770      	bx	lr

080051c8 <LL_ADC_IsCalibrationOnGoing>:
{
 80051c8:	b480      	push	{r7}
 80051ca:	b083      	sub	sp, #12
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	689b      	ldr	r3, [r3, #8]
 80051d4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80051d8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80051dc:	d101      	bne.n	80051e2 <LL_ADC_IsCalibrationOnGoing+0x1a>
 80051de:	2301      	movs	r3, #1
 80051e0:	e000      	b.n	80051e4 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80051e2:	2300      	movs	r3, #0
}
 80051e4:	4618      	mov	r0, r3
 80051e6:	370c      	adds	r7, #12
 80051e8:	46bd      	mov	sp, r7
 80051ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ee:	4770      	bx	lr

080051f0 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b084      	sub	sp, #16
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
 80051f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80051fa:	2300      	movs	r3, #0
 80051fc:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005204:	2b01      	cmp	r3, #1
 8005206:	d101      	bne.n	800520c <HAL_ADCEx_Calibration_Start+0x1c>
 8005208:	2302      	movs	r3, #2
 800520a:	e04d      	b.n	80052a8 <HAL_ADCEx_Calibration_Start+0xb8>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2201      	movs	r2, #1
 8005210:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8005214:	6878      	ldr	r0, [r7, #4]
 8005216:	f7ff ff5f 	bl	80050d8 <ADC_Disable>
 800521a:	4603      	mov	r3, r0
 800521c:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800521e:	7bfb      	ldrb	r3, [r7, #15]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d136      	bne.n	8005292 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005228:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800522c:	f023 0302 	bic.w	r3, r3, #2
 8005230:	f043 0202 	orr.w	r2, r3, #2
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	655a      	str	r2, [r3, #84]	@ 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	6839      	ldr	r1, [r7, #0]
 800523e:	4618      	mov	r0, r3
 8005240:	f7ff ffa9 	bl	8005196 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005244:	e014      	b.n	8005270 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	3301      	adds	r3, #1
 800524a:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	f5b3 2f91 	cmp.w	r3, #296960	@ 0x48800
 8005252:	d30d      	bcc.n	8005270 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005258:	f023 0312 	bic.w	r3, r3, #18
 800525c:	f043 0210 	orr.w	r2, r3, #16
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2200      	movs	r2, #0
 8005268:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_ERROR;
 800526c:	2301      	movs	r3, #1
 800526e:	e01b      	b.n	80052a8 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4618      	mov	r0, r3
 8005276:	f7ff ffa7 	bl	80051c8 <LL_ADC_IsCalibrationOnGoing>
 800527a:	4603      	mov	r3, r0
 800527c:	2b00      	cmp	r3, #0
 800527e:	d1e2      	bne.n	8005246 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005284:	f023 0303 	bic.w	r3, r3, #3
 8005288:	f043 0201 	orr.w	r2, r3, #1
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	655a      	str	r2, [r3, #84]	@ 0x54
 8005290:	e005      	b.n	800529e <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005296:	f043 0210 	orr.w	r2, r3, #16
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2200      	movs	r2, #0
 80052a2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80052a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80052a8:	4618      	mov	r0, r3
 80052aa:	3710      	adds	r7, #16
 80052ac:	46bd      	mov	sp, r7
 80052ae:	bd80      	pop	{r7, pc}

080052b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80052b0:	b480      	push	{r7}
 80052b2:	b085      	sub	sp, #20
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	f003 0307 	and.w	r3, r3, #7
 80052be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80052c0:	4b0c      	ldr	r3, [pc, #48]	@ (80052f4 <__NVIC_SetPriorityGrouping+0x44>)
 80052c2:	68db      	ldr	r3, [r3, #12]
 80052c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80052c6:	68ba      	ldr	r2, [r7, #8]
 80052c8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80052cc:	4013      	ands	r3, r2
 80052ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80052d8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80052dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80052e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80052e2:	4a04      	ldr	r2, [pc, #16]	@ (80052f4 <__NVIC_SetPriorityGrouping+0x44>)
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	60d3      	str	r3, [r2, #12]
}
 80052e8:	bf00      	nop
 80052ea:	3714      	adds	r7, #20
 80052ec:	46bd      	mov	sp, r7
 80052ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f2:	4770      	bx	lr
 80052f4:	e000ed00 	.word	0xe000ed00

080052f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80052f8:	b480      	push	{r7}
 80052fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80052fc:	4b04      	ldr	r3, [pc, #16]	@ (8005310 <__NVIC_GetPriorityGrouping+0x18>)
 80052fe:	68db      	ldr	r3, [r3, #12]
 8005300:	0a1b      	lsrs	r3, r3, #8
 8005302:	f003 0307 	and.w	r3, r3, #7
}
 8005306:	4618      	mov	r0, r3
 8005308:	46bd      	mov	sp, r7
 800530a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530e:	4770      	bx	lr
 8005310:	e000ed00 	.word	0xe000ed00

08005314 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005314:	b480      	push	{r7}
 8005316:	b083      	sub	sp, #12
 8005318:	af00      	add	r7, sp, #0
 800531a:	4603      	mov	r3, r0
 800531c:	6039      	str	r1, [r7, #0]
 800531e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005320:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005324:	2b00      	cmp	r3, #0
 8005326:	db0a      	blt.n	800533e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	b2da      	uxtb	r2, r3
 800532c:	490c      	ldr	r1, [pc, #48]	@ (8005360 <__NVIC_SetPriority+0x4c>)
 800532e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005332:	0112      	lsls	r2, r2, #4
 8005334:	b2d2      	uxtb	r2, r2
 8005336:	440b      	add	r3, r1
 8005338:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800533c:	e00a      	b.n	8005354 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	b2da      	uxtb	r2, r3
 8005342:	4908      	ldr	r1, [pc, #32]	@ (8005364 <__NVIC_SetPriority+0x50>)
 8005344:	79fb      	ldrb	r3, [r7, #7]
 8005346:	f003 030f 	and.w	r3, r3, #15
 800534a:	3b04      	subs	r3, #4
 800534c:	0112      	lsls	r2, r2, #4
 800534e:	b2d2      	uxtb	r2, r2
 8005350:	440b      	add	r3, r1
 8005352:	761a      	strb	r2, [r3, #24]
}
 8005354:	bf00      	nop
 8005356:	370c      	adds	r7, #12
 8005358:	46bd      	mov	sp, r7
 800535a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535e:	4770      	bx	lr
 8005360:	e000e100 	.word	0xe000e100
 8005364:	e000ed00 	.word	0xe000ed00

08005368 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005368:	b480      	push	{r7}
 800536a:	b089      	sub	sp, #36	@ 0x24
 800536c:	af00      	add	r7, sp, #0
 800536e:	60f8      	str	r0, [r7, #12]
 8005370:	60b9      	str	r1, [r7, #8]
 8005372:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	f003 0307 	and.w	r3, r3, #7
 800537a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800537c:	69fb      	ldr	r3, [r7, #28]
 800537e:	f1c3 0307 	rsb	r3, r3, #7
 8005382:	2b04      	cmp	r3, #4
 8005384:	bf28      	it	cs
 8005386:	2304      	movcs	r3, #4
 8005388:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800538a:	69fb      	ldr	r3, [r7, #28]
 800538c:	3304      	adds	r3, #4
 800538e:	2b06      	cmp	r3, #6
 8005390:	d902      	bls.n	8005398 <NVIC_EncodePriority+0x30>
 8005392:	69fb      	ldr	r3, [r7, #28]
 8005394:	3b03      	subs	r3, #3
 8005396:	e000      	b.n	800539a <NVIC_EncodePriority+0x32>
 8005398:	2300      	movs	r3, #0
 800539a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800539c:	f04f 32ff 	mov.w	r2, #4294967295
 80053a0:	69bb      	ldr	r3, [r7, #24]
 80053a2:	fa02 f303 	lsl.w	r3, r2, r3
 80053a6:	43da      	mvns	r2, r3
 80053a8:	68bb      	ldr	r3, [r7, #8]
 80053aa:	401a      	ands	r2, r3
 80053ac:	697b      	ldr	r3, [r7, #20]
 80053ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80053b0:	f04f 31ff 	mov.w	r1, #4294967295
 80053b4:	697b      	ldr	r3, [r7, #20]
 80053b6:	fa01 f303 	lsl.w	r3, r1, r3
 80053ba:	43d9      	mvns	r1, r3
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80053c0:	4313      	orrs	r3, r2
         );
}
 80053c2:	4618      	mov	r0, r3
 80053c4:	3724      	adds	r7, #36	@ 0x24
 80053c6:	46bd      	mov	sp, r7
 80053c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053cc:	4770      	bx	lr
	...

080053d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b082      	sub	sp, #8
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	3b01      	subs	r3, #1
 80053dc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80053e0:	d301      	bcc.n	80053e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80053e2:	2301      	movs	r3, #1
 80053e4:	e00f      	b.n	8005406 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80053e6:	4a0a      	ldr	r2, [pc, #40]	@ (8005410 <SysTick_Config+0x40>)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	3b01      	subs	r3, #1
 80053ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80053ee:	210f      	movs	r1, #15
 80053f0:	f04f 30ff 	mov.w	r0, #4294967295
 80053f4:	f7ff ff8e 	bl	8005314 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80053f8:	4b05      	ldr	r3, [pc, #20]	@ (8005410 <SysTick_Config+0x40>)
 80053fa:	2200      	movs	r2, #0
 80053fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80053fe:	4b04      	ldr	r3, [pc, #16]	@ (8005410 <SysTick_Config+0x40>)
 8005400:	2207      	movs	r2, #7
 8005402:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005404:	2300      	movs	r3, #0
}
 8005406:	4618      	mov	r0, r3
 8005408:	3708      	adds	r7, #8
 800540a:	46bd      	mov	sp, r7
 800540c:	bd80      	pop	{r7, pc}
 800540e:	bf00      	nop
 8005410:	e000e010 	.word	0xe000e010

08005414 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b082      	sub	sp, #8
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800541c:	6878      	ldr	r0, [r7, #4]
 800541e:	f7ff ff47 	bl	80052b0 <__NVIC_SetPriorityGrouping>
}
 8005422:	bf00      	nop
 8005424:	3708      	adds	r7, #8
 8005426:	46bd      	mov	sp, r7
 8005428:	bd80      	pop	{r7, pc}

0800542a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800542a:	b580      	push	{r7, lr}
 800542c:	b086      	sub	sp, #24
 800542e:	af00      	add	r7, sp, #0
 8005430:	4603      	mov	r3, r0
 8005432:	60b9      	str	r1, [r7, #8]
 8005434:	607a      	str	r2, [r7, #4]
 8005436:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005438:	2300      	movs	r3, #0
 800543a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800543c:	f7ff ff5c 	bl	80052f8 <__NVIC_GetPriorityGrouping>
 8005440:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005442:	687a      	ldr	r2, [r7, #4]
 8005444:	68b9      	ldr	r1, [r7, #8]
 8005446:	6978      	ldr	r0, [r7, #20]
 8005448:	f7ff ff8e 	bl	8005368 <NVIC_EncodePriority>
 800544c:	4602      	mov	r2, r0
 800544e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005452:	4611      	mov	r1, r2
 8005454:	4618      	mov	r0, r3
 8005456:	f7ff ff5d 	bl	8005314 <__NVIC_SetPriority>
}
 800545a:	bf00      	nop
 800545c:	3718      	adds	r7, #24
 800545e:	46bd      	mov	sp, r7
 8005460:	bd80      	pop	{r7, pc}

08005462 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005462:	b580      	push	{r7, lr}
 8005464:	b082      	sub	sp, #8
 8005466:	af00      	add	r7, sp, #0
 8005468:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800546a:	6878      	ldr	r0, [r7, #4]
 800546c:	f7ff ffb0 	bl	80053d0 <SysTick_Config>
 8005470:	4603      	mov	r3, r0
}
 8005472:	4618      	mov	r0, r3
 8005474:	3708      	adds	r7, #8
 8005476:	46bd      	mov	sp, r7
 8005478:	bd80      	pop	{r7, pc}
	...

0800547c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800547c:	b480      	push	{r7}
 800547e:	b087      	sub	sp, #28
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
 8005484:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005486:	2300      	movs	r3, #0
 8005488:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800548a:	e148      	b.n	800571e <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	681a      	ldr	r2, [r3, #0]
 8005490:	2101      	movs	r1, #1
 8005492:	697b      	ldr	r3, [r7, #20]
 8005494:	fa01 f303 	lsl.w	r3, r1, r3
 8005498:	4013      	ands	r3, r2
 800549a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	f000 813a 	beq.w	8005718 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	685b      	ldr	r3, [r3, #4]
 80054a8:	f003 0303 	and.w	r3, r3, #3
 80054ac:	2b01      	cmp	r3, #1
 80054ae:	d005      	beq.n	80054bc <HAL_GPIO_Init+0x40>
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	685b      	ldr	r3, [r3, #4]
 80054b4:	f003 0303 	and.w	r3, r3, #3
 80054b8:	2b02      	cmp	r3, #2
 80054ba:	d130      	bne.n	800551e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	689b      	ldr	r3, [r3, #8]
 80054c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	005b      	lsls	r3, r3, #1
 80054c6:	2203      	movs	r2, #3
 80054c8:	fa02 f303 	lsl.w	r3, r2, r3
 80054cc:	43db      	mvns	r3, r3
 80054ce:	693a      	ldr	r2, [r7, #16]
 80054d0:	4013      	ands	r3, r2
 80054d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	68da      	ldr	r2, [r3, #12]
 80054d8:	697b      	ldr	r3, [r7, #20]
 80054da:	005b      	lsls	r3, r3, #1
 80054dc:	fa02 f303 	lsl.w	r3, r2, r3
 80054e0:	693a      	ldr	r2, [r7, #16]
 80054e2:	4313      	orrs	r3, r2
 80054e4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	693a      	ldr	r2, [r7, #16]
 80054ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	685b      	ldr	r3, [r3, #4]
 80054f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80054f2:	2201      	movs	r2, #1
 80054f4:	697b      	ldr	r3, [r7, #20]
 80054f6:	fa02 f303 	lsl.w	r3, r2, r3
 80054fa:	43db      	mvns	r3, r3
 80054fc:	693a      	ldr	r2, [r7, #16]
 80054fe:	4013      	ands	r3, r2
 8005500:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	091b      	lsrs	r3, r3, #4
 8005508:	f003 0201 	and.w	r2, r3, #1
 800550c:	697b      	ldr	r3, [r7, #20]
 800550e:	fa02 f303 	lsl.w	r3, r2, r3
 8005512:	693a      	ldr	r2, [r7, #16]
 8005514:	4313      	orrs	r3, r2
 8005516:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	693a      	ldr	r2, [r7, #16]
 800551c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	685b      	ldr	r3, [r3, #4]
 8005522:	f003 0303 	and.w	r3, r3, #3
 8005526:	2b03      	cmp	r3, #3
 8005528:	d017      	beq.n	800555a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	68db      	ldr	r3, [r3, #12]
 800552e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005530:	697b      	ldr	r3, [r7, #20]
 8005532:	005b      	lsls	r3, r3, #1
 8005534:	2203      	movs	r2, #3
 8005536:	fa02 f303 	lsl.w	r3, r2, r3
 800553a:	43db      	mvns	r3, r3
 800553c:	693a      	ldr	r2, [r7, #16]
 800553e:	4013      	ands	r3, r2
 8005540:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	689a      	ldr	r2, [r3, #8]
 8005546:	697b      	ldr	r3, [r7, #20]
 8005548:	005b      	lsls	r3, r3, #1
 800554a:	fa02 f303 	lsl.w	r3, r2, r3
 800554e:	693a      	ldr	r2, [r7, #16]
 8005550:	4313      	orrs	r3, r2
 8005552:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	693a      	ldr	r2, [r7, #16]
 8005558:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	685b      	ldr	r3, [r3, #4]
 800555e:	f003 0303 	and.w	r3, r3, #3
 8005562:	2b02      	cmp	r3, #2
 8005564:	d123      	bne.n	80055ae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005566:	697b      	ldr	r3, [r7, #20]
 8005568:	08da      	lsrs	r2, r3, #3
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	3208      	adds	r2, #8
 800556e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005572:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005574:	697b      	ldr	r3, [r7, #20]
 8005576:	f003 0307 	and.w	r3, r3, #7
 800557a:	009b      	lsls	r3, r3, #2
 800557c:	220f      	movs	r2, #15
 800557e:	fa02 f303 	lsl.w	r3, r2, r3
 8005582:	43db      	mvns	r3, r3
 8005584:	693a      	ldr	r2, [r7, #16]
 8005586:	4013      	ands	r3, r2
 8005588:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	691a      	ldr	r2, [r3, #16]
 800558e:	697b      	ldr	r3, [r7, #20]
 8005590:	f003 0307 	and.w	r3, r3, #7
 8005594:	009b      	lsls	r3, r3, #2
 8005596:	fa02 f303 	lsl.w	r3, r2, r3
 800559a:	693a      	ldr	r2, [r7, #16]
 800559c:	4313      	orrs	r3, r2
 800559e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80055a0:	697b      	ldr	r3, [r7, #20]
 80055a2:	08da      	lsrs	r2, r3, #3
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	3208      	adds	r2, #8
 80055a8:	6939      	ldr	r1, [r7, #16]
 80055aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80055b4:	697b      	ldr	r3, [r7, #20]
 80055b6:	005b      	lsls	r3, r3, #1
 80055b8:	2203      	movs	r2, #3
 80055ba:	fa02 f303 	lsl.w	r3, r2, r3
 80055be:	43db      	mvns	r3, r3
 80055c0:	693a      	ldr	r2, [r7, #16]
 80055c2:	4013      	ands	r3, r2
 80055c4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	685b      	ldr	r3, [r3, #4]
 80055ca:	f003 0203 	and.w	r2, r3, #3
 80055ce:	697b      	ldr	r3, [r7, #20]
 80055d0:	005b      	lsls	r3, r3, #1
 80055d2:	fa02 f303 	lsl.w	r3, r2, r3
 80055d6:	693a      	ldr	r2, [r7, #16]
 80055d8:	4313      	orrs	r3, r2
 80055da:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	693a      	ldr	r2, [r7, #16]
 80055e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	685b      	ldr	r3, [r3, #4]
 80055e6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	f000 8094 	beq.w	8005718 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80055f0:	4b52      	ldr	r3, [pc, #328]	@ (800573c <HAL_GPIO_Init+0x2c0>)
 80055f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80055f4:	4a51      	ldr	r2, [pc, #324]	@ (800573c <HAL_GPIO_Init+0x2c0>)
 80055f6:	f043 0301 	orr.w	r3, r3, #1
 80055fa:	6613      	str	r3, [r2, #96]	@ 0x60
 80055fc:	4b4f      	ldr	r3, [pc, #316]	@ (800573c <HAL_GPIO_Init+0x2c0>)
 80055fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005600:	f003 0301 	and.w	r3, r3, #1
 8005604:	60bb      	str	r3, [r7, #8]
 8005606:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005608:	4a4d      	ldr	r2, [pc, #308]	@ (8005740 <HAL_GPIO_Init+0x2c4>)
 800560a:	697b      	ldr	r3, [r7, #20]
 800560c:	089b      	lsrs	r3, r3, #2
 800560e:	3302      	adds	r3, #2
 8005610:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005614:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005616:	697b      	ldr	r3, [r7, #20]
 8005618:	f003 0303 	and.w	r3, r3, #3
 800561c:	009b      	lsls	r3, r3, #2
 800561e:	220f      	movs	r2, #15
 8005620:	fa02 f303 	lsl.w	r3, r2, r3
 8005624:	43db      	mvns	r3, r3
 8005626:	693a      	ldr	r2, [r7, #16]
 8005628:	4013      	ands	r3, r2
 800562a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8005632:	d00d      	beq.n	8005650 <HAL_GPIO_Init+0x1d4>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	4a43      	ldr	r2, [pc, #268]	@ (8005744 <HAL_GPIO_Init+0x2c8>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d007      	beq.n	800564c <HAL_GPIO_Init+0x1d0>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	4a42      	ldr	r2, [pc, #264]	@ (8005748 <HAL_GPIO_Init+0x2cc>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d101      	bne.n	8005648 <HAL_GPIO_Init+0x1cc>
 8005644:	2302      	movs	r3, #2
 8005646:	e004      	b.n	8005652 <HAL_GPIO_Init+0x1d6>
 8005648:	2307      	movs	r3, #7
 800564a:	e002      	b.n	8005652 <HAL_GPIO_Init+0x1d6>
 800564c:	2301      	movs	r3, #1
 800564e:	e000      	b.n	8005652 <HAL_GPIO_Init+0x1d6>
 8005650:	2300      	movs	r3, #0
 8005652:	697a      	ldr	r2, [r7, #20]
 8005654:	f002 0203 	and.w	r2, r2, #3
 8005658:	0092      	lsls	r2, r2, #2
 800565a:	4093      	lsls	r3, r2
 800565c:	693a      	ldr	r2, [r7, #16]
 800565e:	4313      	orrs	r3, r2
 8005660:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005662:	4937      	ldr	r1, [pc, #220]	@ (8005740 <HAL_GPIO_Init+0x2c4>)
 8005664:	697b      	ldr	r3, [r7, #20]
 8005666:	089b      	lsrs	r3, r3, #2
 8005668:	3302      	adds	r3, #2
 800566a:	693a      	ldr	r2, [r7, #16]
 800566c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005670:	4b36      	ldr	r3, [pc, #216]	@ (800574c <HAL_GPIO_Init+0x2d0>)
 8005672:	689b      	ldr	r3, [r3, #8]
 8005674:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	43db      	mvns	r3, r3
 800567a:	693a      	ldr	r2, [r7, #16]
 800567c:	4013      	ands	r3, r2
 800567e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	685b      	ldr	r3, [r3, #4]
 8005684:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005688:	2b00      	cmp	r3, #0
 800568a:	d003      	beq.n	8005694 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 800568c:	693a      	ldr	r2, [r7, #16]
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	4313      	orrs	r3, r2
 8005692:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005694:	4a2d      	ldr	r2, [pc, #180]	@ (800574c <HAL_GPIO_Init+0x2d0>)
 8005696:	693b      	ldr	r3, [r7, #16]
 8005698:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800569a:	4b2c      	ldr	r3, [pc, #176]	@ (800574c <HAL_GPIO_Init+0x2d0>)
 800569c:	68db      	ldr	r3, [r3, #12]
 800569e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	43db      	mvns	r3, r3
 80056a4:	693a      	ldr	r2, [r7, #16]
 80056a6:	4013      	ands	r3, r2
 80056a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	685b      	ldr	r3, [r3, #4]
 80056ae:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d003      	beq.n	80056be <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80056b6:	693a      	ldr	r2, [r7, #16]
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	4313      	orrs	r3, r2
 80056bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80056be:	4a23      	ldr	r2, [pc, #140]	@ (800574c <HAL_GPIO_Init+0x2d0>)
 80056c0:	693b      	ldr	r3, [r7, #16]
 80056c2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80056c4:	4b21      	ldr	r3, [pc, #132]	@ (800574c <HAL_GPIO_Init+0x2d0>)
 80056c6:	685b      	ldr	r3, [r3, #4]
 80056c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	43db      	mvns	r3, r3
 80056ce:	693a      	ldr	r2, [r7, #16]
 80056d0:	4013      	ands	r3, r2
 80056d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	685b      	ldr	r3, [r3, #4]
 80056d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d003      	beq.n	80056e8 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80056e0:	693a      	ldr	r2, [r7, #16]
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	4313      	orrs	r3, r2
 80056e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80056e8:	4a18      	ldr	r2, [pc, #96]	@ (800574c <HAL_GPIO_Init+0x2d0>)
 80056ea:	693b      	ldr	r3, [r7, #16]
 80056ec:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80056ee:	4b17      	ldr	r3, [pc, #92]	@ (800574c <HAL_GPIO_Init+0x2d0>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	43db      	mvns	r3, r3
 80056f8:	693a      	ldr	r2, [r7, #16]
 80056fa:	4013      	ands	r3, r2
 80056fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	685b      	ldr	r3, [r3, #4]
 8005702:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005706:	2b00      	cmp	r3, #0
 8005708:	d003      	beq.n	8005712 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800570a:	693a      	ldr	r2, [r7, #16]
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	4313      	orrs	r3, r2
 8005710:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005712:	4a0e      	ldr	r2, [pc, #56]	@ (800574c <HAL_GPIO_Init+0x2d0>)
 8005714:	693b      	ldr	r3, [r7, #16]
 8005716:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005718:	697b      	ldr	r3, [r7, #20]
 800571a:	3301      	adds	r3, #1
 800571c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	681a      	ldr	r2, [r3, #0]
 8005722:	697b      	ldr	r3, [r7, #20]
 8005724:	fa22 f303 	lsr.w	r3, r2, r3
 8005728:	2b00      	cmp	r3, #0
 800572a:	f47f aeaf 	bne.w	800548c <HAL_GPIO_Init+0x10>
  }
}
 800572e:	bf00      	nop
 8005730:	bf00      	nop
 8005732:	371c      	adds	r7, #28
 8005734:	46bd      	mov	sp, r7
 8005736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573a:	4770      	bx	lr
 800573c:	40021000 	.word	0x40021000
 8005740:	40010000 	.word	0x40010000
 8005744:	48000400 	.word	0x48000400
 8005748:	48000800 	.word	0x48000800
 800574c:	40010400 	.word	0x40010400

08005750 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005750:	b480      	push	{r7}
 8005752:	b085      	sub	sp, #20
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
 8005758:	460b      	mov	r3, r1
 800575a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	691a      	ldr	r2, [r3, #16]
 8005760:	887b      	ldrh	r3, [r7, #2]
 8005762:	4013      	ands	r3, r2
 8005764:	2b00      	cmp	r3, #0
 8005766:	d002      	beq.n	800576e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005768:	2301      	movs	r3, #1
 800576a:	73fb      	strb	r3, [r7, #15]
 800576c:	e001      	b.n	8005772 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800576e:	2300      	movs	r3, #0
 8005770:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005772:	7bfb      	ldrb	r3, [r7, #15]
}
 8005774:	4618      	mov	r0, r3
 8005776:	3714      	adds	r7, #20
 8005778:	46bd      	mov	sp, r7
 800577a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577e:	4770      	bx	lr

08005780 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005780:	b480      	push	{r7}
 8005782:	b083      	sub	sp, #12
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
 8005788:	460b      	mov	r3, r1
 800578a:	807b      	strh	r3, [r7, #2]
 800578c:	4613      	mov	r3, r2
 800578e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005790:	787b      	ldrb	r3, [r7, #1]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d003      	beq.n	800579e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005796:	887a      	ldrh	r2, [r7, #2]
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800579c:	e002      	b.n	80057a4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800579e:	887a      	ldrh	r2, [r7, #2]
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80057a4:	bf00      	nop
 80057a6:	370c      	adds	r7, #12
 80057a8:	46bd      	mov	sp, r7
 80057aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ae:	4770      	bx	lr

080057b0 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80057b0:	b480      	push	{r7}
 80057b2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80057b4:	4b05      	ldr	r3, [pc, #20]	@ (80057cc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4a04      	ldr	r2, [pc, #16]	@ (80057cc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80057ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80057be:	6013      	str	r3, [r2, #0]
}
 80057c0:	bf00      	nop
 80057c2:	46bd      	mov	sp, r7
 80057c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c8:	4770      	bx	lr
 80057ca:	bf00      	nop
 80057cc:	40007000 	.word	0x40007000

080057d0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80057d0:	b480      	push	{r7}
 80057d2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80057d4:	4b04      	ldr	r3, [pc, #16]	@ (80057e8 <HAL_PWREx_GetVoltageRange+0x18>)
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80057dc:	4618      	mov	r0, r3
 80057de:	46bd      	mov	sp, r7
 80057e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e4:	4770      	bx	lr
 80057e6:	bf00      	nop
 80057e8:	40007000 	.word	0x40007000

080057ec <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80057ec:	b480      	push	{r7}
 80057ee:	b085      	sub	sp, #20
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80057fa:	d130      	bne.n	800585e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80057fc:	4b23      	ldr	r3, [pc, #140]	@ (800588c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005804:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005808:	d038      	beq.n	800587c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800580a:	4b20      	ldr	r3, [pc, #128]	@ (800588c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005812:	4a1e      	ldr	r2, [pc, #120]	@ (800588c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005814:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005818:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800581a:	4b1d      	ldr	r3, [pc, #116]	@ (8005890 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	2232      	movs	r2, #50	@ 0x32
 8005820:	fb02 f303 	mul.w	r3, r2, r3
 8005824:	4a1b      	ldr	r2, [pc, #108]	@ (8005894 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8005826:	fba2 2303 	umull	r2, r3, r2, r3
 800582a:	0c9b      	lsrs	r3, r3, #18
 800582c:	3301      	adds	r3, #1
 800582e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005830:	e002      	b.n	8005838 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	3b01      	subs	r3, #1
 8005836:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005838:	4b14      	ldr	r3, [pc, #80]	@ (800588c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800583a:	695b      	ldr	r3, [r3, #20]
 800583c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005840:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005844:	d102      	bne.n	800584c <HAL_PWREx_ControlVoltageScaling+0x60>
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d1f2      	bne.n	8005832 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800584c:	4b0f      	ldr	r3, [pc, #60]	@ (800588c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800584e:	695b      	ldr	r3, [r3, #20]
 8005850:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005854:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005858:	d110      	bne.n	800587c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800585a:	2303      	movs	r3, #3
 800585c:	e00f      	b.n	800587e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800585e:	4b0b      	ldr	r3, [pc, #44]	@ (800588c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005866:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800586a:	d007      	beq.n	800587c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800586c:	4b07      	ldr	r3, [pc, #28]	@ (800588c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005874:	4a05      	ldr	r2, [pc, #20]	@ (800588c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005876:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800587a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800587c:	2300      	movs	r3, #0
}
 800587e:	4618      	mov	r0, r3
 8005880:	3714      	adds	r7, #20
 8005882:	46bd      	mov	sp, r7
 8005884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005888:	4770      	bx	lr
 800588a:	bf00      	nop
 800588c:	40007000 	.word	0x40007000
 8005890:	2000000c 	.word	0x2000000c
 8005894:	431bde83 	.word	0x431bde83

08005898 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b088      	sub	sp, #32
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d102      	bne.n	80058ac <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80058a6:	2301      	movs	r3, #1
 80058a8:	f000 bc02 	b.w	80060b0 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80058ac:	4b96      	ldr	r3, [pc, #600]	@ (8005b08 <HAL_RCC_OscConfig+0x270>)
 80058ae:	689b      	ldr	r3, [r3, #8]
 80058b0:	f003 030c 	and.w	r3, r3, #12
 80058b4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80058b6:	4b94      	ldr	r3, [pc, #592]	@ (8005b08 <HAL_RCC_OscConfig+0x270>)
 80058b8:	68db      	ldr	r3, [r3, #12]
 80058ba:	f003 0303 	and.w	r3, r3, #3
 80058be:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f003 0310 	and.w	r3, r3, #16
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	f000 80e4 	beq.w	8005a96 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80058ce:	69bb      	ldr	r3, [r7, #24]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d007      	beq.n	80058e4 <HAL_RCC_OscConfig+0x4c>
 80058d4:	69bb      	ldr	r3, [r7, #24]
 80058d6:	2b0c      	cmp	r3, #12
 80058d8:	f040 808b 	bne.w	80059f2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80058dc:	697b      	ldr	r3, [r7, #20]
 80058de:	2b01      	cmp	r3, #1
 80058e0:	f040 8087 	bne.w	80059f2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80058e4:	4b88      	ldr	r3, [pc, #544]	@ (8005b08 <HAL_RCC_OscConfig+0x270>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f003 0302 	and.w	r3, r3, #2
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d005      	beq.n	80058fc <HAL_RCC_OscConfig+0x64>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	699b      	ldr	r3, [r3, #24]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d101      	bne.n	80058fc <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80058f8:	2301      	movs	r3, #1
 80058fa:	e3d9      	b.n	80060b0 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6a1a      	ldr	r2, [r3, #32]
 8005900:	4b81      	ldr	r3, [pc, #516]	@ (8005b08 <HAL_RCC_OscConfig+0x270>)
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f003 0308 	and.w	r3, r3, #8
 8005908:	2b00      	cmp	r3, #0
 800590a:	d004      	beq.n	8005916 <HAL_RCC_OscConfig+0x7e>
 800590c:	4b7e      	ldr	r3, [pc, #504]	@ (8005b08 <HAL_RCC_OscConfig+0x270>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005914:	e005      	b.n	8005922 <HAL_RCC_OscConfig+0x8a>
 8005916:	4b7c      	ldr	r3, [pc, #496]	@ (8005b08 <HAL_RCC_OscConfig+0x270>)
 8005918:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800591c:	091b      	lsrs	r3, r3, #4
 800591e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005922:	4293      	cmp	r3, r2
 8005924:	d223      	bcs.n	800596e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6a1b      	ldr	r3, [r3, #32]
 800592a:	4618      	mov	r0, r3
 800592c:	f000 fd54 	bl	80063d8 <RCC_SetFlashLatencyFromMSIRange>
 8005930:	4603      	mov	r3, r0
 8005932:	2b00      	cmp	r3, #0
 8005934:	d001      	beq.n	800593a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8005936:	2301      	movs	r3, #1
 8005938:	e3ba      	b.n	80060b0 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800593a:	4b73      	ldr	r3, [pc, #460]	@ (8005b08 <HAL_RCC_OscConfig+0x270>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	4a72      	ldr	r2, [pc, #456]	@ (8005b08 <HAL_RCC_OscConfig+0x270>)
 8005940:	f043 0308 	orr.w	r3, r3, #8
 8005944:	6013      	str	r3, [r2, #0]
 8005946:	4b70      	ldr	r3, [pc, #448]	@ (8005b08 <HAL_RCC_OscConfig+0x270>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6a1b      	ldr	r3, [r3, #32]
 8005952:	496d      	ldr	r1, [pc, #436]	@ (8005b08 <HAL_RCC_OscConfig+0x270>)
 8005954:	4313      	orrs	r3, r2
 8005956:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005958:	4b6b      	ldr	r3, [pc, #428]	@ (8005b08 <HAL_RCC_OscConfig+0x270>)
 800595a:	685b      	ldr	r3, [r3, #4]
 800595c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	69db      	ldr	r3, [r3, #28]
 8005964:	021b      	lsls	r3, r3, #8
 8005966:	4968      	ldr	r1, [pc, #416]	@ (8005b08 <HAL_RCC_OscConfig+0x270>)
 8005968:	4313      	orrs	r3, r2
 800596a:	604b      	str	r3, [r1, #4]
 800596c:	e025      	b.n	80059ba <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800596e:	4b66      	ldr	r3, [pc, #408]	@ (8005b08 <HAL_RCC_OscConfig+0x270>)
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4a65      	ldr	r2, [pc, #404]	@ (8005b08 <HAL_RCC_OscConfig+0x270>)
 8005974:	f043 0308 	orr.w	r3, r3, #8
 8005978:	6013      	str	r3, [r2, #0]
 800597a:	4b63      	ldr	r3, [pc, #396]	@ (8005b08 <HAL_RCC_OscConfig+0x270>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6a1b      	ldr	r3, [r3, #32]
 8005986:	4960      	ldr	r1, [pc, #384]	@ (8005b08 <HAL_RCC_OscConfig+0x270>)
 8005988:	4313      	orrs	r3, r2
 800598a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800598c:	4b5e      	ldr	r3, [pc, #376]	@ (8005b08 <HAL_RCC_OscConfig+0x270>)
 800598e:	685b      	ldr	r3, [r3, #4]
 8005990:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	69db      	ldr	r3, [r3, #28]
 8005998:	021b      	lsls	r3, r3, #8
 800599a:	495b      	ldr	r1, [pc, #364]	@ (8005b08 <HAL_RCC_OscConfig+0x270>)
 800599c:	4313      	orrs	r3, r2
 800599e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80059a0:	69bb      	ldr	r3, [r7, #24]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d109      	bne.n	80059ba <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6a1b      	ldr	r3, [r3, #32]
 80059aa:	4618      	mov	r0, r3
 80059ac:	f000 fd14 	bl	80063d8 <RCC_SetFlashLatencyFromMSIRange>
 80059b0:	4603      	mov	r3, r0
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d001      	beq.n	80059ba <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80059b6:	2301      	movs	r3, #1
 80059b8:	e37a      	b.n	80060b0 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80059ba:	f000 fc81 	bl	80062c0 <HAL_RCC_GetSysClockFreq>
 80059be:	4602      	mov	r2, r0
 80059c0:	4b51      	ldr	r3, [pc, #324]	@ (8005b08 <HAL_RCC_OscConfig+0x270>)
 80059c2:	689b      	ldr	r3, [r3, #8]
 80059c4:	091b      	lsrs	r3, r3, #4
 80059c6:	f003 030f 	and.w	r3, r3, #15
 80059ca:	4950      	ldr	r1, [pc, #320]	@ (8005b0c <HAL_RCC_OscConfig+0x274>)
 80059cc:	5ccb      	ldrb	r3, [r1, r3]
 80059ce:	f003 031f 	and.w	r3, r3, #31
 80059d2:	fa22 f303 	lsr.w	r3, r2, r3
 80059d6:	4a4e      	ldr	r2, [pc, #312]	@ (8005b10 <HAL_RCC_OscConfig+0x278>)
 80059d8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80059da:	4b4e      	ldr	r3, [pc, #312]	@ (8005b14 <HAL_RCC_OscConfig+0x27c>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	4618      	mov	r0, r3
 80059e0:	f7fe fb02 	bl	8003fe8 <HAL_InitTick>
 80059e4:	4603      	mov	r3, r0
 80059e6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80059e8:	7bfb      	ldrb	r3, [r7, #15]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d052      	beq.n	8005a94 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80059ee:	7bfb      	ldrb	r3, [r7, #15]
 80059f0:	e35e      	b.n	80060b0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	699b      	ldr	r3, [r3, #24]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d032      	beq.n	8005a60 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80059fa:	4b43      	ldr	r3, [pc, #268]	@ (8005b08 <HAL_RCC_OscConfig+0x270>)
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	4a42      	ldr	r2, [pc, #264]	@ (8005b08 <HAL_RCC_OscConfig+0x270>)
 8005a00:	f043 0301 	orr.w	r3, r3, #1
 8005a04:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005a06:	f7fe fb3f 	bl	8004088 <HAL_GetTick>
 8005a0a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005a0c:	e008      	b.n	8005a20 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005a0e:	f7fe fb3b 	bl	8004088 <HAL_GetTick>
 8005a12:	4602      	mov	r2, r0
 8005a14:	693b      	ldr	r3, [r7, #16]
 8005a16:	1ad3      	subs	r3, r2, r3
 8005a18:	2b02      	cmp	r3, #2
 8005a1a:	d901      	bls.n	8005a20 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8005a1c:	2303      	movs	r3, #3
 8005a1e:	e347      	b.n	80060b0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005a20:	4b39      	ldr	r3, [pc, #228]	@ (8005b08 <HAL_RCC_OscConfig+0x270>)
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f003 0302 	and.w	r3, r3, #2
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d0f0      	beq.n	8005a0e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005a2c:	4b36      	ldr	r3, [pc, #216]	@ (8005b08 <HAL_RCC_OscConfig+0x270>)
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4a35      	ldr	r2, [pc, #212]	@ (8005b08 <HAL_RCC_OscConfig+0x270>)
 8005a32:	f043 0308 	orr.w	r3, r3, #8
 8005a36:	6013      	str	r3, [r2, #0]
 8005a38:	4b33      	ldr	r3, [pc, #204]	@ (8005b08 <HAL_RCC_OscConfig+0x270>)
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6a1b      	ldr	r3, [r3, #32]
 8005a44:	4930      	ldr	r1, [pc, #192]	@ (8005b08 <HAL_RCC_OscConfig+0x270>)
 8005a46:	4313      	orrs	r3, r2
 8005a48:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005a4a:	4b2f      	ldr	r3, [pc, #188]	@ (8005b08 <HAL_RCC_OscConfig+0x270>)
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	69db      	ldr	r3, [r3, #28]
 8005a56:	021b      	lsls	r3, r3, #8
 8005a58:	492b      	ldr	r1, [pc, #172]	@ (8005b08 <HAL_RCC_OscConfig+0x270>)
 8005a5a:	4313      	orrs	r3, r2
 8005a5c:	604b      	str	r3, [r1, #4]
 8005a5e:	e01a      	b.n	8005a96 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005a60:	4b29      	ldr	r3, [pc, #164]	@ (8005b08 <HAL_RCC_OscConfig+0x270>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4a28      	ldr	r2, [pc, #160]	@ (8005b08 <HAL_RCC_OscConfig+0x270>)
 8005a66:	f023 0301 	bic.w	r3, r3, #1
 8005a6a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005a6c:	f7fe fb0c 	bl	8004088 <HAL_GetTick>
 8005a70:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005a72:	e008      	b.n	8005a86 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005a74:	f7fe fb08 	bl	8004088 <HAL_GetTick>
 8005a78:	4602      	mov	r2, r0
 8005a7a:	693b      	ldr	r3, [r7, #16]
 8005a7c:	1ad3      	subs	r3, r2, r3
 8005a7e:	2b02      	cmp	r3, #2
 8005a80:	d901      	bls.n	8005a86 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8005a82:	2303      	movs	r3, #3
 8005a84:	e314      	b.n	80060b0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005a86:	4b20      	ldr	r3, [pc, #128]	@ (8005b08 <HAL_RCC_OscConfig+0x270>)
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f003 0302 	and.w	r3, r3, #2
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d1f0      	bne.n	8005a74 <HAL_RCC_OscConfig+0x1dc>
 8005a92:	e000      	b.n	8005a96 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005a94:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f003 0301 	and.w	r3, r3, #1
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d073      	beq.n	8005b8a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005aa2:	69bb      	ldr	r3, [r7, #24]
 8005aa4:	2b08      	cmp	r3, #8
 8005aa6:	d005      	beq.n	8005ab4 <HAL_RCC_OscConfig+0x21c>
 8005aa8:	69bb      	ldr	r3, [r7, #24]
 8005aaa:	2b0c      	cmp	r3, #12
 8005aac:	d10e      	bne.n	8005acc <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005aae:	697b      	ldr	r3, [r7, #20]
 8005ab0:	2b03      	cmp	r3, #3
 8005ab2:	d10b      	bne.n	8005acc <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ab4:	4b14      	ldr	r3, [pc, #80]	@ (8005b08 <HAL_RCC_OscConfig+0x270>)
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d063      	beq.n	8005b88 <HAL_RCC_OscConfig+0x2f0>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	685b      	ldr	r3, [r3, #4]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d15f      	bne.n	8005b88 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005ac8:	2301      	movs	r3, #1
 8005aca:	e2f1      	b.n	80060b0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	685b      	ldr	r3, [r3, #4]
 8005ad0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ad4:	d106      	bne.n	8005ae4 <HAL_RCC_OscConfig+0x24c>
 8005ad6:	4b0c      	ldr	r3, [pc, #48]	@ (8005b08 <HAL_RCC_OscConfig+0x270>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	4a0b      	ldr	r2, [pc, #44]	@ (8005b08 <HAL_RCC_OscConfig+0x270>)
 8005adc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005ae0:	6013      	str	r3, [r2, #0]
 8005ae2:	e025      	b.n	8005b30 <HAL_RCC_OscConfig+0x298>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	685b      	ldr	r3, [r3, #4]
 8005ae8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005aec:	d114      	bne.n	8005b18 <HAL_RCC_OscConfig+0x280>
 8005aee:	4b06      	ldr	r3, [pc, #24]	@ (8005b08 <HAL_RCC_OscConfig+0x270>)
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	4a05      	ldr	r2, [pc, #20]	@ (8005b08 <HAL_RCC_OscConfig+0x270>)
 8005af4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005af8:	6013      	str	r3, [r2, #0]
 8005afa:	4b03      	ldr	r3, [pc, #12]	@ (8005b08 <HAL_RCC_OscConfig+0x270>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	4a02      	ldr	r2, [pc, #8]	@ (8005b08 <HAL_RCC_OscConfig+0x270>)
 8005b00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005b04:	6013      	str	r3, [r2, #0]
 8005b06:	e013      	b.n	8005b30 <HAL_RCC_OscConfig+0x298>
 8005b08:	40021000 	.word	0x40021000
 8005b0c:	080097d8 	.word	0x080097d8
 8005b10:	2000000c 	.word	0x2000000c
 8005b14:	20000010 	.word	0x20000010
 8005b18:	4ba0      	ldr	r3, [pc, #640]	@ (8005d9c <HAL_RCC_OscConfig+0x504>)
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	4a9f      	ldr	r2, [pc, #636]	@ (8005d9c <HAL_RCC_OscConfig+0x504>)
 8005b1e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005b22:	6013      	str	r3, [r2, #0]
 8005b24:	4b9d      	ldr	r3, [pc, #628]	@ (8005d9c <HAL_RCC_OscConfig+0x504>)
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	4a9c      	ldr	r2, [pc, #624]	@ (8005d9c <HAL_RCC_OscConfig+0x504>)
 8005b2a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005b2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	685b      	ldr	r3, [r3, #4]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d013      	beq.n	8005b60 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b38:	f7fe faa6 	bl	8004088 <HAL_GetTick>
 8005b3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005b3e:	e008      	b.n	8005b52 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005b40:	f7fe faa2 	bl	8004088 <HAL_GetTick>
 8005b44:	4602      	mov	r2, r0
 8005b46:	693b      	ldr	r3, [r7, #16]
 8005b48:	1ad3      	subs	r3, r2, r3
 8005b4a:	2b64      	cmp	r3, #100	@ 0x64
 8005b4c:	d901      	bls.n	8005b52 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8005b4e:	2303      	movs	r3, #3
 8005b50:	e2ae      	b.n	80060b0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005b52:	4b92      	ldr	r3, [pc, #584]	@ (8005d9c <HAL_RCC_OscConfig+0x504>)
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d0f0      	beq.n	8005b40 <HAL_RCC_OscConfig+0x2a8>
 8005b5e:	e014      	b.n	8005b8a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b60:	f7fe fa92 	bl	8004088 <HAL_GetTick>
 8005b64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005b66:	e008      	b.n	8005b7a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005b68:	f7fe fa8e 	bl	8004088 <HAL_GetTick>
 8005b6c:	4602      	mov	r2, r0
 8005b6e:	693b      	ldr	r3, [r7, #16]
 8005b70:	1ad3      	subs	r3, r2, r3
 8005b72:	2b64      	cmp	r3, #100	@ 0x64
 8005b74:	d901      	bls.n	8005b7a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005b76:	2303      	movs	r3, #3
 8005b78:	e29a      	b.n	80060b0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005b7a:	4b88      	ldr	r3, [pc, #544]	@ (8005d9c <HAL_RCC_OscConfig+0x504>)
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d1f0      	bne.n	8005b68 <HAL_RCC_OscConfig+0x2d0>
 8005b86:	e000      	b.n	8005b8a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f003 0302 	and.w	r3, r3, #2
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d060      	beq.n	8005c58 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005b96:	69bb      	ldr	r3, [r7, #24]
 8005b98:	2b04      	cmp	r3, #4
 8005b9a:	d005      	beq.n	8005ba8 <HAL_RCC_OscConfig+0x310>
 8005b9c:	69bb      	ldr	r3, [r7, #24]
 8005b9e:	2b0c      	cmp	r3, #12
 8005ba0:	d119      	bne.n	8005bd6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005ba2:	697b      	ldr	r3, [r7, #20]
 8005ba4:	2b02      	cmp	r3, #2
 8005ba6:	d116      	bne.n	8005bd6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005ba8:	4b7c      	ldr	r3, [pc, #496]	@ (8005d9c <HAL_RCC_OscConfig+0x504>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d005      	beq.n	8005bc0 <HAL_RCC_OscConfig+0x328>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	68db      	ldr	r3, [r3, #12]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d101      	bne.n	8005bc0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	e277      	b.n	80060b0 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005bc0:	4b76      	ldr	r3, [pc, #472]	@ (8005d9c <HAL_RCC_OscConfig+0x504>)
 8005bc2:	685b      	ldr	r3, [r3, #4]
 8005bc4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	691b      	ldr	r3, [r3, #16]
 8005bcc:	061b      	lsls	r3, r3, #24
 8005bce:	4973      	ldr	r1, [pc, #460]	@ (8005d9c <HAL_RCC_OscConfig+0x504>)
 8005bd0:	4313      	orrs	r3, r2
 8005bd2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005bd4:	e040      	b.n	8005c58 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	68db      	ldr	r3, [r3, #12]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d023      	beq.n	8005c26 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005bde:	4b6f      	ldr	r3, [pc, #444]	@ (8005d9c <HAL_RCC_OscConfig+0x504>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	4a6e      	ldr	r2, [pc, #440]	@ (8005d9c <HAL_RCC_OscConfig+0x504>)
 8005be4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005be8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bea:	f7fe fa4d 	bl	8004088 <HAL_GetTick>
 8005bee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005bf0:	e008      	b.n	8005c04 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005bf2:	f7fe fa49 	bl	8004088 <HAL_GetTick>
 8005bf6:	4602      	mov	r2, r0
 8005bf8:	693b      	ldr	r3, [r7, #16]
 8005bfa:	1ad3      	subs	r3, r2, r3
 8005bfc:	2b02      	cmp	r3, #2
 8005bfe:	d901      	bls.n	8005c04 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005c00:	2303      	movs	r3, #3
 8005c02:	e255      	b.n	80060b0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005c04:	4b65      	ldr	r3, [pc, #404]	@ (8005d9c <HAL_RCC_OscConfig+0x504>)
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d0f0      	beq.n	8005bf2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c10:	4b62      	ldr	r3, [pc, #392]	@ (8005d9c <HAL_RCC_OscConfig+0x504>)
 8005c12:	685b      	ldr	r3, [r3, #4]
 8005c14:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	691b      	ldr	r3, [r3, #16]
 8005c1c:	061b      	lsls	r3, r3, #24
 8005c1e:	495f      	ldr	r1, [pc, #380]	@ (8005d9c <HAL_RCC_OscConfig+0x504>)
 8005c20:	4313      	orrs	r3, r2
 8005c22:	604b      	str	r3, [r1, #4]
 8005c24:	e018      	b.n	8005c58 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005c26:	4b5d      	ldr	r3, [pc, #372]	@ (8005d9c <HAL_RCC_OscConfig+0x504>)
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	4a5c      	ldr	r2, [pc, #368]	@ (8005d9c <HAL_RCC_OscConfig+0x504>)
 8005c2c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005c30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c32:	f7fe fa29 	bl	8004088 <HAL_GetTick>
 8005c36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005c38:	e008      	b.n	8005c4c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005c3a:	f7fe fa25 	bl	8004088 <HAL_GetTick>
 8005c3e:	4602      	mov	r2, r0
 8005c40:	693b      	ldr	r3, [r7, #16]
 8005c42:	1ad3      	subs	r3, r2, r3
 8005c44:	2b02      	cmp	r3, #2
 8005c46:	d901      	bls.n	8005c4c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005c48:	2303      	movs	r3, #3
 8005c4a:	e231      	b.n	80060b0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005c4c:	4b53      	ldr	r3, [pc, #332]	@ (8005d9c <HAL_RCC_OscConfig+0x504>)
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d1f0      	bne.n	8005c3a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f003 0308 	and.w	r3, r3, #8
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d03c      	beq.n	8005cde <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	695b      	ldr	r3, [r3, #20]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d01c      	beq.n	8005ca6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005c6c:	4b4b      	ldr	r3, [pc, #300]	@ (8005d9c <HAL_RCC_OscConfig+0x504>)
 8005c6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005c72:	4a4a      	ldr	r2, [pc, #296]	@ (8005d9c <HAL_RCC_OscConfig+0x504>)
 8005c74:	f043 0301 	orr.w	r3, r3, #1
 8005c78:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c7c:	f7fe fa04 	bl	8004088 <HAL_GetTick>
 8005c80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005c82:	e008      	b.n	8005c96 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005c84:	f7fe fa00 	bl	8004088 <HAL_GetTick>
 8005c88:	4602      	mov	r2, r0
 8005c8a:	693b      	ldr	r3, [r7, #16]
 8005c8c:	1ad3      	subs	r3, r2, r3
 8005c8e:	2b02      	cmp	r3, #2
 8005c90:	d901      	bls.n	8005c96 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005c92:	2303      	movs	r3, #3
 8005c94:	e20c      	b.n	80060b0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005c96:	4b41      	ldr	r3, [pc, #260]	@ (8005d9c <HAL_RCC_OscConfig+0x504>)
 8005c98:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005c9c:	f003 0302 	and.w	r3, r3, #2
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d0ef      	beq.n	8005c84 <HAL_RCC_OscConfig+0x3ec>
 8005ca4:	e01b      	b.n	8005cde <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005ca6:	4b3d      	ldr	r3, [pc, #244]	@ (8005d9c <HAL_RCC_OscConfig+0x504>)
 8005ca8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005cac:	4a3b      	ldr	r2, [pc, #236]	@ (8005d9c <HAL_RCC_OscConfig+0x504>)
 8005cae:	f023 0301 	bic.w	r3, r3, #1
 8005cb2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005cb6:	f7fe f9e7 	bl	8004088 <HAL_GetTick>
 8005cba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005cbc:	e008      	b.n	8005cd0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005cbe:	f7fe f9e3 	bl	8004088 <HAL_GetTick>
 8005cc2:	4602      	mov	r2, r0
 8005cc4:	693b      	ldr	r3, [r7, #16]
 8005cc6:	1ad3      	subs	r3, r2, r3
 8005cc8:	2b02      	cmp	r3, #2
 8005cca:	d901      	bls.n	8005cd0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005ccc:	2303      	movs	r3, #3
 8005cce:	e1ef      	b.n	80060b0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005cd0:	4b32      	ldr	r3, [pc, #200]	@ (8005d9c <HAL_RCC_OscConfig+0x504>)
 8005cd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005cd6:	f003 0302 	and.w	r3, r3, #2
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d1ef      	bne.n	8005cbe <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f003 0304 	and.w	r3, r3, #4
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	f000 80a6 	beq.w	8005e38 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005cec:	2300      	movs	r3, #0
 8005cee:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005cf0:	4b2a      	ldr	r3, [pc, #168]	@ (8005d9c <HAL_RCC_OscConfig+0x504>)
 8005cf2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005cf4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d10d      	bne.n	8005d18 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005cfc:	4b27      	ldr	r3, [pc, #156]	@ (8005d9c <HAL_RCC_OscConfig+0x504>)
 8005cfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d00:	4a26      	ldr	r2, [pc, #152]	@ (8005d9c <HAL_RCC_OscConfig+0x504>)
 8005d02:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005d06:	6593      	str	r3, [r2, #88]	@ 0x58
 8005d08:	4b24      	ldr	r3, [pc, #144]	@ (8005d9c <HAL_RCC_OscConfig+0x504>)
 8005d0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d0c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005d10:	60bb      	str	r3, [r7, #8]
 8005d12:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005d14:	2301      	movs	r3, #1
 8005d16:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005d18:	4b21      	ldr	r3, [pc, #132]	@ (8005da0 <HAL_RCC_OscConfig+0x508>)
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d118      	bne.n	8005d56 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005d24:	4b1e      	ldr	r3, [pc, #120]	@ (8005da0 <HAL_RCC_OscConfig+0x508>)
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4a1d      	ldr	r2, [pc, #116]	@ (8005da0 <HAL_RCC_OscConfig+0x508>)
 8005d2a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005d2e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005d30:	f7fe f9aa 	bl	8004088 <HAL_GetTick>
 8005d34:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005d36:	e008      	b.n	8005d4a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d38:	f7fe f9a6 	bl	8004088 <HAL_GetTick>
 8005d3c:	4602      	mov	r2, r0
 8005d3e:	693b      	ldr	r3, [r7, #16]
 8005d40:	1ad3      	subs	r3, r2, r3
 8005d42:	2b02      	cmp	r3, #2
 8005d44:	d901      	bls.n	8005d4a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005d46:	2303      	movs	r3, #3
 8005d48:	e1b2      	b.n	80060b0 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005d4a:	4b15      	ldr	r3, [pc, #84]	@ (8005da0 <HAL_RCC_OscConfig+0x508>)
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d0f0      	beq.n	8005d38 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	689b      	ldr	r3, [r3, #8]
 8005d5a:	2b01      	cmp	r3, #1
 8005d5c:	d108      	bne.n	8005d70 <HAL_RCC_OscConfig+0x4d8>
 8005d5e:	4b0f      	ldr	r3, [pc, #60]	@ (8005d9c <HAL_RCC_OscConfig+0x504>)
 8005d60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d64:	4a0d      	ldr	r2, [pc, #52]	@ (8005d9c <HAL_RCC_OscConfig+0x504>)
 8005d66:	f043 0301 	orr.w	r3, r3, #1
 8005d6a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005d6e:	e029      	b.n	8005dc4 <HAL_RCC_OscConfig+0x52c>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	689b      	ldr	r3, [r3, #8]
 8005d74:	2b05      	cmp	r3, #5
 8005d76:	d115      	bne.n	8005da4 <HAL_RCC_OscConfig+0x50c>
 8005d78:	4b08      	ldr	r3, [pc, #32]	@ (8005d9c <HAL_RCC_OscConfig+0x504>)
 8005d7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d7e:	4a07      	ldr	r2, [pc, #28]	@ (8005d9c <HAL_RCC_OscConfig+0x504>)
 8005d80:	f043 0304 	orr.w	r3, r3, #4
 8005d84:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005d88:	4b04      	ldr	r3, [pc, #16]	@ (8005d9c <HAL_RCC_OscConfig+0x504>)
 8005d8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d8e:	4a03      	ldr	r2, [pc, #12]	@ (8005d9c <HAL_RCC_OscConfig+0x504>)
 8005d90:	f043 0301 	orr.w	r3, r3, #1
 8005d94:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005d98:	e014      	b.n	8005dc4 <HAL_RCC_OscConfig+0x52c>
 8005d9a:	bf00      	nop
 8005d9c:	40021000 	.word	0x40021000
 8005da0:	40007000 	.word	0x40007000
 8005da4:	4b9a      	ldr	r3, [pc, #616]	@ (8006010 <HAL_RCC_OscConfig+0x778>)
 8005da6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005daa:	4a99      	ldr	r2, [pc, #612]	@ (8006010 <HAL_RCC_OscConfig+0x778>)
 8005dac:	f023 0301 	bic.w	r3, r3, #1
 8005db0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005db4:	4b96      	ldr	r3, [pc, #600]	@ (8006010 <HAL_RCC_OscConfig+0x778>)
 8005db6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005dba:	4a95      	ldr	r2, [pc, #596]	@ (8006010 <HAL_RCC_OscConfig+0x778>)
 8005dbc:	f023 0304 	bic.w	r3, r3, #4
 8005dc0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	689b      	ldr	r3, [r3, #8]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d016      	beq.n	8005dfa <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005dcc:	f7fe f95c 	bl	8004088 <HAL_GetTick>
 8005dd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005dd2:	e00a      	b.n	8005dea <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005dd4:	f7fe f958 	bl	8004088 <HAL_GetTick>
 8005dd8:	4602      	mov	r2, r0
 8005dda:	693b      	ldr	r3, [r7, #16]
 8005ddc:	1ad3      	subs	r3, r2, r3
 8005dde:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d901      	bls.n	8005dea <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8005de6:	2303      	movs	r3, #3
 8005de8:	e162      	b.n	80060b0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005dea:	4b89      	ldr	r3, [pc, #548]	@ (8006010 <HAL_RCC_OscConfig+0x778>)
 8005dec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005df0:	f003 0302 	and.w	r3, r3, #2
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d0ed      	beq.n	8005dd4 <HAL_RCC_OscConfig+0x53c>
 8005df8:	e015      	b.n	8005e26 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005dfa:	f7fe f945 	bl	8004088 <HAL_GetTick>
 8005dfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005e00:	e00a      	b.n	8005e18 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e02:	f7fe f941 	bl	8004088 <HAL_GetTick>
 8005e06:	4602      	mov	r2, r0
 8005e08:	693b      	ldr	r3, [r7, #16]
 8005e0a:	1ad3      	subs	r3, r2, r3
 8005e0c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d901      	bls.n	8005e18 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005e14:	2303      	movs	r3, #3
 8005e16:	e14b      	b.n	80060b0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005e18:	4b7d      	ldr	r3, [pc, #500]	@ (8006010 <HAL_RCC_OscConfig+0x778>)
 8005e1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e1e:	f003 0302 	and.w	r3, r3, #2
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d1ed      	bne.n	8005e02 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005e26:	7ffb      	ldrb	r3, [r7, #31]
 8005e28:	2b01      	cmp	r3, #1
 8005e2a:	d105      	bne.n	8005e38 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e2c:	4b78      	ldr	r3, [pc, #480]	@ (8006010 <HAL_RCC_OscConfig+0x778>)
 8005e2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e30:	4a77      	ldr	r2, [pc, #476]	@ (8006010 <HAL_RCC_OscConfig+0x778>)
 8005e32:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005e36:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f003 0320 	and.w	r3, r3, #32
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d03c      	beq.n	8005ebe <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d01c      	beq.n	8005e86 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005e4c:	4b70      	ldr	r3, [pc, #448]	@ (8006010 <HAL_RCC_OscConfig+0x778>)
 8005e4e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005e52:	4a6f      	ldr	r2, [pc, #444]	@ (8006010 <HAL_RCC_OscConfig+0x778>)
 8005e54:	f043 0301 	orr.w	r3, r3, #1
 8005e58:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e5c:	f7fe f914 	bl	8004088 <HAL_GetTick>
 8005e60:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005e62:	e008      	b.n	8005e76 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005e64:	f7fe f910 	bl	8004088 <HAL_GetTick>
 8005e68:	4602      	mov	r2, r0
 8005e6a:	693b      	ldr	r3, [r7, #16]
 8005e6c:	1ad3      	subs	r3, r2, r3
 8005e6e:	2b02      	cmp	r3, #2
 8005e70:	d901      	bls.n	8005e76 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8005e72:	2303      	movs	r3, #3
 8005e74:	e11c      	b.n	80060b0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005e76:	4b66      	ldr	r3, [pc, #408]	@ (8006010 <HAL_RCC_OscConfig+0x778>)
 8005e78:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005e7c:	f003 0302 	and.w	r3, r3, #2
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d0ef      	beq.n	8005e64 <HAL_RCC_OscConfig+0x5cc>
 8005e84:	e01b      	b.n	8005ebe <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005e86:	4b62      	ldr	r3, [pc, #392]	@ (8006010 <HAL_RCC_OscConfig+0x778>)
 8005e88:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005e8c:	4a60      	ldr	r2, [pc, #384]	@ (8006010 <HAL_RCC_OscConfig+0x778>)
 8005e8e:	f023 0301 	bic.w	r3, r3, #1
 8005e92:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e96:	f7fe f8f7 	bl	8004088 <HAL_GetTick>
 8005e9a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005e9c:	e008      	b.n	8005eb0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005e9e:	f7fe f8f3 	bl	8004088 <HAL_GetTick>
 8005ea2:	4602      	mov	r2, r0
 8005ea4:	693b      	ldr	r3, [r7, #16]
 8005ea6:	1ad3      	subs	r3, r2, r3
 8005ea8:	2b02      	cmp	r3, #2
 8005eaa:	d901      	bls.n	8005eb0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8005eac:	2303      	movs	r3, #3
 8005eae:	e0ff      	b.n	80060b0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005eb0:	4b57      	ldr	r3, [pc, #348]	@ (8006010 <HAL_RCC_OscConfig+0x778>)
 8005eb2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005eb6:	f003 0302 	and.w	r3, r3, #2
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d1ef      	bne.n	8005e9e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	f000 80f3 	beq.w	80060ae <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ecc:	2b02      	cmp	r3, #2
 8005ece:	f040 80c9 	bne.w	8006064 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005ed2:	4b4f      	ldr	r3, [pc, #316]	@ (8006010 <HAL_RCC_OscConfig+0x778>)
 8005ed4:	68db      	ldr	r3, [r3, #12]
 8005ed6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ed8:	697b      	ldr	r3, [r7, #20]
 8005eda:	f003 0203 	and.w	r2, r3, #3
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ee2:	429a      	cmp	r2, r3
 8005ee4:	d12c      	bne.n	8005f40 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005ee6:	697b      	ldr	r3, [r7, #20]
 8005ee8:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ef0:	3b01      	subs	r3, #1
 8005ef2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ef4:	429a      	cmp	r2, r3
 8005ef6:	d123      	bne.n	8005f40 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005ef8:	697b      	ldr	r3, [r7, #20]
 8005efa:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f02:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005f04:	429a      	cmp	r2, r3
 8005f06:	d11b      	bne.n	8005f40 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005f08:	697b      	ldr	r3, [r7, #20]
 8005f0a:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f12:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005f14:	429a      	cmp	r2, r3
 8005f16:	d113      	bne.n	8005f40 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005f18:	697b      	ldr	r3, [r7, #20]
 8005f1a:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f22:	085b      	lsrs	r3, r3, #1
 8005f24:	3b01      	subs	r3, #1
 8005f26:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005f28:	429a      	cmp	r2, r3
 8005f2a:	d109      	bne.n	8005f40 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005f2c:	697b      	ldr	r3, [r7, #20]
 8005f2e:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f36:	085b      	lsrs	r3, r3, #1
 8005f38:	3b01      	subs	r3, #1
 8005f3a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005f3c:	429a      	cmp	r2, r3
 8005f3e:	d06b      	beq.n	8006018 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005f40:	69bb      	ldr	r3, [r7, #24]
 8005f42:	2b0c      	cmp	r3, #12
 8005f44:	d062      	beq.n	800600c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005f46:	4b32      	ldr	r3, [pc, #200]	@ (8006010 <HAL_RCC_OscConfig+0x778>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d001      	beq.n	8005f56 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8005f52:	2301      	movs	r3, #1
 8005f54:	e0ac      	b.n	80060b0 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005f56:	4b2e      	ldr	r3, [pc, #184]	@ (8006010 <HAL_RCC_OscConfig+0x778>)
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	4a2d      	ldr	r2, [pc, #180]	@ (8006010 <HAL_RCC_OscConfig+0x778>)
 8005f5c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005f60:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005f62:	f7fe f891 	bl	8004088 <HAL_GetTick>
 8005f66:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005f68:	e008      	b.n	8005f7c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f6a:	f7fe f88d 	bl	8004088 <HAL_GetTick>
 8005f6e:	4602      	mov	r2, r0
 8005f70:	693b      	ldr	r3, [r7, #16]
 8005f72:	1ad3      	subs	r3, r2, r3
 8005f74:	2b02      	cmp	r3, #2
 8005f76:	d901      	bls.n	8005f7c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8005f78:	2303      	movs	r3, #3
 8005f7a:	e099      	b.n	80060b0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005f7c:	4b24      	ldr	r3, [pc, #144]	@ (8006010 <HAL_RCC_OscConfig+0x778>)
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d1f0      	bne.n	8005f6a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005f88:	4b21      	ldr	r3, [pc, #132]	@ (8006010 <HAL_RCC_OscConfig+0x778>)
 8005f8a:	68da      	ldr	r2, [r3, #12]
 8005f8c:	4b21      	ldr	r3, [pc, #132]	@ (8006014 <HAL_RCC_OscConfig+0x77c>)
 8005f8e:	4013      	ands	r3, r2
 8005f90:	687a      	ldr	r2, [r7, #4]
 8005f92:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8005f94:	687a      	ldr	r2, [r7, #4]
 8005f96:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005f98:	3a01      	subs	r2, #1
 8005f9a:	0112      	lsls	r2, r2, #4
 8005f9c:	4311      	orrs	r1, r2
 8005f9e:	687a      	ldr	r2, [r7, #4]
 8005fa0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005fa2:	0212      	lsls	r2, r2, #8
 8005fa4:	4311      	orrs	r1, r2
 8005fa6:	687a      	ldr	r2, [r7, #4]
 8005fa8:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005faa:	0852      	lsrs	r2, r2, #1
 8005fac:	3a01      	subs	r2, #1
 8005fae:	0552      	lsls	r2, r2, #21
 8005fb0:	4311      	orrs	r1, r2
 8005fb2:	687a      	ldr	r2, [r7, #4]
 8005fb4:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8005fb6:	0852      	lsrs	r2, r2, #1
 8005fb8:	3a01      	subs	r2, #1
 8005fba:	0652      	lsls	r2, r2, #25
 8005fbc:	4311      	orrs	r1, r2
 8005fbe:	687a      	ldr	r2, [r7, #4]
 8005fc0:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005fc2:	06d2      	lsls	r2, r2, #27
 8005fc4:	430a      	orrs	r2, r1
 8005fc6:	4912      	ldr	r1, [pc, #72]	@ (8006010 <HAL_RCC_OscConfig+0x778>)
 8005fc8:	4313      	orrs	r3, r2
 8005fca:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005fcc:	4b10      	ldr	r3, [pc, #64]	@ (8006010 <HAL_RCC_OscConfig+0x778>)
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4a0f      	ldr	r2, [pc, #60]	@ (8006010 <HAL_RCC_OscConfig+0x778>)
 8005fd2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005fd6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005fd8:	4b0d      	ldr	r3, [pc, #52]	@ (8006010 <HAL_RCC_OscConfig+0x778>)
 8005fda:	68db      	ldr	r3, [r3, #12]
 8005fdc:	4a0c      	ldr	r2, [pc, #48]	@ (8006010 <HAL_RCC_OscConfig+0x778>)
 8005fde:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005fe2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005fe4:	f7fe f850 	bl	8004088 <HAL_GetTick>
 8005fe8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005fea:	e008      	b.n	8005ffe <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005fec:	f7fe f84c 	bl	8004088 <HAL_GetTick>
 8005ff0:	4602      	mov	r2, r0
 8005ff2:	693b      	ldr	r3, [r7, #16]
 8005ff4:	1ad3      	subs	r3, r2, r3
 8005ff6:	2b02      	cmp	r3, #2
 8005ff8:	d901      	bls.n	8005ffe <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8005ffa:	2303      	movs	r3, #3
 8005ffc:	e058      	b.n	80060b0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005ffe:	4b04      	ldr	r3, [pc, #16]	@ (8006010 <HAL_RCC_OscConfig+0x778>)
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006006:	2b00      	cmp	r3, #0
 8006008:	d0f0      	beq.n	8005fec <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800600a:	e050      	b.n	80060ae <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800600c:	2301      	movs	r3, #1
 800600e:	e04f      	b.n	80060b0 <HAL_RCC_OscConfig+0x818>
 8006010:	40021000 	.word	0x40021000
 8006014:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006018:	4b27      	ldr	r3, [pc, #156]	@ (80060b8 <HAL_RCC_OscConfig+0x820>)
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006020:	2b00      	cmp	r3, #0
 8006022:	d144      	bne.n	80060ae <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006024:	4b24      	ldr	r3, [pc, #144]	@ (80060b8 <HAL_RCC_OscConfig+0x820>)
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	4a23      	ldr	r2, [pc, #140]	@ (80060b8 <HAL_RCC_OscConfig+0x820>)
 800602a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800602e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006030:	4b21      	ldr	r3, [pc, #132]	@ (80060b8 <HAL_RCC_OscConfig+0x820>)
 8006032:	68db      	ldr	r3, [r3, #12]
 8006034:	4a20      	ldr	r2, [pc, #128]	@ (80060b8 <HAL_RCC_OscConfig+0x820>)
 8006036:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800603a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800603c:	f7fe f824 	bl	8004088 <HAL_GetTick>
 8006040:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006042:	e008      	b.n	8006056 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006044:	f7fe f820 	bl	8004088 <HAL_GetTick>
 8006048:	4602      	mov	r2, r0
 800604a:	693b      	ldr	r3, [r7, #16]
 800604c:	1ad3      	subs	r3, r2, r3
 800604e:	2b02      	cmp	r3, #2
 8006050:	d901      	bls.n	8006056 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8006052:	2303      	movs	r3, #3
 8006054:	e02c      	b.n	80060b0 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006056:	4b18      	ldr	r3, [pc, #96]	@ (80060b8 <HAL_RCC_OscConfig+0x820>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800605e:	2b00      	cmp	r3, #0
 8006060:	d0f0      	beq.n	8006044 <HAL_RCC_OscConfig+0x7ac>
 8006062:	e024      	b.n	80060ae <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006064:	69bb      	ldr	r3, [r7, #24]
 8006066:	2b0c      	cmp	r3, #12
 8006068:	d01f      	beq.n	80060aa <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800606a:	4b13      	ldr	r3, [pc, #76]	@ (80060b8 <HAL_RCC_OscConfig+0x820>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	4a12      	ldr	r2, [pc, #72]	@ (80060b8 <HAL_RCC_OscConfig+0x820>)
 8006070:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006074:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006076:	f7fe f807 	bl	8004088 <HAL_GetTick>
 800607a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800607c:	e008      	b.n	8006090 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800607e:	f7fe f803 	bl	8004088 <HAL_GetTick>
 8006082:	4602      	mov	r2, r0
 8006084:	693b      	ldr	r3, [r7, #16]
 8006086:	1ad3      	subs	r3, r2, r3
 8006088:	2b02      	cmp	r3, #2
 800608a:	d901      	bls.n	8006090 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 800608c:	2303      	movs	r3, #3
 800608e:	e00f      	b.n	80060b0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006090:	4b09      	ldr	r3, [pc, #36]	@ (80060b8 <HAL_RCC_OscConfig+0x820>)
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006098:	2b00      	cmp	r3, #0
 800609a:	d1f0      	bne.n	800607e <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800609c:	4b06      	ldr	r3, [pc, #24]	@ (80060b8 <HAL_RCC_OscConfig+0x820>)
 800609e:	68da      	ldr	r2, [r3, #12]
 80060a0:	4905      	ldr	r1, [pc, #20]	@ (80060b8 <HAL_RCC_OscConfig+0x820>)
 80060a2:	4b06      	ldr	r3, [pc, #24]	@ (80060bc <HAL_RCC_OscConfig+0x824>)
 80060a4:	4013      	ands	r3, r2
 80060a6:	60cb      	str	r3, [r1, #12]
 80060a8:	e001      	b.n	80060ae <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80060aa:	2301      	movs	r3, #1
 80060ac:	e000      	b.n	80060b0 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80060ae:	2300      	movs	r3, #0
}
 80060b0:	4618      	mov	r0, r3
 80060b2:	3720      	adds	r7, #32
 80060b4:	46bd      	mov	sp, r7
 80060b6:	bd80      	pop	{r7, pc}
 80060b8:	40021000 	.word	0x40021000
 80060bc:	feeefffc 	.word	0xfeeefffc

080060c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b084      	sub	sp, #16
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
 80060c8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d101      	bne.n	80060d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80060d0:	2301      	movs	r3, #1
 80060d2:	e0e7      	b.n	80062a4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80060d4:	4b75      	ldr	r3, [pc, #468]	@ (80062ac <HAL_RCC_ClockConfig+0x1ec>)
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f003 0307 	and.w	r3, r3, #7
 80060dc:	683a      	ldr	r2, [r7, #0]
 80060de:	429a      	cmp	r2, r3
 80060e0:	d910      	bls.n	8006104 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80060e2:	4b72      	ldr	r3, [pc, #456]	@ (80062ac <HAL_RCC_ClockConfig+0x1ec>)
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f023 0207 	bic.w	r2, r3, #7
 80060ea:	4970      	ldr	r1, [pc, #448]	@ (80062ac <HAL_RCC_ClockConfig+0x1ec>)
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	4313      	orrs	r3, r2
 80060f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80060f2:	4b6e      	ldr	r3, [pc, #440]	@ (80062ac <HAL_RCC_ClockConfig+0x1ec>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f003 0307 	and.w	r3, r3, #7
 80060fa:	683a      	ldr	r2, [r7, #0]
 80060fc:	429a      	cmp	r2, r3
 80060fe:	d001      	beq.n	8006104 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006100:	2301      	movs	r3, #1
 8006102:	e0cf      	b.n	80062a4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f003 0302 	and.w	r3, r3, #2
 800610c:	2b00      	cmp	r3, #0
 800610e:	d010      	beq.n	8006132 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	689a      	ldr	r2, [r3, #8]
 8006114:	4b66      	ldr	r3, [pc, #408]	@ (80062b0 <HAL_RCC_ClockConfig+0x1f0>)
 8006116:	689b      	ldr	r3, [r3, #8]
 8006118:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800611c:	429a      	cmp	r2, r3
 800611e:	d908      	bls.n	8006132 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006120:	4b63      	ldr	r3, [pc, #396]	@ (80062b0 <HAL_RCC_ClockConfig+0x1f0>)
 8006122:	689b      	ldr	r3, [r3, #8]
 8006124:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	689b      	ldr	r3, [r3, #8]
 800612c:	4960      	ldr	r1, [pc, #384]	@ (80062b0 <HAL_RCC_ClockConfig+0x1f0>)
 800612e:	4313      	orrs	r3, r2
 8006130:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f003 0301 	and.w	r3, r3, #1
 800613a:	2b00      	cmp	r3, #0
 800613c:	d04c      	beq.n	80061d8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	685b      	ldr	r3, [r3, #4]
 8006142:	2b03      	cmp	r3, #3
 8006144:	d107      	bne.n	8006156 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006146:	4b5a      	ldr	r3, [pc, #360]	@ (80062b0 <HAL_RCC_ClockConfig+0x1f0>)
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800614e:	2b00      	cmp	r3, #0
 8006150:	d121      	bne.n	8006196 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8006152:	2301      	movs	r3, #1
 8006154:	e0a6      	b.n	80062a4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	685b      	ldr	r3, [r3, #4]
 800615a:	2b02      	cmp	r3, #2
 800615c:	d107      	bne.n	800616e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800615e:	4b54      	ldr	r3, [pc, #336]	@ (80062b0 <HAL_RCC_ClockConfig+0x1f0>)
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006166:	2b00      	cmp	r3, #0
 8006168:	d115      	bne.n	8006196 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800616a:	2301      	movs	r3, #1
 800616c:	e09a      	b.n	80062a4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	685b      	ldr	r3, [r3, #4]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d107      	bne.n	8006186 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006176:	4b4e      	ldr	r3, [pc, #312]	@ (80062b0 <HAL_RCC_ClockConfig+0x1f0>)
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f003 0302 	and.w	r3, r3, #2
 800617e:	2b00      	cmp	r3, #0
 8006180:	d109      	bne.n	8006196 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006182:	2301      	movs	r3, #1
 8006184:	e08e      	b.n	80062a4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006186:	4b4a      	ldr	r3, [pc, #296]	@ (80062b0 <HAL_RCC_ClockConfig+0x1f0>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800618e:	2b00      	cmp	r3, #0
 8006190:	d101      	bne.n	8006196 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006192:	2301      	movs	r3, #1
 8006194:	e086      	b.n	80062a4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006196:	4b46      	ldr	r3, [pc, #280]	@ (80062b0 <HAL_RCC_ClockConfig+0x1f0>)
 8006198:	689b      	ldr	r3, [r3, #8]
 800619a:	f023 0203 	bic.w	r2, r3, #3
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	685b      	ldr	r3, [r3, #4]
 80061a2:	4943      	ldr	r1, [pc, #268]	@ (80062b0 <HAL_RCC_ClockConfig+0x1f0>)
 80061a4:	4313      	orrs	r3, r2
 80061a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80061a8:	f7fd ff6e 	bl	8004088 <HAL_GetTick>
 80061ac:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80061ae:	e00a      	b.n	80061c6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80061b0:	f7fd ff6a 	bl	8004088 <HAL_GetTick>
 80061b4:	4602      	mov	r2, r0
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	1ad3      	subs	r3, r2, r3
 80061ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80061be:	4293      	cmp	r3, r2
 80061c0:	d901      	bls.n	80061c6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80061c2:	2303      	movs	r3, #3
 80061c4:	e06e      	b.n	80062a4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80061c6:	4b3a      	ldr	r3, [pc, #232]	@ (80062b0 <HAL_RCC_ClockConfig+0x1f0>)
 80061c8:	689b      	ldr	r3, [r3, #8]
 80061ca:	f003 020c 	and.w	r2, r3, #12
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	685b      	ldr	r3, [r3, #4]
 80061d2:	009b      	lsls	r3, r3, #2
 80061d4:	429a      	cmp	r2, r3
 80061d6:	d1eb      	bne.n	80061b0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f003 0302 	and.w	r3, r3, #2
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d010      	beq.n	8006206 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	689a      	ldr	r2, [r3, #8]
 80061e8:	4b31      	ldr	r3, [pc, #196]	@ (80062b0 <HAL_RCC_ClockConfig+0x1f0>)
 80061ea:	689b      	ldr	r3, [r3, #8]
 80061ec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80061f0:	429a      	cmp	r2, r3
 80061f2:	d208      	bcs.n	8006206 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80061f4:	4b2e      	ldr	r3, [pc, #184]	@ (80062b0 <HAL_RCC_ClockConfig+0x1f0>)
 80061f6:	689b      	ldr	r3, [r3, #8]
 80061f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	689b      	ldr	r3, [r3, #8]
 8006200:	492b      	ldr	r1, [pc, #172]	@ (80062b0 <HAL_RCC_ClockConfig+0x1f0>)
 8006202:	4313      	orrs	r3, r2
 8006204:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006206:	4b29      	ldr	r3, [pc, #164]	@ (80062ac <HAL_RCC_ClockConfig+0x1ec>)
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f003 0307 	and.w	r3, r3, #7
 800620e:	683a      	ldr	r2, [r7, #0]
 8006210:	429a      	cmp	r2, r3
 8006212:	d210      	bcs.n	8006236 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006214:	4b25      	ldr	r3, [pc, #148]	@ (80062ac <HAL_RCC_ClockConfig+0x1ec>)
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f023 0207 	bic.w	r2, r3, #7
 800621c:	4923      	ldr	r1, [pc, #140]	@ (80062ac <HAL_RCC_ClockConfig+0x1ec>)
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	4313      	orrs	r3, r2
 8006222:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006224:	4b21      	ldr	r3, [pc, #132]	@ (80062ac <HAL_RCC_ClockConfig+0x1ec>)
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f003 0307 	and.w	r3, r3, #7
 800622c:	683a      	ldr	r2, [r7, #0]
 800622e:	429a      	cmp	r2, r3
 8006230:	d001      	beq.n	8006236 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8006232:	2301      	movs	r3, #1
 8006234:	e036      	b.n	80062a4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f003 0304 	and.w	r3, r3, #4
 800623e:	2b00      	cmp	r3, #0
 8006240:	d008      	beq.n	8006254 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006242:	4b1b      	ldr	r3, [pc, #108]	@ (80062b0 <HAL_RCC_ClockConfig+0x1f0>)
 8006244:	689b      	ldr	r3, [r3, #8]
 8006246:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	68db      	ldr	r3, [r3, #12]
 800624e:	4918      	ldr	r1, [pc, #96]	@ (80062b0 <HAL_RCC_ClockConfig+0x1f0>)
 8006250:	4313      	orrs	r3, r2
 8006252:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f003 0308 	and.w	r3, r3, #8
 800625c:	2b00      	cmp	r3, #0
 800625e:	d009      	beq.n	8006274 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006260:	4b13      	ldr	r3, [pc, #76]	@ (80062b0 <HAL_RCC_ClockConfig+0x1f0>)
 8006262:	689b      	ldr	r3, [r3, #8]
 8006264:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	691b      	ldr	r3, [r3, #16]
 800626c:	00db      	lsls	r3, r3, #3
 800626e:	4910      	ldr	r1, [pc, #64]	@ (80062b0 <HAL_RCC_ClockConfig+0x1f0>)
 8006270:	4313      	orrs	r3, r2
 8006272:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006274:	f000 f824 	bl	80062c0 <HAL_RCC_GetSysClockFreq>
 8006278:	4602      	mov	r2, r0
 800627a:	4b0d      	ldr	r3, [pc, #52]	@ (80062b0 <HAL_RCC_ClockConfig+0x1f0>)
 800627c:	689b      	ldr	r3, [r3, #8]
 800627e:	091b      	lsrs	r3, r3, #4
 8006280:	f003 030f 	and.w	r3, r3, #15
 8006284:	490b      	ldr	r1, [pc, #44]	@ (80062b4 <HAL_RCC_ClockConfig+0x1f4>)
 8006286:	5ccb      	ldrb	r3, [r1, r3]
 8006288:	f003 031f 	and.w	r3, r3, #31
 800628c:	fa22 f303 	lsr.w	r3, r2, r3
 8006290:	4a09      	ldr	r2, [pc, #36]	@ (80062b8 <HAL_RCC_ClockConfig+0x1f8>)
 8006292:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006294:	4b09      	ldr	r3, [pc, #36]	@ (80062bc <HAL_RCC_ClockConfig+0x1fc>)
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	4618      	mov	r0, r3
 800629a:	f7fd fea5 	bl	8003fe8 <HAL_InitTick>
 800629e:	4603      	mov	r3, r0
 80062a0:	72fb      	strb	r3, [r7, #11]

  return status;
 80062a2:	7afb      	ldrb	r3, [r7, #11]
}
 80062a4:	4618      	mov	r0, r3
 80062a6:	3710      	adds	r7, #16
 80062a8:	46bd      	mov	sp, r7
 80062aa:	bd80      	pop	{r7, pc}
 80062ac:	40022000 	.word	0x40022000
 80062b0:	40021000 	.word	0x40021000
 80062b4:	080097d8 	.word	0x080097d8
 80062b8:	2000000c 	.word	0x2000000c
 80062bc:	20000010 	.word	0x20000010

080062c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80062c0:	b480      	push	{r7}
 80062c2:	b089      	sub	sp, #36	@ 0x24
 80062c4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80062c6:	2300      	movs	r3, #0
 80062c8:	61fb      	str	r3, [r7, #28]
 80062ca:	2300      	movs	r3, #0
 80062cc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80062ce:	4b3e      	ldr	r3, [pc, #248]	@ (80063c8 <HAL_RCC_GetSysClockFreq+0x108>)
 80062d0:	689b      	ldr	r3, [r3, #8]
 80062d2:	f003 030c 	and.w	r3, r3, #12
 80062d6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80062d8:	4b3b      	ldr	r3, [pc, #236]	@ (80063c8 <HAL_RCC_GetSysClockFreq+0x108>)
 80062da:	68db      	ldr	r3, [r3, #12]
 80062dc:	f003 0303 	and.w	r3, r3, #3
 80062e0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80062e2:	693b      	ldr	r3, [r7, #16]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d005      	beq.n	80062f4 <HAL_RCC_GetSysClockFreq+0x34>
 80062e8:	693b      	ldr	r3, [r7, #16]
 80062ea:	2b0c      	cmp	r3, #12
 80062ec:	d121      	bne.n	8006332 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	2b01      	cmp	r3, #1
 80062f2:	d11e      	bne.n	8006332 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80062f4:	4b34      	ldr	r3, [pc, #208]	@ (80063c8 <HAL_RCC_GetSysClockFreq+0x108>)
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f003 0308 	and.w	r3, r3, #8
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d107      	bne.n	8006310 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006300:	4b31      	ldr	r3, [pc, #196]	@ (80063c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8006302:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006306:	0a1b      	lsrs	r3, r3, #8
 8006308:	f003 030f 	and.w	r3, r3, #15
 800630c:	61fb      	str	r3, [r7, #28]
 800630e:	e005      	b.n	800631c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006310:	4b2d      	ldr	r3, [pc, #180]	@ (80063c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	091b      	lsrs	r3, r3, #4
 8006316:	f003 030f 	and.w	r3, r3, #15
 800631a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800631c:	4a2b      	ldr	r2, [pc, #172]	@ (80063cc <HAL_RCC_GetSysClockFreq+0x10c>)
 800631e:	69fb      	ldr	r3, [r7, #28]
 8006320:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006324:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006326:	693b      	ldr	r3, [r7, #16]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d10d      	bne.n	8006348 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800632c:	69fb      	ldr	r3, [r7, #28]
 800632e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006330:	e00a      	b.n	8006348 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8006332:	693b      	ldr	r3, [r7, #16]
 8006334:	2b04      	cmp	r3, #4
 8006336:	d102      	bne.n	800633e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006338:	4b25      	ldr	r3, [pc, #148]	@ (80063d0 <HAL_RCC_GetSysClockFreq+0x110>)
 800633a:	61bb      	str	r3, [r7, #24]
 800633c:	e004      	b.n	8006348 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800633e:	693b      	ldr	r3, [r7, #16]
 8006340:	2b08      	cmp	r3, #8
 8006342:	d101      	bne.n	8006348 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006344:	4b23      	ldr	r3, [pc, #140]	@ (80063d4 <HAL_RCC_GetSysClockFreq+0x114>)
 8006346:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006348:	693b      	ldr	r3, [r7, #16]
 800634a:	2b0c      	cmp	r3, #12
 800634c:	d134      	bne.n	80063b8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800634e:	4b1e      	ldr	r3, [pc, #120]	@ (80063c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8006350:	68db      	ldr	r3, [r3, #12]
 8006352:	f003 0303 	and.w	r3, r3, #3
 8006356:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	2b02      	cmp	r3, #2
 800635c:	d003      	beq.n	8006366 <HAL_RCC_GetSysClockFreq+0xa6>
 800635e:	68bb      	ldr	r3, [r7, #8]
 8006360:	2b03      	cmp	r3, #3
 8006362:	d003      	beq.n	800636c <HAL_RCC_GetSysClockFreq+0xac>
 8006364:	e005      	b.n	8006372 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8006366:	4b1a      	ldr	r3, [pc, #104]	@ (80063d0 <HAL_RCC_GetSysClockFreq+0x110>)
 8006368:	617b      	str	r3, [r7, #20]
      break;
 800636a:	e005      	b.n	8006378 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800636c:	4b19      	ldr	r3, [pc, #100]	@ (80063d4 <HAL_RCC_GetSysClockFreq+0x114>)
 800636e:	617b      	str	r3, [r7, #20]
      break;
 8006370:	e002      	b.n	8006378 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8006372:	69fb      	ldr	r3, [r7, #28]
 8006374:	617b      	str	r3, [r7, #20]
      break;
 8006376:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006378:	4b13      	ldr	r3, [pc, #76]	@ (80063c8 <HAL_RCC_GetSysClockFreq+0x108>)
 800637a:	68db      	ldr	r3, [r3, #12]
 800637c:	091b      	lsrs	r3, r3, #4
 800637e:	f003 0307 	and.w	r3, r3, #7
 8006382:	3301      	adds	r3, #1
 8006384:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006386:	4b10      	ldr	r3, [pc, #64]	@ (80063c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8006388:	68db      	ldr	r3, [r3, #12]
 800638a:	0a1b      	lsrs	r3, r3, #8
 800638c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006390:	697a      	ldr	r2, [r7, #20]
 8006392:	fb03 f202 	mul.w	r2, r3, r2
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	fbb2 f3f3 	udiv	r3, r2, r3
 800639c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800639e:	4b0a      	ldr	r3, [pc, #40]	@ (80063c8 <HAL_RCC_GetSysClockFreq+0x108>)
 80063a0:	68db      	ldr	r3, [r3, #12]
 80063a2:	0e5b      	lsrs	r3, r3, #25
 80063a4:	f003 0303 	and.w	r3, r3, #3
 80063a8:	3301      	adds	r3, #1
 80063aa:	005b      	lsls	r3, r3, #1
 80063ac:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80063ae:	697a      	ldr	r2, [r7, #20]
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80063b6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80063b8:	69bb      	ldr	r3, [r7, #24]
}
 80063ba:	4618      	mov	r0, r3
 80063bc:	3724      	adds	r7, #36	@ 0x24
 80063be:	46bd      	mov	sp, r7
 80063c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c4:	4770      	bx	lr
 80063c6:	bf00      	nop
 80063c8:	40021000 	.word	0x40021000
 80063cc:	080097e8 	.word	0x080097e8
 80063d0:	00f42400 	.word	0x00f42400
 80063d4:	007a1200 	.word	0x007a1200

080063d8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b086      	sub	sp, #24
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80063e0:	2300      	movs	r3, #0
 80063e2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80063e4:	4b2a      	ldr	r3, [pc, #168]	@ (8006490 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80063e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d003      	beq.n	80063f8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80063f0:	f7ff f9ee 	bl	80057d0 <HAL_PWREx_GetVoltageRange>
 80063f4:	6178      	str	r0, [r7, #20]
 80063f6:	e014      	b.n	8006422 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80063f8:	4b25      	ldr	r3, [pc, #148]	@ (8006490 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80063fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063fc:	4a24      	ldr	r2, [pc, #144]	@ (8006490 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80063fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006402:	6593      	str	r3, [r2, #88]	@ 0x58
 8006404:	4b22      	ldr	r3, [pc, #136]	@ (8006490 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006406:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006408:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800640c:	60fb      	str	r3, [r7, #12]
 800640e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006410:	f7ff f9de 	bl	80057d0 <HAL_PWREx_GetVoltageRange>
 8006414:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006416:	4b1e      	ldr	r3, [pc, #120]	@ (8006490 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006418:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800641a:	4a1d      	ldr	r2, [pc, #116]	@ (8006490 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800641c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006420:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006422:	697b      	ldr	r3, [r7, #20]
 8006424:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006428:	d10b      	bne.n	8006442 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2b80      	cmp	r3, #128	@ 0x80
 800642e:	d919      	bls.n	8006464 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2ba0      	cmp	r3, #160	@ 0xa0
 8006434:	d902      	bls.n	800643c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006436:	2302      	movs	r3, #2
 8006438:	613b      	str	r3, [r7, #16]
 800643a:	e013      	b.n	8006464 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800643c:	2301      	movs	r3, #1
 800643e:	613b      	str	r3, [r7, #16]
 8006440:	e010      	b.n	8006464 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2b80      	cmp	r3, #128	@ 0x80
 8006446:	d902      	bls.n	800644e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8006448:	2303      	movs	r3, #3
 800644a:	613b      	str	r3, [r7, #16]
 800644c:	e00a      	b.n	8006464 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2b80      	cmp	r3, #128	@ 0x80
 8006452:	d102      	bne.n	800645a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006454:	2302      	movs	r3, #2
 8006456:	613b      	str	r3, [r7, #16]
 8006458:	e004      	b.n	8006464 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2b70      	cmp	r3, #112	@ 0x70
 800645e:	d101      	bne.n	8006464 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006460:	2301      	movs	r3, #1
 8006462:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006464:	4b0b      	ldr	r3, [pc, #44]	@ (8006494 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f023 0207 	bic.w	r2, r3, #7
 800646c:	4909      	ldr	r1, [pc, #36]	@ (8006494 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800646e:	693b      	ldr	r3, [r7, #16]
 8006470:	4313      	orrs	r3, r2
 8006472:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006474:	4b07      	ldr	r3, [pc, #28]	@ (8006494 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f003 0307 	and.w	r3, r3, #7
 800647c:	693a      	ldr	r2, [r7, #16]
 800647e:	429a      	cmp	r2, r3
 8006480:	d001      	beq.n	8006486 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8006482:	2301      	movs	r3, #1
 8006484:	e000      	b.n	8006488 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8006486:	2300      	movs	r3, #0
}
 8006488:	4618      	mov	r0, r3
 800648a:	3718      	adds	r7, #24
 800648c:	46bd      	mov	sp, r7
 800648e:	bd80      	pop	{r7, pc}
 8006490:	40021000 	.word	0x40021000
 8006494:	40022000 	.word	0x40022000

08006498 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b086      	sub	sp, #24
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80064a0:	2300      	movs	r3, #0
 80064a2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80064a4:	2300      	movs	r3, #0
 80064a6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d031      	beq.n	8006518 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064b8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80064bc:	d01a      	beq.n	80064f4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80064be:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80064c2:	d814      	bhi.n	80064ee <HAL_RCCEx_PeriphCLKConfig+0x56>
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d009      	beq.n	80064dc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80064c8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80064cc:	d10f      	bne.n	80064ee <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80064ce:	4b5d      	ldr	r3, [pc, #372]	@ (8006644 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80064d0:	68db      	ldr	r3, [r3, #12]
 80064d2:	4a5c      	ldr	r2, [pc, #368]	@ (8006644 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80064d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80064d8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80064da:	e00c      	b.n	80064f6 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	3304      	adds	r3, #4
 80064e0:	2100      	movs	r1, #0
 80064e2:	4618      	mov	r0, r3
 80064e4:	f000 f9de 	bl	80068a4 <RCCEx_PLLSAI1_Config>
 80064e8:	4603      	mov	r3, r0
 80064ea:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80064ec:	e003      	b.n	80064f6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80064ee:	2301      	movs	r3, #1
 80064f0:	74fb      	strb	r3, [r7, #19]
      break;
 80064f2:	e000      	b.n	80064f6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80064f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80064f6:	7cfb      	ldrb	r3, [r7, #19]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d10b      	bne.n	8006514 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80064fc:	4b51      	ldr	r3, [pc, #324]	@ (8006644 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80064fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006502:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800650a:	494e      	ldr	r1, [pc, #312]	@ (8006644 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800650c:	4313      	orrs	r3, r2
 800650e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8006512:	e001      	b.n	8006518 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006514:	7cfb      	ldrb	r3, [r7, #19]
 8006516:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006520:	2b00      	cmp	r3, #0
 8006522:	f000 809e 	beq.w	8006662 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006526:	2300      	movs	r3, #0
 8006528:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800652a:	4b46      	ldr	r3, [pc, #280]	@ (8006644 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800652c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800652e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006532:	2b00      	cmp	r3, #0
 8006534:	d101      	bne.n	800653a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8006536:	2301      	movs	r3, #1
 8006538:	e000      	b.n	800653c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800653a:	2300      	movs	r3, #0
 800653c:	2b00      	cmp	r3, #0
 800653e:	d00d      	beq.n	800655c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006540:	4b40      	ldr	r3, [pc, #256]	@ (8006644 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006542:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006544:	4a3f      	ldr	r2, [pc, #252]	@ (8006644 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006546:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800654a:	6593      	str	r3, [r2, #88]	@ 0x58
 800654c:	4b3d      	ldr	r3, [pc, #244]	@ (8006644 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800654e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006550:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006554:	60bb      	str	r3, [r7, #8]
 8006556:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006558:	2301      	movs	r3, #1
 800655a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800655c:	4b3a      	ldr	r3, [pc, #232]	@ (8006648 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	4a39      	ldr	r2, [pc, #228]	@ (8006648 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8006562:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006566:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006568:	f7fd fd8e 	bl	8004088 <HAL_GetTick>
 800656c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800656e:	e009      	b.n	8006584 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006570:	f7fd fd8a 	bl	8004088 <HAL_GetTick>
 8006574:	4602      	mov	r2, r0
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	1ad3      	subs	r3, r2, r3
 800657a:	2b02      	cmp	r3, #2
 800657c:	d902      	bls.n	8006584 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800657e:	2303      	movs	r3, #3
 8006580:	74fb      	strb	r3, [r7, #19]
        break;
 8006582:	e005      	b.n	8006590 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006584:	4b30      	ldr	r3, [pc, #192]	@ (8006648 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800658c:	2b00      	cmp	r3, #0
 800658e:	d0ef      	beq.n	8006570 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8006590:	7cfb      	ldrb	r3, [r7, #19]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d15a      	bne.n	800664c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006596:	4b2b      	ldr	r3, [pc, #172]	@ (8006644 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006598:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800659c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80065a0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80065a2:	697b      	ldr	r3, [r7, #20]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d01e      	beq.n	80065e6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80065ac:	697a      	ldr	r2, [r7, #20]
 80065ae:	429a      	cmp	r2, r3
 80065b0:	d019      	beq.n	80065e6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80065b2:	4b24      	ldr	r3, [pc, #144]	@ (8006644 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80065b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80065b8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80065bc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80065be:	4b21      	ldr	r3, [pc, #132]	@ (8006644 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80065c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80065c4:	4a1f      	ldr	r2, [pc, #124]	@ (8006644 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80065c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80065ca:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80065ce:	4b1d      	ldr	r3, [pc, #116]	@ (8006644 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80065d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80065d4:	4a1b      	ldr	r2, [pc, #108]	@ (8006644 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80065d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80065da:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80065de:	4a19      	ldr	r2, [pc, #100]	@ (8006644 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80065e0:	697b      	ldr	r3, [r7, #20]
 80065e2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80065e6:	697b      	ldr	r3, [r7, #20]
 80065e8:	f003 0301 	and.w	r3, r3, #1
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d016      	beq.n	800661e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065f0:	f7fd fd4a 	bl	8004088 <HAL_GetTick>
 80065f4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80065f6:	e00b      	b.n	8006610 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80065f8:	f7fd fd46 	bl	8004088 <HAL_GetTick>
 80065fc:	4602      	mov	r2, r0
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	1ad3      	subs	r3, r2, r3
 8006602:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006606:	4293      	cmp	r3, r2
 8006608:	d902      	bls.n	8006610 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800660a:	2303      	movs	r3, #3
 800660c:	74fb      	strb	r3, [r7, #19]
            break;
 800660e:	e006      	b.n	800661e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006610:	4b0c      	ldr	r3, [pc, #48]	@ (8006644 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006612:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006616:	f003 0302 	and.w	r3, r3, #2
 800661a:	2b00      	cmp	r3, #0
 800661c:	d0ec      	beq.n	80065f8 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800661e:	7cfb      	ldrb	r3, [r7, #19]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d10b      	bne.n	800663c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006624:	4b07      	ldr	r3, [pc, #28]	@ (8006644 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006626:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800662a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006632:	4904      	ldr	r1, [pc, #16]	@ (8006644 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006634:	4313      	orrs	r3, r2
 8006636:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800663a:	e009      	b.n	8006650 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800663c:	7cfb      	ldrb	r3, [r7, #19]
 800663e:	74bb      	strb	r3, [r7, #18]
 8006640:	e006      	b.n	8006650 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8006642:	bf00      	nop
 8006644:	40021000 	.word	0x40021000
 8006648:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800664c:	7cfb      	ldrb	r3, [r7, #19]
 800664e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006650:	7c7b      	ldrb	r3, [r7, #17]
 8006652:	2b01      	cmp	r3, #1
 8006654:	d105      	bne.n	8006662 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006656:	4b8a      	ldr	r3, [pc, #552]	@ (8006880 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006658:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800665a:	4a89      	ldr	r2, [pc, #548]	@ (8006880 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800665c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006660:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f003 0301 	and.w	r3, r3, #1
 800666a:	2b00      	cmp	r3, #0
 800666c:	d00a      	beq.n	8006684 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800666e:	4b84      	ldr	r3, [pc, #528]	@ (8006880 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006670:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006674:	f023 0203 	bic.w	r2, r3, #3
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	6a1b      	ldr	r3, [r3, #32]
 800667c:	4980      	ldr	r1, [pc, #512]	@ (8006880 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800667e:	4313      	orrs	r3, r2
 8006680:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f003 0302 	and.w	r3, r3, #2
 800668c:	2b00      	cmp	r3, #0
 800668e:	d00a      	beq.n	80066a6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006690:	4b7b      	ldr	r3, [pc, #492]	@ (8006880 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006692:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006696:	f023 020c 	bic.w	r2, r3, #12
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800669e:	4978      	ldr	r1, [pc, #480]	@ (8006880 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80066a0:	4313      	orrs	r3, r2
 80066a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f003 0320 	and.w	r3, r3, #32
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d00a      	beq.n	80066c8 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80066b2:	4b73      	ldr	r3, [pc, #460]	@ (8006880 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80066b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066b8:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066c0:	496f      	ldr	r1, [pc, #444]	@ (8006880 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80066c2:	4313      	orrs	r3, r2
 80066c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d00a      	beq.n	80066ea <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80066d4:	4b6a      	ldr	r3, [pc, #424]	@ (8006880 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80066d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066da:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80066e2:	4967      	ldr	r1, [pc, #412]	@ (8006880 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80066e4:	4313      	orrs	r3, r2
 80066e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d00a      	beq.n	800670c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80066f6:	4b62      	ldr	r3, [pc, #392]	@ (8006880 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80066f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066fc:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006704:	495e      	ldr	r1, [pc, #376]	@ (8006880 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006706:	4313      	orrs	r3, r2
 8006708:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006714:	2b00      	cmp	r3, #0
 8006716:	d00a      	beq.n	800672e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006718:	4b59      	ldr	r3, [pc, #356]	@ (8006880 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800671a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800671e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006726:	4956      	ldr	r1, [pc, #344]	@ (8006880 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006728:	4313      	orrs	r3, r2
 800672a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006736:	2b00      	cmp	r3, #0
 8006738:	d00a      	beq.n	8006750 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800673a:	4b51      	ldr	r3, [pc, #324]	@ (8006880 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800673c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006740:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006748:	494d      	ldr	r1, [pc, #308]	@ (8006880 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800674a:	4313      	orrs	r3, r2
 800674c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006758:	2b00      	cmp	r3, #0
 800675a:	d028      	beq.n	80067ae <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800675c:	4b48      	ldr	r3, [pc, #288]	@ (8006880 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800675e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006762:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800676a:	4945      	ldr	r1, [pc, #276]	@ (8006880 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800676c:	4313      	orrs	r3, r2
 800676e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006776:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800677a:	d106      	bne.n	800678a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800677c:	4b40      	ldr	r3, [pc, #256]	@ (8006880 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800677e:	68db      	ldr	r3, [r3, #12]
 8006780:	4a3f      	ldr	r2, [pc, #252]	@ (8006880 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006782:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006786:	60d3      	str	r3, [r2, #12]
 8006788:	e011      	b.n	80067ae <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800678e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006792:	d10c      	bne.n	80067ae <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	3304      	adds	r3, #4
 8006798:	2101      	movs	r1, #1
 800679a:	4618      	mov	r0, r3
 800679c:	f000 f882 	bl	80068a4 <RCCEx_PLLSAI1_Config>
 80067a0:	4603      	mov	r3, r0
 80067a2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80067a4:	7cfb      	ldrb	r3, [r7, #19]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d001      	beq.n	80067ae <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 80067aa:	7cfb      	ldrb	r3, [r7, #19]
 80067ac:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d028      	beq.n	800680c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80067ba:	4b31      	ldr	r3, [pc, #196]	@ (8006880 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80067bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80067c0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067c8:	492d      	ldr	r1, [pc, #180]	@ (8006880 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80067ca:	4313      	orrs	r3, r2
 80067cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067d4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80067d8:	d106      	bne.n	80067e8 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80067da:	4b29      	ldr	r3, [pc, #164]	@ (8006880 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80067dc:	68db      	ldr	r3, [r3, #12]
 80067de:	4a28      	ldr	r2, [pc, #160]	@ (8006880 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80067e0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80067e4:	60d3      	str	r3, [r2, #12]
 80067e6:	e011      	b.n	800680c <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067ec:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80067f0:	d10c      	bne.n	800680c <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	3304      	adds	r3, #4
 80067f6:	2101      	movs	r1, #1
 80067f8:	4618      	mov	r0, r3
 80067fa:	f000 f853 	bl	80068a4 <RCCEx_PLLSAI1_Config>
 80067fe:	4603      	mov	r3, r0
 8006800:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006802:	7cfb      	ldrb	r3, [r7, #19]
 8006804:	2b00      	cmp	r3, #0
 8006806:	d001      	beq.n	800680c <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8006808:	7cfb      	ldrb	r3, [r7, #19]
 800680a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006814:	2b00      	cmp	r3, #0
 8006816:	d01c      	beq.n	8006852 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006818:	4b19      	ldr	r3, [pc, #100]	@ (8006880 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800681a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800681e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006826:	4916      	ldr	r1, [pc, #88]	@ (8006880 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006828:	4313      	orrs	r3, r2
 800682a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006832:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006836:	d10c      	bne.n	8006852 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	3304      	adds	r3, #4
 800683c:	2102      	movs	r1, #2
 800683e:	4618      	mov	r0, r3
 8006840:	f000 f830 	bl	80068a4 <RCCEx_PLLSAI1_Config>
 8006844:	4603      	mov	r3, r0
 8006846:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006848:	7cfb      	ldrb	r3, [r7, #19]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d001      	beq.n	8006852 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 800684e:	7cfb      	ldrb	r3, [r7, #19]
 8006850:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800685a:	2b00      	cmp	r3, #0
 800685c:	d00a      	beq.n	8006874 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800685e:	4b08      	ldr	r3, [pc, #32]	@ (8006880 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006860:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006864:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800686c:	4904      	ldr	r1, [pc, #16]	@ (8006880 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800686e:	4313      	orrs	r3, r2
 8006870:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006874:	7cbb      	ldrb	r3, [r7, #18]
}
 8006876:	4618      	mov	r0, r3
 8006878:	3718      	adds	r7, #24
 800687a:	46bd      	mov	sp, r7
 800687c:	bd80      	pop	{r7, pc}
 800687e:	bf00      	nop
 8006880:	40021000 	.word	0x40021000

08006884 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8006884:	b480      	push	{r7}
 8006886:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8006888:	4b05      	ldr	r3, [pc, #20]	@ (80068a0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	4a04      	ldr	r2, [pc, #16]	@ (80068a0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800688e:	f043 0304 	orr.w	r3, r3, #4
 8006892:	6013      	str	r3, [r2, #0]
}
 8006894:	bf00      	nop
 8006896:	46bd      	mov	sp, r7
 8006898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689c:	4770      	bx	lr
 800689e:	bf00      	nop
 80068a0:	40021000 	.word	0x40021000

080068a4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b084      	sub	sp, #16
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
 80068ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80068ae:	2300      	movs	r3, #0
 80068b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80068b2:	4b74      	ldr	r3, [pc, #464]	@ (8006a84 <RCCEx_PLLSAI1_Config+0x1e0>)
 80068b4:	68db      	ldr	r3, [r3, #12]
 80068b6:	f003 0303 	and.w	r3, r3, #3
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d018      	beq.n	80068f0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80068be:	4b71      	ldr	r3, [pc, #452]	@ (8006a84 <RCCEx_PLLSAI1_Config+0x1e0>)
 80068c0:	68db      	ldr	r3, [r3, #12]
 80068c2:	f003 0203 	and.w	r2, r3, #3
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	429a      	cmp	r2, r3
 80068cc:	d10d      	bne.n	80068ea <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
       ||
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d009      	beq.n	80068ea <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80068d6:	4b6b      	ldr	r3, [pc, #428]	@ (8006a84 <RCCEx_PLLSAI1_Config+0x1e0>)
 80068d8:	68db      	ldr	r3, [r3, #12]
 80068da:	091b      	lsrs	r3, r3, #4
 80068dc:	f003 0307 	and.w	r3, r3, #7
 80068e0:	1c5a      	adds	r2, r3, #1
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	685b      	ldr	r3, [r3, #4]
       ||
 80068e6:	429a      	cmp	r2, r3
 80068e8:	d047      	beq.n	800697a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80068ea:	2301      	movs	r3, #1
 80068ec:	73fb      	strb	r3, [r7, #15]
 80068ee:	e044      	b.n	800697a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	2b03      	cmp	r3, #3
 80068f6:	d018      	beq.n	800692a <RCCEx_PLLSAI1_Config+0x86>
 80068f8:	2b03      	cmp	r3, #3
 80068fa:	d825      	bhi.n	8006948 <RCCEx_PLLSAI1_Config+0xa4>
 80068fc:	2b01      	cmp	r3, #1
 80068fe:	d002      	beq.n	8006906 <RCCEx_PLLSAI1_Config+0x62>
 8006900:	2b02      	cmp	r3, #2
 8006902:	d009      	beq.n	8006918 <RCCEx_PLLSAI1_Config+0x74>
 8006904:	e020      	b.n	8006948 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006906:	4b5f      	ldr	r3, [pc, #380]	@ (8006a84 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f003 0302 	and.w	r3, r3, #2
 800690e:	2b00      	cmp	r3, #0
 8006910:	d11d      	bne.n	800694e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8006912:	2301      	movs	r3, #1
 8006914:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006916:	e01a      	b.n	800694e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006918:	4b5a      	ldr	r3, [pc, #360]	@ (8006a84 <RCCEx_PLLSAI1_Config+0x1e0>)
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006920:	2b00      	cmp	r3, #0
 8006922:	d116      	bne.n	8006952 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8006924:	2301      	movs	r3, #1
 8006926:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006928:	e013      	b.n	8006952 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800692a:	4b56      	ldr	r3, [pc, #344]	@ (8006a84 <RCCEx_PLLSAI1_Config+0x1e0>)
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006932:	2b00      	cmp	r3, #0
 8006934:	d10f      	bne.n	8006956 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006936:	4b53      	ldr	r3, [pc, #332]	@ (8006a84 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800693e:	2b00      	cmp	r3, #0
 8006940:	d109      	bne.n	8006956 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8006942:	2301      	movs	r3, #1
 8006944:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006946:	e006      	b.n	8006956 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006948:	2301      	movs	r3, #1
 800694a:	73fb      	strb	r3, [r7, #15]
      break;
 800694c:	e004      	b.n	8006958 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800694e:	bf00      	nop
 8006950:	e002      	b.n	8006958 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006952:	bf00      	nop
 8006954:	e000      	b.n	8006958 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006956:	bf00      	nop
    }

    if(status == HAL_OK)
 8006958:	7bfb      	ldrb	r3, [r7, #15]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d10d      	bne.n	800697a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800695e:	4b49      	ldr	r3, [pc, #292]	@ (8006a84 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006960:	68db      	ldr	r3, [r3, #12]
 8006962:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6819      	ldr	r1, [r3, #0]
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	685b      	ldr	r3, [r3, #4]
 800696e:	3b01      	subs	r3, #1
 8006970:	011b      	lsls	r3, r3, #4
 8006972:	430b      	orrs	r3, r1
 8006974:	4943      	ldr	r1, [pc, #268]	@ (8006a84 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006976:	4313      	orrs	r3, r2
 8006978:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800697a:	7bfb      	ldrb	r3, [r7, #15]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d17c      	bne.n	8006a7a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006980:	4b40      	ldr	r3, [pc, #256]	@ (8006a84 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	4a3f      	ldr	r2, [pc, #252]	@ (8006a84 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006986:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800698a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800698c:	f7fd fb7c 	bl	8004088 <HAL_GetTick>
 8006990:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006992:	e009      	b.n	80069a8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006994:	f7fd fb78 	bl	8004088 <HAL_GetTick>
 8006998:	4602      	mov	r2, r0
 800699a:	68bb      	ldr	r3, [r7, #8]
 800699c:	1ad3      	subs	r3, r2, r3
 800699e:	2b02      	cmp	r3, #2
 80069a0:	d902      	bls.n	80069a8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80069a2:	2303      	movs	r3, #3
 80069a4:	73fb      	strb	r3, [r7, #15]
        break;
 80069a6:	e005      	b.n	80069b4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80069a8:	4b36      	ldr	r3, [pc, #216]	@ (8006a84 <RCCEx_PLLSAI1_Config+0x1e0>)
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d1ef      	bne.n	8006994 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80069b4:	7bfb      	ldrb	r3, [r7, #15]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d15f      	bne.n	8006a7a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d110      	bne.n	80069e2 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80069c0:	4b30      	ldr	r3, [pc, #192]	@ (8006a84 <RCCEx_PLLSAI1_Config+0x1e0>)
 80069c2:	691b      	ldr	r3, [r3, #16]
 80069c4:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 80069c8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80069cc:	687a      	ldr	r2, [r7, #4]
 80069ce:	6892      	ldr	r2, [r2, #8]
 80069d0:	0211      	lsls	r1, r2, #8
 80069d2:	687a      	ldr	r2, [r7, #4]
 80069d4:	68d2      	ldr	r2, [r2, #12]
 80069d6:	06d2      	lsls	r2, r2, #27
 80069d8:	430a      	orrs	r2, r1
 80069da:	492a      	ldr	r1, [pc, #168]	@ (8006a84 <RCCEx_PLLSAI1_Config+0x1e0>)
 80069dc:	4313      	orrs	r3, r2
 80069de:	610b      	str	r3, [r1, #16]
 80069e0:	e027      	b.n	8006a32 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	2b01      	cmp	r3, #1
 80069e6:	d112      	bne.n	8006a0e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80069e8:	4b26      	ldr	r3, [pc, #152]	@ (8006a84 <RCCEx_PLLSAI1_Config+0x1e0>)
 80069ea:	691b      	ldr	r3, [r3, #16]
 80069ec:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80069f0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80069f4:	687a      	ldr	r2, [r7, #4]
 80069f6:	6892      	ldr	r2, [r2, #8]
 80069f8:	0211      	lsls	r1, r2, #8
 80069fa:	687a      	ldr	r2, [r7, #4]
 80069fc:	6912      	ldr	r2, [r2, #16]
 80069fe:	0852      	lsrs	r2, r2, #1
 8006a00:	3a01      	subs	r2, #1
 8006a02:	0552      	lsls	r2, r2, #21
 8006a04:	430a      	orrs	r2, r1
 8006a06:	491f      	ldr	r1, [pc, #124]	@ (8006a84 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006a08:	4313      	orrs	r3, r2
 8006a0a:	610b      	str	r3, [r1, #16]
 8006a0c:	e011      	b.n	8006a32 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006a0e:	4b1d      	ldr	r3, [pc, #116]	@ (8006a84 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006a10:	691b      	ldr	r3, [r3, #16]
 8006a12:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8006a16:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8006a1a:	687a      	ldr	r2, [r7, #4]
 8006a1c:	6892      	ldr	r2, [r2, #8]
 8006a1e:	0211      	lsls	r1, r2, #8
 8006a20:	687a      	ldr	r2, [r7, #4]
 8006a22:	6952      	ldr	r2, [r2, #20]
 8006a24:	0852      	lsrs	r2, r2, #1
 8006a26:	3a01      	subs	r2, #1
 8006a28:	0652      	lsls	r2, r2, #25
 8006a2a:	430a      	orrs	r2, r1
 8006a2c:	4915      	ldr	r1, [pc, #84]	@ (8006a84 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006a2e:	4313      	orrs	r3, r2
 8006a30:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006a32:	4b14      	ldr	r3, [pc, #80]	@ (8006a84 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	4a13      	ldr	r2, [pc, #76]	@ (8006a84 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006a38:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006a3c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a3e:	f7fd fb23 	bl	8004088 <HAL_GetTick>
 8006a42:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006a44:	e009      	b.n	8006a5a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006a46:	f7fd fb1f 	bl	8004088 <HAL_GetTick>
 8006a4a:	4602      	mov	r2, r0
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	1ad3      	subs	r3, r2, r3
 8006a50:	2b02      	cmp	r3, #2
 8006a52:	d902      	bls.n	8006a5a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8006a54:	2303      	movs	r3, #3
 8006a56:	73fb      	strb	r3, [r7, #15]
          break;
 8006a58:	e005      	b.n	8006a66 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006a5a:	4b0a      	ldr	r3, [pc, #40]	@ (8006a84 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d0ef      	beq.n	8006a46 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8006a66:	7bfb      	ldrb	r3, [r7, #15]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d106      	bne.n	8006a7a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006a6c:	4b05      	ldr	r3, [pc, #20]	@ (8006a84 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006a6e:	691a      	ldr	r2, [r3, #16]
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	699b      	ldr	r3, [r3, #24]
 8006a74:	4903      	ldr	r1, [pc, #12]	@ (8006a84 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006a76:	4313      	orrs	r3, r2
 8006a78:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006a7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	3710      	adds	r7, #16
 8006a80:	46bd      	mov	sp, r7
 8006a82:	bd80      	pop	{r7, pc}
 8006a84:	40021000 	.word	0x40021000

08006a88 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b084      	sub	sp, #16
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d101      	bne.n	8006a9a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006a96:	2301      	movs	r3, #1
 8006a98:	e095      	b.n	8006bc6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d108      	bne.n	8006ab4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	685b      	ldr	r3, [r3, #4]
 8006aa6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006aaa:	d009      	beq.n	8006ac0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2200      	movs	r2, #0
 8006ab0:	61da      	str	r2, [r3, #28]
 8006ab2:	e005      	b.n	8006ac0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	2200      	movs	r2, #0
 8006abe:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006acc:	b2db      	uxtb	r3, r3
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d106      	bne.n	8006ae0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006ada:	6878      	ldr	r0, [r7, #4]
 8006adc:	f7fd f8f8 	bl	8003cd0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2202      	movs	r2, #2
 8006ae4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	681a      	ldr	r2, [r3, #0]
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006af6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	68db      	ldr	r3, [r3, #12]
 8006afc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006b00:	d902      	bls.n	8006b08 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006b02:	2300      	movs	r3, #0
 8006b04:	60fb      	str	r3, [r7, #12]
 8006b06:	e002      	b.n	8006b0e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006b08:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006b0c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	68db      	ldr	r3, [r3, #12]
 8006b12:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8006b16:	d007      	beq.n	8006b28 <HAL_SPI_Init+0xa0>
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	68db      	ldr	r3, [r3, #12]
 8006b1c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006b20:	d002      	beq.n	8006b28 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	2200      	movs	r2, #0
 8006b26:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	685b      	ldr	r3, [r3, #4]
 8006b2c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	689b      	ldr	r3, [r3, #8]
 8006b34:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006b38:	431a      	orrs	r2, r3
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	691b      	ldr	r3, [r3, #16]
 8006b3e:	f003 0302 	and.w	r3, r3, #2
 8006b42:	431a      	orrs	r2, r3
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	695b      	ldr	r3, [r3, #20]
 8006b48:	f003 0301 	and.w	r3, r3, #1
 8006b4c:	431a      	orrs	r2, r3
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	699b      	ldr	r3, [r3, #24]
 8006b52:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006b56:	431a      	orrs	r2, r3
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	69db      	ldr	r3, [r3, #28]
 8006b5c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006b60:	431a      	orrs	r2, r3
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6a1b      	ldr	r3, [r3, #32]
 8006b66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b6a:	ea42 0103 	orr.w	r1, r2, r3
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b72:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	430a      	orrs	r2, r1
 8006b7c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	699b      	ldr	r3, [r3, #24]
 8006b82:	0c1b      	lsrs	r3, r3, #16
 8006b84:	f003 0204 	and.w	r2, r3, #4
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b8c:	f003 0310 	and.w	r3, r3, #16
 8006b90:	431a      	orrs	r2, r3
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b96:	f003 0308 	and.w	r3, r3, #8
 8006b9a:	431a      	orrs	r2, r3
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	68db      	ldr	r3, [r3, #12]
 8006ba0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8006ba4:	ea42 0103 	orr.w	r1, r2, r3
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	430a      	orrs	r2, r1
 8006bb4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2200      	movs	r2, #0
 8006bba:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2201      	movs	r2, #1
 8006bc0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8006bc4:	2300      	movs	r3, #0
}
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	3710      	adds	r7, #16
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	bd80      	pop	{r7, pc}

08006bce <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006bce:	b580      	push	{r7, lr}
 8006bd0:	b088      	sub	sp, #32
 8006bd2:	af00      	add	r7, sp, #0
 8006bd4:	60f8      	str	r0, [r7, #12]
 8006bd6:	60b9      	str	r1, [r7, #8]
 8006bd8:	603b      	str	r3, [r7, #0]
 8006bda:	4613      	mov	r3, r2
 8006bdc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006bde:	2300      	movs	r3, #0
 8006be0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006be8:	2b01      	cmp	r3, #1
 8006bea:	d101      	bne.n	8006bf0 <HAL_SPI_Transmit+0x22>
 8006bec:	2302      	movs	r3, #2
 8006bee:	e158      	b.n	8006ea2 <HAL_SPI_Transmit+0x2d4>
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	2201      	movs	r2, #1
 8006bf4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006bf8:	f7fd fa46 	bl	8004088 <HAL_GetTick>
 8006bfc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006bfe:	88fb      	ldrh	r3, [r7, #6]
 8006c00:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006c08:	b2db      	uxtb	r3, r3
 8006c0a:	2b01      	cmp	r3, #1
 8006c0c:	d002      	beq.n	8006c14 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006c0e:	2302      	movs	r3, #2
 8006c10:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006c12:	e13d      	b.n	8006e90 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8006c14:	68bb      	ldr	r3, [r7, #8]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d002      	beq.n	8006c20 <HAL_SPI_Transmit+0x52>
 8006c1a:	88fb      	ldrh	r3, [r7, #6]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d102      	bne.n	8006c26 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006c20:	2301      	movs	r3, #1
 8006c22:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006c24:	e134      	b.n	8006e90 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	2203      	movs	r2, #3
 8006c2a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	2200      	movs	r2, #0
 8006c32:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	68ba      	ldr	r2, [r7, #8]
 8006c38:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	88fa      	ldrh	r2, [r7, #6]
 8006c3e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	88fa      	ldrh	r2, [r7, #6]
 8006c44:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	2200      	movs	r2, #0
 8006c4a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	2200      	movs	r2, #0
 8006c50:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	2200      	movs	r2, #0
 8006c58:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	2200      	movs	r2, #0
 8006c60:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	2200      	movs	r2, #0
 8006c66:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	689b      	ldr	r3, [r3, #8]
 8006c6c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006c70:	d10f      	bne.n	8006c92 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	681a      	ldr	r2, [r3, #0]
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006c80:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	681a      	ldr	r2, [r3, #0]
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006c90:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c9c:	2b40      	cmp	r3, #64	@ 0x40
 8006c9e:	d007      	beq.n	8006cb0 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	681a      	ldr	r2, [r3, #0]
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006cae:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	68db      	ldr	r3, [r3, #12]
 8006cb4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006cb8:	d94b      	bls.n	8006d52 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	685b      	ldr	r3, [r3, #4]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d002      	beq.n	8006cc8 <HAL_SPI_Transmit+0xfa>
 8006cc2:	8afb      	ldrh	r3, [r7, #22]
 8006cc4:	2b01      	cmp	r3, #1
 8006cc6:	d13e      	bne.n	8006d46 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ccc:	881a      	ldrh	r2, [r3, #0]
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cd8:	1c9a      	adds	r2, r3, #2
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006ce2:	b29b      	uxth	r3, r3
 8006ce4:	3b01      	subs	r3, #1
 8006ce6:	b29a      	uxth	r2, r3
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006cec:	e02b      	b.n	8006d46 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	689b      	ldr	r3, [r3, #8]
 8006cf4:	f003 0302 	and.w	r3, r3, #2
 8006cf8:	2b02      	cmp	r3, #2
 8006cfa:	d112      	bne.n	8006d22 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d00:	881a      	ldrh	r2, [r3, #0]
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d0c:	1c9a      	adds	r2, r3, #2
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006d16:	b29b      	uxth	r3, r3
 8006d18:	3b01      	subs	r3, #1
 8006d1a:	b29a      	uxth	r2, r3
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006d20:	e011      	b.n	8006d46 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006d22:	f7fd f9b1 	bl	8004088 <HAL_GetTick>
 8006d26:	4602      	mov	r2, r0
 8006d28:	69bb      	ldr	r3, [r7, #24]
 8006d2a:	1ad3      	subs	r3, r2, r3
 8006d2c:	683a      	ldr	r2, [r7, #0]
 8006d2e:	429a      	cmp	r2, r3
 8006d30:	d803      	bhi.n	8006d3a <HAL_SPI_Transmit+0x16c>
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d38:	d102      	bne.n	8006d40 <HAL_SPI_Transmit+0x172>
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d102      	bne.n	8006d46 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8006d40:	2303      	movs	r3, #3
 8006d42:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006d44:	e0a4      	b.n	8006e90 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006d4a:	b29b      	uxth	r3, r3
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d1ce      	bne.n	8006cee <HAL_SPI_Transmit+0x120>
 8006d50:	e07c      	b.n	8006e4c <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	685b      	ldr	r3, [r3, #4]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d002      	beq.n	8006d60 <HAL_SPI_Transmit+0x192>
 8006d5a:	8afb      	ldrh	r3, [r7, #22]
 8006d5c:	2b01      	cmp	r3, #1
 8006d5e:	d170      	bne.n	8006e42 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006d64:	b29b      	uxth	r3, r3
 8006d66:	2b01      	cmp	r3, #1
 8006d68:	d912      	bls.n	8006d90 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d6e:	881a      	ldrh	r2, [r3, #0]
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d7a:	1c9a      	adds	r2, r3, #2
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006d84:	b29b      	uxth	r3, r3
 8006d86:	3b02      	subs	r3, #2
 8006d88:	b29a      	uxth	r2, r3
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006d8e:	e058      	b.n	8006e42 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	330c      	adds	r3, #12
 8006d9a:	7812      	ldrb	r2, [r2, #0]
 8006d9c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006da2:	1c5a      	adds	r2, r3, #1
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006dac:	b29b      	uxth	r3, r3
 8006dae:	3b01      	subs	r3, #1
 8006db0:	b29a      	uxth	r2, r3
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8006db6:	e044      	b.n	8006e42 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	689b      	ldr	r3, [r3, #8]
 8006dbe:	f003 0302 	and.w	r3, r3, #2
 8006dc2:	2b02      	cmp	r3, #2
 8006dc4:	d12b      	bne.n	8006e1e <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006dca:	b29b      	uxth	r3, r3
 8006dcc:	2b01      	cmp	r3, #1
 8006dce:	d912      	bls.n	8006df6 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dd4:	881a      	ldrh	r2, [r3, #0]
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006de0:	1c9a      	adds	r2, r3, #2
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006dea:	b29b      	uxth	r3, r3
 8006dec:	3b02      	subs	r3, #2
 8006dee:	b29a      	uxth	r2, r3
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006df4:	e025      	b.n	8006e42 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	330c      	adds	r3, #12
 8006e00:	7812      	ldrb	r2, [r2, #0]
 8006e02:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e08:	1c5a      	adds	r2, r3, #1
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006e12:	b29b      	uxth	r3, r3
 8006e14:	3b01      	subs	r3, #1
 8006e16:	b29a      	uxth	r2, r3
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006e1c:	e011      	b.n	8006e42 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006e1e:	f7fd f933 	bl	8004088 <HAL_GetTick>
 8006e22:	4602      	mov	r2, r0
 8006e24:	69bb      	ldr	r3, [r7, #24]
 8006e26:	1ad3      	subs	r3, r2, r3
 8006e28:	683a      	ldr	r2, [r7, #0]
 8006e2a:	429a      	cmp	r2, r3
 8006e2c:	d803      	bhi.n	8006e36 <HAL_SPI_Transmit+0x268>
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e34:	d102      	bne.n	8006e3c <HAL_SPI_Transmit+0x26e>
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d102      	bne.n	8006e42 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8006e3c:	2303      	movs	r3, #3
 8006e3e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006e40:	e026      	b.n	8006e90 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006e46:	b29b      	uxth	r3, r3
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d1b5      	bne.n	8006db8 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006e4c:	69ba      	ldr	r2, [r7, #24]
 8006e4e:	6839      	ldr	r1, [r7, #0]
 8006e50:	68f8      	ldr	r0, [r7, #12]
 8006e52:	f000 f949 	bl	80070e8 <SPI_EndRxTxTransaction>
 8006e56:	4603      	mov	r3, r0
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d002      	beq.n	8006e62 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	2220      	movs	r2, #32
 8006e60:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	689b      	ldr	r3, [r3, #8]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d10a      	bne.n	8006e80 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	613b      	str	r3, [r7, #16]
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	68db      	ldr	r3, [r3, #12]
 8006e74:	613b      	str	r3, [r7, #16]
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	689b      	ldr	r3, [r3, #8]
 8006e7c:	613b      	str	r3, [r7, #16]
 8006e7e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d002      	beq.n	8006e8e <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8006e88:	2301      	movs	r3, #1
 8006e8a:	77fb      	strb	r3, [r7, #31]
 8006e8c:	e000      	b.n	8006e90 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8006e8e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	2201      	movs	r2, #1
 8006e94:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8006ea0:	7ffb      	ldrb	r3, [r7, #31]
}
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	3720      	adds	r7, #32
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	bd80      	pop	{r7, pc}
	...

08006eac <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b088      	sub	sp, #32
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	60f8      	str	r0, [r7, #12]
 8006eb4:	60b9      	str	r1, [r7, #8]
 8006eb6:	603b      	str	r3, [r7, #0]
 8006eb8:	4613      	mov	r3, r2
 8006eba:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006ebc:	f7fd f8e4 	bl	8004088 <HAL_GetTick>
 8006ec0:	4602      	mov	r2, r0
 8006ec2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ec4:	1a9b      	subs	r3, r3, r2
 8006ec6:	683a      	ldr	r2, [r7, #0]
 8006ec8:	4413      	add	r3, r2
 8006eca:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006ecc:	f7fd f8dc 	bl	8004088 <HAL_GetTick>
 8006ed0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006ed2:	4b39      	ldr	r3, [pc, #228]	@ (8006fb8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	015b      	lsls	r3, r3, #5
 8006ed8:	0d1b      	lsrs	r3, r3, #20
 8006eda:	69fa      	ldr	r2, [r7, #28]
 8006edc:	fb02 f303 	mul.w	r3, r2, r3
 8006ee0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006ee2:	e054      	b.n	8006f8e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006eea:	d050      	beq.n	8006f8e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006eec:	f7fd f8cc 	bl	8004088 <HAL_GetTick>
 8006ef0:	4602      	mov	r2, r0
 8006ef2:	69bb      	ldr	r3, [r7, #24]
 8006ef4:	1ad3      	subs	r3, r2, r3
 8006ef6:	69fa      	ldr	r2, [r7, #28]
 8006ef8:	429a      	cmp	r2, r3
 8006efa:	d902      	bls.n	8006f02 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006efc:	69fb      	ldr	r3, [r7, #28]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d13d      	bne.n	8006f7e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	685a      	ldr	r2, [r3, #4]
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006f10:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	685b      	ldr	r3, [r3, #4]
 8006f16:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006f1a:	d111      	bne.n	8006f40 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	689b      	ldr	r3, [r3, #8]
 8006f20:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006f24:	d004      	beq.n	8006f30 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	689b      	ldr	r3, [r3, #8]
 8006f2a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f2e:	d107      	bne.n	8006f40 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	681a      	ldr	r2, [r3, #0]
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006f3e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f44:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006f48:	d10f      	bne.n	8006f6a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	681a      	ldr	r2, [r3, #0]
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006f58:	601a      	str	r2, [r3, #0]
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	681a      	ldr	r2, [r3, #0]
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006f68:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	2201      	movs	r2, #1
 8006f6e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	2200      	movs	r2, #0
 8006f76:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8006f7a:	2303      	movs	r3, #3
 8006f7c:	e017      	b.n	8006fae <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006f7e:	697b      	ldr	r3, [r7, #20]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d101      	bne.n	8006f88 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006f84:	2300      	movs	r3, #0
 8006f86:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006f88:	697b      	ldr	r3, [r7, #20]
 8006f8a:	3b01      	subs	r3, #1
 8006f8c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	689a      	ldr	r2, [r3, #8]
 8006f94:	68bb      	ldr	r3, [r7, #8]
 8006f96:	4013      	ands	r3, r2
 8006f98:	68ba      	ldr	r2, [r7, #8]
 8006f9a:	429a      	cmp	r2, r3
 8006f9c:	bf0c      	ite	eq
 8006f9e:	2301      	moveq	r3, #1
 8006fa0:	2300      	movne	r3, #0
 8006fa2:	b2db      	uxtb	r3, r3
 8006fa4:	461a      	mov	r2, r3
 8006fa6:	79fb      	ldrb	r3, [r7, #7]
 8006fa8:	429a      	cmp	r2, r3
 8006faa:	d19b      	bne.n	8006ee4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006fac:	2300      	movs	r3, #0
}
 8006fae:	4618      	mov	r0, r3
 8006fb0:	3720      	adds	r7, #32
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	bd80      	pop	{r7, pc}
 8006fb6:	bf00      	nop
 8006fb8:	2000000c 	.word	0x2000000c

08006fbc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b08a      	sub	sp, #40	@ 0x28
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	60f8      	str	r0, [r7, #12]
 8006fc4:	60b9      	str	r1, [r7, #8]
 8006fc6:	607a      	str	r2, [r7, #4]
 8006fc8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006fca:	2300      	movs	r3, #0
 8006fcc:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006fce:	f7fd f85b 	bl	8004088 <HAL_GetTick>
 8006fd2:	4602      	mov	r2, r0
 8006fd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fd6:	1a9b      	subs	r3, r3, r2
 8006fd8:	683a      	ldr	r2, [r7, #0]
 8006fda:	4413      	add	r3, r2
 8006fdc:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8006fde:	f7fd f853 	bl	8004088 <HAL_GetTick>
 8006fe2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	330c      	adds	r3, #12
 8006fea:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006fec:	4b3d      	ldr	r3, [pc, #244]	@ (80070e4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8006fee:	681a      	ldr	r2, [r3, #0]
 8006ff0:	4613      	mov	r3, r2
 8006ff2:	009b      	lsls	r3, r3, #2
 8006ff4:	4413      	add	r3, r2
 8006ff6:	00da      	lsls	r2, r3, #3
 8006ff8:	1ad3      	subs	r3, r2, r3
 8006ffa:	0d1b      	lsrs	r3, r3, #20
 8006ffc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006ffe:	fb02 f303 	mul.w	r3, r2, r3
 8007002:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007004:	e060      	b.n	80070c8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007006:	68bb      	ldr	r3, [r7, #8]
 8007008:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800700c:	d107      	bne.n	800701e <SPI_WaitFifoStateUntilTimeout+0x62>
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d104      	bne.n	800701e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007014:	69fb      	ldr	r3, [r7, #28]
 8007016:	781b      	ldrb	r3, [r3, #0]
 8007018:	b2db      	uxtb	r3, r3
 800701a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800701c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007024:	d050      	beq.n	80070c8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007026:	f7fd f82f 	bl	8004088 <HAL_GetTick>
 800702a:	4602      	mov	r2, r0
 800702c:	6a3b      	ldr	r3, [r7, #32]
 800702e:	1ad3      	subs	r3, r2, r3
 8007030:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007032:	429a      	cmp	r2, r3
 8007034:	d902      	bls.n	800703c <SPI_WaitFifoStateUntilTimeout+0x80>
 8007036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007038:	2b00      	cmp	r3, #0
 800703a:	d13d      	bne.n	80070b8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	685a      	ldr	r2, [r3, #4]
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800704a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	685b      	ldr	r3, [r3, #4]
 8007050:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007054:	d111      	bne.n	800707a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	689b      	ldr	r3, [r3, #8]
 800705a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800705e:	d004      	beq.n	800706a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	689b      	ldr	r3, [r3, #8]
 8007064:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007068:	d107      	bne.n	800707a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	681a      	ldr	r2, [r3, #0]
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007078:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800707e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007082:	d10f      	bne.n	80070a4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	681a      	ldr	r2, [r3, #0]
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007092:	601a      	str	r2, [r3, #0]
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	681a      	ldr	r2, [r3, #0]
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80070a2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	2201      	movs	r2, #1
 80070a8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	2200      	movs	r2, #0
 80070b0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80070b4:	2303      	movs	r3, #3
 80070b6:	e010      	b.n	80070da <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80070b8:	69bb      	ldr	r3, [r7, #24]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d101      	bne.n	80070c2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80070be:	2300      	movs	r3, #0
 80070c0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80070c2:	69bb      	ldr	r3, [r7, #24]
 80070c4:	3b01      	subs	r3, #1
 80070c6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	689a      	ldr	r2, [r3, #8]
 80070ce:	68bb      	ldr	r3, [r7, #8]
 80070d0:	4013      	ands	r3, r2
 80070d2:	687a      	ldr	r2, [r7, #4]
 80070d4:	429a      	cmp	r2, r3
 80070d6:	d196      	bne.n	8007006 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80070d8:	2300      	movs	r3, #0
}
 80070da:	4618      	mov	r0, r3
 80070dc:	3728      	adds	r7, #40	@ 0x28
 80070de:	46bd      	mov	sp, r7
 80070e0:	bd80      	pop	{r7, pc}
 80070e2:	bf00      	nop
 80070e4:	2000000c 	.word	0x2000000c

080070e8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b086      	sub	sp, #24
 80070ec:	af02      	add	r7, sp, #8
 80070ee:	60f8      	str	r0, [r7, #12]
 80070f0:	60b9      	str	r1, [r7, #8]
 80070f2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	9300      	str	r3, [sp, #0]
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	2200      	movs	r2, #0
 80070fc:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8007100:	68f8      	ldr	r0, [r7, #12]
 8007102:	f7ff ff5b 	bl	8006fbc <SPI_WaitFifoStateUntilTimeout>
 8007106:	4603      	mov	r3, r0
 8007108:	2b00      	cmp	r3, #0
 800710a:	d007      	beq.n	800711c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007110:	f043 0220 	orr.w	r2, r3, #32
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007118:	2303      	movs	r3, #3
 800711a:	e027      	b.n	800716c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	9300      	str	r3, [sp, #0]
 8007120:	68bb      	ldr	r3, [r7, #8]
 8007122:	2200      	movs	r2, #0
 8007124:	2180      	movs	r1, #128	@ 0x80
 8007126:	68f8      	ldr	r0, [r7, #12]
 8007128:	f7ff fec0 	bl	8006eac <SPI_WaitFlagStateUntilTimeout>
 800712c:	4603      	mov	r3, r0
 800712e:	2b00      	cmp	r3, #0
 8007130:	d007      	beq.n	8007142 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007136:	f043 0220 	orr.w	r2, r3, #32
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800713e:	2303      	movs	r3, #3
 8007140:	e014      	b.n	800716c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	9300      	str	r3, [sp, #0]
 8007146:	68bb      	ldr	r3, [r7, #8]
 8007148:	2200      	movs	r2, #0
 800714a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800714e:	68f8      	ldr	r0, [r7, #12]
 8007150:	f7ff ff34 	bl	8006fbc <SPI_WaitFifoStateUntilTimeout>
 8007154:	4603      	mov	r3, r0
 8007156:	2b00      	cmp	r3, #0
 8007158:	d007      	beq.n	800716a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800715e:	f043 0220 	orr.w	r2, r3, #32
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007166:	2303      	movs	r3, #3
 8007168:	e000      	b.n	800716c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800716a:	2300      	movs	r3, #0
}
 800716c:	4618      	mov	r0, r3
 800716e:	3710      	adds	r7, #16
 8007170:	46bd      	mov	sp, r7
 8007172:	bd80      	pop	{r7, pc}

08007174 <rand>:
 8007174:	4b16      	ldr	r3, [pc, #88]	@ (80071d0 <rand+0x5c>)
 8007176:	b510      	push	{r4, lr}
 8007178:	681c      	ldr	r4, [r3, #0]
 800717a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800717c:	b9b3      	cbnz	r3, 80071ac <rand+0x38>
 800717e:	2018      	movs	r0, #24
 8007180:	f000 fa20 	bl	80075c4 <malloc>
 8007184:	4602      	mov	r2, r0
 8007186:	6320      	str	r0, [r4, #48]	@ 0x30
 8007188:	b920      	cbnz	r0, 8007194 <rand+0x20>
 800718a:	4b12      	ldr	r3, [pc, #72]	@ (80071d4 <rand+0x60>)
 800718c:	4812      	ldr	r0, [pc, #72]	@ (80071d8 <rand+0x64>)
 800718e:	2152      	movs	r1, #82	@ 0x52
 8007190:	f000 f9b0 	bl	80074f4 <__assert_func>
 8007194:	4911      	ldr	r1, [pc, #68]	@ (80071dc <rand+0x68>)
 8007196:	4b12      	ldr	r3, [pc, #72]	@ (80071e0 <rand+0x6c>)
 8007198:	e9c0 1300 	strd	r1, r3, [r0]
 800719c:	4b11      	ldr	r3, [pc, #68]	@ (80071e4 <rand+0x70>)
 800719e:	6083      	str	r3, [r0, #8]
 80071a0:	230b      	movs	r3, #11
 80071a2:	8183      	strh	r3, [r0, #12]
 80071a4:	2100      	movs	r1, #0
 80071a6:	2001      	movs	r0, #1
 80071a8:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80071ac:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80071ae:	480e      	ldr	r0, [pc, #56]	@ (80071e8 <rand+0x74>)
 80071b0:	690b      	ldr	r3, [r1, #16]
 80071b2:	694c      	ldr	r4, [r1, #20]
 80071b4:	4a0d      	ldr	r2, [pc, #52]	@ (80071ec <rand+0x78>)
 80071b6:	4358      	muls	r0, r3
 80071b8:	fb02 0004 	mla	r0, r2, r4, r0
 80071bc:	fba3 3202 	umull	r3, r2, r3, r2
 80071c0:	3301      	adds	r3, #1
 80071c2:	eb40 0002 	adc.w	r0, r0, r2
 80071c6:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80071ca:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80071ce:	bd10      	pop	{r4, pc}
 80071d0:	20000024 	.word	0x20000024
 80071d4:	08009818 	.word	0x08009818
 80071d8:	0800982f 	.word	0x0800982f
 80071dc:	abcd330e 	.word	0xabcd330e
 80071e0:	e66d1234 	.word	0xe66d1234
 80071e4:	0005deec 	.word	0x0005deec
 80071e8:	5851f42d 	.word	0x5851f42d
 80071ec:	4c957f2d 	.word	0x4c957f2d

080071f0 <std>:
 80071f0:	2300      	movs	r3, #0
 80071f2:	b510      	push	{r4, lr}
 80071f4:	4604      	mov	r4, r0
 80071f6:	e9c0 3300 	strd	r3, r3, [r0]
 80071fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80071fe:	6083      	str	r3, [r0, #8]
 8007200:	8181      	strh	r1, [r0, #12]
 8007202:	6643      	str	r3, [r0, #100]	@ 0x64
 8007204:	81c2      	strh	r2, [r0, #14]
 8007206:	6183      	str	r3, [r0, #24]
 8007208:	4619      	mov	r1, r3
 800720a:	2208      	movs	r2, #8
 800720c:	305c      	adds	r0, #92	@ 0x5c
 800720e:	f000 f8f4 	bl	80073fa <memset>
 8007212:	4b0d      	ldr	r3, [pc, #52]	@ (8007248 <std+0x58>)
 8007214:	6263      	str	r3, [r4, #36]	@ 0x24
 8007216:	4b0d      	ldr	r3, [pc, #52]	@ (800724c <std+0x5c>)
 8007218:	62a3      	str	r3, [r4, #40]	@ 0x28
 800721a:	4b0d      	ldr	r3, [pc, #52]	@ (8007250 <std+0x60>)
 800721c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800721e:	4b0d      	ldr	r3, [pc, #52]	@ (8007254 <std+0x64>)
 8007220:	6323      	str	r3, [r4, #48]	@ 0x30
 8007222:	4b0d      	ldr	r3, [pc, #52]	@ (8007258 <std+0x68>)
 8007224:	6224      	str	r4, [r4, #32]
 8007226:	429c      	cmp	r4, r3
 8007228:	d006      	beq.n	8007238 <std+0x48>
 800722a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800722e:	4294      	cmp	r4, r2
 8007230:	d002      	beq.n	8007238 <std+0x48>
 8007232:	33d0      	adds	r3, #208	@ 0xd0
 8007234:	429c      	cmp	r4, r3
 8007236:	d105      	bne.n	8007244 <std+0x54>
 8007238:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800723c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007240:	f000 b954 	b.w	80074ec <__retarget_lock_init_recursive>
 8007244:	bd10      	pop	{r4, pc}
 8007246:	bf00      	nop
 8007248:	08007375 	.word	0x08007375
 800724c:	08007397 	.word	0x08007397
 8007250:	080073cf 	.word	0x080073cf
 8007254:	080073f3 	.word	0x080073f3
 8007258:	20003a20 	.word	0x20003a20

0800725c <stdio_exit_handler>:
 800725c:	4a02      	ldr	r2, [pc, #8]	@ (8007268 <stdio_exit_handler+0xc>)
 800725e:	4903      	ldr	r1, [pc, #12]	@ (800726c <stdio_exit_handler+0x10>)
 8007260:	4803      	ldr	r0, [pc, #12]	@ (8007270 <stdio_exit_handler+0x14>)
 8007262:	f000 b869 	b.w	8007338 <_fwalk_sglue>
 8007266:	bf00      	nop
 8007268:	20000018 	.word	0x20000018
 800726c:	08007839 	.word	0x08007839
 8007270:	20000028 	.word	0x20000028

08007274 <cleanup_stdio>:
 8007274:	6841      	ldr	r1, [r0, #4]
 8007276:	4b0c      	ldr	r3, [pc, #48]	@ (80072a8 <cleanup_stdio+0x34>)
 8007278:	4299      	cmp	r1, r3
 800727a:	b510      	push	{r4, lr}
 800727c:	4604      	mov	r4, r0
 800727e:	d001      	beq.n	8007284 <cleanup_stdio+0x10>
 8007280:	f000 fada 	bl	8007838 <_fflush_r>
 8007284:	68a1      	ldr	r1, [r4, #8]
 8007286:	4b09      	ldr	r3, [pc, #36]	@ (80072ac <cleanup_stdio+0x38>)
 8007288:	4299      	cmp	r1, r3
 800728a:	d002      	beq.n	8007292 <cleanup_stdio+0x1e>
 800728c:	4620      	mov	r0, r4
 800728e:	f000 fad3 	bl	8007838 <_fflush_r>
 8007292:	68e1      	ldr	r1, [r4, #12]
 8007294:	4b06      	ldr	r3, [pc, #24]	@ (80072b0 <cleanup_stdio+0x3c>)
 8007296:	4299      	cmp	r1, r3
 8007298:	d004      	beq.n	80072a4 <cleanup_stdio+0x30>
 800729a:	4620      	mov	r0, r4
 800729c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80072a0:	f000 baca 	b.w	8007838 <_fflush_r>
 80072a4:	bd10      	pop	{r4, pc}
 80072a6:	bf00      	nop
 80072a8:	20003a20 	.word	0x20003a20
 80072ac:	20003a88 	.word	0x20003a88
 80072b0:	20003af0 	.word	0x20003af0

080072b4 <global_stdio_init.part.0>:
 80072b4:	b510      	push	{r4, lr}
 80072b6:	4b0b      	ldr	r3, [pc, #44]	@ (80072e4 <global_stdio_init.part.0+0x30>)
 80072b8:	4c0b      	ldr	r4, [pc, #44]	@ (80072e8 <global_stdio_init.part.0+0x34>)
 80072ba:	4a0c      	ldr	r2, [pc, #48]	@ (80072ec <global_stdio_init.part.0+0x38>)
 80072bc:	601a      	str	r2, [r3, #0]
 80072be:	4620      	mov	r0, r4
 80072c0:	2200      	movs	r2, #0
 80072c2:	2104      	movs	r1, #4
 80072c4:	f7ff ff94 	bl	80071f0 <std>
 80072c8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80072cc:	2201      	movs	r2, #1
 80072ce:	2109      	movs	r1, #9
 80072d0:	f7ff ff8e 	bl	80071f0 <std>
 80072d4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80072d8:	2202      	movs	r2, #2
 80072da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80072de:	2112      	movs	r1, #18
 80072e0:	f7ff bf86 	b.w	80071f0 <std>
 80072e4:	20003b58 	.word	0x20003b58
 80072e8:	20003a20 	.word	0x20003a20
 80072ec:	0800725d 	.word	0x0800725d

080072f0 <__sfp_lock_acquire>:
 80072f0:	4801      	ldr	r0, [pc, #4]	@ (80072f8 <__sfp_lock_acquire+0x8>)
 80072f2:	f000 b8fc 	b.w	80074ee <__retarget_lock_acquire_recursive>
 80072f6:	bf00      	nop
 80072f8:	20003b61 	.word	0x20003b61

080072fc <__sfp_lock_release>:
 80072fc:	4801      	ldr	r0, [pc, #4]	@ (8007304 <__sfp_lock_release+0x8>)
 80072fe:	f000 b8f7 	b.w	80074f0 <__retarget_lock_release_recursive>
 8007302:	bf00      	nop
 8007304:	20003b61 	.word	0x20003b61

08007308 <__sinit>:
 8007308:	b510      	push	{r4, lr}
 800730a:	4604      	mov	r4, r0
 800730c:	f7ff fff0 	bl	80072f0 <__sfp_lock_acquire>
 8007310:	6a23      	ldr	r3, [r4, #32]
 8007312:	b11b      	cbz	r3, 800731c <__sinit+0x14>
 8007314:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007318:	f7ff bff0 	b.w	80072fc <__sfp_lock_release>
 800731c:	4b04      	ldr	r3, [pc, #16]	@ (8007330 <__sinit+0x28>)
 800731e:	6223      	str	r3, [r4, #32]
 8007320:	4b04      	ldr	r3, [pc, #16]	@ (8007334 <__sinit+0x2c>)
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d1f5      	bne.n	8007314 <__sinit+0xc>
 8007328:	f7ff ffc4 	bl	80072b4 <global_stdio_init.part.0>
 800732c:	e7f2      	b.n	8007314 <__sinit+0xc>
 800732e:	bf00      	nop
 8007330:	08007275 	.word	0x08007275
 8007334:	20003b58 	.word	0x20003b58

08007338 <_fwalk_sglue>:
 8007338:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800733c:	4607      	mov	r7, r0
 800733e:	4688      	mov	r8, r1
 8007340:	4614      	mov	r4, r2
 8007342:	2600      	movs	r6, #0
 8007344:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007348:	f1b9 0901 	subs.w	r9, r9, #1
 800734c:	d505      	bpl.n	800735a <_fwalk_sglue+0x22>
 800734e:	6824      	ldr	r4, [r4, #0]
 8007350:	2c00      	cmp	r4, #0
 8007352:	d1f7      	bne.n	8007344 <_fwalk_sglue+0xc>
 8007354:	4630      	mov	r0, r6
 8007356:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800735a:	89ab      	ldrh	r3, [r5, #12]
 800735c:	2b01      	cmp	r3, #1
 800735e:	d907      	bls.n	8007370 <_fwalk_sglue+0x38>
 8007360:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007364:	3301      	adds	r3, #1
 8007366:	d003      	beq.n	8007370 <_fwalk_sglue+0x38>
 8007368:	4629      	mov	r1, r5
 800736a:	4638      	mov	r0, r7
 800736c:	47c0      	blx	r8
 800736e:	4306      	orrs	r6, r0
 8007370:	3568      	adds	r5, #104	@ 0x68
 8007372:	e7e9      	b.n	8007348 <_fwalk_sglue+0x10>

08007374 <__sread>:
 8007374:	b510      	push	{r4, lr}
 8007376:	460c      	mov	r4, r1
 8007378:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800737c:	f000 f868 	bl	8007450 <_read_r>
 8007380:	2800      	cmp	r0, #0
 8007382:	bfab      	itete	ge
 8007384:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007386:	89a3      	ldrhlt	r3, [r4, #12]
 8007388:	181b      	addge	r3, r3, r0
 800738a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800738e:	bfac      	ite	ge
 8007390:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007392:	81a3      	strhlt	r3, [r4, #12]
 8007394:	bd10      	pop	{r4, pc}

08007396 <__swrite>:
 8007396:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800739a:	461f      	mov	r7, r3
 800739c:	898b      	ldrh	r3, [r1, #12]
 800739e:	05db      	lsls	r3, r3, #23
 80073a0:	4605      	mov	r5, r0
 80073a2:	460c      	mov	r4, r1
 80073a4:	4616      	mov	r6, r2
 80073a6:	d505      	bpl.n	80073b4 <__swrite+0x1e>
 80073a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073ac:	2302      	movs	r3, #2
 80073ae:	2200      	movs	r2, #0
 80073b0:	f000 f83c 	bl	800742c <_lseek_r>
 80073b4:	89a3      	ldrh	r3, [r4, #12]
 80073b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80073ba:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80073be:	81a3      	strh	r3, [r4, #12]
 80073c0:	4632      	mov	r2, r6
 80073c2:	463b      	mov	r3, r7
 80073c4:	4628      	mov	r0, r5
 80073c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80073ca:	f000 b853 	b.w	8007474 <_write_r>

080073ce <__sseek>:
 80073ce:	b510      	push	{r4, lr}
 80073d0:	460c      	mov	r4, r1
 80073d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073d6:	f000 f829 	bl	800742c <_lseek_r>
 80073da:	1c43      	adds	r3, r0, #1
 80073dc:	89a3      	ldrh	r3, [r4, #12]
 80073de:	bf15      	itete	ne
 80073e0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80073e2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80073e6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80073ea:	81a3      	strheq	r3, [r4, #12]
 80073ec:	bf18      	it	ne
 80073ee:	81a3      	strhne	r3, [r4, #12]
 80073f0:	bd10      	pop	{r4, pc}

080073f2 <__sclose>:
 80073f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073f6:	f000 b809 	b.w	800740c <_close_r>

080073fa <memset>:
 80073fa:	4402      	add	r2, r0
 80073fc:	4603      	mov	r3, r0
 80073fe:	4293      	cmp	r3, r2
 8007400:	d100      	bne.n	8007404 <memset+0xa>
 8007402:	4770      	bx	lr
 8007404:	f803 1b01 	strb.w	r1, [r3], #1
 8007408:	e7f9      	b.n	80073fe <memset+0x4>
	...

0800740c <_close_r>:
 800740c:	b538      	push	{r3, r4, r5, lr}
 800740e:	4d06      	ldr	r5, [pc, #24]	@ (8007428 <_close_r+0x1c>)
 8007410:	2300      	movs	r3, #0
 8007412:	4604      	mov	r4, r0
 8007414:	4608      	mov	r0, r1
 8007416:	602b      	str	r3, [r5, #0]
 8007418:	f7fc fd27 	bl	8003e6a <_close>
 800741c:	1c43      	adds	r3, r0, #1
 800741e:	d102      	bne.n	8007426 <_close_r+0x1a>
 8007420:	682b      	ldr	r3, [r5, #0]
 8007422:	b103      	cbz	r3, 8007426 <_close_r+0x1a>
 8007424:	6023      	str	r3, [r4, #0]
 8007426:	bd38      	pop	{r3, r4, r5, pc}
 8007428:	20003b5c 	.word	0x20003b5c

0800742c <_lseek_r>:
 800742c:	b538      	push	{r3, r4, r5, lr}
 800742e:	4d07      	ldr	r5, [pc, #28]	@ (800744c <_lseek_r+0x20>)
 8007430:	4604      	mov	r4, r0
 8007432:	4608      	mov	r0, r1
 8007434:	4611      	mov	r1, r2
 8007436:	2200      	movs	r2, #0
 8007438:	602a      	str	r2, [r5, #0]
 800743a:	461a      	mov	r2, r3
 800743c:	f7fc fd3c 	bl	8003eb8 <_lseek>
 8007440:	1c43      	adds	r3, r0, #1
 8007442:	d102      	bne.n	800744a <_lseek_r+0x1e>
 8007444:	682b      	ldr	r3, [r5, #0]
 8007446:	b103      	cbz	r3, 800744a <_lseek_r+0x1e>
 8007448:	6023      	str	r3, [r4, #0]
 800744a:	bd38      	pop	{r3, r4, r5, pc}
 800744c:	20003b5c 	.word	0x20003b5c

08007450 <_read_r>:
 8007450:	b538      	push	{r3, r4, r5, lr}
 8007452:	4d07      	ldr	r5, [pc, #28]	@ (8007470 <_read_r+0x20>)
 8007454:	4604      	mov	r4, r0
 8007456:	4608      	mov	r0, r1
 8007458:	4611      	mov	r1, r2
 800745a:	2200      	movs	r2, #0
 800745c:	602a      	str	r2, [r5, #0]
 800745e:	461a      	mov	r2, r3
 8007460:	f7fc fcca 	bl	8003df8 <_read>
 8007464:	1c43      	adds	r3, r0, #1
 8007466:	d102      	bne.n	800746e <_read_r+0x1e>
 8007468:	682b      	ldr	r3, [r5, #0]
 800746a:	b103      	cbz	r3, 800746e <_read_r+0x1e>
 800746c:	6023      	str	r3, [r4, #0]
 800746e:	bd38      	pop	{r3, r4, r5, pc}
 8007470:	20003b5c 	.word	0x20003b5c

08007474 <_write_r>:
 8007474:	b538      	push	{r3, r4, r5, lr}
 8007476:	4d07      	ldr	r5, [pc, #28]	@ (8007494 <_write_r+0x20>)
 8007478:	4604      	mov	r4, r0
 800747a:	4608      	mov	r0, r1
 800747c:	4611      	mov	r1, r2
 800747e:	2200      	movs	r2, #0
 8007480:	602a      	str	r2, [r5, #0]
 8007482:	461a      	mov	r2, r3
 8007484:	f7fc fcd5 	bl	8003e32 <_write>
 8007488:	1c43      	adds	r3, r0, #1
 800748a:	d102      	bne.n	8007492 <_write_r+0x1e>
 800748c:	682b      	ldr	r3, [r5, #0]
 800748e:	b103      	cbz	r3, 8007492 <_write_r+0x1e>
 8007490:	6023      	str	r3, [r4, #0]
 8007492:	bd38      	pop	{r3, r4, r5, pc}
 8007494:	20003b5c 	.word	0x20003b5c

08007498 <__errno>:
 8007498:	4b01      	ldr	r3, [pc, #4]	@ (80074a0 <__errno+0x8>)
 800749a:	6818      	ldr	r0, [r3, #0]
 800749c:	4770      	bx	lr
 800749e:	bf00      	nop
 80074a0:	20000024 	.word	0x20000024

080074a4 <__libc_init_array>:
 80074a4:	b570      	push	{r4, r5, r6, lr}
 80074a6:	4d0d      	ldr	r5, [pc, #52]	@ (80074dc <__libc_init_array+0x38>)
 80074a8:	4c0d      	ldr	r4, [pc, #52]	@ (80074e0 <__libc_init_array+0x3c>)
 80074aa:	1b64      	subs	r4, r4, r5
 80074ac:	10a4      	asrs	r4, r4, #2
 80074ae:	2600      	movs	r6, #0
 80074b0:	42a6      	cmp	r6, r4
 80074b2:	d109      	bne.n	80074c8 <__libc_init_array+0x24>
 80074b4:	4d0b      	ldr	r5, [pc, #44]	@ (80074e4 <__libc_init_array+0x40>)
 80074b6:	4c0c      	ldr	r4, [pc, #48]	@ (80074e8 <__libc_init_array+0x44>)
 80074b8:	f001 fdc2 	bl	8009040 <_init>
 80074bc:	1b64      	subs	r4, r4, r5
 80074be:	10a4      	asrs	r4, r4, #2
 80074c0:	2600      	movs	r6, #0
 80074c2:	42a6      	cmp	r6, r4
 80074c4:	d105      	bne.n	80074d2 <__libc_init_array+0x2e>
 80074c6:	bd70      	pop	{r4, r5, r6, pc}
 80074c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80074cc:	4798      	blx	r3
 80074ce:	3601      	adds	r6, #1
 80074d0:	e7ee      	b.n	80074b0 <__libc_init_array+0xc>
 80074d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80074d6:	4798      	blx	r3
 80074d8:	3601      	adds	r6, #1
 80074da:	e7f2      	b.n	80074c2 <__libc_init_array+0x1e>
 80074dc:	08009940 	.word	0x08009940
 80074e0:	08009940 	.word	0x08009940
 80074e4:	08009940 	.word	0x08009940
 80074e8:	08009944 	.word	0x08009944

080074ec <__retarget_lock_init_recursive>:
 80074ec:	4770      	bx	lr

080074ee <__retarget_lock_acquire_recursive>:
 80074ee:	4770      	bx	lr

080074f0 <__retarget_lock_release_recursive>:
 80074f0:	4770      	bx	lr
	...

080074f4 <__assert_func>:
 80074f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80074f6:	4614      	mov	r4, r2
 80074f8:	461a      	mov	r2, r3
 80074fa:	4b09      	ldr	r3, [pc, #36]	@ (8007520 <__assert_func+0x2c>)
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	4605      	mov	r5, r0
 8007500:	68d8      	ldr	r0, [r3, #12]
 8007502:	b14c      	cbz	r4, 8007518 <__assert_func+0x24>
 8007504:	4b07      	ldr	r3, [pc, #28]	@ (8007524 <__assert_func+0x30>)
 8007506:	9100      	str	r1, [sp, #0]
 8007508:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800750c:	4906      	ldr	r1, [pc, #24]	@ (8007528 <__assert_func+0x34>)
 800750e:	462b      	mov	r3, r5
 8007510:	f000 f9ba 	bl	8007888 <fiprintf>
 8007514:	f000 f9da 	bl	80078cc <abort>
 8007518:	4b04      	ldr	r3, [pc, #16]	@ (800752c <__assert_func+0x38>)
 800751a:	461c      	mov	r4, r3
 800751c:	e7f3      	b.n	8007506 <__assert_func+0x12>
 800751e:	bf00      	nop
 8007520:	20000024 	.word	0x20000024
 8007524:	08009887 	.word	0x08009887
 8007528:	08009894 	.word	0x08009894
 800752c:	080098c2 	.word	0x080098c2

08007530 <_free_r>:
 8007530:	b538      	push	{r3, r4, r5, lr}
 8007532:	4605      	mov	r5, r0
 8007534:	2900      	cmp	r1, #0
 8007536:	d041      	beq.n	80075bc <_free_r+0x8c>
 8007538:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800753c:	1f0c      	subs	r4, r1, #4
 800753e:	2b00      	cmp	r3, #0
 8007540:	bfb8      	it	lt
 8007542:	18e4      	addlt	r4, r4, r3
 8007544:	f000 f8e8 	bl	8007718 <__malloc_lock>
 8007548:	4a1d      	ldr	r2, [pc, #116]	@ (80075c0 <_free_r+0x90>)
 800754a:	6813      	ldr	r3, [r2, #0]
 800754c:	b933      	cbnz	r3, 800755c <_free_r+0x2c>
 800754e:	6063      	str	r3, [r4, #4]
 8007550:	6014      	str	r4, [r2, #0]
 8007552:	4628      	mov	r0, r5
 8007554:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007558:	f000 b8e4 	b.w	8007724 <__malloc_unlock>
 800755c:	42a3      	cmp	r3, r4
 800755e:	d908      	bls.n	8007572 <_free_r+0x42>
 8007560:	6820      	ldr	r0, [r4, #0]
 8007562:	1821      	adds	r1, r4, r0
 8007564:	428b      	cmp	r3, r1
 8007566:	bf01      	itttt	eq
 8007568:	6819      	ldreq	r1, [r3, #0]
 800756a:	685b      	ldreq	r3, [r3, #4]
 800756c:	1809      	addeq	r1, r1, r0
 800756e:	6021      	streq	r1, [r4, #0]
 8007570:	e7ed      	b.n	800754e <_free_r+0x1e>
 8007572:	461a      	mov	r2, r3
 8007574:	685b      	ldr	r3, [r3, #4]
 8007576:	b10b      	cbz	r3, 800757c <_free_r+0x4c>
 8007578:	42a3      	cmp	r3, r4
 800757a:	d9fa      	bls.n	8007572 <_free_r+0x42>
 800757c:	6811      	ldr	r1, [r2, #0]
 800757e:	1850      	adds	r0, r2, r1
 8007580:	42a0      	cmp	r0, r4
 8007582:	d10b      	bne.n	800759c <_free_r+0x6c>
 8007584:	6820      	ldr	r0, [r4, #0]
 8007586:	4401      	add	r1, r0
 8007588:	1850      	adds	r0, r2, r1
 800758a:	4283      	cmp	r3, r0
 800758c:	6011      	str	r1, [r2, #0]
 800758e:	d1e0      	bne.n	8007552 <_free_r+0x22>
 8007590:	6818      	ldr	r0, [r3, #0]
 8007592:	685b      	ldr	r3, [r3, #4]
 8007594:	6053      	str	r3, [r2, #4]
 8007596:	4408      	add	r0, r1
 8007598:	6010      	str	r0, [r2, #0]
 800759a:	e7da      	b.n	8007552 <_free_r+0x22>
 800759c:	d902      	bls.n	80075a4 <_free_r+0x74>
 800759e:	230c      	movs	r3, #12
 80075a0:	602b      	str	r3, [r5, #0]
 80075a2:	e7d6      	b.n	8007552 <_free_r+0x22>
 80075a4:	6820      	ldr	r0, [r4, #0]
 80075a6:	1821      	adds	r1, r4, r0
 80075a8:	428b      	cmp	r3, r1
 80075aa:	bf04      	itt	eq
 80075ac:	6819      	ldreq	r1, [r3, #0]
 80075ae:	685b      	ldreq	r3, [r3, #4]
 80075b0:	6063      	str	r3, [r4, #4]
 80075b2:	bf04      	itt	eq
 80075b4:	1809      	addeq	r1, r1, r0
 80075b6:	6021      	streq	r1, [r4, #0]
 80075b8:	6054      	str	r4, [r2, #4]
 80075ba:	e7ca      	b.n	8007552 <_free_r+0x22>
 80075bc:	bd38      	pop	{r3, r4, r5, pc}
 80075be:	bf00      	nop
 80075c0:	20003b68 	.word	0x20003b68

080075c4 <malloc>:
 80075c4:	4b02      	ldr	r3, [pc, #8]	@ (80075d0 <malloc+0xc>)
 80075c6:	4601      	mov	r1, r0
 80075c8:	6818      	ldr	r0, [r3, #0]
 80075ca:	f000 b825 	b.w	8007618 <_malloc_r>
 80075ce:	bf00      	nop
 80075d0:	20000024 	.word	0x20000024

080075d4 <sbrk_aligned>:
 80075d4:	b570      	push	{r4, r5, r6, lr}
 80075d6:	4e0f      	ldr	r6, [pc, #60]	@ (8007614 <sbrk_aligned+0x40>)
 80075d8:	460c      	mov	r4, r1
 80075da:	6831      	ldr	r1, [r6, #0]
 80075dc:	4605      	mov	r5, r0
 80075de:	b911      	cbnz	r1, 80075e6 <sbrk_aligned+0x12>
 80075e0:	f000 f964 	bl	80078ac <_sbrk_r>
 80075e4:	6030      	str	r0, [r6, #0]
 80075e6:	4621      	mov	r1, r4
 80075e8:	4628      	mov	r0, r5
 80075ea:	f000 f95f 	bl	80078ac <_sbrk_r>
 80075ee:	1c43      	adds	r3, r0, #1
 80075f0:	d103      	bne.n	80075fa <sbrk_aligned+0x26>
 80075f2:	f04f 34ff 	mov.w	r4, #4294967295
 80075f6:	4620      	mov	r0, r4
 80075f8:	bd70      	pop	{r4, r5, r6, pc}
 80075fa:	1cc4      	adds	r4, r0, #3
 80075fc:	f024 0403 	bic.w	r4, r4, #3
 8007600:	42a0      	cmp	r0, r4
 8007602:	d0f8      	beq.n	80075f6 <sbrk_aligned+0x22>
 8007604:	1a21      	subs	r1, r4, r0
 8007606:	4628      	mov	r0, r5
 8007608:	f000 f950 	bl	80078ac <_sbrk_r>
 800760c:	3001      	adds	r0, #1
 800760e:	d1f2      	bne.n	80075f6 <sbrk_aligned+0x22>
 8007610:	e7ef      	b.n	80075f2 <sbrk_aligned+0x1e>
 8007612:	bf00      	nop
 8007614:	20003b64 	.word	0x20003b64

08007618 <_malloc_r>:
 8007618:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800761c:	1ccd      	adds	r5, r1, #3
 800761e:	f025 0503 	bic.w	r5, r5, #3
 8007622:	3508      	adds	r5, #8
 8007624:	2d0c      	cmp	r5, #12
 8007626:	bf38      	it	cc
 8007628:	250c      	movcc	r5, #12
 800762a:	2d00      	cmp	r5, #0
 800762c:	4606      	mov	r6, r0
 800762e:	db01      	blt.n	8007634 <_malloc_r+0x1c>
 8007630:	42a9      	cmp	r1, r5
 8007632:	d904      	bls.n	800763e <_malloc_r+0x26>
 8007634:	230c      	movs	r3, #12
 8007636:	6033      	str	r3, [r6, #0]
 8007638:	2000      	movs	r0, #0
 800763a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800763e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007714 <_malloc_r+0xfc>
 8007642:	f000 f869 	bl	8007718 <__malloc_lock>
 8007646:	f8d8 3000 	ldr.w	r3, [r8]
 800764a:	461c      	mov	r4, r3
 800764c:	bb44      	cbnz	r4, 80076a0 <_malloc_r+0x88>
 800764e:	4629      	mov	r1, r5
 8007650:	4630      	mov	r0, r6
 8007652:	f7ff ffbf 	bl	80075d4 <sbrk_aligned>
 8007656:	1c43      	adds	r3, r0, #1
 8007658:	4604      	mov	r4, r0
 800765a:	d158      	bne.n	800770e <_malloc_r+0xf6>
 800765c:	f8d8 4000 	ldr.w	r4, [r8]
 8007660:	4627      	mov	r7, r4
 8007662:	2f00      	cmp	r7, #0
 8007664:	d143      	bne.n	80076ee <_malloc_r+0xd6>
 8007666:	2c00      	cmp	r4, #0
 8007668:	d04b      	beq.n	8007702 <_malloc_r+0xea>
 800766a:	6823      	ldr	r3, [r4, #0]
 800766c:	4639      	mov	r1, r7
 800766e:	4630      	mov	r0, r6
 8007670:	eb04 0903 	add.w	r9, r4, r3
 8007674:	f000 f91a 	bl	80078ac <_sbrk_r>
 8007678:	4581      	cmp	r9, r0
 800767a:	d142      	bne.n	8007702 <_malloc_r+0xea>
 800767c:	6821      	ldr	r1, [r4, #0]
 800767e:	1a6d      	subs	r5, r5, r1
 8007680:	4629      	mov	r1, r5
 8007682:	4630      	mov	r0, r6
 8007684:	f7ff ffa6 	bl	80075d4 <sbrk_aligned>
 8007688:	3001      	adds	r0, #1
 800768a:	d03a      	beq.n	8007702 <_malloc_r+0xea>
 800768c:	6823      	ldr	r3, [r4, #0]
 800768e:	442b      	add	r3, r5
 8007690:	6023      	str	r3, [r4, #0]
 8007692:	f8d8 3000 	ldr.w	r3, [r8]
 8007696:	685a      	ldr	r2, [r3, #4]
 8007698:	bb62      	cbnz	r2, 80076f4 <_malloc_r+0xdc>
 800769a:	f8c8 7000 	str.w	r7, [r8]
 800769e:	e00f      	b.n	80076c0 <_malloc_r+0xa8>
 80076a0:	6822      	ldr	r2, [r4, #0]
 80076a2:	1b52      	subs	r2, r2, r5
 80076a4:	d420      	bmi.n	80076e8 <_malloc_r+0xd0>
 80076a6:	2a0b      	cmp	r2, #11
 80076a8:	d917      	bls.n	80076da <_malloc_r+0xc2>
 80076aa:	1961      	adds	r1, r4, r5
 80076ac:	42a3      	cmp	r3, r4
 80076ae:	6025      	str	r5, [r4, #0]
 80076b0:	bf18      	it	ne
 80076b2:	6059      	strne	r1, [r3, #4]
 80076b4:	6863      	ldr	r3, [r4, #4]
 80076b6:	bf08      	it	eq
 80076b8:	f8c8 1000 	streq.w	r1, [r8]
 80076bc:	5162      	str	r2, [r4, r5]
 80076be:	604b      	str	r3, [r1, #4]
 80076c0:	4630      	mov	r0, r6
 80076c2:	f000 f82f 	bl	8007724 <__malloc_unlock>
 80076c6:	f104 000b 	add.w	r0, r4, #11
 80076ca:	1d23      	adds	r3, r4, #4
 80076cc:	f020 0007 	bic.w	r0, r0, #7
 80076d0:	1ac2      	subs	r2, r0, r3
 80076d2:	bf1c      	itt	ne
 80076d4:	1a1b      	subne	r3, r3, r0
 80076d6:	50a3      	strne	r3, [r4, r2]
 80076d8:	e7af      	b.n	800763a <_malloc_r+0x22>
 80076da:	6862      	ldr	r2, [r4, #4]
 80076dc:	42a3      	cmp	r3, r4
 80076de:	bf0c      	ite	eq
 80076e0:	f8c8 2000 	streq.w	r2, [r8]
 80076e4:	605a      	strne	r2, [r3, #4]
 80076e6:	e7eb      	b.n	80076c0 <_malloc_r+0xa8>
 80076e8:	4623      	mov	r3, r4
 80076ea:	6864      	ldr	r4, [r4, #4]
 80076ec:	e7ae      	b.n	800764c <_malloc_r+0x34>
 80076ee:	463c      	mov	r4, r7
 80076f0:	687f      	ldr	r7, [r7, #4]
 80076f2:	e7b6      	b.n	8007662 <_malloc_r+0x4a>
 80076f4:	461a      	mov	r2, r3
 80076f6:	685b      	ldr	r3, [r3, #4]
 80076f8:	42a3      	cmp	r3, r4
 80076fa:	d1fb      	bne.n	80076f4 <_malloc_r+0xdc>
 80076fc:	2300      	movs	r3, #0
 80076fe:	6053      	str	r3, [r2, #4]
 8007700:	e7de      	b.n	80076c0 <_malloc_r+0xa8>
 8007702:	230c      	movs	r3, #12
 8007704:	6033      	str	r3, [r6, #0]
 8007706:	4630      	mov	r0, r6
 8007708:	f000 f80c 	bl	8007724 <__malloc_unlock>
 800770c:	e794      	b.n	8007638 <_malloc_r+0x20>
 800770e:	6005      	str	r5, [r0, #0]
 8007710:	e7d6      	b.n	80076c0 <_malloc_r+0xa8>
 8007712:	bf00      	nop
 8007714:	20003b68 	.word	0x20003b68

08007718 <__malloc_lock>:
 8007718:	4801      	ldr	r0, [pc, #4]	@ (8007720 <__malloc_lock+0x8>)
 800771a:	f7ff bee8 	b.w	80074ee <__retarget_lock_acquire_recursive>
 800771e:	bf00      	nop
 8007720:	20003b60 	.word	0x20003b60

08007724 <__malloc_unlock>:
 8007724:	4801      	ldr	r0, [pc, #4]	@ (800772c <__malloc_unlock+0x8>)
 8007726:	f7ff bee3 	b.w	80074f0 <__retarget_lock_release_recursive>
 800772a:	bf00      	nop
 800772c:	20003b60 	.word	0x20003b60

08007730 <__sflush_r>:
 8007730:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007734:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007738:	0716      	lsls	r6, r2, #28
 800773a:	4605      	mov	r5, r0
 800773c:	460c      	mov	r4, r1
 800773e:	d454      	bmi.n	80077ea <__sflush_r+0xba>
 8007740:	684b      	ldr	r3, [r1, #4]
 8007742:	2b00      	cmp	r3, #0
 8007744:	dc02      	bgt.n	800774c <__sflush_r+0x1c>
 8007746:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007748:	2b00      	cmp	r3, #0
 800774a:	dd48      	ble.n	80077de <__sflush_r+0xae>
 800774c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800774e:	2e00      	cmp	r6, #0
 8007750:	d045      	beq.n	80077de <__sflush_r+0xae>
 8007752:	2300      	movs	r3, #0
 8007754:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007758:	682f      	ldr	r7, [r5, #0]
 800775a:	6a21      	ldr	r1, [r4, #32]
 800775c:	602b      	str	r3, [r5, #0]
 800775e:	d030      	beq.n	80077c2 <__sflush_r+0x92>
 8007760:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007762:	89a3      	ldrh	r3, [r4, #12]
 8007764:	0759      	lsls	r1, r3, #29
 8007766:	d505      	bpl.n	8007774 <__sflush_r+0x44>
 8007768:	6863      	ldr	r3, [r4, #4]
 800776a:	1ad2      	subs	r2, r2, r3
 800776c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800776e:	b10b      	cbz	r3, 8007774 <__sflush_r+0x44>
 8007770:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007772:	1ad2      	subs	r2, r2, r3
 8007774:	2300      	movs	r3, #0
 8007776:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007778:	6a21      	ldr	r1, [r4, #32]
 800777a:	4628      	mov	r0, r5
 800777c:	47b0      	blx	r6
 800777e:	1c43      	adds	r3, r0, #1
 8007780:	89a3      	ldrh	r3, [r4, #12]
 8007782:	d106      	bne.n	8007792 <__sflush_r+0x62>
 8007784:	6829      	ldr	r1, [r5, #0]
 8007786:	291d      	cmp	r1, #29
 8007788:	d82b      	bhi.n	80077e2 <__sflush_r+0xb2>
 800778a:	4a2a      	ldr	r2, [pc, #168]	@ (8007834 <__sflush_r+0x104>)
 800778c:	40ca      	lsrs	r2, r1
 800778e:	07d6      	lsls	r6, r2, #31
 8007790:	d527      	bpl.n	80077e2 <__sflush_r+0xb2>
 8007792:	2200      	movs	r2, #0
 8007794:	6062      	str	r2, [r4, #4]
 8007796:	04d9      	lsls	r1, r3, #19
 8007798:	6922      	ldr	r2, [r4, #16]
 800779a:	6022      	str	r2, [r4, #0]
 800779c:	d504      	bpl.n	80077a8 <__sflush_r+0x78>
 800779e:	1c42      	adds	r2, r0, #1
 80077a0:	d101      	bne.n	80077a6 <__sflush_r+0x76>
 80077a2:	682b      	ldr	r3, [r5, #0]
 80077a4:	b903      	cbnz	r3, 80077a8 <__sflush_r+0x78>
 80077a6:	6560      	str	r0, [r4, #84]	@ 0x54
 80077a8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80077aa:	602f      	str	r7, [r5, #0]
 80077ac:	b1b9      	cbz	r1, 80077de <__sflush_r+0xae>
 80077ae:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80077b2:	4299      	cmp	r1, r3
 80077b4:	d002      	beq.n	80077bc <__sflush_r+0x8c>
 80077b6:	4628      	mov	r0, r5
 80077b8:	f7ff feba 	bl	8007530 <_free_r>
 80077bc:	2300      	movs	r3, #0
 80077be:	6363      	str	r3, [r4, #52]	@ 0x34
 80077c0:	e00d      	b.n	80077de <__sflush_r+0xae>
 80077c2:	2301      	movs	r3, #1
 80077c4:	4628      	mov	r0, r5
 80077c6:	47b0      	blx	r6
 80077c8:	4602      	mov	r2, r0
 80077ca:	1c50      	adds	r0, r2, #1
 80077cc:	d1c9      	bne.n	8007762 <__sflush_r+0x32>
 80077ce:	682b      	ldr	r3, [r5, #0]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d0c6      	beq.n	8007762 <__sflush_r+0x32>
 80077d4:	2b1d      	cmp	r3, #29
 80077d6:	d001      	beq.n	80077dc <__sflush_r+0xac>
 80077d8:	2b16      	cmp	r3, #22
 80077da:	d11e      	bne.n	800781a <__sflush_r+0xea>
 80077dc:	602f      	str	r7, [r5, #0]
 80077de:	2000      	movs	r0, #0
 80077e0:	e022      	b.n	8007828 <__sflush_r+0xf8>
 80077e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80077e6:	b21b      	sxth	r3, r3
 80077e8:	e01b      	b.n	8007822 <__sflush_r+0xf2>
 80077ea:	690f      	ldr	r7, [r1, #16]
 80077ec:	2f00      	cmp	r7, #0
 80077ee:	d0f6      	beq.n	80077de <__sflush_r+0xae>
 80077f0:	0793      	lsls	r3, r2, #30
 80077f2:	680e      	ldr	r6, [r1, #0]
 80077f4:	bf08      	it	eq
 80077f6:	694b      	ldreq	r3, [r1, #20]
 80077f8:	600f      	str	r7, [r1, #0]
 80077fa:	bf18      	it	ne
 80077fc:	2300      	movne	r3, #0
 80077fe:	eba6 0807 	sub.w	r8, r6, r7
 8007802:	608b      	str	r3, [r1, #8]
 8007804:	f1b8 0f00 	cmp.w	r8, #0
 8007808:	dde9      	ble.n	80077de <__sflush_r+0xae>
 800780a:	6a21      	ldr	r1, [r4, #32]
 800780c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800780e:	4643      	mov	r3, r8
 8007810:	463a      	mov	r2, r7
 8007812:	4628      	mov	r0, r5
 8007814:	47b0      	blx	r6
 8007816:	2800      	cmp	r0, #0
 8007818:	dc08      	bgt.n	800782c <__sflush_r+0xfc>
 800781a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800781e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007822:	81a3      	strh	r3, [r4, #12]
 8007824:	f04f 30ff 	mov.w	r0, #4294967295
 8007828:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800782c:	4407      	add	r7, r0
 800782e:	eba8 0800 	sub.w	r8, r8, r0
 8007832:	e7e7      	b.n	8007804 <__sflush_r+0xd4>
 8007834:	20400001 	.word	0x20400001

08007838 <_fflush_r>:
 8007838:	b538      	push	{r3, r4, r5, lr}
 800783a:	690b      	ldr	r3, [r1, #16]
 800783c:	4605      	mov	r5, r0
 800783e:	460c      	mov	r4, r1
 8007840:	b913      	cbnz	r3, 8007848 <_fflush_r+0x10>
 8007842:	2500      	movs	r5, #0
 8007844:	4628      	mov	r0, r5
 8007846:	bd38      	pop	{r3, r4, r5, pc}
 8007848:	b118      	cbz	r0, 8007852 <_fflush_r+0x1a>
 800784a:	6a03      	ldr	r3, [r0, #32]
 800784c:	b90b      	cbnz	r3, 8007852 <_fflush_r+0x1a>
 800784e:	f7ff fd5b 	bl	8007308 <__sinit>
 8007852:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d0f3      	beq.n	8007842 <_fflush_r+0xa>
 800785a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800785c:	07d0      	lsls	r0, r2, #31
 800785e:	d404      	bmi.n	800786a <_fflush_r+0x32>
 8007860:	0599      	lsls	r1, r3, #22
 8007862:	d402      	bmi.n	800786a <_fflush_r+0x32>
 8007864:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007866:	f7ff fe42 	bl	80074ee <__retarget_lock_acquire_recursive>
 800786a:	4628      	mov	r0, r5
 800786c:	4621      	mov	r1, r4
 800786e:	f7ff ff5f 	bl	8007730 <__sflush_r>
 8007872:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007874:	07da      	lsls	r2, r3, #31
 8007876:	4605      	mov	r5, r0
 8007878:	d4e4      	bmi.n	8007844 <_fflush_r+0xc>
 800787a:	89a3      	ldrh	r3, [r4, #12]
 800787c:	059b      	lsls	r3, r3, #22
 800787e:	d4e1      	bmi.n	8007844 <_fflush_r+0xc>
 8007880:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007882:	f7ff fe35 	bl	80074f0 <__retarget_lock_release_recursive>
 8007886:	e7dd      	b.n	8007844 <_fflush_r+0xc>

08007888 <fiprintf>:
 8007888:	b40e      	push	{r1, r2, r3}
 800788a:	b503      	push	{r0, r1, lr}
 800788c:	4601      	mov	r1, r0
 800788e:	ab03      	add	r3, sp, #12
 8007890:	4805      	ldr	r0, [pc, #20]	@ (80078a8 <fiprintf+0x20>)
 8007892:	f853 2b04 	ldr.w	r2, [r3], #4
 8007896:	6800      	ldr	r0, [r0, #0]
 8007898:	9301      	str	r3, [sp, #4]
 800789a:	f000 f847 	bl	800792c <_vfiprintf_r>
 800789e:	b002      	add	sp, #8
 80078a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80078a4:	b003      	add	sp, #12
 80078a6:	4770      	bx	lr
 80078a8:	20000024 	.word	0x20000024

080078ac <_sbrk_r>:
 80078ac:	b538      	push	{r3, r4, r5, lr}
 80078ae:	4d06      	ldr	r5, [pc, #24]	@ (80078c8 <_sbrk_r+0x1c>)
 80078b0:	2300      	movs	r3, #0
 80078b2:	4604      	mov	r4, r0
 80078b4:	4608      	mov	r0, r1
 80078b6:	602b      	str	r3, [r5, #0]
 80078b8:	f7fc fb0c 	bl	8003ed4 <_sbrk>
 80078bc:	1c43      	adds	r3, r0, #1
 80078be:	d102      	bne.n	80078c6 <_sbrk_r+0x1a>
 80078c0:	682b      	ldr	r3, [r5, #0]
 80078c2:	b103      	cbz	r3, 80078c6 <_sbrk_r+0x1a>
 80078c4:	6023      	str	r3, [r4, #0]
 80078c6:	bd38      	pop	{r3, r4, r5, pc}
 80078c8:	20003b5c 	.word	0x20003b5c

080078cc <abort>:
 80078cc:	b508      	push	{r3, lr}
 80078ce:	2006      	movs	r0, #6
 80078d0:	f000 fb8c 	bl	8007fec <raise>
 80078d4:	2001      	movs	r0, #1
 80078d6:	f7fc fa84 	bl	8003de2 <_exit>

080078da <__sfputc_r>:
 80078da:	6893      	ldr	r3, [r2, #8]
 80078dc:	3b01      	subs	r3, #1
 80078de:	2b00      	cmp	r3, #0
 80078e0:	b410      	push	{r4}
 80078e2:	6093      	str	r3, [r2, #8]
 80078e4:	da08      	bge.n	80078f8 <__sfputc_r+0x1e>
 80078e6:	6994      	ldr	r4, [r2, #24]
 80078e8:	42a3      	cmp	r3, r4
 80078ea:	db01      	blt.n	80078f0 <__sfputc_r+0x16>
 80078ec:	290a      	cmp	r1, #10
 80078ee:	d103      	bne.n	80078f8 <__sfputc_r+0x1e>
 80078f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80078f4:	f000 babe 	b.w	8007e74 <__swbuf_r>
 80078f8:	6813      	ldr	r3, [r2, #0]
 80078fa:	1c58      	adds	r0, r3, #1
 80078fc:	6010      	str	r0, [r2, #0]
 80078fe:	7019      	strb	r1, [r3, #0]
 8007900:	4608      	mov	r0, r1
 8007902:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007906:	4770      	bx	lr

08007908 <__sfputs_r>:
 8007908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800790a:	4606      	mov	r6, r0
 800790c:	460f      	mov	r7, r1
 800790e:	4614      	mov	r4, r2
 8007910:	18d5      	adds	r5, r2, r3
 8007912:	42ac      	cmp	r4, r5
 8007914:	d101      	bne.n	800791a <__sfputs_r+0x12>
 8007916:	2000      	movs	r0, #0
 8007918:	e007      	b.n	800792a <__sfputs_r+0x22>
 800791a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800791e:	463a      	mov	r2, r7
 8007920:	4630      	mov	r0, r6
 8007922:	f7ff ffda 	bl	80078da <__sfputc_r>
 8007926:	1c43      	adds	r3, r0, #1
 8007928:	d1f3      	bne.n	8007912 <__sfputs_r+0xa>
 800792a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800792c <_vfiprintf_r>:
 800792c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007930:	460d      	mov	r5, r1
 8007932:	b09d      	sub	sp, #116	@ 0x74
 8007934:	4614      	mov	r4, r2
 8007936:	4698      	mov	r8, r3
 8007938:	4606      	mov	r6, r0
 800793a:	b118      	cbz	r0, 8007944 <_vfiprintf_r+0x18>
 800793c:	6a03      	ldr	r3, [r0, #32]
 800793e:	b90b      	cbnz	r3, 8007944 <_vfiprintf_r+0x18>
 8007940:	f7ff fce2 	bl	8007308 <__sinit>
 8007944:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007946:	07d9      	lsls	r1, r3, #31
 8007948:	d405      	bmi.n	8007956 <_vfiprintf_r+0x2a>
 800794a:	89ab      	ldrh	r3, [r5, #12]
 800794c:	059a      	lsls	r2, r3, #22
 800794e:	d402      	bmi.n	8007956 <_vfiprintf_r+0x2a>
 8007950:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007952:	f7ff fdcc 	bl	80074ee <__retarget_lock_acquire_recursive>
 8007956:	89ab      	ldrh	r3, [r5, #12]
 8007958:	071b      	lsls	r3, r3, #28
 800795a:	d501      	bpl.n	8007960 <_vfiprintf_r+0x34>
 800795c:	692b      	ldr	r3, [r5, #16]
 800795e:	b99b      	cbnz	r3, 8007988 <_vfiprintf_r+0x5c>
 8007960:	4629      	mov	r1, r5
 8007962:	4630      	mov	r0, r6
 8007964:	f000 fac4 	bl	8007ef0 <__swsetup_r>
 8007968:	b170      	cbz	r0, 8007988 <_vfiprintf_r+0x5c>
 800796a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800796c:	07dc      	lsls	r4, r3, #31
 800796e:	d504      	bpl.n	800797a <_vfiprintf_r+0x4e>
 8007970:	f04f 30ff 	mov.w	r0, #4294967295
 8007974:	b01d      	add	sp, #116	@ 0x74
 8007976:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800797a:	89ab      	ldrh	r3, [r5, #12]
 800797c:	0598      	lsls	r0, r3, #22
 800797e:	d4f7      	bmi.n	8007970 <_vfiprintf_r+0x44>
 8007980:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007982:	f7ff fdb5 	bl	80074f0 <__retarget_lock_release_recursive>
 8007986:	e7f3      	b.n	8007970 <_vfiprintf_r+0x44>
 8007988:	2300      	movs	r3, #0
 800798a:	9309      	str	r3, [sp, #36]	@ 0x24
 800798c:	2320      	movs	r3, #32
 800798e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007992:	f8cd 800c 	str.w	r8, [sp, #12]
 8007996:	2330      	movs	r3, #48	@ 0x30
 8007998:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007b48 <_vfiprintf_r+0x21c>
 800799c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80079a0:	f04f 0901 	mov.w	r9, #1
 80079a4:	4623      	mov	r3, r4
 80079a6:	469a      	mov	sl, r3
 80079a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80079ac:	b10a      	cbz	r2, 80079b2 <_vfiprintf_r+0x86>
 80079ae:	2a25      	cmp	r2, #37	@ 0x25
 80079b0:	d1f9      	bne.n	80079a6 <_vfiprintf_r+0x7a>
 80079b2:	ebba 0b04 	subs.w	fp, sl, r4
 80079b6:	d00b      	beq.n	80079d0 <_vfiprintf_r+0xa4>
 80079b8:	465b      	mov	r3, fp
 80079ba:	4622      	mov	r2, r4
 80079bc:	4629      	mov	r1, r5
 80079be:	4630      	mov	r0, r6
 80079c0:	f7ff ffa2 	bl	8007908 <__sfputs_r>
 80079c4:	3001      	adds	r0, #1
 80079c6:	f000 80a7 	beq.w	8007b18 <_vfiprintf_r+0x1ec>
 80079ca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80079cc:	445a      	add	r2, fp
 80079ce:	9209      	str	r2, [sp, #36]	@ 0x24
 80079d0:	f89a 3000 	ldrb.w	r3, [sl]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	f000 809f 	beq.w	8007b18 <_vfiprintf_r+0x1ec>
 80079da:	2300      	movs	r3, #0
 80079dc:	f04f 32ff 	mov.w	r2, #4294967295
 80079e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80079e4:	f10a 0a01 	add.w	sl, sl, #1
 80079e8:	9304      	str	r3, [sp, #16]
 80079ea:	9307      	str	r3, [sp, #28]
 80079ec:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80079f0:	931a      	str	r3, [sp, #104]	@ 0x68
 80079f2:	4654      	mov	r4, sl
 80079f4:	2205      	movs	r2, #5
 80079f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80079fa:	4853      	ldr	r0, [pc, #332]	@ (8007b48 <_vfiprintf_r+0x21c>)
 80079fc:	f7f8 fbe8 	bl	80001d0 <memchr>
 8007a00:	9a04      	ldr	r2, [sp, #16]
 8007a02:	b9d8      	cbnz	r0, 8007a3c <_vfiprintf_r+0x110>
 8007a04:	06d1      	lsls	r1, r2, #27
 8007a06:	bf44      	itt	mi
 8007a08:	2320      	movmi	r3, #32
 8007a0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007a0e:	0713      	lsls	r3, r2, #28
 8007a10:	bf44      	itt	mi
 8007a12:	232b      	movmi	r3, #43	@ 0x2b
 8007a14:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007a18:	f89a 3000 	ldrb.w	r3, [sl]
 8007a1c:	2b2a      	cmp	r3, #42	@ 0x2a
 8007a1e:	d015      	beq.n	8007a4c <_vfiprintf_r+0x120>
 8007a20:	9a07      	ldr	r2, [sp, #28]
 8007a22:	4654      	mov	r4, sl
 8007a24:	2000      	movs	r0, #0
 8007a26:	f04f 0c0a 	mov.w	ip, #10
 8007a2a:	4621      	mov	r1, r4
 8007a2c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007a30:	3b30      	subs	r3, #48	@ 0x30
 8007a32:	2b09      	cmp	r3, #9
 8007a34:	d94b      	bls.n	8007ace <_vfiprintf_r+0x1a2>
 8007a36:	b1b0      	cbz	r0, 8007a66 <_vfiprintf_r+0x13a>
 8007a38:	9207      	str	r2, [sp, #28]
 8007a3a:	e014      	b.n	8007a66 <_vfiprintf_r+0x13a>
 8007a3c:	eba0 0308 	sub.w	r3, r0, r8
 8007a40:	fa09 f303 	lsl.w	r3, r9, r3
 8007a44:	4313      	orrs	r3, r2
 8007a46:	9304      	str	r3, [sp, #16]
 8007a48:	46a2      	mov	sl, r4
 8007a4a:	e7d2      	b.n	80079f2 <_vfiprintf_r+0xc6>
 8007a4c:	9b03      	ldr	r3, [sp, #12]
 8007a4e:	1d19      	adds	r1, r3, #4
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	9103      	str	r1, [sp, #12]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	bfbb      	ittet	lt
 8007a58:	425b      	neglt	r3, r3
 8007a5a:	f042 0202 	orrlt.w	r2, r2, #2
 8007a5e:	9307      	strge	r3, [sp, #28]
 8007a60:	9307      	strlt	r3, [sp, #28]
 8007a62:	bfb8      	it	lt
 8007a64:	9204      	strlt	r2, [sp, #16]
 8007a66:	7823      	ldrb	r3, [r4, #0]
 8007a68:	2b2e      	cmp	r3, #46	@ 0x2e
 8007a6a:	d10a      	bne.n	8007a82 <_vfiprintf_r+0x156>
 8007a6c:	7863      	ldrb	r3, [r4, #1]
 8007a6e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007a70:	d132      	bne.n	8007ad8 <_vfiprintf_r+0x1ac>
 8007a72:	9b03      	ldr	r3, [sp, #12]
 8007a74:	1d1a      	adds	r2, r3, #4
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	9203      	str	r2, [sp, #12]
 8007a7a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007a7e:	3402      	adds	r4, #2
 8007a80:	9305      	str	r3, [sp, #20]
 8007a82:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007b58 <_vfiprintf_r+0x22c>
 8007a86:	7821      	ldrb	r1, [r4, #0]
 8007a88:	2203      	movs	r2, #3
 8007a8a:	4650      	mov	r0, sl
 8007a8c:	f7f8 fba0 	bl	80001d0 <memchr>
 8007a90:	b138      	cbz	r0, 8007aa2 <_vfiprintf_r+0x176>
 8007a92:	9b04      	ldr	r3, [sp, #16]
 8007a94:	eba0 000a 	sub.w	r0, r0, sl
 8007a98:	2240      	movs	r2, #64	@ 0x40
 8007a9a:	4082      	lsls	r2, r0
 8007a9c:	4313      	orrs	r3, r2
 8007a9e:	3401      	adds	r4, #1
 8007aa0:	9304      	str	r3, [sp, #16]
 8007aa2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007aa6:	4829      	ldr	r0, [pc, #164]	@ (8007b4c <_vfiprintf_r+0x220>)
 8007aa8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007aac:	2206      	movs	r2, #6
 8007aae:	f7f8 fb8f 	bl	80001d0 <memchr>
 8007ab2:	2800      	cmp	r0, #0
 8007ab4:	d03f      	beq.n	8007b36 <_vfiprintf_r+0x20a>
 8007ab6:	4b26      	ldr	r3, [pc, #152]	@ (8007b50 <_vfiprintf_r+0x224>)
 8007ab8:	bb1b      	cbnz	r3, 8007b02 <_vfiprintf_r+0x1d6>
 8007aba:	9b03      	ldr	r3, [sp, #12]
 8007abc:	3307      	adds	r3, #7
 8007abe:	f023 0307 	bic.w	r3, r3, #7
 8007ac2:	3308      	adds	r3, #8
 8007ac4:	9303      	str	r3, [sp, #12]
 8007ac6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ac8:	443b      	add	r3, r7
 8007aca:	9309      	str	r3, [sp, #36]	@ 0x24
 8007acc:	e76a      	b.n	80079a4 <_vfiprintf_r+0x78>
 8007ace:	fb0c 3202 	mla	r2, ip, r2, r3
 8007ad2:	460c      	mov	r4, r1
 8007ad4:	2001      	movs	r0, #1
 8007ad6:	e7a8      	b.n	8007a2a <_vfiprintf_r+0xfe>
 8007ad8:	2300      	movs	r3, #0
 8007ada:	3401      	adds	r4, #1
 8007adc:	9305      	str	r3, [sp, #20]
 8007ade:	4619      	mov	r1, r3
 8007ae0:	f04f 0c0a 	mov.w	ip, #10
 8007ae4:	4620      	mov	r0, r4
 8007ae6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007aea:	3a30      	subs	r2, #48	@ 0x30
 8007aec:	2a09      	cmp	r2, #9
 8007aee:	d903      	bls.n	8007af8 <_vfiprintf_r+0x1cc>
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d0c6      	beq.n	8007a82 <_vfiprintf_r+0x156>
 8007af4:	9105      	str	r1, [sp, #20]
 8007af6:	e7c4      	b.n	8007a82 <_vfiprintf_r+0x156>
 8007af8:	fb0c 2101 	mla	r1, ip, r1, r2
 8007afc:	4604      	mov	r4, r0
 8007afe:	2301      	movs	r3, #1
 8007b00:	e7f0      	b.n	8007ae4 <_vfiprintf_r+0x1b8>
 8007b02:	ab03      	add	r3, sp, #12
 8007b04:	9300      	str	r3, [sp, #0]
 8007b06:	462a      	mov	r2, r5
 8007b08:	4b12      	ldr	r3, [pc, #72]	@ (8007b54 <_vfiprintf_r+0x228>)
 8007b0a:	a904      	add	r1, sp, #16
 8007b0c:	4630      	mov	r0, r6
 8007b0e:	f3af 8000 	nop.w
 8007b12:	4607      	mov	r7, r0
 8007b14:	1c78      	adds	r0, r7, #1
 8007b16:	d1d6      	bne.n	8007ac6 <_vfiprintf_r+0x19a>
 8007b18:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007b1a:	07d9      	lsls	r1, r3, #31
 8007b1c:	d405      	bmi.n	8007b2a <_vfiprintf_r+0x1fe>
 8007b1e:	89ab      	ldrh	r3, [r5, #12]
 8007b20:	059a      	lsls	r2, r3, #22
 8007b22:	d402      	bmi.n	8007b2a <_vfiprintf_r+0x1fe>
 8007b24:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007b26:	f7ff fce3 	bl	80074f0 <__retarget_lock_release_recursive>
 8007b2a:	89ab      	ldrh	r3, [r5, #12]
 8007b2c:	065b      	lsls	r3, r3, #25
 8007b2e:	f53f af1f 	bmi.w	8007970 <_vfiprintf_r+0x44>
 8007b32:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007b34:	e71e      	b.n	8007974 <_vfiprintf_r+0x48>
 8007b36:	ab03      	add	r3, sp, #12
 8007b38:	9300      	str	r3, [sp, #0]
 8007b3a:	462a      	mov	r2, r5
 8007b3c:	4b05      	ldr	r3, [pc, #20]	@ (8007b54 <_vfiprintf_r+0x228>)
 8007b3e:	a904      	add	r1, sp, #16
 8007b40:	4630      	mov	r0, r6
 8007b42:	f000 f879 	bl	8007c38 <_printf_i>
 8007b46:	e7e4      	b.n	8007b12 <_vfiprintf_r+0x1e6>
 8007b48:	080098c3 	.word	0x080098c3
 8007b4c:	080098cd 	.word	0x080098cd
 8007b50:	00000000 	.word	0x00000000
 8007b54:	08007909 	.word	0x08007909
 8007b58:	080098c9 	.word	0x080098c9

08007b5c <_printf_common>:
 8007b5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b60:	4616      	mov	r6, r2
 8007b62:	4698      	mov	r8, r3
 8007b64:	688a      	ldr	r2, [r1, #8]
 8007b66:	690b      	ldr	r3, [r1, #16]
 8007b68:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007b6c:	4293      	cmp	r3, r2
 8007b6e:	bfb8      	it	lt
 8007b70:	4613      	movlt	r3, r2
 8007b72:	6033      	str	r3, [r6, #0]
 8007b74:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007b78:	4607      	mov	r7, r0
 8007b7a:	460c      	mov	r4, r1
 8007b7c:	b10a      	cbz	r2, 8007b82 <_printf_common+0x26>
 8007b7e:	3301      	adds	r3, #1
 8007b80:	6033      	str	r3, [r6, #0]
 8007b82:	6823      	ldr	r3, [r4, #0]
 8007b84:	0699      	lsls	r1, r3, #26
 8007b86:	bf42      	ittt	mi
 8007b88:	6833      	ldrmi	r3, [r6, #0]
 8007b8a:	3302      	addmi	r3, #2
 8007b8c:	6033      	strmi	r3, [r6, #0]
 8007b8e:	6825      	ldr	r5, [r4, #0]
 8007b90:	f015 0506 	ands.w	r5, r5, #6
 8007b94:	d106      	bne.n	8007ba4 <_printf_common+0x48>
 8007b96:	f104 0a19 	add.w	sl, r4, #25
 8007b9a:	68e3      	ldr	r3, [r4, #12]
 8007b9c:	6832      	ldr	r2, [r6, #0]
 8007b9e:	1a9b      	subs	r3, r3, r2
 8007ba0:	42ab      	cmp	r3, r5
 8007ba2:	dc26      	bgt.n	8007bf2 <_printf_common+0x96>
 8007ba4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007ba8:	6822      	ldr	r2, [r4, #0]
 8007baa:	3b00      	subs	r3, #0
 8007bac:	bf18      	it	ne
 8007bae:	2301      	movne	r3, #1
 8007bb0:	0692      	lsls	r2, r2, #26
 8007bb2:	d42b      	bmi.n	8007c0c <_printf_common+0xb0>
 8007bb4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007bb8:	4641      	mov	r1, r8
 8007bba:	4638      	mov	r0, r7
 8007bbc:	47c8      	blx	r9
 8007bbe:	3001      	adds	r0, #1
 8007bc0:	d01e      	beq.n	8007c00 <_printf_common+0xa4>
 8007bc2:	6823      	ldr	r3, [r4, #0]
 8007bc4:	6922      	ldr	r2, [r4, #16]
 8007bc6:	f003 0306 	and.w	r3, r3, #6
 8007bca:	2b04      	cmp	r3, #4
 8007bcc:	bf02      	ittt	eq
 8007bce:	68e5      	ldreq	r5, [r4, #12]
 8007bd0:	6833      	ldreq	r3, [r6, #0]
 8007bd2:	1aed      	subeq	r5, r5, r3
 8007bd4:	68a3      	ldr	r3, [r4, #8]
 8007bd6:	bf0c      	ite	eq
 8007bd8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007bdc:	2500      	movne	r5, #0
 8007bde:	4293      	cmp	r3, r2
 8007be0:	bfc4      	itt	gt
 8007be2:	1a9b      	subgt	r3, r3, r2
 8007be4:	18ed      	addgt	r5, r5, r3
 8007be6:	2600      	movs	r6, #0
 8007be8:	341a      	adds	r4, #26
 8007bea:	42b5      	cmp	r5, r6
 8007bec:	d11a      	bne.n	8007c24 <_printf_common+0xc8>
 8007bee:	2000      	movs	r0, #0
 8007bf0:	e008      	b.n	8007c04 <_printf_common+0xa8>
 8007bf2:	2301      	movs	r3, #1
 8007bf4:	4652      	mov	r2, sl
 8007bf6:	4641      	mov	r1, r8
 8007bf8:	4638      	mov	r0, r7
 8007bfa:	47c8      	blx	r9
 8007bfc:	3001      	adds	r0, #1
 8007bfe:	d103      	bne.n	8007c08 <_printf_common+0xac>
 8007c00:	f04f 30ff 	mov.w	r0, #4294967295
 8007c04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c08:	3501      	adds	r5, #1
 8007c0a:	e7c6      	b.n	8007b9a <_printf_common+0x3e>
 8007c0c:	18e1      	adds	r1, r4, r3
 8007c0e:	1c5a      	adds	r2, r3, #1
 8007c10:	2030      	movs	r0, #48	@ 0x30
 8007c12:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007c16:	4422      	add	r2, r4
 8007c18:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007c1c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007c20:	3302      	adds	r3, #2
 8007c22:	e7c7      	b.n	8007bb4 <_printf_common+0x58>
 8007c24:	2301      	movs	r3, #1
 8007c26:	4622      	mov	r2, r4
 8007c28:	4641      	mov	r1, r8
 8007c2a:	4638      	mov	r0, r7
 8007c2c:	47c8      	blx	r9
 8007c2e:	3001      	adds	r0, #1
 8007c30:	d0e6      	beq.n	8007c00 <_printf_common+0xa4>
 8007c32:	3601      	adds	r6, #1
 8007c34:	e7d9      	b.n	8007bea <_printf_common+0x8e>
	...

08007c38 <_printf_i>:
 8007c38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007c3c:	7e0f      	ldrb	r7, [r1, #24]
 8007c3e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007c40:	2f78      	cmp	r7, #120	@ 0x78
 8007c42:	4691      	mov	r9, r2
 8007c44:	4680      	mov	r8, r0
 8007c46:	460c      	mov	r4, r1
 8007c48:	469a      	mov	sl, r3
 8007c4a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007c4e:	d807      	bhi.n	8007c60 <_printf_i+0x28>
 8007c50:	2f62      	cmp	r7, #98	@ 0x62
 8007c52:	d80a      	bhi.n	8007c6a <_printf_i+0x32>
 8007c54:	2f00      	cmp	r7, #0
 8007c56:	f000 80d1 	beq.w	8007dfc <_printf_i+0x1c4>
 8007c5a:	2f58      	cmp	r7, #88	@ 0x58
 8007c5c:	f000 80b8 	beq.w	8007dd0 <_printf_i+0x198>
 8007c60:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007c64:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007c68:	e03a      	b.n	8007ce0 <_printf_i+0xa8>
 8007c6a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007c6e:	2b15      	cmp	r3, #21
 8007c70:	d8f6      	bhi.n	8007c60 <_printf_i+0x28>
 8007c72:	a101      	add	r1, pc, #4	@ (adr r1, 8007c78 <_printf_i+0x40>)
 8007c74:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007c78:	08007cd1 	.word	0x08007cd1
 8007c7c:	08007ce5 	.word	0x08007ce5
 8007c80:	08007c61 	.word	0x08007c61
 8007c84:	08007c61 	.word	0x08007c61
 8007c88:	08007c61 	.word	0x08007c61
 8007c8c:	08007c61 	.word	0x08007c61
 8007c90:	08007ce5 	.word	0x08007ce5
 8007c94:	08007c61 	.word	0x08007c61
 8007c98:	08007c61 	.word	0x08007c61
 8007c9c:	08007c61 	.word	0x08007c61
 8007ca0:	08007c61 	.word	0x08007c61
 8007ca4:	08007de3 	.word	0x08007de3
 8007ca8:	08007d0f 	.word	0x08007d0f
 8007cac:	08007d9d 	.word	0x08007d9d
 8007cb0:	08007c61 	.word	0x08007c61
 8007cb4:	08007c61 	.word	0x08007c61
 8007cb8:	08007e05 	.word	0x08007e05
 8007cbc:	08007c61 	.word	0x08007c61
 8007cc0:	08007d0f 	.word	0x08007d0f
 8007cc4:	08007c61 	.word	0x08007c61
 8007cc8:	08007c61 	.word	0x08007c61
 8007ccc:	08007da5 	.word	0x08007da5
 8007cd0:	6833      	ldr	r3, [r6, #0]
 8007cd2:	1d1a      	adds	r2, r3, #4
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	6032      	str	r2, [r6, #0]
 8007cd8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007cdc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007ce0:	2301      	movs	r3, #1
 8007ce2:	e09c      	b.n	8007e1e <_printf_i+0x1e6>
 8007ce4:	6833      	ldr	r3, [r6, #0]
 8007ce6:	6820      	ldr	r0, [r4, #0]
 8007ce8:	1d19      	adds	r1, r3, #4
 8007cea:	6031      	str	r1, [r6, #0]
 8007cec:	0606      	lsls	r6, r0, #24
 8007cee:	d501      	bpl.n	8007cf4 <_printf_i+0xbc>
 8007cf0:	681d      	ldr	r5, [r3, #0]
 8007cf2:	e003      	b.n	8007cfc <_printf_i+0xc4>
 8007cf4:	0645      	lsls	r5, r0, #25
 8007cf6:	d5fb      	bpl.n	8007cf0 <_printf_i+0xb8>
 8007cf8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007cfc:	2d00      	cmp	r5, #0
 8007cfe:	da03      	bge.n	8007d08 <_printf_i+0xd0>
 8007d00:	232d      	movs	r3, #45	@ 0x2d
 8007d02:	426d      	negs	r5, r5
 8007d04:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007d08:	4858      	ldr	r0, [pc, #352]	@ (8007e6c <_printf_i+0x234>)
 8007d0a:	230a      	movs	r3, #10
 8007d0c:	e011      	b.n	8007d32 <_printf_i+0xfa>
 8007d0e:	6821      	ldr	r1, [r4, #0]
 8007d10:	6833      	ldr	r3, [r6, #0]
 8007d12:	0608      	lsls	r0, r1, #24
 8007d14:	f853 5b04 	ldr.w	r5, [r3], #4
 8007d18:	d402      	bmi.n	8007d20 <_printf_i+0xe8>
 8007d1a:	0649      	lsls	r1, r1, #25
 8007d1c:	bf48      	it	mi
 8007d1e:	b2ad      	uxthmi	r5, r5
 8007d20:	2f6f      	cmp	r7, #111	@ 0x6f
 8007d22:	4852      	ldr	r0, [pc, #328]	@ (8007e6c <_printf_i+0x234>)
 8007d24:	6033      	str	r3, [r6, #0]
 8007d26:	bf14      	ite	ne
 8007d28:	230a      	movne	r3, #10
 8007d2a:	2308      	moveq	r3, #8
 8007d2c:	2100      	movs	r1, #0
 8007d2e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007d32:	6866      	ldr	r6, [r4, #4]
 8007d34:	60a6      	str	r6, [r4, #8]
 8007d36:	2e00      	cmp	r6, #0
 8007d38:	db05      	blt.n	8007d46 <_printf_i+0x10e>
 8007d3a:	6821      	ldr	r1, [r4, #0]
 8007d3c:	432e      	orrs	r6, r5
 8007d3e:	f021 0104 	bic.w	r1, r1, #4
 8007d42:	6021      	str	r1, [r4, #0]
 8007d44:	d04b      	beq.n	8007dde <_printf_i+0x1a6>
 8007d46:	4616      	mov	r6, r2
 8007d48:	fbb5 f1f3 	udiv	r1, r5, r3
 8007d4c:	fb03 5711 	mls	r7, r3, r1, r5
 8007d50:	5dc7      	ldrb	r7, [r0, r7]
 8007d52:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007d56:	462f      	mov	r7, r5
 8007d58:	42bb      	cmp	r3, r7
 8007d5a:	460d      	mov	r5, r1
 8007d5c:	d9f4      	bls.n	8007d48 <_printf_i+0x110>
 8007d5e:	2b08      	cmp	r3, #8
 8007d60:	d10b      	bne.n	8007d7a <_printf_i+0x142>
 8007d62:	6823      	ldr	r3, [r4, #0]
 8007d64:	07df      	lsls	r7, r3, #31
 8007d66:	d508      	bpl.n	8007d7a <_printf_i+0x142>
 8007d68:	6923      	ldr	r3, [r4, #16]
 8007d6a:	6861      	ldr	r1, [r4, #4]
 8007d6c:	4299      	cmp	r1, r3
 8007d6e:	bfde      	ittt	le
 8007d70:	2330      	movle	r3, #48	@ 0x30
 8007d72:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007d76:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007d7a:	1b92      	subs	r2, r2, r6
 8007d7c:	6122      	str	r2, [r4, #16]
 8007d7e:	f8cd a000 	str.w	sl, [sp]
 8007d82:	464b      	mov	r3, r9
 8007d84:	aa03      	add	r2, sp, #12
 8007d86:	4621      	mov	r1, r4
 8007d88:	4640      	mov	r0, r8
 8007d8a:	f7ff fee7 	bl	8007b5c <_printf_common>
 8007d8e:	3001      	adds	r0, #1
 8007d90:	d14a      	bne.n	8007e28 <_printf_i+0x1f0>
 8007d92:	f04f 30ff 	mov.w	r0, #4294967295
 8007d96:	b004      	add	sp, #16
 8007d98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d9c:	6823      	ldr	r3, [r4, #0]
 8007d9e:	f043 0320 	orr.w	r3, r3, #32
 8007da2:	6023      	str	r3, [r4, #0]
 8007da4:	4832      	ldr	r0, [pc, #200]	@ (8007e70 <_printf_i+0x238>)
 8007da6:	2778      	movs	r7, #120	@ 0x78
 8007da8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007dac:	6823      	ldr	r3, [r4, #0]
 8007dae:	6831      	ldr	r1, [r6, #0]
 8007db0:	061f      	lsls	r7, r3, #24
 8007db2:	f851 5b04 	ldr.w	r5, [r1], #4
 8007db6:	d402      	bmi.n	8007dbe <_printf_i+0x186>
 8007db8:	065f      	lsls	r7, r3, #25
 8007dba:	bf48      	it	mi
 8007dbc:	b2ad      	uxthmi	r5, r5
 8007dbe:	6031      	str	r1, [r6, #0]
 8007dc0:	07d9      	lsls	r1, r3, #31
 8007dc2:	bf44      	itt	mi
 8007dc4:	f043 0320 	orrmi.w	r3, r3, #32
 8007dc8:	6023      	strmi	r3, [r4, #0]
 8007dca:	b11d      	cbz	r5, 8007dd4 <_printf_i+0x19c>
 8007dcc:	2310      	movs	r3, #16
 8007dce:	e7ad      	b.n	8007d2c <_printf_i+0xf4>
 8007dd0:	4826      	ldr	r0, [pc, #152]	@ (8007e6c <_printf_i+0x234>)
 8007dd2:	e7e9      	b.n	8007da8 <_printf_i+0x170>
 8007dd4:	6823      	ldr	r3, [r4, #0]
 8007dd6:	f023 0320 	bic.w	r3, r3, #32
 8007dda:	6023      	str	r3, [r4, #0]
 8007ddc:	e7f6      	b.n	8007dcc <_printf_i+0x194>
 8007dde:	4616      	mov	r6, r2
 8007de0:	e7bd      	b.n	8007d5e <_printf_i+0x126>
 8007de2:	6833      	ldr	r3, [r6, #0]
 8007de4:	6825      	ldr	r5, [r4, #0]
 8007de6:	6961      	ldr	r1, [r4, #20]
 8007de8:	1d18      	adds	r0, r3, #4
 8007dea:	6030      	str	r0, [r6, #0]
 8007dec:	062e      	lsls	r6, r5, #24
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	d501      	bpl.n	8007df6 <_printf_i+0x1be>
 8007df2:	6019      	str	r1, [r3, #0]
 8007df4:	e002      	b.n	8007dfc <_printf_i+0x1c4>
 8007df6:	0668      	lsls	r0, r5, #25
 8007df8:	d5fb      	bpl.n	8007df2 <_printf_i+0x1ba>
 8007dfa:	8019      	strh	r1, [r3, #0]
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	6123      	str	r3, [r4, #16]
 8007e00:	4616      	mov	r6, r2
 8007e02:	e7bc      	b.n	8007d7e <_printf_i+0x146>
 8007e04:	6833      	ldr	r3, [r6, #0]
 8007e06:	1d1a      	adds	r2, r3, #4
 8007e08:	6032      	str	r2, [r6, #0]
 8007e0a:	681e      	ldr	r6, [r3, #0]
 8007e0c:	6862      	ldr	r2, [r4, #4]
 8007e0e:	2100      	movs	r1, #0
 8007e10:	4630      	mov	r0, r6
 8007e12:	f7f8 f9dd 	bl	80001d0 <memchr>
 8007e16:	b108      	cbz	r0, 8007e1c <_printf_i+0x1e4>
 8007e18:	1b80      	subs	r0, r0, r6
 8007e1a:	6060      	str	r0, [r4, #4]
 8007e1c:	6863      	ldr	r3, [r4, #4]
 8007e1e:	6123      	str	r3, [r4, #16]
 8007e20:	2300      	movs	r3, #0
 8007e22:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007e26:	e7aa      	b.n	8007d7e <_printf_i+0x146>
 8007e28:	6923      	ldr	r3, [r4, #16]
 8007e2a:	4632      	mov	r2, r6
 8007e2c:	4649      	mov	r1, r9
 8007e2e:	4640      	mov	r0, r8
 8007e30:	47d0      	blx	sl
 8007e32:	3001      	adds	r0, #1
 8007e34:	d0ad      	beq.n	8007d92 <_printf_i+0x15a>
 8007e36:	6823      	ldr	r3, [r4, #0]
 8007e38:	079b      	lsls	r3, r3, #30
 8007e3a:	d413      	bmi.n	8007e64 <_printf_i+0x22c>
 8007e3c:	68e0      	ldr	r0, [r4, #12]
 8007e3e:	9b03      	ldr	r3, [sp, #12]
 8007e40:	4298      	cmp	r0, r3
 8007e42:	bfb8      	it	lt
 8007e44:	4618      	movlt	r0, r3
 8007e46:	e7a6      	b.n	8007d96 <_printf_i+0x15e>
 8007e48:	2301      	movs	r3, #1
 8007e4a:	4632      	mov	r2, r6
 8007e4c:	4649      	mov	r1, r9
 8007e4e:	4640      	mov	r0, r8
 8007e50:	47d0      	blx	sl
 8007e52:	3001      	adds	r0, #1
 8007e54:	d09d      	beq.n	8007d92 <_printf_i+0x15a>
 8007e56:	3501      	adds	r5, #1
 8007e58:	68e3      	ldr	r3, [r4, #12]
 8007e5a:	9903      	ldr	r1, [sp, #12]
 8007e5c:	1a5b      	subs	r3, r3, r1
 8007e5e:	42ab      	cmp	r3, r5
 8007e60:	dcf2      	bgt.n	8007e48 <_printf_i+0x210>
 8007e62:	e7eb      	b.n	8007e3c <_printf_i+0x204>
 8007e64:	2500      	movs	r5, #0
 8007e66:	f104 0619 	add.w	r6, r4, #25
 8007e6a:	e7f5      	b.n	8007e58 <_printf_i+0x220>
 8007e6c:	080098d4 	.word	0x080098d4
 8007e70:	080098e5 	.word	0x080098e5

08007e74 <__swbuf_r>:
 8007e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e76:	460e      	mov	r6, r1
 8007e78:	4614      	mov	r4, r2
 8007e7a:	4605      	mov	r5, r0
 8007e7c:	b118      	cbz	r0, 8007e86 <__swbuf_r+0x12>
 8007e7e:	6a03      	ldr	r3, [r0, #32]
 8007e80:	b90b      	cbnz	r3, 8007e86 <__swbuf_r+0x12>
 8007e82:	f7ff fa41 	bl	8007308 <__sinit>
 8007e86:	69a3      	ldr	r3, [r4, #24]
 8007e88:	60a3      	str	r3, [r4, #8]
 8007e8a:	89a3      	ldrh	r3, [r4, #12]
 8007e8c:	071a      	lsls	r2, r3, #28
 8007e8e:	d501      	bpl.n	8007e94 <__swbuf_r+0x20>
 8007e90:	6923      	ldr	r3, [r4, #16]
 8007e92:	b943      	cbnz	r3, 8007ea6 <__swbuf_r+0x32>
 8007e94:	4621      	mov	r1, r4
 8007e96:	4628      	mov	r0, r5
 8007e98:	f000 f82a 	bl	8007ef0 <__swsetup_r>
 8007e9c:	b118      	cbz	r0, 8007ea6 <__swbuf_r+0x32>
 8007e9e:	f04f 37ff 	mov.w	r7, #4294967295
 8007ea2:	4638      	mov	r0, r7
 8007ea4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ea6:	6823      	ldr	r3, [r4, #0]
 8007ea8:	6922      	ldr	r2, [r4, #16]
 8007eaa:	1a98      	subs	r0, r3, r2
 8007eac:	6963      	ldr	r3, [r4, #20]
 8007eae:	b2f6      	uxtb	r6, r6
 8007eb0:	4283      	cmp	r3, r0
 8007eb2:	4637      	mov	r7, r6
 8007eb4:	dc05      	bgt.n	8007ec2 <__swbuf_r+0x4e>
 8007eb6:	4621      	mov	r1, r4
 8007eb8:	4628      	mov	r0, r5
 8007eba:	f7ff fcbd 	bl	8007838 <_fflush_r>
 8007ebe:	2800      	cmp	r0, #0
 8007ec0:	d1ed      	bne.n	8007e9e <__swbuf_r+0x2a>
 8007ec2:	68a3      	ldr	r3, [r4, #8]
 8007ec4:	3b01      	subs	r3, #1
 8007ec6:	60a3      	str	r3, [r4, #8]
 8007ec8:	6823      	ldr	r3, [r4, #0]
 8007eca:	1c5a      	adds	r2, r3, #1
 8007ecc:	6022      	str	r2, [r4, #0]
 8007ece:	701e      	strb	r6, [r3, #0]
 8007ed0:	6962      	ldr	r2, [r4, #20]
 8007ed2:	1c43      	adds	r3, r0, #1
 8007ed4:	429a      	cmp	r2, r3
 8007ed6:	d004      	beq.n	8007ee2 <__swbuf_r+0x6e>
 8007ed8:	89a3      	ldrh	r3, [r4, #12]
 8007eda:	07db      	lsls	r3, r3, #31
 8007edc:	d5e1      	bpl.n	8007ea2 <__swbuf_r+0x2e>
 8007ede:	2e0a      	cmp	r6, #10
 8007ee0:	d1df      	bne.n	8007ea2 <__swbuf_r+0x2e>
 8007ee2:	4621      	mov	r1, r4
 8007ee4:	4628      	mov	r0, r5
 8007ee6:	f7ff fca7 	bl	8007838 <_fflush_r>
 8007eea:	2800      	cmp	r0, #0
 8007eec:	d0d9      	beq.n	8007ea2 <__swbuf_r+0x2e>
 8007eee:	e7d6      	b.n	8007e9e <__swbuf_r+0x2a>

08007ef0 <__swsetup_r>:
 8007ef0:	b538      	push	{r3, r4, r5, lr}
 8007ef2:	4b29      	ldr	r3, [pc, #164]	@ (8007f98 <__swsetup_r+0xa8>)
 8007ef4:	4605      	mov	r5, r0
 8007ef6:	6818      	ldr	r0, [r3, #0]
 8007ef8:	460c      	mov	r4, r1
 8007efa:	b118      	cbz	r0, 8007f04 <__swsetup_r+0x14>
 8007efc:	6a03      	ldr	r3, [r0, #32]
 8007efe:	b90b      	cbnz	r3, 8007f04 <__swsetup_r+0x14>
 8007f00:	f7ff fa02 	bl	8007308 <__sinit>
 8007f04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f08:	0719      	lsls	r1, r3, #28
 8007f0a:	d422      	bmi.n	8007f52 <__swsetup_r+0x62>
 8007f0c:	06da      	lsls	r2, r3, #27
 8007f0e:	d407      	bmi.n	8007f20 <__swsetup_r+0x30>
 8007f10:	2209      	movs	r2, #9
 8007f12:	602a      	str	r2, [r5, #0]
 8007f14:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007f18:	81a3      	strh	r3, [r4, #12]
 8007f1a:	f04f 30ff 	mov.w	r0, #4294967295
 8007f1e:	e033      	b.n	8007f88 <__swsetup_r+0x98>
 8007f20:	0758      	lsls	r0, r3, #29
 8007f22:	d512      	bpl.n	8007f4a <__swsetup_r+0x5a>
 8007f24:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007f26:	b141      	cbz	r1, 8007f3a <__swsetup_r+0x4a>
 8007f28:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007f2c:	4299      	cmp	r1, r3
 8007f2e:	d002      	beq.n	8007f36 <__swsetup_r+0x46>
 8007f30:	4628      	mov	r0, r5
 8007f32:	f7ff fafd 	bl	8007530 <_free_r>
 8007f36:	2300      	movs	r3, #0
 8007f38:	6363      	str	r3, [r4, #52]	@ 0x34
 8007f3a:	89a3      	ldrh	r3, [r4, #12]
 8007f3c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007f40:	81a3      	strh	r3, [r4, #12]
 8007f42:	2300      	movs	r3, #0
 8007f44:	6063      	str	r3, [r4, #4]
 8007f46:	6923      	ldr	r3, [r4, #16]
 8007f48:	6023      	str	r3, [r4, #0]
 8007f4a:	89a3      	ldrh	r3, [r4, #12]
 8007f4c:	f043 0308 	orr.w	r3, r3, #8
 8007f50:	81a3      	strh	r3, [r4, #12]
 8007f52:	6923      	ldr	r3, [r4, #16]
 8007f54:	b94b      	cbnz	r3, 8007f6a <__swsetup_r+0x7a>
 8007f56:	89a3      	ldrh	r3, [r4, #12]
 8007f58:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007f5c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007f60:	d003      	beq.n	8007f6a <__swsetup_r+0x7a>
 8007f62:	4621      	mov	r1, r4
 8007f64:	4628      	mov	r0, r5
 8007f66:	f000 f883 	bl	8008070 <__smakebuf_r>
 8007f6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f6e:	f013 0201 	ands.w	r2, r3, #1
 8007f72:	d00a      	beq.n	8007f8a <__swsetup_r+0x9a>
 8007f74:	2200      	movs	r2, #0
 8007f76:	60a2      	str	r2, [r4, #8]
 8007f78:	6962      	ldr	r2, [r4, #20]
 8007f7a:	4252      	negs	r2, r2
 8007f7c:	61a2      	str	r2, [r4, #24]
 8007f7e:	6922      	ldr	r2, [r4, #16]
 8007f80:	b942      	cbnz	r2, 8007f94 <__swsetup_r+0xa4>
 8007f82:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007f86:	d1c5      	bne.n	8007f14 <__swsetup_r+0x24>
 8007f88:	bd38      	pop	{r3, r4, r5, pc}
 8007f8a:	0799      	lsls	r1, r3, #30
 8007f8c:	bf58      	it	pl
 8007f8e:	6962      	ldrpl	r2, [r4, #20]
 8007f90:	60a2      	str	r2, [r4, #8]
 8007f92:	e7f4      	b.n	8007f7e <__swsetup_r+0x8e>
 8007f94:	2000      	movs	r0, #0
 8007f96:	e7f7      	b.n	8007f88 <__swsetup_r+0x98>
 8007f98:	20000024 	.word	0x20000024

08007f9c <_raise_r>:
 8007f9c:	291f      	cmp	r1, #31
 8007f9e:	b538      	push	{r3, r4, r5, lr}
 8007fa0:	4605      	mov	r5, r0
 8007fa2:	460c      	mov	r4, r1
 8007fa4:	d904      	bls.n	8007fb0 <_raise_r+0x14>
 8007fa6:	2316      	movs	r3, #22
 8007fa8:	6003      	str	r3, [r0, #0]
 8007faa:	f04f 30ff 	mov.w	r0, #4294967295
 8007fae:	bd38      	pop	{r3, r4, r5, pc}
 8007fb0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007fb2:	b112      	cbz	r2, 8007fba <_raise_r+0x1e>
 8007fb4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007fb8:	b94b      	cbnz	r3, 8007fce <_raise_r+0x32>
 8007fba:	4628      	mov	r0, r5
 8007fbc:	f000 f830 	bl	8008020 <_getpid_r>
 8007fc0:	4622      	mov	r2, r4
 8007fc2:	4601      	mov	r1, r0
 8007fc4:	4628      	mov	r0, r5
 8007fc6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007fca:	f000 b817 	b.w	8007ffc <_kill_r>
 8007fce:	2b01      	cmp	r3, #1
 8007fd0:	d00a      	beq.n	8007fe8 <_raise_r+0x4c>
 8007fd2:	1c59      	adds	r1, r3, #1
 8007fd4:	d103      	bne.n	8007fde <_raise_r+0x42>
 8007fd6:	2316      	movs	r3, #22
 8007fd8:	6003      	str	r3, [r0, #0]
 8007fda:	2001      	movs	r0, #1
 8007fdc:	e7e7      	b.n	8007fae <_raise_r+0x12>
 8007fde:	2100      	movs	r1, #0
 8007fe0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007fe4:	4620      	mov	r0, r4
 8007fe6:	4798      	blx	r3
 8007fe8:	2000      	movs	r0, #0
 8007fea:	e7e0      	b.n	8007fae <_raise_r+0x12>

08007fec <raise>:
 8007fec:	4b02      	ldr	r3, [pc, #8]	@ (8007ff8 <raise+0xc>)
 8007fee:	4601      	mov	r1, r0
 8007ff0:	6818      	ldr	r0, [r3, #0]
 8007ff2:	f7ff bfd3 	b.w	8007f9c <_raise_r>
 8007ff6:	bf00      	nop
 8007ff8:	20000024 	.word	0x20000024

08007ffc <_kill_r>:
 8007ffc:	b538      	push	{r3, r4, r5, lr}
 8007ffe:	4d07      	ldr	r5, [pc, #28]	@ (800801c <_kill_r+0x20>)
 8008000:	2300      	movs	r3, #0
 8008002:	4604      	mov	r4, r0
 8008004:	4608      	mov	r0, r1
 8008006:	4611      	mov	r1, r2
 8008008:	602b      	str	r3, [r5, #0]
 800800a:	f7fb feda 	bl	8003dc2 <_kill>
 800800e:	1c43      	adds	r3, r0, #1
 8008010:	d102      	bne.n	8008018 <_kill_r+0x1c>
 8008012:	682b      	ldr	r3, [r5, #0]
 8008014:	b103      	cbz	r3, 8008018 <_kill_r+0x1c>
 8008016:	6023      	str	r3, [r4, #0]
 8008018:	bd38      	pop	{r3, r4, r5, pc}
 800801a:	bf00      	nop
 800801c:	20003b5c 	.word	0x20003b5c

08008020 <_getpid_r>:
 8008020:	f7fb bec7 	b.w	8003db2 <_getpid>

08008024 <__swhatbuf_r>:
 8008024:	b570      	push	{r4, r5, r6, lr}
 8008026:	460c      	mov	r4, r1
 8008028:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800802c:	2900      	cmp	r1, #0
 800802e:	b096      	sub	sp, #88	@ 0x58
 8008030:	4615      	mov	r5, r2
 8008032:	461e      	mov	r6, r3
 8008034:	da0d      	bge.n	8008052 <__swhatbuf_r+0x2e>
 8008036:	89a3      	ldrh	r3, [r4, #12]
 8008038:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800803c:	f04f 0100 	mov.w	r1, #0
 8008040:	bf14      	ite	ne
 8008042:	2340      	movne	r3, #64	@ 0x40
 8008044:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008048:	2000      	movs	r0, #0
 800804a:	6031      	str	r1, [r6, #0]
 800804c:	602b      	str	r3, [r5, #0]
 800804e:	b016      	add	sp, #88	@ 0x58
 8008050:	bd70      	pop	{r4, r5, r6, pc}
 8008052:	466a      	mov	r2, sp
 8008054:	f000 f848 	bl	80080e8 <_fstat_r>
 8008058:	2800      	cmp	r0, #0
 800805a:	dbec      	blt.n	8008036 <__swhatbuf_r+0x12>
 800805c:	9901      	ldr	r1, [sp, #4]
 800805e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008062:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008066:	4259      	negs	r1, r3
 8008068:	4159      	adcs	r1, r3
 800806a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800806e:	e7eb      	b.n	8008048 <__swhatbuf_r+0x24>

08008070 <__smakebuf_r>:
 8008070:	898b      	ldrh	r3, [r1, #12]
 8008072:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008074:	079d      	lsls	r5, r3, #30
 8008076:	4606      	mov	r6, r0
 8008078:	460c      	mov	r4, r1
 800807a:	d507      	bpl.n	800808c <__smakebuf_r+0x1c>
 800807c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008080:	6023      	str	r3, [r4, #0]
 8008082:	6123      	str	r3, [r4, #16]
 8008084:	2301      	movs	r3, #1
 8008086:	6163      	str	r3, [r4, #20]
 8008088:	b003      	add	sp, #12
 800808a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800808c:	ab01      	add	r3, sp, #4
 800808e:	466a      	mov	r2, sp
 8008090:	f7ff ffc8 	bl	8008024 <__swhatbuf_r>
 8008094:	9f00      	ldr	r7, [sp, #0]
 8008096:	4605      	mov	r5, r0
 8008098:	4639      	mov	r1, r7
 800809a:	4630      	mov	r0, r6
 800809c:	f7ff fabc 	bl	8007618 <_malloc_r>
 80080a0:	b948      	cbnz	r0, 80080b6 <__smakebuf_r+0x46>
 80080a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80080a6:	059a      	lsls	r2, r3, #22
 80080a8:	d4ee      	bmi.n	8008088 <__smakebuf_r+0x18>
 80080aa:	f023 0303 	bic.w	r3, r3, #3
 80080ae:	f043 0302 	orr.w	r3, r3, #2
 80080b2:	81a3      	strh	r3, [r4, #12]
 80080b4:	e7e2      	b.n	800807c <__smakebuf_r+0xc>
 80080b6:	89a3      	ldrh	r3, [r4, #12]
 80080b8:	6020      	str	r0, [r4, #0]
 80080ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80080be:	81a3      	strh	r3, [r4, #12]
 80080c0:	9b01      	ldr	r3, [sp, #4]
 80080c2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80080c6:	b15b      	cbz	r3, 80080e0 <__smakebuf_r+0x70>
 80080c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80080cc:	4630      	mov	r0, r6
 80080ce:	f000 f81d 	bl	800810c <_isatty_r>
 80080d2:	b128      	cbz	r0, 80080e0 <__smakebuf_r+0x70>
 80080d4:	89a3      	ldrh	r3, [r4, #12]
 80080d6:	f023 0303 	bic.w	r3, r3, #3
 80080da:	f043 0301 	orr.w	r3, r3, #1
 80080de:	81a3      	strh	r3, [r4, #12]
 80080e0:	89a3      	ldrh	r3, [r4, #12]
 80080e2:	431d      	orrs	r5, r3
 80080e4:	81a5      	strh	r5, [r4, #12]
 80080e6:	e7cf      	b.n	8008088 <__smakebuf_r+0x18>

080080e8 <_fstat_r>:
 80080e8:	b538      	push	{r3, r4, r5, lr}
 80080ea:	4d07      	ldr	r5, [pc, #28]	@ (8008108 <_fstat_r+0x20>)
 80080ec:	2300      	movs	r3, #0
 80080ee:	4604      	mov	r4, r0
 80080f0:	4608      	mov	r0, r1
 80080f2:	4611      	mov	r1, r2
 80080f4:	602b      	str	r3, [r5, #0]
 80080f6:	f7fb fec4 	bl	8003e82 <_fstat>
 80080fa:	1c43      	adds	r3, r0, #1
 80080fc:	d102      	bne.n	8008104 <_fstat_r+0x1c>
 80080fe:	682b      	ldr	r3, [r5, #0]
 8008100:	b103      	cbz	r3, 8008104 <_fstat_r+0x1c>
 8008102:	6023      	str	r3, [r4, #0]
 8008104:	bd38      	pop	{r3, r4, r5, pc}
 8008106:	bf00      	nop
 8008108:	20003b5c 	.word	0x20003b5c

0800810c <_isatty_r>:
 800810c:	b538      	push	{r3, r4, r5, lr}
 800810e:	4d06      	ldr	r5, [pc, #24]	@ (8008128 <_isatty_r+0x1c>)
 8008110:	2300      	movs	r3, #0
 8008112:	4604      	mov	r4, r0
 8008114:	4608      	mov	r0, r1
 8008116:	602b      	str	r3, [r5, #0]
 8008118:	f7fb fec3 	bl	8003ea2 <_isatty>
 800811c:	1c43      	adds	r3, r0, #1
 800811e:	d102      	bne.n	8008126 <_isatty_r+0x1a>
 8008120:	682b      	ldr	r3, [r5, #0]
 8008122:	b103      	cbz	r3, 8008126 <_isatty_r+0x1a>
 8008124:	6023      	str	r3, [r4, #0]
 8008126:	bd38      	pop	{r3, r4, r5, pc}
 8008128:	20003b5c 	.word	0x20003b5c

0800812c <pow>:
 800812c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800812e:	ed2d 8b02 	vpush	{d8}
 8008132:	eeb0 8a40 	vmov.f32	s16, s0
 8008136:	eef0 8a60 	vmov.f32	s17, s1
 800813a:	ec55 4b11 	vmov	r4, r5, d1
 800813e:	f000 f973 	bl	8008428 <__ieee754_pow>
 8008142:	4622      	mov	r2, r4
 8008144:	462b      	mov	r3, r5
 8008146:	4620      	mov	r0, r4
 8008148:	4629      	mov	r1, r5
 800814a:	ec57 6b10 	vmov	r6, r7, d0
 800814e:	f7f8 fce5 	bl	8000b1c <__aeabi_dcmpun>
 8008152:	2800      	cmp	r0, #0
 8008154:	d13b      	bne.n	80081ce <pow+0xa2>
 8008156:	ec51 0b18 	vmov	r0, r1, d8
 800815a:	2200      	movs	r2, #0
 800815c:	2300      	movs	r3, #0
 800815e:	f7f8 fcab 	bl	8000ab8 <__aeabi_dcmpeq>
 8008162:	b1b8      	cbz	r0, 8008194 <pow+0x68>
 8008164:	2200      	movs	r2, #0
 8008166:	2300      	movs	r3, #0
 8008168:	4620      	mov	r0, r4
 800816a:	4629      	mov	r1, r5
 800816c:	f7f8 fca4 	bl	8000ab8 <__aeabi_dcmpeq>
 8008170:	2800      	cmp	r0, #0
 8008172:	d146      	bne.n	8008202 <pow+0xd6>
 8008174:	ec45 4b10 	vmov	d0, r4, r5
 8008178:	f000 f874 	bl	8008264 <finite>
 800817c:	b338      	cbz	r0, 80081ce <pow+0xa2>
 800817e:	2200      	movs	r2, #0
 8008180:	2300      	movs	r3, #0
 8008182:	4620      	mov	r0, r4
 8008184:	4629      	mov	r1, r5
 8008186:	f7f8 fca1 	bl	8000acc <__aeabi_dcmplt>
 800818a:	b300      	cbz	r0, 80081ce <pow+0xa2>
 800818c:	f7ff f984 	bl	8007498 <__errno>
 8008190:	2322      	movs	r3, #34	@ 0x22
 8008192:	e01b      	b.n	80081cc <pow+0xa0>
 8008194:	ec47 6b10 	vmov	d0, r6, r7
 8008198:	f000 f864 	bl	8008264 <finite>
 800819c:	b9e0      	cbnz	r0, 80081d8 <pow+0xac>
 800819e:	eeb0 0a48 	vmov.f32	s0, s16
 80081a2:	eef0 0a68 	vmov.f32	s1, s17
 80081a6:	f000 f85d 	bl	8008264 <finite>
 80081aa:	b1a8      	cbz	r0, 80081d8 <pow+0xac>
 80081ac:	ec45 4b10 	vmov	d0, r4, r5
 80081b0:	f000 f858 	bl	8008264 <finite>
 80081b4:	b180      	cbz	r0, 80081d8 <pow+0xac>
 80081b6:	4632      	mov	r2, r6
 80081b8:	463b      	mov	r3, r7
 80081ba:	4630      	mov	r0, r6
 80081bc:	4639      	mov	r1, r7
 80081be:	f7f8 fcad 	bl	8000b1c <__aeabi_dcmpun>
 80081c2:	2800      	cmp	r0, #0
 80081c4:	d0e2      	beq.n	800818c <pow+0x60>
 80081c6:	f7ff f967 	bl	8007498 <__errno>
 80081ca:	2321      	movs	r3, #33	@ 0x21
 80081cc:	6003      	str	r3, [r0, #0]
 80081ce:	ecbd 8b02 	vpop	{d8}
 80081d2:	ec47 6b10 	vmov	d0, r6, r7
 80081d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80081d8:	2200      	movs	r2, #0
 80081da:	2300      	movs	r3, #0
 80081dc:	4630      	mov	r0, r6
 80081de:	4639      	mov	r1, r7
 80081e0:	f7f8 fc6a 	bl	8000ab8 <__aeabi_dcmpeq>
 80081e4:	2800      	cmp	r0, #0
 80081e6:	d0f2      	beq.n	80081ce <pow+0xa2>
 80081e8:	eeb0 0a48 	vmov.f32	s0, s16
 80081ec:	eef0 0a68 	vmov.f32	s1, s17
 80081f0:	f000 f838 	bl	8008264 <finite>
 80081f4:	2800      	cmp	r0, #0
 80081f6:	d0ea      	beq.n	80081ce <pow+0xa2>
 80081f8:	ec45 4b10 	vmov	d0, r4, r5
 80081fc:	f000 f832 	bl	8008264 <finite>
 8008200:	e7c3      	b.n	800818a <pow+0x5e>
 8008202:	4f01      	ldr	r7, [pc, #4]	@ (8008208 <pow+0xdc>)
 8008204:	2600      	movs	r6, #0
 8008206:	e7e2      	b.n	80081ce <pow+0xa2>
 8008208:	3ff00000 	.word	0x3ff00000

0800820c <sqrt>:
 800820c:	b538      	push	{r3, r4, r5, lr}
 800820e:	ed2d 8b02 	vpush	{d8}
 8008212:	ec55 4b10 	vmov	r4, r5, d0
 8008216:	f000 f831 	bl	800827c <__ieee754_sqrt>
 800821a:	4622      	mov	r2, r4
 800821c:	462b      	mov	r3, r5
 800821e:	4620      	mov	r0, r4
 8008220:	4629      	mov	r1, r5
 8008222:	eeb0 8a40 	vmov.f32	s16, s0
 8008226:	eef0 8a60 	vmov.f32	s17, s1
 800822a:	f7f8 fc77 	bl	8000b1c <__aeabi_dcmpun>
 800822e:	b990      	cbnz	r0, 8008256 <sqrt+0x4a>
 8008230:	2200      	movs	r2, #0
 8008232:	2300      	movs	r3, #0
 8008234:	4620      	mov	r0, r4
 8008236:	4629      	mov	r1, r5
 8008238:	f7f8 fc48 	bl	8000acc <__aeabi_dcmplt>
 800823c:	b158      	cbz	r0, 8008256 <sqrt+0x4a>
 800823e:	f7ff f92b 	bl	8007498 <__errno>
 8008242:	2321      	movs	r3, #33	@ 0x21
 8008244:	6003      	str	r3, [r0, #0]
 8008246:	2200      	movs	r2, #0
 8008248:	2300      	movs	r3, #0
 800824a:	4610      	mov	r0, r2
 800824c:	4619      	mov	r1, r3
 800824e:	f7f8 faf5 	bl	800083c <__aeabi_ddiv>
 8008252:	ec41 0b18 	vmov	d8, r0, r1
 8008256:	eeb0 0a48 	vmov.f32	s0, s16
 800825a:	eef0 0a68 	vmov.f32	s1, s17
 800825e:	ecbd 8b02 	vpop	{d8}
 8008262:	bd38      	pop	{r3, r4, r5, pc}

08008264 <finite>:
 8008264:	b082      	sub	sp, #8
 8008266:	ed8d 0b00 	vstr	d0, [sp]
 800826a:	9801      	ldr	r0, [sp, #4]
 800826c:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8008270:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8008274:	0fc0      	lsrs	r0, r0, #31
 8008276:	b002      	add	sp, #8
 8008278:	4770      	bx	lr
	...

0800827c <__ieee754_sqrt>:
 800827c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008280:	4a66      	ldr	r2, [pc, #408]	@ (800841c <__ieee754_sqrt+0x1a0>)
 8008282:	ec55 4b10 	vmov	r4, r5, d0
 8008286:	43aa      	bics	r2, r5
 8008288:	462b      	mov	r3, r5
 800828a:	4621      	mov	r1, r4
 800828c:	d110      	bne.n	80082b0 <__ieee754_sqrt+0x34>
 800828e:	4622      	mov	r2, r4
 8008290:	4620      	mov	r0, r4
 8008292:	4629      	mov	r1, r5
 8008294:	f7f8 f9a8 	bl	80005e8 <__aeabi_dmul>
 8008298:	4602      	mov	r2, r0
 800829a:	460b      	mov	r3, r1
 800829c:	4620      	mov	r0, r4
 800829e:	4629      	mov	r1, r5
 80082a0:	f7f7 ffec 	bl	800027c <__adddf3>
 80082a4:	4604      	mov	r4, r0
 80082a6:	460d      	mov	r5, r1
 80082a8:	ec45 4b10 	vmov	d0, r4, r5
 80082ac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082b0:	2d00      	cmp	r5, #0
 80082b2:	dc0e      	bgt.n	80082d2 <__ieee754_sqrt+0x56>
 80082b4:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 80082b8:	4322      	orrs	r2, r4
 80082ba:	d0f5      	beq.n	80082a8 <__ieee754_sqrt+0x2c>
 80082bc:	b19d      	cbz	r5, 80082e6 <__ieee754_sqrt+0x6a>
 80082be:	4622      	mov	r2, r4
 80082c0:	4620      	mov	r0, r4
 80082c2:	4629      	mov	r1, r5
 80082c4:	f7f7 ffd8 	bl	8000278 <__aeabi_dsub>
 80082c8:	4602      	mov	r2, r0
 80082ca:	460b      	mov	r3, r1
 80082cc:	f7f8 fab6 	bl	800083c <__aeabi_ddiv>
 80082d0:	e7e8      	b.n	80082a4 <__ieee754_sqrt+0x28>
 80082d2:	152a      	asrs	r2, r5, #20
 80082d4:	d115      	bne.n	8008302 <__ieee754_sqrt+0x86>
 80082d6:	2000      	movs	r0, #0
 80082d8:	e009      	b.n	80082ee <__ieee754_sqrt+0x72>
 80082da:	0acb      	lsrs	r3, r1, #11
 80082dc:	3a15      	subs	r2, #21
 80082de:	0549      	lsls	r1, r1, #21
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d0fa      	beq.n	80082da <__ieee754_sqrt+0x5e>
 80082e4:	e7f7      	b.n	80082d6 <__ieee754_sqrt+0x5a>
 80082e6:	462a      	mov	r2, r5
 80082e8:	e7fa      	b.n	80082e0 <__ieee754_sqrt+0x64>
 80082ea:	005b      	lsls	r3, r3, #1
 80082ec:	3001      	adds	r0, #1
 80082ee:	02dc      	lsls	r4, r3, #11
 80082f0:	d5fb      	bpl.n	80082ea <__ieee754_sqrt+0x6e>
 80082f2:	1e44      	subs	r4, r0, #1
 80082f4:	1b12      	subs	r2, r2, r4
 80082f6:	f1c0 0420 	rsb	r4, r0, #32
 80082fa:	fa21 f404 	lsr.w	r4, r1, r4
 80082fe:	4323      	orrs	r3, r4
 8008300:	4081      	lsls	r1, r0
 8008302:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008306:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 800830a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800830e:	07d2      	lsls	r2, r2, #31
 8008310:	bf5c      	itt	pl
 8008312:	005b      	lslpl	r3, r3, #1
 8008314:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8008318:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800831c:	bf58      	it	pl
 800831e:	0049      	lslpl	r1, r1, #1
 8008320:	2600      	movs	r6, #0
 8008322:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8008326:	107f      	asrs	r7, r7, #1
 8008328:	0049      	lsls	r1, r1, #1
 800832a:	2016      	movs	r0, #22
 800832c:	4632      	mov	r2, r6
 800832e:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8008332:	1915      	adds	r5, r2, r4
 8008334:	429d      	cmp	r5, r3
 8008336:	bfde      	ittt	le
 8008338:	192a      	addle	r2, r5, r4
 800833a:	1b5b      	suble	r3, r3, r5
 800833c:	1936      	addle	r6, r6, r4
 800833e:	0fcd      	lsrs	r5, r1, #31
 8008340:	3801      	subs	r0, #1
 8008342:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8008346:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800834a:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800834e:	d1f0      	bne.n	8008332 <__ieee754_sqrt+0xb6>
 8008350:	4605      	mov	r5, r0
 8008352:	2420      	movs	r4, #32
 8008354:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8008358:	4293      	cmp	r3, r2
 800835a:	eb0c 0e00 	add.w	lr, ip, r0
 800835e:	dc02      	bgt.n	8008366 <__ieee754_sqrt+0xea>
 8008360:	d113      	bne.n	800838a <__ieee754_sqrt+0x10e>
 8008362:	458e      	cmp	lr, r1
 8008364:	d811      	bhi.n	800838a <__ieee754_sqrt+0x10e>
 8008366:	f1be 0f00 	cmp.w	lr, #0
 800836a:	eb0e 000c 	add.w	r0, lr, ip
 800836e:	da3f      	bge.n	80083f0 <__ieee754_sqrt+0x174>
 8008370:	2800      	cmp	r0, #0
 8008372:	db3d      	blt.n	80083f0 <__ieee754_sqrt+0x174>
 8008374:	f102 0801 	add.w	r8, r2, #1
 8008378:	1a9b      	subs	r3, r3, r2
 800837a:	458e      	cmp	lr, r1
 800837c:	bf88      	it	hi
 800837e:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8008382:	eba1 010e 	sub.w	r1, r1, lr
 8008386:	4465      	add	r5, ip
 8008388:	4642      	mov	r2, r8
 800838a:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800838e:	3c01      	subs	r4, #1
 8008390:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8008394:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8008398:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800839c:	d1dc      	bne.n	8008358 <__ieee754_sqrt+0xdc>
 800839e:	4319      	orrs	r1, r3
 80083a0:	d01b      	beq.n	80083da <__ieee754_sqrt+0x15e>
 80083a2:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 8008420 <__ieee754_sqrt+0x1a4>
 80083a6:	f8df b07c 	ldr.w	fp, [pc, #124]	@ 8008424 <__ieee754_sqrt+0x1a8>
 80083aa:	e9da 0100 	ldrd	r0, r1, [sl]
 80083ae:	e9db 2300 	ldrd	r2, r3, [fp]
 80083b2:	f7f7 ff61 	bl	8000278 <__aeabi_dsub>
 80083b6:	e9da 8900 	ldrd	r8, r9, [sl]
 80083ba:	4602      	mov	r2, r0
 80083bc:	460b      	mov	r3, r1
 80083be:	4640      	mov	r0, r8
 80083c0:	4649      	mov	r1, r9
 80083c2:	f7f8 fb8d 	bl	8000ae0 <__aeabi_dcmple>
 80083c6:	b140      	cbz	r0, 80083da <__ieee754_sqrt+0x15e>
 80083c8:	f1b5 3fff 	cmp.w	r5, #4294967295
 80083cc:	e9da 0100 	ldrd	r0, r1, [sl]
 80083d0:	e9db 2300 	ldrd	r2, r3, [fp]
 80083d4:	d10e      	bne.n	80083f4 <__ieee754_sqrt+0x178>
 80083d6:	3601      	adds	r6, #1
 80083d8:	4625      	mov	r5, r4
 80083da:	1073      	asrs	r3, r6, #1
 80083dc:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 80083e0:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 80083e4:	eb03 5107 	add.w	r1, r3, r7, lsl #20
 80083e8:	086b      	lsrs	r3, r5, #1
 80083ea:	ea43 70c6 	orr.w	r0, r3, r6, lsl #31
 80083ee:	e759      	b.n	80082a4 <__ieee754_sqrt+0x28>
 80083f0:	4690      	mov	r8, r2
 80083f2:	e7c1      	b.n	8008378 <__ieee754_sqrt+0xfc>
 80083f4:	f7f7 ff42 	bl	800027c <__adddf3>
 80083f8:	e9da 8900 	ldrd	r8, r9, [sl]
 80083fc:	4602      	mov	r2, r0
 80083fe:	460b      	mov	r3, r1
 8008400:	4640      	mov	r0, r8
 8008402:	4649      	mov	r1, r9
 8008404:	f7f8 fb62 	bl	8000acc <__aeabi_dcmplt>
 8008408:	b120      	cbz	r0, 8008414 <__ieee754_sqrt+0x198>
 800840a:	1cab      	adds	r3, r5, #2
 800840c:	bf08      	it	eq
 800840e:	3601      	addeq	r6, #1
 8008410:	3502      	adds	r5, #2
 8008412:	e7e2      	b.n	80083da <__ieee754_sqrt+0x15e>
 8008414:	1c6b      	adds	r3, r5, #1
 8008416:	f023 0501 	bic.w	r5, r3, #1
 800841a:	e7de      	b.n	80083da <__ieee754_sqrt+0x15e>
 800841c:	7ff00000 	.word	0x7ff00000
 8008420:	08009900 	.word	0x08009900
 8008424:	080098f8 	.word	0x080098f8

08008428 <__ieee754_pow>:
 8008428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800842c:	b091      	sub	sp, #68	@ 0x44
 800842e:	ed8d 1b00 	vstr	d1, [sp]
 8008432:	e9dd 1900 	ldrd	r1, r9, [sp]
 8008436:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 800843a:	ea5a 0001 	orrs.w	r0, sl, r1
 800843e:	ec57 6b10 	vmov	r6, r7, d0
 8008442:	d113      	bne.n	800846c <__ieee754_pow+0x44>
 8008444:	19b3      	adds	r3, r6, r6
 8008446:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 800844a:	4152      	adcs	r2, r2
 800844c:	4298      	cmp	r0, r3
 800844e:	4b9a      	ldr	r3, [pc, #616]	@ (80086b8 <__ieee754_pow+0x290>)
 8008450:	4193      	sbcs	r3, r2
 8008452:	f080 84ee 	bcs.w	8008e32 <__ieee754_pow+0xa0a>
 8008456:	e9dd 2300 	ldrd	r2, r3, [sp]
 800845a:	4630      	mov	r0, r6
 800845c:	4639      	mov	r1, r7
 800845e:	f7f7 ff0d 	bl	800027c <__adddf3>
 8008462:	ec41 0b10 	vmov	d0, r0, r1
 8008466:	b011      	add	sp, #68	@ 0x44
 8008468:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800846c:	4a93      	ldr	r2, [pc, #588]	@ (80086bc <__ieee754_pow+0x294>)
 800846e:	f027 4500 	bic.w	r5, r7, #2147483648	@ 0x80000000
 8008472:	4295      	cmp	r5, r2
 8008474:	46b8      	mov	r8, r7
 8008476:	4633      	mov	r3, r6
 8008478:	d80a      	bhi.n	8008490 <__ieee754_pow+0x68>
 800847a:	d104      	bne.n	8008486 <__ieee754_pow+0x5e>
 800847c:	2e00      	cmp	r6, #0
 800847e:	d1ea      	bne.n	8008456 <__ieee754_pow+0x2e>
 8008480:	45aa      	cmp	sl, r5
 8008482:	d8e8      	bhi.n	8008456 <__ieee754_pow+0x2e>
 8008484:	e001      	b.n	800848a <__ieee754_pow+0x62>
 8008486:	4592      	cmp	sl, r2
 8008488:	d802      	bhi.n	8008490 <__ieee754_pow+0x68>
 800848a:	4592      	cmp	sl, r2
 800848c:	d10f      	bne.n	80084ae <__ieee754_pow+0x86>
 800848e:	b171      	cbz	r1, 80084ae <__ieee754_pow+0x86>
 8008490:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 8008494:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8008498:	ea58 0803 	orrs.w	r8, r8, r3
 800849c:	d1db      	bne.n	8008456 <__ieee754_pow+0x2e>
 800849e:	e9dd 3200 	ldrd	r3, r2, [sp]
 80084a2:	18db      	adds	r3, r3, r3
 80084a4:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 80084a8:	4152      	adcs	r2, r2
 80084aa:	4598      	cmp	r8, r3
 80084ac:	e7cf      	b.n	800844e <__ieee754_pow+0x26>
 80084ae:	f1b8 0f00 	cmp.w	r8, #0
 80084b2:	46ab      	mov	fp, r5
 80084b4:	da43      	bge.n	800853e <__ieee754_pow+0x116>
 80084b6:	4a82      	ldr	r2, [pc, #520]	@ (80086c0 <__ieee754_pow+0x298>)
 80084b8:	4592      	cmp	sl, r2
 80084ba:	d856      	bhi.n	800856a <__ieee754_pow+0x142>
 80084bc:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 80084c0:	4592      	cmp	sl, r2
 80084c2:	f240 84c5 	bls.w	8008e50 <__ieee754_pow+0xa28>
 80084c6:	ea4f 522a 	mov.w	r2, sl, asr #20
 80084ca:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 80084ce:	2a14      	cmp	r2, #20
 80084d0:	dd18      	ble.n	8008504 <__ieee754_pow+0xdc>
 80084d2:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 80084d6:	fa21 f402 	lsr.w	r4, r1, r2
 80084da:	fa04 f202 	lsl.w	r2, r4, r2
 80084de:	428a      	cmp	r2, r1
 80084e0:	f040 84b6 	bne.w	8008e50 <__ieee754_pow+0xa28>
 80084e4:	f004 0401 	and.w	r4, r4, #1
 80084e8:	f1c4 0402 	rsb	r4, r4, #2
 80084ec:	2900      	cmp	r1, #0
 80084ee:	d159      	bne.n	80085a4 <__ieee754_pow+0x17c>
 80084f0:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 80084f4:	d148      	bne.n	8008588 <__ieee754_pow+0x160>
 80084f6:	4632      	mov	r2, r6
 80084f8:	463b      	mov	r3, r7
 80084fa:	4630      	mov	r0, r6
 80084fc:	4639      	mov	r1, r7
 80084fe:	f7f8 f873 	bl	80005e8 <__aeabi_dmul>
 8008502:	e7ae      	b.n	8008462 <__ieee754_pow+0x3a>
 8008504:	2900      	cmp	r1, #0
 8008506:	d14c      	bne.n	80085a2 <__ieee754_pow+0x17a>
 8008508:	f1c2 0214 	rsb	r2, r2, #20
 800850c:	fa4a f402 	asr.w	r4, sl, r2
 8008510:	fa04 f202 	lsl.w	r2, r4, r2
 8008514:	4552      	cmp	r2, sl
 8008516:	f040 8498 	bne.w	8008e4a <__ieee754_pow+0xa22>
 800851a:	f004 0401 	and.w	r4, r4, #1
 800851e:	f1c4 0402 	rsb	r4, r4, #2
 8008522:	4a68      	ldr	r2, [pc, #416]	@ (80086c4 <__ieee754_pow+0x29c>)
 8008524:	4592      	cmp	sl, r2
 8008526:	d1e3      	bne.n	80084f0 <__ieee754_pow+0xc8>
 8008528:	f1b9 0f00 	cmp.w	r9, #0
 800852c:	f280 8489 	bge.w	8008e42 <__ieee754_pow+0xa1a>
 8008530:	4964      	ldr	r1, [pc, #400]	@ (80086c4 <__ieee754_pow+0x29c>)
 8008532:	4632      	mov	r2, r6
 8008534:	463b      	mov	r3, r7
 8008536:	2000      	movs	r0, #0
 8008538:	f7f8 f980 	bl	800083c <__aeabi_ddiv>
 800853c:	e791      	b.n	8008462 <__ieee754_pow+0x3a>
 800853e:	2400      	movs	r4, #0
 8008540:	bb81      	cbnz	r1, 80085a4 <__ieee754_pow+0x17c>
 8008542:	4a5e      	ldr	r2, [pc, #376]	@ (80086bc <__ieee754_pow+0x294>)
 8008544:	4592      	cmp	sl, r2
 8008546:	d1ec      	bne.n	8008522 <__ieee754_pow+0xfa>
 8008548:	f105 4240 	add.w	r2, r5, #3221225472	@ 0xc0000000
 800854c:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 8008550:	431a      	orrs	r2, r3
 8008552:	f000 846e 	beq.w	8008e32 <__ieee754_pow+0xa0a>
 8008556:	4b5c      	ldr	r3, [pc, #368]	@ (80086c8 <__ieee754_pow+0x2a0>)
 8008558:	429d      	cmp	r5, r3
 800855a:	d908      	bls.n	800856e <__ieee754_pow+0x146>
 800855c:	f1b9 0f00 	cmp.w	r9, #0
 8008560:	f280 846b 	bge.w	8008e3a <__ieee754_pow+0xa12>
 8008564:	2000      	movs	r0, #0
 8008566:	2100      	movs	r1, #0
 8008568:	e77b      	b.n	8008462 <__ieee754_pow+0x3a>
 800856a:	2402      	movs	r4, #2
 800856c:	e7e8      	b.n	8008540 <__ieee754_pow+0x118>
 800856e:	f1b9 0f00 	cmp.w	r9, #0
 8008572:	f04f 0000 	mov.w	r0, #0
 8008576:	f04f 0100 	mov.w	r1, #0
 800857a:	f6bf af72 	bge.w	8008462 <__ieee754_pow+0x3a>
 800857e:	e9dd 0300 	ldrd	r0, r3, [sp]
 8008582:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8008586:	e76c      	b.n	8008462 <__ieee754_pow+0x3a>
 8008588:	4a50      	ldr	r2, [pc, #320]	@ (80086cc <__ieee754_pow+0x2a4>)
 800858a:	4591      	cmp	r9, r2
 800858c:	d10a      	bne.n	80085a4 <__ieee754_pow+0x17c>
 800858e:	f1b8 0f00 	cmp.w	r8, #0
 8008592:	db07      	blt.n	80085a4 <__ieee754_pow+0x17c>
 8008594:	ec47 6b10 	vmov	d0, r6, r7
 8008598:	b011      	add	sp, #68	@ 0x44
 800859a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800859e:	f7ff be6d 	b.w	800827c <__ieee754_sqrt>
 80085a2:	2400      	movs	r4, #0
 80085a4:	ec47 6b10 	vmov	d0, r6, r7
 80085a8:	9302      	str	r3, [sp, #8]
 80085aa:	f000 fc87 	bl	8008ebc <fabs>
 80085ae:	9b02      	ldr	r3, [sp, #8]
 80085b0:	ec51 0b10 	vmov	r0, r1, d0
 80085b4:	bb43      	cbnz	r3, 8008608 <__ieee754_pow+0x1e0>
 80085b6:	4b43      	ldr	r3, [pc, #268]	@ (80086c4 <__ieee754_pow+0x29c>)
 80085b8:	f028 4240 	bic.w	r2, r8, #3221225472	@ 0xc0000000
 80085bc:	429a      	cmp	r2, r3
 80085be:	d000      	beq.n	80085c2 <__ieee754_pow+0x19a>
 80085c0:	bb15      	cbnz	r5, 8008608 <__ieee754_pow+0x1e0>
 80085c2:	f1b9 0f00 	cmp.w	r9, #0
 80085c6:	da05      	bge.n	80085d4 <__ieee754_pow+0x1ac>
 80085c8:	4602      	mov	r2, r0
 80085ca:	460b      	mov	r3, r1
 80085cc:	2000      	movs	r0, #0
 80085ce:	493d      	ldr	r1, [pc, #244]	@ (80086c4 <__ieee754_pow+0x29c>)
 80085d0:	f7f8 f934 	bl	800083c <__aeabi_ddiv>
 80085d4:	f1b8 0f00 	cmp.w	r8, #0
 80085d8:	f6bf af43 	bge.w	8008462 <__ieee754_pow+0x3a>
 80085dc:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 80085e0:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 80085e4:	4325      	orrs	r5, r4
 80085e6:	d108      	bne.n	80085fa <__ieee754_pow+0x1d2>
 80085e8:	4602      	mov	r2, r0
 80085ea:	460b      	mov	r3, r1
 80085ec:	4610      	mov	r0, r2
 80085ee:	4619      	mov	r1, r3
 80085f0:	f7f7 fe42 	bl	8000278 <__aeabi_dsub>
 80085f4:	4602      	mov	r2, r0
 80085f6:	460b      	mov	r3, r1
 80085f8:	e79e      	b.n	8008538 <__ieee754_pow+0x110>
 80085fa:	2c01      	cmp	r4, #1
 80085fc:	f47f af31 	bne.w	8008462 <__ieee754_pow+0x3a>
 8008600:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008604:	4619      	mov	r1, r3
 8008606:	e72c      	b.n	8008462 <__ieee754_pow+0x3a>
 8008608:	ea4f 73d8 	mov.w	r3, r8, lsr #31
 800860c:	3b01      	subs	r3, #1
 800860e:	ea53 0204 	orrs.w	r2, r3, r4
 8008612:	d102      	bne.n	800861a <__ieee754_pow+0x1f2>
 8008614:	4632      	mov	r2, r6
 8008616:	463b      	mov	r3, r7
 8008618:	e7e8      	b.n	80085ec <__ieee754_pow+0x1c4>
 800861a:	3c01      	subs	r4, #1
 800861c:	431c      	orrs	r4, r3
 800861e:	d016      	beq.n	800864e <__ieee754_pow+0x226>
 8008620:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 80086a8 <__ieee754_pow+0x280>
 8008624:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 8008628:	ed8d 7b02 	vstr	d7, [sp, #8]
 800862c:	f240 8110 	bls.w	8008850 <__ieee754_pow+0x428>
 8008630:	4b27      	ldr	r3, [pc, #156]	@ (80086d0 <__ieee754_pow+0x2a8>)
 8008632:	459a      	cmp	sl, r3
 8008634:	4b24      	ldr	r3, [pc, #144]	@ (80086c8 <__ieee754_pow+0x2a0>)
 8008636:	d916      	bls.n	8008666 <__ieee754_pow+0x23e>
 8008638:	429d      	cmp	r5, r3
 800863a:	d80b      	bhi.n	8008654 <__ieee754_pow+0x22c>
 800863c:	f1b9 0f00 	cmp.w	r9, #0
 8008640:	da0b      	bge.n	800865a <__ieee754_pow+0x232>
 8008642:	2000      	movs	r0, #0
 8008644:	b011      	add	sp, #68	@ 0x44
 8008646:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800864a:	f000 bcf1 	b.w	8009030 <__math_oflow>
 800864e:	ed9f 7b18 	vldr	d7, [pc, #96]	@ 80086b0 <__ieee754_pow+0x288>
 8008652:	e7e7      	b.n	8008624 <__ieee754_pow+0x1fc>
 8008654:	f1b9 0f00 	cmp.w	r9, #0
 8008658:	dcf3      	bgt.n	8008642 <__ieee754_pow+0x21a>
 800865a:	2000      	movs	r0, #0
 800865c:	b011      	add	sp, #68	@ 0x44
 800865e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008662:	f000 bcdd 	b.w	8009020 <__math_uflow>
 8008666:	429d      	cmp	r5, r3
 8008668:	d20c      	bcs.n	8008684 <__ieee754_pow+0x25c>
 800866a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800866e:	2200      	movs	r2, #0
 8008670:	2300      	movs	r3, #0
 8008672:	f7f8 fa2b 	bl	8000acc <__aeabi_dcmplt>
 8008676:	3800      	subs	r0, #0
 8008678:	bf18      	it	ne
 800867a:	2001      	movne	r0, #1
 800867c:	f1b9 0f00 	cmp.w	r9, #0
 8008680:	daec      	bge.n	800865c <__ieee754_pow+0x234>
 8008682:	e7df      	b.n	8008644 <__ieee754_pow+0x21c>
 8008684:	4b0f      	ldr	r3, [pc, #60]	@ (80086c4 <__ieee754_pow+0x29c>)
 8008686:	429d      	cmp	r5, r3
 8008688:	f04f 0200 	mov.w	r2, #0
 800868c:	d922      	bls.n	80086d4 <__ieee754_pow+0x2ac>
 800868e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008692:	2300      	movs	r3, #0
 8008694:	f7f8 fa1a 	bl	8000acc <__aeabi_dcmplt>
 8008698:	3800      	subs	r0, #0
 800869a:	bf18      	it	ne
 800869c:	2001      	movne	r0, #1
 800869e:	f1b9 0f00 	cmp.w	r9, #0
 80086a2:	dccf      	bgt.n	8008644 <__ieee754_pow+0x21c>
 80086a4:	e7da      	b.n	800865c <__ieee754_pow+0x234>
 80086a6:	bf00      	nop
 80086a8:	00000000 	.word	0x00000000
 80086ac:	3ff00000 	.word	0x3ff00000
 80086b0:	00000000 	.word	0x00000000
 80086b4:	bff00000 	.word	0xbff00000
 80086b8:	fff00000 	.word	0xfff00000
 80086bc:	7ff00000 	.word	0x7ff00000
 80086c0:	433fffff 	.word	0x433fffff
 80086c4:	3ff00000 	.word	0x3ff00000
 80086c8:	3fefffff 	.word	0x3fefffff
 80086cc:	3fe00000 	.word	0x3fe00000
 80086d0:	43f00000 	.word	0x43f00000
 80086d4:	4b5a      	ldr	r3, [pc, #360]	@ (8008840 <__ieee754_pow+0x418>)
 80086d6:	f7f7 fdcf 	bl	8000278 <__aeabi_dsub>
 80086da:	a351      	add	r3, pc, #324	@ (adr r3, 8008820 <__ieee754_pow+0x3f8>)
 80086dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086e0:	4604      	mov	r4, r0
 80086e2:	460d      	mov	r5, r1
 80086e4:	f7f7 ff80 	bl	80005e8 <__aeabi_dmul>
 80086e8:	a34f      	add	r3, pc, #316	@ (adr r3, 8008828 <__ieee754_pow+0x400>)
 80086ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086ee:	4606      	mov	r6, r0
 80086f0:	460f      	mov	r7, r1
 80086f2:	4620      	mov	r0, r4
 80086f4:	4629      	mov	r1, r5
 80086f6:	f7f7 ff77 	bl	80005e8 <__aeabi_dmul>
 80086fa:	4b52      	ldr	r3, [pc, #328]	@ (8008844 <__ieee754_pow+0x41c>)
 80086fc:	4682      	mov	sl, r0
 80086fe:	468b      	mov	fp, r1
 8008700:	2200      	movs	r2, #0
 8008702:	4620      	mov	r0, r4
 8008704:	4629      	mov	r1, r5
 8008706:	f7f7 ff6f 	bl	80005e8 <__aeabi_dmul>
 800870a:	4602      	mov	r2, r0
 800870c:	460b      	mov	r3, r1
 800870e:	a148      	add	r1, pc, #288	@ (adr r1, 8008830 <__ieee754_pow+0x408>)
 8008710:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008714:	f7f7 fdb0 	bl	8000278 <__aeabi_dsub>
 8008718:	4622      	mov	r2, r4
 800871a:	462b      	mov	r3, r5
 800871c:	f7f7 ff64 	bl	80005e8 <__aeabi_dmul>
 8008720:	4602      	mov	r2, r0
 8008722:	460b      	mov	r3, r1
 8008724:	2000      	movs	r0, #0
 8008726:	4948      	ldr	r1, [pc, #288]	@ (8008848 <__ieee754_pow+0x420>)
 8008728:	f7f7 fda6 	bl	8000278 <__aeabi_dsub>
 800872c:	4622      	mov	r2, r4
 800872e:	4680      	mov	r8, r0
 8008730:	4689      	mov	r9, r1
 8008732:	462b      	mov	r3, r5
 8008734:	4620      	mov	r0, r4
 8008736:	4629      	mov	r1, r5
 8008738:	f7f7 ff56 	bl	80005e8 <__aeabi_dmul>
 800873c:	4602      	mov	r2, r0
 800873e:	460b      	mov	r3, r1
 8008740:	4640      	mov	r0, r8
 8008742:	4649      	mov	r1, r9
 8008744:	f7f7 ff50 	bl	80005e8 <__aeabi_dmul>
 8008748:	a33b      	add	r3, pc, #236	@ (adr r3, 8008838 <__ieee754_pow+0x410>)
 800874a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800874e:	f7f7 ff4b 	bl	80005e8 <__aeabi_dmul>
 8008752:	4602      	mov	r2, r0
 8008754:	460b      	mov	r3, r1
 8008756:	4650      	mov	r0, sl
 8008758:	4659      	mov	r1, fp
 800875a:	f7f7 fd8d 	bl	8000278 <__aeabi_dsub>
 800875e:	4602      	mov	r2, r0
 8008760:	460b      	mov	r3, r1
 8008762:	4680      	mov	r8, r0
 8008764:	4689      	mov	r9, r1
 8008766:	4630      	mov	r0, r6
 8008768:	4639      	mov	r1, r7
 800876a:	f7f7 fd87 	bl	800027c <__adddf3>
 800876e:	2400      	movs	r4, #0
 8008770:	4632      	mov	r2, r6
 8008772:	463b      	mov	r3, r7
 8008774:	4620      	mov	r0, r4
 8008776:	460d      	mov	r5, r1
 8008778:	f7f7 fd7e 	bl	8000278 <__aeabi_dsub>
 800877c:	4602      	mov	r2, r0
 800877e:	460b      	mov	r3, r1
 8008780:	4640      	mov	r0, r8
 8008782:	4649      	mov	r1, r9
 8008784:	f7f7 fd78 	bl	8000278 <__aeabi_dsub>
 8008788:	e9dd 2300 	ldrd	r2, r3, [sp]
 800878c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008790:	2300      	movs	r3, #0
 8008792:	9304      	str	r3, [sp, #16]
 8008794:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8008798:	4606      	mov	r6, r0
 800879a:	460f      	mov	r7, r1
 800879c:	465b      	mov	r3, fp
 800879e:	4652      	mov	r2, sl
 80087a0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80087a4:	f7f7 fd68 	bl	8000278 <__aeabi_dsub>
 80087a8:	4622      	mov	r2, r4
 80087aa:	462b      	mov	r3, r5
 80087ac:	f7f7 ff1c 	bl	80005e8 <__aeabi_dmul>
 80087b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80087b4:	4680      	mov	r8, r0
 80087b6:	4689      	mov	r9, r1
 80087b8:	4630      	mov	r0, r6
 80087ba:	4639      	mov	r1, r7
 80087bc:	f7f7 ff14 	bl	80005e8 <__aeabi_dmul>
 80087c0:	4602      	mov	r2, r0
 80087c2:	460b      	mov	r3, r1
 80087c4:	4640      	mov	r0, r8
 80087c6:	4649      	mov	r1, r9
 80087c8:	f7f7 fd58 	bl	800027c <__adddf3>
 80087cc:	465b      	mov	r3, fp
 80087ce:	4606      	mov	r6, r0
 80087d0:	460f      	mov	r7, r1
 80087d2:	4652      	mov	r2, sl
 80087d4:	4620      	mov	r0, r4
 80087d6:	4629      	mov	r1, r5
 80087d8:	f7f7 ff06 	bl	80005e8 <__aeabi_dmul>
 80087dc:	460b      	mov	r3, r1
 80087de:	4602      	mov	r2, r0
 80087e0:	4680      	mov	r8, r0
 80087e2:	4689      	mov	r9, r1
 80087e4:	4630      	mov	r0, r6
 80087e6:	4639      	mov	r1, r7
 80087e8:	f7f7 fd48 	bl	800027c <__adddf3>
 80087ec:	4b17      	ldr	r3, [pc, #92]	@ (800884c <__ieee754_pow+0x424>)
 80087ee:	4299      	cmp	r1, r3
 80087f0:	4604      	mov	r4, r0
 80087f2:	460d      	mov	r5, r1
 80087f4:	468b      	mov	fp, r1
 80087f6:	f340 820b 	ble.w	8008c10 <__ieee754_pow+0x7e8>
 80087fa:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 80087fe:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8008802:	4303      	orrs	r3, r0
 8008804:	f000 81ea 	beq.w	8008bdc <__ieee754_pow+0x7b4>
 8008808:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800880c:	2200      	movs	r2, #0
 800880e:	2300      	movs	r3, #0
 8008810:	f7f8 f95c 	bl	8000acc <__aeabi_dcmplt>
 8008814:	3800      	subs	r0, #0
 8008816:	bf18      	it	ne
 8008818:	2001      	movne	r0, #1
 800881a:	e713      	b.n	8008644 <__ieee754_pow+0x21c>
 800881c:	f3af 8000 	nop.w
 8008820:	60000000 	.word	0x60000000
 8008824:	3ff71547 	.word	0x3ff71547
 8008828:	f85ddf44 	.word	0xf85ddf44
 800882c:	3e54ae0b 	.word	0x3e54ae0b
 8008830:	55555555 	.word	0x55555555
 8008834:	3fd55555 	.word	0x3fd55555
 8008838:	652b82fe 	.word	0x652b82fe
 800883c:	3ff71547 	.word	0x3ff71547
 8008840:	3ff00000 	.word	0x3ff00000
 8008844:	3fd00000 	.word	0x3fd00000
 8008848:	3fe00000 	.word	0x3fe00000
 800884c:	408fffff 	.word	0x408fffff
 8008850:	4bd5      	ldr	r3, [pc, #852]	@ (8008ba8 <__ieee754_pow+0x780>)
 8008852:	ea08 0303 	and.w	r3, r8, r3
 8008856:	2200      	movs	r2, #0
 8008858:	b92b      	cbnz	r3, 8008866 <__ieee754_pow+0x43e>
 800885a:	4bd4      	ldr	r3, [pc, #848]	@ (8008bac <__ieee754_pow+0x784>)
 800885c:	f7f7 fec4 	bl	80005e8 <__aeabi_dmul>
 8008860:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 8008864:	468b      	mov	fp, r1
 8008866:	ea4f 532b 	mov.w	r3, fp, asr #20
 800886a:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800886e:	4413      	add	r3, r2
 8008870:	930a      	str	r3, [sp, #40]	@ 0x28
 8008872:	4bcf      	ldr	r3, [pc, #828]	@ (8008bb0 <__ieee754_pow+0x788>)
 8008874:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 8008878:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 800887c:	459b      	cmp	fp, r3
 800887e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8008882:	dd08      	ble.n	8008896 <__ieee754_pow+0x46e>
 8008884:	4bcb      	ldr	r3, [pc, #812]	@ (8008bb4 <__ieee754_pow+0x78c>)
 8008886:	459b      	cmp	fp, r3
 8008888:	f340 81a5 	ble.w	8008bd6 <__ieee754_pow+0x7ae>
 800888c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800888e:	3301      	adds	r3, #1
 8008890:	930a      	str	r3, [sp, #40]	@ 0x28
 8008892:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8008896:	f04f 0a00 	mov.w	sl, #0
 800889a:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800889e:	930b      	str	r3, [sp, #44]	@ 0x2c
 80088a0:	4bc5      	ldr	r3, [pc, #788]	@ (8008bb8 <__ieee754_pow+0x790>)
 80088a2:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80088a6:	ed93 7b00 	vldr	d7, [r3]
 80088aa:	4629      	mov	r1, r5
 80088ac:	ec53 2b17 	vmov	r2, r3, d7
 80088b0:	ed8d 7b06 	vstr	d7, [sp, #24]
 80088b4:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80088b8:	f7f7 fcde 	bl	8000278 <__aeabi_dsub>
 80088bc:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80088c0:	4606      	mov	r6, r0
 80088c2:	460f      	mov	r7, r1
 80088c4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80088c8:	f7f7 fcd8 	bl	800027c <__adddf3>
 80088cc:	4602      	mov	r2, r0
 80088ce:	460b      	mov	r3, r1
 80088d0:	2000      	movs	r0, #0
 80088d2:	49ba      	ldr	r1, [pc, #744]	@ (8008bbc <__ieee754_pow+0x794>)
 80088d4:	f7f7 ffb2 	bl	800083c <__aeabi_ddiv>
 80088d8:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 80088dc:	4602      	mov	r2, r0
 80088de:	460b      	mov	r3, r1
 80088e0:	4630      	mov	r0, r6
 80088e2:	4639      	mov	r1, r7
 80088e4:	f7f7 fe80 	bl	80005e8 <__aeabi_dmul>
 80088e8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80088ec:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 80088f0:	106d      	asrs	r5, r5, #1
 80088f2:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 80088f6:	f04f 0b00 	mov.w	fp, #0
 80088fa:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 80088fe:	4661      	mov	r1, ip
 8008900:	2200      	movs	r2, #0
 8008902:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8008906:	4658      	mov	r0, fp
 8008908:	46e1      	mov	r9, ip
 800890a:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 800890e:	4614      	mov	r4, r2
 8008910:	461d      	mov	r5, r3
 8008912:	f7f7 fe69 	bl	80005e8 <__aeabi_dmul>
 8008916:	4602      	mov	r2, r0
 8008918:	460b      	mov	r3, r1
 800891a:	4630      	mov	r0, r6
 800891c:	4639      	mov	r1, r7
 800891e:	f7f7 fcab 	bl	8000278 <__aeabi_dsub>
 8008922:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008926:	4606      	mov	r6, r0
 8008928:	460f      	mov	r7, r1
 800892a:	4620      	mov	r0, r4
 800892c:	4629      	mov	r1, r5
 800892e:	f7f7 fca3 	bl	8000278 <__aeabi_dsub>
 8008932:	4602      	mov	r2, r0
 8008934:	460b      	mov	r3, r1
 8008936:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800893a:	f7f7 fc9d 	bl	8000278 <__aeabi_dsub>
 800893e:	465a      	mov	r2, fp
 8008940:	464b      	mov	r3, r9
 8008942:	f7f7 fe51 	bl	80005e8 <__aeabi_dmul>
 8008946:	4602      	mov	r2, r0
 8008948:	460b      	mov	r3, r1
 800894a:	4630      	mov	r0, r6
 800894c:	4639      	mov	r1, r7
 800894e:	f7f7 fc93 	bl	8000278 <__aeabi_dsub>
 8008952:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8008956:	f7f7 fe47 	bl	80005e8 <__aeabi_dmul>
 800895a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800895e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008962:	4610      	mov	r0, r2
 8008964:	4619      	mov	r1, r3
 8008966:	f7f7 fe3f 	bl	80005e8 <__aeabi_dmul>
 800896a:	a37d      	add	r3, pc, #500	@ (adr r3, 8008b60 <__ieee754_pow+0x738>)
 800896c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008970:	4604      	mov	r4, r0
 8008972:	460d      	mov	r5, r1
 8008974:	f7f7 fe38 	bl	80005e8 <__aeabi_dmul>
 8008978:	a37b      	add	r3, pc, #492	@ (adr r3, 8008b68 <__ieee754_pow+0x740>)
 800897a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800897e:	f7f7 fc7d 	bl	800027c <__adddf3>
 8008982:	4622      	mov	r2, r4
 8008984:	462b      	mov	r3, r5
 8008986:	f7f7 fe2f 	bl	80005e8 <__aeabi_dmul>
 800898a:	a379      	add	r3, pc, #484	@ (adr r3, 8008b70 <__ieee754_pow+0x748>)
 800898c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008990:	f7f7 fc74 	bl	800027c <__adddf3>
 8008994:	4622      	mov	r2, r4
 8008996:	462b      	mov	r3, r5
 8008998:	f7f7 fe26 	bl	80005e8 <__aeabi_dmul>
 800899c:	a376      	add	r3, pc, #472	@ (adr r3, 8008b78 <__ieee754_pow+0x750>)
 800899e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089a2:	f7f7 fc6b 	bl	800027c <__adddf3>
 80089a6:	4622      	mov	r2, r4
 80089a8:	462b      	mov	r3, r5
 80089aa:	f7f7 fe1d 	bl	80005e8 <__aeabi_dmul>
 80089ae:	a374      	add	r3, pc, #464	@ (adr r3, 8008b80 <__ieee754_pow+0x758>)
 80089b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089b4:	f7f7 fc62 	bl	800027c <__adddf3>
 80089b8:	4622      	mov	r2, r4
 80089ba:	462b      	mov	r3, r5
 80089bc:	f7f7 fe14 	bl	80005e8 <__aeabi_dmul>
 80089c0:	a371      	add	r3, pc, #452	@ (adr r3, 8008b88 <__ieee754_pow+0x760>)
 80089c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089c6:	f7f7 fc59 	bl	800027c <__adddf3>
 80089ca:	4622      	mov	r2, r4
 80089cc:	4606      	mov	r6, r0
 80089ce:	460f      	mov	r7, r1
 80089d0:	462b      	mov	r3, r5
 80089d2:	4620      	mov	r0, r4
 80089d4:	4629      	mov	r1, r5
 80089d6:	f7f7 fe07 	bl	80005e8 <__aeabi_dmul>
 80089da:	4602      	mov	r2, r0
 80089dc:	460b      	mov	r3, r1
 80089de:	4630      	mov	r0, r6
 80089e0:	4639      	mov	r1, r7
 80089e2:	f7f7 fe01 	bl	80005e8 <__aeabi_dmul>
 80089e6:	465a      	mov	r2, fp
 80089e8:	4604      	mov	r4, r0
 80089ea:	460d      	mov	r5, r1
 80089ec:	464b      	mov	r3, r9
 80089ee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80089f2:	f7f7 fc43 	bl	800027c <__adddf3>
 80089f6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80089fa:	f7f7 fdf5 	bl	80005e8 <__aeabi_dmul>
 80089fe:	4622      	mov	r2, r4
 8008a00:	462b      	mov	r3, r5
 8008a02:	f7f7 fc3b 	bl	800027c <__adddf3>
 8008a06:	465a      	mov	r2, fp
 8008a08:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008a0c:	464b      	mov	r3, r9
 8008a0e:	4658      	mov	r0, fp
 8008a10:	4649      	mov	r1, r9
 8008a12:	f7f7 fde9 	bl	80005e8 <__aeabi_dmul>
 8008a16:	4b6a      	ldr	r3, [pc, #424]	@ (8008bc0 <__ieee754_pow+0x798>)
 8008a18:	2200      	movs	r2, #0
 8008a1a:	4606      	mov	r6, r0
 8008a1c:	460f      	mov	r7, r1
 8008a1e:	f7f7 fc2d 	bl	800027c <__adddf3>
 8008a22:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008a26:	f7f7 fc29 	bl	800027c <__adddf3>
 8008a2a:	46d8      	mov	r8, fp
 8008a2c:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 8008a30:	460d      	mov	r5, r1
 8008a32:	465a      	mov	r2, fp
 8008a34:	460b      	mov	r3, r1
 8008a36:	4640      	mov	r0, r8
 8008a38:	4649      	mov	r1, r9
 8008a3a:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 8008a3e:	f7f7 fdd3 	bl	80005e8 <__aeabi_dmul>
 8008a42:	465c      	mov	r4, fp
 8008a44:	4680      	mov	r8, r0
 8008a46:	4689      	mov	r9, r1
 8008a48:	4b5d      	ldr	r3, [pc, #372]	@ (8008bc0 <__ieee754_pow+0x798>)
 8008a4a:	2200      	movs	r2, #0
 8008a4c:	4620      	mov	r0, r4
 8008a4e:	4629      	mov	r1, r5
 8008a50:	f7f7 fc12 	bl	8000278 <__aeabi_dsub>
 8008a54:	4632      	mov	r2, r6
 8008a56:	463b      	mov	r3, r7
 8008a58:	f7f7 fc0e 	bl	8000278 <__aeabi_dsub>
 8008a5c:	4602      	mov	r2, r0
 8008a5e:	460b      	mov	r3, r1
 8008a60:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008a64:	f7f7 fc08 	bl	8000278 <__aeabi_dsub>
 8008a68:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008a6c:	f7f7 fdbc 	bl	80005e8 <__aeabi_dmul>
 8008a70:	4622      	mov	r2, r4
 8008a72:	4606      	mov	r6, r0
 8008a74:	460f      	mov	r7, r1
 8008a76:	462b      	mov	r3, r5
 8008a78:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008a7c:	f7f7 fdb4 	bl	80005e8 <__aeabi_dmul>
 8008a80:	4602      	mov	r2, r0
 8008a82:	460b      	mov	r3, r1
 8008a84:	4630      	mov	r0, r6
 8008a86:	4639      	mov	r1, r7
 8008a88:	f7f7 fbf8 	bl	800027c <__adddf3>
 8008a8c:	4606      	mov	r6, r0
 8008a8e:	460f      	mov	r7, r1
 8008a90:	4602      	mov	r2, r0
 8008a92:	460b      	mov	r3, r1
 8008a94:	4640      	mov	r0, r8
 8008a96:	4649      	mov	r1, r9
 8008a98:	f7f7 fbf0 	bl	800027c <__adddf3>
 8008a9c:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 8008aa0:	a33b      	add	r3, pc, #236	@ (adr r3, 8008b90 <__ieee754_pow+0x768>)
 8008aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aa6:	4658      	mov	r0, fp
 8008aa8:	e9cd bc08 	strd	fp, ip, [sp, #32]
 8008aac:	460d      	mov	r5, r1
 8008aae:	f7f7 fd9b 	bl	80005e8 <__aeabi_dmul>
 8008ab2:	465c      	mov	r4, fp
 8008ab4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008ab8:	4642      	mov	r2, r8
 8008aba:	464b      	mov	r3, r9
 8008abc:	4620      	mov	r0, r4
 8008abe:	4629      	mov	r1, r5
 8008ac0:	f7f7 fbda 	bl	8000278 <__aeabi_dsub>
 8008ac4:	4602      	mov	r2, r0
 8008ac6:	460b      	mov	r3, r1
 8008ac8:	4630      	mov	r0, r6
 8008aca:	4639      	mov	r1, r7
 8008acc:	f7f7 fbd4 	bl	8000278 <__aeabi_dsub>
 8008ad0:	a331      	add	r3, pc, #196	@ (adr r3, 8008b98 <__ieee754_pow+0x770>)
 8008ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ad6:	f7f7 fd87 	bl	80005e8 <__aeabi_dmul>
 8008ada:	a331      	add	r3, pc, #196	@ (adr r3, 8008ba0 <__ieee754_pow+0x778>)
 8008adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ae0:	4606      	mov	r6, r0
 8008ae2:	460f      	mov	r7, r1
 8008ae4:	4620      	mov	r0, r4
 8008ae6:	4629      	mov	r1, r5
 8008ae8:	f7f7 fd7e 	bl	80005e8 <__aeabi_dmul>
 8008aec:	4602      	mov	r2, r0
 8008aee:	460b      	mov	r3, r1
 8008af0:	4630      	mov	r0, r6
 8008af2:	4639      	mov	r1, r7
 8008af4:	f7f7 fbc2 	bl	800027c <__adddf3>
 8008af8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008afa:	4b32      	ldr	r3, [pc, #200]	@ (8008bc4 <__ieee754_pow+0x79c>)
 8008afc:	4413      	add	r3, r2
 8008afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b02:	f7f7 fbbb 	bl	800027c <__adddf3>
 8008b06:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008b0a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008b0c:	f7f7 fd02 	bl	8000514 <__aeabi_i2d>
 8008b10:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008b12:	4b2d      	ldr	r3, [pc, #180]	@ (8008bc8 <__ieee754_pow+0x7a0>)
 8008b14:	4413      	add	r3, r2
 8008b16:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008b1a:	4606      	mov	r6, r0
 8008b1c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008b20:	460f      	mov	r7, r1
 8008b22:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008b26:	f7f7 fba9 	bl	800027c <__adddf3>
 8008b2a:	4642      	mov	r2, r8
 8008b2c:	464b      	mov	r3, r9
 8008b2e:	f7f7 fba5 	bl	800027c <__adddf3>
 8008b32:	4632      	mov	r2, r6
 8008b34:	463b      	mov	r3, r7
 8008b36:	f7f7 fba1 	bl	800027c <__adddf3>
 8008b3a:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 8008b3e:	4632      	mov	r2, r6
 8008b40:	463b      	mov	r3, r7
 8008b42:	4658      	mov	r0, fp
 8008b44:	460d      	mov	r5, r1
 8008b46:	f7f7 fb97 	bl	8000278 <__aeabi_dsub>
 8008b4a:	4642      	mov	r2, r8
 8008b4c:	464b      	mov	r3, r9
 8008b4e:	f7f7 fb93 	bl	8000278 <__aeabi_dsub>
 8008b52:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008b56:	f7f7 fb8f 	bl	8000278 <__aeabi_dsub>
 8008b5a:	465c      	mov	r4, fp
 8008b5c:	e036      	b.n	8008bcc <__ieee754_pow+0x7a4>
 8008b5e:	bf00      	nop
 8008b60:	4a454eef 	.word	0x4a454eef
 8008b64:	3fca7e28 	.word	0x3fca7e28
 8008b68:	93c9db65 	.word	0x93c9db65
 8008b6c:	3fcd864a 	.word	0x3fcd864a
 8008b70:	a91d4101 	.word	0xa91d4101
 8008b74:	3fd17460 	.word	0x3fd17460
 8008b78:	518f264d 	.word	0x518f264d
 8008b7c:	3fd55555 	.word	0x3fd55555
 8008b80:	db6fabff 	.word	0xdb6fabff
 8008b84:	3fdb6db6 	.word	0x3fdb6db6
 8008b88:	33333303 	.word	0x33333303
 8008b8c:	3fe33333 	.word	0x3fe33333
 8008b90:	e0000000 	.word	0xe0000000
 8008b94:	3feec709 	.word	0x3feec709
 8008b98:	dc3a03fd 	.word	0xdc3a03fd
 8008b9c:	3feec709 	.word	0x3feec709
 8008ba0:	145b01f5 	.word	0x145b01f5
 8008ba4:	be3e2fe0 	.word	0xbe3e2fe0
 8008ba8:	7ff00000 	.word	0x7ff00000
 8008bac:	43400000 	.word	0x43400000
 8008bb0:	0003988e 	.word	0x0003988e
 8008bb4:	000bb679 	.word	0x000bb679
 8008bb8:	08009928 	.word	0x08009928
 8008bbc:	3ff00000 	.word	0x3ff00000
 8008bc0:	40080000 	.word	0x40080000
 8008bc4:	08009908 	.word	0x08009908
 8008bc8:	08009918 	.word	0x08009918
 8008bcc:	4602      	mov	r2, r0
 8008bce:	460b      	mov	r3, r1
 8008bd0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008bd4:	e5d6      	b.n	8008784 <__ieee754_pow+0x35c>
 8008bd6:	f04f 0a01 	mov.w	sl, #1
 8008bda:	e65e      	b.n	800889a <__ieee754_pow+0x472>
 8008bdc:	a3b5      	add	r3, pc, #724	@ (adr r3, 8008eb4 <__ieee754_pow+0xa8c>)
 8008bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008be2:	4630      	mov	r0, r6
 8008be4:	4639      	mov	r1, r7
 8008be6:	f7f7 fb49 	bl	800027c <__adddf3>
 8008bea:	4642      	mov	r2, r8
 8008bec:	e9cd 0100 	strd	r0, r1, [sp]
 8008bf0:	464b      	mov	r3, r9
 8008bf2:	4620      	mov	r0, r4
 8008bf4:	4629      	mov	r1, r5
 8008bf6:	f7f7 fb3f 	bl	8000278 <__aeabi_dsub>
 8008bfa:	4602      	mov	r2, r0
 8008bfc:	460b      	mov	r3, r1
 8008bfe:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008c02:	f7f7 ff81 	bl	8000b08 <__aeabi_dcmpgt>
 8008c06:	2800      	cmp	r0, #0
 8008c08:	f47f adfe 	bne.w	8008808 <__ieee754_pow+0x3e0>
 8008c0c:	4ba2      	ldr	r3, [pc, #648]	@ (8008e98 <__ieee754_pow+0xa70>)
 8008c0e:	e022      	b.n	8008c56 <__ieee754_pow+0x82e>
 8008c10:	4ca2      	ldr	r4, [pc, #648]	@ (8008e9c <__ieee754_pow+0xa74>)
 8008c12:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8008c16:	42a3      	cmp	r3, r4
 8008c18:	d919      	bls.n	8008c4e <__ieee754_pow+0x826>
 8008c1a:	4ba1      	ldr	r3, [pc, #644]	@ (8008ea0 <__ieee754_pow+0xa78>)
 8008c1c:	440b      	add	r3, r1
 8008c1e:	4303      	orrs	r3, r0
 8008c20:	d009      	beq.n	8008c36 <__ieee754_pow+0x80e>
 8008c22:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008c26:	2200      	movs	r2, #0
 8008c28:	2300      	movs	r3, #0
 8008c2a:	f7f7 ff4f 	bl	8000acc <__aeabi_dcmplt>
 8008c2e:	3800      	subs	r0, #0
 8008c30:	bf18      	it	ne
 8008c32:	2001      	movne	r0, #1
 8008c34:	e512      	b.n	800865c <__ieee754_pow+0x234>
 8008c36:	4642      	mov	r2, r8
 8008c38:	464b      	mov	r3, r9
 8008c3a:	f7f7 fb1d 	bl	8000278 <__aeabi_dsub>
 8008c3e:	4632      	mov	r2, r6
 8008c40:	463b      	mov	r3, r7
 8008c42:	f7f7 ff57 	bl	8000af4 <__aeabi_dcmpge>
 8008c46:	2800      	cmp	r0, #0
 8008c48:	d1eb      	bne.n	8008c22 <__ieee754_pow+0x7fa>
 8008c4a:	4b96      	ldr	r3, [pc, #600]	@ (8008ea4 <__ieee754_pow+0xa7c>)
 8008c4c:	e003      	b.n	8008c56 <__ieee754_pow+0x82e>
 8008c4e:	4a96      	ldr	r2, [pc, #600]	@ (8008ea8 <__ieee754_pow+0xa80>)
 8008c50:	4293      	cmp	r3, r2
 8008c52:	f240 80e7 	bls.w	8008e24 <__ieee754_pow+0x9fc>
 8008c56:	151b      	asrs	r3, r3, #20
 8008c58:	f2a3 33fe 	subw	r3, r3, #1022	@ 0x3fe
 8008c5c:	f44f 1a80 	mov.w	sl, #1048576	@ 0x100000
 8008c60:	fa4a fa03 	asr.w	sl, sl, r3
 8008c64:	44da      	add	sl, fp
 8008c66:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8008c6a:	4890      	ldr	r0, [pc, #576]	@ (8008eac <__ieee754_pow+0xa84>)
 8008c6c:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8008c70:	4108      	asrs	r0, r1
 8008c72:	ea00 030a 	and.w	r3, r0, sl
 8008c76:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8008c7a:	f1c1 0114 	rsb	r1, r1, #20
 8008c7e:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8008c82:	fa4a fa01 	asr.w	sl, sl, r1
 8008c86:	f1bb 0f00 	cmp.w	fp, #0
 8008c8a:	4640      	mov	r0, r8
 8008c8c:	4649      	mov	r1, r9
 8008c8e:	f04f 0200 	mov.w	r2, #0
 8008c92:	bfb8      	it	lt
 8008c94:	f1ca 0a00 	rsblt	sl, sl, #0
 8008c98:	f7f7 faee 	bl	8000278 <__aeabi_dsub>
 8008c9c:	4680      	mov	r8, r0
 8008c9e:	4689      	mov	r9, r1
 8008ca0:	4632      	mov	r2, r6
 8008ca2:	463b      	mov	r3, r7
 8008ca4:	4640      	mov	r0, r8
 8008ca6:	4649      	mov	r1, r9
 8008ca8:	f7f7 fae8 	bl	800027c <__adddf3>
 8008cac:	2400      	movs	r4, #0
 8008cae:	a36a      	add	r3, pc, #424	@ (adr r3, 8008e58 <__ieee754_pow+0xa30>)
 8008cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cb4:	4620      	mov	r0, r4
 8008cb6:	460d      	mov	r5, r1
 8008cb8:	f7f7 fc96 	bl	80005e8 <__aeabi_dmul>
 8008cbc:	4642      	mov	r2, r8
 8008cbe:	e9cd 0100 	strd	r0, r1, [sp]
 8008cc2:	464b      	mov	r3, r9
 8008cc4:	4620      	mov	r0, r4
 8008cc6:	4629      	mov	r1, r5
 8008cc8:	f7f7 fad6 	bl	8000278 <__aeabi_dsub>
 8008ccc:	4602      	mov	r2, r0
 8008cce:	460b      	mov	r3, r1
 8008cd0:	4630      	mov	r0, r6
 8008cd2:	4639      	mov	r1, r7
 8008cd4:	f7f7 fad0 	bl	8000278 <__aeabi_dsub>
 8008cd8:	a361      	add	r3, pc, #388	@ (adr r3, 8008e60 <__ieee754_pow+0xa38>)
 8008cda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cde:	f7f7 fc83 	bl	80005e8 <__aeabi_dmul>
 8008ce2:	a361      	add	r3, pc, #388	@ (adr r3, 8008e68 <__ieee754_pow+0xa40>)
 8008ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ce8:	4680      	mov	r8, r0
 8008cea:	4689      	mov	r9, r1
 8008cec:	4620      	mov	r0, r4
 8008cee:	4629      	mov	r1, r5
 8008cf0:	f7f7 fc7a 	bl	80005e8 <__aeabi_dmul>
 8008cf4:	4602      	mov	r2, r0
 8008cf6:	460b      	mov	r3, r1
 8008cf8:	4640      	mov	r0, r8
 8008cfa:	4649      	mov	r1, r9
 8008cfc:	f7f7 fabe 	bl	800027c <__adddf3>
 8008d00:	4604      	mov	r4, r0
 8008d02:	460d      	mov	r5, r1
 8008d04:	4602      	mov	r2, r0
 8008d06:	460b      	mov	r3, r1
 8008d08:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008d0c:	f7f7 fab6 	bl	800027c <__adddf3>
 8008d10:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008d14:	4680      	mov	r8, r0
 8008d16:	4689      	mov	r9, r1
 8008d18:	f7f7 faae 	bl	8000278 <__aeabi_dsub>
 8008d1c:	4602      	mov	r2, r0
 8008d1e:	460b      	mov	r3, r1
 8008d20:	4620      	mov	r0, r4
 8008d22:	4629      	mov	r1, r5
 8008d24:	f7f7 faa8 	bl	8000278 <__aeabi_dsub>
 8008d28:	4642      	mov	r2, r8
 8008d2a:	4606      	mov	r6, r0
 8008d2c:	460f      	mov	r7, r1
 8008d2e:	464b      	mov	r3, r9
 8008d30:	4640      	mov	r0, r8
 8008d32:	4649      	mov	r1, r9
 8008d34:	f7f7 fc58 	bl	80005e8 <__aeabi_dmul>
 8008d38:	a34d      	add	r3, pc, #308	@ (adr r3, 8008e70 <__ieee754_pow+0xa48>)
 8008d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d3e:	4604      	mov	r4, r0
 8008d40:	460d      	mov	r5, r1
 8008d42:	f7f7 fc51 	bl	80005e8 <__aeabi_dmul>
 8008d46:	a34c      	add	r3, pc, #304	@ (adr r3, 8008e78 <__ieee754_pow+0xa50>)
 8008d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d4c:	f7f7 fa94 	bl	8000278 <__aeabi_dsub>
 8008d50:	4622      	mov	r2, r4
 8008d52:	462b      	mov	r3, r5
 8008d54:	f7f7 fc48 	bl	80005e8 <__aeabi_dmul>
 8008d58:	a349      	add	r3, pc, #292	@ (adr r3, 8008e80 <__ieee754_pow+0xa58>)
 8008d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d5e:	f7f7 fa8d 	bl	800027c <__adddf3>
 8008d62:	4622      	mov	r2, r4
 8008d64:	462b      	mov	r3, r5
 8008d66:	f7f7 fc3f 	bl	80005e8 <__aeabi_dmul>
 8008d6a:	a347      	add	r3, pc, #284	@ (adr r3, 8008e88 <__ieee754_pow+0xa60>)
 8008d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d70:	f7f7 fa82 	bl	8000278 <__aeabi_dsub>
 8008d74:	4622      	mov	r2, r4
 8008d76:	462b      	mov	r3, r5
 8008d78:	f7f7 fc36 	bl	80005e8 <__aeabi_dmul>
 8008d7c:	a344      	add	r3, pc, #272	@ (adr r3, 8008e90 <__ieee754_pow+0xa68>)
 8008d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d82:	f7f7 fa7b 	bl	800027c <__adddf3>
 8008d86:	4622      	mov	r2, r4
 8008d88:	462b      	mov	r3, r5
 8008d8a:	f7f7 fc2d 	bl	80005e8 <__aeabi_dmul>
 8008d8e:	4602      	mov	r2, r0
 8008d90:	460b      	mov	r3, r1
 8008d92:	4640      	mov	r0, r8
 8008d94:	4649      	mov	r1, r9
 8008d96:	f7f7 fa6f 	bl	8000278 <__aeabi_dsub>
 8008d9a:	4604      	mov	r4, r0
 8008d9c:	460d      	mov	r5, r1
 8008d9e:	4602      	mov	r2, r0
 8008da0:	460b      	mov	r3, r1
 8008da2:	4640      	mov	r0, r8
 8008da4:	4649      	mov	r1, r9
 8008da6:	f7f7 fc1f 	bl	80005e8 <__aeabi_dmul>
 8008daa:	2200      	movs	r2, #0
 8008dac:	e9cd 0100 	strd	r0, r1, [sp]
 8008db0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008db4:	4620      	mov	r0, r4
 8008db6:	4629      	mov	r1, r5
 8008db8:	f7f7 fa5e 	bl	8000278 <__aeabi_dsub>
 8008dbc:	4602      	mov	r2, r0
 8008dbe:	460b      	mov	r3, r1
 8008dc0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008dc4:	f7f7 fd3a 	bl	800083c <__aeabi_ddiv>
 8008dc8:	4632      	mov	r2, r6
 8008dca:	4604      	mov	r4, r0
 8008dcc:	460d      	mov	r5, r1
 8008dce:	463b      	mov	r3, r7
 8008dd0:	4640      	mov	r0, r8
 8008dd2:	4649      	mov	r1, r9
 8008dd4:	f7f7 fc08 	bl	80005e8 <__aeabi_dmul>
 8008dd8:	4632      	mov	r2, r6
 8008dda:	463b      	mov	r3, r7
 8008ddc:	f7f7 fa4e 	bl	800027c <__adddf3>
 8008de0:	4602      	mov	r2, r0
 8008de2:	460b      	mov	r3, r1
 8008de4:	4620      	mov	r0, r4
 8008de6:	4629      	mov	r1, r5
 8008de8:	f7f7 fa46 	bl	8000278 <__aeabi_dsub>
 8008dec:	4642      	mov	r2, r8
 8008dee:	464b      	mov	r3, r9
 8008df0:	f7f7 fa42 	bl	8000278 <__aeabi_dsub>
 8008df4:	460b      	mov	r3, r1
 8008df6:	4602      	mov	r2, r0
 8008df8:	492d      	ldr	r1, [pc, #180]	@ (8008eb0 <__ieee754_pow+0xa88>)
 8008dfa:	2000      	movs	r0, #0
 8008dfc:	f7f7 fa3c 	bl	8000278 <__aeabi_dsub>
 8008e00:	ec41 0b10 	vmov	d0, r0, r1
 8008e04:	ee10 3a90 	vmov	r3, s1
 8008e08:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8008e0c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008e10:	da0b      	bge.n	8008e2a <__ieee754_pow+0xa02>
 8008e12:	4650      	mov	r0, sl
 8008e14:	f000 f85c 	bl	8008ed0 <scalbn>
 8008e18:	ec51 0b10 	vmov	r0, r1, d0
 8008e1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008e20:	f7ff bb6d 	b.w	80084fe <__ieee754_pow+0xd6>
 8008e24:	f8dd a010 	ldr.w	sl, [sp, #16]
 8008e28:	e73a      	b.n	8008ca0 <__ieee754_pow+0x878>
 8008e2a:	ec51 0b10 	vmov	r0, r1, d0
 8008e2e:	4619      	mov	r1, r3
 8008e30:	e7f4      	b.n	8008e1c <__ieee754_pow+0x9f4>
 8008e32:	491f      	ldr	r1, [pc, #124]	@ (8008eb0 <__ieee754_pow+0xa88>)
 8008e34:	2000      	movs	r0, #0
 8008e36:	f7ff bb14 	b.w	8008462 <__ieee754_pow+0x3a>
 8008e3a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008e3e:	f7ff bb10 	b.w	8008462 <__ieee754_pow+0x3a>
 8008e42:	4630      	mov	r0, r6
 8008e44:	4639      	mov	r1, r7
 8008e46:	f7ff bb0c 	b.w	8008462 <__ieee754_pow+0x3a>
 8008e4a:	460c      	mov	r4, r1
 8008e4c:	f7ff bb69 	b.w	8008522 <__ieee754_pow+0xfa>
 8008e50:	2400      	movs	r4, #0
 8008e52:	f7ff bb4b 	b.w	80084ec <__ieee754_pow+0xc4>
 8008e56:	bf00      	nop
 8008e58:	00000000 	.word	0x00000000
 8008e5c:	3fe62e43 	.word	0x3fe62e43
 8008e60:	fefa39ef 	.word	0xfefa39ef
 8008e64:	3fe62e42 	.word	0x3fe62e42
 8008e68:	0ca86c39 	.word	0x0ca86c39
 8008e6c:	be205c61 	.word	0xbe205c61
 8008e70:	72bea4d0 	.word	0x72bea4d0
 8008e74:	3e663769 	.word	0x3e663769
 8008e78:	c5d26bf1 	.word	0xc5d26bf1
 8008e7c:	3ebbbd41 	.word	0x3ebbbd41
 8008e80:	af25de2c 	.word	0xaf25de2c
 8008e84:	3f11566a 	.word	0x3f11566a
 8008e88:	16bebd93 	.word	0x16bebd93
 8008e8c:	3f66c16c 	.word	0x3f66c16c
 8008e90:	5555553e 	.word	0x5555553e
 8008e94:	3fc55555 	.word	0x3fc55555
 8008e98:	40900000 	.word	0x40900000
 8008e9c:	4090cbff 	.word	0x4090cbff
 8008ea0:	3f6f3400 	.word	0x3f6f3400
 8008ea4:	4090cc00 	.word	0x4090cc00
 8008ea8:	3fe00000 	.word	0x3fe00000
 8008eac:	fff00000 	.word	0xfff00000
 8008eb0:	3ff00000 	.word	0x3ff00000
 8008eb4:	652b82fe 	.word	0x652b82fe
 8008eb8:	3c971547 	.word	0x3c971547

08008ebc <fabs>:
 8008ebc:	ec51 0b10 	vmov	r0, r1, d0
 8008ec0:	4602      	mov	r2, r0
 8008ec2:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8008ec6:	ec43 2b10 	vmov	d0, r2, r3
 8008eca:	4770      	bx	lr
 8008ecc:	0000      	movs	r0, r0
	...

08008ed0 <scalbn>:
 8008ed0:	b570      	push	{r4, r5, r6, lr}
 8008ed2:	ec55 4b10 	vmov	r4, r5, d0
 8008ed6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8008eda:	4606      	mov	r6, r0
 8008edc:	462b      	mov	r3, r5
 8008ede:	b991      	cbnz	r1, 8008f06 <scalbn+0x36>
 8008ee0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8008ee4:	4323      	orrs	r3, r4
 8008ee6:	d03b      	beq.n	8008f60 <scalbn+0x90>
 8008ee8:	4b33      	ldr	r3, [pc, #204]	@ (8008fb8 <scalbn+0xe8>)
 8008eea:	4620      	mov	r0, r4
 8008eec:	4629      	mov	r1, r5
 8008eee:	2200      	movs	r2, #0
 8008ef0:	f7f7 fb7a 	bl	80005e8 <__aeabi_dmul>
 8008ef4:	4b31      	ldr	r3, [pc, #196]	@ (8008fbc <scalbn+0xec>)
 8008ef6:	429e      	cmp	r6, r3
 8008ef8:	4604      	mov	r4, r0
 8008efa:	460d      	mov	r5, r1
 8008efc:	da0f      	bge.n	8008f1e <scalbn+0x4e>
 8008efe:	a326      	add	r3, pc, #152	@ (adr r3, 8008f98 <scalbn+0xc8>)
 8008f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f04:	e01e      	b.n	8008f44 <scalbn+0x74>
 8008f06:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8008f0a:	4291      	cmp	r1, r2
 8008f0c:	d10b      	bne.n	8008f26 <scalbn+0x56>
 8008f0e:	4622      	mov	r2, r4
 8008f10:	4620      	mov	r0, r4
 8008f12:	4629      	mov	r1, r5
 8008f14:	f7f7 f9b2 	bl	800027c <__adddf3>
 8008f18:	4604      	mov	r4, r0
 8008f1a:	460d      	mov	r5, r1
 8008f1c:	e020      	b.n	8008f60 <scalbn+0x90>
 8008f1e:	460b      	mov	r3, r1
 8008f20:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8008f24:	3936      	subs	r1, #54	@ 0x36
 8008f26:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8008f2a:	4296      	cmp	r6, r2
 8008f2c:	dd0d      	ble.n	8008f4a <scalbn+0x7a>
 8008f2e:	2d00      	cmp	r5, #0
 8008f30:	a11b      	add	r1, pc, #108	@ (adr r1, 8008fa0 <scalbn+0xd0>)
 8008f32:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008f36:	da02      	bge.n	8008f3e <scalbn+0x6e>
 8008f38:	a11b      	add	r1, pc, #108	@ (adr r1, 8008fa8 <scalbn+0xd8>)
 8008f3a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008f3e:	a318      	add	r3, pc, #96	@ (adr r3, 8008fa0 <scalbn+0xd0>)
 8008f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f44:	f7f7 fb50 	bl	80005e8 <__aeabi_dmul>
 8008f48:	e7e6      	b.n	8008f18 <scalbn+0x48>
 8008f4a:	1872      	adds	r2, r6, r1
 8008f4c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8008f50:	428a      	cmp	r2, r1
 8008f52:	dcec      	bgt.n	8008f2e <scalbn+0x5e>
 8008f54:	2a00      	cmp	r2, #0
 8008f56:	dd06      	ble.n	8008f66 <scalbn+0x96>
 8008f58:	f36f 531e 	bfc	r3, #20, #11
 8008f5c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008f60:	ec45 4b10 	vmov	d0, r4, r5
 8008f64:	bd70      	pop	{r4, r5, r6, pc}
 8008f66:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8008f6a:	da08      	bge.n	8008f7e <scalbn+0xae>
 8008f6c:	2d00      	cmp	r5, #0
 8008f6e:	a10a      	add	r1, pc, #40	@ (adr r1, 8008f98 <scalbn+0xc8>)
 8008f70:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008f74:	dac3      	bge.n	8008efe <scalbn+0x2e>
 8008f76:	a10e      	add	r1, pc, #56	@ (adr r1, 8008fb0 <scalbn+0xe0>)
 8008f78:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008f7c:	e7bf      	b.n	8008efe <scalbn+0x2e>
 8008f7e:	3236      	adds	r2, #54	@ 0x36
 8008f80:	f36f 531e 	bfc	r3, #20, #11
 8008f84:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008f88:	4620      	mov	r0, r4
 8008f8a:	4b0d      	ldr	r3, [pc, #52]	@ (8008fc0 <scalbn+0xf0>)
 8008f8c:	4629      	mov	r1, r5
 8008f8e:	2200      	movs	r2, #0
 8008f90:	e7d8      	b.n	8008f44 <scalbn+0x74>
 8008f92:	bf00      	nop
 8008f94:	f3af 8000 	nop.w
 8008f98:	c2f8f359 	.word	0xc2f8f359
 8008f9c:	01a56e1f 	.word	0x01a56e1f
 8008fa0:	8800759c 	.word	0x8800759c
 8008fa4:	7e37e43c 	.word	0x7e37e43c
 8008fa8:	8800759c 	.word	0x8800759c
 8008fac:	fe37e43c 	.word	0xfe37e43c
 8008fb0:	c2f8f359 	.word	0xc2f8f359
 8008fb4:	81a56e1f 	.word	0x81a56e1f
 8008fb8:	43500000 	.word	0x43500000
 8008fbc:	ffff3cb0 	.word	0xffff3cb0
 8008fc0:	3c900000 	.word	0x3c900000

08008fc4 <with_errno>:
 8008fc4:	b510      	push	{r4, lr}
 8008fc6:	ed2d 8b02 	vpush	{d8}
 8008fca:	eeb0 8a40 	vmov.f32	s16, s0
 8008fce:	eef0 8a60 	vmov.f32	s17, s1
 8008fd2:	4604      	mov	r4, r0
 8008fd4:	f7fe fa60 	bl	8007498 <__errno>
 8008fd8:	eeb0 0a48 	vmov.f32	s0, s16
 8008fdc:	eef0 0a68 	vmov.f32	s1, s17
 8008fe0:	ecbd 8b02 	vpop	{d8}
 8008fe4:	6004      	str	r4, [r0, #0]
 8008fe6:	bd10      	pop	{r4, pc}

08008fe8 <xflow>:
 8008fe8:	4603      	mov	r3, r0
 8008fea:	b507      	push	{r0, r1, r2, lr}
 8008fec:	ec51 0b10 	vmov	r0, r1, d0
 8008ff0:	b183      	cbz	r3, 8009014 <xflow+0x2c>
 8008ff2:	4602      	mov	r2, r0
 8008ff4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008ff8:	e9cd 2300 	strd	r2, r3, [sp]
 8008ffc:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009000:	f7f7 faf2 	bl	80005e8 <__aeabi_dmul>
 8009004:	ec41 0b10 	vmov	d0, r0, r1
 8009008:	2022      	movs	r0, #34	@ 0x22
 800900a:	b003      	add	sp, #12
 800900c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009010:	f7ff bfd8 	b.w	8008fc4 <with_errno>
 8009014:	4602      	mov	r2, r0
 8009016:	460b      	mov	r3, r1
 8009018:	e7ee      	b.n	8008ff8 <xflow+0x10>
 800901a:	0000      	movs	r0, r0
 800901c:	0000      	movs	r0, r0
	...

08009020 <__math_uflow>:
 8009020:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8009028 <__math_uflow+0x8>
 8009024:	f7ff bfe0 	b.w	8008fe8 <xflow>
 8009028:	00000000 	.word	0x00000000
 800902c:	10000000 	.word	0x10000000

08009030 <__math_oflow>:
 8009030:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8009038 <__math_oflow+0x8>
 8009034:	f7ff bfd8 	b.w	8008fe8 <xflow>
 8009038:	00000000 	.word	0x00000000
 800903c:	70000000 	.word	0x70000000

08009040 <_init>:
 8009040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009042:	bf00      	nop
 8009044:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009046:	bc08      	pop	{r3}
 8009048:	469e      	mov	lr, r3
 800904a:	4770      	bx	lr

0800904c <_fini>:
 800904c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800904e:	bf00      	nop
 8009050:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009052:	bc08      	pop	{r3}
 8009054:	469e      	mov	lr, r3
 8009056:	4770      	bx	lr
