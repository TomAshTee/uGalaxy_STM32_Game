
SpaceShooter-v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009cc0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008e0  08009e50  08009e50  0000ae50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a730  0800a730  0000c074  2**0
                  CONTENTS
  4 .ARM          00000008  0800a730  0800a730  0000b730  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a738  0800a738  0000c074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a738  0800a738  0000b738  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a73c  0800a73c  0000b73c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800a740  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002d44  20000074  0800a7b4  0000c074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002db8  0800a7b4  0000cdb8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010708  00000000  00000000  0000c0a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e3c  00000000  00000000  0001c7ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fc0  00000000  00000000  0001f5e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bc4  00000000  00000000  000205a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002331c  00000000  00000000  0002116c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012dac  00000000  00000000  00044488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d08a3  00000000  00000000  00057234  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00127ad7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d5c  00000000  00000000  00127b1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  0012c878  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009e38 	.word	0x08009e38

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08009e38 	.word	0x08009e38

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	@ 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmpun>:
 8000b1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b24:	d102      	bne.n	8000b2c <__aeabi_dcmpun+0x10>
 8000b26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b2a:	d10a      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x20>
 8000b36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b3a:	d102      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	f04f 0001 	mov.w	r0, #1
 8000b46:	4770      	bx	lr

08000b48 <GFX_DrowLine>:
	        }
	   }
}

//Bresenham's algorithm - Wikipedia
void GFX_DrowLine(int X1, int Y1,int X2,int Y2,int I_O) {
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b08e      	sub	sp, #56	@ 0x38
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	60f8      	str	r0, [r7, #12]
 8000b50:	60b9      	str	r1, [r7, #8]
 8000b52:	607a      	str	r2, [r7, #4]
 8000b54:	603b      	str	r3, [r7, #0]
	int CurrentX, CurrentY, Xinc, Yinc,
		Dx, Dy, TwoDx, TwoDy,
		TwoDxAccumulatedError, TwoDyAccumulatedError;

	Dx = (X2-X1);
 8000b56:	687a      	ldr	r2, [r7, #4]
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	1ad3      	subs	r3, r2, r3
 8000b5c:	627b      	str	r3, [r7, #36]	@ 0x24
	Dy = (Y2-Y1);
 8000b5e:	683a      	ldr	r2, [r7, #0]
 8000b60:	68bb      	ldr	r3, [r7, #8]
 8000b62:	1ad3      	subs	r3, r2, r3
 8000b64:	623b      	str	r3, [r7, #32]

	TwoDx = Dx + Dx;
 8000b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b68:	005b      	lsls	r3, r3, #1
 8000b6a:	61fb      	str	r3, [r7, #28]
	TwoDy = Dy + Dy;
 8000b6c:	6a3b      	ldr	r3, [r7, #32]
 8000b6e:	005b      	lsls	r3, r3, #1
 8000b70:	61bb      	str	r3, [r7, #24]

	CurrentX = X1;
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	637b      	str	r3, [r7, #52]	@ 0x34
	CurrentY = Y1;
 8000b76:	68bb      	ldr	r3, [r7, #8]
 8000b78:	633b      	str	r3, [r7, #48]	@ 0x30

	Xinc = 1;
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	Yinc = 1;
 8000b7e:	2301      	movs	r3, #1
 8000b80:	62bb      	str	r3, [r7, #40]	@ 0x28

	if(Dx < 0) {
 8000b82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	da08      	bge.n	8000b9a <GFX_DrowLine+0x52>

		Xinc = -1;
 8000b88:	f04f 33ff 	mov.w	r3, #4294967295
 8000b8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
		Dx = -Dx;
 8000b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b90:	425b      	negs	r3, r3
 8000b92:	627b      	str	r3, [r7, #36]	@ 0x24
		TwoDx = -TwoDx;
 8000b94:	69fb      	ldr	r3, [r7, #28]
 8000b96:	425b      	negs	r3, r3
 8000b98:	61fb      	str	r3, [r7, #28]
	}

	if (Dy < 0) {
 8000b9a:	6a3b      	ldr	r3, [r7, #32]
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	da08      	bge.n	8000bb2 <GFX_DrowLine+0x6a>
		Yinc = -1;
 8000ba0:	f04f 33ff 	mov.w	r3, #4294967295
 8000ba4:	62bb      	str	r3, [r7, #40]	@ 0x28
		Dy = -Dy;
 8000ba6:	6a3b      	ldr	r3, [r7, #32]
 8000ba8:	425b      	negs	r3, r3
 8000baa:	623b      	str	r3, [r7, #32]
		TwoDy = -TwoDy;
 8000bac:	69bb      	ldr	r3, [r7, #24]
 8000bae:	425b      	negs	r3, r3
 8000bb0:	61bb      	str	r3, [r7, #24]
	}

	SSD1327_SetPixel(X1,Y1,I_O);
 8000bb2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000bb4:	b2db      	uxtb	r3, r3
 8000bb6:	461a      	mov	r2, r3
 8000bb8:	68b9      	ldr	r1, [r7, #8]
 8000bba:	68f8      	ldr	r0, [r7, #12]
 8000bbc:	f003 f95a 	bl	8003e74 <SSD1327_SetPixel>

	if ((Dx != 0) || (Dy != 0)) {
 8000bc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d102      	bne.n	8000bcc <GFX_DrowLine+0x84>
 8000bc6:	6a3b      	ldr	r3, [r7, #32]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d046      	beq.n	8000c5a <GFX_DrowLine+0x112>

		if (Dy <= Dx) {
 8000bcc:	6a3a      	ldr	r2, [r7, #32]
 8000bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bd0:	429a      	cmp	r2, r3
 8000bd2:	dc21      	bgt.n	8000c18 <GFX_DrowLine+0xd0>
			TwoDxAccumulatedError = 0;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	617b      	str	r3, [r7, #20]
			do {
			    CurrentX += Xinc;
 8000bd8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000bda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000bdc:	4413      	add	r3, r2
 8000bde:	637b      	str	r3, [r7, #52]	@ 0x34
			    TwoDxAccumulatedError += TwoDy;
 8000be0:	697a      	ldr	r2, [r7, #20]
 8000be2:	69bb      	ldr	r3, [r7, #24]
 8000be4:	4413      	add	r3, r2
 8000be6:	617b      	str	r3, [r7, #20]
			    if(TwoDxAccumulatedError > Dx) {
 8000be8:	697a      	ldr	r2, [r7, #20]
 8000bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bec:	429a      	cmp	r2, r3
 8000bee:	dd07      	ble.n	8000c00 <GFX_DrowLine+0xb8>
			        CurrentY += Yinc;
 8000bf0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000bf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000bf4:	4413      	add	r3, r2
 8000bf6:	633b      	str	r3, [r7, #48]	@ 0x30
			        TwoDxAccumulatedError -= TwoDx;
 8000bf8:	697a      	ldr	r2, [r7, #20]
 8000bfa:	69fb      	ldr	r3, [r7, #28]
 8000bfc:	1ad3      	subs	r3, r2, r3
 8000bfe:	617b      	str	r3, [r7, #20]
			    }
			    SSD1327_SetPixel(CurrentX,CurrentY,I_O);
 8000c00:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000c02:	b2db      	uxtb	r3, r3
 8000c04:	461a      	mov	r2, r3
 8000c06:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8000c08:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8000c0a:	f003 f933 	bl	8003e74 <SSD1327_SetPixel>
			  } while (CurrentX != X2);
 8000c0e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	429a      	cmp	r2, r3
 8000c14:	d1e0      	bne.n	8000bd8 <GFX_DrowLine+0x90>
			      }
			      SSD1327_SetPixel(CurrentX,CurrentY,I_O);
			  } while (CurrentY != Y2);
		  }
	}
}
 8000c16:	e020      	b.n	8000c5a <GFX_DrowLine+0x112>
			  TwoDyAccumulatedError = 0;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	613b      	str	r3, [r7, #16]
			      CurrentY += Yinc;
 8000c1c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000c1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000c20:	4413      	add	r3, r2
 8000c22:	633b      	str	r3, [r7, #48]	@ 0x30
			      TwoDyAccumulatedError += TwoDx;
 8000c24:	693a      	ldr	r2, [r7, #16]
 8000c26:	69fb      	ldr	r3, [r7, #28]
 8000c28:	4413      	add	r3, r2
 8000c2a:	613b      	str	r3, [r7, #16]
			      if(TwoDyAccumulatedError>Dy) {
 8000c2c:	693a      	ldr	r2, [r7, #16]
 8000c2e:	6a3b      	ldr	r3, [r7, #32]
 8000c30:	429a      	cmp	r2, r3
 8000c32:	dd07      	ble.n	8000c44 <GFX_DrowLine+0xfc>
				      CurrentX += Xinc;
 8000c34:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000c36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c38:	4413      	add	r3, r2
 8000c3a:	637b      	str	r3, [r7, #52]	@ 0x34
				      TwoDyAccumulatedError -= TwoDy;
 8000c3c:	693a      	ldr	r2, [r7, #16]
 8000c3e:	69bb      	ldr	r3, [r7, #24]
 8000c40:	1ad3      	subs	r3, r2, r3
 8000c42:	613b      	str	r3, [r7, #16]
			      SSD1327_SetPixel(CurrentX,CurrentY,I_O);
 8000c44:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000c46:	b2db      	uxtb	r3, r3
 8000c48:	461a      	mov	r2, r3
 8000c4a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8000c4c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8000c4e:	f003 f911 	bl	8003e74 <SSD1327_SetPixel>
			  } while (CurrentY != Y2);
 8000c52:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	429a      	cmp	r2, r3
 8000c58:	d1e0      	bne.n	8000c1c <GFX_DrowLine+0xd4>
}
 8000c5a:	bf00      	nop
 8000c5c:	3738      	adds	r7, #56	@ 0x38
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}

08000c62 <GFX_DrowCircleHelper>:
		}
	}
}

void GFX_DrowCircleHelper(int x0, int y0, int r, uint8_t cornername, uint8_t color )
{
 8000c62:	b580      	push	{r7, lr}
 8000c64:	b08a      	sub	sp, #40	@ 0x28
 8000c66:	af00      	add	r7, sp, #0
 8000c68:	60f8      	str	r0, [r7, #12]
 8000c6a:	60b9      	str	r1, [r7, #8]
 8000c6c:	607a      	str	r2, [r7, #4]
 8000c6e:	70fb      	strb	r3, [r7, #3]
	int f 		= 1 - r;
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	f1c3 0301 	rsb	r3, r3, #1
 8000c76:	627b      	str	r3, [r7, #36]	@ 0x24
	int ddF_x 	= 1;
 8000c78:	2301      	movs	r3, #1
 8000c7a:	623b      	str	r3, [r7, #32]
	int ddF_y	= -2 * r;
 8000c7c:	687a      	ldr	r2, [r7, #4]
 8000c7e:	4613      	mov	r3, r2
 8000c80:	07db      	lsls	r3, r3, #31
 8000c82:	1a9b      	subs	r3, r3, r2
 8000c84:	005b      	lsls	r3, r3, #1
 8000c86:	61fb      	str	r3, [r7, #28]
	int x		= 0;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	61bb      	str	r3, [r7, #24]
	int y		= r;
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	617b      	str	r3, [r7, #20]

	while(x<y)
 8000c90:	e082      	b.n	8000d98 <GFX_DrowCircleHelper+0x136>
	{
		if(f >= 0)
 8000c92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	db09      	blt.n	8000cac <GFX_DrowCircleHelper+0x4a>
		{
			y--;
 8000c98:	697b      	ldr	r3, [r7, #20]
 8000c9a:	3b01      	subs	r3, #1
 8000c9c:	617b      	str	r3, [r7, #20]
			ddF_y += 2;
 8000c9e:	69fb      	ldr	r3, [r7, #28]
 8000ca0:	3302      	adds	r3, #2
 8000ca2:	61fb      	str	r3, [r7, #28]
			f += ddF_y;
 8000ca4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000ca6:	69fb      	ldr	r3, [r7, #28]
 8000ca8:	4413      	add	r3, r2
 8000caa:	627b      	str	r3, [r7, #36]	@ 0x24
		}
		x++;
 8000cac:	69bb      	ldr	r3, [r7, #24]
 8000cae:	3301      	adds	r3, #1
 8000cb0:	61bb      	str	r3, [r7, #24]
		ddF_x += 2;
 8000cb2:	6a3b      	ldr	r3, [r7, #32]
 8000cb4:	3302      	adds	r3, #2
 8000cb6:	623b      	str	r3, [r7, #32]
		f += ddF_x;
 8000cb8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000cba:	6a3b      	ldr	r3, [r7, #32]
 8000cbc:	4413      	add	r3, r2
 8000cbe:	627b      	str	r3, [r7, #36]	@ 0x24

		if(cornername & 0x4)
 8000cc0:	78fb      	ldrb	r3, [r7, #3]
 8000cc2:	f003 0304 	and.w	r3, r3, #4
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d015      	beq.n	8000cf6 <GFX_DrowCircleHelper+0x94>
		{
			SSD1327_SetPixel(x0 + x, y0 + y, color);
 8000cca:	68fa      	ldr	r2, [r7, #12]
 8000ccc:	69bb      	ldr	r3, [r7, #24]
 8000cce:	18d0      	adds	r0, r2, r3
 8000cd0:	68ba      	ldr	r2, [r7, #8]
 8000cd2:	697b      	ldr	r3, [r7, #20]
 8000cd4:	4413      	add	r3, r2
 8000cd6:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8000cda:	4619      	mov	r1, r3
 8000cdc:	f003 f8ca 	bl	8003e74 <SSD1327_SetPixel>
			SSD1327_SetPixel(x0 + y, y0 + x, color);
 8000ce0:	68fa      	ldr	r2, [r7, #12]
 8000ce2:	697b      	ldr	r3, [r7, #20]
 8000ce4:	18d0      	adds	r0, r2, r3
 8000ce6:	68ba      	ldr	r2, [r7, #8]
 8000ce8:	69bb      	ldr	r3, [r7, #24]
 8000cea:	4413      	add	r3, r2
 8000cec:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	f003 f8bf 	bl	8003e74 <SSD1327_SetPixel>
		}
		if(cornername & 0x2)
 8000cf6:	78fb      	ldrb	r3, [r7, #3]
 8000cf8:	f003 0302 	and.w	r3, r3, #2
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d015      	beq.n	8000d2c <GFX_DrowCircleHelper+0xca>
		{
			SSD1327_SetPixel(x0 + x, y0 - y, color);
 8000d00:	68fa      	ldr	r2, [r7, #12]
 8000d02:	69bb      	ldr	r3, [r7, #24]
 8000d04:	18d0      	adds	r0, r2, r3
 8000d06:	68ba      	ldr	r2, [r7, #8]
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	1ad3      	subs	r3, r2, r3
 8000d0c:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8000d10:	4619      	mov	r1, r3
 8000d12:	f003 f8af 	bl	8003e74 <SSD1327_SetPixel>
			SSD1327_SetPixel(x0 + y, y0 - x, color);
 8000d16:	68fa      	ldr	r2, [r7, #12]
 8000d18:	697b      	ldr	r3, [r7, #20]
 8000d1a:	18d0      	adds	r0, r2, r3
 8000d1c:	68ba      	ldr	r2, [r7, #8]
 8000d1e:	69bb      	ldr	r3, [r7, #24]
 8000d20:	1ad3      	subs	r3, r2, r3
 8000d22:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8000d26:	4619      	mov	r1, r3
 8000d28:	f003 f8a4 	bl	8003e74 <SSD1327_SetPixel>
		}
		if(cornername & 0x8)
 8000d2c:	78fb      	ldrb	r3, [r7, #3]
 8000d2e:	f003 0308 	and.w	r3, r3, #8
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d015      	beq.n	8000d62 <GFX_DrowCircleHelper+0x100>
		{
			SSD1327_SetPixel(x0 - x, y0 + y, color);
 8000d36:	68fa      	ldr	r2, [r7, #12]
 8000d38:	69bb      	ldr	r3, [r7, #24]
 8000d3a:	1ad0      	subs	r0, r2, r3
 8000d3c:	68ba      	ldr	r2, [r7, #8]
 8000d3e:	697b      	ldr	r3, [r7, #20]
 8000d40:	4413      	add	r3, r2
 8000d42:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8000d46:	4619      	mov	r1, r3
 8000d48:	f003 f894 	bl	8003e74 <SSD1327_SetPixel>
			SSD1327_SetPixel(x0 - y, y0 + x, color);
 8000d4c:	68fa      	ldr	r2, [r7, #12]
 8000d4e:	697b      	ldr	r3, [r7, #20]
 8000d50:	1ad0      	subs	r0, r2, r3
 8000d52:	68ba      	ldr	r2, [r7, #8]
 8000d54:	69bb      	ldr	r3, [r7, #24]
 8000d56:	4413      	add	r3, r2
 8000d58:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	f003 f889 	bl	8003e74 <SSD1327_SetPixel>
		}
		if(cornername & 0x1)
 8000d62:	78fb      	ldrb	r3, [r7, #3]
 8000d64:	f003 0301 	and.w	r3, r3, #1
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d015      	beq.n	8000d98 <GFX_DrowCircleHelper+0x136>
		{
			SSD1327_SetPixel(x0 - x, y0 - y, color);
 8000d6c:	68fa      	ldr	r2, [r7, #12]
 8000d6e:	69bb      	ldr	r3, [r7, #24]
 8000d70:	1ad0      	subs	r0, r2, r3
 8000d72:	68ba      	ldr	r2, [r7, #8]
 8000d74:	697b      	ldr	r3, [r7, #20]
 8000d76:	1ad3      	subs	r3, r2, r3
 8000d78:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	f003 f879 	bl	8003e74 <SSD1327_SetPixel>
			SSD1327_SetPixel(x0 - y, y0 - x, color);
 8000d82:	68fa      	ldr	r2, [r7, #12]
 8000d84:	697b      	ldr	r3, [r7, #20]
 8000d86:	1ad0      	subs	r0, r2, r3
 8000d88:	68ba      	ldr	r2, [r7, #8]
 8000d8a:	69bb      	ldr	r3, [r7, #24]
 8000d8c:	1ad3      	subs	r3, r2, r3
 8000d8e:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8000d92:	4619      	mov	r1, r3
 8000d94:	f003 f86e 	bl	8003e74 <SSD1327_SetPixel>
	while(x<y)
 8000d98:	69ba      	ldr	r2, [r7, #24]
 8000d9a:	697b      	ldr	r3, [r7, #20]
 8000d9c:	429a      	cmp	r2, r3
 8000d9e:	f6ff af78 	blt.w	8000c92 <GFX_DrowCircleHelper+0x30>
		}
	}
}
 8000da2:	bf00      	nop
 8000da4:	bf00      	nop
 8000da6:	3728      	adds	r7, #40	@ 0x28
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}

08000dac <GFX_DrowBitMap_P>:
		GFX_DrowLine(x0-y, y0+x, x0-y, y0-x,I_O);
  	}
}

void GFX_DrowBitMap_P (int x, int y, const uint8_t *bitmap, uint8_t w, uint8_t h, uint8_t color)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b086      	sub	sp, #24
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	60f8      	str	r0, [r7, #12]
 8000db4:	60b9      	str	r1, [r7, #8]
 8000db6:	607a      	str	r2, [r7, #4]
 8000db8:	70fb      	strb	r3, [r7, #3]
//
//			ssd1327_setPixel(x+i, y+j, );
//		}
//	}

	uint8_t i, j, byteWidth = (w+7)/8;
 8000dba:	78fb      	ldrb	r3, [r7, #3]
 8000dbc:	3307      	adds	r3, #7
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	da00      	bge.n	8000dc4 <GFX_DrowBitMap_P+0x18>
 8000dc2:	3307      	adds	r3, #7
 8000dc4:	10db      	asrs	r3, r3, #3
 8000dc6:	757b      	strb	r3, [r7, #21]

	for(j = 0; j < h; j++)
 8000dc8:	2300      	movs	r3, #0
 8000dca:	75bb      	strb	r3, [r7, #22]
 8000dcc:	e02d      	b.n	8000e2a <GFX_DrowBitMap_P+0x7e>
	{
		for(i = 0; i < w; i++)
 8000dce:	2300      	movs	r3, #0
 8000dd0:	75fb      	strb	r3, [r7, #23]
 8000dd2:	e023      	b.n	8000e1c <GFX_DrowBitMap_P+0x70>
		{
			if(*(bitmap + j *byteWidth + i /8) & (128 >> (i&7)) )
 8000dd4:	7dbb      	ldrb	r3, [r7, #22]
 8000dd6:	7d7a      	ldrb	r2, [r7, #21]
 8000dd8:	fb02 f303 	mul.w	r3, r2, r3
 8000ddc:	461a      	mov	r2, r3
 8000dde:	7dfb      	ldrb	r3, [r7, #23]
 8000de0:	08db      	lsrs	r3, r3, #3
 8000de2:	b2db      	uxtb	r3, r3
 8000de4:	4413      	add	r3, r2
 8000de6:	687a      	ldr	r2, [r7, #4]
 8000de8:	4413      	add	r3, r2
 8000dea:	781b      	ldrb	r3, [r3, #0]
 8000dec:	4619      	mov	r1, r3
 8000dee:	7dfb      	ldrb	r3, [r7, #23]
 8000df0:	f003 0307 	and.w	r3, r3, #7
 8000df4:	2280      	movs	r2, #128	@ 0x80
 8000df6:	fa42 f303 	asr.w	r3, r2, r3
 8000dfa:	400b      	ands	r3, r1
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d00a      	beq.n	8000e16 <GFX_DrowBitMap_P+0x6a>
				SSD1327_SetPixel(x+i, y+j, color);
 8000e00:	7dfa      	ldrb	r2, [r7, #23]
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	18d0      	adds	r0, r2, r3
 8000e06:	7dba      	ldrb	r2, [r7, #22]
 8000e08:	68bb      	ldr	r3, [r7, #8]
 8000e0a:	4413      	add	r3, r2
 8000e0c:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8000e10:	4619      	mov	r1, r3
 8000e12:	f003 f82f 	bl	8003e74 <SSD1327_SetPixel>
		for(i = 0; i < w; i++)
 8000e16:	7dfb      	ldrb	r3, [r7, #23]
 8000e18:	3301      	adds	r3, #1
 8000e1a:	75fb      	strb	r3, [r7, #23]
 8000e1c:	7dfa      	ldrb	r2, [r7, #23]
 8000e1e:	78fb      	ldrb	r3, [r7, #3]
 8000e20:	429a      	cmp	r2, r3
 8000e22:	d3d7      	bcc.n	8000dd4 <GFX_DrowBitMap_P+0x28>
	for(j = 0; j < h; j++)
 8000e24:	7dbb      	ldrb	r3, [r7, #22]
 8000e26:	3301      	adds	r3, #1
 8000e28:	75bb      	strb	r3, [r7, #22]
 8000e2a:	7dba      	ldrb	r2, [r7, #22]
 8000e2c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000e30:	429a      	cmp	r2, r3
 8000e32:	d3cc      	bcc.n	8000dce <GFX_DrowBitMap_P+0x22>
		}
	}

}
 8000e34:	bf00      	nop
 8000e36:	bf00      	nop
 8000e38:	3718      	adds	r7, #24
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
	...

08000e40 <GFX_DrowChar>:

void GFX_DrowChar(int x, int y, char c, uint8_t color, uint8_t bg, uint8_t size)
{
 8000e40:	b590      	push	{r4, r7, lr}
 8000e42:	b089      	sub	sp, #36	@ 0x24
 8000e44:	af02      	add	r7, sp, #8
 8000e46:	60f8      	str	r0, [r7, #12]
 8000e48:	60b9      	str	r1, [r7, #8]
 8000e4a:	4611      	mov	r1, r2
 8000e4c:	461a      	mov	r2, r3
 8000e4e:	460b      	mov	r3, r1
 8000e50:	71fb      	strb	r3, [r7, #7]
 8000e52:	4613      	mov	r3, r2
 8000e54:	71bb      	strb	r3, [r7, #6]

	  uint8_t line;
	  int8_t i,j;
	  if((x >= SSD1327_WIDTH)            || // Clip right
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	2b7f      	cmp	r3, #127	@ 0x7f
 8000e5a:	f300 80a9 	bgt.w	8000fb0 <GFX_DrowChar+0x170>
 8000e5e:	68bb      	ldr	r3, [r7, #8]
 8000e60:	2b7f      	cmp	r3, #127	@ 0x7f
 8000e62:	f300 80a5 	bgt.w	8000fb0 <GFX_DrowChar+0x170>
	     (y >= SSD1327_HEIGHT)           || // Clip bottom
	     ((x + 6 * size - 1) < 0) || // Clip left
 8000e66:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8000e6a:	4613      	mov	r3, r2
 8000e6c:	005b      	lsls	r3, r3, #1
 8000e6e:	4413      	add	r3, r2
 8000e70:	005b      	lsls	r3, r3, #1
 8000e72:	461a      	mov	r2, r3
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	4413      	add	r3, r2
	     (y >= SSD1327_HEIGHT)           || // Clip bottom
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	f340 8099 	ble.w	8000fb0 <GFX_DrowChar+0x170>
	     ((y + 8 * size - 1) < 0))   // Clip top
 8000e7e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000e82:	00da      	lsls	r2, r3, #3
 8000e84:	68bb      	ldr	r3, [r7, #8]
 8000e86:	4413      	add	r3, r2
	     ((x + 6 * size - 1) < 0) || // Clip left
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	f340 8091 	ble.w	8000fb0 <GFX_DrowChar+0x170>
	    return;

	  for  (i=0; i<6; i++ ) {
 8000e8e:	2300      	movs	r3, #0
 8000e90:	75bb      	strb	r3, [r7, #22]
 8000e92:	e087      	b.n	8000fa4 <GFX_DrowChar+0x164>
	    if (i == 5)
 8000e94:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8000e98:	2b05      	cmp	r3, #5
 8000e9a:	d102      	bne.n	8000ea2 <GFX_DrowChar+0x62>
	      line = 0x0;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	75fb      	strb	r3, [r7, #23]
 8000ea0:	e009      	b.n	8000eb6 <GFX_DrowChar+0x76>
	    else
	      //line = pgm_read_byte(font+(c*5)+i);
	    	line = (font[(c*5)+i]);
 8000ea2:	79fa      	ldrb	r2, [r7, #7]
 8000ea4:	4613      	mov	r3, r2
 8000ea6:	009b      	lsls	r3, r3, #2
 8000ea8:	441a      	add	r2, r3
 8000eaa:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8000eae:	4413      	add	r3, r2
 8000eb0:	4a41      	ldr	r2, [pc, #260]	@ (8000fb8 <GFX_DrowChar+0x178>)
 8000eb2:	5cd3      	ldrb	r3, [r2, r3]
 8000eb4:	75fb      	strb	r3, [r7, #23]
	    for (j = 0; j<8; j++) {
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	757b      	strb	r3, [r7, #21]
 8000eba:	e069      	b.n	8000f90 <GFX_DrowChar+0x150>
	      if (line & 0x1) {
 8000ebc:	7dfb      	ldrb	r3, [r7, #23]
 8000ebe:	f003 0301 	and.w	r3, r3, #1
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d02a      	beq.n	8000f1c <GFX_DrowChar+0xdc>
	        if (size == 1) // default size
 8000ec6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000eca:	2b01      	cmp	r3, #1
 8000ecc:	d10c      	bne.n	8000ee8 <GFX_DrowChar+0xa8>
	        	SSD1327_SetPixel(x+i, y+j, color);
 8000ece:	f997 2016 	ldrsb.w	r2, [r7, #22]
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	18d0      	adds	r0, r2, r3
 8000ed6:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8000eda:	68bb      	ldr	r3, [r7, #8]
 8000edc:	4413      	add	r3, r2
 8000ede:	79ba      	ldrb	r2, [r7, #6]
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	f002 ffc7 	bl	8003e74 <SSD1327_SetPixel>
 8000ee6:	e04a      	b.n	8000f7e <GFX_DrowChar+0x13e>
	        else {  // big size
	        	GFX_FillRect(x+(i*size), y+(j*size), size, size, color);
 8000ee8:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8000eec:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8000ef0:	fb03 f202 	mul.w	r2, r3, r2
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	18d0      	adds	r0, r2, r3
 8000ef8:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000efc:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8000f00:	fb03 f202 	mul.w	r2, r3, r2
 8000f04:	68bb      	ldr	r3, [r7, #8]
 8000f06:	18d1      	adds	r1, r2, r3
 8000f08:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8000f0c:	f897 402c 	ldrb.w	r4, [r7, #44]	@ 0x2c
 8000f10:	79bb      	ldrb	r3, [r7, #6]
 8000f12:	9300      	str	r3, [sp, #0]
 8000f14:	4623      	mov	r3, r4
 8000f16:	f000 f851 	bl	8000fbc <GFX_FillRect>
 8000f1a:	e030      	b.n	8000f7e <GFX_DrowChar+0x13e>
	        }
	      } else if (bg != color) {
 8000f1c:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8000f20:	79bb      	ldrb	r3, [r7, #6]
 8000f22:	429a      	cmp	r2, r3
 8000f24:	d02b      	beq.n	8000f7e <GFX_DrowChar+0x13e>
	        if (size == 1) // default size
 8000f26:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000f2a:	2b01      	cmp	r3, #1
 8000f2c:	d10d      	bne.n	8000f4a <GFX_DrowChar+0x10a>
	        	SSD1327_SetPixel(x+i, y+j, bg);
 8000f2e:	f997 2016 	ldrsb.w	r2, [r7, #22]
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	18d0      	adds	r0, r2, r3
 8000f36:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8000f3a:	68bb      	ldr	r3, [r7, #8]
 8000f3c:	4413      	add	r3, r2
 8000f3e:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8000f42:	4619      	mov	r1, r3
 8000f44:	f002 ff96 	bl	8003e74 <SSD1327_SetPixel>
 8000f48:	e019      	b.n	8000f7e <GFX_DrowChar+0x13e>
	        else {  // big size
	        	GFX_FillRect(x+i*size, y+j*size, size, size, bg);
 8000f4a:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8000f4e:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8000f52:	fb03 f202 	mul.w	r2, r3, r2
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	18d0      	adds	r0, r2, r3
 8000f5a:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000f5e:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8000f62:	fb03 f202 	mul.w	r2, r3, r2
 8000f66:	68bb      	ldr	r3, [r7, #8]
 8000f68:	18d1      	adds	r1, r2, r3
 8000f6a:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8000f6e:	f897 402c 	ldrb.w	r4, [r7, #44]	@ 0x2c
 8000f72:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000f76:	9300      	str	r3, [sp, #0]
 8000f78:	4623      	mov	r3, r4
 8000f7a:	f000 f81f 	bl	8000fbc <GFX_FillRect>
	        }
	      }
	      line >>= 1;
 8000f7e:	7dfb      	ldrb	r3, [r7, #23]
 8000f80:	085b      	lsrs	r3, r3, #1
 8000f82:	75fb      	strb	r3, [r7, #23]
	    for (j = 0; j<8; j++) {
 8000f84:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000f88:	b2db      	uxtb	r3, r3
 8000f8a:	3301      	adds	r3, #1
 8000f8c:	b2db      	uxtb	r3, r3
 8000f8e:	757b      	strb	r3, [r7, #21]
 8000f90:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000f94:	2b07      	cmp	r3, #7
 8000f96:	dd91      	ble.n	8000ebc <GFX_DrowChar+0x7c>
	  for  (i=0; i<6; i++ ) {
 8000f98:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8000f9c:	b2db      	uxtb	r3, r3
 8000f9e:	3301      	adds	r3, #1
 8000fa0:	b2db      	uxtb	r3, r3
 8000fa2:	75bb      	strb	r3, [r7, #22]
 8000fa4:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8000fa8:	2b05      	cmp	r3, #5
 8000faa:	f77f af73 	ble.w	8000e94 <GFX_DrowChar+0x54>
 8000fae:	e000      	b.n	8000fb2 <GFX_DrowChar+0x172>
	    return;
 8000fb0:	bf00      	nop
	    }
	  }
}
 8000fb2:	371c      	adds	r7, #28
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd90      	pop	{r4, r7, pc}
 8000fb8:	08009e50 	.word	0x08009e50

08000fbc <GFX_FillRect>:

void GFX_FillRect (int x, int y, int w, int h, uint8_t color )
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b086      	sub	sp, #24
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	60f8      	str	r0, [r7, #12]
 8000fc4:	60b9      	str	r1, [r7, #8]
 8000fc6:	607a      	str	r2, [r7, #4]
 8000fc8:	603b      	str	r3, [r7, #0]
	int16_t i;
	for(i=x; i <x+w; i++)
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	82fb      	strh	r3, [r7, #22]
 8000fce:	e00d      	b.n	8000fec <GFX_FillRect+0x30>
	{
		GFX_DrowFastVLine(i, y, h, color);
 8000fd0:	f9b7 0016 	ldrsh.w	r0, [r7, #22]
 8000fd4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000fd8:	683a      	ldr	r2, [r7, #0]
 8000fda:	68b9      	ldr	r1, [r7, #8]
 8000fdc:	f000 f812 	bl	8001004 <GFX_DrowFastVLine>
	for(i=x; i <x+w; i++)
 8000fe0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000fe4:	b29b      	uxth	r3, r3
 8000fe6:	3301      	adds	r3, #1
 8000fe8:	b29b      	uxth	r3, r3
 8000fea:	82fb      	strh	r3, [r7, #22]
 8000fec:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8000ff0:	68f9      	ldr	r1, [r7, #12]
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	440b      	add	r3, r1
 8000ff6:	429a      	cmp	r2, r3
 8000ff8:	dbea      	blt.n	8000fd0 <GFX_FillRect+0x14>
	}
}
 8000ffa:	bf00      	nop
 8000ffc:	bf00      	nop
 8000ffe:	3718      	adds	r7, #24
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}

08001004 <GFX_DrowFastVLine>:

void GFX_DrowFastVLine(int x, int y, int h, uint8_t color)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b086      	sub	sp, #24
 8001008:	af02      	add	r7, sp, #8
 800100a:	60f8      	str	r0, [r7, #12]
 800100c:	60b9      	str	r1, [r7, #8]
 800100e:	607a      	str	r2, [r7, #4]
 8001010:	70fb      	strb	r3, [r7, #3]
	GFX_DrowLine(x, y, x, y+h-1, color);
 8001012:	68ba      	ldr	r2, [r7, #8]
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	4413      	add	r3, r2
 8001018:	1e5a      	subs	r2, r3, #1
 800101a:	78fb      	ldrb	r3, [r7, #3]
 800101c:	9300      	str	r3, [sp, #0]
 800101e:	4613      	mov	r3, r2
 8001020:	68fa      	ldr	r2, [r7, #12]
 8001022:	68b9      	ldr	r1, [r7, #8]
 8001024:	68f8      	ldr	r0, [r7, #12]
 8001026:	f7ff fd8f 	bl	8000b48 <GFX_DrowLine>
}
 800102a:	bf00      	nop
 800102c:	3710      	adds	r7, #16
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}

08001032 <GFX_DrowFastHLine>:

void GFX_DrowFastHLine(int x, int y, int w, uint8_t color)
{
 8001032:	b580      	push	{r7, lr}
 8001034:	b086      	sub	sp, #24
 8001036:	af02      	add	r7, sp, #8
 8001038:	60f8      	str	r0, [r7, #12]
 800103a:	60b9      	str	r1, [r7, #8]
 800103c:	607a      	str	r2, [r7, #4]
 800103e:	70fb      	strb	r3, [r7, #3]
	GFX_DrowLine(x, y, x+w-1 ,y , color);
 8001040:	68fa      	ldr	r2, [r7, #12]
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	4413      	add	r3, r2
 8001046:	1e5a      	subs	r2, r3, #1
 8001048:	78fb      	ldrb	r3, [r7, #3]
 800104a:	9300      	str	r3, [sp, #0]
 800104c:	68bb      	ldr	r3, [r7, #8]
 800104e:	68b9      	ldr	r1, [r7, #8]
 8001050:	68f8      	ldr	r0, [r7, #12]
 8001052:	f7ff fd79 	bl	8000b48 <GFX_DrowLine>
}
 8001056:	bf00      	nop
 8001058:	3710      	adds	r7, #16
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
	...

08001060 <GFX_PutString>:

void GFX_PutString(int x, int y, char* str, uint8_t txt_size, uint8_t color, uint8_t bg)
{
 8001060:	b590      	push	{r4, r7, lr}
 8001062:	b087      	sub	sp, #28
 8001064:	af02      	add	r7, sp, #8
 8001066:	60f8      	str	r0, [r7, #12]
 8001068:	60b9      	str	r1, [r7, #8]
 800106a:	607a      	str	r2, [r7, #4]
 800106c:	70fb      	strb	r3, [r7, #3]
	cursor_x = x;
 800106e:	4a16      	ldr	r2, [pc, #88]	@ (80010c8 <GFX_PutString+0x68>)
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	6013      	str	r3, [r2, #0]
	cursor_y = y;
 8001074:	4a15      	ldr	r2, [pc, #84]	@ (80010cc <GFX_PutString+0x6c>)
 8001076:	68bb      	ldr	r3, [r7, #8]
 8001078:	6013      	str	r3, [r2, #0]

	while(*str)		//do kiedy jest cos w stringu
 800107a:	e01c      	b.n	80010b6 <GFX_PutString+0x56>
	{
		GFX_DrowChar(cursor_x,cursor_y, *str++, color, bg, txt_size);
 800107c:	4b12      	ldr	r3, [pc, #72]	@ (80010c8 <GFX_PutString+0x68>)
 800107e:	6818      	ldr	r0, [r3, #0]
 8001080:	4b12      	ldr	r3, [pc, #72]	@ (80010cc <GFX_PutString+0x6c>)
 8001082:	6819      	ldr	r1, [r3, #0]
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	1c5a      	adds	r2, r3, #1
 8001088:	607a      	str	r2, [r7, #4]
 800108a:	781a      	ldrb	r2, [r3, #0]
 800108c:	f897 4020 	ldrb.w	r4, [r7, #32]
 8001090:	78fb      	ldrb	r3, [r7, #3]
 8001092:	9301      	str	r3, [sp, #4]
 8001094:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001098:	9300      	str	r3, [sp, #0]
 800109a:	4623      	mov	r3, r4
 800109c:	f7ff fed0 	bl	8000e40 <GFX_DrowChar>
		cursor_x += txt_size*6; // tylko pod dany font trzeba potem to korygowa�
 80010a0:	78fa      	ldrb	r2, [r7, #3]
 80010a2:	4613      	mov	r3, r2
 80010a4:	005b      	lsls	r3, r3, #1
 80010a6:	4413      	add	r3, r2
 80010a8:	005b      	lsls	r3, r3, #1
 80010aa:	461a      	mov	r2, r3
 80010ac:	4b06      	ldr	r3, [pc, #24]	@ (80010c8 <GFX_PutString+0x68>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4413      	add	r3, r2
 80010b2:	4a05      	ldr	r2, [pc, #20]	@ (80010c8 <GFX_PutString+0x68>)
 80010b4:	6013      	str	r3, [r2, #0]
	while(*str)		//do kiedy jest cos w stringu
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	781b      	ldrb	r3, [r3, #0]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d1de      	bne.n	800107c <GFX_PutString+0x1c>
	}
}
 80010be:	bf00      	nop
 80010c0:	bf00      	nop
 80010c2:	3714      	adds	r7, #20
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd90      	pop	{r4, r7, pc}
 80010c8:	20000090 	.word	0x20000090
 80010cc:	20000094 	.word	0x20000094

080010d0 <GFX_PutInt>:

void GFX_PutInt (int x, int y, int data, uint8_t txt_size, uint8_t color, uint8_t bg)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b08a      	sub	sp, #40	@ 0x28
 80010d4:	af02      	add	r7, sp, #8
 80010d6:	60f8      	str	r0, [r7, #12]
 80010d8:	60b9      	str	r1, [r7, #8]
 80010da:	607a      	str	r2, [r7, #4]
 80010dc:	70fb      	strb	r3, [r7, #3]
	char buf[16];
	GFX_PutString(x, y, itoa(data, buf,10), txt_size, color, bg);
 80010de:	f107 0310 	add.w	r3, r7, #16
 80010e2:	220a      	movs	r2, #10
 80010e4:	4619      	mov	r1, r3
 80010e6:	6878      	ldr	r0, [r7, #4]
 80010e8:	f002 fa52 	bl	8003590 <itoa>
 80010ec:	4601      	mov	r1, r0
 80010ee:	78fa      	ldrb	r2, [r7, #3]
 80010f0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80010f4:	9301      	str	r3, [sp, #4]
 80010f6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80010fa:	9300      	str	r3, [sp, #0]
 80010fc:	4613      	mov	r3, r2
 80010fe:	460a      	mov	r2, r1
 8001100:	68b9      	ldr	r1, [r7, #8]
 8001102:	68f8      	ldr	r0, [r7, #12]
 8001104:	f7ff ffac 	bl	8001060 <GFX_PutString>
	//GFX_PutString(x, y, dtoa((double)data,1,1,1,1,buf), txt_size, color, bg);
	//itoa(data,buf);
	//GFX_PutString(x, y, buf , txt_size, color, bg);
}
 8001108:	bf00      	nop
 800110a:	3720      	adds	r7, #32
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}

08001110 <GFX_DrowRoundRect>:

void GFX_DrowRoundRect(int x, int y, int w, int h, uint8_t r, uint8_t color)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b086      	sub	sp, #24
 8001114:	af02      	add	r7, sp, #8
 8001116:	60f8      	str	r0, [r7, #12]
 8001118:	60b9      	str	r1, [r7, #8]
 800111a:	607a      	str	r2, [r7, #4]
 800111c:	603b      	str	r3, [r7, #0]
	// r - to jest wielkosc zaokraglonego naro�nika
	GFX_DrowFastHLine(x+r	,y		,w-2*r	,color );
 800111e:	7e3a      	ldrb	r2, [r7, #24]
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	18d0      	adds	r0, r2, r3
 8001124:	7e3b      	ldrb	r3, [r7, #24]
 8001126:	005b      	lsls	r3, r3, #1
 8001128:	687a      	ldr	r2, [r7, #4]
 800112a:	1ad2      	subs	r2, r2, r3
 800112c:	7f3b      	ldrb	r3, [r7, #28]
 800112e:	68b9      	ldr	r1, [r7, #8]
 8001130:	f7ff ff7f 	bl	8001032 <GFX_DrowFastHLine>
	GFX_DrowFastHLine(x+r	,y+h-1	,w-2*r	,color );
 8001134:	7e3a      	ldrb	r2, [r7, #24]
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	18d0      	adds	r0, r2, r3
 800113a:	68ba      	ldr	r2, [r7, #8]
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	4413      	add	r3, r2
 8001140:	1e59      	subs	r1, r3, #1
 8001142:	7e3b      	ldrb	r3, [r7, #24]
 8001144:	005b      	lsls	r3, r3, #1
 8001146:	687a      	ldr	r2, [r7, #4]
 8001148:	1ad2      	subs	r2, r2, r3
 800114a:	7f3b      	ldrb	r3, [r7, #28]
 800114c:	f7ff ff71 	bl	8001032 <GFX_DrowFastHLine>
	GFX_DrowFastVLine(x		,y+r	,h-2*r	,color );
 8001150:	7e3a      	ldrb	r2, [r7, #24]
 8001152:	68bb      	ldr	r3, [r7, #8]
 8001154:	18d1      	adds	r1, r2, r3
 8001156:	7e3b      	ldrb	r3, [r7, #24]
 8001158:	005b      	lsls	r3, r3, #1
 800115a:	683a      	ldr	r2, [r7, #0]
 800115c:	1ad2      	subs	r2, r2, r3
 800115e:	7f3b      	ldrb	r3, [r7, #28]
 8001160:	68f8      	ldr	r0, [r7, #12]
 8001162:	f7ff ff4f 	bl	8001004 <GFX_DrowFastVLine>
	GFX_DrowFastVLine(x+w-1	,y+r	,h-2*r	,color );
 8001166:	68fa      	ldr	r2, [r7, #12]
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	4413      	add	r3, r2
 800116c:	1e58      	subs	r0, r3, #1
 800116e:	7e3a      	ldrb	r2, [r7, #24]
 8001170:	68bb      	ldr	r3, [r7, #8]
 8001172:	18d1      	adds	r1, r2, r3
 8001174:	7e3b      	ldrb	r3, [r7, #24]
 8001176:	005b      	lsls	r3, r3, #1
 8001178:	683a      	ldr	r2, [r7, #0]
 800117a:	1ad2      	subs	r2, r2, r3
 800117c:	7f3b      	ldrb	r3, [r7, #28]
 800117e:	f7ff ff41 	bl	8001004 <GFX_DrowFastVLine>

	GFX_DrowCircleHelper(x+r	,y+r	,r	,1	,color);
 8001182:	7e3a      	ldrb	r2, [r7, #24]
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	18d0      	adds	r0, r2, r3
 8001188:	7e3a      	ldrb	r2, [r7, #24]
 800118a:	68bb      	ldr	r3, [r7, #8]
 800118c:	18d1      	adds	r1, r2, r3
 800118e:	7e3a      	ldrb	r2, [r7, #24]
 8001190:	7f3b      	ldrb	r3, [r7, #28]
 8001192:	9300      	str	r3, [sp, #0]
 8001194:	2301      	movs	r3, #1
 8001196:	f7ff fd64 	bl	8000c62 <GFX_DrowCircleHelper>
	GFX_DrowCircleHelper(x+w-r-1,y+r	,r	,2	,color);
 800119a:	68fa      	ldr	r2, [r7, #12]
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	441a      	add	r2, r3
 80011a0:	7e3b      	ldrb	r3, [r7, #24]
 80011a2:	1ad3      	subs	r3, r2, r3
 80011a4:	1e58      	subs	r0, r3, #1
 80011a6:	7e3a      	ldrb	r2, [r7, #24]
 80011a8:	68bb      	ldr	r3, [r7, #8]
 80011aa:	18d1      	adds	r1, r2, r3
 80011ac:	7e3a      	ldrb	r2, [r7, #24]
 80011ae:	7f3b      	ldrb	r3, [r7, #28]
 80011b0:	9300      	str	r3, [sp, #0]
 80011b2:	2302      	movs	r3, #2
 80011b4:	f7ff fd55 	bl	8000c62 <GFX_DrowCircleHelper>
	GFX_DrowCircleHelper(x+w-r-1,y+h-r-1,r	,4	,color);
 80011b8:	68fa      	ldr	r2, [r7, #12]
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	441a      	add	r2, r3
 80011be:	7e3b      	ldrb	r3, [r7, #24]
 80011c0:	1ad3      	subs	r3, r2, r3
 80011c2:	1e58      	subs	r0, r3, #1
 80011c4:	68ba      	ldr	r2, [r7, #8]
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	441a      	add	r2, r3
 80011ca:	7e3b      	ldrb	r3, [r7, #24]
 80011cc:	1ad3      	subs	r3, r2, r3
 80011ce:	1e59      	subs	r1, r3, #1
 80011d0:	7e3a      	ldrb	r2, [r7, #24]
 80011d2:	7f3b      	ldrb	r3, [r7, #28]
 80011d4:	9300      	str	r3, [sp, #0]
 80011d6:	2304      	movs	r3, #4
 80011d8:	f7ff fd43 	bl	8000c62 <GFX_DrowCircleHelper>
	GFX_DrowCircleHelper(x+r	,y+h-r-1,r	,8	,color);
 80011dc:	7e3a      	ldrb	r2, [r7, #24]
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	18d0      	adds	r0, r2, r3
 80011e2:	68ba      	ldr	r2, [r7, #8]
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	441a      	add	r2, r3
 80011e8:	7e3b      	ldrb	r3, [r7, #24]
 80011ea:	1ad3      	subs	r3, r2, r3
 80011ec:	1e59      	subs	r1, r3, #1
 80011ee:	7e3a      	ldrb	r2, [r7, #24]
 80011f0:	7f3b      	ldrb	r3, [r7, #28]
 80011f2:	9300      	str	r3, [sp, #0]
 80011f4:	2308      	movs	r3, #8
 80011f6:	f7ff fd34 	bl	8000c62 <GFX_DrowCircleHelper>
}
 80011fa:	bf00      	nop
 80011fc:	3710      	adds	r7, #16
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}

08001202 <GameInit>:
#include <stdlib.h>
#include <math.h>

GameCtx g_singleton;

void GameInit(GameCtx *g) {
 8001202:	b480      	push	{r7}
 8001204:	b085      	sub	sp, #20
 8001206:	af00      	add	r7, sp, #0
 8001208:	6078      	str	r0, [r7, #4]
	 * the player and the first boss. Furthermore, it "resets"
	 * the arrays of shot, opponents and bonuses.
	 */
	uint8_t i;
	//Player initial settings
	g->player.lives = INITIAL_LIVES;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	2203      	movs	r2, #3
 800120e:	611a      	str	r2, [r3, #16]
	g->player.score = INITIAL_SCORE;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2200      	movs	r2, #0
 8001214:	609a      	str	r2, [r3, #8]
	g->player.x = INITIAL_X;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	2202      	movs	r2, #2
 800121a:	601a      	str	r2, [r3, #0]
	g->player.y = INITIAL_Y;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	2240      	movs	r2, #64	@ 0x40
 8001220:	605a      	str	r2, [r3, #4]
	g->player.level = INITIAL_LEVEL;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	2201      	movs	r2, #1
 8001226:	615a      	str	r2, [r3, #20]
	g->player.gameProgres = INITIAL_GAME_PROGRES;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	2200      	movs	r2, #0
 800122c:	619a      	str	r2, [r3, #24]
	g->player.shootType = ST_Normal;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	2200      	movs	r2, #0
 8001232:	771a      	strb	r2, [r3, #28]

	//Deactivation of player shots
	for (i = 0; i < NUMBER_SHOTS; ++i)
 8001234:	2300      	movs	r3, #0
 8001236:	73fb      	strb	r3, [r7, #15]
 8001238:	e00c      	b.n	8001254 <GameInit+0x52>
		g->shots[i].active = false;
 800123a:	7bfa      	ldrb	r2, [r7, #15]
 800123c:	6879      	ldr	r1, [r7, #4]
 800123e:	4613      	mov	r3, r2
 8001240:	009b      	lsls	r3, r3, #2
 8001242:	4413      	add	r3, r2
 8001244:	009b      	lsls	r3, r3, #2
 8001246:	440b      	add	r3, r1
 8001248:	3324      	adds	r3, #36	@ 0x24
 800124a:	2200      	movs	r2, #0
 800124c:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < NUMBER_SHOTS; ++i)
 800124e:	7bfb      	ldrb	r3, [r7, #15]
 8001250:	3301      	adds	r3, #1
 8001252:	73fb      	strb	r3, [r7, #15]
 8001254:	7bfb      	ldrb	r3, [r7, #15]
 8001256:	2b18      	cmp	r3, #24
 8001258:	d9ef      	bls.n	800123a <GameInit+0x38>

	//Deactivation of boss shots
	for (i = 0; i < NUMBER_BOSS_SHOTS; ++i)
 800125a:	2300      	movs	r3, #0
 800125c:	73fb      	strb	r3, [r7, #15]
 800125e:	e00d      	b.n	800127c <GameInit+0x7a>
		g->bossShots[i].active = false;
 8001260:	7bfa      	ldrb	r2, [r7, #15]
 8001262:	6879      	ldr	r1, [r7, #4]
 8001264:	4613      	mov	r3, r2
 8001266:	009b      	lsls	r3, r3, #2
 8001268:	4413      	add	r3, r2
 800126a:	009b      	lsls	r3, r3, #2
 800126c:	440b      	add	r3, r1
 800126e:	f503 7306 	add.w	r3, r3, #536	@ 0x218
 8001272:	2200      	movs	r2, #0
 8001274:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < NUMBER_BOSS_SHOTS; ++i)
 8001276:	7bfb      	ldrb	r3, [r7, #15]
 8001278:	3301      	adds	r3, #1
 800127a:	73fb      	strb	r3, [r7, #15]
 800127c:	7bfb      	ldrb	r3, [r7, #15]
 800127e:	2b04      	cmp	r3, #4
 8001280:	d9ee      	bls.n	8001260 <GameInit+0x5e>

	//Deactivation enemies
	for (i = 0; i < NUMBER_ENEMIES; i++) {
 8001282:	2300      	movs	r3, #0
 8001284:	73fb      	strb	r3, [r7, #15]
 8001286:	e023      	b.n	80012d0 <GameInit+0xce>
		g->enemies[i].active = false;
 8001288:	7bfa      	ldrb	r2, [r7, #15]
 800128a:	6879      	ldr	r1, [r7, #4]
 800128c:	4613      	mov	r3, r2
 800128e:	00db      	lsls	r3, r3, #3
 8001290:	4413      	add	r3, r2
 8001292:	009b      	lsls	r3, r3, #2
 8001294:	440b      	add	r3, r1
 8001296:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 800129a:	2200      	movs	r2, #0
 800129c:	701a      	strb	r2, [r3, #0]
		g->enemies[i].trackNumber = 0;
 800129e:	7bfa      	ldrb	r2, [r7, #15]
 80012a0:	6879      	ldr	r1, [r7, #4]
 80012a2:	4613      	mov	r3, r2
 80012a4:	00db      	lsls	r3, r3, #3
 80012a6:	4413      	add	r3, r2
 80012a8:	009b      	lsls	r3, r3, #2
 80012aa:	440b      	add	r3, r1
 80012ac:	f503 7327 	add.w	r3, r3, #668	@ 0x29c
 80012b0:	2200      	movs	r2, #0
 80012b2:	601a      	str	r2, [r3, #0]
		g->enemies[i].trackedByMissile = false;
 80012b4:	7bfa      	ldrb	r2, [r7, #15]
 80012b6:	6879      	ldr	r1, [r7, #4]
 80012b8:	4613      	mov	r3, r2
 80012ba:	00db      	lsls	r3, r3, #3
 80012bc:	4413      	add	r3, r2
 80012be:	009b      	lsls	r3, r3, #2
 80012c0:	440b      	add	r3, r1
 80012c2:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 80012c6:	2200      	movs	r2, #0
 80012c8:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < NUMBER_ENEMIES; i++) {
 80012ca:	7bfb      	ldrb	r3, [r7, #15]
 80012cc:	3301      	adds	r3, #1
 80012ce:	73fb      	strb	r3, [r7, #15]
 80012d0:	7bfb      	ldrb	r3, [r7, #15]
 80012d2:	2b09      	cmp	r3, #9
 80012d4:	d9d8      	bls.n	8001288 <GameInit+0x86>
	}

	//Deactivation bonuses
	for (i = 0; i < NUMBER_BONUS; i++)
 80012d6:	2300      	movs	r3, #0
 80012d8:	73fb      	strb	r3, [r7, #15]
 80012da:	e00d      	b.n	80012f8 <GameInit+0xf6>
		g->bonuses[i].active = false;
 80012dc:	7bfa      	ldrb	r2, [r7, #15]
 80012de:	6879      	ldr	r1, [r7, #4]
 80012e0:	4613      	mov	r3, r2
 80012e2:	00db      	lsls	r3, r3, #3
 80012e4:	1a9b      	subs	r3, r3, r2
 80012e6:	009b      	lsls	r3, r3, #2
 80012e8:	440b      	add	r3, r1
 80012ea:	f503 6324 	add.w	r3, r3, #2624	@ 0xa40
 80012ee:	2200      	movs	r2, #0
 80012f0:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < NUMBER_BONUS; i++)
 80012f2:	7bfb      	ldrb	r3, [r7, #15]
 80012f4:	3301      	adds	r3, #1
 80012f6:	73fb      	strb	r3, [r7, #15]
 80012f8:	7bfb      	ldrb	r3, [r7, #15]
 80012fa:	2b02      	cmp	r3, #2
 80012fc:	d9ee      	bls.n	80012dc <GameInit+0xda>

	//Deactivation boss
	g->boss.active = false;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	2200      	movs	r2, #0
 8001302:	f883 2a24 	strb.w	r2, [r3, #2596]	@ 0xa24
	g->boss.x = INITIAL_BOSS_X;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	228c      	movs	r2, #140	@ 0x8c
 800130a:	f8c3 2a28 	str.w	r2, [r3, #2600]	@ 0xa28
	g->boss.y = INITIAL_BOSS_Y;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	2240      	movs	r2, #64	@ 0x40
 8001312:	f8c3 2a2c 	str.w	r2, [r3, #2604]	@ 0xa2c
	g->boss.updateDelay = INITIAL_BOSS_UPDATE_DELAY;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	2203      	movs	r2, #3
 800131a:	f8c3 2a34 	str.w	r2, [r3, #2612]	@ 0xa34
}
 800131e:	bf00      	nop
 8001320:	3714      	adds	r7, #20
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
	...

0800132c <GameTick>:

void GameTick(GameCtx *g, InputSnapshot* in) {
 800132c:	b5b0      	push	{r4, r5, r7, lr}
 800132e:	b088      	sub	sp, #32
 8001330:	af02      	add	r7, sp, #8
 8001332:	6078      	str	r0, [r7, #4]
 8001334:	6039      	str	r1, [r7, #0]
	 */
	uint8_t i, j;

	static uint8_t y = 0, dy = 1;
	// Read analog stick
	int stick = in->joystickYValue;
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	60bb      	str	r3, [r7, #8]

	if (stick < 1000)
 800133c:	68bb      	ldr	r3, [r7, #8]
 800133e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001342:	da05      	bge.n	8001350 <GameTick+0x24>
		g->player.y -= 1;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	1e5a      	subs	r2, r3, #1
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	605a      	str	r2, [r3, #4]
 800134e:	e009      	b.n	8001364 <GameTick+0x38>
	else if (stick > 3500)
 8001350:	68bb      	ldr	r3, [r7, #8]
 8001352:	f640 52ac 	movw	r2, #3500	@ 0xdac
 8001356:	4293      	cmp	r3, r2
 8001358:	dd04      	ble.n	8001364 <GameTick+0x38>
		g->player.y += 1;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	1c5a      	adds	r2, r3, #1
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	605a      	str	r2, [r3, #4]

	// Keeping the player within the screen
	if (g->player.y < 10)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	2b09      	cmp	r3, #9
 800136a:	dc02      	bgt.n	8001372 <GameTick+0x46>
		g->player.y = 10;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	220a      	movs	r2, #10
 8001370:	605a      	str	r2, [r3, #4]
	if (g->player.y > (SCREEN_HEIGHT - 14))
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	2b72      	cmp	r3, #114	@ 0x72
 8001378:	dd02      	ble.n	8001380 <GameTick+0x54>
		g->player.y = (SCREEN_HEIGHT - 14);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2272      	movs	r2, #114	@ 0x72
 800137e:	605a      	str	r2, [r3, #4]

	// Shifting shots forward
	bool shoot_updated = false;
 8001380:	2300      	movs	r3, #0
 8001382:	757b      	strb	r3, [r7, #21]

	for (i = 0; i < NUMBER_SHOTS; ++i) {
 8001384:	2300      	movs	r3, #0
 8001386:	75fb      	strb	r3, [r7, #23]
 8001388:	e151      	b.n	800162e <GameTick+0x302>
		switch (g->shots[i].type) {
 800138a:	7dfa      	ldrb	r2, [r7, #23]
 800138c:	6879      	ldr	r1, [r7, #4]
 800138e:	4613      	mov	r3, r2
 8001390:	009b      	lsls	r3, r3, #2
 8001392:	4413      	add	r3, r2
 8001394:	009b      	lsls	r3, r3, #2
 8001396:	440b      	add	r3, r1
 8001398:	3330      	adds	r3, #48	@ 0x30
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d002      	beq.n	80013a6 <GameTick+0x7a>
 80013a0:	2b01      	cmp	r3, #1
 80013a2:	d034      	beq.n	800140e <GameTick+0xe2>
 80013a4:	e140      	b.n	8001628 <GameTick+0x2fc>
		case ST_Normal:
			if (g->shots[i].active)
 80013a6:	7dfa      	ldrb	r2, [r7, #23]
 80013a8:	6879      	ldr	r1, [r7, #4]
 80013aa:	4613      	mov	r3, r2
 80013ac:	009b      	lsls	r3, r3, #2
 80013ae:	4413      	add	r3, r2
 80013b0:	009b      	lsls	r3, r3, #2
 80013b2:	440b      	add	r3, r1
 80013b4:	3324      	adds	r3, #36	@ 0x24
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d011      	beq.n	80013e0 <GameTick+0xb4>
				g->shots[i].x++;
 80013bc:	7dfa      	ldrb	r2, [r7, #23]
 80013be:	6879      	ldr	r1, [r7, #4]
 80013c0:	4613      	mov	r3, r2
 80013c2:	009b      	lsls	r3, r3, #2
 80013c4:	4413      	add	r3, r2
 80013c6:	009b      	lsls	r3, r3, #2
 80013c8:	440b      	add	r3, r1
 80013ca:	3328      	adds	r3, #40	@ 0x28
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	1c59      	adds	r1, r3, #1
 80013d0:	6878      	ldr	r0, [r7, #4]
 80013d2:	4613      	mov	r3, r2
 80013d4:	009b      	lsls	r3, r3, #2
 80013d6:	4413      	add	r3, r2
 80013d8:	009b      	lsls	r3, r3, #2
 80013da:	4403      	add	r3, r0
 80013dc:	3328      	adds	r3, #40	@ 0x28
 80013de:	6019      	str	r1, [r3, #0]
			if (g->shots[i].x > SCREEN_WIDTH)
 80013e0:	7dfa      	ldrb	r2, [r7, #23]
 80013e2:	6879      	ldr	r1, [r7, #4]
 80013e4:	4613      	mov	r3, r2
 80013e6:	009b      	lsls	r3, r3, #2
 80013e8:	4413      	add	r3, r2
 80013ea:	009b      	lsls	r3, r3, #2
 80013ec:	440b      	add	r3, r1
 80013ee:	3328      	adds	r3, #40	@ 0x28
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	2b80      	cmp	r3, #128	@ 0x80
 80013f4:	f340 8115 	ble.w	8001622 <GameTick+0x2f6>
				g->shots[i].active = false;
 80013f8:	7dfa      	ldrb	r2, [r7, #23]
 80013fa:	6879      	ldr	r1, [r7, #4]
 80013fc:	4613      	mov	r3, r2
 80013fe:	009b      	lsls	r3, r3, #2
 8001400:	4413      	add	r3, r2
 8001402:	009b      	lsls	r3, r3, #2
 8001404:	440b      	add	r3, r1
 8001406:	3324      	adds	r3, #36	@ 0x24
 8001408:	2200      	movs	r2, #0
 800140a:	701a      	strb	r2, [r3, #0]
			break;
 800140c:	e109      	b.n	8001622 <GameTick+0x2f6>
		case ST_Tracker:

			for (int j = 0; j < NUMBER_ENEMIES; j++) {
 800140e:	2300      	movs	r3, #0
 8001410:	613b      	str	r3, [r7, #16]
 8001412:	e0bb      	b.n	800158c <GameTick+0x260>
				if (g->shots[i].trackNumber == g->enemies[j].trackNumber) {
 8001414:	7dfa      	ldrb	r2, [r7, #23]
 8001416:	6879      	ldr	r1, [r7, #4]
 8001418:	4613      	mov	r3, r2
 800141a:	009b      	lsls	r3, r3, #2
 800141c:	4413      	add	r3, r2
 800141e:	009b      	lsls	r3, r3, #2
 8001420:	440b      	add	r3, r1
 8001422:	3334      	adds	r3, #52	@ 0x34
 8001424:	6819      	ldr	r1, [r3, #0]
 8001426:	6878      	ldr	r0, [r7, #4]
 8001428:	693a      	ldr	r2, [r7, #16]
 800142a:	4613      	mov	r3, r2
 800142c:	00db      	lsls	r3, r3, #3
 800142e:	4413      	add	r3, r2
 8001430:	009b      	lsls	r3, r3, #2
 8001432:	4403      	add	r3, r0
 8001434:	f503 7327 	add.w	r3, r3, #668	@ 0x29c
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4299      	cmp	r1, r3
 800143c:	f040 80a3 	bne.w	8001586 <GameTick+0x25a>
					if (g->shots[i].x > g->enemies[j].x)
 8001440:	7dfa      	ldrb	r2, [r7, #23]
 8001442:	6879      	ldr	r1, [r7, #4]
 8001444:	4613      	mov	r3, r2
 8001446:	009b      	lsls	r3, r3, #2
 8001448:	4413      	add	r3, r2
 800144a:	009b      	lsls	r3, r3, #2
 800144c:	440b      	add	r3, r1
 800144e:	3328      	adds	r3, #40	@ 0x28
 8001450:	6819      	ldr	r1, [r3, #0]
 8001452:	6878      	ldr	r0, [r7, #4]
 8001454:	693a      	ldr	r2, [r7, #16]
 8001456:	4613      	mov	r3, r2
 8001458:	00db      	lsls	r3, r3, #3
 800145a:	4413      	add	r3, r2
 800145c:	009b      	lsls	r3, r3, #2
 800145e:	4403      	add	r3, r0
 8001460:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4299      	cmp	r1, r3
 8001468:	dd12      	ble.n	8001490 <GameTick+0x164>
						g->shots[i].x -= 2;
 800146a:	7dfa      	ldrb	r2, [r7, #23]
 800146c:	6879      	ldr	r1, [r7, #4]
 800146e:	4613      	mov	r3, r2
 8001470:	009b      	lsls	r3, r3, #2
 8001472:	4413      	add	r3, r2
 8001474:	009b      	lsls	r3, r3, #2
 8001476:	440b      	add	r3, r1
 8001478:	3328      	adds	r3, #40	@ 0x28
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	7dfa      	ldrb	r2, [r7, #23]
 800147e:	1e99      	subs	r1, r3, #2
 8001480:	6878      	ldr	r0, [r7, #4]
 8001482:	4613      	mov	r3, r2
 8001484:	009b      	lsls	r3, r3, #2
 8001486:	4413      	add	r3, r2
 8001488:	009b      	lsls	r3, r3, #2
 800148a:	4403      	add	r3, r0
 800148c:	3328      	adds	r3, #40	@ 0x28
 800148e:	6019      	str	r1, [r3, #0]
					if (g->shots[i].x < g->enemies[j].x)
 8001490:	7dfa      	ldrb	r2, [r7, #23]
 8001492:	6879      	ldr	r1, [r7, #4]
 8001494:	4613      	mov	r3, r2
 8001496:	009b      	lsls	r3, r3, #2
 8001498:	4413      	add	r3, r2
 800149a:	009b      	lsls	r3, r3, #2
 800149c:	440b      	add	r3, r1
 800149e:	3328      	adds	r3, #40	@ 0x28
 80014a0:	6819      	ldr	r1, [r3, #0]
 80014a2:	6878      	ldr	r0, [r7, #4]
 80014a4:	693a      	ldr	r2, [r7, #16]
 80014a6:	4613      	mov	r3, r2
 80014a8:	00db      	lsls	r3, r3, #3
 80014aa:	4413      	add	r3, r2
 80014ac:	009b      	lsls	r3, r3, #2
 80014ae:	4403      	add	r3, r0
 80014b0:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4299      	cmp	r1, r3
 80014b8:	da12      	bge.n	80014e0 <GameTick+0x1b4>
						g->shots[i].x += 2;
 80014ba:	7dfa      	ldrb	r2, [r7, #23]
 80014bc:	6879      	ldr	r1, [r7, #4]
 80014be:	4613      	mov	r3, r2
 80014c0:	009b      	lsls	r3, r3, #2
 80014c2:	4413      	add	r3, r2
 80014c4:	009b      	lsls	r3, r3, #2
 80014c6:	440b      	add	r3, r1
 80014c8:	3328      	adds	r3, #40	@ 0x28
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	7dfa      	ldrb	r2, [r7, #23]
 80014ce:	1c99      	adds	r1, r3, #2
 80014d0:	6878      	ldr	r0, [r7, #4]
 80014d2:	4613      	mov	r3, r2
 80014d4:	009b      	lsls	r3, r3, #2
 80014d6:	4413      	add	r3, r2
 80014d8:	009b      	lsls	r3, r3, #2
 80014da:	4403      	add	r3, r0
 80014dc:	3328      	adds	r3, #40	@ 0x28
 80014de:	6019      	str	r1, [r3, #0]
					if (g->shots[i].y > g->enemies[j].y)
 80014e0:	7dfa      	ldrb	r2, [r7, #23]
 80014e2:	6879      	ldr	r1, [r7, #4]
 80014e4:	4613      	mov	r3, r2
 80014e6:	009b      	lsls	r3, r3, #2
 80014e8:	4413      	add	r3, r2
 80014ea:	009b      	lsls	r3, r3, #2
 80014ec:	440b      	add	r3, r1
 80014ee:	332c      	adds	r3, #44	@ 0x2c
 80014f0:	6819      	ldr	r1, [r3, #0]
 80014f2:	6878      	ldr	r0, [r7, #4]
 80014f4:	693a      	ldr	r2, [r7, #16]
 80014f6:	4613      	mov	r3, r2
 80014f8:	00db      	lsls	r3, r3, #3
 80014fa:	4413      	add	r3, r2
 80014fc:	009b      	lsls	r3, r3, #2
 80014fe:	4403      	add	r3, r0
 8001500:	f503 7321 	add.w	r3, r3, #644	@ 0x284
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4299      	cmp	r1, r3
 8001508:	dd12      	ble.n	8001530 <GameTick+0x204>
						g->shots[i].y -= 2;
 800150a:	7dfa      	ldrb	r2, [r7, #23]
 800150c:	6879      	ldr	r1, [r7, #4]
 800150e:	4613      	mov	r3, r2
 8001510:	009b      	lsls	r3, r3, #2
 8001512:	4413      	add	r3, r2
 8001514:	009b      	lsls	r3, r3, #2
 8001516:	440b      	add	r3, r1
 8001518:	332c      	adds	r3, #44	@ 0x2c
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	7dfa      	ldrb	r2, [r7, #23]
 800151e:	1e99      	subs	r1, r3, #2
 8001520:	6878      	ldr	r0, [r7, #4]
 8001522:	4613      	mov	r3, r2
 8001524:	009b      	lsls	r3, r3, #2
 8001526:	4413      	add	r3, r2
 8001528:	009b      	lsls	r3, r3, #2
 800152a:	4403      	add	r3, r0
 800152c:	332c      	adds	r3, #44	@ 0x2c
 800152e:	6019      	str	r1, [r3, #0]
					if (g->shots[i].y < g->enemies[j].y)
 8001530:	7dfa      	ldrb	r2, [r7, #23]
 8001532:	6879      	ldr	r1, [r7, #4]
 8001534:	4613      	mov	r3, r2
 8001536:	009b      	lsls	r3, r3, #2
 8001538:	4413      	add	r3, r2
 800153a:	009b      	lsls	r3, r3, #2
 800153c:	440b      	add	r3, r1
 800153e:	332c      	adds	r3, #44	@ 0x2c
 8001540:	6819      	ldr	r1, [r3, #0]
 8001542:	6878      	ldr	r0, [r7, #4]
 8001544:	693a      	ldr	r2, [r7, #16]
 8001546:	4613      	mov	r3, r2
 8001548:	00db      	lsls	r3, r3, #3
 800154a:	4413      	add	r3, r2
 800154c:	009b      	lsls	r3, r3, #2
 800154e:	4403      	add	r3, r0
 8001550:	f503 7321 	add.w	r3, r3, #644	@ 0x284
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4299      	cmp	r1, r3
 8001558:	da12      	bge.n	8001580 <GameTick+0x254>
						g->shots[i].y += 2;
 800155a:	7dfa      	ldrb	r2, [r7, #23]
 800155c:	6879      	ldr	r1, [r7, #4]
 800155e:	4613      	mov	r3, r2
 8001560:	009b      	lsls	r3, r3, #2
 8001562:	4413      	add	r3, r2
 8001564:	009b      	lsls	r3, r3, #2
 8001566:	440b      	add	r3, r1
 8001568:	332c      	adds	r3, #44	@ 0x2c
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	7dfa      	ldrb	r2, [r7, #23]
 800156e:	1c99      	adds	r1, r3, #2
 8001570:	6878      	ldr	r0, [r7, #4]
 8001572:	4613      	mov	r3, r2
 8001574:	009b      	lsls	r3, r3, #2
 8001576:	4413      	add	r3, r2
 8001578:	009b      	lsls	r3, r3, #2
 800157a:	4403      	add	r3, r0
 800157c:	332c      	adds	r3, #44	@ 0x2c
 800157e:	6019      	str	r1, [r3, #0]
					shoot_updated = true;
 8001580:	2301      	movs	r3, #1
 8001582:	757b      	strb	r3, [r7, #21]
					break;
 8001584:	e006      	b.n	8001594 <GameTick+0x268>
			for (int j = 0; j < NUMBER_ENEMIES; j++) {
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	3301      	adds	r3, #1
 800158a:	613b      	str	r3, [r7, #16]
 800158c:	693b      	ldr	r3, [r7, #16]
 800158e:	2b09      	cmp	r3, #9
 8001590:	f77f af40 	ble.w	8001414 <GameTick+0xe8>
				}
			}
			//Remove tracking missiles that have no target
			if (!shoot_updated && g->shots[i].type == ST_Tracker) {
 8001594:	7d7b      	ldrb	r3, [r7, #21]
 8001596:	f083 0301 	eor.w	r3, r3, #1
 800159a:	b2db      	uxtb	r3, r3
 800159c:	2b00      	cmp	r3, #0
 800159e:	d020      	beq.n	80015e2 <GameTick+0x2b6>
 80015a0:	7dfa      	ldrb	r2, [r7, #23]
 80015a2:	6879      	ldr	r1, [r7, #4]
 80015a4:	4613      	mov	r3, r2
 80015a6:	009b      	lsls	r3, r3, #2
 80015a8:	4413      	add	r3, r2
 80015aa:	009b      	lsls	r3, r3, #2
 80015ac:	440b      	add	r3, r1
 80015ae:	3330      	adds	r3, #48	@ 0x30
 80015b0:	781b      	ldrb	r3, [r3, #0]
 80015b2:	2b01      	cmp	r3, #1
 80015b4:	d115      	bne.n	80015e2 <GameTick+0x2b6>
				g->shots[i].active = false;
 80015b6:	7dfa      	ldrb	r2, [r7, #23]
 80015b8:	6879      	ldr	r1, [r7, #4]
 80015ba:	4613      	mov	r3, r2
 80015bc:	009b      	lsls	r3, r3, #2
 80015be:	4413      	add	r3, r2
 80015c0:	009b      	lsls	r3, r3, #2
 80015c2:	440b      	add	r3, r1
 80015c4:	3324      	adds	r3, #36	@ 0x24
 80015c6:	2200      	movs	r2, #0
 80015c8:	701a      	strb	r2, [r3, #0]
				g->shots[i].trackNumber = 0;
 80015ca:	7dfa      	ldrb	r2, [r7, #23]
 80015cc:	6879      	ldr	r1, [r7, #4]
 80015ce:	4613      	mov	r3, r2
 80015d0:	009b      	lsls	r3, r3, #2
 80015d2:	4413      	add	r3, r2
 80015d4:	009b      	lsls	r3, r3, #2
 80015d6:	440b      	add	r3, r1
 80015d8:	3334      	adds	r3, #52	@ 0x34
 80015da:	2200      	movs	r2, #0
 80015dc:	601a      	str	r2, [r3, #0]
				shoot_updated = false;
 80015de:	2300      	movs	r3, #0
 80015e0:	757b      	strb	r3, [r7, #21]
			}

			//Remove off-map shots
			if (g->shots[i].x > SCREEN_WIDTH) {
 80015e2:	7dfa      	ldrb	r2, [r7, #23]
 80015e4:	6879      	ldr	r1, [r7, #4]
 80015e6:	4613      	mov	r3, r2
 80015e8:	009b      	lsls	r3, r3, #2
 80015ea:	4413      	add	r3, r2
 80015ec:	009b      	lsls	r3, r3, #2
 80015ee:	440b      	add	r3, r1
 80015f0:	3328      	adds	r3, #40	@ 0x28
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	2b80      	cmp	r3, #128	@ 0x80
 80015f6:	dd16      	ble.n	8001626 <GameTick+0x2fa>
				g->shots[i].active = false;
 80015f8:	7dfa      	ldrb	r2, [r7, #23]
 80015fa:	6879      	ldr	r1, [r7, #4]
 80015fc:	4613      	mov	r3, r2
 80015fe:	009b      	lsls	r3, r3, #2
 8001600:	4413      	add	r3, r2
 8001602:	009b      	lsls	r3, r3, #2
 8001604:	440b      	add	r3, r1
 8001606:	3324      	adds	r3, #36	@ 0x24
 8001608:	2200      	movs	r2, #0
 800160a:	701a      	strb	r2, [r3, #0]
				g->shots[i].trackNumber = 0;
 800160c:	7dfa      	ldrb	r2, [r7, #23]
 800160e:	6879      	ldr	r1, [r7, #4]
 8001610:	4613      	mov	r3, r2
 8001612:	009b      	lsls	r3, r3, #2
 8001614:	4413      	add	r3, r2
 8001616:	009b      	lsls	r3, r3, #2
 8001618:	440b      	add	r3, r1
 800161a:	3334      	adds	r3, #52	@ 0x34
 800161c:	2200      	movs	r2, #0
 800161e:	601a      	str	r2, [r3, #0]
			}
			break;
 8001620:	e001      	b.n	8001626 <GameTick+0x2fa>
			break;
 8001622:	bf00      	nop
 8001624:	e000      	b.n	8001628 <GameTick+0x2fc>
			break;
 8001626:	bf00      	nop
	for (i = 0; i < NUMBER_SHOTS; ++i) {
 8001628:	7dfb      	ldrb	r3, [r7, #23]
 800162a:	3301      	adds	r3, #1
 800162c:	75fb      	strb	r3, [r7, #23]
 800162e:	7dfb      	ldrb	r3, [r7, #23]
 8001630:	2b18      	cmp	r3, #24
 8001632:	f67f aeaa 	bls.w	800138a <GameTick+0x5e>

	}

	//Remove the markers on enemies whose shots have been used on others
	bool is_there_a_missile;
	for (i = 0; i < NUMBER_ENEMIES; i++) {
 8001636:	2300      	movs	r3, #0
 8001638:	75fb      	strb	r3, [r7, #23]
 800163a:	e035      	b.n	80016a8 <GameTick+0x37c>
		is_there_a_missile = false;
 800163c:	2300      	movs	r3, #0
 800163e:	73fb      	strb	r3, [r7, #15]

		for (j = 0; j < NUMBER_SHOTS; j++) {
 8001640:	2300      	movs	r3, #0
 8001642:	75bb      	strb	r3, [r7, #22]
 8001644:	e019      	b.n	800167a <GameTick+0x34e>
			if (g->enemies[i].trackNumber == g->shots[j].trackNumber)
 8001646:	7dfa      	ldrb	r2, [r7, #23]
 8001648:	6879      	ldr	r1, [r7, #4]
 800164a:	4613      	mov	r3, r2
 800164c:	00db      	lsls	r3, r3, #3
 800164e:	4413      	add	r3, r2
 8001650:	009b      	lsls	r3, r3, #2
 8001652:	440b      	add	r3, r1
 8001654:	f503 7327 	add.w	r3, r3, #668	@ 0x29c
 8001658:	6819      	ldr	r1, [r3, #0]
 800165a:	7dba      	ldrb	r2, [r7, #22]
 800165c:	6878      	ldr	r0, [r7, #4]
 800165e:	4613      	mov	r3, r2
 8001660:	009b      	lsls	r3, r3, #2
 8001662:	4413      	add	r3, r2
 8001664:	009b      	lsls	r3, r3, #2
 8001666:	4403      	add	r3, r0
 8001668:	3334      	adds	r3, #52	@ 0x34
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4299      	cmp	r1, r3
 800166e:	d101      	bne.n	8001674 <GameTick+0x348>
				is_there_a_missile = true;
 8001670:	2301      	movs	r3, #1
 8001672:	73fb      	strb	r3, [r7, #15]
		for (j = 0; j < NUMBER_SHOTS; j++) {
 8001674:	7dbb      	ldrb	r3, [r7, #22]
 8001676:	3301      	adds	r3, #1
 8001678:	75bb      	strb	r3, [r7, #22]
 800167a:	7dbb      	ldrb	r3, [r7, #22]
 800167c:	2b18      	cmp	r3, #24
 800167e:	d9e2      	bls.n	8001646 <GameTick+0x31a>
		}

		if (!is_there_a_missile)
 8001680:	7bfb      	ldrb	r3, [r7, #15]
 8001682:	f083 0301 	eor.w	r3, r3, #1
 8001686:	b2db      	uxtb	r3, r3
 8001688:	2b00      	cmp	r3, #0
 800168a:	d00a      	beq.n	80016a2 <GameTick+0x376>
			g->enemies[i].trackNumber = 0;
 800168c:	7dfa      	ldrb	r2, [r7, #23]
 800168e:	6879      	ldr	r1, [r7, #4]
 8001690:	4613      	mov	r3, r2
 8001692:	00db      	lsls	r3, r3, #3
 8001694:	4413      	add	r3, r2
 8001696:	009b      	lsls	r3, r3, #2
 8001698:	440b      	add	r3, r1
 800169a:	f503 7327 	add.w	r3, r3, #668	@ 0x29c
 800169e:	2200      	movs	r2, #0
 80016a0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < NUMBER_ENEMIES; i++) {
 80016a2:	7dfb      	ldrb	r3, [r7, #23]
 80016a4:	3301      	adds	r3, #1
 80016a6:	75fb      	strb	r3, [r7, #23]
 80016a8:	7dfb      	ldrb	r3, [r7, #23]
 80016aa:	2b09      	cmp	r3, #9
 80016ac:	d9c6      	bls.n	800163c <GameTick+0x310>
	}

	// Updated enemies
	for (i = 0; i < NUMBER_ENEMIES; ++i) {
 80016ae:	2300      	movs	r3, #0
 80016b0:	75fb      	strb	r3, [r7, #23]
 80016b2:	e29f      	b.n	8001bf4 <GameTick+0x8c8>

		if (g->enemies[i].active) {
 80016b4:	7dfa      	ldrb	r2, [r7, #23]
 80016b6:	6879      	ldr	r1, [r7, #4]
 80016b8:	4613      	mov	r3, r2
 80016ba:	00db      	lsls	r3, r3, #3
 80016bc:	4413      	add	r3, r2
 80016be:	009b      	lsls	r3, r3, #2
 80016c0:	440b      	add	r3, r1
 80016c2:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	f000 8290 	beq.w	8001bee <GameTick+0x8c2>
			g->enemies[i].nextUpdate -= 1;
 80016ce:	7dfa      	ldrb	r2, [r7, #23]
 80016d0:	6879      	ldr	r1, [r7, #4]
 80016d2:	4613      	mov	r3, r2
 80016d4:	00db      	lsls	r3, r3, #3
 80016d6:	4413      	add	r3, r2
 80016d8:	009b      	lsls	r3, r3, #2
 80016da:	440b      	add	r3, r1
 80016dc:	f503 7324 	add.w	r3, r3, #656	@ 0x290
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	7dfa      	ldrb	r2, [r7, #23]
 80016e4:	1e59      	subs	r1, r3, #1
 80016e6:	6878      	ldr	r0, [r7, #4]
 80016e8:	4613      	mov	r3, r2
 80016ea:	00db      	lsls	r3, r3, #3
 80016ec:	4413      	add	r3, r2
 80016ee:	009b      	lsls	r3, r3, #2
 80016f0:	4403      	add	r3, r0
 80016f2:	f503 7324 	add.w	r3, r3, #656	@ 0x290
 80016f6:	6019      	str	r1, [r3, #0]
			if (g->enemies[i].nextUpdate <= 0) {
 80016f8:	7dfa      	ldrb	r2, [r7, #23]
 80016fa:	6879      	ldr	r1, [r7, #4]
 80016fc:	4613      	mov	r3, r2
 80016fe:	00db      	lsls	r3, r3, #3
 8001700:	4413      	add	r3, r2
 8001702:	009b      	lsls	r3, r3, #2
 8001704:	440b      	add	r3, r1
 8001706:	f503 7324 	add.w	r3, r3, #656	@ 0x290
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	2b00      	cmp	r3, #0
 800170e:	f300 826e 	bgt.w	8001bee <GameTick+0x8c2>
				if (g->enemies[i].active) {
 8001712:	7dfa      	ldrb	r2, [r7, #23]
 8001714:	6879      	ldr	r1, [r7, #4]
 8001716:	4613      	mov	r3, r2
 8001718:	00db      	lsls	r3, r3, #3
 800171a:	4413      	add	r3, r2
 800171c:	009b      	lsls	r3, r3, #2
 800171e:	440b      	add	r3, r1
 8001720:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	2b00      	cmp	r3, #0
 8001728:	f000 8261 	beq.w	8001bee <GameTick+0x8c2>

					g->enemies[i].nextUpdate = g->enemies[i].updateDelay;
 800172c:	7df9      	ldrb	r1, [r7, #23]
 800172e:	7dfa      	ldrb	r2, [r7, #23]
 8001730:	6878      	ldr	r0, [r7, #4]
 8001732:	460b      	mov	r3, r1
 8001734:	00db      	lsls	r3, r3, #3
 8001736:	440b      	add	r3, r1
 8001738:	009b      	lsls	r3, r3, #2
 800173a:	4403      	add	r3, r0
 800173c:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 8001740:	6819      	ldr	r1, [r3, #0]
 8001742:	6878      	ldr	r0, [r7, #4]
 8001744:	4613      	mov	r3, r2
 8001746:	00db      	lsls	r3, r3, #3
 8001748:	4413      	add	r3, r2
 800174a:	009b      	lsls	r3, r3, #2
 800174c:	4403      	add	r3, r0
 800174e:	f503 7324 	add.w	r3, r3, #656	@ 0x290
 8001752:	6019      	str	r1, [r3, #0]

					//Checking for collisions between opponents and the player
					if (Colliding(g->enemies[i].x, g->enemies[i].y, g->player.x,
 8001754:	7dfa      	ldrb	r2, [r7, #23]
 8001756:	6879      	ldr	r1, [r7, #4]
 8001758:	4613      	mov	r3, r2
 800175a:	00db      	lsls	r3, r3, #3
 800175c:	4413      	add	r3, r2
 800175e:	009b      	lsls	r3, r3, #2
 8001760:	440b      	add	r3, r1
 8001762:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8001766:	6818      	ldr	r0, [r3, #0]
 8001768:	7dfa      	ldrb	r2, [r7, #23]
 800176a:	6879      	ldr	r1, [r7, #4]
 800176c:	4613      	mov	r3, r2
 800176e:	00db      	lsls	r3, r3, #3
 8001770:	4413      	add	r3, r2
 8001772:	009b      	lsls	r3, r3, #2
 8001774:	440b      	add	r3, r1
 8001776:	f503 7321 	add.w	r3, r3, #644	@ 0x284
 800177a:	6819      	ldr	r1, [r3, #0]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681a      	ldr	r2, [r3, #0]
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	f001 fd36 	bl	80031f4 <Colliding>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d15a      	bne.n	8001844 <GameTick+0x518>
							g->player.y)
							|| Colliding(g->enemies[i].x, g->enemies[i].y,
 800178e:	7dfa      	ldrb	r2, [r7, #23]
 8001790:	6879      	ldr	r1, [r7, #4]
 8001792:	4613      	mov	r3, r2
 8001794:	00db      	lsls	r3, r3, #3
 8001796:	4413      	add	r3, r2
 8001798:	009b      	lsls	r3, r3, #2
 800179a:	440b      	add	r3, r1
 800179c:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 80017a0:	6818      	ldr	r0, [r3, #0]
 80017a2:	7dfa      	ldrb	r2, [r7, #23]
 80017a4:	6879      	ldr	r1, [r7, #4]
 80017a6:	4613      	mov	r3, r2
 80017a8:	00db      	lsls	r3, r3, #3
 80017aa:	4413      	add	r3, r2
 80017ac:	009b      	lsls	r3, r3, #2
 80017ae:	440b      	add	r3, r1
 80017b0:	f503 7321 	add.w	r3, r3, #644	@ 0x284
 80017b4:	6819      	ldr	r1, [r3, #0]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681a      	ldr	r2, [r3, #0]
									g->player.x, g->player.y + 5)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	685b      	ldr	r3, [r3, #4]
							|| Colliding(g->enemies[i].x, g->enemies[i].y,
 80017be:	3305      	adds	r3, #5
 80017c0:	f001 fd18 	bl	80031f4 <Colliding>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d13c      	bne.n	8001844 <GameTick+0x518>
							|| Colliding(g->enemies[i].x, g->enemies[i].y,
 80017ca:	7dfa      	ldrb	r2, [r7, #23]
 80017cc:	6879      	ldr	r1, [r7, #4]
 80017ce:	4613      	mov	r3, r2
 80017d0:	00db      	lsls	r3, r3, #3
 80017d2:	4413      	add	r3, r2
 80017d4:	009b      	lsls	r3, r3, #2
 80017d6:	440b      	add	r3, r1
 80017d8:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 80017dc:	6818      	ldr	r0, [r3, #0]
 80017de:	7dfa      	ldrb	r2, [r7, #23]
 80017e0:	6879      	ldr	r1, [r7, #4]
 80017e2:	4613      	mov	r3, r2
 80017e4:	00db      	lsls	r3, r3, #3
 80017e6:	4413      	add	r3, r2
 80017e8:	009b      	lsls	r3, r3, #2
 80017ea:	440b      	add	r3, r1
 80017ec:	f503 7321 	add.w	r3, r3, #644	@ 0x284
 80017f0:	6819      	ldr	r1, [r3, #0]
									g->player.x + 7, g->player.y)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
							|| Colliding(g->enemies[i].x, g->enemies[i].y,
 80017f6:	1dda      	adds	r2, r3, #7
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	f001 fcfa 	bl	80031f4 <Colliding>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d11e      	bne.n	8001844 <GameTick+0x518>
							|| Colliding(g->enemies[i].x, g->enemies[i].y,
 8001806:	7dfa      	ldrb	r2, [r7, #23]
 8001808:	6879      	ldr	r1, [r7, #4]
 800180a:	4613      	mov	r3, r2
 800180c:	00db      	lsls	r3, r3, #3
 800180e:	4413      	add	r3, r2
 8001810:	009b      	lsls	r3, r3, #2
 8001812:	440b      	add	r3, r1
 8001814:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8001818:	6818      	ldr	r0, [r3, #0]
 800181a:	7dfa      	ldrb	r2, [r7, #23]
 800181c:	6879      	ldr	r1, [r7, #4]
 800181e:	4613      	mov	r3, r2
 8001820:	00db      	lsls	r3, r3, #3
 8001822:	4413      	add	r3, r2
 8001824:	009b      	lsls	r3, r3, #2
 8001826:	440b      	add	r3, r1
 8001828:	f503 7321 	add.w	r3, r3, #644	@ 0x284
 800182c:	6819      	ldr	r1, [r3, #0]
									g->player.x + 7, g->player.y + 5)) {
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
							|| Colliding(g->enemies[i].x, g->enemies[i].y,
 8001832:	1dda      	adds	r2, r3, #7
									g->player.x + 7, g->player.y + 5)) {
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	685b      	ldr	r3, [r3, #4]
							|| Colliding(g->enemies[i].x, g->enemies[i].y,
 8001838:	3305      	adds	r3, #5
 800183a:	f001 fcdb 	bl	80031f4 <Colliding>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d067      	beq.n	8001914 <GameTick+0x5e8>
						g->player.lives -= 1;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	691b      	ldr	r3, [r3, #16]
 8001848:	1e5a      	subs	r2, r3, #1
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	611a      	str	r2, [r3, #16]
						;
						g->enemies[i].active = false;
 800184e:	7dfa      	ldrb	r2, [r7, #23]
 8001850:	6879      	ldr	r1, [r7, #4]
 8001852:	4613      	mov	r3, r2
 8001854:	00db      	lsls	r3, r3, #3
 8001856:	4413      	add	r3, r2
 8001858:	009b      	lsls	r3, r3, #2
 800185a:	440b      	add	r3, r1
 800185c:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 8001860:	2200      	movs	r2, #0
 8001862:	701a      	strb	r2, [r3, #0]
						g->enemies[i].trackedByMissile = false;
 8001864:	7dfa      	ldrb	r2, [r7, #23]
 8001866:	6879      	ldr	r1, [r7, #4]
 8001868:	4613      	mov	r3, r2
 800186a:	00db      	lsls	r3, r3, #3
 800186c:	4413      	add	r3, r2
 800186e:	009b      	lsls	r3, r3, #2
 8001870:	440b      	add	r3, r1
 8001872:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8001876:	2200      	movs	r2, #0
 8001878:	701a      	strb	r2, [r3, #0]
						g->enemies[i].trackNumber = 0;
 800187a:	7dfa      	ldrb	r2, [r7, #23]
 800187c:	6879      	ldr	r1, [r7, #4]
 800187e:	4613      	mov	r3, r2
 8001880:	00db      	lsls	r3, r3, #3
 8001882:	4413      	add	r3, r2
 8001884:	009b      	lsls	r3, r3, #2
 8001886:	440b      	add	r3, r1
 8001888:	f503 7327 	add.w	r3, r3, #668	@ 0x29c
 800188c:	2200      	movs	r2, #0
 800188e:	601a      	str	r2, [r3, #0]
						GFX_DrowBitMap_P(g->enemies[i].x + 2, g->enemies[i].y,
 8001890:	7dfa      	ldrb	r2, [r7, #23]
 8001892:	6879      	ldr	r1, [r7, #4]
 8001894:	4613      	mov	r3, r2
 8001896:	00db      	lsls	r3, r3, #3
 8001898:	4413      	add	r3, r2
 800189a:	009b      	lsls	r3, r3, #2
 800189c:	440b      	add	r3, r1
 800189e:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	1c98      	adds	r0, r3, #2
 80018a6:	7dfa      	ldrb	r2, [r7, #23]
 80018a8:	6879      	ldr	r1, [r7, #4]
 80018aa:	4613      	mov	r3, r2
 80018ac:	00db      	lsls	r3, r3, #3
 80018ae:	4413      	add	r3, r2
 80018b0:	009b      	lsls	r3, r3, #2
 80018b2:	440b      	add	r3, r1
 80018b4:	f503 7321 	add.w	r3, r3, #644	@ 0x284
 80018b8:	6819      	ldr	r1, [r3, #0]
 80018ba:	2301      	movs	r3, #1
 80018bc:	9301      	str	r3, [sp, #4]
 80018be:	230a      	movs	r3, #10
 80018c0:	9300      	str	r3, [sp, #0]
 80018c2:	230a      	movs	r3, #10
 80018c4:	4aaf      	ldr	r2, [pc, #700]	@ (8001b84 <GameTick+0x858>)
 80018c6:	f7ff fa71 	bl	8000dac <GFX_DrowBitMap_P>
								explosion_map, 10, 10, 1);
						GFX_DrowBitMap_P(g->player.x + 8, g->player.y - 2,
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f103 0008 	add.w	r0, r3, #8
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	1e99      	subs	r1, r3, #2
 80018d8:	2301      	movs	r3, #1
 80018da:	9301      	str	r3, [sp, #4]
 80018dc:	2310      	movs	r3, #16
 80018de:	9300      	str	r3, [sp, #0]
 80018e0:	230a      	movs	r3, #10
 80018e2:	4aa9      	ldr	r2, [pc, #676]	@ (8001b88 <GameTick+0x85c>)
 80018e4:	f7ff fa62 	bl	8000dac <GFX_DrowBitMap_P>
								player_shield_map, 10, 16, 1);
						GFX_DrowBitMap_P(g->player.x, g->player.y, player_map,
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6818      	ldr	r0, [r3, #0]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6859      	ldr	r1, [r3, #4]
 80018f0:	2301      	movs	r3, #1
 80018f2:	9301      	str	r3, [sp, #4]
 80018f4:	230b      	movs	r3, #11
 80018f6:	9300      	str	r3, [sp, #0]
 80018f8:	230b      	movs	r3, #11
 80018fa:	4aa4      	ldr	r2, [pc, #656]	@ (8001b8c <GameTick+0x860>)
 80018fc:	f7ff fa56 	bl	8000dac <GFX_DrowBitMap_P>
								11, 11, 1);

						//SSD1327_Display();
						if (g->player.lives <= 0) {
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	691b      	ldr	r3, [r3, #16]
 8001904:	2b00      	cmp	r3, #0
 8001906:	dc05      	bgt.n	8001914 <GameTick+0x5e8>
							PlayDeadAnim();
 8001908:	f002 f8fc 	bl	8003b04 <PlayDeadAnim>
							g->state = GS_Dead;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2202      	movs	r2, #2
 8001910:	f883 2a94 	strb.w	r2, [r3, #2708]	@ 0xa94
						}
					}

					// Moving to the left and making special moves
					g->enemies[i].x -= 1;
 8001914:	7dfa      	ldrb	r2, [r7, #23]
 8001916:	6879      	ldr	r1, [r7, #4]
 8001918:	4613      	mov	r3, r2
 800191a:	00db      	lsls	r3, r3, #3
 800191c:	4413      	add	r3, r2
 800191e:	009b      	lsls	r3, r3, #2
 8001920:	440b      	add	r3, r1
 8001922:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	7dfa      	ldrb	r2, [r7, #23]
 800192a:	1e59      	subs	r1, r3, #1
 800192c:	6878      	ldr	r0, [r7, #4]
 800192e:	4613      	mov	r3, r2
 8001930:	00db      	lsls	r3, r3, #3
 8001932:	4413      	add	r3, r2
 8001934:	009b      	lsls	r3, r3, #2
 8001936:	4403      	add	r3, r0
 8001938:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 800193c:	6019      	str	r1, [r3, #0]

					switch (g->enemies[i].type) {
 800193e:	7dfa      	ldrb	r2, [r7, #23]
 8001940:	6879      	ldr	r1, [r7, #4]
 8001942:	4613      	mov	r3, r2
 8001944:	00db      	lsls	r3, r3, #3
 8001946:	4413      	add	r3, r2
 8001948:	009b      	lsls	r3, r3, #2
 800194a:	440b      	add	r3, r1
 800194c:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 8001950:	781b      	ldrb	r3, [r3, #0]
 8001952:	2b02      	cmp	r3, #2
 8001954:	d05d      	beq.n	8001a12 <GameTick+0x6e6>
 8001956:	2b02      	cmp	r3, #2
 8001958:	f300 811b 	bgt.w	8001b92 <GameTick+0x866>
 800195c:	2b00      	cmp	r3, #0
 800195e:	f000 810d 	beq.w	8001b7c <GameTick+0x850>
 8001962:	2b01      	cmp	r3, #1
 8001964:	f040 8115 	bne.w	8001b92 <GameTick+0x866>
					case ET_Tracker:
						if (g->enemies[i].x < 70) {
 8001968:	7dfa      	ldrb	r2, [r7, #23]
 800196a:	6879      	ldr	r1, [r7, #4]
 800196c:	4613      	mov	r3, r2
 800196e:	00db      	lsls	r3, r3, #3
 8001970:	4413      	add	r3, r2
 8001972:	009b      	lsls	r3, r3, #2
 8001974:	440b      	add	r3, r1
 8001976:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	2b45      	cmp	r3, #69	@ 0x45
 800197e:	f300 80ff 	bgt.w	8001b80 <GameTick+0x854>
							if (g->player.y > g->enemies[i].y)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6859      	ldr	r1, [r3, #4]
 8001986:	7dfa      	ldrb	r2, [r7, #23]
 8001988:	6878      	ldr	r0, [r7, #4]
 800198a:	4613      	mov	r3, r2
 800198c:	00db      	lsls	r3, r3, #3
 800198e:	4413      	add	r3, r2
 8001990:	009b      	lsls	r3, r3, #2
 8001992:	4403      	add	r3, r0
 8001994:	f503 7321 	add.w	r3, r3, #644	@ 0x284
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4299      	cmp	r1, r3
 800199c:	dd14      	ble.n	80019c8 <GameTick+0x69c>
								g->enemies[i].y += 1;
 800199e:	7dfa      	ldrb	r2, [r7, #23]
 80019a0:	6879      	ldr	r1, [r7, #4]
 80019a2:	4613      	mov	r3, r2
 80019a4:	00db      	lsls	r3, r3, #3
 80019a6:	4413      	add	r3, r2
 80019a8:	009b      	lsls	r3, r3, #2
 80019aa:	440b      	add	r3, r1
 80019ac:	f503 7321 	add.w	r3, r3, #644	@ 0x284
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	7dfa      	ldrb	r2, [r7, #23]
 80019b4:	1c59      	adds	r1, r3, #1
 80019b6:	6878      	ldr	r0, [r7, #4]
 80019b8:	4613      	mov	r3, r2
 80019ba:	00db      	lsls	r3, r3, #3
 80019bc:	4413      	add	r3, r2
 80019be:	009b      	lsls	r3, r3, #2
 80019c0:	4403      	add	r3, r0
 80019c2:	f503 7321 	add.w	r3, r3, #644	@ 0x284
 80019c6:	6019      	str	r1, [r3, #0]
							if (g->player.y < g->enemies[i].y)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6859      	ldr	r1, [r3, #4]
 80019cc:	7dfa      	ldrb	r2, [r7, #23]
 80019ce:	6878      	ldr	r0, [r7, #4]
 80019d0:	4613      	mov	r3, r2
 80019d2:	00db      	lsls	r3, r3, #3
 80019d4:	4413      	add	r3, r2
 80019d6:	009b      	lsls	r3, r3, #2
 80019d8:	4403      	add	r3, r0
 80019da:	f503 7321 	add.w	r3, r3, #644	@ 0x284
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4299      	cmp	r1, r3
 80019e2:	f280 80cd 	bge.w	8001b80 <GameTick+0x854>
								g->enemies[i].y -= 1;
 80019e6:	7dfa      	ldrb	r2, [r7, #23]
 80019e8:	6879      	ldr	r1, [r7, #4]
 80019ea:	4613      	mov	r3, r2
 80019ec:	00db      	lsls	r3, r3, #3
 80019ee:	4413      	add	r3, r2
 80019f0:	009b      	lsls	r3, r3, #2
 80019f2:	440b      	add	r3, r1
 80019f4:	f503 7321 	add.w	r3, r3, #644	@ 0x284
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	7dfa      	ldrb	r2, [r7, #23]
 80019fc:	1e59      	subs	r1, r3, #1
 80019fe:	6878      	ldr	r0, [r7, #4]
 8001a00:	4613      	mov	r3, r2
 8001a02:	00db      	lsls	r3, r3, #3
 8001a04:	4413      	add	r3, r2
 8001a06:	009b      	lsls	r3, r3, #2
 8001a08:	4403      	add	r3, r0
 8001a0a:	f503 7321 	add.w	r3, r3, #644	@ 0x284
 8001a0e:	6019      	str	r1, [r3, #0]
						}
						break;
 8001a10:	e0b6      	b.n	8001b80 <GameTick+0x854>
					case ET_Diver:
						break;
					case ET_Bobber:
						if ((g->enemies[i].x % 4 == 0)
 8001a12:	7dfa      	ldrb	r2, [r7, #23]
 8001a14:	6879      	ldr	r1, [r7, #4]
 8001a16:	4613      	mov	r3, r2
 8001a18:	00db      	lsls	r3, r3, #3
 8001a1a:	4413      	add	r3, r2
 8001a1c:	009b      	lsls	r3, r3, #2
 8001a1e:	440b      	add	r3, r1
 8001a20:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f003 0303 	and.w	r3, r3, #3
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d122      	bne.n	8001a74 <GameTick+0x748>
								&& (g->enemies[i].x % 8 == 0))
 8001a2e:	7dfa      	ldrb	r2, [r7, #23]
 8001a30:	6879      	ldr	r1, [r7, #4]
 8001a32:	4613      	mov	r3, r2
 8001a34:	00db      	lsls	r3, r3, #3
 8001a36:	4413      	add	r3, r2
 8001a38:	009b      	lsls	r3, r3, #2
 8001a3a:	440b      	add	r3, r1
 8001a3c:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f003 0307 	and.w	r3, r3, #7
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d114      	bne.n	8001a74 <GameTick+0x748>
							g->enemies[i].y += 4;
 8001a4a:	7dfa      	ldrb	r2, [r7, #23]
 8001a4c:	6879      	ldr	r1, [r7, #4]
 8001a4e:	4613      	mov	r3, r2
 8001a50:	00db      	lsls	r3, r3, #3
 8001a52:	4413      	add	r3, r2
 8001a54:	009b      	lsls	r3, r3, #2
 8001a56:	440b      	add	r3, r1
 8001a58:	f503 7321 	add.w	r3, r3, #644	@ 0x284
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	7dfa      	ldrb	r2, [r7, #23]
 8001a60:	1d19      	adds	r1, r3, #4
 8001a62:	6878      	ldr	r0, [r7, #4]
 8001a64:	4613      	mov	r3, r2
 8001a66:	00db      	lsls	r3, r3, #3
 8001a68:	4413      	add	r3, r2
 8001a6a:	009b      	lsls	r3, r3, #2
 8001a6c:	4403      	add	r3, r0
 8001a6e:	f503 7321 	add.w	r3, r3, #644	@ 0x284
 8001a72:	6019      	str	r1, [r3, #0]
						if ((g->enemies[i].x % 4 == 0)
 8001a74:	7dfa      	ldrb	r2, [r7, #23]
 8001a76:	6879      	ldr	r1, [r7, #4]
 8001a78:	4613      	mov	r3, r2
 8001a7a:	00db      	lsls	r3, r3, #3
 8001a7c:	4413      	add	r3, r2
 8001a7e:	009b      	lsls	r3, r3, #2
 8001a80:	440b      	add	r3, r1
 8001a82:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f003 0303 	and.w	r3, r3, #3
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d122      	bne.n	8001ad6 <GameTick+0x7aa>
								&& !(g->enemies[i].x % 8 == 0))
 8001a90:	7dfa      	ldrb	r2, [r7, #23]
 8001a92:	6879      	ldr	r1, [r7, #4]
 8001a94:	4613      	mov	r3, r2
 8001a96:	00db      	lsls	r3, r3, #3
 8001a98:	4413      	add	r3, r2
 8001a9a:	009b      	lsls	r3, r3, #2
 8001a9c:	440b      	add	r3, r1
 8001a9e:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f003 0307 	and.w	r3, r3, #7
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d014      	beq.n	8001ad6 <GameTick+0x7aa>
							g->enemies[i].y -= 4;
 8001aac:	7dfa      	ldrb	r2, [r7, #23]
 8001aae:	6879      	ldr	r1, [r7, #4]
 8001ab0:	4613      	mov	r3, r2
 8001ab2:	00db      	lsls	r3, r3, #3
 8001ab4:	4413      	add	r3, r2
 8001ab6:	009b      	lsls	r3, r3, #2
 8001ab8:	440b      	add	r3, r1
 8001aba:	f503 7321 	add.w	r3, r3, #644	@ 0x284
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	7dfa      	ldrb	r2, [r7, #23]
 8001ac2:	1f19      	subs	r1, r3, #4
 8001ac4:	6878      	ldr	r0, [r7, #4]
 8001ac6:	4613      	mov	r3, r2
 8001ac8:	00db      	lsls	r3, r3, #3
 8001aca:	4413      	add	r3, r2
 8001acc:	009b      	lsls	r3, r3, #2
 8001ace:	4403      	add	r3, r0
 8001ad0:	f503 7321 	add.w	r3, r3, #644	@ 0x284
 8001ad4:	6019      	str	r1, [r3, #0]
						if (g->enemies[i].x < 70) {
 8001ad6:	7dfa      	ldrb	r2, [r7, #23]
 8001ad8:	6879      	ldr	r1, [r7, #4]
 8001ada:	4613      	mov	r3, r2
 8001adc:	00db      	lsls	r3, r3, #3
 8001ade:	4413      	add	r3, r2
 8001ae0:	009b      	lsls	r3, r3, #2
 8001ae2:	440b      	add	r3, r1
 8001ae4:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	2b45      	cmp	r3, #69	@ 0x45
 8001aec:	dc50      	bgt.n	8001b90 <GameTick+0x864>
							if (g->player.y > g->enemies[i].y)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6859      	ldr	r1, [r3, #4]
 8001af2:	7dfa      	ldrb	r2, [r7, #23]
 8001af4:	6878      	ldr	r0, [r7, #4]
 8001af6:	4613      	mov	r3, r2
 8001af8:	00db      	lsls	r3, r3, #3
 8001afa:	4413      	add	r3, r2
 8001afc:	009b      	lsls	r3, r3, #2
 8001afe:	4403      	add	r3, r0
 8001b00:	f503 7321 	add.w	r3, r3, #644	@ 0x284
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4299      	cmp	r1, r3
 8001b08:	dd14      	ble.n	8001b34 <GameTick+0x808>
								g->enemies[i].y += 1;
 8001b0a:	7dfa      	ldrb	r2, [r7, #23]
 8001b0c:	6879      	ldr	r1, [r7, #4]
 8001b0e:	4613      	mov	r3, r2
 8001b10:	00db      	lsls	r3, r3, #3
 8001b12:	4413      	add	r3, r2
 8001b14:	009b      	lsls	r3, r3, #2
 8001b16:	440b      	add	r3, r1
 8001b18:	f503 7321 	add.w	r3, r3, #644	@ 0x284
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	7dfa      	ldrb	r2, [r7, #23]
 8001b20:	1c59      	adds	r1, r3, #1
 8001b22:	6878      	ldr	r0, [r7, #4]
 8001b24:	4613      	mov	r3, r2
 8001b26:	00db      	lsls	r3, r3, #3
 8001b28:	4413      	add	r3, r2
 8001b2a:	009b      	lsls	r3, r3, #2
 8001b2c:	4403      	add	r3, r0
 8001b2e:	f503 7321 	add.w	r3, r3, #644	@ 0x284
 8001b32:	6019      	str	r1, [r3, #0]
							if (g->player.y < g->enemies[i].y)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6859      	ldr	r1, [r3, #4]
 8001b38:	7dfa      	ldrb	r2, [r7, #23]
 8001b3a:	6878      	ldr	r0, [r7, #4]
 8001b3c:	4613      	mov	r3, r2
 8001b3e:	00db      	lsls	r3, r3, #3
 8001b40:	4413      	add	r3, r2
 8001b42:	009b      	lsls	r3, r3, #2
 8001b44:	4403      	add	r3, r0
 8001b46:	f503 7321 	add.w	r3, r3, #644	@ 0x284
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4299      	cmp	r1, r3
 8001b4e:	da1f      	bge.n	8001b90 <GameTick+0x864>
								g->enemies[i].y -= 1;
 8001b50:	7dfa      	ldrb	r2, [r7, #23]
 8001b52:	6879      	ldr	r1, [r7, #4]
 8001b54:	4613      	mov	r3, r2
 8001b56:	00db      	lsls	r3, r3, #3
 8001b58:	4413      	add	r3, r2
 8001b5a:	009b      	lsls	r3, r3, #2
 8001b5c:	440b      	add	r3, r1
 8001b5e:	f503 7321 	add.w	r3, r3, #644	@ 0x284
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	7dfa      	ldrb	r2, [r7, #23]
 8001b66:	1e59      	subs	r1, r3, #1
 8001b68:	6878      	ldr	r0, [r7, #4]
 8001b6a:	4613      	mov	r3, r2
 8001b6c:	00db      	lsls	r3, r3, #3
 8001b6e:	4413      	add	r3, r2
 8001b70:	009b      	lsls	r3, r3, #2
 8001b72:	4403      	add	r3, r0
 8001b74:	f503 7321 	add.w	r3, r3, #644	@ 0x284
 8001b78:	6019      	str	r1, [r3, #0]
						}
						break;
 8001b7a:	e009      	b.n	8001b90 <GameTick+0x864>
						break;
 8001b7c:	bf00      	nop
 8001b7e:	e008      	b.n	8001b92 <GameTick+0x866>
						break;
 8001b80:	bf00      	nop
 8001b82:	e006      	b.n	8001b92 <GameTick+0x866>
 8001b84:	0800a550 	.word	0x0800a550
 8001b88:	0800a518 	.word	0x0800a518
 8001b8c:	0800a350 	.word	0x0800a350
						break;
 8001b90:	bf00      	nop
					}

					// If off-screen, deactivation
					if (g->enemies[i].x < -4) {
 8001b92:	7dfa      	ldrb	r2, [r7, #23]
 8001b94:	6879      	ldr	r1, [r7, #4]
 8001b96:	4613      	mov	r3, r2
 8001b98:	00db      	lsls	r3, r3, #3
 8001b9a:	4413      	add	r3, r2
 8001b9c:	009b      	lsls	r3, r3, #2
 8001b9e:	440b      	add	r3, r1
 8001ba0:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f113 0f04 	cmn.w	r3, #4
 8001baa:	da20      	bge.n	8001bee <GameTick+0x8c2>
						g->enemies[i].active = false;
 8001bac:	7dfa      	ldrb	r2, [r7, #23]
 8001bae:	6879      	ldr	r1, [r7, #4]
 8001bb0:	4613      	mov	r3, r2
 8001bb2:	00db      	lsls	r3, r3, #3
 8001bb4:	4413      	add	r3, r2
 8001bb6:	009b      	lsls	r3, r3, #2
 8001bb8:	440b      	add	r3, r1
 8001bba:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	701a      	strb	r2, [r3, #0]
						g->enemies[i].trackedByMissile = false;
 8001bc2:	7dfa      	ldrb	r2, [r7, #23]
 8001bc4:	6879      	ldr	r1, [r7, #4]
 8001bc6:	4613      	mov	r3, r2
 8001bc8:	00db      	lsls	r3, r3, #3
 8001bca:	4413      	add	r3, r2
 8001bcc:	009b      	lsls	r3, r3, #2
 8001bce:	440b      	add	r3, r1
 8001bd0:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	701a      	strb	r2, [r3, #0]
						g->enemies[i].trackNumber = 0;
 8001bd8:	7dfa      	ldrb	r2, [r7, #23]
 8001bda:	6879      	ldr	r1, [r7, #4]
 8001bdc:	4613      	mov	r3, r2
 8001bde:	00db      	lsls	r3, r3, #3
 8001be0:	4413      	add	r3, r2
 8001be2:	009b      	lsls	r3, r3, #2
 8001be4:	440b      	add	r3, r1
 8001be6:	f503 7327 	add.w	r3, r3, #668	@ 0x29c
 8001bea:	2200      	movs	r2, #0
 8001bec:	601a      	str	r2, [r3, #0]
	for (i = 0; i < NUMBER_ENEMIES; ++i) {
 8001bee:	7dfb      	ldrb	r3, [r7, #23]
 8001bf0:	3301      	adds	r3, #1
 8001bf2:	75fb      	strb	r3, [r7, #23]
 8001bf4:	7dfb      	ldrb	r3, [r7, #23]
 8001bf6:	2b09      	cmp	r3, #9
 8001bf8:	f67f ad5c 	bls.w	80016b4 <GameTick+0x388>
			}
		}
	}

	//------------- Boss service ---------------
	if (g->boss.active) {
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	f893 3a24 	ldrb.w	r3, [r3, #2596]	@ 0xa24
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	f000 8249 	beq.w	800209a <GameTick+0xd6e>
		g->boss.nextUpdate -= 1;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	f8d3 3a30 	ldr.w	r3, [r3, #2608]	@ 0xa30
 8001c0e:	1e5a      	subs	r2, r3, #1
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	f8c3 2a30 	str.w	r2, [r3, #2608]	@ 0xa30

		//Boss position
		if (g->boss.nextUpdate <= 0) {
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	f8d3 3a30 	ldr.w	r3, [r3, #2608]	@ 0xa30
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	dc43      	bgt.n	8001ca8 <GameTick+0x97c>
			g->boss.nextUpdate = g->boss.updateDelay;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	f8d3 2a34 	ldr.w	r2, [r3, #2612]	@ 0xa34
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	f8c3 2a30 	str.w	r2, [r3, #2608]	@ 0xa30

			y += dy;
 8001c2c:	4b4c      	ldr	r3, [pc, #304]	@ (8001d60 <GameTick+0xa34>)
 8001c2e:	781a      	ldrb	r2, [r3, #0]
 8001c30:	4b4c      	ldr	r3, [pc, #304]	@ (8001d64 <GameTick+0xa38>)
 8001c32:	781b      	ldrb	r3, [r3, #0]
 8001c34:	4413      	add	r3, r2
 8001c36:	b2da      	uxtb	r2, r3
 8001c38:	4b49      	ldr	r3, [pc, #292]	@ (8001d60 <GameTick+0xa34>)
 8001c3a:	701a      	strb	r2, [r3, #0]
			if (y < 1 || y > (SCREEN_HEIGHT - 24))
 8001c3c:	4b48      	ldr	r3, [pc, #288]	@ (8001d60 <GameTick+0xa34>)
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d003      	beq.n	8001c4c <GameTick+0x920>
 8001c44:	4b46      	ldr	r3, [pc, #280]	@ (8001d60 <GameTick+0xa34>)
 8001c46:	781b      	ldrb	r3, [r3, #0]
 8001c48:	2b68      	cmp	r3, #104	@ 0x68
 8001c4a:	d905      	bls.n	8001c58 <GameTick+0x92c>
				dy = -dy;
 8001c4c:	4b45      	ldr	r3, [pc, #276]	@ (8001d64 <GameTick+0xa38>)
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	425b      	negs	r3, r3
 8001c52:	b2da      	uxtb	r2, r3
 8001c54:	4b43      	ldr	r3, [pc, #268]	@ (8001d64 <GameTick+0xa38>)
 8001c56:	701a      	strb	r2, [r3, #0]

			g->boss.y = y;
 8001c58:	4b41      	ldr	r3, [pc, #260]	@ (8001d60 <GameTick+0xa34>)
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	461a      	mov	r2, r3
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	f8c3 2a2c 	str.w	r2, [r3, #2604]	@ 0xa2c

			if (g->boss.y < 10)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	f8d3 3a2c 	ldr.w	r3, [r3, #2604]	@ 0xa2c
 8001c6a:	2b09      	cmp	r3, #9
 8001c6c:	dc03      	bgt.n	8001c76 <GameTick+0x94a>
				g->boss.y = 10;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	220a      	movs	r2, #10
 8001c72:	f8c3 2a2c 	str.w	r2, [r3, #2604]	@ 0xa2c
			if (g->boss.y > (SCREEN_HEIGHT - 24))
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	f8d3 3a2c 	ldr.w	r3, [r3, #2604]	@ 0xa2c
 8001c7c:	2b68      	cmp	r3, #104	@ 0x68
 8001c7e:	dd03      	ble.n	8001c88 <GameTick+0x95c>
				g->boss.y = (SCREEN_HEIGHT - 24);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2268      	movs	r2, #104	@ 0x68
 8001c84:	f8c3 2a2c 	str.w	r2, [r3, #2604]	@ 0xa2c

			g->boss.x -= 1;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	f8d3 3a28 	ldr.w	r3, [r3, #2600]	@ 0xa28
 8001c8e:	1e5a      	subs	r2, r3, #1
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	f8c3 2a28 	str.w	r2, [r3, #2600]	@ 0xa28
			if (g->boss.x < 100)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	f8d3 3a28 	ldr.w	r3, [r3, #2600]	@ 0xa28
 8001c9c:	2b63      	cmp	r3, #99	@ 0x63
 8001c9e:	dc03      	bgt.n	8001ca8 <GameTick+0x97c>
				g->boss.x = 100;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2264      	movs	r2, #100	@ 0x64
 8001ca4:	f8c3 2a28 	str.w	r2, [r3, #2600]	@ 0xa28
		}

		//Frequency of boss shots
		if ((rand() % 100) < (g->boss.level * 5))
 8001ca8:	f006 f95e 	bl	8007f68 <rand>
 8001cac:	4602      	mov	r2, r0
 8001cae:	4b2e      	ldr	r3, [pc, #184]	@ (8001d68 <GameTick+0xa3c>)
 8001cb0:	fb83 1302 	smull	r1, r3, r3, r2
 8001cb4:	1159      	asrs	r1, r3, #5
 8001cb6:	17d3      	asrs	r3, r2, #31
 8001cb8:	1acb      	subs	r3, r1, r3
 8001cba:	2164      	movs	r1, #100	@ 0x64
 8001cbc:	fb01 f303 	mul.w	r3, r1, r3
 8001cc0:	1ad3      	subs	r3, r2, r3
 8001cc2:	687a      	ldr	r2, [r7, #4]
 8001cc4:	f8d2 1a3c 	ldr.w	r1, [r2, #2620]	@ 0xa3c
 8001cc8:	460a      	mov	r2, r1
 8001cca:	0092      	lsls	r2, r2, #2
 8001ccc:	440a      	add	r2, r1
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	da02      	bge.n	8001cd8 <GameTick+0x9ac>
			GameShotBoss(g);
 8001cd2:	6878      	ldr	r0, [r7, #4]
 8001cd4:	f001 fa46 	bl	8003164 <GameShotBoss>


		for (i = 0; i < NUMBER_BOSS_SHOTS; ++i) {
 8001cd8:	2300      	movs	r3, #0
 8001cda:	75fb      	strb	r3, [r7, #23]
 8001cdc:	e03a      	b.n	8001d54 <GameTick+0xa28>
			if (g->bossShots[i].active)
 8001cde:	7dfa      	ldrb	r2, [r7, #23]
 8001ce0:	6879      	ldr	r1, [r7, #4]
 8001ce2:	4613      	mov	r3, r2
 8001ce4:	009b      	lsls	r3, r3, #2
 8001ce6:	4413      	add	r3, r2
 8001ce8:	009b      	lsls	r3, r3, #2
 8001cea:	440b      	add	r3, r1
 8001cec:	f503 7306 	add.w	r3, r3, #536	@ 0x218
 8001cf0:	781b      	ldrb	r3, [r3, #0]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d013      	beq.n	8001d1e <GameTick+0x9f2>
				g->bossShots[i].x--;
 8001cf6:	7dfa      	ldrb	r2, [r7, #23]
 8001cf8:	6879      	ldr	r1, [r7, #4]
 8001cfa:	4613      	mov	r3, r2
 8001cfc:	009b      	lsls	r3, r3, #2
 8001cfe:	4413      	add	r3, r2
 8001d00:	009b      	lsls	r3, r3, #2
 8001d02:	440b      	add	r3, r1
 8001d04:	f503 7307 	add.w	r3, r3, #540	@ 0x21c
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	1e59      	subs	r1, r3, #1
 8001d0c:	6878      	ldr	r0, [r7, #4]
 8001d0e:	4613      	mov	r3, r2
 8001d10:	009b      	lsls	r3, r3, #2
 8001d12:	4413      	add	r3, r2
 8001d14:	009b      	lsls	r3, r3, #2
 8001d16:	4403      	add	r3, r0
 8001d18:	f503 7307 	add.w	r3, r3, #540	@ 0x21c
 8001d1c:	6019      	str	r1, [r3, #0]
			if (g->bossShots[i].x < -4)
 8001d1e:	7dfa      	ldrb	r2, [r7, #23]
 8001d20:	6879      	ldr	r1, [r7, #4]
 8001d22:	4613      	mov	r3, r2
 8001d24:	009b      	lsls	r3, r3, #2
 8001d26:	4413      	add	r3, r2
 8001d28:	009b      	lsls	r3, r3, #2
 8001d2a:	440b      	add	r3, r1
 8001d2c:	f503 7307 	add.w	r3, r3, #540	@ 0x21c
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f113 0f04 	cmn.w	r3, #4
 8001d36:	da0a      	bge.n	8001d4e <GameTick+0xa22>
				g->bossShots[i].active = false;
 8001d38:	7dfa      	ldrb	r2, [r7, #23]
 8001d3a:	6879      	ldr	r1, [r7, #4]
 8001d3c:	4613      	mov	r3, r2
 8001d3e:	009b      	lsls	r3, r3, #2
 8001d40:	4413      	add	r3, r2
 8001d42:	009b      	lsls	r3, r3, #2
 8001d44:	440b      	add	r3, r1
 8001d46:	f503 7306 	add.w	r3, r3, #536	@ 0x218
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < NUMBER_BOSS_SHOTS; ++i) {
 8001d4e:	7dfb      	ldrb	r3, [r7, #23]
 8001d50:	3301      	adds	r3, #1
 8001d52:	75fb      	strb	r3, [r7, #23]
 8001d54:	7dfb      	ldrb	r3, [r7, #23]
 8001d56:	2b04      	cmp	r3, #4
 8001d58:	d9c1      	bls.n	8001cde <GameTick+0x9b2>
		}

		for (i = 0; i < NUMBER_BOSS_SHOTS; i++) {
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	75fb      	strb	r3, [r7, #23]
 8001d5e:	e0df      	b.n	8001f20 <GameTick+0xbf4>
 8001d60:	20000b30 	.word	0x20000b30
 8001d64:	20000000 	.word	0x20000000
 8001d68:	51eb851f 	.word	0x51eb851f
			if (g->bossShots[i].active) {
 8001d6c:	7dfa      	ldrb	r2, [r7, #23]
 8001d6e:	6879      	ldr	r1, [r7, #4]
 8001d70:	4613      	mov	r3, r2
 8001d72:	009b      	lsls	r3, r3, #2
 8001d74:	4413      	add	r3, r2
 8001d76:	009b      	lsls	r3, r3, #2
 8001d78:	440b      	add	r3, r1
 8001d7a:	f503 7306 	add.w	r3, r3, #536	@ 0x218
 8001d7e:	781b      	ldrb	r3, [r3, #0]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	f000 80ca 	beq.w	8001f1a <GameTick+0xbee>
				if (Colliding(g->bossShots[i].x, g->bossShots[i].y,
 8001d86:	7dfa      	ldrb	r2, [r7, #23]
 8001d88:	6879      	ldr	r1, [r7, #4]
 8001d8a:	4613      	mov	r3, r2
 8001d8c:	009b      	lsls	r3, r3, #2
 8001d8e:	4413      	add	r3, r2
 8001d90:	009b      	lsls	r3, r3, #2
 8001d92:	440b      	add	r3, r1
 8001d94:	f503 7307 	add.w	r3, r3, #540	@ 0x21c
 8001d98:	6818      	ldr	r0, [r3, #0]
 8001d9a:	7dfa      	ldrb	r2, [r7, #23]
 8001d9c:	6879      	ldr	r1, [r7, #4]
 8001d9e:	4613      	mov	r3, r2
 8001da0:	009b      	lsls	r3, r3, #2
 8001da2:	4413      	add	r3, r2
 8001da4:	009b      	lsls	r3, r3, #2
 8001da6:	440b      	add	r3, r1
 8001da8:	f503 7308 	add.w	r3, r3, #544	@ 0x220
 8001dac:	6819      	ldr	r1, [r3, #0]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681a      	ldr	r2, [r3, #0]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	f001 fa1d 	bl	80031f4 <Colliding>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d15a      	bne.n	8001e76 <GameTick+0xb4a>
						g->player.x, g->player.y)
						|| Colliding(g->bossShots[i].x, g->bossShots[i].y,
 8001dc0:	7dfa      	ldrb	r2, [r7, #23]
 8001dc2:	6879      	ldr	r1, [r7, #4]
 8001dc4:	4613      	mov	r3, r2
 8001dc6:	009b      	lsls	r3, r3, #2
 8001dc8:	4413      	add	r3, r2
 8001dca:	009b      	lsls	r3, r3, #2
 8001dcc:	440b      	add	r3, r1
 8001dce:	f503 7307 	add.w	r3, r3, #540	@ 0x21c
 8001dd2:	6818      	ldr	r0, [r3, #0]
 8001dd4:	7dfa      	ldrb	r2, [r7, #23]
 8001dd6:	6879      	ldr	r1, [r7, #4]
 8001dd8:	4613      	mov	r3, r2
 8001dda:	009b      	lsls	r3, r3, #2
 8001ddc:	4413      	add	r3, r2
 8001dde:	009b      	lsls	r3, r3, #2
 8001de0:	440b      	add	r3, r1
 8001de2:	f503 7308 	add.w	r3, r3, #544	@ 0x220
 8001de6:	6819      	ldr	r1, [r3, #0]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681a      	ldr	r2, [r3, #0]
								g->player.x, g->player.y + 5)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	685b      	ldr	r3, [r3, #4]
						|| Colliding(g->bossShots[i].x, g->bossShots[i].y,
 8001df0:	3305      	adds	r3, #5
 8001df2:	f001 f9ff 	bl	80031f4 <Colliding>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d13c      	bne.n	8001e76 <GameTick+0xb4a>
						|| Colliding(g->bossShots[i].x, g->bossShots[i].y,
 8001dfc:	7dfa      	ldrb	r2, [r7, #23]
 8001dfe:	6879      	ldr	r1, [r7, #4]
 8001e00:	4613      	mov	r3, r2
 8001e02:	009b      	lsls	r3, r3, #2
 8001e04:	4413      	add	r3, r2
 8001e06:	009b      	lsls	r3, r3, #2
 8001e08:	440b      	add	r3, r1
 8001e0a:	f503 7307 	add.w	r3, r3, #540	@ 0x21c
 8001e0e:	6818      	ldr	r0, [r3, #0]
 8001e10:	7dfa      	ldrb	r2, [r7, #23]
 8001e12:	6879      	ldr	r1, [r7, #4]
 8001e14:	4613      	mov	r3, r2
 8001e16:	009b      	lsls	r3, r3, #2
 8001e18:	4413      	add	r3, r2
 8001e1a:	009b      	lsls	r3, r3, #2
 8001e1c:	440b      	add	r3, r1
 8001e1e:	f503 7308 	add.w	r3, r3, #544	@ 0x220
 8001e22:	6819      	ldr	r1, [r3, #0]
								g->player.x + 7, g->player.y)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
						|| Colliding(g->bossShots[i].x, g->bossShots[i].y,
 8001e28:	1dda      	adds	r2, r3, #7
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	f001 f9e1 	bl	80031f4 <Colliding>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d11e      	bne.n	8001e76 <GameTick+0xb4a>
						|| Colliding(g->bossShots[i].x, g->bossShots[i].y,
 8001e38:	7dfa      	ldrb	r2, [r7, #23]
 8001e3a:	6879      	ldr	r1, [r7, #4]
 8001e3c:	4613      	mov	r3, r2
 8001e3e:	009b      	lsls	r3, r3, #2
 8001e40:	4413      	add	r3, r2
 8001e42:	009b      	lsls	r3, r3, #2
 8001e44:	440b      	add	r3, r1
 8001e46:	f503 7307 	add.w	r3, r3, #540	@ 0x21c
 8001e4a:	6818      	ldr	r0, [r3, #0]
 8001e4c:	7dfa      	ldrb	r2, [r7, #23]
 8001e4e:	6879      	ldr	r1, [r7, #4]
 8001e50:	4613      	mov	r3, r2
 8001e52:	009b      	lsls	r3, r3, #2
 8001e54:	4413      	add	r3, r2
 8001e56:	009b      	lsls	r3, r3, #2
 8001e58:	440b      	add	r3, r1
 8001e5a:	f503 7308 	add.w	r3, r3, #544	@ 0x220
 8001e5e:	6819      	ldr	r1, [r3, #0]
								g->player.x + 7, g->player.y + 5)) {
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
						|| Colliding(g->bossShots[i].x, g->bossShots[i].y,
 8001e64:	1dda      	adds	r2, r3, #7
								g->player.x + 7, g->player.y + 5)) {
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	685b      	ldr	r3, [r3, #4]
						|| Colliding(g->bossShots[i].x, g->bossShots[i].y,
 8001e6a:	3305      	adds	r3, #5
 8001e6c:	f001 f9c2 	bl	80031f4 <Colliding>
 8001e70:	4603      	mov	r3, r0
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d051      	beq.n	8001f1a <GameTick+0xbee>
					g->player.lives -= 1;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	691b      	ldr	r3, [r3, #16]
 8001e7a:	1e5a      	subs	r2, r3, #1
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	611a      	str	r2, [r3, #16]
					;
					g->bossShots[i].active = false;
 8001e80:	7dfa      	ldrb	r2, [r7, #23]
 8001e82:	6879      	ldr	r1, [r7, #4]
 8001e84:	4613      	mov	r3, r2
 8001e86:	009b      	lsls	r3, r3, #2
 8001e88:	4413      	add	r3, r2
 8001e8a:	009b      	lsls	r3, r3, #2
 8001e8c:	440b      	add	r3, r1
 8001e8e:	f503 7306 	add.w	r3, r3, #536	@ 0x218
 8001e92:	2200      	movs	r2, #0
 8001e94:	701a      	strb	r2, [r3, #0]
					GFX_DrowBitMap_P(g->bossShots[i].x + 2, g->bossShots[i].y,
 8001e96:	7dfa      	ldrb	r2, [r7, #23]
 8001e98:	6879      	ldr	r1, [r7, #4]
 8001e9a:	4613      	mov	r3, r2
 8001e9c:	009b      	lsls	r3, r3, #2
 8001e9e:	4413      	add	r3, r2
 8001ea0:	009b      	lsls	r3, r3, #2
 8001ea2:	440b      	add	r3, r1
 8001ea4:	f503 7307 	add.w	r3, r3, #540	@ 0x21c
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	1c98      	adds	r0, r3, #2
 8001eac:	7dfa      	ldrb	r2, [r7, #23]
 8001eae:	6879      	ldr	r1, [r7, #4]
 8001eb0:	4613      	mov	r3, r2
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	4413      	add	r3, r2
 8001eb6:	009b      	lsls	r3, r3, #2
 8001eb8:	440b      	add	r3, r1
 8001eba:	f503 7308 	add.w	r3, r3, #544	@ 0x220
 8001ebe:	6819      	ldr	r1, [r3, #0]
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	9301      	str	r3, [sp, #4]
 8001ec4:	230a      	movs	r3, #10
 8001ec6:	9300      	str	r3, [sp, #0]
 8001ec8:	230a      	movs	r3, #10
 8001eca:	4a9c      	ldr	r2, [pc, #624]	@ (800213c <GameTick+0xe10>)
 8001ecc:	f7fe ff6e 	bl	8000dac <GFX_DrowBitMap_P>
							explosion_map, 10, 10, 1);
					GFX_DrowBitMap_P(g->player.x + 8, g->player.y - 2,
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f103 0008 	add.w	r0, r3, #8
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	1e99      	subs	r1, r3, #2
 8001ede:	2301      	movs	r3, #1
 8001ee0:	9301      	str	r3, [sp, #4]
 8001ee2:	2310      	movs	r3, #16
 8001ee4:	9300      	str	r3, [sp, #0]
 8001ee6:	230a      	movs	r3, #10
 8001ee8:	4a95      	ldr	r2, [pc, #596]	@ (8002140 <GameTick+0xe14>)
 8001eea:	f7fe ff5f 	bl	8000dac <GFX_DrowBitMap_P>
							player_shield_map, 10, 16, 1);
					GFX_DrowBitMap_P(g->player.x, g->player.y, player_map, 11,
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6818      	ldr	r0, [r3, #0]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6859      	ldr	r1, [r3, #4]
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	9301      	str	r3, [sp, #4]
 8001efa:	230b      	movs	r3, #11
 8001efc:	9300      	str	r3, [sp, #0]
 8001efe:	230b      	movs	r3, #11
 8001f00:	4a90      	ldr	r2, [pc, #576]	@ (8002144 <GameTick+0xe18>)
 8001f02:	f7fe ff53 	bl	8000dac <GFX_DrowBitMap_P>
							11, 1);

					//SSD1327_Display();
					if (g->player.lives <= 0) {
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	691b      	ldr	r3, [r3, #16]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	dc05      	bgt.n	8001f1a <GameTick+0xbee>
						PlayDeadAnim();
 8001f0e:	f001 fdf9 	bl	8003b04 <PlayDeadAnim>
						g->state = GS_Dead;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2202      	movs	r2, #2
 8001f16:	f883 2a94 	strb.w	r2, [r3, #2708]	@ 0xa94
		for (i = 0; i < NUMBER_BOSS_SHOTS; i++) {
 8001f1a:	7dfb      	ldrb	r3, [r7, #23]
 8001f1c:	3301      	adds	r3, #1
 8001f1e:	75fb      	strb	r3, [r7, #23]
 8001f20:	7dfb      	ldrb	r3, [r7, #23]
 8001f22:	2b04      	cmp	r3, #4
 8001f24:	f67f af22 	bls.w	8001d6c <GameTick+0xa40>
				}
			}
		}

		// Player's shots to the boss
		for (i = 0; i < NUMBER_SHOTS; i++) {
 8001f28:	2300      	movs	r3, #0
 8001f2a:	75fb      	strb	r3, [r7, #23]
 8001f2c:	e0b1      	b.n	8002092 <GameTick+0xd66>
			if (g->shots[i].active) {
 8001f2e:	7dfa      	ldrb	r2, [r7, #23]
 8001f30:	6879      	ldr	r1, [r7, #4]
 8001f32:	4613      	mov	r3, r2
 8001f34:	009b      	lsls	r3, r3, #2
 8001f36:	4413      	add	r3, r2
 8001f38:	009b      	lsls	r3, r3, #2
 8001f3a:	440b      	add	r3, r1
 8001f3c:	3324      	adds	r3, #36	@ 0x24
 8001f3e:	781b      	ldrb	r3, [r3, #0]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	f000 80a3 	beq.w	800208c <GameTick+0xd60>
				if (Colliding(g->boss.x, g->boss.y, g->shots[i].x,
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	f8d3 0a28 	ldr.w	r0, [r3, #2600]	@ 0xa28
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	f8d3 4a2c 	ldr.w	r4, [r3, #2604]	@ 0xa2c
 8001f52:	7dfa      	ldrb	r2, [r7, #23]
 8001f54:	6879      	ldr	r1, [r7, #4]
 8001f56:	4613      	mov	r3, r2
 8001f58:	009b      	lsls	r3, r3, #2
 8001f5a:	4413      	add	r3, r2
 8001f5c:	009b      	lsls	r3, r3, #2
 8001f5e:	440b      	add	r3, r1
 8001f60:	3328      	adds	r3, #40	@ 0x28
 8001f62:	681d      	ldr	r5, [r3, #0]
 8001f64:	7dfa      	ldrb	r2, [r7, #23]
 8001f66:	6879      	ldr	r1, [r7, #4]
 8001f68:	4613      	mov	r3, r2
 8001f6a:	009b      	lsls	r3, r3, #2
 8001f6c:	4413      	add	r3, r2
 8001f6e:	009b      	lsls	r3, r3, #2
 8001f70:	440b      	add	r3, r1
 8001f72:	332c      	adds	r3, #44	@ 0x2c
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	462a      	mov	r2, r5
 8001f78:	4621      	mov	r1, r4
 8001f7a:	f001 f93b 	bl	80031f4 <Colliding>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d140      	bne.n	8002006 <GameTick+0xcda>
						g->shots[i].y)
						|| Colliding(g->boss.x, g->boss.y + 6, g->shots[i].x,
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	f8d3 0a28 	ldr.w	r0, [r3, #2600]	@ 0xa28
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	f8d3 3a2c 	ldr.w	r3, [r3, #2604]	@ 0xa2c
 8001f90:	1d9c      	adds	r4, r3, #6
 8001f92:	7dfa      	ldrb	r2, [r7, #23]
 8001f94:	6879      	ldr	r1, [r7, #4]
 8001f96:	4613      	mov	r3, r2
 8001f98:	009b      	lsls	r3, r3, #2
 8001f9a:	4413      	add	r3, r2
 8001f9c:	009b      	lsls	r3, r3, #2
 8001f9e:	440b      	add	r3, r1
 8001fa0:	3328      	adds	r3, #40	@ 0x28
 8001fa2:	681d      	ldr	r5, [r3, #0]
 8001fa4:	7dfa      	ldrb	r2, [r7, #23]
 8001fa6:	6879      	ldr	r1, [r7, #4]
 8001fa8:	4613      	mov	r3, r2
 8001faa:	009b      	lsls	r3, r3, #2
 8001fac:	4413      	add	r3, r2
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	440b      	add	r3, r1
 8001fb2:	332c      	adds	r3, #44	@ 0x2c
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	462a      	mov	r2, r5
 8001fb8:	4621      	mov	r1, r4
 8001fba:	f001 f91b 	bl	80031f4 <Colliding>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d120      	bne.n	8002006 <GameTick+0xcda>
								g->shots[i].y)
						|| Colliding(g->boss.x, g->boss.y + 12, g->shots[i].x,
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	f8d3 0a28 	ldr.w	r0, [r3, #2600]	@ 0xa28
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	f8d3 3a2c 	ldr.w	r3, [r3, #2604]	@ 0xa2c
 8001fd0:	f103 040c 	add.w	r4, r3, #12
 8001fd4:	7dfa      	ldrb	r2, [r7, #23]
 8001fd6:	6879      	ldr	r1, [r7, #4]
 8001fd8:	4613      	mov	r3, r2
 8001fda:	009b      	lsls	r3, r3, #2
 8001fdc:	4413      	add	r3, r2
 8001fde:	009b      	lsls	r3, r3, #2
 8001fe0:	440b      	add	r3, r1
 8001fe2:	3328      	adds	r3, #40	@ 0x28
 8001fe4:	681d      	ldr	r5, [r3, #0]
 8001fe6:	7dfa      	ldrb	r2, [r7, #23]
 8001fe8:	6879      	ldr	r1, [r7, #4]
 8001fea:	4613      	mov	r3, r2
 8001fec:	009b      	lsls	r3, r3, #2
 8001fee:	4413      	add	r3, r2
 8001ff0:	009b      	lsls	r3, r3, #2
 8001ff2:	440b      	add	r3, r1
 8001ff4:	332c      	adds	r3, #44	@ 0x2c
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	462a      	mov	r2, r5
 8001ffa:	4621      	mov	r1, r4
 8001ffc:	f001 f8fa 	bl	80031f4 <Colliding>
 8002000:	4603      	mov	r3, r0
 8002002:	2b00      	cmp	r3, #0
 8002004:	d042      	beq.n	800208c <GameTick+0xd60>
								g->shots[i].y)) {
					g->boss.lives -= 1;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	f8d3 3a38 	ldr.w	r3, [r3, #2616]	@ 0xa38
 800200c:	1e5a      	subs	r2, r3, #1
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	f8c3 2a38 	str.w	r2, [r3, #2616]	@ 0xa38
					g->shots[i].active = false;
 8002014:	7dfa      	ldrb	r2, [r7, #23]
 8002016:	6879      	ldr	r1, [r7, #4]
 8002018:	4613      	mov	r3, r2
 800201a:	009b      	lsls	r3, r3, #2
 800201c:	4413      	add	r3, r2
 800201e:	009b      	lsls	r3, r3, #2
 8002020:	440b      	add	r3, r1
 8002022:	3324      	adds	r3, #36	@ 0x24
 8002024:	2200      	movs	r2, #0
 8002026:	701a      	strb	r2, [r3, #0]
					g->shots[i].trackNumber = 0;
 8002028:	7dfa      	ldrb	r2, [r7, #23]
 800202a:	6879      	ldr	r1, [r7, #4]
 800202c:	4613      	mov	r3, r2
 800202e:	009b      	lsls	r3, r3, #2
 8002030:	4413      	add	r3, r2
 8002032:	009b      	lsls	r3, r3, #2
 8002034:	440b      	add	r3, r1
 8002036:	3334      	adds	r3, #52	@ 0x34
 8002038:	2200      	movs	r2, #0
 800203a:	601a      	str	r2, [r3, #0]
					GFX_DrowBitMap_P(g->shots[i].x, g->shots[i].y,
 800203c:	7dfa      	ldrb	r2, [r7, #23]
 800203e:	6879      	ldr	r1, [r7, #4]
 8002040:	4613      	mov	r3, r2
 8002042:	009b      	lsls	r3, r3, #2
 8002044:	4413      	add	r3, r2
 8002046:	009b      	lsls	r3, r3, #2
 8002048:	440b      	add	r3, r1
 800204a:	3328      	adds	r3, #40	@ 0x28
 800204c:	6818      	ldr	r0, [r3, #0]
 800204e:	7dfa      	ldrb	r2, [r7, #23]
 8002050:	6879      	ldr	r1, [r7, #4]
 8002052:	4613      	mov	r3, r2
 8002054:	009b      	lsls	r3, r3, #2
 8002056:	4413      	add	r3, r2
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	440b      	add	r3, r1
 800205c:	332c      	adds	r3, #44	@ 0x2c
 800205e:	6819      	ldr	r1, [r3, #0]
 8002060:	2301      	movs	r3, #1
 8002062:	9301      	str	r3, [sp, #4]
 8002064:	230a      	movs	r3, #10
 8002066:	9300      	str	r3, [sp, #0]
 8002068:	230a      	movs	r3, #10
 800206a:	4a34      	ldr	r2, [pc, #208]	@ (800213c <GameTick+0xe10>)
 800206c:	f7fe fe9e 	bl	8000dac <GFX_DrowBitMap_P>
							explosion_map, 10, 10, 1);

					if (g->boss.lives <= 0) {
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	f8d3 3a38 	ldr.w	r3, [r3, #2616]	@ 0xa38
 8002076:	2b00      	cmp	r3, #0
 8002078:	dc08      	bgt.n	800208c <GameTick+0xd60>
						g->boss.active = false;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2200      	movs	r2, #0
 800207e:	f883 2a24 	strb.w	r2, [r3, #2596]	@ 0xa24
						g->boss.lives = 0;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2200      	movs	r2, #0
 8002086:	f8c3 2a38 	str.w	r2, [r3, #2616]	@ 0xa38
						break;
 800208a:	e006      	b.n	800209a <GameTick+0xd6e>
		for (i = 0; i < NUMBER_SHOTS; i++) {
 800208c:	7dfb      	ldrb	r3, [r7, #23]
 800208e:	3301      	adds	r3, #1
 8002090:	75fb      	strb	r3, [r7, #23]
 8002092:	7dfb      	ldrb	r3, [r7, #23]
 8002094:	2b18      	cmp	r3, #24
 8002096:	f67f af4a 	bls.w	8001f2e <GameTick+0xc02>
			}
		}
	}

	//Painting over and deactivating shots left over from the boss
	if (!g->boss.active) {
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	f893 3a24 	ldrb.w	r3, [r3, #2596]	@ 0xa24
 80020a0:	f083 0301 	eor.w	r3, r3, #1
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d03b      	beq.n	8002122 <GameTick+0xdf6>
		for (i = 0; i < NUMBER_BOSS_SHOTS; i++) {
 80020aa:	2300      	movs	r3, #0
 80020ac:	75fb      	strb	r3, [r7, #23]
 80020ae:	e035      	b.n	800211c <GameTick+0xdf0>
			if (g->bossShots[i].active) {
 80020b0:	7dfa      	ldrb	r2, [r7, #23]
 80020b2:	6879      	ldr	r1, [r7, #4]
 80020b4:	4613      	mov	r3, r2
 80020b6:	009b      	lsls	r3, r3, #2
 80020b8:	4413      	add	r3, r2
 80020ba:	009b      	lsls	r3, r3, #2
 80020bc:	440b      	add	r3, r1
 80020be:	f503 7306 	add.w	r3, r3, #536	@ 0x218
 80020c2:	781b      	ldrb	r3, [r3, #0]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d026      	beq.n	8002116 <GameTick+0xdea>
				g->bossShots[i].active = false;
 80020c8:	7dfa      	ldrb	r2, [r7, #23]
 80020ca:	6879      	ldr	r1, [r7, #4]
 80020cc:	4613      	mov	r3, r2
 80020ce:	009b      	lsls	r3, r3, #2
 80020d0:	4413      	add	r3, r2
 80020d2:	009b      	lsls	r3, r3, #2
 80020d4:	440b      	add	r3, r1
 80020d6:	f503 7306 	add.w	r3, r3, #536	@ 0x218
 80020da:	2200      	movs	r2, #0
 80020dc:	701a      	strb	r2, [r3, #0]
				GFX_DrowBitMap_P(g->bossShots[i].x, g->bossShots[i].y,
 80020de:	7dfa      	ldrb	r2, [r7, #23]
 80020e0:	6879      	ldr	r1, [r7, #4]
 80020e2:	4613      	mov	r3, r2
 80020e4:	009b      	lsls	r3, r3, #2
 80020e6:	4413      	add	r3, r2
 80020e8:	009b      	lsls	r3, r3, #2
 80020ea:	440b      	add	r3, r1
 80020ec:	f503 7307 	add.w	r3, r3, #540	@ 0x21c
 80020f0:	6818      	ldr	r0, [r3, #0]
 80020f2:	7dfa      	ldrb	r2, [r7, #23]
 80020f4:	6879      	ldr	r1, [r7, #4]
 80020f6:	4613      	mov	r3, r2
 80020f8:	009b      	lsls	r3, r3, #2
 80020fa:	4413      	add	r3, r2
 80020fc:	009b      	lsls	r3, r3, #2
 80020fe:	440b      	add	r3, r1
 8002100:	f503 7308 	add.w	r3, r3, #544	@ 0x220
 8002104:	6819      	ldr	r1, [r3, #0]
 8002106:	2300      	movs	r3, #0
 8002108:	9301      	str	r3, [sp, #4]
 800210a:	2301      	movs	r3, #1
 800210c:	9300      	str	r3, [sp, #0]
 800210e:	2304      	movs	r3, #4
 8002110:	4a0d      	ldr	r2, [pc, #52]	@ (8002148 <GameTick+0xe1c>)
 8002112:	f7fe fe4b 	bl	8000dac <GFX_DrowBitMap_P>
		for (i = 0; i < NUMBER_BOSS_SHOTS; i++) {
 8002116:	7dfb      	ldrb	r3, [r7, #23]
 8002118:	3301      	adds	r3, #1
 800211a:	75fb      	strb	r3, [r7, #23]
 800211c:	7dfb      	ldrb	r3, [r7, #23]
 800211e:	2b04      	cmp	r3, #4
 8002120:	d9c6      	bls.n	80020b0 <GameTick+0xd84>
			}
		}
	}
	//-------------------------------------------

	if (in->btn1State == GPIO_PIN_SET)
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	791b      	ldrb	r3, [r3, #4]
 8002126:	2b01      	cmp	r3, #1
 8002128:	d102      	bne.n	8002130 <GameTick+0xe04>
		GameShot(g);//shot();
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	f000 fef4 	bl	8002f18 <GameShot>

	// Checking the collision of a player's shots with opponents. Adding Bonuses
	for (i = 0; i < NUMBER_SHOTS; ++i) {
 8002130:	2300      	movs	r3, #0
 8002132:	75fb      	strb	r3, [r7, #23]
 8002134:	e0ce      	b.n	80022d4 <GameTick+0xfa8>
		for (j = 0; j < NUMBER_ENEMIES; ++j) {
 8002136:	2300      	movs	r3, #0
 8002138:	75bb      	strb	r3, [r7, #22]
 800213a:	e0c4      	b.n	80022c6 <GameTick+0xf9a>
 800213c:	0800a550 	.word	0x0800a550
 8002140:	0800a518 	.word	0x0800a518
 8002144:	0800a350 	.word	0x0800a350
 8002148:	0800a34c 	.word	0x0800a34c
			if (g->shots[i].active && g->enemies[j].active) {
 800214c:	7dfa      	ldrb	r2, [r7, #23]
 800214e:	6879      	ldr	r1, [r7, #4]
 8002150:	4613      	mov	r3, r2
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	4413      	add	r3, r2
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	440b      	add	r3, r1
 800215a:	3324      	adds	r3, #36	@ 0x24
 800215c:	781b      	ldrb	r3, [r3, #0]
 800215e:	2b00      	cmp	r3, #0
 8002160:	f000 80ae 	beq.w	80022c0 <GameTick+0xf94>
 8002164:	7dba      	ldrb	r2, [r7, #22]
 8002166:	6879      	ldr	r1, [r7, #4]
 8002168:	4613      	mov	r3, r2
 800216a:	00db      	lsls	r3, r3, #3
 800216c:	4413      	add	r3, r2
 800216e:	009b      	lsls	r3, r3, #2
 8002170:	440b      	add	r3, r1
 8002172:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 8002176:	781b      	ldrb	r3, [r3, #0]
 8002178:	2b00      	cmp	r3, #0
 800217a:	f000 80a1 	beq.w	80022c0 <GameTick+0xf94>
				if (Colliding(g->enemies[j].x, g->enemies[j].y, g->shots[i].x,
 800217e:	7dba      	ldrb	r2, [r7, #22]
 8002180:	6879      	ldr	r1, [r7, #4]
 8002182:	4613      	mov	r3, r2
 8002184:	00db      	lsls	r3, r3, #3
 8002186:	4413      	add	r3, r2
 8002188:	009b      	lsls	r3, r3, #2
 800218a:	440b      	add	r3, r1
 800218c:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8002190:	6818      	ldr	r0, [r3, #0]
 8002192:	7dba      	ldrb	r2, [r7, #22]
 8002194:	6879      	ldr	r1, [r7, #4]
 8002196:	4613      	mov	r3, r2
 8002198:	00db      	lsls	r3, r3, #3
 800219a:	4413      	add	r3, r2
 800219c:	009b      	lsls	r3, r3, #2
 800219e:	440b      	add	r3, r1
 80021a0:	f503 7321 	add.w	r3, r3, #644	@ 0x284
 80021a4:	681c      	ldr	r4, [r3, #0]
 80021a6:	7dfa      	ldrb	r2, [r7, #23]
 80021a8:	6879      	ldr	r1, [r7, #4]
 80021aa:	4613      	mov	r3, r2
 80021ac:	009b      	lsls	r3, r3, #2
 80021ae:	4413      	add	r3, r2
 80021b0:	009b      	lsls	r3, r3, #2
 80021b2:	440b      	add	r3, r1
 80021b4:	3328      	adds	r3, #40	@ 0x28
 80021b6:	681d      	ldr	r5, [r3, #0]
 80021b8:	7dfa      	ldrb	r2, [r7, #23]
 80021ba:	6879      	ldr	r1, [r7, #4]
 80021bc:	4613      	mov	r3, r2
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	4413      	add	r3, r2
 80021c2:	009b      	lsls	r3, r3, #2
 80021c4:	440b      	add	r3, r1
 80021c6:	332c      	adds	r3, #44	@ 0x2c
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	462a      	mov	r2, r5
 80021cc:	4621      	mov	r1, r4
 80021ce:	f001 f811 	bl	80031f4 <Colliding>
 80021d2:	4603      	mov	r3, r0
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d073      	beq.n	80022c0 <GameTick+0xf94>
						g->shots[i].y)) {
					g->enemies[j].active = false;
 80021d8:	7dba      	ldrb	r2, [r7, #22]
 80021da:	6879      	ldr	r1, [r7, #4]
 80021dc:	4613      	mov	r3, r2
 80021de:	00db      	lsls	r3, r3, #3
 80021e0:	4413      	add	r3, r2
 80021e2:	009b      	lsls	r3, r3, #2
 80021e4:	440b      	add	r3, r1
 80021e6:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 80021ea:	2200      	movs	r2, #0
 80021ec:	701a      	strb	r2, [r3, #0]
					g->enemies[j].trackedByMissile = false;
 80021ee:	7dba      	ldrb	r2, [r7, #22]
 80021f0:	6879      	ldr	r1, [r7, #4]
 80021f2:	4613      	mov	r3, r2
 80021f4:	00db      	lsls	r3, r3, #3
 80021f6:	4413      	add	r3, r2
 80021f8:	009b      	lsls	r3, r3, #2
 80021fa:	440b      	add	r3, r1
 80021fc:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8002200:	2200      	movs	r2, #0
 8002202:	701a      	strb	r2, [r3, #0]
					g->enemies[j].trackNumber = 0;
 8002204:	7dba      	ldrb	r2, [r7, #22]
 8002206:	6879      	ldr	r1, [r7, #4]
 8002208:	4613      	mov	r3, r2
 800220a:	00db      	lsls	r3, r3, #3
 800220c:	4413      	add	r3, r2
 800220e:	009b      	lsls	r3, r3, #2
 8002210:	440b      	add	r3, r1
 8002212:	f503 7327 	add.w	r3, r3, #668	@ 0x29c
 8002216:	2200      	movs	r2, #0
 8002218:	601a      	str	r2, [r3, #0]
					g->shots[i].active = false;
 800221a:	7dfa      	ldrb	r2, [r7, #23]
 800221c:	6879      	ldr	r1, [r7, #4]
 800221e:	4613      	mov	r3, r2
 8002220:	009b      	lsls	r3, r3, #2
 8002222:	4413      	add	r3, r2
 8002224:	009b      	lsls	r3, r3, #2
 8002226:	440b      	add	r3, r1
 8002228:	3324      	adds	r3, #36	@ 0x24
 800222a:	2200      	movs	r2, #0
 800222c:	701a      	strb	r2, [r3, #0]
					g->player.score += 1;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	1c5a      	adds	r2, r3, #1
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	609a      	str	r2, [r3, #8]
					GFX_DrowBitMap_P(g->enemies[j].x, g->enemies[j].y,
 8002238:	7dba      	ldrb	r2, [r7, #22]
 800223a:	6879      	ldr	r1, [r7, #4]
 800223c:	4613      	mov	r3, r2
 800223e:	00db      	lsls	r3, r3, #3
 8002240:	4413      	add	r3, r2
 8002242:	009b      	lsls	r3, r3, #2
 8002244:	440b      	add	r3, r1
 8002246:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 800224a:	6818      	ldr	r0, [r3, #0]
 800224c:	7dba      	ldrb	r2, [r7, #22]
 800224e:	6879      	ldr	r1, [r7, #4]
 8002250:	4613      	mov	r3, r2
 8002252:	00db      	lsls	r3, r3, #3
 8002254:	4413      	add	r3, r2
 8002256:	009b      	lsls	r3, r3, #2
 8002258:	440b      	add	r3, r1
 800225a:	f503 7321 	add.w	r3, r3, #644	@ 0x284
 800225e:	6819      	ldr	r1, [r3, #0]
 8002260:	2301      	movs	r3, #1
 8002262:	9301      	str	r3, [sp, #4]
 8002264:	230a      	movs	r3, #10
 8002266:	9300      	str	r3, [sp, #0]
 8002268:	230a      	movs	r3, #10
 800226a:	4a2d      	ldr	r2, [pc, #180]	@ (8002320 <GameTick+0xff4>)
 800226c:	f7fe fd9e 	bl	8000dac <GFX_DrowBitMap_P>
							explosion_map, 10, 10, 1);

					//Dodanie bonusa w miejscu zestrzelenia
					if ((rand() % 100) < BONUS_FREQUENCY)
 8002270:	f005 fe7a 	bl	8007f68 <rand>
 8002274:	4602      	mov	r2, r0
 8002276:	4b2b      	ldr	r3, [pc, #172]	@ (8002324 <GameTick+0xff8>)
 8002278:	fb83 1302 	smull	r1, r3, r3, r2
 800227c:	1159      	asrs	r1, r3, #5
 800227e:	17d3      	asrs	r3, r2, #31
 8002280:	1acb      	subs	r3, r1, r3
 8002282:	2164      	movs	r1, #100	@ 0x64
 8002284:	fb01 f303 	mul.w	r3, r1, r3
 8002288:	1ad3      	subs	r3, r2, r3
 800228a:	2b0e      	cmp	r3, #14
 800228c:	dc18      	bgt.n	80022c0 <GameTick+0xf94>
						GameAddBonus(g, g->enemies[j].x, g->enemies[j].y);//add_bonus(g->enemies[j].x, g->enemies[j].y);
 800228e:	7dba      	ldrb	r2, [r7, #22]
 8002290:	6879      	ldr	r1, [r7, #4]
 8002292:	4613      	mov	r3, r2
 8002294:	00db      	lsls	r3, r3, #3
 8002296:	4413      	add	r3, r2
 8002298:	009b      	lsls	r3, r3, #2
 800229a:	440b      	add	r3, r1
 800229c:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 80022a0:	6818      	ldr	r0, [r3, #0]
 80022a2:	7dba      	ldrb	r2, [r7, #22]
 80022a4:	6879      	ldr	r1, [r7, #4]
 80022a6:	4613      	mov	r3, r2
 80022a8:	00db      	lsls	r3, r3, #3
 80022aa:	4413      	add	r3, r2
 80022ac:	009b      	lsls	r3, r3, #2
 80022ae:	440b      	add	r3, r1
 80022b0:	f503 7321 	add.w	r3, r3, #644	@ 0x284
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	461a      	mov	r2, r3
 80022b8:	4601      	mov	r1, r0
 80022ba:	6878      	ldr	r0, [r7, #4]
 80022bc:	f000 fc3c 	bl	8002b38 <GameAddBonus>
		for (j = 0; j < NUMBER_ENEMIES; ++j) {
 80022c0:	7dbb      	ldrb	r3, [r7, #22]
 80022c2:	3301      	adds	r3, #1
 80022c4:	75bb      	strb	r3, [r7, #22]
 80022c6:	7dbb      	ldrb	r3, [r7, #22]
 80022c8:	2b09      	cmp	r3, #9
 80022ca:	f67f af3f 	bls.w	800214c <GameTick+0xe20>
	for (i = 0; i < NUMBER_SHOTS; ++i) {
 80022ce:	7dfb      	ldrb	r3, [r7, #23]
 80022d0:	3301      	adds	r3, #1
 80022d2:	75fb      	strb	r3, [r7, #23]
 80022d4:	7dfb      	ldrb	r3, [r7, #23]
 80022d6:	2b18      	cmp	r3, #24
 80022d8:	f67f af2d 	bls.w	8002136 <GameTick+0xe0a>
				}
			}
		}
	}
	if ((rand() % 100) < (g->player.level * 2) && !(g->boss.active)) //Frequency of adding opponents according to level
 80022dc:	f005 fe44 	bl	8007f68 <rand>
 80022e0:	4602      	mov	r2, r0
 80022e2:	4b10      	ldr	r3, [pc, #64]	@ (8002324 <GameTick+0xff8>)
 80022e4:	fb83 1302 	smull	r1, r3, r3, r2
 80022e8:	1159      	asrs	r1, r3, #5
 80022ea:	17d3      	asrs	r3, r2, #31
 80022ec:	1acb      	subs	r3, r1, r3
 80022ee:	2164      	movs	r1, #100	@ 0x64
 80022f0:	fb01 f303 	mul.w	r3, r1, r3
 80022f4:	1ad3      	subs	r3, r2, r3
 80022f6:	687a      	ldr	r2, [r7, #4]
 80022f8:	6952      	ldr	r2, [r2, #20]
 80022fa:	0052      	lsls	r2, r2, #1
 80022fc:	4293      	cmp	r3, r2
 80022fe:	da0a      	bge.n	8002316 <GameTick+0xfea>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	f893 3a24 	ldrb.w	r3, [r3, #2596]	@ 0xa24
 8002306:	f083 0301 	eor.w	r3, r3, #1
 800230a:	b2db      	uxtb	r3, r3
 800230c:	2b00      	cmp	r3, #0
 800230e:	d002      	beq.n	8002316 <GameTick+0xfea>
		GameAddEnemy(g);//add_enemy();
 8002310:	6878      	ldr	r0, [r7, #4]
 8002312:	f000 ff97 	bl	8003244 <GameAddEnemy>
}
 8002316:	bf00      	nop
 8002318:	3718      	adds	r7, #24
 800231a:	46bd      	mov	sp, r7
 800231c:	bdb0      	pop	{r4, r5, r7, pc}
 800231e:	bf00      	nop
 8002320:	0800a550 	.word	0x0800a550
 8002324:	51eb851f 	.word	0x51eb851f

08002328 <GameDraw>:

void GameDraw(GameCtx *g, InputSnapshot* in) {
 8002328:	b5b0      	push	{r4, r5, r7, lr}
 800232a:	b086      	sub	sp, #24
 800232c:	af02      	add	r7, sp, #8
 800232e:	6078      	str	r0, [r7, #4]
 8002330:	6039      	str	r1, [r7, #0]
	 * Drawing all game graphics
	 */
	uint8_t i;

	//Drowing the game information
	GFX_PutInt(5, 0, g->player.score, 1, 1, 0);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	689a      	ldr	r2, [r3, #8]
 8002336:	2300      	movs	r3, #0
 8002338:	9301      	str	r3, [sp, #4]
 800233a:	2301      	movs	r3, #1
 800233c:	9300      	str	r3, [sp, #0]
 800233e:	2301      	movs	r3, #1
 8002340:	2100      	movs	r1, #0
 8002342:	2005      	movs	r0, #5
 8002344:	f7fe fec4 	bl	80010d0 <GFX_PutInt>
	GFX_DrowBitMap_P(102, 0, lives_map, 8, 6, 1);
 8002348:	2301      	movs	r3, #1
 800234a:	9301      	str	r3, [sp, #4]
 800234c:	2306      	movs	r3, #6
 800234e:	9300      	str	r3, [sp, #0]
 8002350:	2308      	movs	r3, #8
 8002352:	4aa2      	ldr	r2, [pc, #648]	@ (80025dc <GameDraw+0x2b4>)
 8002354:	2100      	movs	r1, #0
 8002356:	2066      	movs	r0, #102	@ 0x66
 8002358:	f7fe fd28 	bl	8000dac <GFX_DrowBitMap_P>
	GFX_PutInt(114, 0, g->player.lives, 1, 1, 0);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	691a      	ldr	r2, [r3, #16]
 8002360:	2300      	movs	r3, #0
 8002362:	9301      	str	r3, [sp, #4]
 8002364:	2301      	movs	r3, #1
 8002366:	9300      	str	r3, [sp, #0]
 8002368:	2301      	movs	r3, #1
 800236a:	2100      	movs	r1, #0
 800236c:	2072      	movs	r0, #114	@ 0x72
 800236e:	f7fe feaf 	bl	80010d0 <GFX_PutInt>
	GFX_DrowBitMap_P(50, 0, Level_map, 20, 7, 1);
 8002372:	2301      	movs	r3, #1
 8002374:	9301      	str	r3, [sp, #4]
 8002376:	2307      	movs	r3, #7
 8002378:	9300      	str	r3, [sp, #0]
 800237a:	2314      	movs	r3, #20
 800237c:	4a98      	ldr	r2, [pc, #608]	@ (80025e0 <GameDraw+0x2b8>)
 800237e:	2100      	movs	r1, #0
 8002380:	2032      	movs	r0, #50	@ 0x32
 8002382:	f7fe fd13 	bl	8000dac <GFX_DrowBitMap_P>
	GFX_PutInt(80, 0, g->player.level, 1, 1, 0);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	695a      	ldr	r2, [r3, #20]
 800238a:	2300      	movs	r3, #0
 800238c:	9301      	str	r3, [sp, #4]
 800238e:	2301      	movs	r3, #1
 8002390:	9300      	str	r3, [sp, #0]
 8002392:	2301      	movs	r3, #1
 8002394:	2100      	movs	r1, #0
 8002396:	2050      	movs	r0, #80	@ 0x50
 8002398:	f7fe fe9a 	bl	80010d0 <GFX_PutInt>

	//Drawing graphics of a player's shot
	for (i = 0; i < NUMBER_SHOTS; i++) {
 800239c:	2300      	movs	r3, #0
 800239e:	73fb      	strb	r3, [r7, #15]
 80023a0:	e027      	b.n	80023f2 <GameDraw+0xca>
		if (g->shots[i].active) {
 80023a2:	7bfa      	ldrb	r2, [r7, #15]
 80023a4:	6879      	ldr	r1, [r7, #4]
 80023a6:	4613      	mov	r3, r2
 80023a8:	009b      	lsls	r3, r3, #2
 80023aa:	4413      	add	r3, r2
 80023ac:	009b      	lsls	r3, r3, #2
 80023ae:	440b      	add	r3, r1
 80023b0:	3324      	adds	r3, #36	@ 0x24
 80023b2:	781b      	ldrb	r3, [r3, #0]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d019      	beq.n	80023ec <GameDraw+0xc4>
			GFX_DrowBitMap_P(g->shots[i].x, g->shots[i].y, player_shot_map, 4, 1, 1);
 80023b8:	7bfa      	ldrb	r2, [r7, #15]
 80023ba:	6879      	ldr	r1, [r7, #4]
 80023bc:	4613      	mov	r3, r2
 80023be:	009b      	lsls	r3, r3, #2
 80023c0:	4413      	add	r3, r2
 80023c2:	009b      	lsls	r3, r3, #2
 80023c4:	440b      	add	r3, r1
 80023c6:	3328      	adds	r3, #40	@ 0x28
 80023c8:	6818      	ldr	r0, [r3, #0]
 80023ca:	7bfa      	ldrb	r2, [r7, #15]
 80023cc:	6879      	ldr	r1, [r7, #4]
 80023ce:	4613      	mov	r3, r2
 80023d0:	009b      	lsls	r3, r3, #2
 80023d2:	4413      	add	r3, r2
 80023d4:	009b      	lsls	r3, r3, #2
 80023d6:	440b      	add	r3, r1
 80023d8:	332c      	adds	r3, #44	@ 0x2c
 80023da:	6819      	ldr	r1, [r3, #0]
 80023dc:	2301      	movs	r3, #1
 80023de:	9301      	str	r3, [sp, #4]
 80023e0:	2301      	movs	r3, #1
 80023e2:	9300      	str	r3, [sp, #0]
 80023e4:	2304      	movs	r3, #4
 80023e6:	4a7f      	ldr	r2, [pc, #508]	@ (80025e4 <GameDraw+0x2bc>)
 80023e8:	f7fe fce0 	bl	8000dac <GFX_DrowBitMap_P>
	for (i = 0; i < NUMBER_SHOTS; i++) {
 80023ec:	7bfb      	ldrb	r3, [r7, #15]
 80023ee:	3301      	adds	r3, #1
 80023f0:	73fb      	strb	r3, [r7, #15]
 80023f2:	7bfb      	ldrb	r3, [r7, #15]
 80023f4:	2b18      	cmp	r3, #24
 80023f6:	d9d4      	bls.n	80023a2 <GameDraw+0x7a>
		}
	}

	//Drawing graphics of a boss shot
	if (g->boss.active) {
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	f893 3a24 	ldrb.w	r3, [r3, #2596]	@ 0xa24
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d030      	beq.n	8002464 <GameDraw+0x13c>
		for (i = 0; i < NUMBER_BOSS_SHOTS; i++) {
 8002402:	2300      	movs	r3, #0
 8002404:	73fb      	strb	r3, [r7, #15]
 8002406:	e02a      	b.n	800245e <GameDraw+0x136>
			if (g->bossShots[i].active) {
 8002408:	7bfa      	ldrb	r2, [r7, #15]
 800240a:	6879      	ldr	r1, [r7, #4]
 800240c:	4613      	mov	r3, r2
 800240e:	009b      	lsls	r3, r3, #2
 8002410:	4413      	add	r3, r2
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	440b      	add	r3, r1
 8002416:	f503 7306 	add.w	r3, r3, #536	@ 0x218
 800241a:	781b      	ldrb	r3, [r3, #0]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d01b      	beq.n	8002458 <GameDraw+0x130>
				GFX_DrowBitMap_P(g->bossShots[i].x, g->bossShots[i].y,
 8002420:	7bfa      	ldrb	r2, [r7, #15]
 8002422:	6879      	ldr	r1, [r7, #4]
 8002424:	4613      	mov	r3, r2
 8002426:	009b      	lsls	r3, r3, #2
 8002428:	4413      	add	r3, r2
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	440b      	add	r3, r1
 800242e:	f503 7307 	add.w	r3, r3, #540	@ 0x21c
 8002432:	6818      	ldr	r0, [r3, #0]
 8002434:	7bfa      	ldrb	r2, [r7, #15]
 8002436:	6879      	ldr	r1, [r7, #4]
 8002438:	4613      	mov	r3, r2
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	4413      	add	r3, r2
 800243e:	009b      	lsls	r3, r3, #2
 8002440:	440b      	add	r3, r1
 8002442:	f503 7308 	add.w	r3, r3, #544	@ 0x220
 8002446:	6819      	ldr	r1, [r3, #0]
 8002448:	2301      	movs	r3, #1
 800244a:	9301      	str	r3, [sp, #4]
 800244c:	2301      	movs	r3, #1
 800244e:	9300      	str	r3, [sp, #0]
 8002450:	2304      	movs	r3, #4
 8002452:	4a64      	ldr	r2, [pc, #400]	@ (80025e4 <GameDraw+0x2bc>)
 8002454:	f7fe fcaa 	bl	8000dac <GFX_DrowBitMap_P>
		for (i = 0; i < NUMBER_BOSS_SHOTS; i++) {
 8002458:	7bfb      	ldrb	r3, [r7, #15]
 800245a:	3301      	adds	r3, #1
 800245c:	73fb      	strb	r3, [r7, #15]
 800245e:	7bfb      	ldrb	r3, [r7, #15]
 8002460:	2b04      	cmp	r3, #4
 8002462:	d9d1      	bls.n	8002408 <GameDraw+0xe0>
			}
		}
	}

	//Drawing graphics of enemies
	for (i = 0; i < NUMBER_ENEMIES; i++) {
 8002464:	2300      	movs	r3, #0
 8002466:	73fb      	strb	r3, [r7, #15]
 8002468:	e0a5      	b.n	80025b6 <GameDraw+0x28e>
		if (g->enemies[i].active) {
 800246a:	7bfa      	ldrb	r2, [r7, #15]
 800246c:	6879      	ldr	r1, [r7, #4]
 800246e:	4613      	mov	r3, r2
 8002470:	00db      	lsls	r3, r3, #3
 8002472:	4413      	add	r3, r2
 8002474:	009b      	lsls	r3, r3, #2
 8002476:	440b      	add	r3, r1
 8002478:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 800247c:	781b      	ldrb	r3, [r3, #0]
 800247e:	2b00      	cmp	r3, #0
 8002480:	f000 8096 	beq.w	80025b0 <GameDraw+0x288>
			if (g->enemies[i].type == ET_Tracker)
 8002484:	7bfa      	ldrb	r2, [r7, #15]
 8002486:	6879      	ldr	r1, [r7, #4]
 8002488:	4613      	mov	r3, r2
 800248a:	00db      	lsls	r3, r3, #3
 800248c:	4413      	add	r3, r2
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	440b      	add	r3, r1
 8002492:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 8002496:	781b      	ldrb	r3, [r3, #0]
 8002498:	2b01      	cmp	r3, #1
 800249a:	d125      	bne.n	80024e8 <GameDraw+0x1c0>
				GFX_DrowBitMap_P(g->enemies[i].x, g->enemies[i].y, g->enemies[i].bitMap,
 800249c:	7bfa      	ldrb	r2, [r7, #15]
 800249e:	6879      	ldr	r1, [r7, #4]
 80024a0:	4613      	mov	r3, r2
 80024a2:	00db      	lsls	r3, r3, #3
 80024a4:	4413      	add	r3, r2
 80024a6:	009b      	lsls	r3, r3, #2
 80024a8:	440b      	add	r3, r1
 80024aa:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 80024ae:	6818      	ldr	r0, [r3, #0]
 80024b0:	7bfa      	ldrb	r2, [r7, #15]
 80024b2:	6879      	ldr	r1, [r7, #4]
 80024b4:	4613      	mov	r3, r2
 80024b6:	00db      	lsls	r3, r3, #3
 80024b8:	4413      	add	r3, r2
 80024ba:	009b      	lsls	r3, r3, #2
 80024bc:	440b      	add	r3, r1
 80024be:	f503 7321 	add.w	r3, r3, #644	@ 0x284
 80024c2:	681c      	ldr	r4, [r3, #0]
 80024c4:	7bfa      	ldrb	r2, [r7, #15]
 80024c6:	6879      	ldr	r1, [r7, #4]
 80024c8:	4613      	mov	r3, r2
 80024ca:	00db      	lsls	r3, r3, #3
 80024cc:	4413      	add	r3, r2
 80024ce:	009b      	lsls	r3, r3, #2
 80024d0:	440b      	add	r3, r1
 80024d2:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 80024d6:	681a      	ldr	r2, [r3, #0]
 80024d8:	2301      	movs	r3, #1
 80024da:	9301      	str	r3, [sp, #4]
 80024dc:	2305      	movs	r3, #5
 80024de:	9300      	str	r3, [sp, #0]
 80024e0:	2305      	movs	r3, #5
 80024e2:	4621      	mov	r1, r4
 80024e4:	f7fe fc62 	bl	8000dac <GFX_DrowBitMap_P>
						5, 5, 1);
			if (g->enemies[i].type == ET_Diver)
 80024e8:	7bfa      	ldrb	r2, [r7, #15]
 80024ea:	6879      	ldr	r1, [r7, #4]
 80024ec:	4613      	mov	r3, r2
 80024ee:	00db      	lsls	r3, r3, #3
 80024f0:	4413      	add	r3, r2
 80024f2:	009b      	lsls	r3, r3, #2
 80024f4:	440b      	add	r3, r1
 80024f6:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 80024fa:	781b      	ldrb	r3, [r3, #0]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d125      	bne.n	800254c <GameDraw+0x224>
				GFX_DrowBitMap_P(g->enemies[i].x, g->enemies[i].y, g->enemies[i].bitMap,
 8002500:	7bfa      	ldrb	r2, [r7, #15]
 8002502:	6879      	ldr	r1, [r7, #4]
 8002504:	4613      	mov	r3, r2
 8002506:	00db      	lsls	r3, r3, #3
 8002508:	4413      	add	r3, r2
 800250a:	009b      	lsls	r3, r3, #2
 800250c:	440b      	add	r3, r1
 800250e:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8002512:	6818      	ldr	r0, [r3, #0]
 8002514:	7bfa      	ldrb	r2, [r7, #15]
 8002516:	6879      	ldr	r1, [r7, #4]
 8002518:	4613      	mov	r3, r2
 800251a:	00db      	lsls	r3, r3, #3
 800251c:	4413      	add	r3, r2
 800251e:	009b      	lsls	r3, r3, #2
 8002520:	440b      	add	r3, r1
 8002522:	f503 7321 	add.w	r3, r3, #644	@ 0x284
 8002526:	681c      	ldr	r4, [r3, #0]
 8002528:	7bfa      	ldrb	r2, [r7, #15]
 800252a:	6879      	ldr	r1, [r7, #4]
 800252c:	4613      	mov	r3, r2
 800252e:	00db      	lsls	r3, r3, #3
 8002530:	4413      	add	r3, r2
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	440b      	add	r3, r1
 8002536:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	2301      	movs	r3, #1
 800253e:	9301      	str	r3, [sp, #4]
 8002540:	2307      	movs	r3, #7
 8002542:	9300      	str	r3, [sp, #0]
 8002544:	2303      	movs	r3, #3
 8002546:	4621      	mov	r1, r4
 8002548:	f7fe fc30 	bl	8000dac <GFX_DrowBitMap_P>
						3, 7, 1);
			if (g->enemies[i].type == ET_Bobber)
 800254c:	7bfa      	ldrb	r2, [r7, #15]
 800254e:	6879      	ldr	r1, [r7, #4]
 8002550:	4613      	mov	r3, r2
 8002552:	00db      	lsls	r3, r3, #3
 8002554:	4413      	add	r3, r2
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	440b      	add	r3, r1
 800255a:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 800255e:	781b      	ldrb	r3, [r3, #0]
 8002560:	2b02      	cmp	r3, #2
 8002562:	d125      	bne.n	80025b0 <GameDraw+0x288>
				GFX_DrowBitMap_P(g->enemies[i].x, g->enemies[i].y, g->enemies[i].bitMap,
 8002564:	7bfa      	ldrb	r2, [r7, #15]
 8002566:	6879      	ldr	r1, [r7, #4]
 8002568:	4613      	mov	r3, r2
 800256a:	00db      	lsls	r3, r3, #3
 800256c:	4413      	add	r3, r2
 800256e:	009b      	lsls	r3, r3, #2
 8002570:	440b      	add	r3, r1
 8002572:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8002576:	6818      	ldr	r0, [r3, #0]
 8002578:	7bfa      	ldrb	r2, [r7, #15]
 800257a:	6879      	ldr	r1, [r7, #4]
 800257c:	4613      	mov	r3, r2
 800257e:	00db      	lsls	r3, r3, #3
 8002580:	4413      	add	r3, r2
 8002582:	009b      	lsls	r3, r3, #2
 8002584:	440b      	add	r3, r1
 8002586:	f503 7321 	add.w	r3, r3, #644	@ 0x284
 800258a:	681c      	ldr	r4, [r3, #0]
 800258c:	7bfa      	ldrb	r2, [r7, #15]
 800258e:	6879      	ldr	r1, [r7, #4]
 8002590:	4613      	mov	r3, r2
 8002592:	00db      	lsls	r3, r3, #3
 8002594:	4413      	add	r3, r2
 8002596:	009b      	lsls	r3, r3, #2
 8002598:	440b      	add	r3, r1
 800259a:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 800259e:	681a      	ldr	r2, [r3, #0]
 80025a0:	2301      	movs	r3, #1
 80025a2:	9301      	str	r3, [sp, #4]
 80025a4:	2305      	movs	r3, #5
 80025a6:	9300      	str	r3, [sp, #0]
 80025a8:	2305      	movs	r3, #5
 80025aa:	4621      	mov	r1, r4
 80025ac:	f7fe fbfe 	bl	8000dac <GFX_DrowBitMap_P>
	for (i = 0; i < NUMBER_ENEMIES; i++) {
 80025b0:	7bfb      	ldrb	r3, [r7, #15]
 80025b2:	3301      	adds	r3, #1
 80025b4:	73fb      	strb	r3, [r7, #15]
 80025b6:	7bfb      	ldrb	r3, [r7, #15]
 80025b8:	2b09      	cmp	r3, #9
 80025ba:	f67f af56 	bls.w	800246a <GameDraw+0x142>
						5, 5, 1);
		}
	}

	//Drawing the player's graphics
	GFX_DrowBitMap_P(g->player.x, g->player.y, player_map, 11, 11, 1);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6818      	ldr	r0, [r3, #0]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6859      	ldr	r1, [r3, #4]
 80025c6:	2301      	movs	r3, #1
 80025c8:	9301      	str	r3, [sp, #4]
 80025ca:	230b      	movs	r3, #11
 80025cc:	9300      	str	r3, [sp, #0]
 80025ce:	230b      	movs	r3, #11
 80025d0:	4a05      	ldr	r2, [pc, #20]	@ (80025e8 <GameDraw+0x2c0>)
 80025d2:	f7fe fbeb 	bl	8000dac <GFX_DrowBitMap_P>

	//Drawing a background
	for (i = 0; i < NUMBER_BACKGROUND; i++) {
 80025d6:	2300      	movs	r3, #0
 80025d8:	73fb      	strb	r3, [r7, #15]
 80025da:	e03e      	b.n	800265a <GameDraw+0x332>
 80025dc:	0800a380 	.word	0x0800a380
 80025e0:	0800a368 	.word	0x0800a368
 80025e4:	0800a34c 	.word	0x0800a34c
 80025e8:	0800a350 	.word	0x0800a350
		if (g->background[i].active) {
 80025ec:	7bfa      	ldrb	r2, [r7, #15]
 80025ee:	6879      	ldr	r1, [r7, #4]
 80025f0:	4613      	mov	r3, r2
 80025f2:	009b      	lsls	r3, r3, #2
 80025f4:	4413      	add	r3, r2
 80025f6:	009b      	lsls	r3, r3, #2
 80025f8:	440b      	add	r3, r1
 80025fa:	f503 7379 	add.w	r3, r3, #996	@ 0x3e4
 80025fe:	781b      	ldrb	r3, [r3, #0]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d027      	beq.n	8002654 <GameDraw+0x32c>
			SSD1327_SetPixel(g->background[i].x, g->background[i].y, (rand() % 15));
 8002604:	7bfa      	ldrb	r2, [r7, #15]
 8002606:	6879      	ldr	r1, [r7, #4]
 8002608:	4613      	mov	r3, r2
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	4413      	add	r3, r2
 800260e:	009b      	lsls	r3, r3, #2
 8002610:	440b      	add	r3, r1
 8002612:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8002616:	681c      	ldr	r4, [r3, #0]
 8002618:	7bfa      	ldrb	r2, [r7, #15]
 800261a:	6879      	ldr	r1, [r7, #4]
 800261c:	4613      	mov	r3, r2
 800261e:	009b      	lsls	r3, r3, #2
 8002620:	4413      	add	r3, r2
 8002622:	009b      	lsls	r3, r3, #2
 8002624:	440b      	add	r3, r1
 8002626:	f503 737b 	add.w	r3, r3, #1004	@ 0x3ec
 800262a:	681d      	ldr	r5, [r3, #0]
 800262c:	f005 fc9c 	bl	8007f68 <rand>
 8002630:	4602      	mov	r2, r0
 8002632:	4b54      	ldr	r3, [pc, #336]	@ (8002784 <GameDraw+0x45c>)
 8002634:	fb83 1302 	smull	r1, r3, r3, r2
 8002638:	4413      	add	r3, r2
 800263a:	10d9      	asrs	r1, r3, #3
 800263c:	17d3      	asrs	r3, r2, #31
 800263e:	1ac9      	subs	r1, r1, r3
 8002640:	460b      	mov	r3, r1
 8002642:	011b      	lsls	r3, r3, #4
 8002644:	1a5b      	subs	r3, r3, r1
 8002646:	1ad1      	subs	r1, r2, r3
 8002648:	b2cb      	uxtb	r3, r1
 800264a:	461a      	mov	r2, r3
 800264c:	4629      	mov	r1, r5
 800264e:	4620      	mov	r0, r4
 8002650:	f001 fc10 	bl	8003e74 <SSD1327_SetPixel>
	for (i = 0; i < NUMBER_BACKGROUND; i++) {
 8002654:	7bfb      	ldrb	r3, [r7, #15]
 8002656:	3301      	adds	r3, #1
 8002658:	73fb      	strb	r3, [r7, #15]
 800265a:	7bfb      	ldrb	r3, [r7, #15]
 800265c:	2b4f      	cmp	r3, #79	@ 0x4f
 800265e:	d9c5      	bls.n	80025ec <GameDraw+0x2c4>
		}
	}

	//Drawing Boss
	if (g->boss.active && g->player.gameProgres == 30)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	f893 3a24 	ldrb.w	r3, [r3, #2596]	@ 0xa24
 8002666:	2b00      	cmp	r3, #0
 8002668:	d011      	beq.n	800268e <GameDraw+0x366>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	699b      	ldr	r3, [r3, #24]
 800266e:	2b1e      	cmp	r3, #30
 8002670:	d10d      	bne.n	800268e <GameDraw+0x366>
		GFX_DrowBitMap_P(g->boss.x, g->boss.y, boss_map_1, 10, 18, 1);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	f8d3 0a28 	ldr.w	r0, [r3, #2600]	@ 0xa28
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	f8d3 1a2c 	ldr.w	r1, [r3, #2604]	@ 0xa2c
 800267e:	2301      	movs	r3, #1
 8002680:	9301      	str	r3, [sp, #4]
 8002682:	2312      	movs	r3, #18
 8002684:	9300      	str	r3, [sp, #0]
 8002686:	230a      	movs	r3, #10
 8002688:	4a3f      	ldr	r2, [pc, #252]	@ (8002788 <GameDraw+0x460>)
 800268a:	f7fe fb8f 	bl	8000dac <GFX_DrowBitMap_P>
	if (g->boss.active && g->player.gameProgres == 60)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	f893 3a24 	ldrb.w	r3, [r3, #2596]	@ 0xa24
 8002694:	2b00      	cmp	r3, #0
 8002696:	d011      	beq.n	80026bc <GameDraw+0x394>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	699b      	ldr	r3, [r3, #24]
 800269c:	2b3c      	cmp	r3, #60	@ 0x3c
 800269e:	d10d      	bne.n	80026bc <GameDraw+0x394>
		GFX_DrowBitMap_P(g->boss.x, g->boss.y, boss_map_2, 10, 18, 1);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	f8d3 0a28 	ldr.w	r0, [r3, #2600]	@ 0xa28
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	f8d3 1a2c 	ldr.w	r1, [r3, #2604]	@ 0xa2c
 80026ac:	2301      	movs	r3, #1
 80026ae:	9301      	str	r3, [sp, #4]
 80026b0:	2312      	movs	r3, #18
 80026b2:	9300      	str	r3, [sp, #0]
 80026b4:	230a      	movs	r3, #10
 80026b6:	4a35      	ldr	r2, [pc, #212]	@ (800278c <GameDraw+0x464>)
 80026b8:	f7fe fb78 	bl	8000dac <GFX_DrowBitMap_P>

	//Drawing bonuses
	for (i = 0; i < NUMBER_BONUS; i++) {
 80026bc:	2300      	movs	r3, #0
 80026be:	73fb      	strb	r3, [r7, #15]
 80026c0:	e057      	b.n	8002772 <GameDraw+0x44a>
		if (g->bonuses[i].active) {
 80026c2:	7bfa      	ldrb	r2, [r7, #15]
 80026c4:	6879      	ldr	r1, [r7, #4]
 80026c6:	4613      	mov	r3, r2
 80026c8:	00db      	lsls	r3, r3, #3
 80026ca:	1a9b      	subs	r3, r3, r2
 80026cc:	009b      	lsls	r3, r3, #2
 80026ce:	440b      	add	r3, r1
 80026d0:	f503 6324 	add.w	r3, r3, #2624	@ 0xa40
 80026d4:	781b      	ldrb	r3, [r3, #0]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d048      	beq.n	800276c <GameDraw+0x444>
			switch (g->bonuses[i].type) {
 80026da:	7bfa      	ldrb	r2, [r7, #15]
 80026dc:	6879      	ldr	r1, [r7, #4]
 80026de:	4613      	mov	r3, r2
 80026e0:	00db      	lsls	r3, r3, #3
 80026e2:	1a9b      	subs	r3, r3, r2
 80026e4:	009b      	lsls	r3, r3, #2
 80026e6:	440b      	add	r3, r1
 80026e8:	f603 234c 	addw	r3, r3, #2636	@ 0xa4c
 80026ec:	781b      	ldrb	r3, [r3, #0]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d002      	beq.n	80026f8 <GameDraw+0x3d0>
 80026f2:	2b01      	cmp	r3, #1
 80026f4:	d01d      	beq.n	8002732 <GameDraw+0x40a>
 80026f6:	e039      	b.n	800276c <GameDraw+0x444>
			case BT_Live:
				GFX_DrowBitMap_P(g->bonuses[i].x, g->bonuses[i].y, bonus_live_map, 7,
 80026f8:	7bfa      	ldrb	r2, [r7, #15]
 80026fa:	6879      	ldr	r1, [r7, #4]
 80026fc:	4613      	mov	r3, r2
 80026fe:	00db      	lsls	r3, r3, #3
 8002700:	1a9b      	subs	r3, r3, r2
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	440b      	add	r3, r1
 8002706:	f603 2344 	addw	r3, r3, #2628	@ 0xa44
 800270a:	6818      	ldr	r0, [r3, #0]
 800270c:	7bfa      	ldrb	r2, [r7, #15]
 800270e:	6879      	ldr	r1, [r7, #4]
 8002710:	4613      	mov	r3, r2
 8002712:	00db      	lsls	r3, r3, #3
 8002714:	1a9b      	subs	r3, r3, r2
 8002716:	009b      	lsls	r3, r3, #2
 8002718:	440b      	add	r3, r1
 800271a:	f603 2348 	addw	r3, r3, #2632	@ 0xa48
 800271e:	6819      	ldr	r1, [r3, #0]
 8002720:	2301      	movs	r3, #1
 8002722:	9301      	str	r3, [sp, #4]
 8002724:	2307      	movs	r3, #7
 8002726:	9300      	str	r3, [sp, #0]
 8002728:	2307      	movs	r3, #7
 800272a:	4a19      	ldr	r2, [pc, #100]	@ (8002790 <GameDraw+0x468>)
 800272c:	f7fe fb3e 	bl	8000dac <GFX_DrowBitMap_P>
						7, 1);
				break;
 8002730:	e01c      	b.n	800276c <GameDraw+0x444>
			case BT_TrackerShot:
				GFX_DrowBitMap_P(g->bonuses[i].x, g->bonuses[i].y,
 8002732:	7bfa      	ldrb	r2, [r7, #15]
 8002734:	6879      	ldr	r1, [r7, #4]
 8002736:	4613      	mov	r3, r2
 8002738:	00db      	lsls	r3, r3, #3
 800273a:	1a9b      	subs	r3, r3, r2
 800273c:	009b      	lsls	r3, r3, #2
 800273e:	440b      	add	r3, r1
 8002740:	f603 2344 	addw	r3, r3, #2628	@ 0xa44
 8002744:	6818      	ldr	r0, [r3, #0]
 8002746:	7bfa      	ldrb	r2, [r7, #15]
 8002748:	6879      	ldr	r1, [r7, #4]
 800274a:	4613      	mov	r3, r2
 800274c:	00db      	lsls	r3, r3, #3
 800274e:	1a9b      	subs	r3, r3, r2
 8002750:	009b      	lsls	r3, r3, #2
 8002752:	440b      	add	r3, r1
 8002754:	f603 2348 	addw	r3, r3, #2632	@ 0xa48
 8002758:	6819      	ldr	r1, [r3, #0]
 800275a:	2301      	movs	r3, #1
 800275c:	9301      	str	r3, [sp, #4]
 800275e:	2307      	movs	r3, #7
 8002760:	9300      	str	r3, [sp, #0]
 8002762:	2307      	movs	r3, #7
 8002764:	4a0b      	ldr	r2, [pc, #44]	@ (8002794 <GameDraw+0x46c>)
 8002766:	f7fe fb21 	bl	8000dac <GFX_DrowBitMap_P>
						bonus_tracker_shoot_map, 7, 7, 1);
				break;
 800276a:	bf00      	nop
	for (i = 0; i < NUMBER_BONUS; i++) {
 800276c:	7bfb      	ldrb	r3, [r7, #15]
 800276e:	3301      	adds	r3, #1
 8002770:	73fb      	strb	r3, [r7, #15]
 8002772:	7bfb      	ldrb	r3, [r7, #15]
 8002774:	2b02      	cmp	r3, #2
 8002776:	d9a4      	bls.n	80026c2 <GameDraw+0x39a>
			}
		}
	}

}
 8002778:	bf00      	nop
 800277a:	bf00      	nop
 800277c:	3710      	adds	r7, #16
 800277e:	46bd      	mov	sp, r7
 8002780:	bdb0      	pop	{r4, r5, r7, pc}
 8002782:	bf00      	nop
 8002784:	88888889 	.word	0x88888889
 8002788:	0800a564 	.word	0x0800a564
 800278c:	0800a588 	.word	0x0800a588
 8002790:	0800a5ac 	.word	0x0800a5ac
 8002794:	0800a5b4 	.word	0x0800a5b4

08002798 <GameLevelUpdate>:

void GameLevelUpdate(GameCtx* g) {
 8002798:	b480      	push	{r7}
 800279a:	b083      	sub	sp, #12
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
		 * their initial parameters and adjusts the level of play to its progress.
		 */
		static uint8_t i = 0;

		//Calculation of game progress
		if(i > 70)
 80027a0:	4b5d      	ldr	r3, [pc, #372]	@ (8002918 <GameLevelUpdate+0x180>)
 80027a2:	781b      	ldrb	r3, [r3, #0]
 80027a4:	2b46      	cmp	r3, #70	@ 0x46
 80027a6:	d907      	bls.n	80027b8 <GameLevelUpdate+0x20>
		{
			g->player.gameProgres += 1;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	699b      	ldr	r3, [r3, #24]
 80027ac:	1c5a      	adds	r2, r3, #1
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	619a      	str	r2, [r3, #24]
			i = 0;
 80027b2:	4b59      	ldr	r3, [pc, #356]	@ (8002918 <GameLevelUpdate+0x180>)
 80027b4:	2200      	movs	r2, #0
 80027b6:	701a      	strb	r2, [r3, #0]
		}

		//If the boss is not active count the progress
		if(!g->boss.active) i++;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	f893 3a24 	ldrb.w	r3, [r3, #2596]	@ 0xa24
 80027be:	f083 0301 	eor.w	r3, r3, #1
 80027c2:	b2db      	uxtb	r3, r3
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d005      	beq.n	80027d4 <GameLevelUpdate+0x3c>
 80027c8:	4b53      	ldr	r3, [pc, #332]	@ (8002918 <GameLevelUpdate+0x180>)
 80027ca:	781b      	ldrb	r3, [r3, #0]
 80027cc:	3301      	adds	r3, #1
 80027ce:	b2da      	uxtb	r2, r3
 80027d0:	4b51      	ldr	r3, [pc, #324]	@ (8002918 <GameLevelUpdate+0x180>)
 80027d2:	701a      	strb	r2, [r3, #0]

		//---- Moments of boss appearance -----
		if(g->player.gameProgres == 29)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	699b      	ldr	r3, [r3, #24]
 80027d8:	2b1d      	cmp	r3, #29
 80027da:	d114      	bne.n	8002806 <GameLevelUpdate+0x6e>
		{
			g->boss.active = true;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2201      	movs	r2, #1
 80027e0:	f883 2a24 	strb.w	r2, [r3, #2596]	@ 0xa24
			g->boss.lives = 3;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2203      	movs	r2, #3
 80027e8:	f8c3 2a38 	str.w	r2, [r3, #2616]	@ 0xa38
			g->boss.level = 3;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2203      	movs	r2, #3
 80027f0:	f8c3 2a3c 	str.w	r2, [r3, #2620]	@ 0xa3c
			g->boss.updateDelay = 4;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2204      	movs	r2, #4
 80027f8:	f8c3 2a34 	str.w	r2, [r3, #2612]	@ 0xa34
			g->player.gameProgres += 1;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	699b      	ldr	r3, [r3, #24]
 8002800:	1c5a      	adds	r2, r3, #1
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	619a      	str	r2, [r3, #24]

		}
		if(g->player.gameProgres == 59)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	699b      	ldr	r3, [r3, #24]
 800280a:	2b3b      	cmp	r3, #59	@ 0x3b
 800280c:	d114      	bne.n	8002838 <GameLevelUpdate+0xa0>
		{
			g->boss.active = true;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2201      	movs	r2, #1
 8002812:	f883 2a24 	strb.w	r2, [r3, #2596]	@ 0xa24
			g->boss.lives = 6;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2206      	movs	r2, #6
 800281a:	f8c3 2a38 	str.w	r2, [r3, #2616]	@ 0xa38
			g->boss.level = 6;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2206      	movs	r2, #6
 8002822:	f8c3 2a3c 	str.w	r2, [r3, #2620]	@ 0xa3c
			g->boss.updateDelay = 2;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2202      	movs	r2, #2
 800282a:	f8c3 2a34 	str.w	r2, [r3, #2612]	@ 0xa34
			g->player.gameProgres += 1;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	699b      	ldr	r3, [r3, #24]
 8002832:	1c5a      	adds	r2, r3, #1
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	619a      	str	r2, [r3, #24]
		}
		//--------------------------------------

		//Next levels
		if(g->player.gameProgres > 9 && g->player.gameProgres < 10 )
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	699b      	ldr	r3, [r3, #24]
 800283c:	2b09      	cmp	r3, #9
 800283e:	dd06      	ble.n	800284e <GameLevelUpdate+0xb6>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	699b      	ldr	r3, [r3, #24]
 8002844:	2b09      	cmp	r3, #9
 8002846:	dc02      	bgt.n	800284e <GameLevelUpdate+0xb6>
			g->player.level = 1;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2201      	movs	r2, #1
 800284c:	615a      	str	r2, [r3, #20]
		if(g->player.gameProgres > 10 && g->player.gameProgres < 19)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	699b      	ldr	r3, [r3, #24]
 8002852:	2b0a      	cmp	r3, #10
 8002854:	dd06      	ble.n	8002864 <GameLevelUpdate+0xcc>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	699b      	ldr	r3, [r3, #24]
 800285a:	2b12      	cmp	r3, #18
 800285c:	dc02      	bgt.n	8002864 <GameLevelUpdate+0xcc>
			g->player.level = 2;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2202      	movs	r2, #2
 8002862:	615a      	str	r2, [r3, #20]
		if(g->player.gameProgres > 20 && g->player.gameProgres < 29)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	699b      	ldr	r3, [r3, #24]
 8002868:	2b14      	cmp	r3, #20
 800286a:	dd06      	ble.n	800287a <GameLevelUpdate+0xe2>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	699b      	ldr	r3, [r3, #24]
 8002870:	2b1c      	cmp	r3, #28
 8002872:	dc02      	bgt.n	800287a <GameLevelUpdate+0xe2>
			g->player.level = 3;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2203      	movs	r2, #3
 8002878:	615a      	str	r2, [r3, #20]
		if(g->player.gameProgres > 30 && g->player.gameProgres < 39)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	699b      	ldr	r3, [r3, #24]
 800287e:	2b1e      	cmp	r3, #30
 8002880:	dd06      	ble.n	8002890 <GameLevelUpdate+0xf8>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	699b      	ldr	r3, [r3, #24]
 8002886:	2b26      	cmp	r3, #38	@ 0x26
 8002888:	dc02      	bgt.n	8002890 <GameLevelUpdate+0xf8>
			g->player.level = 4;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2204      	movs	r2, #4
 800288e:	615a      	str	r2, [r3, #20]
		if(g->player.gameProgres > 40 && g->player.gameProgres < 49)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	699b      	ldr	r3, [r3, #24]
 8002894:	2b28      	cmp	r3, #40	@ 0x28
 8002896:	dd06      	ble.n	80028a6 <GameLevelUpdate+0x10e>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	699b      	ldr	r3, [r3, #24]
 800289c:	2b30      	cmp	r3, #48	@ 0x30
 800289e:	dc02      	bgt.n	80028a6 <GameLevelUpdate+0x10e>
			g->player.level = 5;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2205      	movs	r2, #5
 80028a4:	615a      	str	r2, [r3, #20]
		if(g->player.gameProgres > 50 && g->player.gameProgres < 59)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	699b      	ldr	r3, [r3, #24]
 80028aa:	2b32      	cmp	r3, #50	@ 0x32
 80028ac:	dd06      	ble.n	80028bc <GameLevelUpdate+0x124>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	699b      	ldr	r3, [r3, #24]
 80028b2:	2b3a      	cmp	r3, #58	@ 0x3a
 80028b4:	dc02      	bgt.n	80028bc <GameLevelUpdate+0x124>
			g->player.level = 6;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2206      	movs	r2, #6
 80028ba:	615a      	str	r2, [r3, #20]
		if(g->player.gameProgres > 60 && g->player.gameProgres < 69)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	699b      	ldr	r3, [r3, #24]
 80028c0:	2b3c      	cmp	r3, #60	@ 0x3c
 80028c2:	dd06      	ble.n	80028d2 <GameLevelUpdate+0x13a>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	699b      	ldr	r3, [r3, #24]
 80028c8:	2b44      	cmp	r3, #68	@ 0x44
 80028ca:	dc02      	bgt.n	80028d2 <GameLevelUpdate+0x13a>
			g->player.level = 7;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2207      	movs	r2, #7
 80028d0:	615a      	str	r2, [r3, #20]
		if(g->player.gameProgres > 70 && g->player.gameProgres < 79)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	699b      	ldr	r3, [r3, #24]
 80028d6:	2b46      	cmp	r3, #70	@ 0x46
 80028d8:	dd06      	ble.n	80028e8 <GameLevelUpdate+0x150>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	699b      	ldr	r3, [r3, #24]
 80028de:	2b4e      	cmp	r3, #78	@ 0x4e
 80028e0:	dc02      	bgt.n	80028e8 <GameLevelUpdate+0x150>
			g->player.level = 8;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2208      	movs	r2, #8
 80028e6:	615a      	str	r2, [r3, #20]
		if(g->player.gameProgres > 80 && g->player.gameProgres < 89)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	699b      	ldr	r3, [r3, #24]
 80028ec:	2b50      	cmp	r3, #80	@ 0x50
 80028ee:	dd06      	ble.n	80028fe <GameLevelUpdate+0x166>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	699b      	ldr	r3, [r3, #24]
 80028f4:	2b58      	cmp	r3, #88	@ 0x58
 80028f6:	dc02      	bgt.n	80028fe <GameLevelUpdate+0x166>
			g->player.level = 9;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2209      	movs	r2, #9
 80028fc:	615a      	str	r2, [r3, #20]
		if(g->player.gameProgres > 90)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	699b      	ldr	r3, [r3, #24]
 8002902:	2b5a      	cmp	r3, #90	@ 0x5a
 8002904:	dd02      	ble.n	800290c <GameLevelUpdate+0x174>
			g->player.level = 10;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	220a      	movs	r2, #10
 800290a:	615a      	str	r2, [r3, #20]

}
 800290c:	bf00      	nop
 800290e:	370c      	adds	r7, #12
 8002910:	46bd      	mov	sp, r7
 8002912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002916:	4770      	bx	lr
 8002918:	20000b31 	.word	0x20000b31

0800291c <GameUpdateBackgrand>:

void GameUpdateBackgrand(GameCtx* g) {
 800291c:	b580      	push	{r7, lr}
 800291e:	b084      	sub	sp, #16
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
	 * Refreshes the background effect, stars.
	 * Moves elements and randomises when a new element have to be added.
	 */
	uint8_t i;

	for(i = 0; i < NUMBER_BACKGROUND; i++)
 8002924:	2300      	movs	r3, #0
 8002926:	73fb      	strb	r3, [r7, #15]
 8002928:	e07c      	b.n	8002a24 <GameUpdateBackgrand+0x108>
	{
		if(g->background[i].active)
 800292a:	7bfa      	ldrb	r2, [r7, #15]
 800292c:	6879      	ldr	r1, [r7, #4]
 800292e:	4613      	mov	r3, r2
 8002930:	009b      	lsls	r3, r3, #2
 8002932:	4413      	add	r3, r2
 8002934:	009b      	lsls	r3, r3, #2
 8002936:	440b      	add	r3, r1
 8002938:	f503 7379 	add.w	r3, r3, #996	@ 0x3e4
 800293c:	781b      	ldrb	r3, [r3, #0]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d06d      	beq.n	8002a1e <GameUpdateBackgrand+0x102>
		{
			g->background[i].nextUpdate -= 1;
 8002942:	7bfa      	ldrb	r2, [r7, #15]
 8002944:	6879      	ldr	r1, [r7, #4]
 8002946:	4613      	mov	r3, r2
 8002948:	009b      	lsls	r3, r3, #2
 800294a:	4413      	add	r3, r2
 800294c:	009b      	lsls	r3, r3, #2
 800294e:	440b      	add	r3, r1
 8002950:	f503 737c 	add.w	r3, r3, #1008	@ 0x3f0
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	7bfa      	ldrb	r2, [r7, #15]
 8002958:	1e59      	subs	r1, r3, #1
 800295a:	6878      	ldr	r0, [r7, #4]
 800295c:	4613      	mov	r3, r2
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	4413      	add	r3, r2
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	4403      	add	r3, r0
 8002966:	f503 737c 	add.w	r3, r3, #1008	@ 0x3f0
 800296a:	6019      	str	r1, [r3, #0]
			if(g->background[i].nextUpdate <= 0)
 800296c:	7bfa      	ldrb	r2, [r7, #15]
 800296e:	6879      	ldr	r1, [r7, #4]
 8002970:	4613      	mov	r3, r2
 8002972:	009b      	lsls	r3, r3, #2
 8002974:	4413      	add	r3, r2
 8002976:	009b      	lsls	r3, r3, #2
 8002978:	440b      	add	r3, r1
 800297a:	f503 737c 	add.w	r3, r3, #1008	@ 0x3f0
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	2b00      	cmp	r3, #0
 8002982:	dc4c      	bgt.n	8002a1e <GameUpdateBackgrand+0x102>
			{
				g->background[i].nextUpdate = g->background[i].updateDelay;
 8002984:	7bf9      	ldrb	r1, [r7, #15]
 8002986:	7bfa      	ldrb	r2, [r7, #15]
 8002988:	6878      	ldr	r0, [r7, #4]
 800298a:	460b      	mov	r3, r1
 800298c:	009b      	lsls	r3, r3, #2
 800298e:	440b      	add	r3, r1
 8002990:	009b      	lsls	r3, r3, #2
 8002992:	4403      	add	r3, r0
 8002994:	f503 737d 	add.w	r3, r3, #1012	@ 0x3f4
 8002998:	6819      	ldr	r1, [r3, #0]
 800299a:	6878      	ldr	r0, [r7, #4]
 800299c:	4613      	mov	r3, r2
 800299e:	009b      	lsls	r3, r3, #2
 80029a0:	4413      	add	r3, r2
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	4403      	add	r3, r0
 80029a6:	f503 737c 	add.w	r3, r3, #1008	@ 0x3f0
 80029aa:	6019      	str	r1, [r3, #0]
				if(g->background[i].active)
 80029ac:	7bfa      	ldrb	r2, [r7, #15]
 80029ae:	6879      	ldr	r1, [r7, #4]
 80029b0:	4613      	mov	r3, r2
 80029b2:	009b      	lsls	r3, r3, #2
 80029b4:	4413      	add	r3, r2
 80029b6:	009b      	lsls	r3, r3, #2
 80029b8:	440b      	add	r3, r1
 80029ba:	f503 7379 	add.w	r3, r3, #996	@ 0x3e4
 80029be:	781b      	ldrb	r3, [r3, #0]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d02c      	beq.n	8002a1e <GameUpdateBackgrand+0x102>
				{
					g->background[i].x -= 1;
 80029c4:	7bfa      	ldrb	r2, [r7, #15]
 80029c6:	6879      	ldr	r1, [r7, #4]
 80029c8:	4613      	mov	r3, r2
 80029ca:	009b      	lsls	r3, r3, #2
 80029cc:	4413      	add	r3, r2
 80029ce:	009b      	lsls	r3, r3, #2
 80029d0:	440b      	add	r3, r1
 80029d2:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	7bfa      	ldrb	r2, [r7, #15]
 80029da:	1e59      	subs	r1, r3, #1
 80029dc:	6878      	ldr	r0, [r7, #4]
 80029de:	4613      	mov	r3, r2
 80029e0:	009b      	lsls	r3, r3, #2
 80029e2:	4413      	add	r3, r2
 80029e4:	009b      	lsls	r3, r3, #2
 80029e6:	4403      	add	r3, r0
 80029e8:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80029ec:	6019      	str	r1, [r3, #0]

					if(g->background[i].x <= -2)
 80029ee:	7bfa      	ldrb	r2, [r7, #15]
 80029f0:	6879      	ldr	r1, [r7, #4]
 80029f2:	4613      	mov	r3, r2
 80029f4:	009b      	lsls	r3, r3, #2
 80029f6:	4413      	add	r3, r2
 80029f8:	009b      	lsls	r3, r3, #2
 80029fa:	440b      	add	r3, r1
 80029fc:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a06:	da0a      	bge.n	8002a1e <GameUpdateBackgrand+0x102>
						g->background[i].active = false;
 8002a08:	7bfa      	ldrb	r2, [r7, #15]
 8002a0a:	6879      	ldr	r1, [r7, #4]
 8002a0c:	4613      	mov	r3, r2
 8002a0e:	009b      	lsls	r3, r3, #2
 8002a10:	4413      	add	r3, r2
 8002a12:	009b      	lsls	r3, r3, #2
 8002a14:	440b      	add	r3, r1
 8002a16:	f503 7379 	add.w	r3, r3, #996	@ 0x3e4
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < NUMBER_BACKGROUND; i++)
 8002a1e:	7bfb      	ldrb	r3, [r7, #15]
 8002a20:	3301      	adds	r3, #1
 8002a22:	73fb      	strb	r3, [r7, #15]
 8002a24:	7bfb      	ldrb	r3, [r7, #15]
 8002a26:	2b4f      	cmp	r3, #79	@ 0x4f
 8002a28:	f67f af7f 	bls.w	800292a <GameUpdateBackgrand+0xe>
				}
			}
		}
	}

	if ((rand()%100) < NUMBER_BACKGROUND_FREQ) 		//Frequency of background additions
 8002a2c:	f005 fa9c 	bl	8007f68 <rand>
 8002a30:	4602      	mov	r2, r0
 8002a32:	4b09      	ldr	r3, [pc, #36]	@ (8002a58 <GameUpdateBackgrand+0x13c>)
 8002a34:	fb83 1302 	smull	r1, r3, r3, r2
 8002a38:	1159      	asrs	r1, r3, #5
 8002a3a:	17d3      	asrs	r3, r2, #31
 8002a3c:	1acb      	subs	r3, r1, r3
 8002a3e:	2164      	movs	r1, #100	@ 0x64
 8002a40:	fb01 f303 	mul.w	r3, r1, r3
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	2b0b      	cmp	r3, #11
 8002a48:	dc02      	bgt.n	8002a50 <GameUpdateBackgrand+0x134>
		GameAddBackground(g);//add_background();
 8002a4a:	6878      	ldr	r0, [r7, #4]
 8002a4c:	f000 f806 	bl	8002a5c <GameAddBackground>

}
 8002a50:	bf00      	nop
 8002a52:	3710      	adds	r7, #16
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}
 8002a58:	51eb851f 	.word	0x51eb851f

08002a5c <GameAddBackground>:

void GameAddBackground(GameCtx* g){
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b084      	sub	sp, #16
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
	 * In addition, it sets the random parameters for its
	 * refreshment and a random position on the Y axis.
	 */
	uint8_t i;

	for(i = 0; i < NUMBER_BACKGROUND; i++)
 8002a64:	2300      	movs	r3, #0
 8002a66:	73fb      	strb	r3, [r7, #15]
 8002a68:	e059      	b.n	8002b1e <GameAddBackground+0xc2>
	{
		if(!g->background[i].active)
 8002a6a:	7bfa      	ldrb	r2, [r7, #15]
 8002a6c:	6879      	ldr	r1, [r7, #4]
 8002a6e:	4613      	mov	r3, r2
 8002a70:	009b      	lsls	r3, r3, #2
 8002a72:	4413      	add	r3, r2
 8002a74:	009b      	lsls	r3, r3, #2
 8002a76:	440b      	add	r3, r1
 8002a78:	f503 7379 	add.w	r3, r3, #996	@ 0x3e4
 8002a7c:	781b      	ldrb	r3, [r3, #0]
 8002a7e:	f083 0301 	eor.w	r3, r3, #1
 8002a82:	b2db      	uxtb	r3, r3
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d047      	beq.n	8002b18 <GameAddBackground+0xbc>
		{
			g->background[i].active 		= true;
 8002a88:	7bfa      	ldrb	r2, [r7, #15]
 8002a8a:	6879      	ldr	r1, [r7, #4]
 8002a8c:	4613      	mov	r3, r2
 8002a8e:	009b      	lsls	r3, r3, #2
 8002a90:	4413      	add	r3, r2
 8002a92:	009b      	lsls	r3, r3, #2
 8002a94:	440b      	add	r3, r1
 8002a96:	f503 7379 	add.w	r3, r3, #996	@ 0x3e4
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	701a      	strb	r2, [r3, #0]
			g->background[i].x 				= SCREEN_WIDTH;
 8002a9e:	7bfa      	ldrb	r2, [r7, #15]
 8002aa0:	6879      	ldr	r1, [r7, #4]
 8002aa2:	4613      	mov	r3, r2
 8002aa4:	009b      	lsls	r3, r3, #2
 8002aa6:	4413      	add	r3, r2
 8002aa8:	009b      	lsls	r3, r3, #2
 8002aaa:	440b      	add	r3, r1
 8002aac:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8002ab0:	2280      	movs	r2, #128	@ 0x80
 8002ab2:	601a      	str	r2, [r3, #0]
			g->background[i].y				= (rand()%(SCREEN_HEIGHT-10)) +10;
 8002ab4:	f005 fa58 	bl	8007f68 <rand>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	4b1d      	ldr	r3, [pc, #116]	@ (8002b30 <GameAddBackground+0xd4>)
 8002abc:	fb83 1302 	smull	r1, r3, r3, r2
 8002ac0:	1119      	asrs	r1, r3, #4
 8002ac2:	17d3      	asrs	r3, r2, #31
 8002ac4:	1acb      	subs	r3, r1, r3
 8002ac6:	2176      	movs	r1, #118	@ 0x76
 8002ac8:	fb01 f303 	mul.w	r3, r1, r3
 8002acc:	1ad3      	subs	r3, r2, r3
 8002ace:	7bfa      	ldrb	r2, [r7, #15]
 8002ad0:	f103 010a 	add.w	r1, r3, #10
 8002ad4:	6878      	ldr	r0, [r7, #4]
 8002ad6:	4613      	mov	r3, r2
 8002ad8:	009b      	lsls	r3, r3, #2
 8002ada:	4413      	add	r3, r2
 8002adc:	009b      	lsls	r3, r3, #2
 8002ade:	4403      	add	r3, r0
 8002ae0:	f503 737b 	add.w	r3, r3, #1004	@ 0x3ec
 8002ae4:	6019      	str	r1, [r3, #0]
			g->background[i].updateDelay 	= (rand()%6)+2; // def. (rand()%4)+2;
 8002ae6:	f005 fa3f 	bl	8007f68 <rand>
 8002aea:	4601      	mov	r1, r0
 8002aec:	4b11      	ldr	r3, [pc, #68]	@ (8002b34 <GameAddBackground+0xd8>)
 8002aee:	fb83 3201 	smull	r3, r2, r3, r1
 8002af2:	17cb      	asrs	r3, r1, #31
 8002af4:	1ad2      	subs	r2, r2, r3
 8002af6:	4613      	mov	r3, r2
 8002af8:	005b      	lsls	r3, r3, #1
 8002afa:	4413      	add	r3, r2
 8002afc:	005b      	lsls	r3, r3, #1
 8002afe:	1aca      	subs	r2, r1, r3
 8002b00:	7bf9      	ldrb	r1, [r7, #15]
 8002b02:	3202      	adds	r2, #2
 8002b04:	6878      	ldr	r0, [r7, #4]
 8002b06:	460b      	mov	r3, r1
 8002b08:	009b      	lsls	r3, r3, #2
 8002b0a:	440b      	add	r3, r1
 8002b0c:	009b      	lsls	r3, r3, #2
 8002b0e:	4403      	add	r3, r0
 8002b10:	f503 737d 	add.w	r3, r3, #1012	@ 0x3f4
 8002b14:	601a      	str	r2, [r3, #0]

			break;
 8002b16:	e006      	b.n	8002b26 <GameAddBackground+0xca>
	for(i = 0; i < NUMBER_BACKGROUND; i++)
 8002b18:	7bfb      	ldrb	r3, [r7, #15]
 8002b1a:	3301      	adds	r3, #1
 8002b1c:	73fb      	strb	r3, [r7, #15]
 8002b1e:	7bfb      	ldrb	r3, [r7, #15]
 8002b20:	2b4f      	cmp	r3, #79	@ 0x4f
 8002b22:	d9a2      	bls.n	8002a6a <GameAddBackground+0xe>
		}
	}
}
 8002b24:	bf00      	nop
 8002b26:	bf00      	nop
 8002b28:	3710      	adds	r7, #16
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}
 8002b2e:	bf00      	nop
 8002b30:	22b63cbf 	.word	0x22b63cbf
 8002b34:	2aaaaaab 	.word	0x2aaaaaab

08002b38 <GameAddBonus>:

void GameAddBonus(GameCtx* g, int x, int y){
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b086      	sub	sp, #24
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	60f8      	str	r0, [r7, #12]
 8002b40:	60b9      	str	r1, [r7, #8]
 8002b42:	607a      	str	r2, [r7, #4]
	 */

	uint8_t i;
	int bonus_type;

	for (i = 0; i < NUMBER_BONUS; i++)
 8002b44:	2300      	movs	r3, #0
 8002b46:	75fb      	strb	r3, [r7, #23]
 8002b48:	e07e      	b.n	8002c48 <GameAddBonus+0x110>
	{
		if (!g->bonuses[i].active)
 8002b4a:	7dfa      	ldrb	r2, [r7, #23]
 8002b4c:	68f9      	ldr	r1, [r7, #12]
 8002b4e:	4613      	mov	r3, r2
 8002b50:	00db      	lsls	r3, r3, #3
 8002b52:	1a9b      	subs	r3, r3, r2
 8002b54:	009b      	lsls	r3, r3, #2
 8002b56:	440b      	add	r3, r1
 8002b58:	f503 6324 	add.w	r3, r3, #2624	@ 0xa40
 8002b5c:	781b      	ldrb	r3, [r3, #0]
 8002b5e:	f083 0301 	eor.w	r3, r3, #1
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d06c      	beq.n	8002c42 <GameAddBonus+0x10a>
		{
			g->bonuses[i].active = true;
 8002b68:	7dfa      	ldrb	r2, [r7, #23]
 8002b6a:	68f9      	ldr	r1, [r7, #12]
 8002b6c:	4613      	mov	r3, r2
 8002b6e:	00db      	lsls	r3, r3, #3
 8002b70:	1a9b      	subs	r3, r3, r2
 8002b72:	009b      	lsls	r3, r3, #2
 8002b74:	440b      	add	r3, r1
 8002b76:	f503 6324 	add.w	r3, r3, #2624	@ 0xa40
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	701a      	strb	r2, [r3, #0]
			g->bonuses[i].x = x;
 8002b7e:	7dfa      	ldrb	r2, [r7, #23]
 8002b80:	68f9      	ldr	r1, [r7, #12]
 8002b82:	4613      	mov	r3, r2
 8002b84:	00db      	lsls	r3, r3, #3
 8002b86:	1a9b      	subs	r3, r3, r2
 8002b88:	009b      	lsls	r3, r3, #2
 8002b8a:	440b      	add	r3, r1
 8002b8c:	f603 2344 	addw	r3, r3, #2628	@ 0xa44
 8002b90:	68ba      	ldr	r2, [r7, #8]
 8002b92:	601a      	str	r2, [r3, #0]
			g->bonuses[i].y = y;
 8002b94:	7dfa      	ldrb	r2, [r7, #23]
 8002b96:	68f9      	ldr	r1, [r7, #12]
 8002b98:	4613      	mov	r3, r2
 8002b9a:	00db      	lsls	r3, r3, #3
 8002b9c:	1a9b      	subs	r3, r3, r2
 8002b9e:	009b      	lsls	r3, r3, #2
 8002ba0:	440b      	add	r3, r1
 8002ba2:	f603 2348 	addw	r3, r3, #2632	@ 0xa48
 8002ba6:	687a      	ldr	r2, [r7, #4]
 8002ba8:	601a      	str	r2, [r3, #0]
			g->bonuses[i].updateDelay = 3;
 8002baa:	7dfa      	ldrb	r2, [r7, #23]
 8002bac:	68f9      	ldr	r1, [r7, #12]
 8002bae:	4613      	mov	r3, r2
 8002bb0:	00db      	lsls	r3, r3, #3
 8002bb2:	1a9b      	subs	r3, r3, r2
 8002bb4:	009b      	lsls	r3, r3, #2
 8002bb6:	440b      	add	r3, r1
 8002bb8:	f603 2358 	addw	r3, r3, #2648	@ 0xa58
 8002bbc:	2203      	movs	r2, #3
 8002bbe:	601a      	str	r2, [r3, #0]

			bonus_type = rand()%100;
 8002bc0:	f005 f9d2 	bl	8007f68 <rand>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	4a25      	ldr	r2, [pc, #148]	@ (8002c5c <GameAddBonus+0x124>)
 8002bc8:	fb82 1203 	smull	r1, r2, r2, r3
 8002bcc:	1151      	asrs	r1, r2, #5
 8002bce:	17da      	asrs	r2, r3, #31
 8002bd0:	1a8a      	subs	r2, r1, r2
 8002bd2:	2164      	movs	r1, #100	@ 0x64
 8002bd4:	fb01 f202 	mul.w	r2, r1, r2
 8002bd8:	1a9b      	subs	r3, r3, r2
 8002bda:	613b      	str	r3, [r7, #16]

			if(bonus_type > 30)
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	2b1e      	cmp	r3, #30
 8002be0:	dd15      	ble.n	8002c0e <GameAddBonus+0xd6>
			{
				g->bonuses[i].bitMap = bonus_live_map;
 8002be2:	7dfa      	ldrb	r2, [r7, #23]
 8002be4:	68f9      	ldr	r1, [r7, #12]
 8002be6:	4613      	mov	r3, r2
 8002be8:	00db      	lsls	r3, r3, #3
 8002bea:	1a9b      	subs	r3, r3, r2
 8002bec:	009b      	lsls	r3, r3, #2
 8002bee:	440b      	add	r3, r1
 8002bf0:	f503 6325 	add.w	r3, r3, #2640	@ 0xa50
 8002bf4:	4a1a      	ldr	r2, [pc, #104]	@ (8002c60 <GameAddBonus+0x128>)
 8002bf6:	601a      	str	r2, [r3, #0]
				g->bonuses[i].type = ST_Normal;
 8002bf8:	7dfa      	ldrb	r2, [r7, #23]
 8002bfa:	68f9      	ldr	r1, [r7, #12]
 8002bfc:	4613      	mov	r3, r2
 8002bfe:	00db      	lsls	r3, r3, #3
 8002c00:	1a9b      	subs	r3, r3, r2
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	440b      	add	r3, r1
 8002c06:	f603 234c 	addw	r3, r3, #2636	@ 0xa4c
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	701a      	strb	r2, [r3, #0]
			}
			if(bonus_type < 30)
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	2b1d      	cmp	r3, #29
 8002c12:	dc1e      	bgt.n	8002c52 <GameAddBonus+0x11a>
			{
				g->bonuses[i].bitMap = bonus_tracker_shoot_map;
 8002c14:	7dfa      	ldrb	r2, [r7, #23]
 8002c16:	68f9      	ldr	r1, [r7, #12]
 8002c18:	4613      	mov	r3, r2
 8002c1a:	00db      	lsls	r3, r3, #3
 8002c1c:	1a9b      	subs	r3, r3, r2
 8002c1e:	009b      	lsls	r3, r3, #2
 8002c20:	440b      	add	r3, r1
 8002c22:	f503 6325 	add.w	r3, r3, #2640	@ 0xa50
 8002c26:	4a0f      	ldr	r2, [pc, #60]	@ (8002c64 <GameAddBonus+0x12c>)
 8002c28:	601a      	str	r2, [r3, #0]
				g->bonuses[i].type = ST_Tracker;
 8002c2a:	7dfa      	ldrb	r2, [r7, #23]
 8002c2c:	68f9      	ldr	r1, [r7, #12]
 8002c2e:	4613      	mov	r3, r2
 8002c30:	00db      	lsls	r3, r3, #3
 8002c32:	1a9b      	subs	r3, r3, r2
 8002c34:	009b      	lsls	r3, r3, #2
 8002c36:	440b      	add	r3, r1
 8002c38:	f603 234c 	addw	r3, r3, #2636	@ 0xa4c
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	701a      	strb	r2, [r3, #0]
			}
			return;
 8002c40:	e007      	b.n	8002c52 <GameAddBonus+0x11a>
	for (i = 0; i < NUMBER_BONUS; i++)
 8002c42:	7dfb      	ldrb	r3, [r7, #23]
 8002c44:	3301      	adds	r3, #1
 8002c46:	75fb      	strb	r3, [r7, #23]
 8002c48:	7dfb      	ldrb	r3, [r7, #23]
 8002c4a:	2b02      	cmp	r3, #2
 8002c4c:	f67f af7d 	bls.w	8002b4a <GameAddBonus+0x12>
 8002c50:	e000      	b.n	8002c54 <GameAddBonus+0x11c>
			return;
 8002c52:	bf00      	nop
		}
	}
}
 8002c54:	3718      	adds	r7, #24
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	bf00      	nop
 8002c5c:	51eb851f 	.word	0x51eb851f
 8002c60:	0800a5ac 	.word	0x0800a5ac
 8002c64:	0800a5b4 	.word	0x0800a5b4

08002c68 <GameUpdateBonus>:

void GameUpdateBonus(GameCtx* g){
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b084      	sub	sp, #16
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
	/*
		 * Checking whether a player has hovered over a bonus.
		 * Moving a bonus on the map
		 * */
		int i = 0;
 8002c70:	2300      	movs	r3, #0
 8002c72:	60fb      	str	r3, [r7, #12]

		//Check duration of st_tracekr if active

		if(g->player.bonusDuration > 0)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6a1b      	ldr	r3, [r3, #32]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	dd04      	ble.n	8002c86 <GameUpdateBonus+0x1e>
			g->player.bonusDuration -= 1;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6a1b      	ldr	r3, [r3, #32]
 8002c80:	1e5a      	subs	r2, r3, #1
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	621a      	str	r2, [r3, #32]
		if(g->player.bonusDuration == 0 && g->player.shootType == ST_Tracker)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6a1b      	ldr	r3, [r3, #32]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d106      	bne.n	8002c9c <GameUpdateBonus+0x34>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	7f1b      	ldrb	r3, [r3, #28]
 8002c92:	2b01      	cmp	r3, #1
 8002c94:	d102      	bne.n	8002c9c <GameUpdateBonus+0x34>
			g->player.shootType = ST_Normal;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	771a      	strb	r2, [r3, #28]

		// Checking whether a player has hovered over a bonus
		for (i = 0; i < NUMBER_BONUS; i++)
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	60fb      	str	r3, [r7, #12]
 8002ca0:	e12f      	b.n	8002f02 <GameUpdateBonus+0x29a>
		{
			if(g->bonuses[i].active)
 8002ca2:	6879      	ldr	r1, [r7, #4]
 8002ca4:	68fa      	ldr	r2, [r7, #12]
 8002ca6:	4613      	mov	r3, r2
 8002ca8:	00db      	lsls	r3, r3, #3
 8002caa:	1a9b      	subs	r3, r3, r2
 8002cac:	009b      	lsls	r3, r3, #2
 8002cae:	440b      	add	r3, r1
 8002cb0:	f503 6324 	add.w	r3, r3, #2624	@ 0xa40
 8002cb4:	781b      	ldrb	r3, [r3, #0]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	f000 8120 	beq.w	8002efc <GameUpdateBonus+0x294>
			{
				g->bonuses[i].nextUpdate -= 1;
 8002cbc:	6879      	ldr	r1, [r7, #4]
 8002cbe:	68fa      	ldr	r2, [r7, #12]
 8002cc0:	4613      	mov	r3, r2
 8002cc2:	00db      	lsls	r3, r3, #3
 8002cc4:	1a9b      	subs	r3, r3, r2
 8002cc6:	009b      	lsls	r3, r3, #2
 8002cc8:	440b      	add	r3, r1
 8002cca:	f603 2354 	addw	r3, r3, #2644	@ 0xa54
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	1e59      	subs	r1, r3, #1
 8002cd2:	6878      	ldr	r0, [r7, #4]
 8002cd4:	68fa      	ldr	r2, [r7, #12]
 8002cd6:	4613      	mov	r3, r2
 8002cd8:	00db      	lsls	r3, r3, #3
 8002cda:	1a9b      	subs	r3, r3, r2
 8002cdc:	009b      	lsls	r3, r3, #2
 8002cde:	4403      	add	r3, r0
 8002ce0:	f603 2354 	addw	r3, r3, #2644	@ 0xa54
 8002ce4:	6019      	str	r1, [r3, #0]
				if(g->bonuses[i].nextUpdate <= 0)
 8002ce6:	6879      	ldr	r1, [r7, #4]
 8002ce8:	68fa      	ldr	r2, [r7, #12]
 8002cea:	4613      	mov	r3, r2
 8002cec:	00db      	lsls	r3, r3, #3
 8002cee:	1a9b      	subs	r3, r3, r2
 8002cf0:	009b      	lsls	r3, r3, #2
 8002cf2:	440b      	add	r3, r1
 8002cf4:	f603 2354 	addw	r3, r3, #2644	@ 0xa54
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	f300 80fe 	bgt.w	8002efc <GameUpdateBonus+0x294>
				{
					if(g->bonuses[i].active)
 8002d00:	6879      	ldr	r1, [r7, #4]
 8002d02:	68fa      	ldr	r2, [r7, #12]
 8002d04:	4613      	mov	r3, r2
 8002d06:	00db      	lsls	r3, r3, #3
 8002d08:	1a9b      	subs	r3, r3, r2
 8002d0a:	009b      	lsls	r3, r3, #2
 8002d0c:	440b      	add	r3, r1
 8002d0e:	f503 6324 	add.w	r3, r3, #2624	@ 0xa40
 8002d12:	781b      	ldrb	r3, [r3, #0]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	f000 80f1 	beq.w	8002efc <GameUpdateBonus+0x294>
					{
						g->bonuses[i].nextUpdate = g->bonuses[i].updateDelay;
 8002d1a:	6879      	ldr	r1, [r7, #4]
 8002d1c:	68fa      	ldr	r2, [r7, #12]
 8002d1e:	4613      	mov	r3, r2
 8002d20:	00db      	lsls	r3, r3, #3
 8002d22:	1a9b      	subs	r3, r3, r2
 8002d24:	009b      	lsls	r3, r3, #2
 8002d26:	440b      	add	r3, r1
 8002d28:	f603 2358 	addw	r3, r3, #2648	@ 0xa58
 8002d2c:	6819      	ldr	r1, [r3, #0]
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	68fa      	ldr	r2, [r7, #12]
 8002d32:	4613      	mov	r3, r2
 8002d34:	00db      	lsls	r3, r3, #3
 8002d36:	1a9b      	subs	r3, r3, r2
 8002d38:	009b      	lsls	r3, r3, #2
 8002d3a:	4403      	add	r3, r0
 8002d3c:	f603 2354 	addw	r3, r3, #2644	@ 0xa54
 8002d40:	6019      	str	r1, [r3, #0]

						if (Colliding(g->bonuses[i].x,g->bonuses[i].y, g->player.x, g->player.y) 	||
 8002d42:	6879      	ldr	r1, [r7, #4]
 8002d44:	68fa      	ldr	r2, [r7, #12]
 8002d46:	4613      	mov	r3, r2
 8002d48:	00db      	lsls	r3, r3, #3
 8002d4a:	1a9b      	subs	r3, r3, r2
 8002d4c:	009b      	lsls	r3, r3, #2
 8002d4e:	440b      	add	r3, r1
 8002d50:	f603 2344 	addw	r3, r3, #2628	@ 0xa44
 8002d54:	6818      	ldr	r0, [r3, #0]
 8002d56:	6879      	ldr	r1, [r7, #4]
 8002d58:	68fa      	ldr	r2, [r7, #12]
 8002d5a:	4613      	mov	r3, r2
 8002d5c:	00db      	lsls	r3, r3, #3
 8002d5e:	1a9b      	subs	r3, r3, r2
 8002d60:	009b      	lsls	r3, r3, #2
 8002d62:	440b      	add	r3, r1
 8002d64:	f603 2348 	addw	r3, r3, #2632	@ 0xa48
 8002d68:	6819      	ldr	r1, [r3, #0]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	f000 fa3f 	bl	80031f4 <Colliding>
 8002d76:	4603      	mov	r3, r0
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d15a      	bne.n	8002e32 <GameUpdateBonus+0x1ca>
							Colliding(g->bonuses[i].x,g->bonuses[i].y, g->player.x, g->player.y+5) 	||
 8002d7c:	6879      	ldr	r1, [r7, #4]
 8002d7e:	68fa      	ldr	r2, [r7, #12]
 8002d80:	4613      	mov	r3, r2
 8002d82:	00db      	lsls	r3, r3, #3
 8002d84:	1a9b      	subs	r3, r3, r2
 8002d86:	009b      	lsls	r3, r3, #2
 8002d88:	440b      	add	r3, r1
 8002d8a:	f603 2344 	addw	r3, r3, #2628	@ 0xa44
 8002d8e:	6818      	ldr	r0, [r3, #0]
 8002d90:	6879      	ldr	r1, [r7, #4]
 8002d92:	68fa      	ldr	r2, [r7, #12]
 8002d94:	4613      	mov	r3, r2
 8002d96:	00db      	lsls	r3, r3, #3
 8002d98:	1a9b      	subs	r3, r3, r2
 8002d9a:	009b      	lsls	r3, r3, #2
 8002d9c:	440b      	add	r3, r1
 8002d9e:	f603 2348 	addw	r3, r3, #2632	@ 0xa48
 8002da2:	6819      	ldr	r1, [r3, #0]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681a      	ldr	r2, [r3, #0]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	3305      	adds	r3, #5
 8002dae:	f000 fa21 	bl	80031f4 <Colliding>
 8002db2:	4603      	mov	r3, r0
						if (Colliding(g->bonuses[i].x,g->bonuses[i].y, g->player.x, g->player.y) 	||
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d13c      	bne.n	8002e32 <GameUpdateBonus+0x1ca>
							Colliding(g->bonuses[i].x,g->bonuses[i].y, g->player.x+7, g->player.y)	||
 8002db8:	6879      	ldr	r1, [r7, #4]
 8002dba:	68fa      	ldr	r2, [r7, #12]
 8002dbc:	4613      	mov	r3, r2
 8002dbe:	00db      	lsls	r3, r3, #3
 8002dc0:	1a9b      	subs	r3, r3, r2
 8002dc2:	009b      	lsls	r3, r3, #2
 8002dc4:	440b      	add	r3, r1
 8002dc6:	f603 2344 	addw	r3, r3, #2628	@ 0xa44
 8002dca:	6818      	ldr	r0, [r3, #0]
 8002dcc:	6879      	ldr	r1, [r7, #4]
 8002dce:	68fa      	ldr	r2, [r7, #12]
 8002dd0:	4613      	mov	r3, r2
 8002dd2:	00db      	lsls	r3, r3, #3
 8002dd4:	1a9b      	subs	r3, r3, r2
 8002dd6:	009b      	lsls	r3, r3, #2
 8002dd8:	440b      	add	r3, r1
 8002dda:	f603 2348 	addw	r3, r3, #2632	@ 0xa48
 8002dde:	6819      	ldr	r1, [r3, #0]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	1dda      	adds	r2, r3, #7
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	f000 fa03 	bl	80031f4 <Colliding>
 8002dee:	4603      	mov	r3, r0
							Colliding(g->bonuses[i].x,g->bonuses[i].y, g->player.x, g->player.y+5) 	||
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d11e      	bne.n	8002e32 <GameUpdateBonus+0x1ca>
							Colliding(g->bonuses[i].x,g->bonuses[i].y, g->player.x+7, g->player.y+5)
 8002df4:	6879      	ldr	r1, [r7, #4]
 8002df6:	68fa      	ldr	r2, [r7, #12]
 8002df8:	4613      	mov	r3, r2
 8002dfa:	00db      	lsls	r3, r3, #3
 8002dfc:	1a9b      	subs	r3, r3, r2
 8002dfe:	009b      	lsls	r3, r3, #2
 8002e00:	440b      	add	r3, r1
 8002e02:	f603 2344 	addw	r3, r3, #2628	@ 0xa44
 8002e06:	6818      	ldr	r0, [r3, #0]
 8002e08:	6879      	ldr	r1, [r7, #4]
 8002e0a:	68fa      	ldr	r2, [r7, #12]
 8002e0c:	4613      	mov	r3, r2
 8002e0e:	00db      	lsls	r3, r3, #3
 8002e10:	1a9b      	subs	r3, r3, r2
 8002e12:	009b      	lsls	r3, r3, #2
 8002e14:	440b      	add	r3, r1
 8002e16:	f603 2348 	addw	r3, r3, #2632	@ 0xa48
 8002e1a:	6819      	ldr	r1, [r3, #0]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	1dda      	adds	r2, r3, #7
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	3305      	adds	r3, #5
 8002e28:	f000 f9e4 	bl	80031f4 <Colliding>
 8002e2c:	4603      	mov	r3, r0
							Colliding(g->bonuses[i].x,g->bonuses[i].y, g->player.x+7, g->player.y)	||
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d037      	beq.n	8002ea2 <GameUpdateBonus+0x23a>
							)
						{
							switch(g->bonuses[i].type)
 8002e32:	6879      	ldr	r1, [r7, #4]
 8002e34:	68fa      	ldr	r2, [r7, #12]
 8002e36:	4613      	mov	r3, r2
 8002e38:	00db      	lsls	r3, r3, #3
 8002e3a:	1a9b      	subs	r3, r3, r2
 8002e3c:	009b      	lsls	r3, r3, #2
 8002e3e:	440b      	add	r3, r1
 8002e40:	f603 234c 	addw	r3, r3, #2636	@ 0xa4c
 8002e44:	781b      	ldrb	r3, [r3, #0]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d002      	beq.n	8002e50 <GameUpdateBonus+0x1e8>
 8002e4a:	2b01      	cmp	r3, #1
 8002e4c:	d011      	beq.n	8002e72 <GameUpdateBonus+0x20a>
 8002e4e:	e028      	b.n	8002ea2 <GameUpdateBonus+0x23a>
							{
							case BT_Live:
								g->player.lives += 1;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	691b      	ldr	r3, [r3, #16]
 8002e54:	1c5a      	adds	r2, r3, #1
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	611a      	str	r2, [r3, #16]
								g->bonuses[i].active = false;
 8002e5a:	6879      	ldr	r1, [r7, #4]
 8002e5c:	68fa      	ldr	r2, [r7, #12]
 8002e5e:	4613      	mov	r3, r2
 8002e60:	00db      	lsls	r3, r3, #3
 8002e62:	1a9b      	subs	r3, r3, r2
 8002e64:	009b      	lsls	r3, r3, #2
 8002e66:	440b      	add	r3, r1
 8002e68:	f503 6324 	add.w	r3, r3, #2624	@ 0xa40
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	701a      	strb	r2, [r3, #0]
								break;
 8002e70:	e017      	b.n	8002ea2 <GameUpdateBonus+0x23a>
							case BT_TrackerShot:
								g->player.shootType = ST_Tracker;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2201      	movs	r2, #1
 8002e76:	771a      	strb	r2, [r3, #28]
								g->player.bonusDuration = BONUS_DURATION + (g->player.level * 50);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	695b      	ldr	r3, [r3, #20]
 8002e7c:	2232      	movs	r2, #50	@ 0x32
 8002e7e:	fb02 f303 	mul.w	r3, r2, r3
 8002e82:	f103 0296 	add.w	r2, r3, #150	@ 0x96
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	621a      	str	r2, [r3, #32]
								g->bonuses[i].active = false;
 8002e8a:	6879      	ldr	r1, [r7, #4]
 8002e8c:	68fa      	ldr	r2, [r7, #12]
 8002e8e:	4613      	mov	r3, r2
 8002e90:	00db      	lsls	r3, r3, #3
 8002e92:	1a9b      	subs	r3, r3, r2
 8002e94:	009b      	lsls	r3, r3, #2
 8002e96:	440b      	add	r3, r1
 8002e98:	f503 6324 	add.w	r3, r3, #2624	@ 0xa40
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	701a      	strb	r2, [r3, #0]
								break;
 8002ea0:	bf00      	nop
							}

						}

						g->bonuses[i].x -= 1;
 8002ea2:	6879      	ldr	r1, [r7, #4]
 8002ea4:	68fa      	ldr	r2, [r7, #12]
 8002ea6:	4613      	mov	r3, r2
 8002ea8:	00db      	lsls	r3, r3, #3
 8002eaa:	1a9b      	subs	r3, r3, r2
 8002eac:	009b      	lsls	r3, r3, #2
 8002eae:	440b      	add	r3, r1
 8002eb0:	f603 2344 	addw	r3, r3, #2628	@ 0xa44
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	1e59      	subs	r1, r3, #1
 8002eb8:	6878      	ldr	r0, [r7, #4]
 8002eba:	68fa      	ldr	r2, [r7, #12]
 8002ebc:	4613      	mov	r3, r2
 8002ebe:	00db      	lsls	r3, r3, #3
 8002ec0:	1a9b      	subs	r3, r3, r2
 8002ec2:	009b      	lsls	r3, r3, #2
 8002ec4:	4403      	add	r3, r0
 8002ec6:	f603 2344 	addw	r3, r3, #2628	@ 0xa44
 8002eca:	6019      	str	r1, [r3, #0]
						if(g->bonuses[i].x <= -2){
 8002ecc:	6879      	ldr	r1, [r7, #4]
 8002ece:	68fa      	ldr	r2, [r7, #12]
 8002ed0:	4613      	mov	r3, r2
 8002ed2:	00db      	lsls	r3, r3, #3
 8002ed4:	1a9b      	subs	r3, r3, r2
 8002ed6:	009b      	lsls	r3, r3, #2
 8002ed8:	440b      	add	r3, r1
 8002eda:	f603 2344 	addw	r3, r3, #2628	@ 0xa44
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ee4:	da0a      	bge.n	8002efc <GameUpdateBonus+0x294>
							g->bonuses[i].active = false;
 8002ee6:	6879      	ldr	r1, [r7, #4]
 8002ee8:	68fa      	ldr	r2, [r7, #12]
 8002eea:	4613      	mov	r3, r2
 8002eec:	00db      	lsls	r3, r3, #3
 8002eee:	1a9b      	subs	r3, r3, r2
 8002ef0:	009b      	lsls	r3, r3, #2
 8002ef2:	440b      	add	r3, r1
 8002ef4:	f503 6324 	add.w	r3, r3, #2624	@ 0xa40
 8002ef8:	2200      	movs	r2, #0
 8002efa:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < NUMBER_BONUS; i++)
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	3301      	adds	r3, #1
 8002f00:	60fb      	str	r3, [r7, #12]
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	2b02      	cmp	r3, #2
 8002f06:	f77f aecc 	ble.w	8002ca2 <GameUpdateBonus+0x3a>
						}
					}
				}
			}
		}
}
 8002f0a:	bf00      	nop
 8002f0c:	bf00      	nop
 8002f0e:	3710      	adds	r7, #16
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}
 8002f14:	0000      	movs	r0, r0
	...

08002f18 <GameShot>:

void GameShot(GameCtx* g){
 8002f18:	b5b0      	push	{r4, r5, r7, lr}
 8002f1a:	b08a      	sub	sp, #40	@ 0x28
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
	/*
		 * Activate the shot in the player's shot table and set the initial parameters.
		 */
		uint8_t i;

		bool is_any_enemies_active = false;
 8002f20:	2300      	movs	r3, #0
 8002f22:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

		int closest_enemy_number;
		double temp_distance;
		double smolest_distance = 500;
 8002f26:	f04f 0200 	mov.w	r2, #0
 8002f2a:	4b8d      	ldr	r3, [pc, #564]	@ (8003160 <GameShot+0x248>)
 8002f2c:	e9c7 2306 	strd	r2, r3, [r7, #24]
		int random_tracking_number;

		for (i = 0; i < NUMBER_SHOTS; ++i)
 8002f30:	2300      	movs	r3, #0
 8002f32:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8002f36:	e105      	b.n	8003144 <GameShot+0x22c>
		{
			if (!g->shots[i].active)
 8002f38:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8002f3c:	6879      	ldr	r1, [r7, #4]
 8002f3e:	4613      	mov	r3, r2
 8002f40:	009b      	lsls	r3, r3, #2
 8002f42:	4413      	add	r3, r2
 8002f44:	009b      	lsls	r3, r3, #2
 8002f46:	440b      	add	r3, r1
 8002f48:	3324      	adds	r3, #36	@ 0x24
 8002f4a:	781b      	ldrb	r3, [r3, #0]
 8002f4c:	f083 0301 	eor.w	r3, r3, #1
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	f000 80f1 	beq.w	800313a <GameShot+0x222>
			{
				g->shots[i].active = true;
 8002f58:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8002f5c:	6879      	ldr	r1, [r7, #4]
 8002f5e:	4613      	mov	r3, r2
 8002f60:	009b      	lsls	r3, r3, #2
 8002f62:	4413      	add	r3, r2
 8002f64:	009b      	lsls	r3, r3, #2
 8002f66:	440b      	add	r3, r1
 8002f68:	3324      	adds	r3, #36	@ 0x24
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	701a      	strb	r2, [r3, #0]
				g->shots[i].x = 11;
 8002f6e:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8002f72:	6879      	ldr	r1, [r7, #4]
 8002f74:	4613      	mov	r3, r2
 8002f76:	009b      	lsls	r3, r3, #2
 8002f78:	4413      	add	r3, r2
 8002f7a:	009b      	lsls	r3, r3, #2
 8002f7c:	440b      	add	r3, r1
 8002f7e:	3328      	adds	r3, #40	@ 0x28
 8002f80:	220b      	movs	r2, #11
 8002f82:	601a      	str	r2, [r3, #0]
				g->shots[i].y = g->player.y + 5;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8002f8c:	1d59      	adds	r1, r3, #5
 8002f8e:	6878      	ldr	r0, [r7, #4]
 8002f90:	4613      	mov	r3, r2
 8002f92:	009b      	lsls	r3, r3, #2
 8002f94:	4413      	add	r3, r2
 8002f96:	009b      	lsls	r3, r3, #2
 8002f98:	4403      	add	r3, r0
 8002f9a:	332c      	adds	r3, #44	@ 0x2c
 8002f9c:	6019      	str	r1, [r3, #0]

				//Setting the type of shot
				switch(g->player.shootType)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	7f1b      	ldrb	r3, [r3, #28]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d002      	beq.n	8002fac <GameShot+0x94>
 8002fa6:	2b01      	cmp	r3, #1
 8002fa8:	d00c      	beq.n	8002fc4 <GameShot+0xac>
						// If you haven't found a target act like a normal shot
						g->shots[i].type = ST_Normal;
					}
					break;
				}
				return;
 8002faa:	e0d0      	b.n	800314e <GameShot+0x236>
					g->shots[i].type = ST_Normal;
 8002fac:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8002fb0:	6879      	ldr	r1, [r7, #4]
 8002fb2:	4613      	mov	r3, r2
 8002fb4:	009b      	lsls	r3, r3, #2
 8002fb6:	4413      	add	r3, r2
 8002fb8:	009b      	lsls	r3, r3, #2
 8002fba:	440b      	add	r3, r1
 8002fbc:	3330      	adds	r3, #48	@ 0x30
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	701a      	strb	r2, [r3, #0]
					break;
 8002fc2:	e0b9      	b.n	8003138 <GameShot+0x220>
					for(int j = 0; j < NUMBER_ENEMIES; j++)
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	617b      	str	r3, [r7, #20]
 8002fc8:	e073      	b.n	80030b2 <GameShot+0x19a>
						if(g->enemies[j].active && !g->enemies[j].trackedByMissile)
 8002fca:	6879      	ldr	r1, [r7, #4]
 8002fcc:	697a      	ldr	r2, [r7, #20]
 8002fce:	4613      	mov	r3, r2
 8002fd0:	00db      	lsls	r3, r3, #3
 8002fd2:	4413      	add	r3, r2
 8002fd4:	009b      	lsls	r3, r3, #2
 8002fd6:	440b      	add	r3, r1
 8002fd8:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 8002fdc:	781b      	ldrb	r3, [r3, #0]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d064      	beq.n	80030ac <GameShot+0x194>
 8002fe2:	6879      	ldr	r1, [r7, #4]
 8002fe4:	697a      	ldr	r2, [r7, #20]
 8002fe6:	4613      	mov	r3, r2
 8002fe8:	00db      	lsls	r3, r3, #3
 8002fea:	4413      	add	r3, r2
 8002fec:	009b      	lsls	r3, r3, #2
 8002fee:	440b      	add	r3, r1
 8002ff0:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8002ff4:	781b      	ldrb	r3, [r3, #0]
 8002ff6:	f083 0301 	eor.w	r3, r3, #1
 8002ffa:	b2db      	uxtb	r3, r3
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d055      	beq.n	80030ac <GameShot+0x194>
							is_any_enemies_active = true;
 8003000:	2301      	movs	r3, #1
 8003002:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
							temp_distance = sqrt(pow(g->enemies[j].x - g->player.x, 2) + pow(g->enemies[j].y - g->player.y, 2));
 8003006:	6879      	ldr	r1, [r7, #4]
 8003008:	697a      	ldr	r2, [r7, #20]
 800300a:	4613      	mov	r3, r2
 800300c:	00db      	lsls	r3, r3, #3
 800300e:	4413      	add	r3, r2
 8003010:	009b      	lsls	r3, r3, #2
 8003012:	440b      	add	r3, r1
 8003014:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8003018:	681a      	ldr	r2, [r3, #0]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	1ad3      	subs	r3, r2, r3
 8003020:	4618      	mov	r0, r3
 8003022:	f7fd fa77 	bl	8000514 <__aeabi_i2d>
 8003026:	4602      	mov	r2, r0
 8003028:	460b      	mov	r3, r1
 800302a:	ed9f 1b4b 	vldr	d1, [pc, #300]	@ 8003158 <GameShot+0x240>
 800302e:	ec43 2b10 	vmov	d0, r2, r3
 8003032:	f005 ff75 	bl	8008f20 <pow>
 8003036:	ec55 4b10 	vmov	r4, r5, d0
 800303a:	6879      	ldr	r1, [r7, #4]
 800303c:	697a      	ldr	r2, [r7, #20]
 800303e:	4613      	mov	r3, r2
 8003040:	00db      	lsls	r3, r3, #3
 8003042:	4413      	add	r3, r2
 8003044:	009b      	lsls	r3, r3, #2
 8003046:	440b      	add	r3, r1
 8003048:	f503 7321 	add.w	r3, r3, #644	@ 0x284
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	1ad3      	subs	r3, r2, r3
 8003054:	4618      	mov	r0, r3
 8003056:	f7fd fa5d 	bl	8000514 <__aeabi_i2d>
 800305a:	4602      	mov	r2, r0
 800305c:	460b      	mov	r3, r1
 800305e:	ed9f 1b3e 	vldr	d1, [pc, #248]	@ 8003158 <GameShot+0x240>
 8003062:	ec43 2b10 	vmov	d0, r2, r3
 8003066:	f005 ff5b 	bl	8008f20 <pow>
 800306a:	ec53 2b10 	vmov	r2, r3, d0
 800306e:	4620      	mov	r0, r4
 8003070:	4629      	mov	r1, r5
 8003072:	f7fd f903 	bl	800027c <__adddf3>
 8003076:	4602      	mov	r2, r0
 8003078:	460b      	mov	r3, r1
 800307a:	ec43 2b17 	vmov	d7, r2, r3
 800307e:	eeb0 0a47 	vmov.f32	s0, s14
 8003082:	eef0 0a67 	vmov.f32	s1, s15
 8003086:	f005 ffbb 	bl	8009000 <sqrt>
 800308a:	ed87 0b02 	vstr	d0, [r7, #8]
							if (temp_distance < smolest_distance)
 800308e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003092:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003096:	f7fd fd19 	bl	8000acc <__aeabi_dcmplt>
 800309a:	4603      	mov	r3, r0
 800309c:	2b00      	cmp	r3, #0
 800309e:	d005      	beq.n	80030ac <GameShot+0x194>
								smolest_distance = temp_distance;
 80030a0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80030a4:	e9c7 2306 	strd	r2, r3, [r7, #24]
								closest_enemy_number = j;
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	623b      	str	r3, [r7, #32]
					for(int j = 0; j < NUMBER_ENEMIES; j++)
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	3301      	adds	r3, #1
 80030b0:	617b      	str	r3, [r7, #20]
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	2b09      	cmp	r3, #9
 80030b6:	dd88      	ble.n	8002fca <GameShot+0xb2>
					if(is_any_enemies_active)
 80030b8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d02f      	beq.n	8003120 <GameShot+0x208>
						random_tracking_number = rand();
 80030c0:	f004 ff52 	bl	8007f68 <rand>
 80030c4:	6138      	str	r0, [r7, #16]
						g->enemies[closest_enemy_number].trackNumber = random_tracking_number;
 80030c6:	6879      	ldr	r1, [r7, #4]
 80030c8:	6a3a      	ldr	r2, [r7, #32]
 80030ca:	4613      	mov	r3, r2
 80030cc:	00db      	lsls	r3, r3, #3
 80030ce:	4413      	add	r3, r2
 80030d0:	009b      	lsls	r3, r3, #2
 80030d2:	440b      	add	r3, r1
 80030d4:	f503 7327 	add.w	r3, r3, #668	@ 0x29c
 80030d8:	693a      	ldr	r2, [r7, #16]
 80030da:	601a      	str	r2, [r3, #0]
						g->enemies[closest_enemy_number].trackedByMissile = true;
 80030dc:	6879      	ldr	r1, [r7, #4]
 80030de:	6a3a      	ldr	r2, [r7, #32]
 80030e0:	4613      	mov	r3, r2
 80030e2:	00db      	lsls	r3, r3, #3
 80030e4:	4413      	add	r3, r2
 80030e6:	009b      	lsls	r3, r3, #2
 80030e8:	440b      	add	r3, r1
 80030ea:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 80030ee:	2201      	movs	r2, #1
 80030f0:	701a      	strb	r2, [r3, #0]
						g->shots[i].type = ST_Tracker;
 80030f2:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80030f6:	6879      	ldr	r1, [r7, #4]
 80030f8:	4613      	mov	r3, r2
 80030fa:	009b      	lsls	r3, r3, #2
 80030fc:	4413      	add	r3, r2
 80030fe:	009b      	lsls	r3, r3, #2
 8003100:	440b      	add	r3, r1
 8003102:	3330      	adds	r3, #48	@ 0x30
 8003104:	2201      	movs	r2, #1
 8003106:	701a      	strb	r2, [r3, #0]
						g->shots[i].trackNumber = random_tracking_number;
 8003108:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800310c:	6879      	ldr	r1, [r7, #4]
 800310e:	4613      	mov	r3, r2
 8003110:	009b      	lsls	r3, r3, #2
 8003112:	4413      	add	r3, r2
 8003114:	009b      	lsls	r3, r3, #2
 8003116:	440b      	add	r3, r1
 8003118:	3334      	adds	r3, #52	@ 0x34
 800311a:	693a      	ldr	r2, [r7, #16]
 800311c:	601a      	str	r2, [r3, #0]
					break;
 800311e:	e00a      	b.n	8003136 <GameShot+0x21e>
						g->shots[i].type = ST_Normal;
 8003120:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8003124:	6879      	ldr	r1, [r7, #4]
 8003126:	4613      	mov	r3, r2
 8003128:	009b      	lsls	r3, r3, #2
 800312a:	4413      	add	r3, r2
 800312c:	009b      	lsls	r3, r3, #2
 800312e:	440b      	add	r3, r1
 8003130:	3330      	adds	r3, #48	@ 0x30
 8003132:	2200      	movs	r2, #0
 8003134:	701a      	strb	r2, [r3, #0]
					break;
 8003136:	bf00      	nop
				return;
 8003138:	e009      	b.n	800314e <GameShot+0x236>
		for (i = 0; i < NUMBER_SHOTS; ++i)
 800313a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800313e:	3301      	adds	r3, #1
 8003140:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8003144:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003148:	2b18      	cmp	r3, #24
 800314a:	f67f aef5 	bls.w	8002f38 <GameShot+0x20>
			}
		}
}
 800314e:	3728      	adds	r7, #40	@ 0x28
 8003150:	46bd      	mov	sp, r7
 8003152:	bdb0      	pop	{r4, r5, r7, pc}
 8003154:	f3af 8000 	nop.w
 8003158:	00000000 	.word	0x00000000
 800315c:	40000000 	.word	0x40000000
 8003160:	407f4000 	.word	0x407f4000

08003164 <GameShotBoss>:

void GameShotBoss(GameCtx* g){
 8003164:	b480      	push	{r7}
 8003166:	b085      	sub	sp, #20
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
	/*
		 * Handling boss shots.
		 */
		uint8_t i;

		for (i = 0; i < NUMBER_BOSS_SHOTS; ++i)
 800316c:	2300      	movs	r3, #0
 800316e:	73fb      	strb	r3, [r7, #15]
 8003170:	e038      	b.n	80031e4 <GameShotBoss+0x80>
		{
			if (!g->bossShots[i].active)
 8003172:	7bfa      	ldrb	r2, [r7, #15]
 8003174:	6879      	ldr	r1, [r7, #4]
 8003176:	4613      	mov	r3, r2
 8003178:	009b      	lsls	r3, r3, #2
 800317a:	4413      	add	r3, r2
 800317c:	009b      	lsls	r3, r3, #2
 800317e:	440b      	add	r3, r1
 8003180:	f503 7306 	add.w	r3, r3, #536	@ 0x218
 8003184:	781b      	ldrb	r3, [r3, #0]
 8003186:	f083 0301 	eor.w	r3, r3, #1
 800318a:	b2db      	uxtb	r3, r3
 800318c:	2b00      	cmp	r3, #0
 800318e:	d026      	beq.n	80031de <GameShotBoss+0x7a>
			{
				g->bossShots[i].active = true;
 8003190:	7bfa      	ldrb	r2, [r7, #15]
 8003192:	6879      	ldr	r1, [r7, #4]
 8003194:	4613      	mov	r3, r2
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	4413      	add	r3, r2
 800319a:	009b      	lsls	r3, r3, #2
 800319c:	440b      	add	r3, r1
 800319e:	f503 7306 	add.w	r3, r3, #536	@ 0x218
 80031a2:	2201      	movs	r2, #1
 80031a4:	701a      	strb	r2, [r3, #0]
				g->bossShots[i].x = g->boss.x;
 80031a6:	7bfa      	ldrb	r2, [r7, #15]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	f8d3 1a28 	ldr.w	r1, [r3, #2600]	@ 0xa28
 80031ae:	6878      	ldr	r0, [r7, #4]
 80031b0:	4613      	mov	r3, r2
 80031b2:	009b      	lsls	r3, r3, #2
 80031b4:	4413      	add	r3, r2
 80031b6:	009b      	lsls	r3, r3, #2
 80031b8:	4403      	add	r3, r0
 80031ba:	f503 7307 	add.w	r3, r3, #540	@ 0x21c
 80031be:	6019      	str	r1, [r3, #0]
				g->bossShots[i].y = g->boss.y + 5;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	f8d3 3a2c 	ldr.w	r3, [r3, #2604]	@ 0xa2c
 80031c6:	7bfa      	ldrb	r2, [r7, #15]
 80031c8:	1d59      	adds	r1, r3, #5
 80031ca:	6878      	ldr	r0, [r7, #4]
 80031cc:	4613      	mov	r3, r2
 80031ce:	009b      	lsls	r3, r3, #2
 80031d0:	4413      	add	r3, r2
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	4403      	add	r3, r0
 80031d6:	f503 7308 	add.w	r3, r3, #544	@ 0x220
 80031da:	6019      	str	r1, [r3, #0]
				return;
 80031dc:	e005      	b.n	80031ea <GameShotBoss+0x86>
		for (i = 0; i < NUMBER_BOSS_SHOTS; ++i)
 80031de:	7bfb      	ldrb	r3, [r7, #15]
 80031e0:	3301      	adds	r3, #1
 80031e2:	73fb      	strb	r3, [r7, #15]
 80031e4:	7bfb      	ldrb	r3, [r7, #15]
 80031e6:	2b04      	cmp	r3, #4
 80031e8:	d9c3      	bls.n	8003172 <GameShotBoss+0xe>
			}
		}
}
 80031ea:	3714      	adds	r7, #20
 80031ec:	46bd      	mov	sp, r7
 80031ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f2:	4770      	bx	lr

080031f4 <Colliding>:

bool Colliding(int x0, int y0, int x1, int y1){
 80031f4:	b480      	push	{r7}
 80031f6:	b087      	sub	sp, #28
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	60f8      	str	r0, [r7, #12]
 80031fc:	60b9      	str	r1, [r7, #8]
 80031fe:	607a      	str	r2, [r7, #4]
 8003200:	603b      	str	r3, [r7, #0]
	/*
		 * Checking whether objects collide with each other.
		 */
		int dx = abs(x0 - x1);
 8003202:	68fa      	ldr	r2, [r7, #12]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	1ad3      	subs	r3, r2, r3
 8003208:	2b00      	cmp	r3, #0
 800320a:	bfb8      	it	lt
 800320c:	425b      	neglt	r3, r3
 800320e:	617b      	str	r3, [r7, #20]
		int dy = abs(y0 - y1);
 8003210:	68ba      	ldr	r2, [r7, #8]
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	1ad3      	subs	r3, r2, r3
 8003216:	2b00      	cmp	r3, #0
 8003218:	bfb8      	it	lt
 800321a:	425b      	neglt	r3, r3
 800321c:	613b      	str	r3, [r7, #16]
		return dx < 6 && dy < 9;
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	2b05      	cmp	r3, #5
 8003222:	dc04      	bgt.n	800322e <Colliding+0x3a>
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	2b08      	cmp	r3, #8
 8003228:	dc01      	bgt.n	800322e <Colliding+0x3a>
 800322a:	2301      	movs	r3, #1
 800322c:	e000      	b.n	8003230 <Colliding+0x3c>
 800322e:	2300      	movs	r3, #0
 8003230:	f003 0301 	and.w	r3, r3, #1
 8003234:	b2db      	uxtb	r3, r3
}
 8003236:	4618      	mov	r0, r3
 8003238:	371c      	adds	r7, #28
 800323a:	46bd      	mov	sp, r7
 800323c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003240:	4770      	bx	lr
	...

08003244 <GameAddEnemy>:

void GameAddEnemy(GameCtx* g){
 8003244:	b580      	push	{r7, lr}
 8003246:	b084      	sub	sp, #16
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
		 * Setting its initial parameters, i.e. position, refreshment, graphics, type.
		 */
		uint8_t i;
		uint8_t enemy_type;

		for(i = 0; i < g->player.level; i++)
 800324c:	2300      	movs	r3, #0
 800324e:	73fb      	strb	r3, [r7, #15]
 8003250:	e101      	b.n	8003456 <GameAddEnemy+0x212>
		{
			if(!g->enemies[i].active)
 8003252:	7bfa      	ldrb	r2, [r7, #15]
 8003254:	6879      	ldr	r1, [r7, #4]
 8003256:	4613      	mov	r3, r2
 8003258:	00db      	lsls	r3, r3, #3
 800325a:	4413      	add	r3, r2
 800325c:	009b      	lsls	r3, r3, #2
 800325e:	440b      	add	r3, r1
 8003260:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 8003264:	781b      	ldrb	r3, [r3, #0]
 8003266:	f083 0301 	eor.w	r3, r3, #1
 800326a:	b2db      	uxtb	r3, r3
 800326c:	2b00      	cmp	r3, #0
 800326e:	f000 80ef 	beq.w	8003450 <GameAddEnemy+0x20c>
			{
				g->enemies[i].active = true;
 8003272:	7bfa      	ldrb	r2, [r7, #15]
 8003274:	6879      	ldr	r1, [r7, #4]
 8003276:	4613      	mov	r3, r2
 8003278:	00db      	lsls	r3, r3, #3
 800327a:	4413      	add	r3, r2
 800327c:	009b      	lsls	r3, r3, #2
 800327e:	440b      	add	r3, r1
 8003280:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 8003284:	2201      	movs	r2, #1
 8003286:	701a      	strb	r2, [r3, #0]
				g->enemies[i].x = SCREEN_WIDTH + 12;
 8003288:	7bfa      	ldrb	r2, [r7, #15]
 800328a:	6879      	ldr	r1, [r7, #4]
 800328c:	4613      	mov	r3, r2
 800328e:	00db      	lsls	r3, r3, #3
 8003290:	4413      	add	r3, r2
 8003292:	009b      	lsls	r3, r3, #2
 8003294:	440b      	add	r3, r1
 8003296:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 800329a:	228c      	movs	r2, #140	@ 0x8c
 800329c:	601a      	str	r2, [r3, #0]
				g->enemies[i].y = ((rand()%(SCREEN_HEIGHT - 10))+10);
 800329e:	f004 fe63 	bl	8007f68 <rand>
 80032a2:	4602      	mov	r2, r0
 80032a4:	4b72      	ldr	r3, [pc, #456]	@ (8003470 <GameAddEnemy+0x22c>)
 80032a6:	fb83 1302 	smull	r1, r3, r3, r2
 80032aa:	1119      	asrs	r1, r3, #4
 80032ac:	17d3      	asrs	r3, r2, #31
 80032ae:	1acb      	subs	r3, r1, r3
 80032b0:	2176      	movs	r1, #118	@ 0x76
 80032b2:	fb01 f303 	mul.w	r3, r1, r3
 80032b6:	1ad3      	subs	r3, r2, r3
 80032b8:	7bfa      	ldrb	r2, [r7, #15]
 80032ba:	f103 010a 	add.w	r1, r3, #10
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	4613      	mov	r3, r2
 80032c2:	00db      	lsls	r3, r3, #3
 80032c4:	4413      	add	r3, r2
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	4403      	add	r3, r0
 80032ca:	f503 7321 	add.w	r3, r3, #644	@ 0x284
 80032ce:	6019      	str	r1, [r3, #0]
				g->enemies[i].trackedByMissile = false;
 80032d0:	7bfa      	ldrb	r2, [r7, #15]
 80032d2:	6879      	ldr	r1, [r7, #4]
 80032d4:	4613      	mov	r3, r2
 80032d6:	00db      	lsls	r3, r3, #3
 80032d8:	4413      	add	r3, r2
 80032da:	009b      	lsls	r3, r3, #2
 80032dc:	440b      	add	r3, r1
 80032de:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 80032e2:	2200      	movs	r2, #0
 80032e4:	701a      	strb	r2, [r3, #0]
				g->enemies[i].trackNumber = 0;
 80032e6:	7bfa      	ldrb	r2, [r7, #15]
 80032e8:	6879      	ldr	r1, [r7, #4]
 80032ea:	4613      	mov	r3, r2
 80032ec:	00db      	lsls	r3, r3, #3
 80032ee:	4413      	add	r3, r2
 80032f0:	009b      	lsls	r3, r3, #2
 80032f2:	440b      	add	r3, r1
 80032f4:	f503 7327 	add.w	r3, r3, #668	@ 0x29c
 80032f8:	2200      	movs	r2, #0
 80032fa:	601a      	str	r2, [r3, #0]

				enemy_type = (rand()%100);
 80032fc:	f004 fe34 	bl	8007f68 <rand>
 8003300:	4603      	mov	r3, r0
 8003302:	4a5c      	ldr	r2, [pc, #368]	@ (8003474 <GameAddEnemy+0x230>)
 8003304:	fb82 1203 	smull	r1, r2, r2, r3
 8003308:	1151      	asrs	r1, r2, #5
 800330a:	17da      	asrs	r2, r3, #31
 800330c:	1a8a      	subs	r2, r1, r2
 800330e:	2164      	movs	r1, #100	@ 0x64
 8003310:	fb01 f202 	mul.w	r2, r1, r2
 8003314:	1a9a      	subs	r2, r3, r2
 8003316:	4613      	mov	r3, r2
 8003318:	73bb      	strb	r3, [r7, #14]

				if((enemy_type > 50))
 800331a:	7bbb      	ldrb	r3, [r7, #14]
 800331c:	2b32      	cmp	r3, #50	@ 0x32
 800331e:	d92b      	bls.n	8003378 <GameAddEnemy+0x134>
				{

					g->enemies[i].type = ET_Diver;
 8003320:	7bfa      	ldrb	r2, [r7, #15]
 8003322:	6879      	ldr	r1, [r7, #4]
 8003324:	4613      	mov	r3, r2
 8003326:	00db      	lsls	r3, r3, #3
 8003328:	4413      	add	r3, r2
 800332a:	009b      	lsls	r3, r3, #2
 800332c:	440b      	add	r3, r1
 800332e:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 8003332:	2200      	movs	r2, #0
 8003334:	701a      	strb	r2, [r3, #0]
					g->enemies[i].updateDelay = (rand()%3);	//Speed setting (less = faster)
 8003336:	f004 fe17 	bl	8007f68 <rand>
 800333a:	4601      	mov	r1, r0
 800333c:	7bf8      	ldrb	r0, [r7, #15]
 800333e:	4b4e      	ldr	r3, [pc, #312]	@ (8003478 <GameAddEnemy+0x234>)
 8003340:	fb83 3201 	smull	r3, r2, r3, r1
 8003344:	17cb      	asrs	r3, r1, #31
 8003346:	1ad2      	subs	r2, r2, r3
 8003348:	4613      	mov	r3, r2
 800334a:	005b      	lsls	r3, r3, #1
 800334c:	4413      	add	r3, r2
 800334e:	1aca      	subs	r2, r1, r3
 8003350:	6879      	ldr	r1, [r7, #4]
 8003352:	4603      	mov	r3, r0
 8003354:	00db      	lsls	r3, r3, #3
 8003356:	4403      	add	r3, r0
 8003358:	009b      	lsls	r3, r3, #2
 800335a:	440b      	add	r3, r1
 800335c:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 8003360:	601a      	str	r2, [r3, #0]
					g->enemies[i].bitMap = driver_map;
 8003362:	7bfa      	ldrb	r2, [r7, #15]
 8003364:	6879      	ldr	r1, [r7, #4]
 8003366:	4613      	mov	r3, r2
 8003368:	00db      	lsls	r3, r3, #3
 800336a:	4413      	add	r3, r2
 800336c:	009b      	lsls	r3, r3, #2
 800336e:	440b      	add	r3, r1
 8003370:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 8003374:	4a41      	ldr	r2, [pc, #260]	@ (800347c <GameAddEnemy+0x238>)
 8003376:	601a      	str	r2, [r3, #0]
				}
				if((enemy_type > 20 && enemy_type < 50) && (g->player.level > 4))
 8003378:	7bbb      	ldrb	r3, [r7, #14]
 800337a:	2b14      	cmp	r3, #20
 800337c:	d933      	bls.n	80033e6 <GameAddEnemy+0x1a2>
 800337e:	7bbb      	ldrb	r3, [r7, #14]
 8003380:	2b31      	cmp	r3, #49	@ 0x31
 8003382:	d830      	bhi.n	80033e6 <GameAddEnemy+0x1a2>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	695b      	ldr	r3, [r3, #20]
 8003388:	2b04      	cmp	r3, #4
 800338a:	dd2c      	ble.n	80033e6 <GameAddEnemy+0x1a2>
				{
					g->enemies[i].type = ET_Tracker;
 800338c:	7bfa      	ldrb	r2, [r7, #15]
 800338e:	6879      	ldr	r1, [r7, #4]
 8003390:	4613      	mov	r3, r2
 8003392:	00db      	lsls	r3, r3, #3
 8003394:	4413      	add	r3, r2
 8003396:	009b      	lsls	r3, r3, #2
 8003398:	440b      	add	r3, r1
 800339a:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 800339e:	2201      	movs	r2, #1
 80033a0:	701a      	strb	r2, [r3, #0]
					g->enemies[i].updateDelay = ((rand()%3)+1);
 80033a2:	f004 fde1 	bl	8007f68 <rand>
 80033a6:	4601      	mov	r1, r0
 80033a8:	4b33      	ldr	r3, [pc, #204]	@ (8003478 <GameAddEnemy+0x234>)
 80033aa:	fb83 3201 	smull	r3, r2, r3, r1
 80033ae:	17cb      	asrs	r3, r1, #31
 80033b0:	1ad2      	subs	r2, r2, r3
 80033b2:	4613      	mov	r3, r2
 80033b4:	005b      	lsls	r3, r3, #1
 80033b6:	4413      	add	r3, r2
 80033b8:	1aca      	subs	r2, r1, r3
 80033ba:	7bf9      	ldrb	r1, [r7, #15]
 80033bc:	3201      	adds	r2, #1
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	460b      	mov	r3, r1
 80033c2:	00db      	lsls	r3, r3, #3
 80033c4:	440b      	add	r3, r1
 80033c6:	009b      	lsls	r3, r3, #2
 80033c8:	4403      	add	r3, r0
 80033ca:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 80033ce:	601a      	str	r2, [r3, #0]
					g->enemies[i].bitMap = tracker_map;
 80033d0:	7bfa      	ldrb	r2, [r7, #15]
 80033d2:	6879      	ldr	r1, [r7, #4]
 80033d4:	4613      	mov	r3, r2
 80033d6:	00db      	lsls	r3, r3, #3
 80033d8:	4413      	add	r3, r2
 80033da:	009b      	lsls	r3, r3, #2
 80033dc:	440b      	add	r3, r1
 80033de:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 80033e2:	4a27      	ldr	r2, [pc, #156]	@ (8003480 <GameAddEnemy+0x23c>)
 80033e4:	601a      	str	r2, [r3, #0]
				}
				if((enemy_type < 20) && (g->player.level > 7))
 80033e6:	7bbb      	ldrb	r3, [r7, #14]
 80033e8:	2b13      	cmp	r3, #19
 80033ea:	d83b      	bhi.n	8003464 <GameAddEnemy+0x220>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	695b      	ldr	r3, [r3, #20]
 80033f0:	2b07      	cmp	r3, #7
 80033f2:	dd37      	ble.n	8003464 <GameAddEnemy+0x220>
				{
					g->enemies[i].type = ET_Bobber;
 80033f4:	7bfa      	ldrb	r2, [r7, #15]
 80033f6:	6879      	ldr	r1, [r7, #4]
 80033f8:	4613      	mov	r3, r2
 80033fa:	00db      	lsls	r3, r3, #3
 80033fc:	4413      	add	r3, r2
 80033fe:	009b      	lsls	r3, r3, #2
 8003400:	440b      	add	r3, r1
 8003402:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 8003406:	2202      	movs	r2, #2
 8003408:	701a      	strb	r2, [r3, #0]
					g->enemies[i].updateDelay = ((rand()%3)+2);
 800340a:	f004 fdad 	bl	8007f68 <rand>
 800340e:	4601      	mov	r1, r0
 8003410:	4b19      	ldr	r3, [pc, #100]	@ (8003478 <GameAddEnemy+0x234>)
 8003412:	fb83 3201 	smull	r3, r2, r3, r1
 8003416:	17cb      	asrs	r3, r1, #31
 8003418:	1ad2      	subs	r2, r2, r3
 800341a:	4613      	mov	r3, r2
 800341c:	005b      	lsls	r3, r3, #1
 800341e:	4413      	add	r3, r2
 8003420:	1aca      	subs	r2, r1, r3
 8003422:	7bf9      	ldrb	r1, [r7, #15]
 8003424:	3202      	adds	r2, #2
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	460b      	mov	r3, r1
 800342a:	00db      	lsls	r3, r3, #3
 800342c:	440b      	add	r3, r1
 800342e:	009b      	lsls	r3, r3, #2
 8003430:	4403      	add	r3, r0
 8003432:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 8003436:	601a      	str	r2, [r3, #0]
					g->enemies[i].bitMap = bobber_map;
 8003438:	7bfa      	ldrb	r2, [r7, #15]
 800343a:	6879      	ldr	r1, [r7, #4]
 800343c:	4613      	mov	r3, r2
 800343e:	00db      	lsls	r3, r3, #3
 8003440:	4413      	add	r3, r2
 8003442:	009b      	lsls	r3, r3, #2
 8003444:	440b      	add	r3, r1
 8003446:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 800344a:	4a0e      	ldr	r2, [pc, #56]	@ (8003484 <GameAddEnemy+0x240>)
 800344c:	601a      	str	r2, [r3, #0]
				}
				break;
 800344e:	e009      	b.n	8003464 <GameAddEnemy+0x220>
		for(i = 0; i < g->player.level; i++)
 8003450:	7bfb      	ldrb	r3, [r7, #15]
 8003452:	3301      	adds	r3, #1
 8003454:	73fb      	strb	r3, [r7, #15]
 8003456:	7bfa      	ldrb	r2, [r7, #15]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	695b      	ldr	r3, [r3, #20]
 800345c:	429a      	cmp	r2, r3
 800345e:	f6ff aef8 	blt.w	8003252 <GameAddEnemy+0xe>
			}
		}
}
 8003462:	e000      	b.n	8003466 <GameAddEnemy+0x222>
				break;
 8003464:	bf00      	nop
}
 8003466:	bf00      	nop
 8003468:	3710      	adds	r7, #16
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}
 800346e:	bf00      	nop
 8003470:	22b63cbf 	.word	0x22b63cbf
 8003474:	51eb851f 	.word	0x51eb851f
 8003478:	55555556 	.word	0x55555556
 800347c:	0800a540 	.word	0x0800a540
 8003480:	0800a538 	.word	0x0800a538
 8003484:	0800a548 	.word	0x0800a548

08003488 <GameSetState>:

void GameSetState(GameCtx* g, GameState state){
 8003488:	b480      	push	{r7}
 800348a:	b083      	sub	sp, #12
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
 8003490:	460b      	mov	r3, r1
 8003492:	70fb      	strb	r3, [r7, #3]
	/*
	 * Sets the game state in the passed context
	 * */

	g->state = state;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	78fa      	ldrb	r2, [r7, #3]
 8003498:	f883 2a94 	strb.w	r2, [r3, #2708]	@ 0xa94
}
 800349c:	bf00      	nop
 800349e:	370c      	adds	r7, #12
 80034a0:	46bd      	mov	sp, r7
 80034a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a6:	4770      	bx	lr

080034a8 <GameGetState>:

GameState GameGetState(GameCtx* g){
 80034a8:	b480      	push	{r7}
 80034aa:	b083      	sub	sp, #12
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
	/*
	 * Returns the current play status of the passed context.
	 * */

	return g->state;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	f893 3a94 	ldrb.w	r3, [r3, #2708]	@ 0xa94
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	370c      	adds	r7, #12
 80034ba:	46bd      	mov	sp, r7
 80034bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c0:	4770      	bx	lr

080034c2 <GameGetPalyerScore>:

int GameGetPalyerScore(GameCtx* g){
 80034c2:	b480      	push	{r7}
 80034c4:	b083      	sub	sp, #12
 80034c6:	af00      	add	r7, sp, #0
 80034c8:	6078      	str	r0, [r7, #4]
	/*
	 * Returns the player's current score from the passed context.
	 * */

	return g->player.score;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	689b      	ldr	r3, [r3, #8]
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	370c      	adds	r7, #12
 80034d2:	46bd      	mov	sp, r7
 80034d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d8:	4770      	bx	lr
	...

080034dc <InputInit>:

/*
 * @brief Assignment of input data
 *
 */
void InputInit(ADC_HandleTypeDef* hadc, GPIO_TypeDef* btnPort, uint16_t btnPin){
 80034dc:	b480      	push	{r7}
 80034de:	b085      	sub	sp, #20
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	60f8      	str	r0, [r7, #12]
 80034e4:	60b9      	str	r1, [r7, #8]
 80034e6:	4613      	mov	r3, r2
 80034e8:	80fb      	strh	r3, [r7, #6]

	_hadc = hadc;
 80034ea:	4a07      	ldr	r2, [pc, #28]	@ (8003508 <InputInit+0x2c>)
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	6013      	str	r3, [r2, #0]
	_btnPort = btnPort;
 80034f0:	4a06      	ldr	r2, [pc, #24]	@ (800350c <InputInit+0x30>)
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	6013      	str	r3, [r2, #0]
	_btnPin = btnPin;
 80034f6:	4a06      	ldr	r2, [pc, #24]	@ (8003510 <InputInit+0x34>)
 80034f8:	88fb      	ldrh	r3, [r7, #6]
 80034fa:	8013      	strh	r3, [r2, #0]
}
 80034fc:	bf00      	nop
 80034fe:	3714      	adds	r7, #20
 8003500:	46bd      	mov	sp, r7
 8003502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003506:	4770      	bx	lr
 8003508:	20000b34 	.word	0x20000b34
 800350c:	20000b38 	.word	0x20000b38
 8003510:	20000b3c 	.word	0x20000b3c

08003514 <InputRead>:

/*
 * @brief Reading and returning current states
 */
InputSnapshot InputRead (void){
 8003514:	b580      	push	{r7, lr}
 8003516:	b084      	sub	sp, #16
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]

	InputSnapshot snap;
	snap.joystickYValue = HAL_ADC_GetValue(_hadc);
 800351c:	4b17      	ldr	r3, [pc, #92]	@ (800357c <InputRead+0x68>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4618      	mov	r0, r3
 8003522:	f001 fb4c 	bl	8004bbe <HAL_ADC_GetValue>
 8003526:	4603      	mov	r3, r0
 8003528:	60bb      	str	r3, [r7, #8]

	// Removal of button repetition
	_curentBtnState = HAL_GPIO_ReadPin(_btnPort, _btnPin);
 800352a:	4b15      	ldr	r3, [pc, #84]	@ (8003580 <InputRead+0x6c>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a15      	ldr	r2, [pc, #84]	@ (8003584 <InputRead+0x70>)
 8003530:	8812      	ldrh	r2, [r2, #0]
 8003532:	4611      	mov	r1, r2
 8003534:	4618      	mov	r0, r3
 8003536:	f002 fd57 	bl	8005fe8 <HAL_GPIO_ReadPin>
 800353a:	4603      	mov	r3, r0
 800353c:	461a      	mov	r2, r3
 800353e:	4b12      	ldr	r3, [pc, #72]	@ (8003588 <InputRead+0x74>)
 8003540:	701a      	strb	r2, [r3, #0]

	if(_curentBtnState && !_lastBtnState){
 8003542:	4b11      	ldr	r3, [pc, #68]	@ (8003588 <InputRead+0x74>)
 8003544:	781b      	ldrb	r3, [r3, #0]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d006      	beq.n	8003558 <InputRead+0x44>
 800354a:	4b10      	ldr	r3, [pc, #64]	@ (800358c <InputRead+0x78>)
 800354c:	781b      	ldrb	r3, [r3, #0]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d102      	bne.n	8003558 <InputRead+0x44>
		snap.btn1State = GPIO_PIN_SET;
 8003552:	2301      	movs	r3, #1
 8003554:	733b      	strb	r3, [r7, #12]
 8003556:	e001      	b.n	800355c <InputRead+0x48>
	} else {
		snap.btn1State = GPIO_PIN_RESET;
 8003558:	2300      	movs	r3, #0
 800355a:	733b      	strb	r3, [r7, #12]
	}
	_lastBtnState = _curentBtnState;
 800355c:	4b0a      	ldr	r3, [pc, #40]	@ (8003588 <InputRead+0x74>)
 800355e:	781a      	ldrb	r2, [r3, #0]
 8003560:	4b0a      	ldr	r3, [pc, #40]	@ (800358c <InputRead+0x78>)
 8003562:	701a      	strb	r2, [r3, #0]

	return snap;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	461a      	mov	r2, r3
 8003568:	f107 0308 	add.w	r3, r7, #8
 800356c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003570:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8003574:	6878      	ldr	r0, [r7, #4]
 8003576:	3710      	adds	r7, #16
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}
 800357c:	20000b34 	.word	0x20000b34
 8003580:	20000b38 	.word	0x20000b38
 8003584:	20000b3c 	.word	0x20000b3c
 8003588:	20000b3e 	.word	0x20000b3e
 800358c:	20000001 	.word	0x20000001

08003590 <itoa>:
* \param [in] base the base of conversion
* \return pointer to \em buffer
*//*-------------------------------------------------------------------------*/

char* itoa(int value, char* buffer, int base)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b088      	sub	sp, #32
 8003594:	af00      	add	r7, sp, #0
 8003596:	60f8      	str	r0, [r7, #12]
 8003598:	60b9      	str	r1, [r7, #8]
 800359a:	607a      	str	r2, [r7, #4]
	static const char digits[]="0123456789abcdef";

	char* buffer_copy=buffer;
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	61bb      	str	r3, [r7, #24]
	int32_t sign=0;
 80035a0:	2300      	movs	r3, #0
 80035a2:	61fb      	str	r3, [r7, #28]
	int32_t quot,rem;

	if ((base>=2)&&(base<=16))				// is the base valid?
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2b01      	cmp	r3, #1
 80035a8:	dd36      	ble.n	8003618 <itoa+0x88>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2b10      	cmp	r3, #16
 80035ae:	dc33      	bgt.n	8003618 <itoa+0x88>
	{
		if (base == 10 && (sign = value) < 0)// negative value and base == 10? store the copy (sign)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2b0a      	cmp	r3, #10
 80035b4:	d107      	bne.n	80035c6 <itoa+0x36>
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	61fb      	str	r3, [r7, #28]
 80035ba:	69fb      	ldr	r3, [r7, #28]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	da02      	bge.n	80035c6 <itoa+0x36>
			value = -value;					// make it positive
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	425b      	negs	r3, r3
 80035c4:	60fb      	str	r3, [r7, #12]

		do
		{
			quot=value/base;				// calculate quotient and remainder
 80035c6:	68fa      	ldr	r2, [r7, #12]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	fb92 f3f3 	sdiv	r3, r2, r3
 80035ce:	617b      	str	r3, [r7, #20]
			rem=value%base;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	687a      	ldr	r2, [r7, #4]
 80035d4:	fb93 f2f2 	sdiv	r2, r3, r2
 80035d8:	6879      	ldr	r1, [r7, #4]
 80035da:	fb01 f202 	mul.w	r2, r1, r2
 80035de:	1a9b      	subs	r3, r3, r2
 80035e0:	613b      	str	r3, [r7, #16]
			*buffer++ = digits[rem];		// append the remainder to the string
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	1c5a      	adds	r2, r3, #1
 80035e6:	60ba      	str	r2, [r7, #8]
 80035e8:	490f      	ldr	r1, [pc, #60]	@ (8003628 <itoa+0x98>)
 80035ea:	693a      	ldr	r2, [r7, #16]
 80035ec:	440a      	add	r2, r1
 80035ee:	7812      	ldrb	r2, [r2, #0]
 80035f0:	701a      	strb	r2, [r3, #0]
		} while ((value=quot));				// loop while there is something to convert
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	60fb      	str	r3, [r7, #12]
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d1e4      	bne.n	80035c6 <itoa+0x36>

		if (sign<0)							// was the value negative?
 80035fc:	69fb      	ldr	r3, [r7, #28]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	da04      	bge.n	800360c <itoa+0x7c>
			*buffer++='-';					// append the sign
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	1c5a      	adds	r2, r3, #1
 8003606:	60ba      	str	r2, [r7, #8]
 8003608:	222d      	movs	r2, #45	@ 0x2d
 800360a:	701a      	strb	r2, [r3, #0]

		__reverse(buffer_copy,buffer-1);		// reverse the string
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	3b01      	subs	r3, #1
 8003610:	4619      	mov	r1, r3
 8003612:	69b8      	ldr	r0, [r7, #24]
 8003614:	f000 f80a 	bl	800362c <__reverse>
	}

	*buffer='\0';
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	2200      	movs	r2, #0
 800361c:	701a      	strb	r2, [r3, #0]
	return buffer_copy;
 800361e:	69bb      	ldr	r3, [r7, #24]
}
 8003620:	4618      	mov	r0, r3
 8003622:	3720      	adds	r7, #32
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}
 8003628:	0800a5bc 	.word	0x0800a5bc

0800362c <__reverse>:
* \param [in,out] begin pointer to the beginning of the string
* \param [in,out] end pointer to the end of the string
*//*-------------------------------------------------------------------------*/

static void __reverse(char* begin,char* end)
{
 800362c:	b480      	push	{r7}
 800362e:	b085      	sub	sp, #20
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
 8003634:	6039      	str	r1, [r7, #0]
	char temp;

	while (end>begin)
 8003636:	e00d      	b.n	8003654 <__reverse+0x28>
	{
		temp=*end;
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	781b      	ldrb	r3, [r3, #0]
 800363c:	73fb      	strb	r3, [r7, #15]
		*end--=*begin;
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	1e5a      	subs	r2, r3, #1
 8003642:	603a      	str	r2, [r7, #0]
 8003644:	687a      	ldr	r2, [r7, #4]
 8003646:	7812      	ldrb	r2, [r2, #0]
 8003648:	701a      	strb	r2, [r3, #0]
		*begin++=temp;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	1c5a      	adds	r2, r3, #1
 800364e:	607a      	str	r2, [r7, #4]
 8003650:	7bfa      	ldrb	r2, [r7, #15]
 8003652:	701a      	strb	r2, [r3, #0]
	while (end>begin)
 8003654:	683a      	ldr	r2, [r7, #0]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	429a      	cmp	r2, r3
 800365a:	d8ed      	bhi.n	8003638 <__reverse+0xc>
	}
}
 800365c:	bf00      	nop
 800365e:	bf00      	nop
 8003660:	3714      	adds	r7, #20
 8003662:	46bd      	mov	sp, r7
 8003664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003668:	4770      	bx	lr
	...

0800366c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800366c:	b590      	push	{r4, r7, lr}
 800366e:	b083      	sub	sp, #12
 8003670:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003672:	f000 fe8c 	bl	800438e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003676:	f000 f84f 	bl	8003718 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800367a:	f000 f97d 	bl	8003978 <MX_GPIO_Init>
  MX_DMA_Init();
 800367e:	f000 f963 	bl	8003948 <MX_DMA_Init>
  MX_ADC1_Init();
 8003682:	f000 f8bf 	bl	8003804 <MX_ADC1_Init>
  MX_SPI1_Init();
 8003686:	f000 f921 	bl	80038cc <MX_SPI1_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 800368a:	f000 f8a7 	bl	80037dc <MX_NVIC_Init>

//  // Konfiguracja ADC z DMA
//  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
//  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)value, 2);

  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 800368e:	217f      	movs	r1, #127	@ 0x7f
 8003690:	481d      	ldr	r0, [pc, #116]	@ (8003708 <main+0x9c>)
 8003692:	f001 ff95 	bl	80055c0 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start(&hadc1);
 8003696:	481c      	ldr	r0, [pc, #112]	@ (8003708 <main+0x9c>)
 8003698:	f001 fa2e 	bl	8004af8 <HAL_ADC_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  SSD1327_SpiInit(&hspi1);
 800369c:	481b      	ldr	r0, [pc, #108]	@ (800370c <main+0xa0>)
 800369e:	f000 fb1f 	bl	8003ce0 <SSD1327_SpiInit>
  SSD1327_CLR();
 80036a2:	f000 fbdb 	bl	8003e5c <SSD1327_CLR>
  SSD1327_Display();
 80036a6:	f000 fb9d 	bl	8003de4 <SSD1327_Display>

  //start_game();
  GameInit(&g_singleton);
 80036aa:	4819      	ldr	r0, [pc, #100]	@ (8003710 <main+0xa4>)
 80036ac:	f7fd fda9 	bl	8001202 <GameInit>
  InputInit(&hadc1, USER_BTN_1_GPIO_Port, USER_BTN_1_Pin);
 80036b0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80036b4:	f04f 4190 	mov.w	r1, #1207959552	@ 0x48000000
 80036b8:	4813      	ldr	r0, [pc, #76]	@ (8003708 <main+0x9c>)
 80036ba:	f7ff ff0f 	bl	80034dc <InputInit>
  //add_enemy();

  while (1)
  {
	  input_Snap = InputRead();
 80036be:	4c15      	ldr	r4, [pc, #84]	@ (8003714 <main+0xa8>)
 80036c0:	463b      	mov	r3, r7
 80036c2:	4618      	mov	r0, r3
 80036c4:	f7ff ff26 	bl	8003514 <InputRead>
 80036c8:	4622      	mov	r2, r4
 80036ca:	463b      	mov	r3, r7
 80036cc:	e893 0003 	ldmia.w	r3, {r0, r1}
 80036d0:	e882 0003 	stmia.w	r2, {r0, r1}

		switch (GameGetState(&g_singleton))
 80036d4:	480e      	ldr	r0, [pc, #56]	@ (8003710 <main+0xa4>)
 80036d6:	f7ff fee7 	bl	80034a8 <GameGetState>
 80036da:	4603      	mov	r3, r0
 80036dc:	2b02      	cmp	r3, #2
 80036de:	d00e      	beq.n	80036fe <main+0x92>
 80036e0:	2b02      	cmp	r3, #2
 80036e2:	dcec      	bgt.n	80036be <main+0x52>
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d002      	beq.n	80036ee <main+0x82>
 80036e8:	2b01      	cmp	r3, #1
 80036ea:	d004      	beq.n	80036f6 <main+0x8a>
 80036ec:	e00b      	b.n	8003706 <main+0x9a>
		{
		case GS_Menu:
			RunMenu(&input_Snap); break;
 80036ee:	4809      	ldr	r0, [pc, #36]	@ (8003714 <main+0xa8>)
 80036f0:	f000 fa4a 	bl	8003b88 <RunMenu>
 80036f4:	e007      	b.n	8003706 <main+0x9a>
		case GS_Playing:
			RunGame(&input_Snap); break;
 80036f6:	4807      	ldr	r0, [pc, #28]	@ (8003714 <main+0xa8>)
 80036f8:	f000 fa26 	bl	8003b48 <RunGame>
 80036fc:	e003      	b.n	8003706 <main+0x9a>
		case GS_Dead:
			RunDead(&input_Snap);	break;
 80036fe:	4805      	ldr	r0, [pc, #20]	@ (8003714 <main+0xa8>)
 8003700:	f000 f9aa 	bl	8003a58 <RunDead>
 8003704:	bf00      	nop
	  input_Snap = InputRead();
 8003706:	e7da      	b.n	80036be <main+0x52>
 8003708:	20000b40 	.word	0x20000b40
 800370c:	20000ba4 	.word	0x20000ba4
 8003710:	20000098 	.word	0x20000098
 8003714:	20000c50 	.word	0x20000c50

08003718 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b096      	sub	sp, #88	@ 0x58
 800371c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800371e:	f107 0314 	add.w	r3, r7, #20
 8003722:	2244      	movs	r2, #68	@ 0x44
 8003724:	2100      	movs	r1, #0
 8003726:	4618      	mov	r0, r3
 8003728:	f004 fd61 	bl	80081ee <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800372c:	463b      	mov	r3, r7
 800372e:	2200      	movs	r2, #0
 8003730:	601a      	str	r2, [r3, #0]
 8003732:	605a      	str	r2, [r3, #4]
 8003734:	609a      	str	r2, [r3, #8]
 8003736:	60da      	str	r2, [r3, #12]
 8003738:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800373a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800373e:	f002 fca1 	bl	8006084 <HAL_PWREx_ControlVoltageScaling>
 8003742:	4603      	mov	r3, r0
 8003744:	2b00      	cmp	r3, #0
 8003746:	d001      	beq.n	800374c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8003748:	f000 fa88 	bl	8003c5c <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800374c:	f002 fc7c 	bl	8006048 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8003750:	4b21      	ldr	r3, [pc, #132]	@ (80037d8 <SystemClock_Config+0xc0>)
 8003752:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003756:	4a20      	ldr	r2, [pc, #128]	@ (80037d8 <SystemClock_Config+0xc0>)
 8003758:	f023 0318 	bic.w	r3, r3, #24
 800375c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8003760:	2314      	movs	r3, #20
 8003762:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8003764:	2301      	movs	r3, #1
 8003766:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8003768:	2301      	movs	r3, #1
 800376a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800376c:	2300      	movs	r3, #0
 800376e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8003770:	2360      	movs	r3, #96	@ 0x60
 8003772:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003774:	2302      	movs	r3, #2
 8003776:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8003778:	2301      	movs	r3, #1
 800377a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800377c:	2301      	movs	r3, #1
 800377e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8003780:	2328      	movs	r3, #40	@ 0x28
 8003782:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8003784:	2307      	movs	r3, #7
 8003786:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003788:	2302      	movs	r3, #2
 800378a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800378c:	2302      	movs	r3, #2
 800378e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003790:	f107 0314 	add.w	r3, r7, #20
 8003794:	4618      	mov	r0, r3
 8003796:	f002 fccb 	bl	8006130 <HAL_RCC_OscConfig>
 800379a:	4603      	mov	r3, r0
 800379c:	2b00      	cmp	r3, #0
 800379e:	d001      	beq.n	80037a4 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80037a0:	f000 fa5c 	bl	8003c5c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80037a4:	230f      	movs	r3, #15
 80037a6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80037a8:	2303      	movs	r3, #3
 80037aa:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80037ac:	2300      	movs	r3, #0
 80037ae:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80037b0:	2300      	movs	r3, #0
 80037b2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80037b4:	2300      	movs	r3, #0
 80037b6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80037b8:	463b      	mov	r3, r7
 80037ba:	2104      	movs	r1, #4
 80037bc:	4618      	mov	r0, r3
 80037be:	f003 f8cb 	bl	8006958 <HAL_RCC_ClockConfig>
 80037c2:	4603      	mov	r3, r0
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d001      	beq.n	80037cc <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80037c8:	f000 fa48 	bl	8003c5c <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80037cc:	f003 fca6 	bl	800711c <HAL_RCCEx_EnableMSIPLLMode>
}
 80037d0:	bf00      	nop
 80037d2:	3758      	adds	r7, #88	@ 0x58
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}
 80037d8:	40021000 	.word	0x40021000

080037dc <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	af00      	add	r7, sp, #0
  /* SPI1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80037e0:	2200      	movs	r2, #0
 80037e2:	2100      	movs	r1, #0
 80037e4:	2023      	movs	r0, #35	@ 0x23
 80037e6:	f002 f826 	bl	8005836 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80037ea:	2023      	movs	r0, #35	@ 0x23
 80037ec:	f002 f83f 	bl	800586e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80037f0:	2200      	movs	r2, #0
 80037f2:	2100      	movs	r1, #0
 80037f4:	200d      	movs	r0, #13
 80037f6:	f002 f81e 	bl	8005836 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80037fa:	200d      	movs	r0, #13
 80037fc:	f002 f837 	bl	800586e <HAL_NVIC_EnableIRQ>
}
 8003800:	bf00      	nop
 8003802:	bd80      	pop	{r7, pc}

08003804 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b086      	sub	sp, #24
 8003808:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800380a:	463b      	mov	r3, r7
 800380c:	2200      	movs	r2, #0
 800380e:	601a      	str	r2, [r3, #0]
 8003810:	605a      	str	r2, [r3, #4]
 8003812:	609a      	str	r2, [r3, #8]
 8003814:	60da      	str	r2, [r3, #12]
 8003816:	611a      	str	r2, [r3, #16]
 8003818:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800381a:	4b29      	ldr	r3, [pc, #164]	@ (80038c0 <MX_ADC1_Init+0xbc>)
 800381c:	4a29      	ldr	r2, [pc, #164]	@ (80038c4 <MX_ADC1_Init+0xc0>)
 800381e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8003820:	4b27      	ldr	r3, [pc, #156]	@ (80038c0 <MX_ADC1_Init+0xbc>)
 8003822:	2200      	movs	r2, #0
 8003824:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003826:	4b26      	ldr	r3, [pc, #152]	@ (80038c0 <MX_ADC1_Init+0xbc>)
 8003828:	2200      	movs	r2, #0
 800382a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800382c:	4b24      	ldr	r3, [pc, #144]	@ (80038c0 <MX_ADC1_Init+0xbc>)
 800382e:	2200      	movs	r2, #0
 8003830:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003832:	4b23      	ldr	r3, [pc, #140]	@ (80038c0 <MX_ADC1_Init+0xbc>)
 8003834:	2200      	movs	r2, #0
 8003836:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003838:	4b21      	ldr	r3, [pc, #132]	@ (80038c0 <MX_ADC1_Init+0xbc>)
 800383a:	2204      	movs	r2, #4
 800383c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800383e:	4b20      	ldr	r3, [pc, #128]	@ (80038c0 <MX_ADC1_Init+0xbc>)
 8003840:	2200      	movs	r2, #0
 8003842:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8003844:	4b1e      	ldr	r3, [pc, #120]	@ (80038c0 <MX_ADC1_Init+0xbc>)
 8003846:	2201      	movs	r2, #1
 8003848:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800384a:	4b1d      	ldr	r3, [pc, #116]	@ (80038c0 <MX_ADC1_Init+0xbc>)
 800384c:	2201      	movs	r2, #1
 800384e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003850:	4b1b      	ldr	r3, [pc, #108]	@ (80038c0 <MX_ADC1_Init+0xbc>)
 8003852:	2200      	movs	r2, #0
 8003854:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003858:	4b19      	ldr	r3, [pc, #100]	@ (80038c0 <MX_ADC1_Init+0xbc>)
 800385a:	2200      	movs	r2, #0
 800385c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800385e:	4b18      	ldr	r3, [pc, #96]	@ (80038c0 <MX_ADC1_Init+0xbc>)
 8003860:	2200      	movs	r2, #0
 8003862:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8003864:	4b16      	ldr	r3, [pc, #88]	@ (80038c0 <MX_ADC1_Init+0xbc>)
 8003866:	2200      	movs	r2, #0
 8003868:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800386c:	4b14      	ldr	r3, [pc, #80]	@ (80038c0 <MX_ADC1_Init+0xbc>)
 800386e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003872:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8003874:	4b12      	ldr	r3, [pc, #72]	@ (80038c0 <MX_ADC1_Init+0xbc>)
 8003876:	2200      	movs	r2, #0
 8003878:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800387c:	4810      	ldr	r0, [pc, #64]	@ (80038c0 <MX_ADC1_Init+0xbc>)
 800387e:	f000 fff9 	bl	8004874 <HAL_ADC_Init>
 8003882:	4603      	mov	r3, r0
 8003884:	2b00      	cmp	r3, #0
 8003886:	d001      	beq.n	800388c <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 8003888:	f000 f9e8 	bl	8003c5c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800388c:	4b0e      	ldr	r3, [pc, #56]	@ (80038c8 <MX_ADC1_Init+0xc4>)
 800388e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003890:	2306      	movs	r3, #6
 8003892:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8003894:	2307      	movs	r3, #7
 8003896:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8003898:	237f      	movs	r3, #127	@ 0x7f
 800389a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800389c:	2304      	movs	r3, #4
 800389e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80038a0:	2300      	movs	r3, #0
 80038a2:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80038a4:	463b      	mov	r3, r7
 80038a6:	4619      	mov	r1, r3
 80038a8:	4805      	ldr	r0, [pc, #20]	@ (80038c0 <MX_ADC1_Init+0xbc>)
 80038aa:	f001 f995 	bl	8004bd8 <HAL_ADC_ConfigChannel>
 80038ae:	4603      	mov	r3, r0
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d001      	beq.n	80038b8 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 80038b4:	f000 f9d2 	bl	8003c5c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80038b8:	bf00      	nop
 80038ba:	3718      	adds	r7, #24
 80038bc:	46bd      	mov	sp, r7
 80038be:	bd80      	pop	{r7, pc}
 80038c0:	20000b40 	.word	0x20000b40
 80038c4:	50040000 	.word	0x50040000
 80038c8:	14f00020 	.word	0x14f00020

080038cc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80038d0:	4b1b      	ldr	r3, [pc, #108]	@ (8003940 <MX_SPI1_Init+0x74>)
 80038d2:	4a1c      	ldr	r2, [pc, #112]	@ (8003944 <MX_SPI1_Init+0x78>)
 80038d4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80038d6:	4b1a      	ldr	r3, [pc, #104]	@ (8003940 <MX_SPI1_Init+0x74>)
 80038d8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80038dc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80038de:	4b18      	ldr	r3, [pc, #96]	@ (8003940 <MX_SPI1_Init+0x74>)
 80038e0:	2200      	movs	r2, #0
 80038e2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80038e4:	4b16      	ldr	r3, [pc, #88]	@ (8003940 <MX_SPI1_Init+0x74>)
 80038e6:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80038ea:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80038ec:	4b14      	ldr	r3, [pc, #80]	@ (8003940 <MX_SPI1_Init+0x74>)
 80038ee:	2200      	movs	r2, #0
 80038f0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80038f2:	4b13      	ldr	r3, [pc, #76]	@ (8003940 <MX_SPI1_Init+0x74>)
 80038f4:	2200      	movs	r2, #0
 80038f6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80038f8:	4b11      	ldr	r3, [pc, #68]	@ (8003940 <MX_SPI1_Init+0x74>)
 80038fa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80038fe:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8003900:	4b0f      	ldr	r3, [pc, #60]	@ (8003940 <MX_SPI1_Init+0x74>)
 8003902:	2210      	movs	r2, #16
 8003904:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003906:	4b0e      	ldr	r3, [pc, #56]	@ (8003940 <MX_SPI1_Init+0x74>)
 8003908:	2200      	movs	r2, #0
 800390a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800390c:	4b0c      	ldr	r3, [pc, #48]	@ (8003940 <MX_SPI1_Init+0x74>)
 800390e:	2200      	movs	r2, #0
 8003910:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003912:	4b0b      	ldr	r3, [pc, #44]	@ (8003940 <MX_SPI1_Init+0x74>)
 8003914:	2200      	movs	r2, #0
 8003916:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8003918:	4b09      	ldr	r3, [pc, #36]	@ (8003940 <MX_SPI1_Init+0x74>)
 800391a:	2207      	movs	r2, #7
 800391c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800391e:	4b08      	ldr	r3, [pc, #32]	@ (8003940 <MX_SPI1_Init+0x74>)
 8003920:	2200      	movs	r2, #0
 8003922:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003924:	4b06      	ldr	r3, [pc, #24]	@ (8003940 <MX_SPI1_Init+0x74>)
 8003926:	2208      	movs	r2, #8
 8003928:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800392a:	4805      	ldr	r0, [pc, #20]	@ (8003940 <MX_SPI1_Init+0x74>)
 800392c:	f003 fcf8 	bl	8007320 <HAL_SPI_Init>
 8003930:	4603      	mov	r3, r0
 8003932:	2b00      	cmp	r3, #0
 8003934:	d001      	beq.n	800393a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8003936:	f000 f991 	bl	8003c5c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800393a:	bf00      	nop
 800393c:	bd80      	pop	{r7, pc}
 800393e:	bf00      	nop
 8003940:	20000ba4 	.word	0x20000ba4
 8003944:	40013000 	.word	0x40013000

08003948 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003948:	b480      	push	{r7}
 800394a:	b083      	sub	sp, #12
 800394c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800394e:	4b09      	ldr	r3, [pc, #36]	@ (8003974 <MX_DMA_Init+0x2c>)
 8003950:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003952:	4a08      	ldr	r2, [pc, #32]	@ (8003974 <MX_DMA_Init+0x2c>)
 8003954:	f043 0301 	orr.w	r3, r3, #1
 8003958:	6493      	str	r3, [r2, #72]	@ 0x48
 800395a:	4b06      	ldr	r3, [pc, #24]	@ (8003974 <MX_DMA_Init+0x2c>)
 800395c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800395e:	f003 0301 	and.w	r3, r3, #1
 8003962:	607b      	str	r3, [r7, #4]
 8003964:	687b      	ldr	r3, [r7, #4]

}
 8003966:	bf00      	nop
 8003968:	370c      	adds	r7, #12
 800396a:	46bd      	mov	sp, r7
 800396c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003970:	4770      	bx	lr
 8003972:	bf00      	nop
 8003974:	40021000 	.word	0x40021000

08003978 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b088      	sub	sp, #32
 800397c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800397e:	f107 030c 	add.w	r3, r7, #12
 8003982:	2200      	movs	r2, #0
 8003984:	601a      	str	r2, [r3, #0]
 8003986:	605a      	str	r2, [r3, #4]
 8003988:	609a      	str	r2, [r3, #8]
 800398a:	60da      	str	r2, [r3, #12]
 800398c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800398e:	4b30      	ldr	r3, [pc, #192]	@ (8003a50 <MX_GPIO_Init+0xd8>)
 8003990:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003992:	4a2f      	ldr	r2, [pc, #188]	@ (8003a50 <MX_GPIO_Init+0xd8>)
 8003994:	f043 0304 	orr.w	r3, r3, #4
 8003998:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800399a:	4b2d      	ldr	r3, [pc, #180]	@ (8003a50 <MX_GPIO_Init+0xd8>)
 800399c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800399e:	f003 0304 	and.w	r3, r3, #4
 80039a2:	60bb      	str	r3, [r7, #8]
 80039a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80039a6:	4b2a      	ldr	r3, [pc, #168]	@ (8003a50 <MX_GPIO_Init+0xd8>)
 80039a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039aa:	4a29      	ldr	r2, [pc, #164]	@ (8003a50 <MX_GPIO_Init+0xd8>)
 80039ac:	f043 0301 	orr.w	r3, r3, #1
 80039b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80039b2:	4b27      	ldr	r3, [pc, #156]	@ (8003a50 <MX_GPIO_Init+0xd8>)
 80039b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039b6:	f003 0301 	and.w	r3, r3, #1
 80039ba:	607b      	str	r3, [r7, #4]
 80039bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80039be:	4b24      	ldr	r3, [pc, #144]	@ (8003a50 <MX_GPIO_Init+0xd8>)
 80039c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039c2:	4a23      	ldr	r2, [pc, #140]	@ (8003a50 <MX_GPIO_Init+0xd8>)
 80039c4:	f043 0302 	orr.w	r3, r3, #2
 80039c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80039ca:	4b21      	ldr	r3, [pc, #132]	@ (8003a50 <MX_GPIO_Init+0xd8>)
 80039cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039ce:	f003 0302 	and.w	r3, r3, #2
 80039d2:	603b      	str	r3, [r7, #0]
 80039d4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_RESET);
 80039d6:	2200      	movs	r2, #0
 80039d8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80039dc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80039e0:	f002 fb1a 	bl	8006018 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|CS_Pin|DC_Pin, GPIO_PIN_RESET);
 80039e4:	2200      	movs	r2, #0
 80039e6:	2138      	movs	r1, #56	@ 0x38
 80039e8:	481a      	ldr	r0, [pc, #104]	@ (8003a54 <MX_GPIO_Init+0xdc>)
 80039ea:	f002 fb15 	bl	8006018 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_BTN_1_Pin */
  GPIO_InitStruct.Pin = USER_BTN_1_Pin;
 80039ee:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80039f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80039f4:	2300      	movs	r3, #0
 80039f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80039f8:	2302      	movs	r3, #2
 80039fa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(USER_BTN_1_GPIO_Port, &GPIO_InitStruct);
 80039fc:	f107 030c 	add.w	r3, r7, #12
 8003a00:	4619      	mov	r1, r3
 8003a02:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003a06:	f002 f985 	bl	8005d14 <HAL_GPIO_Init>

  /*Configure GPIO pin : RST_Pin */
  GPIO_InitStruct.Pin = RST_Pin;
 8003a0a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003a0e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a10:	2301      	movs	r3, #1
 8003a12:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a14:	2300      	movs	r3, #0
 8003a16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 8003a1c:	f107 030c 	add.w	r3, r7, #12
 8003a20:	4619      	mov	r1, r3
 8003a22:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003a26:	f002 f975 	bl	8005d14 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin CS_Pin DC_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|CS_Pin|DC_Pin;
 8003a2a:	2338      	movs	r3, #56	@ 0x38
 8003a2c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a32:	2300      	movs	r3, #0
 8003a34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a36:	2300      	movs	r3, #0
 8003a38:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a3a:	f107 030c 	add.w	r3, r7, #12
 8003a3e:	4619      	mov	r1, r3
 8003a40:	4804      	ldr	r0, [pc, #16]	@ (8003a54 <MX_GPIO_Init+0xdc>)
 8003a42:	f002 f967 	bl	8005d14 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8003a46:	bf00      	nop
 8003a48:	3720      	adds	r7, #32
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}
 8003a4e:	bf00      	nop
 8003a50:	40021000 	.word	0x40021000
 8003a54:	48000400 	.word	0x48000400

08003a58 <RunDead>:

/* USER CODE BEGIN 4 */
void RunDead(InputSnapshot* in)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b084      	sub	sp, #16
 8003a5c:	af02      	add	r7, sp, #8
 8003a5e:	6078      	str	r0, [r7, #4]
	 */

	static int x = 0, dx = 1;


	x += dx;
 8003a60:	4b23      	ldr	r3, [pc, #140]	@ (8003af0 <RunDead+0x98>)
 8003a62:	681a      	ldr	r2, [r3, #0]
 8003a64:	4b23      	ldr	r3, [pc, #140]	@ (8003af4 <RunDead+0x9c>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4413      	add	r3, r2
 8003a6a:	4a21      	ldr	r2, [pc, #132]	@ (8003af0 <RunDead+0x98>)
 8003a6c:	6013      	str	r3, [r2, #0]
	if (x < 1 || x > 55) dx = -dx;
 8003a6e:	4b20      	ldr	r3, [pc, #128]	@ (8003af0 <RunDead+0x98>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	dd03      	ble.n	8003a7e <RunDead+0x26>
 8003a76:	4b1e      	ldr	r3, [pc, #120]	@ (8003af0 <RunDead+0x98>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	2b37      	cmp	r3, #55	@ 0x37
 8003a7c:	dd04      	ble.n	8003a88 <RunDead+0x30>
 8003a7e:	4b1d      	ldr	r3, [pc, #116]	@ (8003af4 <RunDead+0x9c>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	425b      	negs	r3, r3
 8003a84:	4a1b      	ldr	r2, [pc, #108]	@ (8003af4 <RunDead+0x9c>)
 8003a86:	6013      	str	r3, [r2, #0]
	SSD1327_CLR();
 8003a88:	f000 f9e8 	bl	8003e5c <SSD1327_CLR>
	GFX_DrowBitMap_P(x,(SCREEN_HEIGHT/2) - 4,Defeated_map,67,16,1);
 8003a8c:	4b18      	ldr	r3, [pc, #96]	@ (8003af0 <RunDead+0x98>)
 8003a8e:	6818      	ldr	r0, [r3, #0]
 8003a90:	2301      	movs	r3, #1
 8003a92:	9301      	str	r3, [sp, #4]
 8003a94:	2310      	movs	r3, #16
 8003a96:	9300      	str	r3, [sp, #0]
 8003a98:	2343      	movs	r3, #67	@ 0x43
 8003a9a:	4a17      	ldr	r2, [pc, #92]	@ (8003af8 <RunDead+0xa0>)
 8003a9c:	213c      	movs	r1, #60	@ 0x3c
 8003a9e:	f7fd f985 	bl	8000dac <GFX_DrowBitMap_P>
	GFX_DrowBitMap_P(35,(SCREEN_HEIGHT/2) + 24,Score_map,37,10,1);
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	9301      	str	r3, [sp, #4]
 8003aa6:	230a      	movs	r3, #10
 8003aa8:	9300      	str	r3, [sp, #0]
 8003aaa:	2325      	movs	r3, #37	@ 0x25
 8003aac:	4a13      	ldr	r2, [pc, #76]	@ (8003afc <RunDead+0xa4>)
 8003aae:	2158      	movs	r1, #88	@ 0x58
 8003ab0:	2023      	movs	r0, #35	@ 0x23
 8003ab2:	f7fd f97b 	bl	8000dac <GFX_DrowBitMap_P>
	GFX_PutInt(73,(SCREEN_HEIGHT/2) + 27,GameGetPalyerScore(&g_singleton),1,1,0);
 8003ab6:	4812      	ldr	r0, [pc, #72]	@ (8003b00 <RunDead+0xa8>)
 8003ab8:	f7ff fd03 	bl	80034c2 <GameGetPalyerScore>
 8003abc:	4602      	mov	r2, r0
 8003abe:	2300      	movs	r3, #0
 8003ac0:	9301      	str	r3, [sp, #4]
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	9300      	str	r3, [sp, #0]
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	215b      	movs	r1, #91	@ 0x5b
 8003aca:	2049      	movs	r0, #73	@ 0x49
 8003acc:	f7fd fb00 	bl	80010d0 <GFX_PutInt>
	SSD1327_Display();
 8003ad0:	f000 f988 	bl	8003de4 <SSD1327_Display>

	if(in->btn1State == GPIO_PIN_SET)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	791b      	ldrb	r3, [r3, #4]
 8003ad8:	2b01      	cmp	r3, #1
 8003ada:	d105      	bne.n	8003ae8 <RunDead+0x90>
	{
		PlayDeadAnim();
 8003adc:	f000 f812 	bl	8003b04 <PlayDeadAnim>
		GameSetState(&g_singleton, GS_Menu);//state = st_menu;
 8003ae0:	2100      	movs	r1, #0
 8003ae2:	4807      	ldr	r0, [pc, #28]	@ (8003b00 <RunDead+0xa8>)
 8003ae4:	f7ff fcd0 	bl	8003488 <GameSetState>
	}
}
 8003ae8:	bf00      	nop
 8003aea:	3708      	adds	r7, #8
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bd80      	pop	{r7, pc}
 8003af0:	20000c58 	.word	0x20000c58
 8003af4:	20000004 	.word	0x20000004
 8003af8:	0800a3bc 	.word	0x0800a3bc
 8003afc:	0800a388 	.word	0x0800a388
 8003b00:	20000098 	.word	0x20000098

08003b04 <PlayDeadAnim>:

void PlayDeadAnim(void)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b084      	sub	sp, #16
 8003b08:	af02      	add	r7, sp, #8
	/*
	 * Animation between separate screens. Gives the illusion of an old game.
	 */
	uint8_t i;

	for (i = 0; i < 10; ++i)
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	71fb      	strb	r3, [r7, #7]
 8003b0e:	e012      	b.n	8003b36 <PlayDeadAnim+0x32>
	{
		SSD1327_CLR();
 8003b10:	f000 f9a4 	bl	8003e5c <SSD1327_CLR>
		GFX_FillRect(0,0,128,128,1);
 8003b14:	2301      	movs	r3, #1
 8003b16:	9300      	str	r3, [sp, #0]
 8003b18:	2380      	movs	r3, #128	@ 0x80
 8003b1a:	2280      	movs	r2, #128	@ 0x80
 8003b1c:	2100      	movs	r1, #0
 8003b1e:	2000      	movs	r0, #0
 8003b20:	f7fd fa4c 	bl	8000fbc <GFX_FillRect>
		SSD1327_Display();
 8003b24:	f000 f95e 	bl	8003de4 <SSD1327_Display>

		SSD1327_CLR();
 8003b28:	f000 f998 	bl	8003e5c <SSD1327_CLR>
		SSD1327_Display();
 8003b2c:	f000 f95a 	bl	8003de4 <SSD1327_Display>
	for (i = 0; i < 10; ++i)
 8003b30:	79fb      	ldrb	r3, [r7, #7]
 8003b32:	3301      	adds	r3, #1
 8003b34:	71fb      	strb	r3, [r7, #7]
 8003b36:	79fb      	ldrb	r3, [r7, #7]
 8003b38:	2b09      	cmp	r3, #9
 8003b3a:	d9e9      	bls.n	8003b10 <PlayDeadAnim+0xc>

	}
}
 8003b3c:	bf00      	nop
 8003b3e:	bf00      	nop
 8003b40:	3708      	adds	r7, #8
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}
	...

08003b48 <RunGame>:

void RunGame (InputSnapshot* in)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b082      	sub	sp, #8
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
	/*
	 * The main loop of the game, executing the relevant functions one by one
	 */
	//drow_game();
	GameDraw(&g_singleton, in);
 8003b50:	6879      	ldr	r1, [r7, #4]
 8003b52:	480c      	ldr	r0, [pc, #48]	@ (8003b84 <RunGame+0x3c>)
 8003b54:	f7fe fbe8 	bl	8002328 <GameDraw>
	SSD1327_Display();
 8003b58:	f000 f944 	bl	8003de4 <SSD1327_Display>
	SSD1327_CLR();
 8003b5c:	f000 f97e 	bl	8003e5c <SSD1327_CLR>

	//update_lvl();
	GameLevelUpdate(&g_singleton);
 8003b60:	4808      	ldr	r0, [pc, #32]	@ (8003b84 <RunGame+0x3c>)
 8003b62:	f7fe fe19 	bl	8002798 <GameLevelUpdate>
	//update_scene();
	GameTick(&g_singleton, in);
 8003b66:	6879      	ldr	r1, [r7, #4]
 8003b68:	4806      	ldr	r0, [pc, #24]	@ (8003b84 <RunGame+0x3c>)
 8003b6a:	f7fd fbdf 	bl	800132c <GameTick>
	//update_backgrand();
	GameUpdateBackgrand(&g_singleton);
 8003b6e:	4805      	ldr	r0, [pc, #20]	@ (8003b84 <RunGame+0x3c>)
 8003b70:	f7fe fed4 	bl	800291c <GameUpdateBackgrand>
	//update_bonus();
	GameUpdateBonus(&g_singleton);
 8003b74:	4803      	ldr	r0, [pc, #12]	@ (8003b84 <RunGame+0x3c>)
 8003b76:	f7ff f877 	bl	8002c68 <GameUpdateBonus>
}
 8003b7a:	bf00      	nop
 8003b7c:	3708      	adds	r7, #8
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}
 8003b82:	bf00      	nop
 8003b84:	20000098 	.word	0x20000098

08003b88 <RunMenu>:

void RunMenu (InputSnapshot* in)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b084      	sub	sp, #16
 8003b8c:	af02      	add	r7, sp, #8
 8003b8e:	6078      	str	r0, [r7, #4]
	/*
	 * Start screen, basic information for the player at the beginning
	 */
	static int x = 0, dx = 1;
	x += dx;
 8003b90:	4b22      	ldr	r3, [pc, #136]	@ (8003c1c <RunMenu+0x94>)
 8003b92:	681a      	ldr	r2, [r3, #0]
 8003b94:	4b22      	ldr	r3, [pc, #136]	@ (8003c20 <RunMenu+0x98>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4413      	add	r3, r2
 8003b9a:	4a20      	ldr	r2, [pc, #128]	@ (8003c1c <RunMenu+0x94>)
 8003b9c:	6013      	str	r3, [r2, #0]
	if (x < 1 || x > 65) dx = -dx;
 8003b9e:	4b1f      	ldr	r3, [pc, #124]	@ (8003c1c <RunMenu+0x94>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	dd03      	ble.n	8003bae <RunMenu+0x26>
 8003ba6:	4b1d      	ldr	r3, [pc, #116]	@ (8003c1c <RunMenu+0x94>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	2b41      	cmp	r3, #65	@ 0x41
 8003bac:	dd04      	ble.n	8003bb8 <RunMenu+0x30>
 8003bae:	4b1c      	ldr	r3, [pc, #112]	@ (8003c20 <RunMenu+0x98>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	425b      	negs	r3, r3
 8003bb4:	4a1a      	ldr	r2, [pc, #104]	@ (8003c20 <RunMenu+0x98>)
 8003bb6:	6013      	str	r3, [r2, #0]
	SSD1327_CLR();
 8003bb8:	f000 f950 	bl	8003e5c <SSD1327_CLR>

	GFX_DrowBitMap_P(x,(SCREEN_HEIGHT/2) - 10,uGalaxy_map,54,16,1);
 8003bbc:	4b17      	ldr	r3, [pc, #92]	@ (8003c1c <RunMenu+0x94>)
 8003bbe:	6818      	ldr	r0, [r3, #0]
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	9301      	str	r3, [sp, #4]
 8003bc4:	2310      	movs	r3, #16
 8003bc6:	9300      	str	r3, [sp, #0]
 8003bc8:	2336      	movs	r3, #54	@ 0x36
 8003bca:	4a16      	ldr	r2, [pc, #88]	@ (8003c24 <RunMenu+0x9c>)
 8003bcc:	2136      	movs	r1, #54	@ 0x36
 8003bce:	f7fd f8ed 	bl	8000dac <GFX_DrowBitMap_P>
	GFX_DrowRoundRect(15,(SCREEN_HEIGHT/2) + 34,93,20,8,1);
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	9301      	str	r3, [sp, #4]
 8003bd6:	2308      	movs	r3, #8
 8003bd8:	9300      	str	r3, [sp, #0]
 8003bda:	2314      	movs	r3, #20
 8003bdc:	225d      	movs	r2, #93	@ 0x5d
 8003bde:	2162      	movs	r1, #98	@ 0x62
 8003be0:	200f      	movs	r0, #15
 8003be2:	f7fd fa95 	bl	8001110 <GFX_DrowRoundRect>
	GFX_DrowBitMap_P(26, (SCREEN_HEIGHT/2)+ 37, PressToStart_map, 66,10,1);
 8003be6:	2301      	movs	r3, #1
 8003be8:	9301      	str	r3, [sp, #4]
 8003bea:	230a      	movs	r3, #10
 8003bec:	9300      	str	r3, [sp, #0]
 8003bee:	2342      	movs	r3, #66	@ 0x42
 8003bf0:	4a0d      	ldr	r2, [pc, #52]	@ (8003c28 <RunMenu+0xa0>)
 8003bf2:	2165      	movs	r1, #101	@ 0x65
 8003bf4:	201a      	movs	r0, #26
 8003bf6:	f7fd f8d9 	bl	8000dac <GFX_DrowBitMap_P>

	if(in->btn1State == GPIO_PIN_SET)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	791b      	ldrb	r3, [r3, #4]
 8003bfe:	2b01      	cmp	r3, #1
 8003c00:	d106      	bne.n	8003c10 <RunMenu+0x88>
	{
		//start_game();
		GameInit(&g_singleton);
 8003c02:	480a      	ldr	r0, [pc, #40]	@ (8003c2c <RunMenu+0xa4>)
 8003c04:	f7fd fafd 	bl	8001202 <GameInit>
		GameSetState(&g_singleton, GS_Playing);//state = st_playing;
 8003c08:	2101      	movs	r1, #1
 8003c0a:	4808      	ldr	r0, [pc, #32]	@ (8003c2c <RunMenu+0xa4>)
 8003c0c:	f7ff fc3c 	bl	8003488 <GameSetState>
	}
	SSD1327_Display();
 8003c10:	f000 f8e8 	bl	8003de4 <SSD1327_Display>

}
 8003c14:	bf00      	nop
 8003c16:	3708      	adds	r7, #8
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bd80      	pop	{r7, pc}
 8003c1c:	20000c5c 	.word	0x20000c5c
 8003c20:	20000008 	.word	0x20000008
 8003c24:	0800a44c 	.word	0x0800a44c
 8003c28:	0800a4bc 	.word	0x0800a4bc
 8003c2c:	20000098 	.word	0x20000098

08003c30 <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b082      	sub	sp, #8
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]

	if(hspi == &hspi1){
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	4a06      	ldr	r2, [pc, #24]	@ (8003c54 <HAL_SPI_TxCpltCallback+0x24>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d104      	bne.n	8003c4a <HAL_SPI_TxCpltCallback+0x1a>
		HAL_GPIO_WritePin(CS_PORT, CS, GPIO_PIN_SET);
 8003c40:	2201      	movs	r2, #1
 8003c42:	2110      	movs	r1, #16
 8003c44:	4804      	ldr	r0, [pc, #16]	@ (8003c58 <HAL_SPI_TxCpltCallback+0x28>)
 8003c46:	f002 f9e7 	bl	8006018 <HAL_GPIO_WritePin>
	}
}
 8003c4a:	bf00      	nop
 8003c4c:	3708      	adds	r7, #8
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}
 8003c52:	bf00      	nop
 8003c54:	20000ba4 	.word	0x20000ba4
 8003c58:	48000400 	.word	0x48000400

08003c5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003c60:	b672      	cpsid	i
}
 8003c62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003c64:	bf00      	nop
 8003c66:	e7fd      	b.n	8003c64 <Error_Handler+0x8>

08003c68 <SSD1327_CMD>:
SPI_HandleTypeDef *ssd1337_spi;

static uint8_t buffer[BUF_SIZE];


void SSD1327_CMD (uint8_t cmd){
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b082      	sub	sp, #8
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	4603      	mov	r3, r0
 8003c70:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(DC_PORT, DC, GPIO_PIN_RESET);
 8003c72:	2200      	movs	r2, #0
 8003c74:	2120      	movs	r1, #32
 8003c76:	480c      	ldr	r0, [pc, #48]	@ (8003ca8 <SSD1327_CMD+0x40>)
 8003c78:	f002 f9ce 	bl	8006018 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS_PORT, CS, GPIO_PIN_RESET);
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	2110      	movs	r1, #16
 8003c80:	4809      	ldr	r0, [pc, #36]	@ (8003ca8 <SSD1327_CMD+0x40>)
 8003c82:	f002 f9c9 	bl	8006018 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(ssd1337_spi, &cmd, 1, 10);
 8003c86:	4b09      	ldr	r3, [pc, #36]	@ (8003cac <SSD1327_CMD+0x44>)
 8003c88:	6818      	ldr	r0, [r3, #0]
 8003c8a:	1df9      	adds	r1, r7, #7
 8003c8c:	230a      	movs	r3, #10
 8003c8e:	2201      	movs	r2, #1
 8003c90:	f003 fbe9 	bl	8007466 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CS_PORT, CS, GPIO_PIN_SET);
 8003c94:	2201      	movs	r2, #1
 8003c96:	2110      	movs	r1, #16
 8003c98:	4803      	ldr	r0, [pc, #12]	@ (8003ca8 <SSD1327_CMD+0x40>)
 8003c9a:	f002 f9bd 	bl	8006018 <HAL_GPIO_WritePin>

}
 8003c9e:	bf00      	nop
 8003ca0:	3708      	adds	r7, #8
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}
 8003ca6:	bf00      	nop
 8003ca8:	48000400 	.word	0x48000400
 8003cac:	20000c60 	.word	0x20000c60

08003cb0 <SSD1327_Reset>:
{
	SSD1327_CMD(SSD1327_SETCONTRASTCURRENT);	// Set Contrast Control
	SSD1327_CMD(Contrast);
}

void SSD1327_Reset(void){
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(RST_PORT, RST, GPIO_PIN_RESET);
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003cba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003cbe:	f002 f9ab 	bl	8006018 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8003cc2:	2014      	movs	r0, #20
 8003cc4:	f000 fbd8 	bl	8004478 <HAL_Delay>
	HAL_GPIO_WritePin(RST_PORT, RST, GPIO_PIN_SET);
 8003cc8:	2201      	movs	r2, #1
 8003cca:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003cce:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003cd2:	f002 f9a1 	bl	8006018 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8003cd6:	2014      	movs	r0, #20
 8003cd8:	f000 fbce 	bl	8004478 <HAL_Delay>

}
 8003cdc:	bf00      	nop
 8003cde:	bd80      	pop	{r7, pc}

08003ce0 <SSD1327_SpiInit>:

void SSD1327_SpiInit(SPI_HandleTypeDef *spi){
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b082      	sub	sp, #8
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]

	ssd1337_spi = spi;
 8003ce8:	4a05      	ldr	r2, [pc, #20]	@ (8003d00 <SSD1327_SpiInit+0x20>)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6013      	str	r3, [r2, #0]

	SSD1327_Reset();
 8003cee:	f7ff ffdf 	bl	8003cb0 <SSD1327_Reset>
	SSD1327_Init();
 8003cf2:	f000 f807 	bl	8003d04 <SSD1327_Init>

}
 8003cf6:	bf00      	nop
 8003cf8:	3708      	adds	r7, #8
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}
 8003cfe:	bf00      	nop
 8003d00:	20000c60 	.word	0x20000c60

08003d04 <SSD1327_Init>:

void SSD1327_Init (void){
 8003d04:	b580      	push	{r7, lr}
 8003d06:	af00      	add	r7, sp, #0

	SSD1327_CMD(0xae);	// Turn off oled panel
 8003d08:	20ae      	movs	r0, #174	@ 0xae
 8003d0a:	f7ff ffad 	bl	8003c68 <SSD1327_CMD>

	SSD1327_CMD(0x15);  // Set column addresses
 8003d0e:	2015      	movs	r0, #21
 8003d10:	f7ff ffaa 	bl	8003c68 <SSD1327_CMD>
	SSD1327_CMD(0x00);  // Start column  0
 8003d14:	2000      	movs	r0, #0
 8003d16:	f7ff ffa7 	bl	8003c68 <SSD1327_CMD>
	SSD1327_CMD(0x7f);  // End column  127
 8003d1a:	207f      	movs	r0, #127	@ 0x7f
 8003d1c:	f7ff ffa4 	bl	8003c68 <SSD1327_CMD>

	SSD1327_CMD(0x75);  // Set row addresses
 8003d20:	2075      	movs	r0, #117	@ 0x75
 8003d22:	f7ff ffa1 	bl	8003c68 <SSD1327_CMD>
	SSD1327_CMD(0x00);  // Start row  0
 8003d26:	2000      	movs	r0, #0
 8003d28:	f7ff ff9e 	bl	8003c68 <SSD1327_CMD>
	SSD1327_CMD(0x7f);  // End row  127
 8003d2c:	207f      	movs	r0, #127	@ 0x7f
 8003d2e:	f7ff ff9b 	bl	8003c68 <SSD1327_CMD>

	SSD1327_CMD(0x81);  // Set contrast control
 8003d32:	2081      	movs	r0, #129	@ 0x81
 8003d34:	f7ff ff98 	bl	8003c68 <SSD1327_CMD>
	SSD1327_CMD(0x80);  // 50% (128/255) def.0x80
 8003d38:	2080      	movs	r0, #128	@ 0x80
 8003d3a:	f7ff ff95 	bl	8003c68 <SSD1327_CMD>

	SSD1327_CMD(0xa0);  // Gment remap
 8003d3e:	20a0      	movs	r0, #160	@ 0xa0
 8003d40:	f7ff ff92 	bl	8003c68 <SSD1327_CMD>
	SSD1327_CMD(0x51);  // 51 (To my understanding, this is orientation
 8003d44:	2051      	movs	r0, #81	@ 0x51
 8003d46:	f7ff ff8f 	bl	8003c68 <SSD1327_CMD>

	SSD1327_CMD(0xa1);  // Start line
 8003d4a:	20a1      	movs	r0, #161	@ 0xa1
 8003d4c:	f7ff ff8c 	bl	8003c68 <SSD1327_CMD>
	SSD1327_CMD(0x00);
 8003d50:	2000      	movs	r0, #0
 8003d52:	f7ff ff89 	bl	8003c68 <SSD1327_CMD>

	SSD1327_CMD(0xa2);  // Display offset
 8003d56:	20a2      	movs	r0, #162	@ 0xa2
 8003d58:	f7ff ff86 	bl	8003c68 <SSD1327_CMD>
	SSD1327_CMD(0x00);
 8003d5c:	2000      	movs	r0, #0
 8003d5e:	f7ff ff83 	bl	8003c68 <SSD1327_CMD>

	SSD1327_CMD(0xa4);  // rmal display
 8003d62:	20a4      	movs	r0, #164	@ 0xa4
 8003d64:	f7ff ff80 	bl	8003c68 <SSD1327_CMD>
	SSD1327_CMD(0xa8);  // Set multiplex ratio
 8003d68:	20a8      	movs	r0, #168	@ 0xa8
 8003d6a:	f7ff ff7d 	bl	8003c68 <SSD1327_CMD>
	SSD1327_CMD(0x7f);
 8003d6e:	207f      	movs	r0, #127	@ 0x7f
 8003d70:	f7ff ff7a 	bl	8003c68 <SSD1327_CMD>

	SSD1327_CMD(0xb1);  // Set phase leghth
 8003d74:	20b1      	movs	r0, #177	@ 0xb1
 8003d76:	f7ff ff77 	bl	8003c68 <SSD1327_CMD>
	SSD1327_CMD(0xf1);
 8003d7a:	20f1      	movs	r0, #241	@ 0xf1
 8003d7c:	f7ff ff74 	bl	8003c68 <SSD1327_CMD>

	SSD1327_CMD(0xb3);  // Set dclk
 8003d80:	20b3      	movs	r0, #179	@ 0xb3
 8003d82:	f7ff ff71 	bl	8003c68 <SSD1327_CMD>
	SSD1327_CMD(0x00);  // 80Hz:0xc1 90Hz:0xe1  100Hz:0x00  110Hz:0x30 120Hz:0x50  130Hz:0x70   01
 8003d86:	2000      	movs	r0, #0
 8003d88:	f7ff ff6e 	bl	8003c68 <SSD1327_CMD>

	SSD1327_CMD(0xab);  // Enable vReg
 8003d8c:	20ab      	movs	r0, #171	@ 0xab
 8003d8e:	f7ff ff6b 	bl	8003c68 <SSD1327_CMD>
	SSD1327_CMD(0x01);
 8003d92:	2001      	movs	r0, #1
 8003d94:	f7ff ff68 	bl	8003c68 <SSD1327_CMD>

	SSD1327_CMD(0xb6);  // Set phase leghth
 8003d98:	20b6      	movs	r0, #182	@ 0xb6
 8003d9a:	f7ff ff65 	bl	8003c68 <SSD1327_CMD>
	SSD1327_CMD(0x0f);
 8003d9e:	200f      	movs	r0, #15
 8003da0:	f7ff ff62 	bl	8003c68 <SSD1327_CMD>

	SSD1327_CMD(0xbe); 	// Set vcomh voltage
 8003da4:	20be      	movs	r0, #190	@ 0xbe
 8003da6:	f7ff ff5f 	bl	8003c68 <SSD1327_CMD>
	SSD1327_CMD(0x0f);
 8003daa:	200f      	movs	r0, #15
 8003dac:	f7ff ff5c 	bl	8003c68 <SSD1327_CMD>

	SSD1327_CMD(0xbc); 	// Set pre-charge voltage
 8003db0:	20bc      	movs	r0, #188	@ 0xbc
 8003db2:	f7ff ff59 	bl	8003c68 <SSD1327_CMD>
	SSD1327_CMD(0x08);
 8003db6:	2008      	movs	r0, #8
 8003db8:	f7ff ff56 	bl	8003c68 <SSD1327_CMD>

	SSD1327_CMD(0xd5); 	// Second precharge period
 8003dbc:	20d5      	movs	r0, #213	@ 0xd5
 8003dbe:	f7ff ff53 	bl	8003c68 <SSD1327_CMD>
	SSD1327_CMD(0x62);
 8003dc2:	2062      	movs	r0, #98	@ 0x62
 8003dc4:	f7ff ff50 	bl	8003c68 <SSD1327_CMD>

	SSD1327_CMD(0xfd); 	// Unlock commands
 8003dc8:	20fd      	movs	r0, #253	@ 0xfd
 8003dca:	f7ff ff4d 	bl	8003c68 <SSD1327_CMD>
	SSD1327_CMD(0x12);
 8003dce:	2012      	movs	r0, #18
 8003dd0:	f7ff ff4a 	bl	8003c68 <SSD1327_CMD>

	SSD1327_CMD(0xA4);
 8003dd4:	20a4      	movs	r0, #164	@ 0xa4
 8003dd6:	f7ff ff47 	bl	8003c68 <SSD1327_CMD>

	SSD1327_CMD(SSD1327_DISPLAYON);
 8003dda:	20af      	movs	r0, #175	@ 0xaf
 8003ddc:	f7ff ff44 	bl	8003c68 <SSD1327_CMD>
}
 8003de0:	bf00      	nop
 8003de2:	bd80      	pop	{r7, pc}

08003de4 <SSD1327_Display>:

void SSD1327_Display (void){
 8003de4:	b580      	push	{r7, lr}
 8003de6:	af00      	add	r7, sp, #0

	SSD1327_CMD(SSD1327_SETCOLUMNADDRESS);
 8003de8:	2015      	movs	r0, #21
 8003dea:	f7ff ff3d 	bl	8003c68 <SSD1327_CMD>
	SSD1327_CMD(0x00);
 8003dee:	2000      	movs	r0, #0
 8003df0:	f7ff ff3a 	bl	8003c68 <SSD1327_CMD>
	SSD1327_CMD(0x7F);
 8003df4:	207f      	movs	r0, #127	@ 0x7f
 8003df6:	f7ff ff37 	bl	8003c68 <SSD1327_CMD>

	SSD1327_CMD(SSD1327_SETROWADDRESS);
 8003dfa:	2075      	movs	r0, #117	@ 0x75
 8003dfc:	f7ff ff34 	bl	8003c68 <SSD1327_CMD>
	SSD1327_CMD(0x00);
 8003e00:	2000      	movs	r0, #0
 8003e02:	f7ff ff31 	bl	8003c68 <SSD1327_CMD>
	SSD1327_CMD(0x7F);
 8003e06:	207f      	movs	r0, #127	@ 0x7f
 8003e08:	f7ff ff2e 	bl	8003c68 <SSD1327_CMD>

	HAL_GPIO_WritePin(CS_PORT, CS, GPIO_PIN_RESET);
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	2110      	movs	r1, #16
 8003e10:	480f      	ldr	r0, [pc, #60]	@ (8003e50 <SSD1327_Display+0x6c>)
 8003e12:	f002 f901 	bl	8006018 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DC_PORT, DC, GPIO_PIN_SET);
 8003e16:	2201      	movs	r2, #1
 8003e18:	2120      	movs	r1, #32
 8003e1a:	480d      	ldr	r0, [pc, #52]	@ (8003e50 <SSD1327_Display+0x6c>)
 8003e1c:	f002 f8fc 	bl	8006018 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS_PORT, CS, GPIO_PIN_RESET);
 8003e20:	2200      	movs	r2, #0
 8003e22:	2110      	movs	r1, #16
 8003e24:	480a      	ldr	r0, [pc, #40]	@ (8003e50 <SSD1327_Display+0x6c>)
 8003e26:	f002 f8f7 	bl	8006018 <HAL_GPIO_WritePin>

#ifdef SSD1327_USE_DMA
	if(HAL_SPI_GetState(ssd1337_spi) == HAL_SPI_STATE_READY){
 8003e2a:	4b0a      	ldr	r3, [pc, #40]	@ (8003e54 <SSD1327_Display+0x70>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f003 fe92 	bl	8007b58 <HAL_SPI_GetState>
 8003e34:	4603      	mov	r3, r0
 8003e36:	2b01      	cmp	r3, #1
 8003e38:	d107      	bne.n	8003e4a <SSD1327_Display+0x66>
		HAL_SPI_Transmit_DMA(ssd1337_spi, (uint8_t*)&buffer, BUF_SIZE);
 8003e3a:	4b06      	ldr	r3, [pc, #24]	@ (8003e54 <SSD1327_Display+0x70>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003e42:	4905      	ldr	r1, [pc, #20]	@ (8003e58 <SSD1327_Display+0x74>)
 8003e44:	4618      	mov	r0, r3
 8003e46:	f003 fc85 	bl	8007754 <HAL_SPI_Transmit_DMA>
#else
	HAL_SPI_Transmit(ssd1337_spi, (uint8_t*)&buffer, BUF_SIZE, 100);
	HAL_GPIO_WritePin(CS_PORT, CS, GPIO_PIN_SET);
#endif

}
 8003e4a:	bf00      	nop
 8003e4c:	bd80      	pop	{r7, pc}
 8003e4e:	bf00      	nop
 8003e50:	48000400 	.word	0x48000400
 8003e54:	20000c60 	.word	0x20000c60
 8003e58:	20000c64 	.word	0x20000c64

08003e5c <SSD1327_CLR>:

void SSD1327_CLR(void){
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	af00      	add	r7, sp, #0
		memset(buffer, (0 << 4 | 0), BUF_SIZE);
 8003e60:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003e64:	2100      	movs	r1, #0
 8003e66:	4802      	ldr	r0, [pc, #8]	@ (8003e70 <SSD1327_CLR+0x14>)
 8003e68:	f004 f9c1 	bl	80081ee <memset>
}
 8003e6c:	bf00      	nop
 8003e6e:	bd80      	pop	{r7, pc}
 8003e70:	20000c64 	.word	0x20000c64

08003e74 <SSD1327_SetPixel>:

void SSD1327_SetPixel( int x , int y , uint8_t bw){
 8003e74:	b480      	push	{r7}
 8003e76:	b087      	sub	sp, #28
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	60f8      	str	r0, [r7, #12]
 8003e7c:	60b9      	str	r1, [r7, #8]
 8003e7e:	4613      	mov	r3, r2
 8003e80:	71fb      	strb	r3, [r7, #7]
	if ((x < 0) || (x >= SSD1327_WIDTH) || (y < 0) || (y >= SSD1327_HEIGHT))
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	db3d      	blt.n	8003f04 <SSD1327_SetPixel+0x90>
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	2b7f      	cmp	r3, #127	@ 0x7f
 8003e8c:	dc3a      	bgt.n	8003f04 <SSD1327_SetPixel+0x90>
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	db37      	blt.n	8003f04 <SSD1327_SetPixel+0x90>
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	2b7f      	cmp	r3, #127	@ 0x7f
 8003e98:	dc34      	bgt.n	8003f04 <SSD1327_SetPixel+0x90>
		return;

	uint8_t SelectedCell = buffer[x/2 + y*(SSD1327_WIDTH/2)];
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	0fda      	lsrs	r2, r3, #31
 8003e9e:	4413      	add	r3, r2
 8003ea0:	105b      	asrs	r3, r3, #1
 8003ea2:	461a      	mov	r2, r3
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	019b      	lsls	r3, r3, #6
 8003ea8:	4413      	add	r3, r2
 8003eaa:	4a19      	ldr	r2, [pc, #100]	@ (8003f10 <SSD1327_SetPixel+0x9c>)
 8003eac:	5cd3      	ldrb	r3, [r2, r3]
 8003eae:	75fb      	strb	r3, [r7, #23]

	if(x % 2)
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	f003 0301 	and.w	r3, r3, #1
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d00b      	beq.n	8003ed2 <SSD1327_SetPixel+0x5e>
	{
		SelectedCell &= ~(0x0F);
 8003eba:	7dfb      	ldrb	r3, [r7, #23]
 8003ebc:	f023 030f 	bic.w	r3, r3, #15
 8003ec0:	75fb      	strb	r3, [r7, #23]
		SelectedCell |= (0x0F & bw);
 8003ec2:	79fb      	ldrb	r3, [r7, #7]
 8003ec4:	f003 030f 	and.w	r3, r3, #15
 8003ec8:	b2da      	uxtb	r2, r3
 8003eca:	7dfb      	ldrb	r3, [r7, #23]
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	75fb      	strb	r3, [r7, #23]
 8003ed0:	e00c      	b.n	8003eec <SSD1327_SetPixel+0x78>
	}
	else
	{
		SelectedCell &= ~(0xF0);
 8003ed2:	7dfb      	ldrb	r3, [r7, #23]
 8003ed4:	f003 030f 	and.w	r3, r3, #15
 8003ed8:	75fb      	strb	r3, [r7, #23]
		SelectedCell |= (0xF0 & (bw<<4));
 8003eda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ede:	011b      	lsls	r3, r3, #4
 8003ee0:	b25a      	sxtb	r2, r3
 8003ee2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	b25b      	sxtb	r3, r3
 8003eea:	75fb      	strb	r3, [r7, #23]
	}

	buffer[x/2 + y*(SSD1327_WIDTH/2)] = SelectedCell;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	0fda      	lsrs	r2, r3, #31
 8003ef0:	4413      	add	r3, r2
 8003ef2:	105b      	asrs	r3, r3, #1
 8003ef4:	461a      	mov	r2, r3
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	019b      	lsls	r3, r3, #6
 8003efa:	4413      	add	r3, r2
 8003efc:	4904      	ldr	r1, [pc, #16]	@ (8003f10 <SSD1327_SetPixel+0x9c>)
 8003efe:	7dfa      	ldrb	r2, [r7, #23]
 8003f00:	54ca      	strb	r2, [r1, r3]
 8003f02:	e000      	b.n	8003f06 <SSD1327_SetPixel+0x92>
		return;
 8003f04:	bf00      	nop

//	if ((x < 0) || (x >= SSD1327_WIDTH) || (y < 0) || (y >= SSD1327_HEIGHT))
//		return;
//	if (bw) buffer[x + (y/4)*SSD1327_WIDTH] |= (1<<(y%4));
//	else buffer[x + (y/4)*SSD1327_WIDTH] &= ~(1<<(y%4));
}
 8003f06:	371c      	adds	r7, #28
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0e:	4770      	bx	lr
 8003f10:	20000c64 	.word	0x20000c64

08003f14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b083      	sub	sp, #12
 8003f18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f1a:	4b0f      	ldr	r3, [pc, #60]	@ (8003f58 <HAL_MspInit+0x44>)
 8003f1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f1e:	4a0e      	ldr	r2, [pc, #56]	@ (8003f58 <HAL_MspInit+0x44>)
 8003f20:	f043 0301 	orr.w	r3, r3, #1
 8003f24:	6613      	str	r3, [r2, #96]	@ 0x60
 8003f26:	4b0c      	ldr	r3, [pc, #48]	@ (8003f58 <HAL_MspInit+0x44>)
 8003f28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f2a:	f003 0301 	and.w	r3, r3, #1
 8003f2e:	607b      	str	r3, [r7, #4]
 8003f30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003f32:	4b09      	ldr	r3, [pc, #36]	@ (8003f58 <HAL_MspInit+0x44>)
 8003f34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f36:	4a08      	ldr	r2, [pc, #32]	@ (8003f58 <HAL_MspInit+0x44>)
 8003f38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f3c:	6593      	str	r3, [r2, #88]	@ 0x58
 8003f3e:	4b06      	ldr	r3, [pc, #24]	@ (8003f58 <HAL_MspInit+0x44>)
 8003f40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f46:	603b      	str	r3, [r7, #0]
 8003f48:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003f4a:	bf00      	nop
 8003f4c:	370c      	adds	r7, #12
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f54:	4770      	bx	lr
 8003f56:	bf00      	nop
 8003f58:	40021000 	.word	0x40021000

08003f5c <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b09e      	sub	sp, #120	@ 0x78
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f64:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003f68:	2200      	movs	r2, #0
 8003f6a:	601a      	str	r2, [r3, #0]
 8003f6c:	605a      	str	r2, [r3, #4]
 8003f6e:	609a      	str	r2, [r3, #8]
 8003f70:	60da      	str	r2, [r3, #12]
 8003f72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003f74:	f107 0310 	add.w	r3, r7, #16
 8003f78:	2254      	movs	r2, #84	@ 0x54
 8003f7a:	2100      	movs	r1, #0
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	f004 f936 	bl	80081ee <memset>
  if(hadc->Instance==ADC1)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a25      	ldr	r2, [pc, #148]	@ (800401c <HAL_ADC_MspInit+0xc0>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d143      	bne.n	8004014 <HAL_ADC_MspInit+0xb8>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8003f8c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003f90:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8003f92:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8003f96:	65bb      	str	r3, [r7, #88]	@ 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8003fa0:	2310      	movs	r3, #16
 8003fa2:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8003fa4:	2307      	movs	r3, #7
 8003fa6:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8003fa8:	2302      	movs	r3, #2
 8003faa:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8003fac:	2302      	movs	r3, #2
 8003fae:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8003fb0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003fb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003fb6:	f107 0310 	add.w	r3, r7, #16
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f002 feb8 	bl	8006d30 <HAL_RCCEx_PeriphCLKConfig>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d001      	beq.n	8003fca <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8003fc6:	f7ff fe49 	bl	8003c5c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8003fca:	4b15      	ldr	r3, [pc, #84]	@ (8004020 <HAL_ADC_MspInit+0xc4>)
 8003fcc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fce:	4a14      	ldr	r2, [pc, #80]	@ (8004020 <HAL_ADC_MspInit+0xc4>)
 8003fd0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003fd4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003fd6:	4b12      	ldr	r3, [pc, #72]	@ (8004020 <HAL_ADC_MspInit+0xc4>)
 8003fd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fda:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003fde:	60fb      	str	r3, [r7, #12]
 8003fe0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003fe2:	4b0f      	ldr	r3, [pc, #60]	@ (8004020 <HAL_ADC_MspInit+0xc4>)
 8003fe4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fe6:	4a0e      	ldr	r2, [pc, #56]	@ (8004020 <HAL_ADC_MspInit+0xc4>)
 8003fe8:	f043 0301 	orr.w	r3, r3, #1
 8003fec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003fee:	4b0c      	ldr	r3, [pc, #48]	@ (8004020 <HAL_ADC_MspInit+0xc4>)
 8003ff0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ff2:	f003 0301 	and.w	r3, r3, #1
 8003ff6:	60bb      	str	r3, [r7, #8]
 8003ff8:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8003ffe:	230b      	movs	r3, #11
 8004000:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004002:	2300      	movs	r3, #0
 8004004:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004006:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800400a:	4619      	mov	r1, r3
 800400c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004010:	f001 fe80 	bl	8005d14 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8004014:	bf00      	nop
 8004016:	3778      	adds	r7, #120	@ 0x78
 8004018:	46bd      	mov	sp, r7
 800401a:	bd80      	pop	{r7, pc}
 800401c:	50040000 	.word	0x50040000
 8004020:	40021000 	.word	0x40021000

08004024 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b08a      	sub	sp, #40	@ 0x28
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800402c:	f107 0314 	add.w	r3, r7, #20
 8004030:	2200      	movs	r2, #0
 8004032:	601a      	str	r2, [r3, #0]
 8004034:	605a      	str	r2, [r3, #4]
 8004036:	609a      	str	r2, [r3, #8]
 8004038:	60da      	str	r2, [r3, #12]
 800403a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a2c      	ldr	r2, [pc, #176]	@ (80040f4 <HAL_SPI_MspInit+0xd0>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d151      	bne.n	80040ea <HAL_SPI_MspInit+0xc6>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004046:	4b2c      	ldr	r3, [pc, #176]	@ (80040f8 <HAL_SPI_MspInit+0xd4>)
 8004048:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800404a:	4a2b      	ldr	r2, [pc, #172]	@ (80040f8 <HAL_SPI_MspInit+0xd4>)
 800404c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004050:	6613      	str	r3, [r2, #96]	@ 0x60
 8004052:	4b29      	ldr	r3, [pc, #164]	@ (80040f8 <HAL_SPI_MspInit+0xd4>)
 8004054:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004056:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800405a:	613b      	str	r3, [r7, #16]
 800405c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800405e:	4b26      	ldr	r3, [pc, #152]	@ (80040f8 <HAL_SPI_MspInit+0xd4>)
 8004060:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004062:	4a25      	ldr	r2, [pc, #148]	@ (80040f8 <HAL_SPI_MspInit+0xd4>)
 8004064:	f043 0301 	orr.w	r3, r3, #1
 8004068:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800406a:	4b23      	ldr	r3, [pc, #140]	@ (80040f8 <HAL_SPI_MspInit+0xd4>)
 800406c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800406e:	f003 0301 	and.w	r3, r3, #1
 8004072:	60fb      	str	r3, [r7, #12]
 8004074:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_7;
 8004076:	2382      	movs	r3, #130	@ 0x82
 8004078:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800407a:	2302      	movs	r3, #2
 800407c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800407e:	2300      	movs	r3, #0
 8004080:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004082:	2303      	movs	r3, #3
 8004084:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004086:	2305      	movs	r3, #5
 8004088:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800408a:	f107 0314 	add.w	r3, r7, #20
 800408e:	4619      	mov	r1, r3
 8004090:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004094:	f001 fe3e 	bl	8005d14 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8004098:	4b18      	ldr	r3, [pc, #96]	@ (80040fc <HAL_SPI_MspInit+0xd8>)
 800409a:	4a19      	ldr	r2, [pc, #100]	@ (8004100 <HAL_SPI_MspInit+0xdc>)
 800409c:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_1;
 800409e:	4b17      	ldr	r3, [pc, #92]	@ (80040fc <HAL_SPI_MspInit+0xd8>)
 80040a0:	2201      	movs	r2, #1
 80040a2:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80040a4:	4b15      	ldr	r3, [pc, #84]	@ (80040fc <HAL_SPI_MspInit+0xd8>)
 80040a6:	2210      	movs	r2, #16
 80040a8:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80040aa:	4b14      	ldr	r3, [pc, #80]	@ (80040fc <HAL_SPI_MspInit+0xd8>)
 80040ac:	2200      	movs	r2, #0
 80040ae:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80040b0:	4b12      	ldr	r3, [pc, #72]	@ (80040fc <HAL_SPI_MspInit+0xd8>)
 80040b2:	2280      	movs	r2, #128	@ 0x80
 80040b4:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80040b6:	4b11      	ldr	r3, [pc, #68]	@ (80040fc <HAL_SPI_MspInit+0xd8>)
 80040b8:	2200      	movs	r2, #0
 80040ba:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80040bc:	4b0f      	ldr	r3, [pc, #60]	@ (80040fc <HAL_SPI_MspInit+0xd8>)
 80040be:	2200      	movs	r2, #0
 80040c0:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80040c2:	4b0e      	ldr	r3, [pc, #56]	@ (80040fc <HAL_SPI_MspInit+0xd8>)
 80040c4:	2200      	movs	r2, #0
 80040c6:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80040c8:	4b0c      	ldr	r3, [pc, #48]	@ (80040fc <HAL_SPI_MspInit+0xd8>)
 80040ca:	2200      	movs	r2, #0
 80040cc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80040ce:	480b      	ldr	r0, [pc, #44]	@ (80040fc <HAL_SPI_MspInit+0xd8>)
 80040d0:	f001 fbe8 	bl	80058a4 <HAL_DMA_Init>
 80040d4:	4603      	mov	r3, r0
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d001      	beq.n	80040de <HAL_SPI_MspInit+0xba>
    {
      Error_Handler();
 80040da:	f7ff fdbf 	bl	8003c5c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	4a06      	ldr	r2, [pc, #24]	@ (80040fc <HAL_SPI_MspInit+0xd8>)
 80040e2:	655a      	str	r2, [r3, #84]	@ 0x54
 80040e4:	4a05      	ldr	r2, [pc, #20]	@ (80040fc <HAL_SPI_MspInit+0xd8>)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 80040ea:	bf00      	nop
 80040ec:	3728      	adds	r7, #40	@ 0x28
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}
 80040f2:	bf00      	nop
 80040f4:	40013000 	.word	0x40013000
 80040f8:	40021000 	.word	0x40021000
 80040fc:	20000c08 	.word	0x20000c08
 8004100:	40020030 	.word	0x40020030

08004104 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004104:	b480      	push	{r7}
 8004106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004108:	bf00      	nop
 800410a:	e7fd      	b.n	8004108 <NMI_Handler+0x4>

0800410c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800410c:	b480      	push	{r7}
 800410e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004110:	bf00      	nop
 8004112:	e7fd      	b.n	8004110 <HardFault_Handler+0x4>

08004114 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004114:	b480      	push	{r7}
 8004116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004118:	bf00      	nop
 800411a:	e7fd      	b.n	8004118 <MemManage_Handler+0x4>

0800411c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800411c:	b480      	push	{r7}
 800411e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004120:	bf00      	nop
 8004122:	e7fd      	b.n	8004120 <BusFault_Handler+0x4>

08004124 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004124:	b480      	push	{r7}
 8004126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004128:	bf00      	nop
 800412a:	e7fd      	b.n	8004128 <UsageFault_Handler+0x4>

0800412c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800412c:	b480      	push	{r7}
 800412e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004130:	bf00      	nop
 8004132:	46bd      	mov	sp, r7
 8004134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004138:	4770      	bx	lr

0800413a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800413a:	b480      	push	{r7}
 800413c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800413e:	bf00      	nop
 8004140:	46bd      	mov	sp, r7
 8004142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004146:	4770      	bx	lr

08004148 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004148:	b480      	push	{r7}
 800414a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800414c:	bf00      	nop
 800414e:	46bd      	mov	sp, r7
 8004150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004154:	4770      	bx	lr

08004156 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004156:	b580      	push	{r7, lr}
 8004158:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800415a:	f000 f96d 	bl	8004438 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800415e:	bf00      	nop
 8004160:	bd80      	pop	{r7, pc}
	...

08004164 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8004168:	4802      	ldr	r0, [pc, #8]	@ (8004174 <DMA1_Channel3_IRQHandler+0x10>)
 800416a:	f001 fcf4 	bl	8005b56 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800416e:	bf00      	nop
 8004170:	bd80      	pop	{r7, pc}
 8004172:	bf00      	nop
 8004174:	20000c08 	.word	0x20000c08

08004178 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 800417c:	4802      	ldr	r0, [pc, #8]	@ (8004188 <SPI1_IRQHandler+0x10>)
 800417e:	f003 fbd7 	bl	8007930 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8004182:	bf00      	nop
 8004184:	bd80      	pop	{r7, pc}
 8004186:	bf00      	nop
 8004188:	20000ba4 	.word	0x20000ba4

0800418c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800418c:	b480      	push	{r7}
 800418e:	af00      	add	r7, sp, #0
	return 1;
 8004190:	2301      	movs	r3, #1
}
 8004192:	4618      	mov	r0, r3
 8004194:	46bd      	mov	sp, r7
 8004196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419a:	4770      	bx	lr

0800419c <_kill>:

int _kill(int pid, int sig)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b082      	sub	sp, #8
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
 80041a4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80041a6:	f004 f871 	bl	800828c <__errno>
 80041aa:	4603      	mov	r3, r0
 80041ac:	2216      	movs	r2, #22
 80041ae:	601a      	str	r2, [r3, #0]
	return -1;
 80041b0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80041b4:	4618      	mov	r0, r3
 80041b6:	3708      	adds	r7, #8
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bd80      	pop	{r7, pc}

080041bc <_exit>:

void _exit (int status)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b082      	sub	sp, #8
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80041c4:	f04f 31ff 	mov.w	r1, #4294967295
 80041c8:	6878      	ldr	r0, [r7, #4]
 80041ca:	f7ff ffe7 	bl	800419c <_kill>
	while (1) {}		/* Make sure we hang here */
 80041ce:	bf00      	nop
 80041d0:	e7fd      	b.n	80041ce <_exit+0x12>

080041d2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80041d2:	b580      	push	{r7, lr}
 80041d4:	b086      	sub	sp, #24
 80041d6:	af00      	add	r7, sp, #0
 80041d8:	60f8      	str	r0, [r7, #12]
 80041da:	60b9      	str	r1, [r7, #8]
 80041dc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80041de:	2300      	movs	r3, #0
 80041e0:	617b      	str	r3, [r7, #20]
 80041e2:	e00a      	b.n	80041fa <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80041e4:	f3af 8000 	nop.w
 80041e8:	4601      	mov	r1, r0
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	1c5a      	adds	r2, r3, #1
 80041ee:	60ba      	str	r2, [r7, #8]
 80041f0:	b2ca      	uxtb	r2, r1
 80041f2:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80041f4:	697b      	ldr	r3, [r7, #20]
 80041f6:	3301      	adds	r3, #1
 80041f8:	617b      	str	r3, [r7, #20]
 80041fa:	697a      	ldr	r2, [r7, #20]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	429a      	cmp	r2, r3
 8004200:	dbf0      	blt.n	80041e4 <_read+0x12>
	}

return len;
 8004202:	687b      	ldr	r3, [r7, #4]
}
 8004204:	4618      	mov	r0, r3
 8004206:	3718      	adds	r7, #24
 8004208:	46bd      	mov	sp, r7
 800420a:	bd80      	pop	{r7, pc}

0800420c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b086      	sub	sp, #24
 8004210:	af00      	add	r7, sp, #0
 8004212:	60f8      	str	r0, [r7, #12]
 8004214:	60b9      	str	r1, [r7, #8]
 8004216:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004218:	2300      	movs	r3, #0
 800421a:	617b      	str	r3, [r7, #20]
 800421c:	e009      	b.n	8004232 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	1c5a      	adds	r2, r3, #1
 8004222:	60ba      	str	r2, [r7, #8]
 8004224:	781b      	ldrb	r3, [r3, #0]
 8004226:	4618      	mov	r0, r3
 8004228:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	3301      	adds	r3, #1
 8004230:	617b      	str	r3, [r7, #20]
 8004232:	697a      	ldr	r2, [r7, #20]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	429a      	cmp	r2, r3
 8004238:	dbf1      	blt.n	800421e <_write+0x12>
	}
	return len;
 800423a:	687b      	ldr	r3, [r7, #4]
}
 800423c:	4618      	mov	r0, r3
 800423e:	3718      	adds	r7, #24
 8004240:	46bd      	mov	sp, r7
 8004242:	bd80      	pop	{r7, pc}

08004244 <_close>:

int _close(int file)
{
 8004244:	b480      	push	{r7}
 8004246:	b083      	sub	sp, #12
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
	return -1;
 800424c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004250:	4618      	mov	r0, r3
 8004252:	370c      	adds	r7, #12
 8004254:	46bd      	mov	sp, r7
 8004256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425a:	4770      	bx	lr

0800425c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800425c:	b480      	push	{r7}
 800425e:	b083      	sub	sp, #12
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
 8004264:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800426c:	605a      	str	r2, [r3, #4]
	return 0;
 800426e:	2300      	movs	r3, #0
}
 8004270:	4618      	mov	r0, r3
 8004272:	370c      	adds	r7, #12
 8004274:	46bd      	mov	sp, r7
 8004276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427a:	4770      	bx	lr

0800427c <_isatty>:

int _isatty(int file)
{
 800427c:	b480      	push	{r7}
 800427e:	b083      	sub	sp, #12
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
	return 1;
 8004284:	2301      	movs	r3, #1
}
 8004286:	4618      	mov	r0, r3
 8004288:	370c      	adds	r7, #12
 800428a:	46bd      	mov	sp, r7
 800428c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004290:	4770      	bx	lr

08004292 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004292:	b480      	push	{r7}
 8004294:	b085      	sub	sp, #20
 8004296:	af00      	add	r7, sp, #0
 8004298:	60f8      	str	r0, [r7, #12]
 800429a:	60b9      	str	r1, [r7, #8]
 800429c:	607a      	str	r2, [r7, #4]
	return 0;
 800429e:	2300      	movs	r3, #0
}
 80042a0:	4618      	mov	r0, r3
 80042a2:	3714      	adds	r7, #20
 80042a4:	46bd      	mov	sp, r7
 80042a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042aa:	4770      	bx	lr

080042ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b086      	sub	sp, #24
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80042b4:	4a14      	ldr	r2, [pc, #80]	@ (8004308 <_sbrk+0x5c>)
 80042b6:	4b15      	ldr	r3, [pc, #84]	@ (800430c <_sbrk+0x60>)
 80042b8:	1ad3      	subs	r3, r2, r3
 80042ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80042c0:	4b13      	ldr	r3, [pc, #76]	@ (8004310 <_sbrk+0x64>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d102      	bne.n	80042ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80042c8:	4b11      	ldr	r3, [pc, #68]	@ (8004310 <_sbrk+0x64>)
 80042ca:	4a12      	ldr	r2, [pc, #72]	@ (8004314 <_sbrk+0x68>)
 80042cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80042ce:	4b10      	ldr	r3, [pc, #64]	@ (8004310 <_sbrk+0x64>)
 80042d0:	681a      	ldr	r2, [r3, #0]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	4413      	add	r3, r2
 80042d6:	693a      	ldr	r2, [r7, #16]
 80042d8:	429a      	cmp	r2, r3
 80042da:	d207      	bcs.n	80042ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80042dc:	f003 ffd6 	bl	800828c <__errno>
 80042e0:	4603      	mov	r3, r0
 80042e2:	220c      	movs	r2, #12
 80042e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80042e6:	f04f 33ff 	mov.w	r3, #4294967295
 80042ea:	e009      	b.n	8004300 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80042ec:	4b08      	ldr	r3, [pc, #32]	@ (8004310 <_sbrk+0x64>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80042f2:	4b07      	ldr	r3, [pc, #28]	@ (8004310 <_sbrk+0x64>)
 80042f4:	681a      	ldr	r2, [r3, #0]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	4413      	add	r3, r2
 80042fa:	4a05      	ldr	r2, [pc, #20]	@ (8004310 <_sbrk+0x64>)
 80042fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80042fe:	68fb      	ldr	r3, [r7, #12]
}
 8004300:	4618      	mov	r0, r3
 8004302:	3718      	adds	r7, #24
 8004304:	46bd      	mov	sp, r7
 8004306:	bd80      	pop	{r7, pc}
 8004308:	20010000 	.word	0x20010000
 800430c:	00000400 	.word	0x00000400
 8004310:	20002c64 	.word	0x20002c64
 8004314:	20002db8 	.word	0x20002db8

08004318 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8004318:	b480      	push	{r7}
 800431a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800431c:	4b06      	ldr	r3, [pc, #24]	@ (8004338 <SystemInit+0x20>)
 800431e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004322:	4a05      	ldr	r2, [pc, #20]	@ (8004338 <SystemInit+0x20>)
 8004324:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004328:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800432c:	bf00      	nop
 800432e:	46bd      	mov	sp, r7
 8004330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004334:	4770      	bx	lr
 8004336:	bf00      	nop
 8004338:	e000ed00 	.word	0xe000ed00

0800433c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800433c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004374 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004340:	f7ff ffea 	bl	8004318 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004344:	480c      	ldr	r0, [pc, #48]	@ (8004378 <LoopForever+0x6>)
  ldr r1, =_edata
 8004346:	490d      	ldr	r1, [pc, #52]	@ (800437c <LoopForever+0xa>)
  ldr r2, =_sidata
 8004348:	4a0d      	ldr	r2, [pc, #52]	@ (8004380 <LoopForever+0xe>)
  movs r3, #0
 800434a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800434c:	e002      	b.n	8004354 <LoopCopyDataInit>

0800434e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800434e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004350:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004352:	3304      	adds	r3, #4

08004354 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004354:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004356:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004358:	d3f9      	bcc.n	800434e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800435a:	4a0a      	ldr	r2, [pc, #40]	@ (8004384 <LoopForever+0x12>)
  ldr r4, =_ebss
 800435c:	4c0a      	ldr	r4, [pc, #40]	@ (8004388 <LoopForever+0x16>)
  movs r3, #0
 800435e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004360:	e001      	b.n	8004366 <LoopFillZerobss>

08004362 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004362:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004364:	3204      	adds	r2, #4

08004366 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004366:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004368:	d3fb      	bcc.n	8004362 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800436a:	f003 ff95 	bl	8008298 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800436e:	f7ff f97d 	bl	800366c <main>

08004372 <LoopForever>:

LoopForever:
    b LoopForever
 8004372:	e7fe      	b.n	8004372 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8004374:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8004378:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800437c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8004380:	0800a740 	.word	0x0800a740
  ldr r2, =_sbss
 8004384:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8004388:	20002db8 	.word	0x20002db8

0800438c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800438c:	e7fe      	b.n	800438c <ADC1_IRQHandler>

0800438e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800438e:	b580      	push	{r7, lr}
 8004390:	b082      	sub	sp, #8
 8004392:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004394:	2300      	movs	r3, #0
 8004396:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004398:	2003      	movs	r0, #3
 800439a:	f001 fa41 	bl	8005820 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800439e:	200f      	movs	r0, #15
 80043a0:	f000 f80e 	bl	80043c0 <HAL_InitTick>
 80043a4:	4603      	mov	r3, r0
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d002      	beq.n	80043b0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80043aa:	2301      	movs	r3, #1
 80043ac:	71fb      	strb	r3, [r7, #7]
 80043ae:	e001      	b.n	80043b4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80043b0:	f7ff fdb0 	bl	8003f14 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80043b4:	79fb      	ldrb	r3, [r7, #7]
}
 80043b6:	4618      	mov	r0, r3
 80043b8:	3708      	adds	r7, #8
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}
	...

080043c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b084      	sub	sp, #16
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80043c8:	2300      	movs	r3, #0
 80043ca:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80043cc:	4b17      	ldr	r3, [pc, #92]	@ (800442c <HAL_InitTick+0x6c>)
 80043ce:	781b      	ldrb	r3, [r3, #0]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d023      	beq.n	800441c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80043d4:	4b16      	ldr	r3, [pc, #88]	@ (8004430 <HAL_InitTick+0x70>)
 80043d6:	681a      	ldr	r2, [r3, #0]
 80043d8:	4b14      	ldr	r3, [pc, #80]	@ (800442c <HAL_InitTick+0x6c>)
 80043da:	781b      	ldrb	r3, [r3, #0]
 80043dc:	4619      	mov	r1, r3
 80043de:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80043e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80043e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80043ea:	4618      	mov	r0, r3
 80043ec:	f001 fa4d 	bl	800588a <HAL_SYSTICK_Config>
 80043f0:	4603      	mov	r3, r0
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d10f      	bne.n	8004416 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2b0f      	cmp	r3, #15
 80043fa:	d809      	bhi.n	8004410 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80043fc:	2200      	movs	r2, #0
 80043fe:	6879      	ldr	r1, [r7, #4]
 8004400:	f04f 30ff 	mov.w	r0, #4294967295
 8004404:	f001 fa17 	bl	8005836 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004408:	4a0a      	ldr	r2, [pc, #40]	@ (8004434 <HAL_InitTick+0x74>)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6013      	str	r3, [r2, #0]
 800440e:	e007      	b.n	8004420 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8004410:	2301      	movs	r3, #1
 8004412:	73fb      	strb	r3, [r7, #15]
 8004414:	e004      	b.n	8004420 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	73fb      	strb	r3, [r7, #15]
 800441a:	e001      	b.n	8004420 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800441c:	2301      	movs	r3, #1
 800441e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004420:	7bfb      	ldrb	r3, [r7, #15]
}
 8004422:	4618      	mov	r0, r3
 8004424:	3710      	adds	r7, #16
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}
 800442a:	bf00      	nop
 800442c:	20000014 	.word	0x20000014
 8004430:	2000000c 	.word	0x2000000c
 8004434:	20000010 	.word	0x20000010

08004438 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004438:	b480      	push	{r7}
 800443a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800443c:	4b06      	ldr	r3, [pc, #24]	@ (8004458 <HAL_IncTick+0x20>)
 800443e:	781b      	ldrb	r3, [r3, #0]
 8004440:	461a      	mov	r2, r3
 8004442:	4b06      	ldr	r3, [pc, #24]	@ (800445c <HAL_IncTick+0x24>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4413      	add	r3, r2
 8004448:	4a04      	ldr	r2, [pc, #16]	@ (800445c <HAL_IncTick+0x24>)
 800444a:	6013      	str	r3, [r2, #0]
}
 800444c:	bf00      	nop
 800444e:	46bd      	mov	sp, r7
 8004450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004454:	4770      	bx	lr
 8004456:	bf00      	nop
 8004458:	20000014 	.word	0x20000014
 800445c:	20002c68 	.word	0x20002c68

08004460 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004460:	b480      	push	{r7}
 8004462:	af00      	add	r7, sp, #0
  return uwTick;
 8004464:	4b03      	ldr	r3, [pc, #12]	@ (8004474 <HAL_GetTick+0x14>)
 8004466:	681b      	ldr	r3, [r3, #0]
}
 8004468:	4618      	mov	r0, r3
 800446a:	46bd      	mov	sp, r7
 800446c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004470:	4770      	bx	lr
 8004472:	bf00      	nop
 8004474:	20002c68 	.word	0x20002c68

08004478 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b084      	sub	sp, #16
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004480:	f7ff ffee 	bl	8004460 <HAL_GetTick>
 8004484:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004490:	d005      	beq.n	800449e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8004492:	4b0a      	ldr	r3, [pc, #40]	@ (80044bc <HAL_Delay+0x44>)
 8004494:	781b      	ldrb	r3, [r3, #0]
 8004496:	461a      	mov	r2, r3
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	4413      	add	r3, r2
 800449c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800449e:	bf00      	nop
 80044a0:	f7ff ffde 	bl	8004460 <HAL_GetTick>
 80044a4:	4602      	mov	r2, r0
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	1ad3      	subs	r3, r2, r3
 80044aa:	68fa      	ldr	r2, [r7, #12]
 80044ac:	429a      	cmp	r2, r3
 80044ae:	d8f7      	bhi.n	80044a0 <HAL_Delay+0x28>
  {
  }
}
 80044b0:	bf00      	nop
 80044b2:	bf00      	nop
 80044b4:	3710      	adds	r7, #16
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}
 80044ba:	bf00      	nop
 80044bc:	20000014 	.word	0x20000014

080044c0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80044c0:	b480      	push	{r7}
 80044c2:	b083      	sub	sp, #12
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
 80044c8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	689b      	ldr	r3, [r3, #8]
 80044ce:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	431a      	orrs	r2, r3
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	609a      	str	r2, [r3, #8]
}
 80044da:	bf00      	nop
 80044dc:	370c      	adds	r7, #12
 80044de:	46bd      	mov	sp, r7
 80044e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e4:	4770      	bx	lr

080044e6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80044e6:	b480      	push	{r7}
 80044e8:	b083      	sub	sp, #12
 80044ea:	af00      	add	r7, sp, #0
 80044ec:	6078      	str	r0, [r7, #4]
 80044ee:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	689b      	ldr	r3, [r3, #8]
 80044f4:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	431a      	orrs	r2, r3
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	609a      	str	r2, [r3, #8]
}
 8004500:	bf00      	nop
 8004502:	370c      	adds	r7, #12
 8004504:	46bd      	mov	sp, r7
 8004506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450a:	4770      	bx	lr

0800450c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800450c:	b480      	push	{r7}
 800450e:	b083      	sub	sp, #12
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	689b      	ldr	r3, [r3, #8]
 8004518:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800451c:	4618      	mov	r0, r3
 800451e:	370c      	adds	r7, #12
 8004520:	46bd      	mov	sp, r7
 8004522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004526:	4770      	bx	lr

08004528 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004528:	b480      	push	{r7}
 800452a:	b087      	sub	sp, #28
 800452c:	af00      	add	r7, sp, #0
 800452e:	60f8      	str	r0, [r7, #12]
 8004530:	60b9      	str	r1, [r7, #8]
 8004532:	607a      	str	r2, [r7, #4]
 8004534:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	3360      	adds	r3, #96	@ 0x60
 800453a:	461a      	mov	r2, r3
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	009b      	lsls	r3, r3, #2
 8004540:	4413      	add	r3, r2
 8004542:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	681a      	ldr	r2, [r3, #0]
 8004548:	4b08      	ldr	r3, [pc, #32]	@ (800456c <LL_ADC_SetOffset+0x44>)
 800454a:	4013      	ands	r3, r2
 800454c:	687a      	ldr	r2, [r7, #4]
 800454e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8004552:	683a      	ldr	r2, [r7, #0]
 8004554:	430a      	orrs	r2, r1
 8004556:	4313      	orrs	r3, r2
 8004558:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800455c:	697b      	ldr	r3, [r7, #20]
 800455e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8004560:	bf00      	nop
 8004562:	371c      	adds	r7, #28
 8004564:	46bd      	mov	sp, r7
 8004566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456a:	4770      	bx	lr
 800456c:	03fff000 	.word	0x03fff000

08004570 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8004570:	b480      	push	{r7}
 8004572:	b085      	sub	sp, #20
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
 8004578:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	3360      	adds	r3, #96	@ 0x60
 800457e:	461a      	mov	r2, r3
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	009b      	lsls	r3, r3, #2
 8004584:	4413      	add	r3, r2
 8004586:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8004590:	4618      	mov	r0, r3
 8004592:	3714      	adds	r7, #20
 8004594:	46bd      	mov	sp, r7
 8004596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459a:	4770      	bx	lr

0800459c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800459c:	b480      	push	{r7}
 800459e:	b087      	sub	sp, #28
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	60f8      	str	r0, [r7, #12]
 80045a4:	60b9      	str	r1, [r7, #8]
 80045a6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	3360      	adds	r3, #96	@ 0x60
 80045ac:	461a      	mov	r2, r3
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	009b      	lsls	r3, r3, #2
 80045b2:	4413      	add	r3, r2
 80045b4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	431a      	orrs	r2, r3
 80045c2:	697b      	ldr	r3, [r7, #20]
 80045c4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80045c6:	bf00      	nop
 80045c8:	371c      	adds	r7, #28
 80045ca:	46bd      	mov	sp, r7
 80045cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d0:	4770      	bx	lr

080045d2 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80045d2:	b480      	push	{r7}
 80045d4:	b087      	sub	sp, #28
 80045d6:	af00      	add	r7, sp, #0
 80045d8:	60f8      	str	r0, [r7, #12]
 80045da:	60b9      	str	r1, [r7, #8]
 80045dc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	3330      	adds	r3, #48	@ 0x30
 80045e2:	461a      	mov	r2, r3
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	0a1b      	lsrs	r3, r3, #8
 80045e8:	009b      	lsls	r3, r3, #2
 80045ea:	f003 030c 	and.w	r3, r3, #12
 80045ee:	4413      	add	r3, r2
 80045f0:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80045f2:	697b      	ldr	r3, [r7, #20]
 80045f4:	681a      	ldr	r2, [r3, #0]
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	f003 031f 	and.w	r3, r3, #31
 80045fc:	211f      	movs	r1, #31
 80045fe:	fa01 f303 	lsl.w	r3, r1, r3
 8004602:	43db      	mvns	r3, r3
 8004604:	401a      	ands	r2, r3
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	0e9b      	lsrs	r3, r3, #26
 800460a:	f003 011f 	and.w	r1, r3, #31
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	f003 031f 	and.w	r3, r3, #31
 8004614:	fa01 f303 	lsl.w	r3, r1, r3
 8004618:	431a      	orrs	r2, r3
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800461e:	bf00      	nop
 8004620:	371c      	adds	r7, #28
 8004622:	46bd      	mov	sp, r7
 8004624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004628:	4770      	bx	lr

0800462a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800462a:	b480      	push	{r7}
 800462c:	b087      	sub	sp, #28
 800462e:	af00      	add	r7, sp, #0
 8004630:	60f8      	str	r0, [r7, #12]
 8004632:	60b9      	str	r1, [r7, #8]
 8004634:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	3314      	adds	r3, #20
 800463a:	461a      	mov	r2, r3
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	0e5b      	lsrs	r3, r3, #25
 8004640:	009b      	lsls	r3, r3, #2
 8004642:	f003 0304 	and.w	r3, r3, #4
 8004646:	4413      	add	r3, r2
 8004648:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	681a      	ldr	r2, [r3, #0]
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	0d1b      	lsrs	r3, r3, #20
 8004652:	f003 031f 	and.w	r3, r3, #31
 8004656:	2107      	movs	r1, #7
 8004658:	fa01 f303 	lsl.w	r3, r1, r3
 800465c:	43db      	mvns	r3, r3
 800465e:	401a      	ands	r2, r3
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	0d1b      	lsrs	r3, r3, #20
 8004664:	f003 031f 	and.w	r3, r3, #31
 8004668:	6879      	ldr	r1, [r7, #4]
 800466a:	fa01 f303 	lsl.w	r3, r1, r3
 800466e:	431a      	orrs	r2, r3
 8004670:	697b      	ldr	r3, [r7, #20]
 8004672:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004674:	bf00      	nop
 8004676:	371c      	adds	r7, #28
 8004678:	46bd      	mov	sp, r7
 800467a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467e:	4770      	bx	lr

08004680 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004680:	b480      	push	{r7}
 8004682:	b085      	sub	sp, #20
 8004684:	af00      	add	r7, sp, #0
 8004686:	60f8      	str	r0, [r7, #12]
 8004688:	60b9      	str	r1, [r7, #8]
 800468a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8004692:	68bb      	ldr	r3, [r7, #8]
 8004694:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004698:	43db      	mvns	r3, r3
 800469a:	401a      	ands	r2, r3
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	f003 0318 	and.w	r3, r3, #24
 80046a2:	4908      	ldr	r1, [pc, #32]	@ (80046c4 <LL_ADC_SetChannelSingleDiff+0x44>)
 80046a4:	40d9      	lsrs	r1, r3
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	400b      	ands	r3, r1
 80046aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046ae:	431a      	orrs	r2, r3
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80046b6:	bf00      	nop
 80046b8:	3714      	adds	r7, #20
 80046ba:	46bd      	mov	sp, r7
 80046bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c0:	4770      	bx	lr
 80046c2:	bf00      	nop
 80046c4:	0007ffff 	.word	0x0007ffff

080046c8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80046c8:	b480      	push	{r7}
 80046ca:	b083      	sub	sp, #12
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	689b      	ldr	r3, [r3, #8]
 80046d4:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80046d8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80046dc:	687a      	ldr	r2, [r7, #4]
 80046de:	6093      	str	r3, [r2, #8]
}
 80046e0:	bf00      	nop
 80046e2:	370c      	adds	r7, #12
 80046e4:	46bd      	mov	sp, r7
 80046e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ea:	4770      	bx	lr

080046ec <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80046ec:	b480      	push	{r7}
 80046ee:	b083      	sub	sp, #12
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	689b      	ldr	r3, [r3, #8]
 80046f8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80046fc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004700:	d101      	bne.n	8004706 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004702:	2301      	movs	r3, #1
 8004704:	e000      	b.n	8004708 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8004706:	2300      	movs	r3, #0
}
 8004708:	4618      	mov	r0, r3
 800470a:	370c      	adds	r7, #12
 800470c:	46bd      	mov	sp, r7
 800470e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004712:	4770      	bx	lr

08004714 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004714:	b480      	push	{r7}
 8004716:	b083      	sub	sp, #12
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	689b      	ldr	r3, [r3, #8]
 8004720:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8004724:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004728:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004730:	bf00      	nop
 8004732:	370c      	adds	r7, #12
 8004734:	46bd      	mov	sp, r7
 8004736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473a:	4770      	bx	lr

0800473c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800473c:	b480      	push	{r7}
 800473e:	b083      	sub	sp, #12
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	689b      	ldr	r3, [r3, #8]
 8004748:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800474c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004750:	d101      	bne.n	8004756 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004752:	2301      	movs	r3, #1
 8004754:	e000      	b.n	8004758 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004756:	2300      	movs	r3, #0
}
 8004758:	4618      	mov	r0, r3
 800475a:	370c      	adds	r7, #12
 800475c:	46bd      	mov	sp, r7
 800475e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004762:	4770      	bx	lr

08004764 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004764:	b480      	push	{r7}
 8004766:	b083      	sub	sp, #12
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004774:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004778:	f043 0201 	orr.w	r2, r3, #1
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004780:	bf00      	nop
 8004782:	370c      	adds	r7, #12
 8004784:	46bd      	mov	sp, r7
 8004786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478a:	4770      	bx	lr

0800478c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800478c:	b480      	push	{r7}
 800478e:	b083      	sub	sp, #12
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	689b      	ldr	r3, [r3, #8]
 8004798:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800479c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80047a0:	f043 0202 	orr.w	r2, r3, #2
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80047a8:	bf00      	nop
 80047aa:	370c      	adds	r7, #12
 80047ac:	46bd      	mov	sp, r7
 80047ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b2:	4770      	bx	lr

080047b4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80047b4:	b480      	push	{r7}
 80047b6:	b083      	sub	sp, #12
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	689b      	ldr	r3, [r3, #8]
 80047c0:	f003 0301 	and.w	r3, r3, #1
 80047c4:	2b01      	cmp	r3, #1
 80047c6:	d101      	bne.n	80047cc <LL_ADC_IsEnabled+0x18>
 80047c8:	2301      	movs	r3, #1
 80047ca:	e000      	b.n	80047ce <LL_ADC_IsEnabled+0x1a>
 80047cc:	2300      	movs	r3, #0
}
 80047ce:	4618      	mov	r0, r3
 80047d0:	370c      	adds	r7, #12
 80047d2:	46bd      	mov	sp, r7
 80047d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d8:	4770      	bx	lr

080047da <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80047da:	b480      	push	{r7}
 80047dc:	b083      	sub	sp, #12
 80047de:	af00      	add	r7, sp, #0
 80047e0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	689b      	ldr	r3, [r3, #8]
 80047e6:	f003 0302 	and.w	r3, r3, #2
 80047ea:	2b02      	cmp	r3, #2
 80047ec:	d101      	bne.n	80047f2 <LL_ADC_IsDisableOngoing+0x18>
 80047ee:	2301      	movs	r3, #1
 80047f0:	e000      	b.n	80047f4 <LL_ADC_IsDisableOngoing+0x1a>
 80047f2:	2300      	movs	r3, #0
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	370c      	adds	r7, #12
 80047f8:	46bd      	mov	sp, r7
 80047fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fe:	4770      	bx	lr

08004800 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004800:	b480      	push	{r7}
 8004802:	b083      	sub	sp, #12
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	689b      	ldr	r3, [r3, #8]
 800480c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004810:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004814:	f043 0204 	orr.w	r2, r3, #4
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800481c:	bf00      	nop
 800481e:	370c      	adds	r7, #12
 8004820:	46bd      	mov	sp, r7
 8004822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004826:	4770      	bx	lr

08004828 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004828:	b480      	push	{r7}
 800482a:	b083      	sub	sp, #12
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	689b      	ldr	r3, [r3, #8]
 8004834:	f003 0304 	and.w	r3, r3, #4
 8004838:	2b04      	cmp	r3, #4
 800483a:	d101      	bne.n	8004840 <LL_ADC_REG_IsConversionOngoing+0x18>
 800483c:	2301      	movs	r3, #1
 800483e:	e000      	b.n	8004842 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004840:	2300      	movs	r3, #0
}
 8004842:	4618      	mov	r0, r3
 8004844:	370c      	adds	r7, #12
 8004846:	46bd      	mov	sp, r7
 8004848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484c:	4770      	bx	lr

0800484e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800484e:	b480      	push	{r7}
 8004850:	b083      	sub	sp, #12
 8004852:	af00      	add	r7, sp, #0
 8004854:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	689b      	ldr	r3, [r3, #8]
 800485a:	f003 0308 	and.w	r3, r3, #8
 800485e:	2b08      	cmp	r3, #8
 8004860:	d101      	bne.n	8004866 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004862:	2301      	movs	r3, #1
 8004864:	e000      	b.n	8004868 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004866:	2300      	movs	r3, #0
}
 8004868:	4618      	mov	r0, r3
 800486a:	370c      	adds	r7, #12
 800486c:	46bd      	mov	sp, r7
 800486e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004872:	4770      	bx	lr

08004874 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b088      	sub	sp, #32
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800487c:	2300      	movs	r3, #0
 800487e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8004880:	2300      	movs	r3, #0
 8004882:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d101      	bne.n	800488e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800488a:	2301      	movs	r3, #1
 800488c:	e126      	b.n	8004adc <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	691b      	ldr	r3, [r3, #16]
 8004892:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004898:	2b00      	cmp	r3, #0
 800489a:	d109      	bne.n	80048b0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800489c:	6878      	ldr	r0, [r7, #4]
 800489e:	f7ff fb5d 	bl	8003f5c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2200      	movs	r2, #0
 80048a6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2200      	movs	r2, #0
 80048ac:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4618      	mov	r0, r3
 80048b6:	f7ff ff19 	bl	80046ec <LL_ADC_IsDeepPowerDownEnabled>
 80048ba:	4603      	mov	r3, r0
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d004      	beq.n	80048ca <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4618      	mov	r0, r3
 80048c6:	f7ff feff 	bl	80046c8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4618      	mov	r0, r3
 80048d0:	f7ff ff34 	bl	800473c <LL_ADC_IsInternalRegulatorEnabled>
 80048d4:	4603      	mov	r3, r0
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d115      	bne.n	8004906 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4618      	mov	r0, r3
 80048e0:	f7ff ff18 	bl	8004714 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80048e4:	4b7f      	ldr	r3, [pc, #508]	@ (8004ae4 <HAL_ADC_Init+0x270>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	099b      	lsrs	r3, r3, #6
 80048ea:	4a7f      	ldr	r2, [pc, #508]	@ (8004ae8 <HAL_ADC_Init+0x274>)
 80048ec:	fba2 2303 	umull	r2, r3, r2, r3
 80048f0:	099b      	lsrs	r3, r3, #6
 80048f2:	3301      	adds	r3, #1
 80048f4:	005b      	lsls	r3, r3, #1
 80048f6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80048f8:	e002      	b.n	8004900 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	3b01      	subs	r3, #1
 80048fe:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d1f9      	bne.n	80048fa <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4618      	mov	r0, r3
 800490c:	f7ff ff16 	bl	800473c <LL_ADC_IsInternalRegulatorEnabled>
 8004910:	4603      	mov	r3, r0
 8004912:	2b00      	cmp	r3, #0
 8004914:	d10d      	bne.n	8004932 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800491a:	f043 0210 	orr.w	r2, r3, #16
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004926:	f043 0201 	orr.w	r2, r3, #1
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800492e:	2301      	movs	r3, #1
 8004930:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4618      	mov	r0, r3
 8004938:	f7ff ff76 	bl	8004828 <LL_ADC_REG_IsConversionOngoing>
 800493c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004942:	f003 0310 	and.w	r3, r3, #16
 8004946:	2b00      	cmp	r3, #0
 8004948:	f040 80bf 	bne.w	8004aca <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	2b00      	cmp	r3, #0
 8004950:	f040 80bb 	bne.w	8004aca <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004958:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800495c:	f043 0202 	orr.w	r2, r3, #2
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4618      	mov	r0, r3
 800496a:	f7ff ff23 	bl	80047b4 <LL_ADC_IsEnabled>
 800496e:	4603      	mov	r3, r0
 8004970:	2b00      	cmp	r3, #0
 8004972:	d10b      	bne.n	800498c <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004974:	485d      	ldr	r0, [pc, #372]	@ (8004aec <HAL_ADC_Init+0x278>)
 8004976:	f7ff ff1d 	bl	80047b4 <LL_ADC_IsEnabled>
 800497a:	4603      	mov	r3, r0
 800497c:	2b00      	cmp	r3, #0
 800497e:	d105      	bne.n	800498c <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	4619      	mov	r1, r3
 8004986:	485a      	ldr	r0, [pc, #360]	@ (8004af0 <HAL_ADC_Init+0x27c>)
 8004988:	f7ff fd9a 	bl	80044c0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	7e5b      	ldrb	r3, [r3, #25]
 8004990:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004996:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800499c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80049a2:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80049aa:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80049ac:	4313      	orrs	r3, r2
 80049ae:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80049b6:	2b01      	cmp	r3, #1
 80049b8:	d106      	bne.n	80049c8 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049be:	3b01      	subs	r3, #1
 80049c0:	045b      	lsls	r3, r3, #17
 80049c2:	69ba      	ldr	r2, [r7, #24]
 80049c4:	4313      	orrs	r3, r2
 80049c6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d009      	beq.n	80049e4 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049d4:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049dc:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80049de:	69ba      	ldr	r2, [r7, #24]
 80049e0:	4313      	orrs	r3, r2
 80049e2:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	68da      	ldr	r2, [r3, #12]
 80049ea:	4b42      	ldr	r3, [pc, #264]	@ (8004af4 <HAL_ADC_Init+0x280>)
 80049ec:	4013      	ands	r3, r2
 80049ee:	687a      	ldr	r2, [r7, #4]
 80049f0:	6812      	ldr	r2, [r2, #0]
 80049f2:	69b9      	ldr	r1, [r7, #24]
 80049f4:	430b      	orrs	r3, r1
 80049f6:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4618      	mov	r0, r3
 80049fe:	f7ff ff26 	bl	800484e <LL_ADC_INJ_IsConversionOngoing>
 8004a02:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004a04:	697b      	ldr	r3, [r7, #20]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d13d      	bne.n	8004a86 <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004a0a:	693b      	ldr	r3, [r7, #16]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d13a      	bne.n	8004a86 <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004a14:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004a1c:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	68db      	ldr	r3, [r3, #12]
 8004a28:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004a2c:	f023 0302 	bic.w	r3, r3, #2
 8004a30:	687a      	ldr	r2, [r7, #4]
 8004a32:	6812      	ldr	r2, [r2, #0]
 8004a34:	69b9      	ldr	r1, [r7, #24]
 8004a36:	430b      	orrs	r3, r1
 8004a38:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004a40:	2b01      	cmp	r3, #1
 8004a42:	d118      	bne.n	8004a76 <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	691b      	ldr	r3, [r3, #16]
 8004a4a:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004a4e:	f023 0304 	bic.w	r3, r3, #4
 8004a52:	687a      	ldr	r2, [r7, #4]
 8004a54:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8004a56:	687a      	ldr	r2, [r7, #4]
 8004a58:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004a5a:	4311      	orrs	r1, r2
 8004a5c:	687a      	ldr	r2, [r7, #4]
 8004a5e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8004a60:	4311      	orrs	r1, r2
 8004a62:	687a      	ldr	r2, [r7, #4]
 8004a64:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004a66:	430a      	orrs	r2, r1
 8004a68:	431a      	orrs	r2, r3
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f042 0201 	orr.w	r2, r2, #1
 8004a72:	611a      	str	r2, [r3, #16]
 8004a74:	e007      	b.n	8004a86 <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	691a      	ldr	r2, [r3, #16]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f022 0201 	bic.w	r2, r2, #1
 8004a84:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	691b      	ldr	r3, [r3, #16]
 8004a8a:	2b01      	cmp	r3, #1
 8004a8c:	d10c      	bne.n	8004aa8 <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a94:	f023 010f 	bic.w	r1, r3, #15
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	69db      	ldr	r3, [r3, #28]
 8004a9c:	1e5a      	subs	r2, r3, #1
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	430a      	orrs	r2, r1
 8004aa4:	631a      	str	r2, [r3, #48]	@ 0x30
 8004aa6:	e007      	b.n	8004ab8 <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f022 020f 	bic.w	r2, r2, #15
 8004ab6:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004abc:	f023 0303 	bic.w	r3, r3, #3
 8004ac0:	f043 0201 	orr.w	r2, r3, #1
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	655a      	str	r2, [r3, #84]	@ 0x54
 8004ac8:	e007      	b.n	8004ada <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ace:	f043 0210 	orr.w	r2, r3, #16
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004ada:	7ffb      	ldrb	r3, [r7, #31]
}
 8004adc:	4618      	mov	r0, r3
 8004ade:	3720      	adds	r7, #32
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	bd80      	pop	{r7, pc}
 8004ae4:	2000000c 	.word	0x2000000c
 8004ae8:	053e2d63 	.word	0x053e2d63
 8004aec:	50040000 	.word	0x50040000
 8004af0:	50040300 	.word	0x50040300
 8004af4:	fff0c007 	.word	0xfff0c007

08004af8 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b084      	sub	sp, #16
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4618      	mov	r0, r3
 8004b06:	f7ff fe8f 	bl	8004828 <LL_ADC_REG_IsConversionOngoing>
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d14f      	bne.n	8004bb0 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004b16:	2b01      	cmp	r3, #1
 8004b18:	d101      	bne.n	8004b1e <HAL_ADC_Start+0x26>
 8004b1a:	2302      	movs	r3, #2
 8004b1c:	e04b      	b.n	8004bb6 <HAL_ADC_Start+0xbe>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2201      	movs	r2, #1
 8004b22:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8004b26:	6878      	ldr	r0, [r7, #4]
 8004b28:	f000 fc38 	bl	800539c <ADC_Enable>
 8004b2c:	4603      	mov	r3, r0
 8004b2e:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8004b30:	7bfb      	ldrb	r3, [r7, #15]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d137      	bne.n	8004ba6 <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b3a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004b3e:	f023 0301 	bic.w	r3, r3, #1
 8004b42:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	655a      	str	r2, [r3, #84]	@ 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b4e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004b52:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b56:	d106      	bne.n	8004b66 <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b5c:	f023 0206 	bic.w	r2, r3, #6
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	659a      	str	r2, [r3, #88]	@ 0x58
 8004b64:	e002      	b.n	8004b6c <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	221c      	movs	r2, #28
 8004b72:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2200      	movs	r2, #0
 8004b78:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	68db      	ldr	r3, [r3, #12]
 8004b82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d007      	beq.n	8004b9a <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b8e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8004b92:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	655a      	str	r2, [r3, #84]	@ 0x54
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	f7ff fe2e 	bl	8004800 <LL_ADC_REG_StartConversion>
 8004ba4:	e006      	b.n	8004bb4 <HAL_ADC_Start+0xbc>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8004bae:	e001      	b.n	8004bb4 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004bb0:	2302      	movs	r3, #2
 8004bb2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8004bb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	3710      	adds	r7, #16
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	bd80      	pop	{r7, pc}

08004bbe <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8004bbe:	b480      	push	{r7}
 8004bc0:	b083      	sub	sp, #12
 8004bc2:	af00      	add	r7, sp, #0
 8004bc4:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8004bcc:	4618      	mov	r0, r3
 8004bce:	370c      	adds	r7, #12
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd6:	4770      	bx	lr

08004bd8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b0b6      	sub	sp, #216	@ 0xd8
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
 8004be0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004be2:	2300      	movs	r3, #0
 8004be4:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004be8:	2300      	movs	r3, #0
 8004bea:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004bf2:	2b01      	cmp	r3, #1
 8004bf4:	d101      	bne.n	8004bfa <HAL_ADC_ConfigChannel+0x22>
 8004bf6:	2302      	movs	r3, #2
 8004bf8:	e3bb      	b.n	8005372 <HAL_ADC_ConfigChannel+0x79a>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2201      	movs	r2, #1
 8004bfe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4618      	mov	r0, r3
 8004c08:	f7ff fe0e 	bl	8004828 <LL_ADC_REG_IsConversionOngoing>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	f040 83a0 	bne.w	8005354 <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	2b05      	cmp	r3, #5
 8004c22:	d824      	bhi.n	8004c6e <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	685b      	ldr	r3, [r3, #4]
 8004c28:	3b02      	subs	r3, #2
 8004c2a:	2b03      	cmp	r3, #3
 8004c2c:	d81b      	bhi.n	8004c66 <HAL_ADC_ConfigChannel+0x8e>
 8004c2e:	a201      	add	r2, pc, #4	@ (adr r2, 8004c34 <HAL_ADC_ConfigChannel+0x5c>)
 8004c30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c34:	08004c45 	.word	0x08004c45
 8004c38:	08004c4d 	.word	0x08004c4d
 8004c3c:	08004c55 	.word	0x08004c55
 8004c40:	08004c5d 	.word	0x08004c5d
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8004c44:	230c      	movs	r3, #12
 8004c46:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8004c4a:	e010      	b.n	8004c6e <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8004c4c:	2312      	movs	r3, #18
 8004c4e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8004c52:	e00c      	b.n	8004c6e <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8004c54:	2318      	movs	r3, #24
 8004c56:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8004c5a:	e008      	b.n	8004c6e <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8004c5c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004c60:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8004c64:	e003      	b.n	8004c6e <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8004c66:	2306      	movs	r3, #6
 8004c68:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8004c6c:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6818      	ldr	r0, [r3, #0]
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	461a      	mov	r2, r3
 8004c78:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8004c7c:	f7ff fca9 	bl	80045d2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4618      	mov	r0, r3
 8004c86:	f7ff fdcf 	bl	8004828 <LL_ADC_REG_IsConversionOngoing>
 8004c8a:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4618      	mov	r0, r3
 8004c94:	f7ff fddb 	bl	800484e <LL_ADC_INJ_IsConversionOngoing>
 8004c98:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004c9c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	f040 81a4 	bne.w	8004fee <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004ca6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	f040 819f 	bne.w	8004fee <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6818      	ldr	r0, [r3, #0]
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	6819      	ldr	r1, [r3, #0]
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	689b      	ldr	r3, [r3, #8]
 8004cbc:	461a      	mov	r2, r3
 8004cbe:	f7ff fcb4 	bl	800462a <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	695a      	ldr	r2, [r3, #20]
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	68db      	ldr	r3, [r3, #12]
 8004ccc:	08db      	lsrs	r3, r3, #3
 8004cce:	f003 0303 	and.w	r3, r3, #3
 8004cd2:	005b      	lsls	r3, r3, #1
 8004cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8004cd8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	691b      	ldr	r3, [r3, #16]
 8004ce0:	2b04      	cmp	r3, #4
 8004ce2:	d00a      	beq.n	8004cfa <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6818      	ldr	r0, [r3, #0]
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	6919      	ldr	r1, [r3, #16]
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	681a      	ldr	r2, [r3, #0]
 8004cf0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004cf4:	f7ff fc18 	bl	8004528 <LL_ADC_SetOffset>
 8004cf8:	e179      	b.n	8004fee <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	2100      	movs	r1, #0
 8004d00:	4618      	mov	r0, r3
 8004d02:	f7ff fc35 	bl	8004570 <LL_ADC_GetOffsetChannel>
 8004d06:	4603      	mov	r3, r0
 8004d08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d10a      	bne.n	8004d26 <HAL_ADC_ConfigChannel+0x14e>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	2100      	movs	r1, #0
 8004d16:	4618      	mov	r0, r3
 8004d18:	f7ff fc2a 	bl	8004570 <LL_ADC_GetOffsetChannel>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	0e9b      	lsrs	r3, r3, #26
 8004d20:	f003 021f 	and.w	r2, r3, #31
 8004d24:	e01e      	b.n	8004d64 <HAL_ADC_ConfigChannel+0x18c>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	2100      	movs	r1, #0
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	f7ff fc1f 	bl	8004570 <LL_ADC_GetOffsetChannel>
 8004d32:	4603      	mov	r3, r0
 8004d34:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d38:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004d3c:	fa93 f3a3 	rbit	r3, r3
 8004d40:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004d44:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004d48:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004d4c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d101      	bne.n	8004d58 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8004d54:	2320      	movs	r3, #32
 8004d56:	e004      	b.n	8004d62 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8004d58:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004d5c:	fab3 f383 	clz	r3, r3
 8004d60:	b2db      	uxtb	r3, r3
 8004d62:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d105      	bne.n	8004d7c <HAL_ADC_ConfigChannel+0x1a4>
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	0e9b      	lsrs	r3, r3, #26
 8004d76:	f003 031f 	and.w	r3, r3, #31
 8004d7a:	e018      	b.n	8004dae <HAL_ADC_ConfigChannel+0x1d6>
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d84:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004d88:	fa93 f3a3 	rbit	r3, r3
 8004d8c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8004d90:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004d94:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8004d98:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d101      	bne.n	8004da4 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8004da0:	2320      	movs	r3, #32
 8004da2:	e004      	b.n	8004dae <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8004da4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004da8:	fab3 f383 	clz	r3, r3
 8004dac:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004dae:	429a      	cmp	r2, r3
 8004db0:	d106      	bne.n	8004dc0 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	2200      	movs	r2, #0
 8004db8:	2100      	movs	r1, #0
 8004dba:	4618      	mov	r0, r3
 8004dbc:	f7ff fbee 	bl	800459c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	2101      	movs	r1, #1
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	f7ff fbd2 	bl	8004570 <LL_ADC_GetOffsetChannel>
 8004dcc:	4603      	mov	r3, r0
 8004dce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d10a      	bne.n	8004dec <HAL_ADC_ConfigChannel+0x214>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	2101      	movs	r1, #1
 8004ddc:	4618      	mov	r0, r3
 8004dde:	f7ff fbc7 	bl	8004570 <LL_ADC_GetOffsetChannel>
 8004de2:	4603      	mov	r3, r0
 8004de4:	0e9b      	lsrs	r3, r3, #26
 8004de6:	f003 021f 	and.w	r2, r3, #31
 8004dea:	e01e      	b.n	8004e2a <HAL_ADC_ConfigChannel+0x252>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	2101      	movs	r1, #1
 8004df2:	4618      	mov	r0, r3
 8004df4:	f7ff fbbc 	bl	8004570 <LL_ADC_GetOffsetChannel>
 8004df8:	4603      	mov	r3, r0
 8004dfa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dfe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004e02:	fa93 f3a3 	rbit	r3, r3
 8004e06:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8004e0a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004e0e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8004e12:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d101      	bne.n	8004e1e <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8004e1a:	2320      	movs	r3, #32
 8004e1c:	e004      	b.n	8004e28 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8004e1e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004e22:	fab3 f383 	clz	r3, r3
 8004e26:	b2db      	uxtb	r3, r3
 8004e28:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d105      	bne.n	8004e42 <HAL_ADC_ConfigChannel+0x26a>
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	0e9b      	lsrs	r3, r3, #26
 8004e3c:	f003 031f 	and.w	r3, r3, #31
 8004e40:	e018      	b.n	8004e74 <HAL_ADC_ConfigChannel+0x29c>
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e4a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004e4e:	fa93 f3a3 	rbit	r3, r3
 8004e52:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8004e56:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004e5a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8004e5e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d101      	bne.n	8004e6a <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8004e66:	2320      	movs	r3, #32
 8004e68:	e004      	b.n	8004e74 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8004e6a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004e6e:	fab3 f383 	clz	r3, r3
 8004e72:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004e74:	429a      	cmp	r2, r3
 8004e76:	d106      	bne.n	8004e86 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	2101      	movs	r1, #1
 8004e80:	4618      	mov	r0, r3
 8004e82:	f7ff fb8b 	bl	800459c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	2102      	movs	r1, #2
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	f7ff fb6f 	bl	8004570 <LL_ADC_GetOffsetChannel>
 8004e92:	4603      	mov	r3, r0
 8004e94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d10a      	bne.n	8004eb2 <HAL_ADC_ConfigChannel+0x2da>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	2102      	movs	r1, #2
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	f7ff fb64 	bl	8004570 <LL_ADC_GetOffsetChannel>
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	0e9b      	lsrs	r3, r3, #26
 8004eac:	f003 021f 	and.w	r2, r3, #31
 8004eb0:	e01e      	b.n	8004ef0 <HAL_ADC_ConfigChannel+0x318>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	2102      	movs	r1, #2
 8004eb8:	4618      	mov	r0, r3
 8004eba:	f7ff fb59 	bl	8004570 <LL_ADC_GetOffsetChannel>
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ec4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004ec8:	fa93 f3a3 	rbit	r3, r3
 8004ecc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8004ed0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004ed4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8004ed8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d101      	bne.n	8004ee4 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8004ee0:	2320      	movs	r3, #32
 8004ee2:	e004      	b.n	8004eee <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8004ee4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004ee8:	fab3 f383 	clz	r3, r3
 8004eec:	b2db      	uxtb	r3, r3
 8004eee:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d105      	bne.n	8004f08 <HAL_ADC_ConfigChannel+0x330>
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	0e9b      	lsrs	r3, r3, #26
 8004f02:	f003 031f 	and.w	r3, r3, #31
 8004f06:	e014      	b.n	8004f32 <HAL_ADC_ConfigChannel+0x35a>
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f0e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004f10:	fa93 f3a3 	rbit	r3, r3
 8004f14:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8004f16:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004f18:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8004f1c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d101      	bne.n	8004f28 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8004f24:	2320      	movs	r3, #32
 8004f26:	e004      	b.n	8004f32 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8004f28:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004f2c:	fab3 f383 	clz	r3, r3
 8004f30:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004f32:	429a      	cmp	r2, r3
 8004f34:	d106      	bne.n	8004f44 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	2102      	movs	r1, #2
 8004f3e:	4618      	mov	r0, r3
 8004f40:	f7ff fb2c 	bl	800459c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	2103      	movs	r1, #3
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	f7ff fb10 	bl	8004570 <LL_ADC_GetOffsetChannel>
 8004f50:	4603      	mov	r3, r0
 8004f52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d10a      	bne.n	8004f70 <HAL_ADC_ConfigChannel+0x398>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	2103      	movs	r1, #3
 8004f60:	4618      	mov	r0, r3
 8004f62:	f7ff fb05 	bl	8004570 <LL_ADC_GetOffsetChannel>
 8004f66:	4603      	mov	r3, r0
 8004f68:	0e9b      	lsrs	r3, r3, #26
 8004f6a:	f003 021f 	and.w	r2, r3, #31
 8004f6e:	e017      	b.n	8004fa0 <HAL_ADC_ConfigChannel+0x3c8>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	2103      	movs	r1, #3
 8004f76:	4618      	mov	r0, r3
 8004f78:	f7ff fafa 	bl	8004570 <LL_ADC_GetOffsetChannel>
 8004f7c:	4603      	mov	r3, r0
 8004f7e:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f80:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004f82:	fa93 f3a3 	rbit	r3, r3
 8004f86:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8004f88:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004f8a:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8004f8c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d101      	bne.n	8004f96 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8004f92:	2320      	movs	r3, #32
 8004f94:	e003      	b.n	8004f9e <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8004f96:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004f98:	fab3 f383 	clz	r3, r3
 8004f9c:	b2db      	uxtb	r3, r3
 8004f9e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d105      	bne.n	8004fb8 <HAL_ADC_ConfigChannel+0x3e0>
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	0e9b      	lsrs	r3, r3, #26
 8004fb2:	f003 031f 	and.w	r3, r3, #31
 8004fb6:	e011      	b.n	8004fdc <HAL_ADC_ConfigChannel+0x404>
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fbe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004fc0:	fa93 f3a3 	rbit	r3, r3
 8004fc4:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8004fc6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004fc8:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8004fca:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d101      	bne.n	8004fd4 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8004fd0:	2320      	movs	r3, #32
 8004fd2:	e003      	b.n	8004fdc <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8004fd4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004fd6:	fab3 f383 	clz	r3, r3
 8004fda:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004fdc:	429a      	cmp	r2, r3
 8004fde:	d106      	bne.n	8004fee <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	2103      	movs	r1, #3
 8004fe8:	4618      	mov	r0, r3
 8004fea:	f7ff fad7 	bl	800459c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	f7ff fbde 	bl	80047b4 <LL_ADC_IsEnabled>
 8004ff8:	4603      	mov	r3, r0
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	f040 8140 	bne.w	8005280 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6818      	ldr	r0, [r3, #0]
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	6819      	ldr	r1, [r3, #0]
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	68db      	ldr	r3, [r3, #12]
 800500c:	461a      	mov	r2, r3
 800500e:	f7ff fb37 	bl	8004680 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	68db      	ldr	r3, [r3, #12]
 8005016:	4a8f      	ldr	r2, [pc, #572]	@ (8005254 <HAL_ADC_ConfigChannel+0x67c>)
 8005018:	4293      	cmp	r3, r2
 800501a:	f040 8131 	bne.w	8005280 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800502a:	2b00      	cmp	r3, #0
 800502c:	d10b      	bne.n	8005046 <HAL_ADC_ConfigChannel+0x46e>
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	0e9b      	lsrs	r3, r3, #26
 8005034:	3301      	adds	r3, #1
 8005036:	f003 031f 	and.w	r3, r3, #31
 800503a:	2b09      	cmp	r3, #9
 800503c:	bf94      	ite	ls
 800503e:	2301      	movls	r3, #1
 8005040:	2300      	movhi	r3, #0
 8005042:	b2db      	uxtb	r3, r3
 8005044:	e019      	b.n	800507a <HAL_ADC_ConfigChannel+0x4a2>
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800504c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800504e:	fa93 f3a3 	rbit	r3, r3
 8005052:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8005054:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005056:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8005058:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800505a:	2b00      	cmp	r3, #0
 800505c:	d101      	bne.n	8005062 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 800505e:	2320      	movs	r3, #32
 8005060:	e003      	b.n	800506a <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8005062:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005064:	fab3 f383 	clz	r3, r3
 8005068:	b2db      	uxtb	r3, r3
 800506a:	3301      	adds	r3, #1
 800506c:	f003 031f 	and.w	r3, r3, #31
 8005070:	2b09      	cmp	r3, #9
 8005072:	bf94      	ite	ls
 8005074:	2301      	movls	r3, #1
 8005076:	2300      	movhi	r3, #0
 8005078:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800507a:	2b00      	cmp	r3, #0
 800507c:	d079      	beq.n	8005172 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005086:	2b00      	cmp	r3, #0
 8005088:	d107      	bne.n	800509a <HAL_ADC_ConfigChannel+0x4c2>
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	0e9b      	lsrs	r3, r3, #26
 8005090:	3301      	adds	r3, #1
 8005092:	069b      	lsls	r3, r3, #26
 8005094:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005098:	e015      	b.n	80050c6 <HAL_ADC_ConfigChannel+0x4ee>
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80050a2:	fa93 f3a3 	rbit	r3, r3
 80050a6:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80050a8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80050aa:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80050ac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d101      	bne.n	80050b6 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 80050b2:	2320      	movs	r3, #32
 80050b4:	e003      	b.n	80050be <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 80050b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80050b8:	fab3 f383 	clz	r3, r3
 80050bc:	b2db      	uxtb	r3, r3
 80050be:	3301      	adds	r3, #1
 80050c0:	069b      	lsls	r3, r3, #26
 80050c2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d109      	bne.n	80050e6 <HAL_ADC_ConfigChannel+0x50e>
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	0e9b      	lsrs	r3, r3, #26
 80050d8:	3301      	adds	r3, #1
 80050da:	f003 031f 	and.w	r3, r3, #31
 80050de:	2101      	movs	r1, #1
 80050e0:	fa01 f303 	lsl.w	r3, r1, r3
 80050e4:	e017      	b.n	8005116 <HAL_ADC_ConfigChannel+0x53e>
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80050ee:	fa93 f3a3 	rbit	r3, r3
 80050f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80050f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80050f6:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80050f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d101      	bne.n	8005102 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 80050fe:	2320      	movs	r3, #32
 8005100:	e003      	b.n	800510a <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8005102:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005104:	fab3 f383 	clz	r3, r3
 8005108:	b2db      	uxtb	r3, r3
 800510a:	3301      	adds	r3, #1
 800510c:	f003 031f 	and.w	r3, r3, #31
 8005110:	2101      	movs	r1, #1
 8005112:	fa01 f303 	lsl.w	r3, r1, r3
 8005116:	ea42 0103 	orr.w	r1, r2, r3
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005122:	2b00      	cmp	r3, #0
 8005124:	d10a      	bne.n	800513c <HAL_ADC_ConfigChannel+0x564>
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	0e9b      	lsrs	r3, r3, #26
 800512c:	3301      	adds	r3, #1
 800512e:	f003 021f 	and.w	r2, r3, #31
 8005132:	4613      	mov	r3, r2
 8005134:	005b      	lsls	r3, r3, #1
 8005136:	4413      	add	r3, r2
 8005138:	051b      	lsls	r3, r3, #20
 800513a:	e018      	b.n	800516e <HAL_ADC_ConfigChannel+0x596>
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005142:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005144:	fa93 f3a3 	rbit	r3, r3
 8005148:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 800514a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800514c:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 800514e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005150:	2b00      	cmp	r3, #0
 8005152:	d101      	bne.n	8005158 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8005154:	2320      	movs	r3, #32
 8005156:	e003      	b.n	8005160 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8005158:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800515a:	fab3 f383 	clz	r3, r3
 800515e:	b2db      	uxtb	r3, r3
 8005160:	3301      	adds	r3, #1
 8005162:	f003 021f 	and.w	r2, r3, #31
 8005166:	4613      	mov	r3, r2
 8005168:	005b      	lsls	r3, r3, #1
 800516a:	4413      	add	r3, r2
 800516c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800516e:	430b      	orrs	r3, r1
 8005170:	e081      	b.n	8005276 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800517a:	2b00      	cmp	r3, #0
 800517c:	d107      	bne.n	800518e <HAL_ADC_ConfigChannel+0x5b6>
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	0e9b      	lsrs	r3, r3, #26
 8005184:	3301      	adds	r3, #1
 8005186:	069b      	lsls	r3, r3, #26
 8005188:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800518c:	e015      	b.n	80051ba <HAL_ADC_ConfigChannel+0x5e2>
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005194:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005196:	fa93 f3a3 	rbit	r3, r3
 800519a:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 800519c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800519e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80051a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d101      	bne.n	80051aa <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 80051a6:	2320      	movs	r3, #32
 80051a8:	e003      	b.n	80051b2 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 80051aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051ac:	fab3 f383 	clz	r3, r3
 80051b0:	b2db      	uxtb	r3, r3
 80051b2:	3301      	adds	r3, #1
 80051b4:	069b      	lsls	r3, r3, #26
 80051b6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d109      	bne.n	80051da <HAL_ADC_ConfigChannel+0x602>
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	0e9b      	lsrs	r3, r3, #26
 80051cc:	3301      	adds	r3, #1
 80051ce:	f003 031f 	and.w	r3, r3, #31
 80051d2:	2101      	movs	r1, #1
 80051d4:	fa01 f303 	lsl.w	r3, r1, r3
 80051d8:	e017      	b.n	800520a <HAL_ADC_ConfigChannel+0x632>
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051e0:	69fb      	ldr	r3, [r7, #28]
 80051e2:	fa93 f3a3 	rbit	r3, r3
 80051e6:	61bb      	str	r3, [r7, #24]
  return result;
 80051e8:	69bb      	ldr	r3, [r7, #24]
 80051ea:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80051ec:	6a3b      	ldr	r3, [r7, #32]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d101      	bne.n	80051f6 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 80051f2:	2320      	movs	r3, #32
 80051f4:	e003      	b.n	80051fe <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 80051f6:	6a3b      	ldr	r3, [r7, #32]
 80051f8:	fab3 f383 	clz	r3, r3
 80051fc:	b2db      	uxtb	r3, r3
 80051fe:	3301      	adds	r3, #1
 8005200:	f003 031f 	and.w	r3, r3, #31
 8005204:	2101      	movs	r1, #1
 8005206:	fa01 f303 	lsl.w	r3, r1, r3
 800520a:	ea42 0103 	orr.w	r1, r2, r3
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005216:	2b00      	cmp	r3, #0
 8005218:	d10d      	bne.n	8005236 <HAL_ADC_ConfigChannel+0x65e>
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	0e9b      	lsrs	r3, r3, #26
 8005220:	3301      	adds	r3, #1
 8005222:	f003 021f 	and.w	r2, r3, #31
 8005226:	4613      	mov	r3, r2
 8005228:	005b      	lsls	r3, r3, #1
 800522a:	4413      	add	r3, r2
 800522c:	3b1e      	subs	r3, #30
 800522e:	051b      	lsls	r3, r3, #20
 8005230:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005234:	e01e      	b.n	8005274 <HAL_ADC_ConfigChannel+0x69c>
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800523c:	693b      	ldr	r3, [r7, #16]
 800523e:	fa93 f3a3 	rbit	r3, r3
 8005242:	60fb      	str	r3, [r7, #12]
  return result;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d104      	bne.n	8005258 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 800524e:	2320      	movs	r3, #32
 8005250:	e006      	b.n	8005260 <HAL_ADC_ConfigChannel+0x688>
 8005252:	bf00      	nop
 8005254:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8005258:	697b      	ldr	r3, [r7, #20]
 800525a:	fab3 f383 	clz	r3, r3
 800525e:	b2db      	uxtb	r3, r3
 8005260:	3301      	adds	r3, #1
 8005262:	f003 021f 	and.w	r2, r3, #31
 8005266:	4613      	mov	r3, r2
 8005268:	005b      	lsls	r3, r3, #1
 800526a:	4413      	add	r3, r2
 800526c:	3b1e      	subs	r3, #30
 800526e:	051b      	lsls	r3, r3, #20
 8005270:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005274:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8005276:	683a      	ldr	r2, [r7, #0]
 8005278:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800527a:	4619      	mov	r1, r3
 800527c:	f7ff f9d5 	bl	800462a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	681a      	ldr	r2, [r3, #0]
 8005284:	4b3d      	ldr	r3, [pc, #244]	@ (800537c <HAL_ADC_ConfigChannel+0x7a4>)
 8005286:	4013      	ands	r3, r2
 8005288:	2b00      	cmp	r3, #0
 800528a:	d06c      	beq.n	8005366 <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800528c:	483c      	ldr	r0, [pc, #240]	@ (8005380 <HAL_ADC_ConfigChannel+0x7a8>)
 800528e:	f7ff f93d 	bl	800450c <LL_ADC_GetCommonPathInternalCh>
 8005292:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4a3a      	ldr	r2, [pc, #232]	@ (8005384 <HAL_ADC_ConfigChannel+0x7ac>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d127      	bne.n	80052f0 <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80052a0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80052a4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d121      	bne.n	80052f0 <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a35      	ldr	r2, [pc, #212]	@ (8005388 <HAL_ADC_ConfigChannel+0x7b0>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d157      	bne.n	8005366 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80052b6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80052ba:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80052be:	4619      	mov	r1, r3
 80052c0:	482f      	ldr	r0, [pc, #188]	@ (8005380 <HAL_ADC_ConfigChannel+0x7a8>)
 80052c2:	f7ff f910 	bl	80044e6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80052c6:	4b31      	ldr	r3, [pc, #196]	@ (800538c <HAL_ADC_ConfigChannel+0x7b4>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	099b      	lsrs	r3, r3, #6
 80052cc:	4a30      	ldr	r2, [pc, #192]	@ (8005390 <HAL_ADC_ConfigChannel+0x7b8>)
 80052ce:	fba2 2303 	umull	r2, r3, r2, r3
 80052d2:	099b      	lsrs	r3, r3, #6
 80052d4:	1c5a      	adds	r2, r3, #1
 80052d6:	4613      	mov	r3, r2
 80052d8:	005b      	lsls	r3, r3, #1
 80052da:	4413      	add	r3, r2
 80052dc:	009b      	lsls	r3, r3, #2
 80052de:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80052e0:	e002      	b.n	80052e8 <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 80052e2:	68bb      	ldr	r3, [r7, #8]
 80052e4:	3b01      	subs	r3, #1
 80052e6:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d1f9      	bne.n	80052e2 <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80052ee:	e03a      	b.n	8005366 <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	4a27      	ldr	r2, [pc, #156]	@ (8005394 <HAL_ADC_ConfigChannel+0x7bc>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d113      	bne.n	8005322 <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80052fa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80052fe:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005302:	2b00      	cmp	r3, #0
 8005304:	d10d      	bne.n	8005322 <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4a1f      	ldr	r2, [pc, #124]	@ (8005388 <HAL_ADC_ConfigChannel+0x7b0>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d12a      	bne.n	8005366 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005310:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005314:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005318:	4619      	mov	r1, r3
 800531a:	4819      	ldr	r0, [pc, #100]	@ (8005380 <HAL_ADC_ConfigChannel+0x7a8>)
 800531c:	f7ff f8e3 	bl	80044e6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005320:	e021      	b.n	8005366 <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	4a1c      	ldr	r2, [pc, #112]	@ (8005398 <HAL_ADC_ConfigChannel+0x7c0>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d11c      	bne.n	8005366 <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800532c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005330:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005334:	2b00      	cmp	r3, #0
 8005336:	d116      	bne.n	8005366 <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4a12      	ldr	r2, [pc, #72]	@ (8005388 <HAL_ADC_ConfigChannel+0x7b0>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d111      	bne.n	8005366 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005342:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005346:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800534a:	4619      	mov	r1, r3
 800534c:	480c      	ldr	r0, [pc, #48]	@ (8005380 <HAL_ADC_ConfigChannel+0x7a8>)
 800534e:	f7ff f8ca 	bl	80044e6 <LL_ADC_SetCommonPathInternalCh>
 8005352:	e008      	b.n	8005366 <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005358:	f043 0220 	orr.w	r2, r3, #32
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8005360:	2301      	movs	r3, #1
 8005362:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2200      	movs	r2, #0
 800536a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800536e:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8005372:	4618      	mov	r0, r3
 8005374:	37d8      	adds	r7, #216	@ 0xd8
 8005376:	46bd      	mov	sp, r7
 8005378:	bd80      	pop	{r7, pc}
 800537a:	bf00      	nop
 800537c:	80080000 	.word	0x80080000
 8005380:	50040300 	.word	0x50040300
 8005384:	c7520000 	.word	0xc7520000
 8005388:	50040000 	.word	0x50040000
 800538c:	2000000c 	.word	0x2000000c
 8005390:	053e2d63 	.word	0x053e2d63
 8005394:	cb840000 	.word	0xcb840000
 8005398:	80000001 	.word	0x80000001

0800539c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b084      	sub	sp, #16
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80053a4:	2300      	movs	r3, #0
 80053a6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4618      	mov	r0, r3
 80053ae:	f7ff fa01 	bl	80047b4 <LL_ADC_IsEnabled>
 80053b2:	4603      	mov	r3, r0
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d169      	bne.n	800548c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	689a      	ldr	r2, [r3, #8]
 80053be:	4b36      	ldr	r3, [pc, #216]	@ (8005498 <ADC_Enable+0xfc>)
 80053c0:	4013      	ands	r3, r2
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d00d      	beq.n	80053e2 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053ca:	f043 0210 	orr.w	r2, r3, #16
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053d6:	f043 0201 	orr.w	r2, r3, #1
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 80053de:	2301      	movs	r3, #1
 80053e0:	e055      	b.n	800548e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4618      	mov	r0, r3
 80053e8:	f7ff f9bc 	bl	8004764 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80053ec:	482b      	ldr	r0, [pc, #172]	@ (800549c <ADC_Enable+0x100>)
 80053ee:	f7ff f88d 	bl	800450c <LL_ADC_GetCommonPathInternalCh>
 80053f2:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80053f4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d013      	beq.n	8005424 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80053fc:	4b28      	ldr	r3, [pc, #160]	@ (80054a0 <ADC_Enable+0x104>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	099b      	lsrs	r3, r3, #6
 8005402:	4a28      	ldr	r2, [pc, #160]	@ (80054a4 <ADC_Enable+0x108>)
 8005404:	fba2 2303 	umull	r2, r3, r2, r3
 8005408:	099b      	lsrs	r3, r3, #6
 800540a:	1c5a      	adds	r2, r3, #1
 800540c:	4613      	mov	r3, r2
 800540e:	005b      	lsls	r3, r3, #1
 8005410:	4413      	add	r3, r2
 8005412:	009b      	lsls	r3, r3, #2
 8005414:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8005416:	e002      	b.n	800541e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	3b01      	subs	r3, #1
 800541c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d1f9      	bne.n	8005418 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8005424:	f7ff f81c 	bl	8004460 <HAL_GetTick>
 8005428:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800542a:	e028      	b.n	800547e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4618      	mov	r0, r3
 8005432:	f7ff f9bf 	bl	80047b4 <LL_ADC_IsEnabled>
 8005436:	4603      	mov	r3, r0
 8005438:	2b00      	cmp	r3, #0
 800543a:	d104      	bne.n	8005446 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4618      	mov	r0, r3
 8005442:	f7ff f98f 	bl	8004764 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005446:	f7ff f80b 	bl	8004460 <HAL_GetTick>
 800544a:	4602      	mov	r2, r0
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	1ad3      	subs	r3, r2, r3
 8005450:	2b02      	cmp	r3, #2
 8005452:	d914      	bls.n	800547e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f003 0301 	and.w	r3, r3, #1
 800545e:	2b01      	cmp	r3, #1
 8005460:	d00d      	beq.n	800547e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005466:	f043 0210 	orr.w	r2, r3, #16
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005472:	f043 0201 	orr.w	r2, r3, #1
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800547a:	2301      	movs	r3, #1
 800547c:	e007      	b.n	800548e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f003 0301 	and.w	r3, r3, #1
 8005488:	2b01      	cmp	r3, #1
 800548a:	d1cf      	bne.n	800542c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800548c:	2300      	movs	r3, #0
}
 800548e:	4618      	mov	r0, r3
 8005490:	3710      	adds	r7, #16
 8005492:	46bd      	mov	sp, r7
 8005494:	bd80      	pop	{r7, pc}
 8005496:	bf00      	nop
 8005498:	8000003f 	.word	0x8000003f
 800549c:	50040300 	.word	0x50040300
 80054a0:	2000000c 	.word	0x2000000c
 80054a4:	053e2d63 	.word	0x053e2d63

080054a8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b084      	sub	sp, #16
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4618      	mov	r0, r3
 80054b6:	f7ff f990 	bl	80047da <LL_ADC_IsDisableOngoing>
 80054ba:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4618      	mov	r0, r3
 80054c2:	f7ff f977 	bl	80047b4 <LL_ADC_IsEnabled>
 80054c6:	4603      	mov	r3, r0
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d047      	beq.n	800555c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d144      	bne.n	800555c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	689b      	ldr	r3, [r3, #8]
 80054d8:	f003 030d 	and.w	r3, r3, #13
 80054dc:	2b01      	cmp	r3, #1
 80054de:	d10c      	bne.n	80054fa <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4618      	mov	r0, r3
 80054e6:	f7ff f951 	bl	800478c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	2203      	movs	r2, #3
 80054f0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80054f2:	f7fe ffb5 	bl	8004460 <HAL_GetTick>
 80054f6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80054f8:	e029      	b.n	800554e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054fe:	f043 0210 	orr.w	r2, r3, #16
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800550a:	f043 0201 	orr.w	r2, r3, #1
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 8005512:	2301      	movs	r3, #1
 8005514:	e023      	b.n	800555e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005516:	f7fe ffa3 	bl	8004460 <HAL_GetTick>
 800551a:	4602      	mov	r2, r0
 800551c:	68bb      	ldr	r3, [r7, #8]
 800551e:	1ad3      	subs	r3, r2, r3
 8005520:	2b02      	cmp	r3, #2
 8005522:	d914      	bls.n	800554e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	689b      	ldr	r3, [r3, #8]
 800552a:	f003 0301 	and.w	r3, r3, #1
 800552e:	2b00      	cmp	r3, #0
 8005530:	d00d      	beq.n	800554e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005536:	f043 0210 	orr.w	r2, r3, #16
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005542:	f043 0201 	orr.w	r2, r3, #1
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800554a:	2301      	movs	r3, #1
 800554c:	e007      	b.n	800555e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	689b      	ldr	r3, [r3, #8]
 8005554:	f003 0301 	and.w	r3, r3, #1
 8005558:	2b00      	cmp	r3, #0
 800555a:	d1dc      	bne.n	8005516 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800555c:	2300      	movs	r3, #0
}
 800555e:	4618      	mov	r0, r3
 8005560:	3710      	adds	r7, #16
 8005562:	46bd      	mov	sp, r7
 8005564:	bd80      	pop	{r7, pc}

08005566 <LL_ADC_StartCalibration>:
{
 8005566:	b480      	push	{r7}
 8005568:	b083      	sub	sp, #12
 800556a:	af00      	add	r7, sp, #0
 800556c:	6078      	str	r0, [r7, #4]
 800556e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	689b      	ldr	r3, [r3, #8]
 8005574:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8005578:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800557c:	683a      	ldr	r2, [r7, #0]
 800557e:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8005582:	4313      	orrs	r3, r2
 8005584:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	609a      	str	r2, [r3, #8]
}
 800558c:	bf00      	nop
 800558e:	370c      	adds	r7, #12
 8005590:	46bd      	mov	sp, r7
 8005592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005596:	4770      	bx	lr

08005598 <LL_ADC_IsCalibrationOnGoing>:
{
 8005598:	b480      	push	{r7}
 800559a:	b083      	sub	sp, #12
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	689b      	ldr	r3, [r3, #8]
 80055a4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80055a8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80055ac:	d101      	bne.n	80055b2 <LL_ADC_IsCalibrationOnGoing+0x1a>
 80055ae:	2301      	movs	r3, #1
 80055b0:	e000      	b.n	80055b4 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80055b2:	2300      	movs	r3, #0
}
 80055b4:	4618      	mov	r0, r3
 80055b6:	370c      	adds	r7, #12
 80055b8:	46bd      	mov	sp, r7
 80055ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055be:	4770      	bx	lr

080055c0 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b084      	sub	sp, #16
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
 80055c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80055ca:	2300      	movs	r3, #0
 80055cc:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80055d4:	2b01      	cmp	r3, #1
 80055d6:	d101      	bne.n	80055dc <HAL_ADCEx_Calibration_Start+0x1c>
 80055d8:	2302      	movs	r3, #2
 80055da:	e04d      	b.n	8005678 <HAL_ADCEx_Calibration_Start+0xb8>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2201      	movs	r2, #1
 80055e0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80055e4:	6878      	ldr	r0, [r7, #4]
 80055e6:	f7ff ff5f 	bl	80054a8 <ADC_Disable>
 80055ea:	4603      	mov	r3, r0
 80055ec:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80055ee:	7bfb      	ldrb	r3, [r7, #15]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d136      	bne.n	8005662 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055f8:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80055fc:	f023 0302 	bic.w	r3, r3, #2
 8005600:	f043 0202 	orr.w	r2, r3, #2
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	655a      	str	r2, [r3, #84]	@ 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	6839      	ldr	r1, [r7, #0]
 800560e:	4618      	mov	r0, r3
 8005610:	f7ff ffa9 	bl	8005566 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005614:	e014      	b.n	8005640 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	3301      	adds	r3, #1
 800561a:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	f5b3 2f91 	cmp.w	r3, #296960	@ 0x48800
 8005622:	d30d      	bcc.n	8005640 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005628:	f023 0312 	bic.w	r3, r3, #18
 800562c:	f043 0210 	orr.w	r2, r3, #16
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2200      	movs	r2, #0
 8005638:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_ERROR;
 800563c:	2301      	movs	r3, #1
 800563e:	e01b      	b.n	8005678 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4618      	mov	r0, r3
 8005646:	f7ff ffa7 	bl	8005598 <LL_ADC_IsCalibrationOnGoing>
 800564a:	4603      	mov	r3, r0
 800564c:	2b00      	cmp	r3, #0
 800564e:	d1e2      	bne.n	8005616 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005654:	f023 0303 	bic.w	r3, r3, #3
 8005658:	f043 0201 	orr.w	r2, r3, #1
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	655a      	str	r2, [r3, #84]	@ 0x54
 8005660:	e005      	b.n	800566e <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005666:	f043 0210 	orr.w	r2, r3, #16
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2200      	movs	r2, #0
 8005672:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8005676:	7bfb      	ldrb	r3, [r7, #15]
}
 8005678:	4618      	mov	r0, r3
 800567a:	3710      	adds	r7, #16
 800567c:	46bd      	mov	sp, r7
 800567e:	bd80      	pop	{r7, pc}

08005680 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005680:	b480      	push	{r7}
 8005682:	b085      	sub	sp, #20
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	f003 0307 	and.w	r3, r3, #7
 800568e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005690:	4b0c      	ldr	r3, [pc, #48]	@ (80056c4 <__NVIC_SetPriorityGrouping+0x44>)
 8005692:	68db      	ldr	r3, [r3, #12]
 8005694:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005696:	68ba      	ldr	r2, [r7, #8]
 8005698:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800569c:	4013      	ands	r3, r2
 800569e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80056a4:	68bb      	ldr	r3, [r7, #8]
 80056a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80056a8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80056ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80056b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80056b2:	4a04      	ldr	r2, [pc, #16]	@ (80056c4 <__NVIC_SetPriorityGrouping+0x44>)
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	60d3      	str	r3, [r2, #12]
}
 80056b8:	bf00      	nop
 80056ba:	3714      	adds	r7, #20
 80056bc:	46bd      	mov	sp, r7
 80056be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c2:	4770      	bx	lr
 80056c4:	e000ed00 	.word	0xe000ed00

080056c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80056c8:	b480      	push	{r7}
 80056ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80056cc:	4b04      	ldr	r3, [pc, #16]	@ (80056e0 <__NVIC_GetPriorityGrouping+0x18>)
 80056ce:	68db      	ldr	r3, [r3, #12]
 80056d0:	0a1b      	lsrs	r3, r3, #8
 80056d2:	f003 0307 	and.w	r3, r3, #7
}
 80056d6:	4618      	mov	r0, r3
 80056d8:	46bd      	mov	sp, r7
 80056da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056de:	4770      	bx	lr
 80056e0:	e000ed00 	.word	0xe000ed00

080056e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80056e4:	b480      	push	{r7}
 80056e6:	b083      	sub	sp, #12
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	4603      	mov	r3, r0
 80056ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80056ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	db0b      	blt.n	800570e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80056f6:	79fb      	ldrb	r3, [r7, #7]
 80056f8:	f003 021f 	and.w	r2, r3, #31
 80056fc:	4907      	ldr	r1, [pc, #28]	@ (800571c <__NVIC_EnableIRQ+0x38>)
 80056fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005702:	095b      	lsrs	r3, r3, #5
 8005704:	2001      	movs	r0, #1
 8005706:	fa00 f202 	lsl.w	r2, r0, r2
 800570a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800570e:	bf00      	nop
 8005710:	370c      	adds	r7, #12
 8005712:	46bd      	mov	sp, r7
 8005714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005718:	4770      	bx	lr
 800571a:	bf00      	nop
 800571c:	e000e100 	.word	0xe000e100

08005720 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005720:	b480      	push	{r7}
 8005722:	b083      	sub	sp, #12
 8005724:	af00      	add	r7, sp, #0
 8005726:	4603      	mov	r3, r0
 8005728:	6039      	str	r1, [r7, #0]
 800572a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800572c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005730:	2b00      	cmp	r3, #0
 8005732:	db0a      	blt.n	800574a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	b2da      	uxtb	r2, r3
 8005738:	490c      	ldr	r1, [pc, #48]	@ (800576c <__NVIC_SetPriority+0x4c>)
 800573a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800573e:	0112      	lsls	r2, r2, #4
 8005740:	b2d2      	uxtb	r2, r2
 8005742:	440b      	add	r3, r1
 8005744:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005748:	e00a      	b.n	8005760 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	b2da      	uxtb	r2, r3
 800574e:	4908      	ldr	r1, [pc, #32]	@ (8005770 <__NVIC_SetPriority+0x50>)
 8005750:	79fb      	ldrb	r3, [r7, #7]
 8005752:	f003 030f 	and.w	r3, r3, #15
 8005756:	3b04      	subs	r3, #4
 8005758:	0112      	lsls	r2, r2, #4
 800575a:	b2d2      	uxtb	r2, r2
 800575c:	440b      	add	r3, r1
 800575e:	761a      	strb	r2, [r3, #24]
}
 8005760:	bf00      	nop
 8005762:	370c      	adds	r7, #12
 8005764:	46bd      	mov	sp, r7
 8005766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576a:	4770      	bx	lr
 800576c:	e000e100 	.word	0xe000e100
 8005770:	e000ed00 	.word	0xe000ed00

08005774 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005774:	b480      	push	{r7}
 8005776:	b089      	sub	sp, #36	@ 0x24
 8005778:	af00      	add	r7, sp, #0
 800577a:	60f8      	str	r0, [r7, #12]
 800577c:	60b9      	str	r1, [r7, #8]
 800577e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	f003 0307 	and.w	r3, r3, #7
 8005786:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005788:	69fb      	ldr	r3, [r7, #28]
 800578a:	f1c3 0307 	rsb	r3, r3, #7
 800578e:	2b04      	cmp	r3, #4
 8005790:	bf28      	it	cs
 8005792:	2304      	movcs	r3, #4
 8005794:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005796:	69fb      	ldr	r3, [r7, #28]
 8005798:	3304      	adds	r3, #4
 800579a:	2b06      	cmp	r3, #6
 800579c:	d902      	bls.n	80057a4 <NVIC_EncodePriority+0x30>
 800579e:	69fb      	ldr	r3, [r7, #28]
 80057a0:	3b03      	subs	r3, #3
 80057a2:	e000      	b.n	80057a6 <NVIC_EncodePriority+0x32>
 80057a4:	2300      	movs	r3, #0
 80057a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80057a8:	f04f 32ff 	mov.w	r2, #4294967295
 80057ac:	69bb      	ldr	r3, [r7, #24]
 80057ae:	fa02 f303 	lsl.w	r3, r2, r3
 80057b2:	43da      	mvns	r2, r3
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	401a      	ands	r2, r3
 80057b8:	697b      	ldr	r3, [r7, #20]
 80057ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80057bc:	f04f 31ff 	mov.w	r1, #4294967295
 80057c0:	697b      	ldr	r3, [r7, #20]
 80057c2:	fa01 f303 	lsl.w	r3, r1, r3
 80057c6:	43d9      	mvns	r1, r3
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80057cc:	4313      	orrs	r3, r2
         );
}
 80057ce:	4618      	mov	r0, r3
 80057d0:	3724      	adds	r7, #36	@ 0x24
 80057d2:	46bd      	mov	sp, r7
 80057d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d8:	4770      	bx	lr
	...

080057dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b082      	sub	sp, #8
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	3b01      	subs	r3, #1
 80057e8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80057ec:	d301      	bcc.n	80057f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80057ee:	2301      	movs	r3, #1
 80057f0:	e00f      	b.n	8005812 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80057f2:	4a0a      	ldr	r2, [pc, #40]	@ (800581c <SysTick_Config+0x40>)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	3b01      	subs	r3, #1
 80057f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80057fa:	210f      	movs	r1, #15
 80057fc:	f04f 30ff 	mov.w	r0, #4294967295
 8005800:	f7ff ff8e 	bl	8005720 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005804:	4b05      	ldr	r3, [pc, #20]	@ (800581c <SysTick_Config+0x40>)
 8005806:	2200      	movs	r2, #0
 8005808:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800580a:	4b04      	ldr	r3, [pc, #16]	@ (800581c <SysTick_Config+0x40>)
 800580c:	2207      	movs	r2, #7
 800580e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005810:	2300      	movs	r3, #0
}
 8005812:	4618      	mov	r0, r3
 8005814:	3708      	adds	r7, #8
 8005816:	46bd      	mov	sp, r7
 8005818:	bd80      	pop	{r7, pc}
 800581a:	bf00      	nop
 800581c:	e000e010 	.word	0xe000e010

08005820 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b082      	sub	sp, #8
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005828:	6878      	ldr	r0, [r7, #4]
 800582a:	f7ff ff29 	bl	8005680 <__NVIC_SetPriorityGrouping>
}
 800582e:	bf00      	nop
 8005830:	3708      	adds	r7, #8
 8005832:	46bd      	mov	sp, r7
 8005834:	bd80      	pop	{r7, pc}

08005836 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005836:	b580      	push	{r7, lr}
 8005838:	b086      	sub	sp, #24
 800583a:	af00      	add	r7, sp, #0
 800583c:	4603      	mov	r3, r0
 800583e:	60b9      	str	r1, [r7, #8]
 8005840:	607a      	str	r2, [r7, #4]
 8005842:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005844:	2300      	movs	r3, #0
 8005846:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005848:	f7ff ff3e 	bl	80056c8 <__NVIC_GetPriorityGrouping>
 800584c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800584e:	687a      	ldr	r2, [r7, #4]
 8005850:	68b9      	ldr	r1, [r7, #8]
 8005852:	6978      	ldr	r0, [r7, #20]
 8005854:	f7ff ff8e 	bl	8005774 <NVIC_EncodePriority>
 8005858:	4602      	mov	r2, r0
 800585a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800585e:	4611      	mov	r1, r2
 8005860:	4618      	mov	r0, r3
 8005862:	f7ff ff5d 	bl	8005720 <__NVIC_SetPriority>
}
 8005866:	bf00      	nop
 8005868:	3718      	adds	r7, #24
 800586a:	46bd      	mov	sp, r7
 800586c:	bd80      	pop	{r7, pc}

0800586e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800586e:	b580      	push	{r7, lr}
 8005870:	b082      	sub	sp, #8
 8005872:	af00      	add	r7, sp, #0
 8005874:	4603      	mov	r3, r0
 8005876:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005878:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800587c:	4618      	mov	r0, r3
 800587e:	f7ff ff31 	bl	80056e4 <__NVIC_EnableIRQ>
}
 8005882:	bf00      	nop
 8005884:	3708      	adds	r7, #8
 8005886:	46bd      	mov	sp, r7
 8005888:	bd80      	pop	{r7, pc}

0800588a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800588a:	b580      	push	{r7, lr}
 800588c:	b082      	sub	sp, #8
 800588e:	af00      	add	r7, sp, #0
 8005890:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005892:	6878      	ldr	r0, [r7, #4]
 8005894:	f7ff ffa2 	bl	80057dc <SysTick_Config>
 8005898:	4603      	mov	r3, r0
}
 800589a:	4618      	mov	r0, r3
 800589c:	3708      	adds	r7, #8
 800589e:	46bd      	mov	sp, r7
 80058a0:	bd80      	pop	{r7, pc}
	...

080058a4 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80058a4:	b480      	push	{r7}
 80058a6:	b085      	sub	sp, #20
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d101      	bne.n	80058b6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80058b2:	2301      	movs	r3, #1
 80058b4:	e098      	b.n	80059e8 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	461a      	mov	r2, r3
 80058bc:	4b4d      	ldr	r3, [pc, #308]	@ (80059f4 <HAL_DMA_Init+0x150>)
 80058be:	429a      	cmp	r2, r3
 80058c0:	d80f      	bhi.n	80058e2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	461a      	mov	r2, r3
 80058c8:	4b4b      	ldr	r3, [pc, #300]	@ (80059f8 <HAL_DMA_Init+0x154>)
 80058ca:	4413      	add	r3, r2
 80058cc:	4a4b      	ldr	r2, [pc, #300]	@ (80059fc <HAL_DMA_Init+0x158>)
 80058ce:	fba2 2303 	umull	r2, r3, r2, r3
 80058d2:	091b      	lsrs	r3, r3, #4
 80058d4:	009a      	lsls	r2, r3, #2
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	4a48      	ldr	r2, [pc, #288]	@ (8005a00 <HAL_DMA_Init+0x15c>)
 80058de:	641a      	str	r2, [r3, #64]	@ 0x40
 80058e0:	e00e      	b.n	8005900 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	461a      	mov	r2, r3
 80058e8:	4b46      	ldr	r3, [pc, #280]	@ (8005a04 <HAL_DMA_Init+0x160>)
 80058ea:	4413      	add	r3, r2
 80058ec:	4a43      	ldr	r2, [pc, #268]	@ (80059fc <HAL_DMA_Init+0x158>)
 80058ee:	fba2 2303 	umull	r2, r3, r2, r3
 80058f2:	091b      	lsrs	r3, r3, #4
 80058f4:	009a      	lsls	r2, r3, #2
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	4a42      	ldr	r2, [pc, #264]	@ (8005a08 <HAL_DMA_Init+0x164>)
 80058fe:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2202      	movs	r2, #2
 8005904:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8005916:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800591a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005924:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	691b      	ldr	r3, [r3, #16]
 800592a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005930:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	699b      	ldr	r3, [r3, #24]
 8005936:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800593c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6a1b      	ldr	r3, [r3, #32]
 8005942:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005944:	68fa      	ldr	r2, [r7, #12]
 8005946:	4313      	orrs	r3, r2
 8005948:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	68fa      	ldr	r2, [r7, #12]
 8005950:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	689b      	ldr	r3, [r3, #8]
 8005956:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800595a:	d039      	beq.n	80059d0 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005960:	4a27      	ldr	r2, [pc, #156]	@ (8005a00 <HAL_DMA_Init+0x15c>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d11a      	bne.n	800599c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8005966:	4b29      	ldr	r3, [pc, #164]	@ (8005a0c <HAL_DMA_Init+0x168>)
 8005968:	681a      	ldr	r2, [r3, #0]
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800596e:	f003 031c 	and.w	r3, r3, #28
 8005972:	210f      	movs	r1, #15
 8005974:	fa01 f303 	lsl.w	r3, r1, r3
 8005978:	43db      	mvns	r3, r3
 800597a:	4924      	ldr	r1, [pc, #144]	@ (8005a0c <HAL_DMA_Init+0x168>)
 800597c:	4013      	ands	r3, r2
 800597e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8005980:	4b22      	ldr	r3, [pc, #136]	@ (8005a0c <HAL_DMA_Init+0x168>)
 8005982:	681a      	ldr	r2, [r3, #0]
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6859      	ldr	r1, [r3, #4]
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800598c:	f003 031c 	and.w	r3, r3, #28
 8005990:	fa01 f303 	lsl.w	r3, r1, r3
 8005994:	491d      	ldr	r1, [pc, #116]	@ (8005a0c <HAL_DMA_Init+0x168>)
 8005996:	4313      	orrs	r3, r2
 8005998:	600b      	str	r3, [r1, #0]
 800599a:	e019      	b.n	80059d0 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800599c:	4b1c      	ldr	r3, [pc, #112]	@ (8005a10 <HAL_DMA_Init+0x16c>)
 800599e:	681a      	ldr	r2, [r3, #0]
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059a4:	f003 031c 	and.w	r3, r3, #28
 80059a8:	210f      	movs	r1, #15
 80059aa:	fa01 f303 	lsl.w	r3, r1, r3
 80059ae:	43db      	mvns	r3, r3
 80059b0:	4917      	ldr	r1, [pc, #92]	@ (8005a10 <HAL_DMA_Init+0x16c>)
 80059b2:	4013      	ands	r3, r2
 80059b4:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80059b6:	4b16      	ldr	r3, [pc, #88]	@ (8005a10 <HAL_DMA_Init+0x16c>)
 80059b8:	681a      	ldr	r2, [r3, #0]
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6859      	ldr	r1, [r3, #4]
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059c2:	f003 031c 	and.w	r3, r3, #28
 80059c6:	fa01 f303 	lsl.w	r3, r1, r3
 80059ca:	4911      	ldr	r1, [pc, #68]	@ (8005a10 <HAL_DMA_Init+0x16c>)
 80059cc:	4313      	orrs	r3, r2
 80059ce:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2200      	movs	r2, #0
 80059d4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2201      	movs	r2, #1
 80059da:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2200      	movs	r2, #0
 80059e2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80059e6:	2300      	movs	r3, #0
}
 80059e8:	4618      	mov	r0, r3
 80059ea:	3714      	adds	r7, #20
 80059ec:	46bd      	mov	sp, r7
 80059ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f2:	4770      	bx	lr
 80059f4:	40020407 	.word	0x40020407
 80059f8:	bffdfff8 	.word	0xbffdfff8
 80059fc:	cccccccd 	.word	0xcccccccd
 8005a00:	40020000 	.word	0x40020000
 8005a04:	bffdfbf8 	.word	0xbffdfbf8
 8005a08:	40020400 	.word	0x40020400
 8005a0c:	400200a8 	.word	0x400200a8
 8005a10:	400204a8 	.word	0x400204a8

08005a14 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b086      	sub	sp, #24
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	60f8      	str	r0, [r7, #12]
 8005a1c:	60b9      	str	r1, [r7, #8]
 8005a1e:	607a      	str	r2, [r7, #4]
 8005a20:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005a22:	2300      	movs	r3, #0
 8005a24:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005a2c:	2b01      	cmp	r3, #1
 8005a2e:	d101      	bne.n	8005a34 <HAL_DMA_Start_IT+0x20>
 8005a30:	2302      	movs	r3, #2
 8005a32:	e04b      	b.n	8005acc <HAL_DMA_Start_IT+0xb8>
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	2201      	movs	r2, #1
 8005a38:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005a42:	b2db      	uxtb	r3, r3
 8005a44:	2b01      	cmp	r3, #1
 8005a46:	d13a      	bne.n	8005abe <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	2202      	movs	r2, #2
 8005a4c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	2200      	movs	r2, #0
 8005a54:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	681a      	ldr	r2, [r3, #0]
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f022 0201 	bic.w	r2, r2, #1
 8005a64:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	687a      	ldr	r2, [r7, #4]
 8005a6a:	68b9      	ldr	r1, [r7, #8]
 8005a6c:	68f8      	ldr	r0, [r7, #12]
 8005a6e:	f000 f921 	bl	8005cb4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d008      	beq.n	8005a8c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	681a      	ldr	r2, [r3, #0]
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f042 020e 	orr.w	r2, r2, #14
 8005a88:	601a      	str	r2, [r3, #0]
 8005a8a:	e00f      	b.n	8005aac <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	681a      	ldr	r2, [r3, #0]
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f022 0204 	bic.w	r2, r2, #4
 8005a9a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	681a      	ldr	r2, [r3, #0]
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f042 020a 	orr.w	r2, r2, #10
 8005aaa:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	681a      	ldr	r2, [r3, #0]
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f042 0201 	orr.w	r2, r2, #1
 8005aba:	601a      	str	r2, [r3, #0]
 8005abc:	e005      	b.n	8005aca <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005ac6:	2302      	movs	r3, #2
 8005ac8:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005aca:	7dfb      	ldrb	r3, [r7, #23]
}
 8005acc:	4618      	mov	r0, r3
 8005ace:	3718      	adds	r7, #24
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	bd80      	pop	{r7, pc}

08005ad4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b084      	sub	sp, #16
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005adc:	2300      	movs	r3, #0
 8005ade:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005ae6:	b2db      	uxtb	r3, r3
 8005ae8:	2b02      	cmp	r3, #2
 8005aea:	d005      	beq.n	8005af8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2204      	movs	r2, #4
 8005af0:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8005af2:	2301      	movs	r3, #1
 8005af4:	73fb      	strb	r3, [r7, #15]
 8005af6:	e029      	b.n	8005b4c <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	681a      	ldr	r2, [r3, #0]
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f022 020e 	bic.w	r2, r2, #14
 8005b06:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	681a      	ldr	r2, [r3, #0]
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f022 0201 	bic.w	r2, r2, #1
 8005b16:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b1c:	f003 021c 	and.w	r2, r3, #28
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b24:	2101      	movs	r1, #1
 8005b26:	fa01 f202 	lsl.w	r2, r1, r2
 8005b2a:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2201      	movs	r2, #1
 8005b30:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2200      	movs	r2, #0
 8005b38:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d003      	beq.n	8005b4c <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b48:	6878      	ldr	r0, [r7, #4]
 8005b4a:	4798      	blx	r3
    }
  }
  return status;
 8005b4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b4e:	4618      	mov	r0, r3
 8005b50:	3710      	adds	r7, #16
 8005b52:	46bd      	mov	sp, r7
 8005b54:	bd80      	pop	{r7, pc}

08005b56 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005b56:	b580      	push	{r7, lr}
 8005b58:	b084      	sub	sp, #16
 8005b5a:	af00      	add	r7, sp, #0
 8005b5c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b72:	f003 031c 	and.w	r3, r3, #28
 8005b76:	2204      	movs	r2, #4
 8005b78:	409a      	lsls	r2, r3
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	4013      	ands	r3, r2
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d026      	beq.n	8005bd0 <HAL_DMA_IRQHandler+0x7a>
 8005b82:	68bb      	ldr	r3, [r7, #8]
 8005b84:	f003 0304 	and.w	r3, r3, #4
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d021      	beq.n	8005bd0 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f003 0320 	and.w	r3, r3, #32
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d107      	bne.n	8005baa <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	681a      	ldr	r2, [r3, #0]
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f022 0204 	bic.w	r2, r2, #4
 8005ba8:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bae:	f003 021c 	and.w	r2, r3, #28
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bb6:	2104      	movs	r1, #4
 8005bb8:	fa01 f202 	lsl.w	r2, r1, r2
 8005bbc:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d071      	beq.n	8005caa <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bca:	6878      	ldr	r0, [r7, #4]
 8005bcc:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8005bce:	e06c      	b.n	8005caa <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bd4:	f003 031c 	and.w	r3, r3, #28
 8005bd8:	2202      	movs	r2, #2
 8005bda:	409a      	lsls	r2, r3
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	4013      	ands	r3, r2
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d02e      	beq.n	8005c42 <HAL_DMA_IRQHandler+0xec>
 8005be4:	68bb      	ldr	r3, [r7, #8]
 8005be6:	f003 0302 	and.w	r3, r3, #2
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d029      	beq.n	8005c42 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f003 0320 	and.w	r3, r3, #32
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d10b      	bne.n	8005c14 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	681a      	ldr	r2, [r3, #0]
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f022 020a 	bic.w	r2, r2, #10
 8005c0a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2201      	movs	r2, #1
 8005c10:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c18:	f003 021c 	and.w	r2, r3, #28
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c20:	2102      	movs	r1, #2
 8005c22:	fa01 f202 	lsl.w	r2, r1, r2
 8005c26:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d038      	beq.n	8005caa <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c3c:	6878      	ldr	r0, [r7, #4]
 8005c3e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8005c40:	e033      	b.n	8005caa <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c46:	f003 031c 	and.w	r3, r3, #28
 8005c4a:	2208      	movs	r2, #8
 8005c4c:	409a      	lsls	r2, r3
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	4013      	ands	r3, r2
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d02a      	beq.n	8005cac <HAL_DMA_IRQHandler+0x156>
 8005c56:	68bb      	ldr	r3, [r7, #8]
 8005c58:	f003 0308 	and.w	r3, r3, #8
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d025      	beq.n	8005cac <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	681a      	ldr	r2, [r3, #0]
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f022 020e 	bic.w	r2, r2, #14
 8005c6e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c74:	f003 021c 	and.w	r2, r3, #28
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c7c:	2101      	movs	r1, #1
 8005c7e:	fa01 f202 	lsl.w	r2, r1, r2
 8005c82:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2201      	movs	r2, #1
 8005c88:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2201      	movs	r2, #1
 8005c8e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2200      	movs	r2, #0
 8005c96:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d004      	beq.n	8005cac <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ca6:	6878      	ldr	r0, [r7, #4]
 8005ca8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005caa:	bf00      	nop
 8005cac:	bf00      	nop
}
 8005cae:	3710      	adds	r7, #16
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	bd80      	pop	{r7, pc}

08005cb4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	b085      	sub	sp, #20
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	60f8      	str	r0, [r7, #12]
 8005cbc:	60b9      	str	r1, [r7, #8]
 8005cbe:	607a      	str	r2, [r7, #4]
 8005cc0:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005cc6:	f003 021c 	and.w	r2, r3, #28
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cce:	2101      	movs	r1, #1
 8005cd0:	fa01 f202 	lsl.w	r2, r1, r2
 8005cd4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	683a      	ldr	r2, [r7, #0]
 8005cdc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	689b      	ldr	r3, [r3, #8]
 8005ce2:	2b10      	cmp	r3, #16
 8005ce4:	d108      	bne.n	8005cf8 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	687a      	ldr	r2, [r7, #4]
 8005cec:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	68ba      	ldr	r2, [r7, #8]
 8005cf4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005cf6:	e007      	b.n	8005d08 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	68ba      	ldr	r2, [r7, #8]
 8005cfe:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	687a      	ldr	r2, [r7, #4]
 8005d06:	60da      	str	r2, [r3, #12]
}
 8005d08:	bf00      	nop
 8005d0a:	3714      	adds	r7, #20
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d12:	4770      	bx	lr

08005d14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005d14:	b480      	push	{r7}
 8005d16:	b087      	sub	sp, #28
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
 8005d1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005d1e:	2300      	movs	r3, #0
 8005d20:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005d22:	e148      	b.n	8005fb6 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	681a      	ldr	r2, [r3, #0]
 8005d28:	2101      	movs	r1, #1
 8005d2a:	697b      	ldr	r3, [r7, #20]
 8005d2c:	fa01 f303 	lsl.w	r3, r1, r3
 8005d30:	4013      	ands	r3, r2
 8005d32:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	f000 813a 	beq.w	8005fb0 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	685b      	ldr	r3, [r3, #4]
 8005d40:	f003 0303 	and.w	r3, r3, #3
 8005d44:	2b01      	cmp	r3, #1
 8005d46:	d005      	beq.n	8005d54 <HAL_GPIO_Init+0x40>
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	685b      	ldr	r3, [r3, #4]
 8005d4c:	f003 0303 	and.w	r3, r3, #3
 8005d50:	2b02      	cmp	r3, #2
 8005d52:	d130      	bne.n	8005db6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	689b      	ldr	r3, [r3, #8]
 8005d58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005d5a:	697b      	ldr	r3, [r7, #20]
 8005d5c:	005b      	lsls	r3, r3, #1
 8005d5e:	2203      	movs	r2, #3
 8005d60:	fa02 f303 	lsl.w	r3, r2, r3
 8005d64:	43db      	mvns	r3, r3
 8005d66:	693a      	ldr	r2, [r7, #16]
 8005d68:	4013      	ands	r3, r2
 8005d6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	68da      	ldr	r2, [r3, #12]
 8005d70:	697b      	ldr	r3, [r7, #20]
 8005d72:	005b      	lsls	r3, r3, #1
 8005d74:	fa02 f303 	lsl.w	r3, r2, r3
 8005d78:	693a      	ldr	r2, [r7, #16]
 8005d7a:	4313      	orrs	r3, r2
 8005d7c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	693a      	ldr	r2, [r7, #16]
 8005d82:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	685b      	ldr	r3, [r3, #4]
 8005d88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005d8a:	2201      	movs	r2, #1
 8005d8c:	697b      	ldr	r3, [r7, #20]
 8005d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8005d92:	43db      	mvns	r3, r3
 8005d94:	693a      	ldr	r2, [r7, #16]
 8005d96:	4013      	ands	r3, r2
 8005d98:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	685b      	ldr	r3, [r3, #4]
 8005d9e:	091b      	lsrs	r3, r3, #4
 8005da0:	f003 0201 	and.w	r2, r3, #1
 8005da4:	697b      	ldr	r3, [r7, #20]
 8005da6:	fa02 f303 	lsl.w	r3, r2, r3
 8005daa:	693a      	ldr	r2, [r7, #16]
 8005dac:	4313      	orrs	r3, r2
 8005dae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	693a      	ldr	r2, [r7, #16]
 8005db4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	685b      	ldr	r3, [r3, #4]
 8005dba:	f003 0303 	and.w	r3, r3, #3
 8005dbe:	2b03      	cmp	r3, #3
 8005dc0:	d017      	beq.n	8005df2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	68db      	ldr	r3, [r3, #12]
 8005dc6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005dc8:	697b      	ldr	r3, [r7, #20]
 8005dca:	005b      	lsls	r3, r3, #1
 8005dcc:	2203      	movs	r2, #3
 8005dce:	fa02 f303 	lsl.w	r3, r2, r3
 8005dd2:	43db      	mvns	r3, r3
 8005dd4:	693a      	ldr	r2, [r7, #16]
 8005dd6:	4013      	ands	r3, r2
 8005dd8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	689a      	ldr	r2, [r3, #8]
 8005dde:	697b      	ldr	r3, [r7, #20]
 8005de0:	005b      	lsls	r3, r3, #1
 8005de2:	fa02 f303 	lsl.w	r3, r2, r3
 8005de6:	693a      	ldr	r2, [r7, #16]
 8005de8:	4313      	orrs	r3, r2
 8005dea:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	693a      	ldr	r2, [r7, #16]
 8005df0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	685b      	ldr	r3, [r3, #4]
 8005df6:	f003 0303 	and.w	r3, r3, #3
 8005dfa:	2b02      	cmp	r3, #2
 8005dfc:	d123      	bne.n	8005e46 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005dfe:	697b      	ldr	r3, [r7, #20]
 8005e00:	08da      	lsrs	r2, r3, #3
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	3208      	adds	r2, #8
 8005e06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e0a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005e0c:	697b      	ldr	r3, [r7, #20]
 8005e0e:	f003 0307 	and.w	r3, r3, #7
 8005e12:	009b      	lsls	r3, r3, #2
 8005e14:	220f      	movs	r2, #15
 8005e16:	fa02 f303 	lsl.w	r3, r2, r3
 8005e1a:	43db      	mvns	r3, r3
 8005e1c:	693a      	ldr	r2, [r7, #16]
 8005e1e:	4013      	ands	r3, r2
 8005e20:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	691a      	ldr	r2, [r3, #16]
 8005e26:	697b      	ldr	r3, [r7, #20]
 8005e28:	f003 0307 	and.w	r3, r3, #7
 8005e2c:	009b      	lsls	r3, r3, #2
 8005e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8005e32:	693a      	ldr	r2, [r7, #16]
 8005e34:	4313      	orrs	r3, r2
 8005e36:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005e38:	697b      	ldr	r3, [r7, #20]
 8005e3a:	08da      	lsrs	r2, r3, #3
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	3208      	adds	r2, #8
 8005e40:	6939      	ldr	r1, [r7, #16]
 8005e42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005e4c:	697b      	ldr	r3, [r7, #20]
 8005e4e:	005b      	lsls	r3, r3, #1
 8005e50:	2203      	movs	r2, #3
 8005e52:	fa02 f303 	lsl.w	r3, r2, r3
 8005e56:	43db      	mvns	r3, r3
 8005e58:	693a      	ldr	r2, [r7, #16]
 8005e5a:	4013      	ands	r3, r2
 8005e5c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	685b      	ldr	r3, [r3, #4]
 8005e62:	f003 0203 	and.w	r2, r3, #3
 8005e66:	697b      	ldr	r3, [r7, #20]
 8005e68:	005b      	lsls	r3, r3, #1
 8005e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8005e6e:	693a      	ldr	r2, [r7, #16]
 8005e70:	4313      	orrs	r3, r2
 8005e72:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	693a      	ldr	r2, [r7, #16]
 8005e78:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	685b      	ldr	r3, [r3, #4]
 8005e7e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	f000 8094 	beq.w	8005fb0 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005e88:	4b52      	ldr	r3, [pc, #328]	@ (8005fd4 <HAL_GPIO_Init+0x2c0>)
 8005e8a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e8c:	4a51      	ldr	r2, [pc, #324]	@ (8005fd4 <HAL_GPIO_Init+0x2c0>)
 8005e8e:	f043 0301 	orr.w	r3, r3, #1
 8005e92:	6613      	str	r3, [r2, #96]	@ 0x60
 8005e94:	4b4f      	ldr	r3, [pc, #316]	@ (8005fd4 <HAL_GPIO_Init+0x2c0>)
 8005e96:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e98:	f003 0301 	and.w	r3, r3, #1
 8005e9c:	60bb      	str	r3, [r7, #8]
 8005e9e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005ea0:	4a4d      	ldr	r2, [pc, #308]	@ (8005fd8 <HAL_GPIO_Init+0x2c4>)
 8005ea2:	697b      	ldr	r3, [r7, #20]
 8005ea4:	089b      	lsrs	r3, r3, #2
 8005ea6:	3302      	adds	r3, #2
 8005ea8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005eac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005eae:	697b      	ldr	r3, [r7, #20]
 8005eb0:	f003 0303 	and.w	r3, r3, #3
 8005eb4:	009b      	lsls	r3, r3, #2
 8005eb6:	220f      	movs	r2, #15
 8005eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8005ebc:	43db      	mvns	r3, r3
 8005ebe:	693a      	ldr	r2, [r7, #16]
 8005ec0:	4013      	ands	r3, r2
 8005ec2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8005eca:	d00d      	beq.n	8005ee8 <HAL_GPIO_Init+0x1d4>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	4a43      	ldr	r2, [pc, #268]	@ (8005fdc <HAL_GPIO_Init+0x2c8>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d007      	beq.n	8005ee4 <HAL_GPIO_Init+0x1d0>
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	4a42      	ldr	r2, [pc, #264]	@ (8005fe0 <HAL_GPIO_Init+0x2cc>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d101      	bne.n	8005ee0 <HAL_GPIO_Init+0x1cc>
 8005edc:	2302      	movs	r3, #2
 8005ede:	e004      	b.n	8005eea <HAL_GPIO_Init+0x1d6>
 8005ee0:	2307      	movs	r3, #7
 8005ee2:	e002      	b.n	8005eea <HAL_GPIO_Init+0x1d6>
 8005ee4:	2301      	movs	r3, #1
 8005ee6:	e000      	b.n	8005eea <HAL_GPIO_Init+0x1d6>
 8005ee8:	2300      	movs	r3, #0
 8005eea:	697a      	ldr	r2, [r7, #20]
 8005eec:	f002 0203 	and.w	r2, r2, #3
 8005ef0:	0092      	lsls	r2, r2, #2
 8005ef2:	4093      	lsls	r3, r2
 8005ef4:	693a      	ldr	r2, [r7, #16]
 8005ef6:	4313      	orrs	r3, r2
 8005ef8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005efa:	4937      	ldr	r1, [pc, #220]	@ (8005fd8 <HAL_GPIO_Init+0x2c4>)
 8005efc:	697b      	ldr	r3, [r7, #20]
 8005efe:	089b      	lsrs	r3, r3, #2
 8005f00:	3302      	adds	r3, #2
 8005f02:	693a      	ldr	r2, [r7, #16]
 8005f04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005f08:	4b36      	ldr	r3, [pc, #216]	@ (8005fe4 <HAL_GPIO_Init+0x2d0>)
 8005f0a:	689b      	ldr	r3, [r3, #8]
 8005f0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	43db      	mvns	r3, r3
 8005f12:	693a      	ldr	r2, [r7, #16]
 8005f14:	4013      	ands	r3, r2
 8005f16:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	685b      	ldr	r3, [r3, #4]
 8005f1c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d003      	beq.n	8005f2c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8005f24:	693a      	ldr	r2, [r7, #16]
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	4313      	orrs	r3, r2
 8005f2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005f2c:	4a2d      	ldr	r2, [pc, #180]	@ (8005fe4 <HAL_GPIO_Init+0x2d0>)
 8005f2e:	693b      	ldr	r3, [r7, #16]
 8005f30:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005f32:	4b2c      	ldr	r3, [pc, #176]	@ (8005fe4 <HAL_GPIO_Init+0x2d0>)
 8005f34:	68db      	ldr	r3, [r3, #12]
 8005f36:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	43db      	mvns	r3, r3
 8005f3c:	693a      	ldr	r2, [r7, #16]
 8005f3e:	4013      	ands	r3, r2
 8005f40:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	685b      	ldr	r3, [r3, #4]
 8005f46:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d003      	beq.n	8005f56 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8005f4e:	693a      	ldr	r2, [r7, #16]
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	4313      	orrs	r3, r2
 8005f54:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005f56:	4a23      	ldr	r2, [pc, #140]	@ (8005fe4 <HAL_GPIO_Init+0x2d0>)
 8005f58:	693b      	ldr	r3, [r7, #16]
 8005f5a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8005f5c:	4b21      	ldr	r3, [pc, #132]	@ (8005fe4 <HAL_GPIO_Init+0x2d0>)
 8005f5e:	685b      	ldr	r3, [r3, #4]
 8005f60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	43db      	mvns	r3, r3
 8005f66:	693a      	ldr	r2, [r7, #16]
 8005f68:	4013      	ands	r3, r2
 8005f6a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	685b      	ldr	r3, [r3, #4]
 8005f70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d003      	beq.n	8005f80 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8005f78:	693a      	ldr	r2, [r7, #16]
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	4313      	orrs	r3, r2
 8005f7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005f80:	4a18      	ldr	r2, [pc, #96]	@ (8005fe4 <HAL_GPIO_Init+0x2d0>)
 8005f82:	693b      	ldr	r3, [r7, #16]
 8005f84:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8005f86:	4b17      	ldr	r3, [pc, #92]	@ (8005fe4 <HAL_GPIO_Init+0x2d0>)
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	43db      	mvns	r3, r3
 8005f90:	693a      	ldr	r2, [r7, #16]
 8005f92:	4013      	ands	r3, r2
 8005f94:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	685b      	ldr	r3, [r3, #4]
 8005f9a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d003      	beq.n	8005faa <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8005fa2:	693a      	ldr	r2, [r7, #16]
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	4313      	orrs	r3, r2
 8005fa8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005faa:	4a0e      	ldr	r2, [pc, #56]	@ (8005fe4 <HAL_GPIO_Init+0x2d0>)
 8005fac:	693b      	ldr	r3, [r7, #16]
 8005fae:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005fb0:	697b      	ldr	r3, [r7, #20]
 8005fb2:	3301      	adds	r3, #1
 8005fb4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	681a      	ldr	r2, [r3, #0]
 8005fba:	697b      	ldr	r3, [r7, #20]
 8005fbc:	fa22 f303 	lsr.w	r3, r2, r3
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	f47f aeaf 	bne.w	8005d24 <HAL_GPIO_Init+0x10>
  }
}
 8005fc6:	bf00      	nop
 8005fc8:	bf00      	nop
 8005fca:	371c      	adds	r7, #28
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd2:	4770      	bx	lr
 8005fd4:	40021000 	.word	0x40021000
 8005fd8:	40010000 	.word	0x40010000
 8005fdc:	48000400 	.word	0x48000400
 8005fe0:	48000800 	.word	0x48000800
 8005fe4:	40010400 	.word	0x40010400

08005fe8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005fe8:	b480      	push	{r7}
 8005fea:	b085      	sub	sp, #20
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
 8005ff0:	460b      	mov	r3, r1
 8005ff2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	691a      	ldr	r2, [r3, #16]
 8005ff8:	887b      	ldrh	r3, [r7, #2]
 8005ffa:	4013      	ands	r3, r2
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d002      	beq.n	8006006 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006000:	2301      	movs	r3, #1
 8006002:	73fb      	strb	r3, [r7, #15]
 8006004:	e001      	b.n	800600a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006006:	2300      	movs	r3, #0
 8006008:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800600a:	7bfb      	ldrb	r3, [r7, #15]
}
 800600c:	4618      	mov	r0, r3
 800600e:	3714      	adds	r7, #20
 8006010:	46bd      	mov	sp, r7
 8006012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006016:	4770      	bx	lr

08006018 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006018:	b480      	push	{r7}
 800601a:	b083      	sub	sp, #12
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
 8006020:	460b      	mov	r3, r1
 8006022:	807b      	strh	r3, [r7, #2]
 8006024:	4613      	mov	r3, r2
 8006026:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006028:	787b      	ldrb	r3, [r7, #1]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d003      	beq.n	8006036 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800602e:	887a      	ldrh	r2, [r7, #2]
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006034:	e002      	b.n	800603c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006036:	887a      	ldrh	r2, [r7, #2]
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800603c:	bf00      	nop
 800603e:	370c      	adds	r7, #12
 8006040:	46bd      	mov	sp, r7
 8006042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006046:	4770      	bx	lr

08006048 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006048:	b480      	push	{r7}
 800604a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800604c:	4b05      	ldr	r3, [pc, #20]	@ (8006064 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	4a04      	ldr	r2, [pc, #16]	@ (8006064 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006052:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006056:	6013      	str	r3, [r2, #0]
}
 8006058:	bf00      	nop
 800605a:	46bd      	mov	sp, r7
 800605c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006060:	4770      	bx	lr
 8006062:	bf00      	nop
 8006064:	40007000 	.word	0x40007000

08006068 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006068:	b480      	push	{r7}
 800606a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800606c:	4b04      	ldr	r3, [pc, #16]	@ (8006080 <HAL_PWREx_GetVoltageRange+0x18>)
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8006074:	4618      	mov	r0, r3
 8006076:	46bd      	mov	sp, r7
 8006078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607c:	4770      	bx	lr
 800607e:	bf00      	nop
 8006080:	40007000 	.word	0x40007000

08006084 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006084:	b480      	push	{r7}
 8006086:	b085      	sub	sp, #20
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006092:	d130      	bne.n	80060f6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8006094:	4b23      	ldr	r3, [pc, #140]	@ (8006124 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800609c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80060a0:	d038      	beq.n	8006114 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80060a2:	4b20      	ldr	r3, [pc, #128]	@ (8006124 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80060aa:	4a1e      	ldr	r2, [pc, #120]	@ (8006124 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80060ac:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80060b0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80060b2:	4b1d      	ldr	r3, [pc, #116]	@ (8006128 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	2232      	movs	r2, #50	@ 0x32
 80060b8:	fb02 f303 	mul.w	r3, r2, r3
 80060bc:	4a1b      	ldr	r2, [pc, #108]	@ (800612c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80060be:	fba2 2303 	umull	r2, r3, r2, r3
 80060c2:	0c9b      	lsrs	r3, r3, #18
 80060c4:	3301      	adds	r3, #1
 80060c6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80060c8:	e002      	b.n	80060d0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	3b01      	subs	r3, #1
 80060ce:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80060d0:	4b14      	ldr	r3, [pc, #80]	@ (8006124 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80060d2:	695b      	ldr	r3, [r3, #20]
 80060d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80060d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80060dc:	d102      	bne.n	80060e4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d1f2      	bne.n	80060ca <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80060e4:	4b0f      	ldr	r3, [pc, #60]	@ (8006124 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80060e6:	695b      	ldr	r3, [r3, #20]
 80060e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80060ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80060f0:	d110      	bne.n	8006114 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80060f2:	2303      	movs	r3, #3
 80060f4:	e00f      	b.n	8006116 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80060f6:	4b0b      	ldr	r3, [pc, #44]	@ (8006124 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80060fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006102:	d007      	beq.n	8006114 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006104:	4b07      	ldr	r3, [pc, #28]	@ (8006124 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800610c:	4a05      	ldr	r2, [pc, #20]	@ (8006124 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800610e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006112:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8006114:	2300      	movs	r3, #0
}
 8006116:	4618      	mov	r0, r3
 8006118:	3714      	adds	r7, #20
 800611a:	46bd      	mov	sp, r7
 800611c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006120:	4770      	bx	lr
 8006122:	bf00      	nop
 8006124:	40007000 	.word	0x40007000
 8006128:	2000000c 	.word	0x2000000c
 800612c:	431bde83 	.word	0x431bde83

08006130 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b088      	sub	sp, #32
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d102      	bne.n	8006144 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800613e:	2301      	movs	r3, #1
 8006140:	f000 bc02 	b.w	8006948 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006144:	4b96      	ldr	r3, [pc, #600]	@ (80063a0 <HAL_RCC_OscConfig+0x270>)
 8006146:	689b      	ldr	r3, [r3, #8]
 8006148:	f003 030c 	and.w	r3, r3, #12
 800614c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800614e:	4b94      	ldr	r3, [pc, #592]	@ (80063a0 <HAL_RCC_OscConfig+0x270>)
 8006150:	68db      	ldr	r3, [r3, #12]
 8006152:	f003 0303 	and.w	r3, r3, #3
 8006156:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f003 0310 	and.w	r3, r3, #16
 8006160:	2b00      	cmp	r3, #0
 8006162:	f000 80e4 	beq.w	800632e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006166:	69bb      	ldr	r3, [r7, #24]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d007      	beq.n	800617c <HAL_RCC_OscConfig+0x4c>
 800616c:	69bb      	ldr	r3, [r7, #24]
 800616e:	2b0c      	cmp	r3, #12
 8006170:	f040 808b 	bne.w	800628a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8006174:	697b      	ldr	r3, [r7, #20]
 8006176:	2b01      	cmp	r3, #1
 8006178:	f040 8087 	bne.w	800628a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800617c:	4b88      	ldr	r3, [pc, #544]	@ (80063a0 <HAL_RCC_OscConfig+0x270>)
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f003 0302 	and.w	r3, r3, #2
 8006184:	2b00      	cmp	r3, #0
 8006186:	d005      	beq.n	8006194 <HAL_RCC_OscConfig+0x64>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	699b      	ldr	r3, [r3, #24]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d101      	bne.n	8006194 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8006190:	2301      	movs	r3, #1
 8006192:	e3d9      	b.n	8006948 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6a1a      	ldr	r2, [r3, #32]
 8006198:	4b81      	ldr	r3, [pc, #516]	@ (80063a0 <HAL_RCC_OscConfig+0x270>)
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f003 0308 	and.w	r3, r3, #8
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d004      	beq.n	80061ae <HAL_RCC_OscConfig+0x7e>
 80061a4:	4b7e      	ldr	r3, [pc, #504]	@ (80063a0 <HAL_RCC_OscConfig+0x270>)
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80061ac:	e005      	b.n	80061ba <HAL_RCC_OscConfig+0x8a>
 80061ae:	4b7c      	ldr	r3, [pc, #496]	@ (80063a0 <HAL_RCC_OscConfig+0x270>)
 80061b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80061b4:	091b      	lsrs	r3, r3, #4
 80061b6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d223      	bcs.n	8006206 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6a1b      	ldr	r3, [r3, #32]
 80061c2:	4618      	mov	r0, r3
 80061c4:	f000 fd54 	bl	8006c70 <RCC_SetFlashLatencyFromMSIRange>
 80061c8:	4603      	mov	r3, r0
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d001      	beq.n	80061d2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80061ce:	2301      	movs	r3, #1
 80061d0:	e3ba      	b.n	8006948 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80061d2:	4b73      	ldr	r3, [pc, #460]	@ (80063a0 <HAL_RCC_OscConfig+0x270>)
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	4a72      	ldr	r2, [pc, #456]	@ (80063a0 <HAL_RCC_OscConfig+0x270>)
 80061d8:	f043 0308 	orr.w	r3, r3, #8
 80061dc:	6013      	str	r3, [r2, #0]
 80061de:	4b70      	ldr	r3, [pc, #448]	@ (80063a0 <HAL_RCC_OscConfig+0x270>)
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6a1b      	ldr	r3, [r3, #32]
 80061ea:	496d      	ldr	r1, [pc, #436]	@ (80063a0 <HAL_RCC_OscConfig+0x270>)
 80061ec:	4313      	orrs	r3, r2
 80061ee:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80061f0:	4b6b      	ldr	r3, [pc, #428]	@ (80063a0 <HAL_RCC_OscConfig+0x270>)
 80061f2:	685b      	ldr	r3, [r3, #4]
 80061f4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	69db      	ldr	r3, [r3, #28]
 80061fc:	021b      	lsls	r3, r3, #8
 80061fe:	4968      	ldr	r1, [pc, #416]	@ (80063a0 <HAL_RCC_OscConfig+0x270>)
 8006200:	4313      	orrs	r3, r2
 8006202:	604b      	str	r3, [r1, #4]
 8006204:	e025      	b.n	8006252 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006206:	4b66      	ldr	r3, [pc, #408]	@ (80063a0 <HAL_RCC_OscConfig+0x270>)
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	4a65      	ldr	r2, [pc, #404]	@ (80063a0 <HAL_RCC_OscConfig+0x270>)
 800620c:	f043 0308 	orr.w	r3, r3, #8
 8006210:	6013      	str	r3, [r2, #0]
 8006212:	4b63      	ldr	r3, [pc, #396]	@ (80063a0 <HAL_RCC_OscConfig+0x270>)
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6a1b      	ldr	r3, [r3, #32]
 800621e:	4960      	ldr	r1, [pc, #384]	@ (80063a0 <HAL_RCC_OscConfig+0x270>)
 8006220:	4313      	orrs	r3, r2
 8006222:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006224:	4b5e      	ldr	r3, [pc, #376]	@ (80063a0 <HAL_RCC_OscConfig+0x270>)
 8006226:	685b      	ldr	r3, [r3, #4]
 8006228:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	69db      	ldr	r3, [r3, #28]
 8006230:	021b      	lsls	r3, r3, #8
 8006232:	495b      	ldr	r1, [pc, #364]	@ (80063a0 <HAL_RCC_OscConfig+0x270>)
 8006234:	4313      	orrs	r3, r2
 8006236:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006238:	69bb      	ldr	r3, [r7, #24]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d109      	bne.n	8006252 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6a1b      	ldr	r3, [r3, #32]
 8006242:	4618      	mov	r0, r3
 8006244:	f000 fd14 	bl	8006c70 <RCC_SetFlashLatencyFromMSIRange>
 8006248:	4603      	mov	r3, r0
 800624a:	2b00      	cmp	r3, #0
 800624c:	d001      	beq.n	8006252 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800624e:	2301      	movs	r3, #1
 8006250:	e37a      	b.n	8006948 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006252:	f000 fc81 	bl	8006b58 <HAL_RCC_GetSysClockFreq>
 8006256:	4602      	mov	r2, r0
 8006258:	4b51      	ldr	r3, [pc, #324]	@ (80063a0 <HAL_RCC_OscConfig+0x270>)
 800625a:	689b      	ldr	r3, [r3, #8]
 800625c:	091b      	lsrs	r3, r3, #4
 800625e:	f003 030f 	and.w	r3, r3, #15
 8006262:	4950      	ldr	r1, [pc, #320]	@ (80063a4 <HAL_RCC_OscConfig+0x274>)
 8006264:	5ccb      	ldrb	r3, [r1, r3]
 8006266:	f003 031f 	and.w	r3, r3, #31
 800626a:	fa22 f303 	lsr.w	r3, r2, r3
 800626e:	4a4e      	ldr	r2, [pc, #312]	@ (80063a8 <HAL_RCC_OscConfig+0x278>)
 8006270:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8006272:	4b4e      	ldr	r3, [pc, #312]	@ (80063ac <HAL_RCC_OscConfig+0x27c>)
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	4618      	mov	r0, r3
 8006278:	f7fe f8a2 	bl	80043c0 <HAL_InitTick>
 800627c:	4603      	mov	r3, r0
 800627e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8006280:	7bfb      	ldrb	r3, [r7, #15]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d052      	beq.n	800632c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8006286:	7bfb      	ldrb	r3, [r7, #15]
 8006288:	e35e      	b.n	8006948 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	699b      	ldr	r3, [r3, #24]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d032      	beq.n	80062f8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006292:	4b43      	ldr	r3, [pc, #268]	@ (80063a0 <HAL_RCC_OscConfig+0x270>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	4a42      	ldr	r2, [pc, #264]	@ (80063a0 <HAL_RCC_OscConfig+0x270>)
 8006298:	f043 0301 	orr.w	r3, r3, #1
 800629c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800629e:	f7fe f8df 	bl	8004460 <HAL_GetTick>
 80062a2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80062a4:	e008      	b.n	80062b8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80062a6:	f7fe f8db 	bl	8004460 <HAL_GetTick>
 80062aa:	4602      	mov	r2, r0
 80062ac:	693b      	ldr	r3, [r7, #16]
 80062ae:	1ad3      	subs	r3, r2, r3
 80062b0:	2b02      	cmp	r3, #2
 80062b2:	d901      	bls.n	80062b8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80062b4:	2303      	movs	r3, #3
 80062b6:	e347      	b.n	8006948 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80062b8:	4b39      	ldr	r3, [pc, #228]	@ (80063a0 <HAL_RCC_OscConfig+0x270>)
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f003 0302 	and.w	r3, r3, #2
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d0f0      	beq.n	80062a6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80062c4:	4b36      	ldr	r3, [pc, #216]	@ (80063a0 <HAL_RCC_OscConfig+0x270>)
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	4a35      	ldr	r2, [pc, #212]	@ (80063a0 <HAL_RCC_OscConfig+0x270>)
 80062ca:	f043 0308 	orr.w	r3, r3, #8
 80062ce:	6013      	str	r3, [r2, #0]
 80062d0:	4b33      	ldr	r3, [pc, #204]	@ (80063a0 <HAL_RCC_OscConfig+0x270>)
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6a1b      	ldr	r3, [r3, #32]
 80062dc:	4930      	ldr	r1, [pc, #192]	@ (80063a0 <HAL_RCC_OscConfig+0x270>)
 80062de:	4313      	orrs	r3, r2
 80062e0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80062e2:	4b2f      	ldr	r3, [pc, #188]	@ (80063a0 <HAL_RCC_OscConfig+0x270>)
 80062e4:	685b      	ldr	r3, [r3, #4]
 80062e6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	69db      	ldr	r3, [r3, #28]
 80062ee:	021b      	lsls	r3, r3, #8
 80062f0:	492b      	ldr	r1, [pc, #172]	@ (80063a0 <HAL_RCC_OscConfig+0x270>)
 80062f2:	4313      	orrs	r3, r2
 80062f4:	604b      	str	r3, [r1, #4]
 80062f6:	e01a      	b.n	800632e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80062f8:	4b29      	ldr	r3, [pc, #164]	@ (80063a0 <HAL_RCC_OscConfig+0x270>)
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	4a28      	ldr	r2, [pc, #160]	@ (80063a0 <HAL_RCC_OscConfig+0x270>)
 80062fe:	f023 0301 	bic.w	r3, r3, #1
 8006302:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006304:	f7fe f8ac 	bl	8004460 <HAL_GetTick>
 8006308:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800630a:	e008      	b.n	800631e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800630c:	f7fe f8a8 	bl	8004460 <HAL_GetTick>
 8006310:	4602      	mov	r2, r0
 8006312:	693b      	ldr	r3, [r7, #16]
 8006314:	1ad3      	subs	r3, r2, r3
 8006316:	2b02      	cmp	r3, #2
 8006318:	d901      	bls.n	800631e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800631a:	2303      	movs	r3, #3
 800631c:	e314      	b.n	8006948 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800631e:	4b20      	ldr	r3, [pc, #128]	@ (80063a0 <HAL_RCC_OscConfig+0x270>)
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f003 0302 	and.w	r3, r3, #2
 8006326:	2b00      	cmp	r3, #0
 8006328:	d1f0      	bne.n	800630c <HAL_RCC_OscConfig+0x1dc>
 800632a:	e000      	b.n	800632e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800632c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f003 0301 	and.w	r3, r3, #1
 8006336:	2b00      	cmp	r3, #0
 8006338:	d073      	beq.n	8006422 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800633a:	69bb      	ldr	r3, [r7, #24]
 800633c:	2b08      	cmp	r3, #8
 800633e:	d005      	beq.n	800634c <HAL_RCC_OscConfig+0x21c>
 8006340:	69bb      	ldr	r3, [r7, #24]
 8006342:	2b0c      	cmp	r3, #12
 8006344:	d10e      	bne.n	8006364 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006346:	697b      	ldr	r3, [r7, #20]
 8006348:	2b03      	cmp	r3, #3
 800634a:	d10b      	bne.n	8006364 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800634c:	4b14      	ldr	r3, [pc, #80]	@ (80063a0 <HAL_RCC_OscConfig+0x270>)
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006354:	2b00      	cmp	r3, #0
 8006356:	d063      	beq.n	8006420 <HAL_RCC_OscConfig+0x2f0>
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	685b      	ldr	r3, [r3, #4]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d15f      	bne.n	8006420 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8006360:	2301      	movs	r3, #1
 8006362:	e2f1      	b.n	8006948 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	685b      	ldr	r3, [r3, #4]
 8006368:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800636c:	d106      	bne.n	800637c <HAL_RCC_OscConfig+0x24c>
 800636e:	4b0c      	ldr	r3, [pc, #48]	@ (80063a0 <HAL_RCC_OscConfig+0x270>)
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	4a0b      	ldr	r2, [pc, #44]	@ (80063a0 <HAL_RCC_OscConfig+0x270>)
 8006374:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006378:	6013      	str	r3, [r2, #0]
 800637a:	e025      	b.n	80063c8 <HAL_RCC_OscConfig+0x298>
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	685b      	ldr	r3, [r3, #4]
 8006380:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006384:	d114      	bne.n	80063b0 <HAL_RCC_OscConfig+0x280>
 8006386:	4b06      	ldr	r3, [pc, #24]	@ (80063a0 <HAL_RCC_OscConfig+0x270>)
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	4a05      	ldr	r2, [pc, #20]	@ (80063a0 <HAL_RCC_OscConfig+0x270>)
 800638c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006390:	6013      	str	r3, [r2, #0]
 8006392:	4b03      	ldr	r3, [pc, #12]	@ (80063a0 <HAL_RCC_OscConfig+0x270>)
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	4a02      	ldr	r2, [pc, #8]	@ (80063a0 <HAL_RCC_OscConfig+0x270>)
 8006398:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800639c:	6013      	str	r3, [r2, #0]
 800639e:	e013      	b.n	80063c8 <HAL_RCC_OscConfig+0x298>
 80063a0:	40021000 	.word	0x40021000
 80063a4:	0800a5d0 	.word	0x0800a5d0
 80063a8:	2000000c 	.word	0x2000000c
 80063ac:	20000010 	.word	0x20000010
 80063b0:	4ba0      	ldr	r3, [pc, #640]	@ (8006634 <HAL_RCC_OscConfig+0x504>)
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	4a9f      	ldr	r2, [pc, #636]	@ (8006634 <HAL_RCC_OscConfig+0x504>)
 80063b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80063ba:	6013      	str	r3, [r2, #0]
 80063bc:	4b9d      	ldr	r3, [pc, #628]	@ (8006634 <HAL_RCC_OscConfig+0x504>)
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	4a9c      	ldr	r2, [pc, #624]	@ (8006634 <HAL_RCC_OscConfig+0x504>)
 80063c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80063c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	685b      	ldr	r3, [r3, #4]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d013      	beq.n	80063f8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063d0:	f7fe f846 	bl	8004460 <HAL_GetTick>
 80063d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80063d6:	e008      	b.n	80063ea <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80063d8:	f7fe f842 	bl	8004460 <HAL_GetTick>
 80063dc:	4602      	mov	r2, r0
 80063de:	693b      	ldr	r3, [r7, #16]
 80063e0:	1ad3      	subs	r3, r2, r3
 80063e2:	2b64      	cmp	r3, #100	@ 0x64
 80063e4:	d901      	bls.n	80063ea <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80063e6:	2303      	movs	r3, #3
 80063e8:	e2ae      	b.n	8006948 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80063ea:	4b92      	ldr	r3, [pc, #584]	@ (8006634 <HAL_RCC_OscConfig+0x504>)
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d0f0      	beq.n	80063d8 <HAL_RCC_OscConfig+0x2a8>
 80063f6:	e014      	b.n	8006422 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063f8:	f7fe f832 	bl	8004460 <HAL_GetTick>
 80063fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80063fe:	e008      	b.n	8006412 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006400:	f7fe f82e 	bl	8004460 <HAL_GetTick>
 8006404:	4602      	mov	r2, r0
 8006406:	693b      	ldr	r3, [r7, #16]
 8006408:	1ad3      	subs	r3, r2, r3
 800640a:	2b64      	cmp	r3, #100	@ 0x64
 800640c:	d901      	bls.n	8006412 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800640e:	2303      	movs	r3, #3
 8006410:	e29a      	b.n	8006948 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006412:	4b88      	ldr	r3, [pc, #544]	@ (8006634 <HAL_RCC_OscConfig+0x504>)
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800641a:	2b00      	cmp	r3, #0
 800641c:	d1f0      	bne.n	8006400 <HAL_RCC_OscConfig+0x2d0>
 800641e:	e000      	b.n	8006422 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006420:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f003 0302 	and.w	r3, r3, #2
 800642a:	2b00      	cmp	r3, #0
 800642c:	d060      	beq.n	80064f0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800642e:	69bb      	ldr	r3, [r7, #24]
 8006430:	2b04      	cmp	r3, #4
 8006432:	d005      	beq.n	8006440 <HAL_RCC_OscConfig+0x310>
 8006434:	69bb      	ldr	r3, [r7, #24]
 8006436:	2b0c      	cmp	r3, #12
 8006438:	d119      	bne.n	800646e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800643a:	697b      	ldr	r3, [r7, #20]
 800643c:	2b02      	cmp	r3, #2
 800643e:	d116      	bne.n	800646e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006440:	4b7c      	ldr	r3, [pc, #496]	@ (8006634 <HAL_RCC_OscConfig+0x504>)
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006448:	2b00      	cmp	r3, #0
 800644a:	d005      	beq.n	8006458 <HAL_RCC_OscConfig+0x328>
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	68db      	ldr	r3, [r3, #12]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d101      	bne.n	8006458 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8006454:	2301      	movs	r3, #1
 8006456:	e277      	b.n	8006948 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006458:	4b76      	ldr	r3, [pc, #472]	@ (8006634 <HAL_RCC_OscConfig+0x504>)
 800645a:	685b      	ldr	r3, [r3, #4]
 800645c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	691b      	ldr	r3, [r3, #16]
 8006464:	061b      	lsls	r3, r3, #24
 8006466:	4973      	ldr	r1, [pc, #460]	@ (8006634 <HAL_RCC_OscConfig+0x504>)
 8006468:	4313      	orrs	r3, r2
 800646a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800646c:	e040      	b.n	80064f0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	68db      	ldr	r3, [r3, #12]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d023      	beq.n	80064be <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006476:	4b6f      	ldr	r3, [pc, #444]	@ (8006634 <HAL_RCC_OscConfig+0x504>)
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	4a6e      	ldr	r2, [pc, #440]	@ (8006634 <HAL_RCC_OscConfig+0x504>)
 800647c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006480:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006482:	f7fd ffed 	bl	8004460 <HAL_GetTick>
 8006486:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006488:	e008      	b.n	800649c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800648a:	f7fd ffe9 	bl	8004460 <HAL_GetTick>
 800648e:	4602      	mov	r2, r0
 8006490:	693b      	ldr	r3, [r7, #16]
 8006492:	1ad3      	subs	r3, r2, r3
 8006494:	2b02      	cmp	r3, #2
 8006496:	d901      	bls.n	800649c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8006498:	2303      	movs	r3, #3
 800649a:	e255      	b.n	8006948 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800649c:	4b65      	ldr	r3, [pc, #404]	@ (8006634 <HAL_RCC_OscConfig+0x504>)
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d0f0      	beq.n	800648a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80064a8:	4b62      	ldr	r3, [pc, #392]	@ (8006634 <HAL_RCC_OscConfig+0x504>)
 80064aa:	685b      	ldr	r3, [r3, #4]
 80064ac:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	691b      	ldr	r3, [r3, #16]
 80064b4:	061b      	lsls	r3, r3, #24
 80064b6:	495f      	ldr	r1, [pc, #380]	@ (8006634 <HAL_RCC_OscConfig+0x504>)
 80064b8:	4313      	orrs	r3, r2
 80064ba:	604b      	str	r3, [r1, #4]
 80064bc:	e018      	b.n	80064f0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80064be:	4b5d      	ldr	r3, [pc, #372]	@ (8006634 <HAL_RCC_OscConfig+0x504>)
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	4a5c      	ldr	r2, [pc, #368]	@ (8006634 <HAL_RCC_OscConfig+0x504>)
 80064c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80064c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064ca:	f7fd ffc9 	bl	8004460 <HAL_GetTick>
 80064ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80064d0:	e008      	b.n	80064e4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80064d2:	f7fd ffc5 	bl	8004460 <HAL_GetTick>
 80064d6:	4602      	mov	r2, r0
 80064d8:	693b      	ldr	r3, [r7, #16]
 80064da:	1ad3      	subs	r3, r2, r3
 80064dc:	2b02      	cmp	r3, #2
 80064de:	d901      	bls.n	80064e4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80064e0:	2303      	movs	r3, #3
 80064e2:	e231      	b.n	8006948 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80064e4:	4b53      	ldr	r3, [pc, #332]	@ (8006634 <HAL_RCC_OscConfig+0x504>)
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d1f0      	bne.n	80064d2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f003 0308 	and.w	r3, r3, #8
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d03c      	beq.n	8006576 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	695b      	ldr	r3, [r3, #20]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d01c      	beq.n	800653e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006504:	4b4b      	ldr	r3, [pc, #300]	@ (8006634 <HAL_RCC_OscConfig+0x504>)
 8006506:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800650a:	4a4a      	ldr	r2, [pc, #296]	@ (8006634 <HAL_RCC_OscConfig+0x504>)
 800650c:	f043 0301 	orr.w	r3, r3, #1
 8006510:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006514:	f7fd ffa4 	bl	8004460 <HAL_GetTick>
 8006518:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800651a:	e008      	b.n	800652e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800651c:	f7fd ffa0 	bl	8004460 <HAL_GetTick>
 8006520:	4602      	mov	r2, r0
 8006522:	693b      	ldr	r3, [r7, #16]
 8006524:	1ad3      	subs	r3, r2, r3
 8006526:	2b02      	cmp	r3, #2
 8006528:	d901      	bls.n	800652e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800652a:	2303      	movs	r3, #3
 800652c:	e20c      	b.n	8006948 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800652e:	4b41      	ldr	r3, [pc, #260]	@ (8006634 <HAL_RCC_OscConfig+0x504>)
 8006530:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006534:	f003 0302 	and.w	r3, r3, #2
 8006538:	2b00      	cmp	r3, #0
 800653a:	d0ef      	beq.n	800651c <HAL_RCC_OscConfig+0x3ec>
 800653c:	e01b      	b.n	8006576 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800653e:	4b3d      	ldr	r3, [pc, #244]	@ (8006634 <HAL_RCC_OscConfig+0x504>)
 8006540:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006544:	4a3b      	ldr	r2, [pc, #236]	@ (8006634 <HAL_RCC_OscConfig+0x504>)
 8006546:	f023 0301 	bic.w	r3, r3, #1
 800654a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800654e:	f7fd ff87 	bl	8004460 <HAL_GetTick>
 8006552:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006554:	e008      	b.n	8006568 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006556:	f7fd ff83 	bl	8004460 <HAL_GetTick>
 800655a:	4602      	mov	r2, r0
 800655c:	693b      	ldr	r3, [r7, #16]
 800655e:	1ad3      	subs	r3, r2, r3
 8006560:	2b02      	cmp	r3, #2
 8006562:	d901      	bls.n	8006568 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8006564:	2303      	movs	r3, #3
 8006566:	e1ef      	b.n	8006948 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006568:	4b32      	ldr	r3, [pc, #200]	@ (8006634 <HAL_RCC_OscConfig+0x504>)
 800656a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800656e:	f003 0302 	and.w	r3, r3, #2
 8006572:	2b00      	cmp	r3, #0
 8006574:	d1ef      	bne.n	8006556 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f003 0304 	and.w	r3, r3, #4
 800657e:	2b00      	cmp	r3, #0
 8006580:	f000 80a6 	beq.w	80066d0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006584:	2300      	movs	r3, #0
 8006586:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8006588:	4b2a      	ldr	r3, [pc, #168]	@ (8006634 <HAL_RCC_OscConfig+0x504>)
 800658a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800658c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006590:	2b00      	cmp	r3, #0
 8006592:	d10d      	bne.n	80065b0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006594:	4b27      	ldr	r3, [pc, #156]	@ (8006634 <HAL_RCC_OscConfig+0x504>)
 8006596:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006598:	4a26      	ldr	r2, [pc, #152]	@ (8006634 <HAL_RCC_OscConfig+0x504>)
 800659a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800659e:	6593      	str	r3, [r2, #88]	@ 0x58
 80065a0:	4b24      	ldr	r3, [pc, #144]	@ (8006634 <HAL_RCC_OscConfig+0x504>)
 80065a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80065a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80065a8:	60bb      	str	r3, [r7, #8]
 80065aa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80065ac:	2301      	movs	r3, #1
 80065ae:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80065b0:	4b21      	ldr	r3, [pc, #132]	@ (8006638 <HAL_RCC_OscConfig+0x508>)
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d118      	bne.n	80065ee <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80065bc:	4b1e      	ldr	r3, [pc, #120]	@ (8006638 <HAL_RCC_OscConfig+0x508>)
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	4a1d      	ldr	r2, [pc, #116]	@ (8006638 <HAL_RCC_OscConfig+0x508>)
 80065c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80065c6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80065c8:	f7fd ff4a 	bl	8004460 <HAL_GetTick>
 80065cc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80065ce:	e008      	b.n	80065e2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80065d0:	f7fd ff46 	bl	8004460 <HAL_GetTick>
 80065d4:	4602      	mov	r2, r0
 80065d6:	693b      	ldr	r3, [r7, #16]
 80065d8:	1ad3      	subs	r3, r2, r3
 80065da:	2b02      	cmp	r3, #2
 80065dc:	d901      	bls.n	80065e2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80065de:	2303      	movs	r3, #3
 80065e0:	e1b2      	b.n	8006948 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80065e2:	4b15      	ldr	r3, [pc, #84]	@ (8006638 <HAL_RCC_OscConfig+0x508>)
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d0f0      	beq.n	80065d0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	689b      	ldr	r3, [r3, #8]
 80065f2:	2b01      	cmp	r3, #1
 80065f4:	d108      	bne.n	8006608 <HAL_RCC_OscConfig+0x4d8>
 80065f6:	4b0f      	ldr	r3, [pc, #60]	@ (8006634 <HAL_RCC_OscConfig+0x504>)
 80065f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80065fc:	4a0d      	ldr	r2, [pc, #52]	@ (8006634 <HAL_RCC_OscConfig+0x504>)
 80065fe:	f043 0301 	orr.w	r3, r3, #1
 8006602:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006606:	e029      	b.n	800665c <HAL_RCC_OscConfig+0x52c>
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	689b      	ldr	r3, [r3, #8]
 800660c:	2b05      	cmp	r3, #5
 800660e:	d115      	bne.n	800663c <HAL_RCC_OscConfig+0x50c>
 8006610:	4b08      	ldr	r3, [pc, #32]	@ (8006634 <HAL_RCC_OscConfig+0x504>)
 8006612:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006616:	4a07      	ldr	r2, [pc, #28]	@ (8006634 <HAL_RCC_OscConfig+0x504>)
 8006618:	f043 0304 	orr.w	r3, r3, #4
 800661c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006620:	4b04      	ldr	r3, [pc, #16]	@ (8006634 <HAL_RCC_OscConfig+0x504>)
 8006622:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006626:	4a03      	ldr	r2, [pc, #12]	@ (8006634 <HAL_RCC_OscConfig+0x504>)
 8006628:	f043 0301 	orr.w	r3, r3, #1
 800662c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006630:	e014      	b.n	800665c <HAL_RCC_OscConfig+0x52c>
 8006632:	bf00      	nop
 8006634:	40021000 	.word	0x40021000
 8006638:	40007000 	.word	0x40007000
 800663c:	4b9a      	ldr	r3, [pc, #616]	@ (80068a8 <HAL_RCC_OscConfig+0x778>)
 800663e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006642:	4a99      	ldr	r2, [pc, #612]	@ (80068a8 <HAL_RCC_OscConfig+0x778>)
 8006644:	f023 0301 	bic.w	r3, r3, #1
 8006648:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800664c:	4b96      	ldr	r3, [pc, #600]	@ (80068a8 <HAL_RCC_OscConfig+0x778>)
 800664e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006652:	4a95      	ldr	r2, [pc, #596]	@ (80068a8 <HAL_RCC_OscConfig+0x778>)
 8006654:	f023 0304 	bic.w	r3, r3, #4
 8006658:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	689b      	ldr	r3, [r3, #8]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d016      	beq.n	8006692 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006664:	f7fd fefc 	bl	8004460 <HAL_GetTick>
 8006668:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800666a:	e00a      	b.n	8006682 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800666c:	f7fd fef8 	bl	8004460 <HAL_GetTick>
 8006670:	4602      	mov	r2, r0
 8006672:	693b      	ldr	r3, [r7, #16]
 8006674:	1ad3      	subs	r3, r2, r3
 8006676:	f241 3288 	movw	r2, #5000	@ 0x1388
 800667a:	4293      	cmp	r3, r2
 800667c:	d901      	bls.n	8006682 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800667e:	2303      	movs	r3, #3
 8006680:	e162      	b.n	8006948 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006682:	4b89      	ldr	r3, [pc, #548]	@ (80068a8 <HAL_RCC_OscConfig+0x778>)
 8006684:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006688:	f003 0302 	and.w	r3, r3, #2
 800668c:	2b00      	cmp	r3, #0
 800668e:	d0ed      	beq.n	800666c <HAL_RCC_OscConfig+0x53c>
 8006690:	e015      	b.n	80066be <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006692:	f7fd fee5 	bl	8004460 <HAL_GetTick>
 8006696:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006698:	e00a      	b.n	80066b0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800669a:	f7fd fee1 	bl	8004460 <HAL_GetTick>
 800669e:	4602      	mov	r2, r0
 80066a0:	693b      	ldr	r3, [r7, #16]
 80066a2:	1ad3      	subs	r3, r2, r3
 80066a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d901      	bls.n	80066b0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80066ac:	2303      	movs	r3, #3
 80066ae:	e14b      	b.n	8006948 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80066b0:	4b7d      	ldr	r3, [pc, #500]	@ (80068a8 <HAL_RCC_OscConfig+0x778>)
 80066b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80066b6:	f003 0302 	and.w	r3, r3, #2
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d1ed      	bne.n	800669a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80066be:	7ffb      	ldrb	r3, [r7, #31]
 80066c0:	2b01      	cmp	r3, #1
 80066c2:	d105      	bne.n	80066d0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80066c4:	4b78      	ldr	r3, [pc, #480]	@ (80068a8 <HAL_RCC_OscConfig+0x778>)
 80066c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80066c8:	4a77      	ldr	r2, [pc, #476]	@ (80068a8 <HAL_RCC_OscConfig+0x778>)
 80066ca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80066ce:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f003 0320 	and.w	r3, r3, #32
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d03c      	beq.n	8006756 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d01c      	beq.n	800671e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80066e4:	4b70      	ldr	r3, [pc, #448]	@ (80068a8 <HAL_RCC_OscConfig+0x778>)
 80066e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80066ea:	4a6f      	ldr	r2, [pc, #444]	@ (80068a8 <HAL_RCC_OscConfig+0x778>)
 80066ec:	f043 0301 	orr.w	r3, r3, #1
 80066f0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066f4:	f7fd feb4 	bl	8004460 <HAL_GetTick>
 80066f8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80066fa:	e008      	b.n	800670e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80066fc:	f7fd feb0 	bl	8004460 <HAL_GetTick>
 8006700:	4602      	mov	r2, r0
 8006702:	693b      	ldr	r3, [r7, #16]
 8006704:	1ad3      	subs	r3, r2, r3
 8006706:	2b02      	cmp	r3, #2
 8006708:	d901      	bls.n	800670e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800670a:	2303      	movs	r3, #3
 800670c:	e11c      	b.n	8006948 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800670e:	4b66      	ldr	r3, [pc, #408]	@ (80068a8 <HAL_RCC_OscConfig+0x778>)
 8006710:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006714:	f003 0302 	and.w	r3, r3, #2
 8006718:	2b00      	cmp	r3, #0
 800671a:	d0ef      	beq.n	80066fc <HAL_RCC_OscConfig+0x5cc>
 800671c:	e01b      	b.n	8006756 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800671e:	4b62      	ldr	r3, [pc, #392]	@ (80068a8 <HAL_RCC_OscConfig+0x778>)
 8006720:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006724:	4a60      	ldr	r2, [pc, #384]	@ (80068a8 <HAL_RCC_OscConfig+0x778>)
 8006726:	f023 0301 	bic.w	r3, r3, #1
 800672a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800672e:	f7fd fe97 	bl	8004460 <HAL_GetTick>
 8006732:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006734:	e008      	b.n	8006748 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006736:	f7fd fe93 	bl	8004460 <HAL_GetTick>
 800673a:	4602      	mov	r2, r0
 800673c:	693b      	ldr	r3, [r7, #16]
 800673e:	1ad3      	subs	r3, r2, r3
 8006740:	2b02      	cmp	r3, #2
 8006742:	d901      	bls.n	8006748 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8006744:	2303      	movs	r3, #3
 8006746:	e0ff      	b.n	8006948 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006748:	4b57      	ldr	r3, [pc, #348]	@ (80068a8 <HAL_RCC_OscConfig+0x778>)
 800674a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800674e:	f003 0302 	and.w	r3, r3, #2
 8006752:	2b00      	cmp	r3, #0
 8006754:	d1ef      	bne.n	8006736 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800675a:	2b00      	cmp	r3, #0
 800675c:	f000 80f3 	beq.w	8006946 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006764:	2b02      	cmp	r3, #2
 8006766:	f040 80c9 	bne.w	80068fc <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800676a:	4b4f      	ldr	r3, [pc, #316]	@ (80068a8 <HAL_RCC_OscConfig+0x778>)
 800676c:	68db      	ldr	r3, [r3, #12]
 800676e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006770:	697b      	ldr	r3, [r7, #20]
 8006772:	f003 0203 	and.w	r2, r3, #3
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800677a:	429a      	cmp	r2, r3
 800677c:	d12c      	bne.n	80067d8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800677e:	697b      	ldr	r3, [r7, #20]
 8006780:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006788:	3b01      	subs	r3, #1
 800678a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800678c:	429a      	cmp	r2, r3
 800678e:	d123      	bne.n	80067d8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006790:	697b      	ldr	r3, [r7, #20]
 8006792:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800679a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800679c:	429a      	cmp	r2, r3
 800679e:	d11b      	bne.n	80067d8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80067a0:	697b      	ldr	r3, [r7, #20]
 80067a2:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067aa:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80067ac:	429a      	cmp	r2, r3
 80067ae:	d113      	bne.n	80067d8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80067b0:	697b      	ldr	r3, [r7, #20]
 80067b2:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067ba:	085b      	lsrs	r3, r3, #1
 80067bc:	3b01      	subs	r3, #1
 80067be:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80067c0:	429a      	cmp	r2, r3
 80067c2:	d109      	bne.n	80067d8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80067c4:	697b      	ldr	r3, [r7, #20]
 80067c6:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067ce:	085b      	lsrs	r3, r3, #1
 80067d0:	3b01      	subs	r3, #1
 80067d2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80067d4:	429a      	cmp	r2, r3
 80067d6:	d06b      	beq.n	80068b0 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80067d8:	69bb      	ldr	r3, [r7, #24]
 80067da:	2b0c      	cmp	r3, #12
 80067dc:	d062      	beq.n	80068a4 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80067de:	4b32      	ldr	r3, [pc, #200]	@ (80068a8 <HAL_RCC_OscConfig+0x778>)
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d001      	beq.n	80067ee <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80067ea:	2301      	movs	r3, #1
 80067ec:	e0ac      	b.n	8006948 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80067ee:	4b2e      	ldr	r3, [pc, #184]	@ (80068a8 <HAL_RCC_OscConfig+0x778>)
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	4a2d      	ldr	r2, [pc, #180]	@ (80068a8 <HAL_RCC_OscConfig+0x778>)
 80067f4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80067f8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80067fa:	f7fd fe31 	bl	8004460 <HAL_GetTick>
 80067fe:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006800:	e008      	b.n	8006814 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006802:	f7fd fe2d 	bl	8004460 <HAL_GetTick>
 8006806:	4602      	mov	r2, r0
 8006808:	693b      	ldr	r3, [r7, #16]
 800680a:	1ad3      	subs	r3, r2, r3
 800680c:	2b02      	cmp	r3, #2
 800680e:	d901      	bls.n	8006814 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8006810:	2303      	movs	r3, #3
 8006812:	e099      	b.n	8006948 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006814:	4b24      	ldr	r3, [pc, #144]	@ (80068a8 <HAL_RCC_OscConfig+0x778>)
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800681c:	2b00      	cmp	r3, #0
 800681e:	d1f0      	bne.n	8006802 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006820:	4b21      	ldr	r3, [pc, #132]	@ (80068a8 <HAL_RCC_OscConfig+0x778>)
 8006822:	68da      	ldr	r2, [r3, #12]
 8006824:	4b21      	ldr	r3, [pc, #132]	@ (80068ac <HAL_RCC_OscConfig+0x77c>)
 8006826:	4013      	ands	r3, r2
 8006828:	687a      	ldr	r2, [r7, #4]
 800682a:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800682c:	687a      	ldr	r2, [r7, #4]
 800682e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006830:	3a01      	subs	r2, #1
 8006832:	0112      	lsls	r2, r2, #4
 8006834:	4311      	orrs	r1, r2
 8006836:	687a      	ldr	r2, [r7, #4]
 8006838:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800683a:	0212      	lsls	r2, r2, #8
 800683c:	4311      	orrs	r1, r2
 800683e:	687a      	ldr	r2, [r7, #4]
 8006840:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006842:	0852      	lsrs	r2, r2, #1
 8006844:	3a01      	subs	r2, #1
 8006846:	0552      	lsls	r2, r2, #21
 8006848:	4311      	orrs	r1, r2
 800684a:	687a      	ldr	r2, [r7, #4]
 800684c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800684e:	0852      	lsrs	r2, r2, #1
 8006850:	3a01      	subs	r2, #1
 8006852:	0652      	lsls	r2, r2, #25
 8006854:	4311      	orrs	r1, r2
 8006856:	687a      	ldr	r2, [r7, #4]
 8006858:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800685a:	06d2      	lsls	r2, r2, #27
 800685c:	430a      	orrs	r2, r1
 800685e:	4912      	ldr	r1, [pc, #72]	@ (80068a8 <HAL_RCC_OscConfig+0x778>)
 8006860:	4313      	orrs	r3, r2
 8006862:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006864:	4b10      	ldr	r3, [pc, #64]	@ (80068a8 <HAL_RCC_OscConfig+0x778>)
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	4a0f      	ldr	r2, [pc, #60]	@ (80068a8 <HAL_RCC_OscConfig+0x778>)
 800686a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800686e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006870:	4b0d      	ldr	r3, [pc, #52]	@ (80068a8 <HAL_RCC_OscConfig+0x778>)
 8006872:	68db      	ldr	r3, [r3, #12]
 8006874:	4a0c      	ldr	r2, [pc, #48]	@ (80068a8 <HAL_RCC_OscConfig+0x778>)
 8006876:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800687a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800687c:	f7fd fdf0 	bl	8004460 <HAL_GetTick>
 8006880:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006882:	e008      	b.n	8006896 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006884:	f7fd fdec 	bl	8004460 <HAL_GetTick>
 8006888:	4602      	mov	r2, r0
 800688a:	693b      	ldr	r3, [r7, #16]
 800688c:	1ad3      	subs	r3, r2, r3
 800688e:	2b02      	cmp	r3, #2
 8006890:	d901      	bls.n	8006896 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8006892:	2303      	movs	r3, #3
 8006894:	e058      	b.n	8006948 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006896:	4b04      	ldr	r3, [pc, #16]	@ (80068a8 <HAL_RCC_OscConfig+0x778>)
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d0f0      	beq.n	8006884 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80068a2:	e050      	b.n	8006946 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80068a4:	2301      	movs	r3, #1
 80068a6:	e04f      	b.n	8006948 <HAL_RCC_OscConfig+0x818>
 80068a8:	40021000 	.word	0x40021000
 80068ac:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80068b0:	4b27      	ldr	r3, [pc, #156]	@ (8006950 <HAL_RCC_OscConfig+0x820>)
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d144      	bne.n	8006946 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80068bc:	4b24      	ldr	r3, [pc, #144]	@ (8006950 <HAL_RCC_OscConfig+0x820>)
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	4a23      	ldr	r2, [pc, #140]	@ (8006950 <HAL_RCC_OscConfig+0x820>)
 80068c2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80068c6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80068c8:	4b21      	ldr	r3, [pc, #132]	@ (8006950 <HAL_RCC_OscConfig+0x820>)
 80068ca:	68db      	ldr	r3, [r3, #12]
 80068cc:	4a20      	ldr	r2, [pc, #128]	@ (8006950 <HAL_RCC_OscConfig+0x820>)
 80068ce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80068d2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80068d4:	f7fd fdc4 	bl	8004460 <HAL_GetTick>
 80068d8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80068da:	e008      	b.n	80068ee <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80068dc:	f7fd fdc0 	bl	8004460 <HAL_GetTick>
 80068e0:	4602      	mov	r2, r0
 80068e2:	693b      	ldr	r3, [r7, #16]
 80068e4:	1ad3      	subs	r3, r2, r3
 80068e6:	2b02      	cmp	r3, #2
 80068e8:	d901      	bls.n	80068ee <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80068ea:	2303      	movs	r3, #3
 80068ec:	e02c      	b.n	8006948 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80068ee:	4b18      	ldr	r3, [pc, #96]	@ (8006950 <HAL_RCC_OscConfig+0x820>)
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d0f0      	beq.n	80068dc <HAL_RCC_OscConfig+0x7ac>
 80068fa:	e024      	b.n	8006946 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80068fc:	69bb      	ldr	r3, [r7, #24]
 80068fe:	2b0c      	cmp	r3, #12
 8006900:	d01f      	beq.n	8006942 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006902:	4b13      	ldr	r3, [pc, #76]	@ (8006950 <HAL_RCC_OscConfig+0x820>)
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	4a12      	ldr	r2, [pc, #72]	@ (8006950 <HAL_RCC_OscConfig+0x820>)
 8006908:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800690c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800690e:	f7fd fda7 	bl	8004460 <HAL_GetTick>
 8006912:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006914:	e008      	b.n	8006928 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006916:	f7fd fda3 	bl	8004460 <HAL_GetTick>
 800691a:	4602      	mov	r2, r0
 800691c:	693b      	ldr	r3, [r7, #16]
 800691e:	1ad3      	subs	r3, r2, r3
 8006920:	2b02      	cmp	r3, #2
 8006922:	d901      	bls.n	8006928 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8006924:	2303      	movs	r3, #3
 8006926:	e00f      	b.n	8006948 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006928:	4b09      	ldr	r3, [pc, #36]	@ (8006950 <HAL_RCC_OscConfig+0x820>)
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006930:	2b00      	cmp	r3, #0
 8006932:	d1f0      	bne.n	8006916 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8006934:	4b06      	ldr	r3, [pc, #24]	@ (8006950 <HAL_RCC_OscConfig+0x820>)
 8006936:	68da      	ldr	r2, [r3, #12]
 8006938:	4905      	ldr	r1, [pc, #20]	@ (8006950 <HAL_RCC_OscConfig+0x820>)
 800693a:	4b06      	ldr	r3, [pc, #24]	@ (8006954 <HAL_RCC_OscConfig+0x824>)
 800693c:	4013      	ands	r3, r2
 800693e:	60cb      	str	r3, [r1, #12]
 8006940:	e001      	b.n	8006946 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006942:	2301      	movs	r3, #1
 8006944:	e000      	b.n	8006948 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8006946:	2300      	movs	r3, #0
}
 8006948:	4618      	mov	r0, r3
 800694a:	3720      	adds	r7, #32
 800694c:	46bd      	mov	sp, r7
 800694e:	bd80      	pop	{r7, pc}
 8006950:	40021000 	.word	0x40021000
 8006954:	feeefffc 	.word	0xfeeefffc

08006958 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b084      	sub	sp, #16
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
 8006960:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d101      	bne.n	800696c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006968:	2301      	movs	r3, #1
 800696a:	e0e7      	b.n	8006b3c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800696c:	4b75      	ldr	r3, [pc, #468]	@ (8006b44 <HAL_RCC_ClockConfig+0x1ec>)
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f003 0307 	and.w	r3, r3, #7
 8006974:	683a      	ldr	r2, [r7, #0]
 8006976:	429a      	cmp	r2, r3
 8006978:	d910      	bls.n	800699c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800697a:	4b72      	ldr	r3, [pc, #456]	@ (8006b44 <HAL_RCC_ClockConfig+0x1ec>)
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f023 0207 	bic.w	r2, r3, #7
 8006982:	4970      	ldr	r1, [pc, #448]	@ (8006b44 <HAL_RCC_ClockConfig+0x1ec>)
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	4313      	orrs	r3, r2
 8006988:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800698a:	4b6e      	ldr	r3, [pc, #440]	@ (8006b44 <HAL_RCC_ClockConfig+0x1ec>)
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f003 0307 	and.w	r3, r3, #7
 8006992:	683a      	ldr	r2, [r7, #0]
 8006994:	429a      	cmp	r2, r3
 8006996:	d001      	beq.n	800699c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006998:	2301      	movs	r3, #1
 800699a:	e0cf      	b.n	8006b3c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f003 0302 	and.w	r3, r3, #2
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d010      	beq.n	80069ca <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	689a      	ldr	r2, [r3, #8]
 80069ac:	4b66      	ldr	r3, [pc, #408]	@ (8006b48 <HAL_RCC_ClockConfig+0x1f0>)
 80069ae:	689b      	ldr	r3, [r3, #8]
 80069b0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80069b4:	429a      	cmp	r2, r3
 80069b6:	d908      	bls.n	80069ca <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80069b8:	4b63      	ldr	r3, [pc, #396]	@ (8006b48 <HAL_RCC_ClockConfig+0x1f0>)
 80069ba:	689b      	ldr	r3, [r3, #8]
 80069bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	689b      	ldr	r3, [r3, #8]
 80069c4:	4960      	ldr	r1, [pc, #384]	@ (8006b48 <HAL_RCC_ClockConfig+0x1f0>)
 80069c6:	4313      	orrs	r3, r2
 80069c8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f003 0301 	and.w	r3, r3, #1
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d04c      	beq.n	8006a70 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	685b      	ldr	r3, [r3, #4]
 80069da:	2b03      	cmp	r3, #3
 80069dc:	d107      	bne.n	80069ee <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80069de:	4b5a      	ldr	r3, [pc, #360]	@ (8006b48 <HAL_RCC_ClockConfig+0x1f0>)
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d121      	bne.n	8006a2e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80069ea:	2301      	movs	r3, #1
 80069ec:	e0a6      	b.n	8006b3c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	685b      	ldr	r3, [r3, #4]
 80069f2:	2b02      	cmp	r3, #2
 80069f4:	d107      	bne.n	8006a06 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80069f6:	4b54      	ldr	r3, [pc, #336]	@ (8006b48 <HAL_RCC_ClockConfig+0x1f0>)
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d115      	bne.n	8006a2e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006a02:	2301      	movs	r3, #1
 8006a04:	e09a      	b.n	8006b3c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	685b      	ldr	r3, [r3, #4]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d107      	bne.n	8006a1e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006a0e:	4b4e      	ldr	r3, [pc, #312]	@ (8006b48 <HAL_RCC_ClockConfig+0x1f0>)
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f003 0302 	and.w	r3, r3, #2
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d109      	bne.n	8006a2e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006a1a:	2301      	movs	r3, #1
 8006a1c:	e08e      	b.n	8006b3c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006a1e:	4b4a      	ldr	r3, [pc, #296]	@ (8006b48 <HAL_RCC_ClockConfig+0x1f0>)
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d101      	bne.n	8006a2e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006a2a:	2301      	movs	r3, #1
 8006a2c:	e086      	b.n	8006b3c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006a2e:	4b46      	ldr	r3, [pc, #280]	@ (8006b48 <HAL_RCC_ClockConfig+0x1f0>)
 8006a30:	689b      	ldr	r3, [r3, #8]
 8006a32:	f023 0203 	bic.w	r2, r3, #3
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	685b      	ldr	r3, [r3, #4]
 8006a3a:	4943      	ldr	r1, [pc, #268]	@ (8006b48 <HAL_RCC_ClockConfig+0x1f0>)
 8006a3c:	4313      	orrs	r3, r2
 8006a3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a40:	f7fd fd0e 	bl	8004460 <HAL_GetTick>
 8006a44:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a46:	e00a      	b.n	8006a5e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006a48:	f7fd fd0a 	bl	8004460 <HAL_GetTick>
 8006a4c:	4602      	mov	r2, r0
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	1ad3      	subs	r3, r2, r3
 8006a52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006a56:	4293      	cmp	r3, r2
 8006a58:	d901      	bls.n	8006a5e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8006a5a:	2303      	movs	r3, #3
 8006a5c:	e06e      	b.n	8006b3c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a5e:	4b3a      	ldr	r3, [pc, #232]	@ (8006b48 <HAL_RCC_ClockConfig+0x1f0>)
 8006a60:	689b      	ldr	r3, [r3, #8]
 8006a62:	f003 020c 	and.w	r2, r3, #12
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	685b      	ldr	r3, [r3, #4]
 8006a6a:	009b      	lsls	r3, r3, #2
 8006a6c:	429a      	cmp	r2, r3
 8006a6e:	d1eb      	bne.n	8006a48 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f003 0302 	and.w	r3, r3, #2
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d010      	beq.n	8006a9e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	689a      	ldr	r2, [r3, #8]
 8006a80:	4b31      	ldr	r3, [pc, #196]	@ (8006b48 <HAL_RCC_ClockConfig+0x1f0>)
 8006a82:	689b      	ldr	r3, [r3, #8]
 8006a84:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006a88:	429a      	cmp	r2, r3
 8006a8a:	d208      	bcs.n	8006a9e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006a8c:	4b2e      	ldr	r3, [pc, #184]	@ (8006b48 <HAL_RCC_ClockConfig+0x1f0>)
 8006a8e:	689b      	ldr	r3, [r3, #8]
 8006a90:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	689b      	ldr	r3, [r3, #8]
 8006a98:	492b      	ldr	r1, [pc, #172]	@ (8006b48 <HAL_RCC_ClockConfig+0x1f0>)
 8006a9a:	4313      	orrs	r3, r2
 8006a9c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006a9e:	4b29      	ldr	r3, [pc, #164]	@ (8006b44 <HAL_RCC_ClockConfig+0x1ec>)
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f003 0307 	and.w	r3, r3, #7
 8006aa6:	683a      	ldr	r2, [r7, #0]
 8006aa8:	429a      	cmp	r2, r3
 8006aaa:	d210      	bcs.n	8006ace <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006aac:	4b25      	ldr	r3, [pc, #148]	@ (8006b44 <HAL_RCC_ClockConfig+0x1ec>)
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f023 0207 	bic.w	r2, r3, #7
 8006ab4:	4923      	ldr	r1, [pc, #140]	@ (8006b44 <HAL_RCC_ClockConfig+0x1ec>)
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	4313      	orrs	r3, r2
 8006aba:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006abc:	4b21      	ldr	r3, [pc, #132]	@ (8006b44 <HAL_RCC_ClockConfig+0x1ec>)
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f003 0307 	and.w	r3, r3, #7
 8006ac4:	683a      	ldr	r2, [r7, #0]
 8006ac6:	429a      	cmp	r2, r3
 8006ac8:	d001      	beq.n	8006ace <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8006aca:	2301      	movs	r3, #1
 8006acc:	e036      	b.n	8006b3c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f003 0304 	and.w	r3, r3, #4
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d008      	beq.n	8006aec <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006ada:	4b1b      	ldr	r3, [pc, #108]	@ (8006b48 <HAL_RCC_ClockConfig+0x1f0>)
 8006adc:	689b      	ldr	r3, [r3, #8]
 8006ade:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	68db      	ldr	r3, [r3, #12]
 8006ae6:	4918      	ldr	r1, [pc, #96]	@ (8006b48 <HAL_RCC_ClockConfig+0x1f0>)
 8006ae8:	4313      	orrs	r3, r2
 8006aea:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f003 0308 	and.w	r3, r3, #8
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d009      	beq.n	8006b0c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006af8:	4b13      	ldr	r3, [pc, #76]	@ (8006b48 <HAL_RCC_ClockConfig+0x1f0>)
 8006afa:	689b      	ldr	r3, [r3, #8]
 8006afc:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	691b      	ldr	r3, [r3, #16]
 8006b04:	00db      	lsls	r3, r3, #3
 8006b06:	4910      	ldr	r1, [pc, #64]	@ (8006b48 <HAL_RCC_ClockConfig+0x1f0>)
 8006b08:	4313      	orrs	r3, r2
 8006b0a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006b0c:	f000 f824 	bl	8006b58 <HAL_RCC_GetSysClockFreq>
 8006b10:	4602      	mov	r2, r0
 8006b12:	4b0d      	ldr	r3, [pc, #52]	@ (8006b48 <HAL_RCC_ClockConfig+0x1f0>)
 8006b14:	689b      	ldr	r3, [r3, #8]
 8006b16:	091b      	lsrs	r3, r3, #4
 8006b18:	f003 030f 	and.w	r3, r3, #15
 8006b1c:	490b      	ldr	r1, [pc, #44]	@ (8006b4c <HAL_RCC_ClockConfig+0x1f4>)
 8006b1e:	5ccb      	ldrb	r3, [r1, r3]
 8006b20:	f003 031f 	and.w	r3, r3, #31
 8006b24:	fa22 f303 	lsr.w	r3, r2, r3
 8006b28:	4a09      	ldr	r2, [pc, #36]	@ (8006b50 <HAL_RCC_ClockConfig+0x1f8>)
 8006b2a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006b2c:	4b09      	ldr	r3, [pc, #36]	@ (8006b54 <HAL_RCC_ClockConfig+0x1fc>)
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	4618      	mov	r0, r3
 8006b32:	f7fd fc45 	bl	80043c0 <HAL_InitTick>
 8006b36:	4603      	mov	r3, r0
 8006b38:	72fb      	strb	r3, [r7, #11]

  return status;
 8006b3a:	7afb      	ldrb	r3, [r7, #11]
}
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	3710      	adds	r7, #16
 8006b40:	46bd      	mov	sp, r7
 8006b42:	bd80      	pop	{r7, pc}
 8006b44:	40022000 	.word	0x40022000
 8006b48:	40021000 	.word	0x40021000
 8006b4c:	0800a5d0 	.word	0x0800a5d0
 8006b50:	2000000c 	.word	0x2000000c
 8006b54:	20000010 	.word	0x20000010

08006b58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006b58:	b480      	push	{r7}
 8006b5a:	b089      	sub	sp, #36	@ 0x24
 8006b5c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8006b5e:	2300      	movs	r3, #0
 8006b60:	61fb      	str	r3, [r7, #28]
 8006b62:	2300      	movs	r3, #0
 8006b64:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006b66:	4b3e      	ldr	r3, [pc, #248]	@ (8006c60 <HAL_RCC_GetSysClockFreq+0x108>)
 8006b68:	689b      	ldr	r3, [r3, #8]
 8006b6a:	f003 030c 	and.w	r3, r3, #12
 8006b6e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006b70:	4b3b      	ldr	r3, [pc, #236]	@ (8006c60 <HAL_RCC_GetSysClockFreq+0x108>)
 8006b72:	68db      	ldr	r3, [r3, #12]
 8006b74:	f003 0303 	and.w	r3, r3, #3
 8006b78:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006b7a:	693b      	ldr	r3, [r7, #16]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d005      	beq.n	8006b8c <HAL_RCC_GetSysClockFreq+0x34>
 8006b80:	693b      	ldr	r3, [r7, #16]
 8006b82:	2b0c      	cmp	r3, #12
 8006b84:	d121      	bne.n	8006bca <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	2b01      	cmp	r3, #1
 8006b8a:	d11e      	bne.n	8006bca <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006b8c:	4b34      	ldr	r3, [pc, #208]	@ (8006c60 <HAL_RCC_GetSysClockFreq+0x108>)
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f003 0308 	and.w	r3, r3, #8
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d107      	bne.n	8006ba8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006b98:	4b31      	ldr	r3, [pc, #196]	@ (8006c60 <HAL_RCC_GetSysClockFreq+0x108>)
 8006b9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006b9e:	0a1b      	lsrs	r3, r3, #8
 8006ba0:	f003 030f 	and.w	r3, r3, #15
 8006ba4:	61fb      	str	r3, [r7, #28]
 8006ba6:	e005      	b.n	8006bb4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006ba8:	4b2d      	ldr	r3, [pc, #180]	@ (8006c60 <HAL_RCC_GetSysClockFreq+0x108>)
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	091b      	lsrs	r3, r3, #4
 8006bae:	f003 030f 	and.w	r3, r3, #15
 8006bb2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006bb4:	4a2b      	ldr	r2, [pc, #172]	@ (8006c64 <HAL_RCC_GetSysClockFreq+0x10c>)
 8006bb6:	69fb      	ldr	r3, [r7, #28]
 8006bb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006bbc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006bbe:	693b      	ldr	r3, [r7, #16]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d10d      	bne.n	8006be0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006bc4:	69fb      	ldr	r3, [r7, #28]
 8006bc6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006bc8:	e00a      	b.n	8006be0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8006bca:	693b      	ldr	r3, [r7, #16]
 8006bcc:	2b04      	cmp	r3, #4
 8006bce:	d102      	bne.n	8006bd6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006bd0:	4b25      	ldr	r3, [pc, #148]	@ (8006c68 <HAL_RCC_GetSysClockFreq+0x110>)
 8006bd2:	61bb      	str	r3, [r7, #24]
 8006bd4:	e004      	b.n	8006be0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8006bd6:	693b      	ldr	r3, [r7, #16]
 8006bd8:	2b08      	cmp	r3, #8
 8006bda:	d101      	bne.n	8006be0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006bdc:	4b23      	ldr	r3, [pc, #140]	@ (8006c6c <HAL_RCC_GetSysClockFreq+0x114>)
 8006bde:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006be0:	693b      	ldr	r3, [r7, #16]
 8006be2:	2b0c      	cmp	r3, #12
 8006be4:	d134      	bne.n	8006c50 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006be6:	4b1e      	ldr	r3, [pc, #120]	@ (8006c60 <HAL_RCC_GetSysClockFreq+0x108>)
 8006be8:	68db      	ldr	r3, [r3, #12]
 8006bea:	f003 0303 	and.w	r3, r3, #3
 8006bee:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006bf0:	68bb      	ldr	r3, [r7, #8]
 8006bf2:	2b02      	cmp	r3, #2
 8006bf4:	d003      	beq.n	8006bfe <HAL_RCC_GetSysClockFreq+0xa6>
 8006bf6:	68bb      	ldr	r3, [r7, #8]
 8006bf8:	2b03      	cmp	r3, #3
 8006bfa:	d003      	beq.n	8006c04 <HAL_RCC_GetSysClockFreq+0xac>
 8006bfc:	e005      	b.n	8006c0a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8006bfe:	4b1a      	ldr	r3, [pc, #104]	@ (8006c68 <HAL_RCC_GetSysClockFreq+0x110>)
 8006c00:	617b      	str	r3, [r7, #20]
      break;
 8006c02:	e005      	b.n	8006c10 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006c04:	4b19      	ldr	r3, [pc, #100]	@ (8006c6c <HAL_RCC_GetSysClockFreq+0x114>)
 8006c06:	617b      	str	r3, [r7, #20]
      break;
 8006c08:	e002      	b.n	8006c10 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8006c0a:	69fb      	ldr	r3, [r7, #28]
 8006c0c:	617b      	str	r3, [r7, #20]
      break;
 8006c0e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006c10:	4b13      	ldr	r3, [pc, #76]	@ (8006c60 <HAL_RCC_GetSysClockFreq+0x108>)
 8006c12:	68db      	ldr	r3, [r3, #12]
 8006c14:	091b      	lsrs	r3, r3, #4
 8006c16:	f003 0307 	and.w	r3, r3, #7
 8006c1a:	3301      	adds	r3, #1
 8006c1c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006c1e:	4b10      	ldr	r3, [pc, #64]	@ (8006c60 <HAL_RCC_GetSysClockFreq+0x108>)
 8006c20:	68db      	ldr	r3, [r3, #12]
 8006c22:	0a1b      	lsrs	r3, r3, #8
 8006c24:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006c28:	697a      	ldr	r2, [r7, #20]
 8006c2a:	fb03 f202 	mul.w	r2, r3, r2
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c34:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006c36:	4b0a      	ldr	r3, [pc, #40]	@ (8006c60 <HAL_RCC_GetSysClockFreq+0x108>)
 8006c38:	68db      	ldr	r3, [r3, #12]
 8006c3a:	0e5b      	lsrs	r3, r3, #25
 8006c3c:	f003 0303 	and.w	r3, r3, #3
 8006c40:	3301      	adds	r3, #1
 8006c42:	005b      	lsls	r3, r3, #1
 8006c44:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8006c46:	697a      	ldr	r2, [r7, #20]
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c4e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006c50:	69bb      	ldr	r3, [r7, #24]
}
 8006c52:	4618      	mov	r0, r3
 8006c54:	3724      	adds	r7, #36	@ 0x24
 8006c56:	46bd      	mov	sp, r7
 8006c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5c:	4770      	bx	lr
 8006c5e:	bf00      	nop
 8006c60:	40021000 	.word	0x40021000
 8006c64:	0800a5e0 	.word	0x0800a5e0
 8006c68:	00f42400 	.word	0x00f42400
 8006c6c:	007a1200 	.word	0x007a1200

08006c70 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b086      	sub	sp, #24
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006c78:	2300      	movs	r3, #0
 8006c7a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006c7c:	4b2a      	ldr	r3, [pc, #168]	@ (8006d28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006c7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c80:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d003      	beq.n	8006c90 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006c88:	f7ff f9ee 	bl	8006068 <HAL_PWREx_GetVoltageRange>
 8006c8c:	6178      	str	r0, [r7, #20]
 8006c8e:	e014      	b.n	8006cba <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006c90:	4b25      	ldr	r3, [pc, #148]	@ (8006d28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006c92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c94:	4a24      	ldr	r2, [pc, #144]	@ (8006d28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006c96:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006c9a:	6593      	str	r3, [r2, #88]	@ 0x58
 8006c9c:	4b22      	ldr	r3, [pc, #136]	@ (8006d28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006c9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ca0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006ca4:	60fb      	str	r3, [r7, #12]
 8006ca6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006ca8:	f7ff f9de 	bl	8006068 <HAL_PWREx_GetVoltageRange>
 8006cac:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006cae:	4b1e      	ldr	r3, [pc, #120]	@ (8006d28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006cb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006cb2:	4a1d      	ldr	r2, [pc, #116]	@ (8006d28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006cb4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006cb8:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006cba:	697b      	ldr	r3, [r7, #20]
 8006cbc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006cc0:	d10b      	bne.n	8006cda <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2b80      	cmp	r3, #128	@ 0x80
 8006cc6:	d919      	bls.n	8006cfc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2ba0      	cmp	r3, #160	@ 0xa0
 8006ccc:	d902      	bls.n	8006cd4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006cce:	2302      	movs	r3, #2
 8006cd0:	613b      	str	r3, [r7, #16]
 8006cd2:	e013      	b.n	8006cfc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006cd4:	2301      	movs	r3, #1
 8006cd6:	613b      	str	r3, [r7, #16]
 8006cd8:	e010      	b.n	8006cfc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2b80      	cmp	r3, #128	@ 0x80
 8006cde:	d902      	bls.n	8006ce6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8006ce0:	2303      	movs	r3, #3
 8006ce2:	613b      	str	r3, [r7, #16]
 8006ce4:	e00a      	b.n	8006cfc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	2b80      	cmp	r3, #128	@ 0x80
 8006cea:	d102      	bne.n	8006cf2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006cec:	2302      	movs	r3, #2
 8006cee:	613b      	str	r3, [r7, #16]
 8006cf0:	e004      	b.n	8006cfc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2b70      	cmp	r3, #112	@ 0x70
 8006cf6:	d101      	bne.n	8006cfc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006cf8:	2301      	movs	r3, #1
 8006cfa:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006cfc:	4b0b      	ldr	r3, [pc, #44]	@ (8006d2c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f023 0207 	bic.w	r2, r3, #7
 8006d04:	4909      	ldr	r1, [pc, #36]	@ (8006d2c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006d06:	693b      	ldr	r3, [r7, #16]
 8006d08:	4313      	orrs	r3, r2
 8006d0a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006d0c:	4b07      	ldr	r3, [pc, #28]	@ (8006d2c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f003 0307 	and.w	r3, r3, #7
 8006d14:	693a      	ldr	r2, [r7, #16]
 8006d16:	429a      	cmp	r2, r3
 8006d18:	d001      	beq.n	8006d1e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8006d1a:	2301      	movs	r3, #1
 8006d1c:	e000      	b.n	8006d20 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8006d1e:	2300      	movs	r3, #0
}
 8006d20:	4618      	mov	r0, r3
 8006d22:	3718      	adds	r7, #24
 8006d24:	46bd      	mov	sp, r7
 8006d26:	bd80      	pop	{r7, pc}
 8006d28:	40021000 	.word	0x40021000
 8006d2c:	40022000 	.word	0x40022000

08006d30 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b086      	sub	sp, #24
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006d38:	2300      	movs	r3, #0
 8006d3a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d031      	beq.n	8006db0 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d50:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8006d54:	d01a      	beq.n	8006d8c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8006d56:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8006d5a:	d814      	bhi.n	8006d86 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d009      	beq.n	8006d74 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006d60:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006d64:	d10f      	bne.n	8006d86 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8006d66:	4b5d      	ldr	r3, [pc, #372]	@ (8006edc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006d68:	68db      	ldr	r3, [r3, #12]
 8006d6a:	4a5c      	ldr	r2, [pc, #368]	@ (8006edc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006d6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006d70:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006d72:	e00c      	b.n	8006d8e <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	3304      	adds	r3, #4
 8006d78:	2100      	movs	r1, #0
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	f000 f9de 	bl	800713c <RCCEx_PLLSAI1_Config>
 8006d80:	4603      	mov	r3, r0
 8006d82:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006d84:	e003      	b.n	8006d8e <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006d86:	2301      	movs	r3, #1
 8006d88:	74fb      	strb	r3, [r7, #19]
      break;
 8006d8a:	e000      	b.n	8006d8e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8006d8c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006d8e:	7cfb      	ldrb	r3, [r7, #19]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d10b      	bne.n	8006dac <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006d94:	4b51      	ldr	r3, [pc, #324]	@ (8006edc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006d96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d9a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006da2:	494e      	ldr	r1, [pc, #312]	@ (8006edc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006da4:	4313      	orrs	r3, r2
 8006da6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8006daa:	e001      	b.n	8006db0 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006dac:	7cfb      	ldrb	r3, [r7, #19]
 8006dae:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	f000 809e 	beq.w	8006efa <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006dc2:	4b46      	ldr	r3, [pc, #280]	@ (8006edc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006dc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006dc6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d101      	bne.n	8006dd2 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8006dce:	2301      	movs	r3, #1
 8006dd0:	e000      	b.n	8006dd4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d00d      	beq.n	8006df4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006dd8:	4b40      	ldr	r3, [pc, #256]	@ (8006edc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006dda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ddc:	4a3f      	ldr	r2, [pc, #252]	@ (8006edc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006dde:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006de2:	6593      	str	r3, [r2, #88]	@ 0x58
 8006de4:	4b3d      	ldr	r3, [pc, #244]	@ (8006edc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006de6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006de8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006dec:	60bb      	str	r3, [r7, #8]
 8006dee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006df0:	2301      	movs	r3, #1
 8006df2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006df4:	4b3a      	ldr	r3, [pc, #232]	@ (8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	4a39      	ldr	r2, [pc, #228]	@ (8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8006dfa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006dfe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006e00:	f7fd fb2e 	bl	8004460 <HAL_GetTick>
 8006e04:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006e06:	e009      	b.n	8006e1c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006e08:	f7fd fb2a 	bl	8004460 <HAL_GetTick>
 8006e0c:	4602      	mov	r2, r0
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	1ad3      	subs	r3, r2, r3
 8006e12:	2b02      	cmp	r3, #2
 8006e14:	d902      	bls.n	8006e1c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8006e16:	2303      	movs	r3, #3
 8006e18:	74fb      	strb	r3, [r7, #19]
        break;
 8006e1a:	e005      	b.n	8006e28 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006e1c:	4b30      	ldr	r3, [pc, #192]	@ (8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d0ef      	beq.n	8006e08 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8006e28:	7cfb      	ldrb	r3, [r7, #19]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d15a      	bne.n	8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006e2e:	4b2b      	ldr	r3, [pc, #172]	@ (8006edc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006e30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e34:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006e38:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006e3a:	697b      	ldr	r3, [r7, #20]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d01e      	beq.n	8006e7e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e44:	697a      	ldr	r2, [r7, #20]
 8006e46:	429a      	cmp	r2, r3
 8006e48:	d019      	beq.n	8006e7e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006e4a:	4b24      	ldr	r3, [pc, #144]	@ (8006edc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006e4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e50:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006e54:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006e56:	4b21      	ldr	r3, [pc, #132]	@ (8006edc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006e58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e5c:	4a1f      	ldr	r2, [pc, #124]	@ (8006edc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006e5e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006e62:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006e66:	4b1d      	ldr	r3, [pc, #116]	@ (8006edc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006e68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e6c:	4a1b      	ldr	r2, [pc, #108]	@ (8006edc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006e6e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006e72:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006e76:	4a19      	ldr	r2, [pc, #100]	@ (8006edc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006e78:	697b      	ldr	r3, [r7, #20]
 8006e7a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006e7e:	697b      	ldr	r3, [r7, #20]
 8006e80:	f003 0301 	and.w	r3, r3, #1
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d016      	beq.n	8006eb6 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e88:	f7fd faea 	bl	8004460 <HAL_GetTick>
 8006e8c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006e8e:	e00b      	b.n	8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006e90:	f7fd fae6 	bl	8004460 <HAL_GetTick>
 8006e94:	4602      	mov	r2, r0
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	1ad3      	subs	r3, r2, r3
 8006e9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	d902      	bls.n	8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8006ea2:	2303      	movs	r3, #3
 8006ea4:	74fb      	strb	r3, [r7, #19]
            break;
 8006ea6:	e006      	b.n	8006eb6 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006ea8:	4b0c      	ldr	r3, [pc, #48]	@ (8006edc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006eaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006eae:	f003 0302 	and.w	r3, r3, #2
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d0ec      	beq.n	8006e90 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8006eb6:	7cfb      	ldrb	r3, [r7, #19]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d10b      	bne.n	8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006ebc:	4b07      	ldr	r3, [pc, #28]	@ (8006edc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006ebe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ec2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006eca:	4904      	ldr	r1, [pc, #16]	@ (8006edc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006ecc:	4313      	orrs	r3, r2
 8006ece:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8006ed2:	e009      	b.n	8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006ed4:	7cfb      	ldrb	r3, [r7, #19]
 8006ed6:	74bb      	strb	r3, [r7, #18]
 8006ed8:	e006      	b.n	8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8006eda:	bf00      	nop
 8006edc:	40021000 	.word	0x40021000
 8006ee0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ee4:	7cfb      	ldrb	r3, [r7, #19]
 8006ee6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006ee8:	7c7b      	ldrb	r3, [r7, #17]
 8006eea:	2b01      	cmp	r3, #1
 8006eec:	d105      	bne.n	8006efa <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006eee:	4b8a      	ldr	r3, [pc, #552]	@ (8007118 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006ef0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ef2:	4a89      	ldr	r2, [pc, #548]	@ (8007118 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006ef4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006ef8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f003 0301 	and.w	r3, r3, #1
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d00a      	beq.n	8006f1c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006f06:	4b84      	ldr	r3, [pc, #528]	@ (8007118 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006f08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f0c:	f023 0203 	bic.w	r2, r3, #3
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	6a1b      	ldr	r3, [r3, #32]
 8006f14:	4980      	ldr	r1, [pc, #512]	@ (8007118 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006f16:	4313      	orrs	r3, r2
 8006f18:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f003 0302 	and.w	r3, r3, #2
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d00a      	beq.n	8006f3e <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006f28:	4b7b      	ldr	r3, [pc, #492]	@ (8007118 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006f2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f2e:	f023 020c 	bic.w	r2, r3, #12
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f36:	4978      	ldr	r1, [pc, #480]	@ (8007118 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006f38:	4313      	orrs	r3, r2
 8006f3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f003 0320 	and.w	r3, r3, #32
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d00a      	beq.n	8006f60 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006f4a:	4b73      	ldr	r3, [pc, #460]	@ (8007118 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006f4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f50:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f58:	496f      	ldr	r1, [pc, #444]	@ (8007118 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006f5a:	4313      	orrs	r3, r2
 8006f5c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d00a      	beq.n	8006f82 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006f6c:	4b6a      	ldr	r3, [pc, #424]	@ (8007118 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006f6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f72:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f7a:	4967      	ldr	r1, [pc, #412]	@ (8007118 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006f7c:	4313      	orrs	r3, r2
 8006f7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d00a      	beq.n	8006fa4 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006f8e:	4b62      	ldr	r3, [pc, #392]	@ (8007118 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006f90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f94:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f9c:	495e      	ldr	r1, [pc, #376]	@ (8007118 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006f9e:	4313      	orrs	r3, r2
 8006fa0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d00a      	beq.n	8006fc6 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006fb0:	4b59      	ldr	r3, [pc, #356]	@ (8007118 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006fb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006fb6:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fbe:	4956      	ldr	r1, [pc, #344]	@ (8007118 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006fc0:	4313      	orrs	r3, r2
 8006fc2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d00a      	beq.n	8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006fd2:	4b51      	ldr	r3, [pc, #324]	@ (8007118 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006fd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006fd8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fe0:	494d      	ldr	r1, [pc, #308]	@ (8007118 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006fe2:	4313      	orrs	r3, r2
 8006fe4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d028      	beq.n	8007046 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006ff4:	4b48      	ldr	r3, [pc, #288]	@ (8007118 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006ff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ffa:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007002:	4945      	ldr	r1, [pc, #276]	@ (8007118 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007004:	4313      	orrs	r3, r2
 8007006:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800700e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007012:	d106      	bne.n	8007022 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007014:	4b40      	ldr	r3, [pc, #256]	@ (8007118 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007016:	68db      	ldr	r3, [r3, #12]
 8007018:	4a3f      	ldr	r2, [pc, #252]	@ (8007118 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800701a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800701e:	60d3      	str	r3, [r2, #12]
 8007020:	e011      	b.n	8007046 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007026:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800702a:	d10c      	bne.n	8007046 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	3304      	adds	r3, #4
 8007030:	2101      	movs	r1, #1
 8007032:	4618      	mov	r0, r3
 8007034:	f000 f882 	bl	800713c <RCCEx_PLLSAI1_Config>
 8007038:	4603      	mov	r3, r0
 800703a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800703c:	7cfb      	ldrb	r3, [r7, #19]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d001      	beq.n	8007046 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8007042:	7cfb      	ldrb	r3, [r7, #19]
 8007044:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800704e:	2b00      	cmp	r3, #0
 8007050:	d028      	beq.n	80070a4 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007052:	4b31      	ldr	r3, [pc, #196]	@ (8007118 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007054:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007058:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007060:	492d      	ldr	r1, [pc, #180]	@ (8007118 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007062:	4313      	orrs	r3, r2
 8007064:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800706c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007070:	d106      	bne.n	8007080 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007072:	4b29      	ldr	r3, [pc, #164]	@ (8007118 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007074:	68db      	ldr	r3, [r3, #12]
 8007076:	4a28      	ldr	r2, [pc, #160]	@ (8007118 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007078:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800707c:	60d3      	str	r3, [r2, #12]
 800707e:	e011      	b.n	80070a4 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007084:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007088:	d10c      	bne.n	80070a4 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	3304      	adds	r3, #4
 800708e:	2101      	movs	r1, #1
 8007090:	4618      	mov	r0, r3
 8007092:	f000 f853 	bl	800713c <RCCEx_PLLSAI1_Config>
 8007096:	4603      	mov	r3, r0
 8007098:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800709a:	7cfb      	ldrb	r3, [r7, #19]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d001      	beq.n	80070a4 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 80070a0:	7cfb      	ldrb	r3, [r7, #19]
 80070a2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d01c      	beq.n	80070ea <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80070b0:	4b19      	ldr	r3, [pc, #100]	@ (8007118 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80070b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070b6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80070be:	4916      	ldr	r1, [pc, #88]	@ (8007118 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80070c0:	4313      	orrs	r3, r2
 80070c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80070ca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80070ce:	d10c      	bne.n	80070ea <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	3304      	adds	r3, #4
 80070d4:	2102      	movs	r1, #2
 80070d6:	4618      	mov	r0, r3
 80070d8:	f000 f830 	bl	800713c <RCCEx_PLLSAI1_Config>
 80070dc:	4603      	mov	r3, r0
 80070de:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80070e0:	7cfb      	ldrb	r3, [r7, #19]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d001      	beq.n	80070ea <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 80070e6:	7cfb      	ldrb	r3, [r7, #19]
 80070e8:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d00a      	beq.n	800710c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80070f6:	4b08      	ldr	r3, [pc, #32]	@ (8007118 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80070f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070fc:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007104:	4904      	ldr	r1, [pc, #16]	@ (8007118 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007106:	4313      	orrs	r3, r2
 8007108:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800710c:	7cbb      	ldrb	r3, [r7, #18]
}
 800710e:	4618      	mov	r0, r3
 8007110:	3718      	adds	r7, #24
 8007112:	46bd      	mov	sp, r7
 8007114:	bd80      	pop	{r7, pc}
 8007116:	bf00      	nop
 8007118:	40021000 	.word	0x40021000

0800711c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800711c:	b480      	push	{r7}
 800711e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8007120:	4b05      	ldr	r3, [pc, #20]	@ (8007138 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	4a04      	ldr	r2, [pc, #16]	@ (8007138 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8007126:	f043 0304 	orr.w	r3, r3, #4
 800712a:	6013      	str	r3, [r2, #0]
}
 800712c:	bf00      	nop
 800712e:	46bd      	mov	sp, r7
 8007130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007134:	4770      	bx	lr
 8007136:	bf00      	nop
 8007138:	40021000 	.word	0x40021000

0800713c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800713c:	b580      	push	{r7, lr}
 800713e:	b084      	sub	sp, #16
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
 8007144:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007146:	2300      	movs	r3, #0
 8007148:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800714a:	4b74      	ldr	r3, [pc, #464]	@ (800731c <RCCEx_PLLSAI1_Config+0x1e0>)
 800714c:	68db      	ldr	r3, [r3, #12]
 800714e:	f003 0303 	and.w	r3, r3, #3
 8007152:	2b00      	cmp	r3, #0
 8007154:	d018      	beq.n	8007188 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8007156:	4b71      	ldr	r3, [pc, #452]	@ (800731c <RCCEx_PLLSAI1_Config+0x1e0>)
 8007158:	68db      	ldr	r3, [r3, #12]
 800715a:	f003 0203 	and.w	r2, r3, #3
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	429a      	cmp	r2, r3
 8007164:	d10d      	bne.n	8007182 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
       ||
 800716a:	2b00      	cmp	r3, #0
 800716c:	d009      	beq.n	8007182 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800716e:	4b6b      	ldr	r3, [pc, #428]	@ (800731c <RCCEx_PLLSAI1_Config+0x1e0>)
 8007170:	68db      	ldr	r3, [r3, #12]
 8007172:	091b      	lsrs	r3, r3, #4
 8007174:	f003 0307 	and.w	r3, r3, #7
 8007178:	1c5a      	adds	r2, r3, #1
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	685b      	ldr	r3, [r3, #4]
       ||
 800717e:	429a      	cmp	r2, r3
 8007180:	d047      	beq.n	8007212 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8007182:	2301      	movs	r3, #1
 8007184:	73fb      	strb	r3, [r7, #15]
 8007186:	e044      	b.n	8007212 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	2b03      	cmp	r3, #3
 800718e:	d018      	beq.n	80071c2 <RCCEx_PLLSAI1_Config+0x86>
 8007190:	2b03      	cmp	r3, #3
 8007192:	d825      	bhi.n	80071e0 <RCCEx_PLLSAI1_Config+0xa4>
 8007194:	2b01      	cmp	r3, #1
 8007196:	d002      	beq.n	800719e <RCCEx_PLLSAI1_Config+0x62>
 8007198:	2b02      	cmp	r3, #2
 800719a:	d009      	beq.n	80071b0 <RCCEx_PLLSAI1_Config+0x74>
 800719c:	e020      	b.n	80071e0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800719e:	4b5f      	ldr	r3, [pc, #380]	@ (800731c <RCCEx_PLLSAI1_Config+0x1e0>)
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f003 0302 	and.w	r3, r3, #2
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d11d      	bne.n	80071e6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80071aa:	2301      	movs	r3, #1
 80071ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80071ae:	e01a      	b.n	80071e6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80071b0:	4b5a      	ldr	r3, [pc, #360]	@ (800731c <RCCEx_PLLSAI1_Config+0x1e0>)
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d116      	bne.n	80071ea <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80071bc:	2301      	movs	r3, #1
 80071be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80071c0:	e013      	b.n	80071ea <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80071c2:	4b56      	ldr	r3, [pc, #344]	@ (800731c <RCCEx_PLLSAI1_Config+0x1e0>)
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d10f      	bne.n	80071ee <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80071ce:	4b53      	ldr	r3, [pc, #332]	@ (800731c <RCCEx_PLLSAI1_Config+0x1e0>)
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d109      	bne.n	80071ee <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80071da:	2301      	movs	r3, #1
 80071dc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80071de:	e006      	b.n	80071ee <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80071e0:	2301      	movs	r3, #1
 80071e2:	73fb      	strb	r3, [r7, #15]
      break;
 80071e4:	e004      	b.n	80071f0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80071e6:	bf00      	nop
 80071e8:	e002      	b.n	80071f0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80071ea:	bf00      	nop
 80071ec:	e000      	b.n	80071f0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80071ee:	bf00      	nop
    }

    if(status == HAL_OK)
 80071f0:	7bfb      	ldrb	r3, [r7, #15]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d10d      	bne.n	8007212 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80071f6:	4b49      	ldr	r3, [pc, #292]	@ (800731c <RCCEx_PLLSAI1_Config+0x1e0>)
 80071f8:	68db      	ldr	r3, [r3, #12]
 80071fa:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	6819      	ldr	r1, [r3, #0]
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	685b      	ldr	r3, [r3, #4]
 8007206:	3b01      	subs	r3, #1
 8007208:	011b      	lsls	r3, r3, #4
 800720a:	430b      	orrs	r3, r1
 800720c:	4943      	ldr	r1, [pc, #268]	@ (800731c <RCCEx_PLLSAI1_Config+0x1e0>)
 800720e:	4313      	orrs	r3, r2
 8007210:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8007212:	7bfb      	ldrb	r3, [r7, #15]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d17c      	bne.n	8007312 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8007218:	4b40      	ldr	r3, [pc, #256]	@ (800731c <RCCEx_PLLSAI1_Config+0x1e0>)
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	4a3f      	ldr	r2, [pc, #252]	@ (800731c <RCCEx_PLLSAI1_Config+0x1e0>)
 800721e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007222:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007224:	f7fd f91c 	bl	8004460 <HAL_GetTick>
 8007228:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800722a:	e009      	b.n	8007240 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800722c:	f7fd f918 	bl	8004460 <HAL_GetTick>
 8007230:	4602      	mov	r2, r0
 8007232:	68bb      	ldr	r3, [r7, #8]
 8007234:	1ad3      	subs	r3, r2, r3
 8007236:	2b02      	cmp	r3, #2
 8007238:	d902      	bls.n	8007240 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800723a:	2303      	movs	r3, #3
 800723c:	73fb      	strb	r3, [r7, #15]
        break;
 800723e:	e005      	b.n	800724c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007240:	4b36      	ldr	r3, [pc, #216]	@ (800731c <RCCEx_PLLSAI1_Config+0x1e0>)
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007248:	2b00      	cmp	r3, #0
 800724a:	d1ef      	bne.n	800722c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800724c:	7bfb      	ldrb	r3, [r7, #15]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d15f      	bne.n	8007312 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	2b00      	cmp	r3, #0
 8007256:	d110      	bne.n	800727a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007258:	4b30      	ldr	r3, [pc, #192]	@ (800731c <RCCEx_PLLSAI1_Config+0x1e0>)
 800725a:	691b      	ldr	r3, [r3, #16]
 800725c:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8007260:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8007264:	687a      	ldr	r2, [r7, #4]
 8007266:	6892      	ldr	r2, [r2, #8]
 8007268:	0211      	lsls	r1, r2, #8
 800726a:	687a      	ldr	r2, [r7, #4]
 800726c:	68d2      	ldr	r2, [r2, #12]
 800726e:	06d2      	lsls	r2, r2, #27
 8007270:	430a      	orrs	r2, r1
 8007272:	492a      	ldr	r1, [pc, #168]	@ (800731c <RCCEx_PLLSAI1_Config+0x1e0>)
 8007274:	4313      	orrs	r3, r2
 8007276:	610b      	str	r3, [r1, #16]
 8007278:	e027      	b.n	80072ca <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800727a:	683b      	ldr	r3, [r7, #0]
 800727c:	2b01      	cmp	r3, #1
 800727e:	d112      	bne.n	80072a6 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007280:	4b26      	ldr	r3, [pc, #152]	@ (800731c <RCCEx_PLLSAI1_Config+0x1e0>)
 8007282:	691b      	ldr	r3, [r3, #16]
 8007284:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8007288:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800728c:	687a      	ldr	r2, [r7, #4]
 800728e:	6892      	ldr	r2, [r2, #8]
 8007290:	0211      	lsls	r1, r2, #8
 8007292:	687a      	ldr	r2, [r7, #4]
 8007294:	6912      	ldr	r2, [r2, #16]
 8007296:	0852      	lsrs	r2, r2, #1
 8007298:	3a01      	subs	r2, #1
 800729a:	0552      	lsls	r2, r2, #21
 800729c:	430a      	orrs	r2, r1
 800729e:	491f      	ldr	r1, [pc, #124]	@ (800731c <RCCEx_PLLSAI1_Config+0x1e0>)
 80072a0:	4313      	orrs	r3, r2
 80072a2:	610b      	str	r3, [r1, #16]
 80072a4:	e011      	b.n	80072ca <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80072a6:	4b1d      	ldr	r3, [pc, #116]	@ (800731c <RCCEx_PLLSAI1_Config+0x1e0>)
 80072a8:	691b      	ldr	r3, [r3, #16]
 80072aa:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80072ae:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80072b2:	687a      	ldr	r2, [r7, #4]
 80072b4:	6892      	ldr	r2, [r2, #8]
 80072b6:	0211      	lsls	r1, r2, #8
 80072b8:	687a      	ldr	r2, [r7, #4]
 80072ba:	6952      	ldr	r2, [r2, #20]
 80072bc:	0852      	lsrs	r2, r2, #1
 80072be:	3a01      	subs	r2, #1
 80072c0:	0652      	lsls	r2, r2, #25
 80072c2:	430a      	orrs	r2, r1
 80072c4:	4915      	ldr	r1, [pc, #84]	@ (800731c <RCCEx_PLLSAI1_Config+0x1e0>)
 80072c6:	4313      	orrs	r3, r2
 80072c8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80072ca:	4b14      	ldr	r3, [pc, #80]	@ (800731c <RCCEx_PLLSAI1_Config+0x1e0>)
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	4a13      	ldr	r2, [pc, #76]	@ (800731c <RCCEx_PLLSAI1_Config+0x1e0>)
 80072d0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80072d4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072d6:	f7fd f8c3 	bl	8004460 <HAL_GetTick>
 80072da:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80072dc:	e009      	b.n	80072f2 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80072de:	f7fd f8bf 	bl	8004460 <HAL_GetTick>
 80072e2:	4602      	mov	r2, r0
 80072e4:	68bb      	ldr	r3, [r7, #8]
 80072e6:	1ad3      	subs	r3, r2, r3
 80072e8:	2b02      	cmp	r3, #2
 80072ea:	d902      	bls.n	80072f2 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80072ec:	2303      	movs	r3, #3
 80072ee:	73fb      	strb	r3, [r7, #15]
          break;
 80072f0:	e005      	b.n	80072fe <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80072f2:	4b0a      	ldr	r3, [pc, #40]	@ (800731c <RCCEx_PLLSAI1_Config+0x1e0>)
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d0ef      	beq.n	80072de <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80072fe:	7bfb      	ldrb	r3, [r7, #15]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d106      	bne.n	8007312 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8007304:	4b05      	ldr	r3, [pc, #20]	@ (800731c <RCCEx_PLLSAI1_Config+0x1e0>)
 8007306:	691a      	ldr	r2, [r3, #16]
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	699b      	ldr	r3, [r3, #24]
 800730c:	4903      	ldr	r1, [pc, #12]	@ (800731c <RCCEx_PLLSAI1_Config+0x1e0>)
 800730e:	4313      	orrs	r3, r2
 8007310:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8007312:	7bfb      	ldrb	r3, [r7, #15]
}
 8007314:	4618      	mov	r0, r3
 8007316:	3710      	adds	r7, #16
 8007318:	46bd      	mov	sp, r7
 800731a:	bd80      	pop	{r7, pc}
 800731c:	40021000 	.word	0x40021000

08007320 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b084      	sub	sp, #16
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d101      	bne.n	8007332 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800732e:	2301      	movs	r3, #1
 8007330:	e095      	b.n	800745e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007336:	2b00      	cmp	r3, #0
 8007338:	d108      	bne.n	800734c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	685b      	ldr	r3, [r3, #4]
 800733e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007342:	d009      	beq.n	8007358 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2200      	movs	r2, #0
 8007348:	61da      	str	r2, [r3, #28]
 800734a:	e005      	b.n	8007358 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2200      	movs	r2, #0
 8007350:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	2200      	movs	r2, #0
 8007356:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2200      	movs	r2, #0
 800735c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007364:	b2db      	uxtb	r3, r3
 8007366:	2b00      	cmp	r3, #0
 8007368:	d106      	bne.n	8007378 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2200      	movs	r2, #0
 800736e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007372:	6878      	ldr	r0, [r7, #4]
 8007374:	f7fc fe56 	bl	8004024 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2202      	movs	r2, #2
 800737c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	681a      	ldr	r2, [r3, #0]
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800738e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	68db      	ldr	r3, [r3, #12]
 8007394:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007398:	d902      	bls.n	80073a0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800739a:	2300      	movs	r3, #0
 800739c:	60fb      	str	r3, [r7, #12]
 800739e:	e002      	b.n	80073a6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80073a0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80073a4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	68db      	ldr	r3, [r3, #12]
 80073aa:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80073ae:	d007      	beq.n	80073c0 <HAL_SPI_Init+0xa0>
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	68db      	ldr	r3, [r3, #12]
 80073b4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80073b8:	d002      	beq.n	80073c0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2200      	movs	r2, #0
 80073be:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	685b      	ldr	r3, [r3, #4]
 80073c4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	689b      	ldr	r3, [r3, #8]
 80073cc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80073d0:	431a      	orrs	r2, r3
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	691b      	ldr	r3, [r3, #16]
 80073d6:	f003 0302 	and.w	r3, r3, #2
 80073da:	431a      	orrs	r2, r3
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	695b      	ldr	r3, [r3, #20]
 80073e0:	f003 0301 	and.w	r3, r3, #1
 80073e4:	431a      	orrs	r2, r3
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	699b      	ldr	r3, [r3, #24]
 80073ea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80073ee:	431a      	orrs	r2, r3
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	69db      	ldr	r3, [r3, #28]
 80073f4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80073f8:	431a      	orrs	r2, r3
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	6a1b      	ldr	r3, [r3, #32]
 80073fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007402:	ea42 0103 	orr.w	r1, r2, r3
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800740a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	430a      	orrs	r2, r1
 8007414:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	699b      	ldr	r3, [r3, #24]
 800741a:	0c1b      	lsrs	r3, r3, #16
 800741c:	f003 0204 	and.w	r2, r3, #4
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007424:	f003 0310 	and.w	r3, r3, #16
 8007428:	431a      	orrs	r2, r3
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800742e:	f003 0308 	and.w	r3, r3, #8
 8007432:	431a      	orrs	r2, r3
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	68db      	ldr	r3, [r3, #12]
 8007438:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800743c:	ea42 0103 	orr.w	r1, r2, r3
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	430a      	orrs	r2, r1
 800744c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	2200      	movs	r2, #0
 8007452:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2201      	movs	r2, #1
 8007458:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800745c:	2300      	movs	r3, #0
}
 800745e:	4618      	mov	r0, r3
 8007460:	3710      	adds	r7, #16
 8007462:	46bd      	mov	sp, r7
 8007464:	bd80      	pop	{r7, pc}

08007466 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007466:	b580      	push	{r7, lr}
 8007468:	b088      	sub	sp, #32
 800746a:	af00      	add	r7, sp, #0
 800746c:	60f8      	str	r0, [r7, #12]
 800746e:	60b9      	str	r1, [r7, #8]
 8007470:	603b      	str	r3, [r7, #0]
 8007472:	4613      	mov	r3, r2
 8007474:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007476:	f7fc fff3 	bl	8004460 <HAL_GetTick>
 800747a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800747c:	88fb      	ldrh	r3, [r7, #6]
 800747e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007486:	b2db      	uxtb	r3, r3
 8007488:	2b01      	cmp	r3, #1
 800748a:	d001      	beq.n	8007490 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800748c:	2302      	movs	r3, #2
 800748e:	e15c      	b.n	800774a <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8007490:	68bb      	ldr	r3, [r7, #8]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d002      	beq.n	800749c <HAL_SPI_Transmit+0x36>
 8007496:	88fb      	ldrh	r3, [r7, #6]
 8007498:	2b00      	cmp	r3, #0
 800749a:	d101      	bne.n	80074a0 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800749c:	2301      	movs	r3, #1
 800749e:	e154      	b.n	800774a <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80074a6:	2b01      	cmp	r3, #1
 80074a8:	d101      	bne.n	80074ae <HAL_SPI_Transmit+0x48>
 80074aa:	2302      	movs	r3, #2
 80074ac:	e14d      	b.n	800774a <HAL_SPI_Transmit+0x2e4>
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	2201      	movs	r2, #1
 80074b2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	2203      	movs	r2, #3
 80074ba:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	2200      	movs	r2, #0
 80074c2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	68ba      	ldr	r2, [r7, #8]
 80074c8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	88fa      	ldrh	r2, [r7, #6]
 80074ce:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	88fa      	ldrh	r2, [r7, #6]
 80074d4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	2200      	movs	r2, #0
 80074da:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	2200      	movs	r2, #0
 80074e0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	2200      	movs	r2, #0
 80074e8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	2200      	movs	r2, #0
 80074f0:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	2200      	movs	r2, #0
 80074f6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	689b      	ldr	r3, [r3, #8]
 80074fc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007500:	d10f      	bne.n	8007522 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	681a      	ldr	r2, [r3, #0]
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007510:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	681a      	ldr	r2, [r3, #0]
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007520:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800752c:	2b40      	cmp	r3, #64	@ 0x40
 800752e:	d007      	beq.n	8007540 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	681a      	ldr	r2, [r3, #0]
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800753e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	68db      	ldr	r3, [r3, #12]
 8007544:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007548:	d952      	bls.n	80075f0 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	685b      	ldr	r3, [r3, #4]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d002      	beq.n	8007558 <HAL_SPI_Transmit+0xf2>
 8007552:	8b7b      	ldrh	r3, [r7, #26]
 8007554:	2b01      	cmp	r3, #1
 8007556:	d145      	bne.n	80075e4 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800755c:	881a      	ldrh	r2, [r3, #0]
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007568:	1c9a      	adds	r2, r3, #2
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007572:	b29b      	uxth	r3, r3
 8007574:	3b01      	subs	r3, #1
 8007576:	b29a      	uxth	r2, r3
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800757c:	e032      	b.n	80075e4 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	689b      	ldr	r3, [r3, #8]
 8007584:	f003 0302 	and.w	r3, r3, #2
 8007588:	2b02      	cmp	r3, #2
 800758a:	d112      	bne.n	80075b2 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007590:	881a      	ldrh	r2, [r3, #0]
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800759c:	1c9a      	adds	r2, r3, #2
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80075a6:	b29b      	uxth	r3, r3
 80075a8:	3b01      	subs	r3, #1
 80075aa:	b29a      	uxth	r2, r3
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80075b0:	e018      	b.n	80075e4 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80075b2:	f7fc ff55 	bl	8004460 <HAL_GetTick>
 80075b6:	4602      	mov	r2, r0
 80075b8:	69fb      	ldr	r3, [r7, #28]
 80075ba:	1ad3      	subs	r3, r2, r3
 80075bc:	683a      	ldr	r2, [r7, #0]
 80075be:	429a      	cmp	r2, r3
 80075c0:	d803      	bhi.n	80075ca <HAL_SPI_Transmit+0x164>
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075c8:	d102      	bne.n	80075d0 <HAL_SPI_Transmit+0x16a>
 80075ca:	683b      	ldr	r3, [r7, #0]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d109      	bne.n	80075e4 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	2201      	movs	r2, #1
 80075d4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	2200      	movs	r2, #0
 80075dc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80075e0:	2303      	movs	r3, #3
 80075e2:	e0b2      	b.n	800774a <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80075e8:	b29b      	uxth	r3, r3
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d1c7      	bne.n	800757e <HAL_SPI_Transmit+0x118>
 80075ee:	e083      	b.n	80076f8 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	685b      	ldr	r3, [r3, #4]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d002      	beq.n	80075fe <HAL_SPI_Transmit+0x198>
 80075f8:	8b7b      	ldrh	r3, [r7, #26]
 80075fa:	2b01      	cmp	r3, #1
 80075fc:	d177      	bne.n	80076ee <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007602:	b29b      	uxth	r3, r3
 8007604:	2b01      	cmp	r3, #1
 8007606:	d912      	bls.n	800762e <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800760c:	881a      	ldrh	r2, [r3, #0]
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007618:	1c9a      	adds	r2, r3, #2
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007622:	b29b      	uxth	r3, r3
 8007624:	3b02      	subs	r3, #2
 8007626:	b29a      	uxth	r2, r3
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800762c:	e05f      	b.n	80076ee <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	330c      	adds	r3, #12
 8007638:	7812      	ldrb	r2, [r2, #0]
 800763a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007640:	1c5a      	adds	r2, r3, #1
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800764a:	b29b      	uxth	r3, r3
 800764c:	3b01      	subs	r3, #1
 800764e:	b29a      	uxth	r2, r3
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8007654:	e04b      	b.n	80076ee <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	689b      	ldr	r3, [r3, #8]
 800765c:	f003 0302 	and.w	r3, r3, #2
 8007660:	2b02      	cmp	r3, #2
 8007662:	d12b      	bne.n	80076bc <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007668:	b29b      	uxth	r3, r3
 800766a:	2b01      	cmp	r3, #1
 800766c:	d912      	bls.n	8007694 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007672:	881a      	ldrh	r2, [r3, #0]
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800767e:	1c9a      	adds	r2, r3, #2
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007688:	b29b      	uxth	r3, r3
 800768a:	3b02      	subs	r3, #2
 800768c:	b29a      	uxth	r2, r3
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007692:	e02c      	b.n	80076ee <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	330c      	adds	r3, #12
 800769e:	7812      	ldrb	r2, [r2, #0]
 80076a0:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076a6:	1c5a      	adds	r2, r3, #1
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80076b0:	b29b      	uxth	r3, r3
 80076b2:	3b01      	subs	r3, #1
 80076b4:	b29a      	uxth	r2, r3
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80076ba:	e018      	b.n	80076ee <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80076bc:	f7fc fed0 	bl	8004460 <HAL_GetTick>
 80076c0:	4602      	mov	r2, r0
 80076c2:	69fb      	ldr	r3, [r7, #28]
 80076c4:	1ad3      	subs	r3, r2, r3
 80076c6:	683a      	ldr	r2, [r7, #0]
 80076c8:	429a      	cmp	r2, r3
 80076ca:	d803      	bhi.n	80076d4 <HAL_SPI_Transmit+0x26e>
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076d2:	d102      	bne.n	80076da <HAL_SPI_Transmit+0x274>
 80076d4:	683b      	ldr	r3, [r7, #0]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d109      	bne.n	80076ee <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	2201      	movs	r2, #1
 80076de:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	2200      	movs	r2, #0
 80076e6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80076ea:	2303      	movs	r3, #3
 80076ec:	e02d      	b.n	800774a <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80076f2:	b29b      	uxth	r3, r3
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d1ae      	bne.n	8007656 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80076f8:	69fa      	ldr	r2, [r7, #28]
 80076fa:	6839      	ldr	r1, [r7, #0]
 80076fc:	68f8      	ldr	r0, [r7, #12]
 80076fe:	f000 fbed 	bl	8007edc <SPI_EndRxTxTransaction>
 8007702:	4603      	mov	r3, r0
 8007704:	2b00      	cmp	r3, #0
 8007706:	d002      	beq.n	800770e <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	2220      	movs	r2, #32
 800770c:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	689b      	ldr	r3, [r3, #8]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d10a      	bne.n	800772c <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007716:	2300      	movs	r3, #0
 8007718:	617b      	str	r3, [r7, #20]
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	68db      	ldr	r3, [r3, #12]
 8007720:	617b      	str	r3, [r7, #20]
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	689b      	ldr	r3, [r3, #8]
 8007728:	617b      	str	r3, [r7, #20]
 800772a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	2201      	movs	r2, #1
 8007730:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	2200      	movs	r2, #0
 8007738:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007740:	2b00      	cmp	r3, #0
 8007742:	d001      	beq.n	8007748 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8007744:	2301      	movs	r3, #1
 8007746:	e000      	b.n	800774a <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8007748:	2300      	movs	r3, #0
  }
}
 800774a:	4618      	mov	r0, r3
 800774c:	3720      	adds	r7, #32
 800774e:	46bd      	mov	sp, r7
 8007750:	bd80      	pop	{r7, pc}
	...

08007754 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8007754:	b580      	push	{r7, lr}
 8007756:	b084      	sub	sp, #16
 8007758:	af00      	add	r7, sp, #0
 800775a:	60f8      	str	r0, [r7, #12]
 800775c:	60b9      	str	r1, [r7, #8]
 800775e:	4613      	mov	r3, r2
 8007760:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007768:	b2db      	uxtb	r3, r3
 800776a:	2b01      	cmp	r3, #1
 800776c:	d001      	beq.n	8007772 <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 800776e:	2302      	movs	r3, #2
 8007770:	e0d4      	b.n	800791c <HAL_SPI_Transmit_DMA+0x1c8>
  }

  if ((pData == NULL) || (Size == 0U))
 8007772:	68bb      	ldr	r3, [r7, #8]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d002      	beq.n	800777e <HAL_SPI_Transmit_DMA+0x2a>
 8007778:	88fb      	ldrh	r3, [r7, #6]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d101      	bne.n	8007782 <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 800777e:	2301      	movs	r3, #1
 8007780:	e0cc      	b.n	800791c <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8007788:	2b01      	cmp	r3, #1
 800778a:	d101      	bne.n	8007790 <HAL_SPI_Transmit_DMA+0x3c>
 800778c:	2302      	movs	r3, #2
 800778e:	e0c5      	b.n	800791c <HAL_SPI_Transmit_DMA+0x1c8>
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	2201      	movs	r2, #1
 8007794:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	2203      	movs	r2, #3
 800779c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	2200      	movs	r2, #0
 80077a4:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	68ba      	ldr	r2, [r7, #8]
 80077aa:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	88fa      	ldrh	r2, [r7, #6]
 80077b0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	88fa      	ldrh	r2, [r7, #6]
 80077b6:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	2200      	movs	r2, #0
 80077bc:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	2200      	movs	r2, #0
 80077c2:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	2200      	movs	r2, #0
 80077c8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->RxXferSize  = 0U;
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	2200      	movs	r2, #0
 80077ce:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	2200      	movs	r2, #0
 80077d6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	689b      	ldr	r3, [r3, #8]
 80077de:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80077e2:	d10f      	bne.n	8007804 <HAL_SPI_Transmit_DMA+0xb0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	681a      	ldr	r2, [r3, #0]
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80077f2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	681a      	ldr	r2, [r3, #0]
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007802:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007808:	4a46      	ldr	r2, [pc, #280]	@ (8007924 <HAL_SPI_Transmit_DMA+0x1d0>)
 800780a:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007810:	4a45      	ldr	r2, [pc, #276]	@ (8007928 <HAL_SPI_Transmit_DMA+0x1d4>)
 8007812:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007818:	4a44      	ldr	r2, [pc, #272]	@ (800792c <HAL_SPI_Transmit_DMA+0x1d8>)
 800781a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007820:	2200      	movs	r2, #0
 8007822:	639a      	str	r2, [r3, #56]	@ 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	685a      	ldr	r2, [r3, #4]
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007832:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	68db      	ldr	r3, [r3, #12]
 8007838:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800783c:	d82d      	bhi.n	800789a <HAL_SPI_Transmit_DMA+0x146>
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007842:	699b      	ldr	r3, [r3, #24]
 8007844:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007848:	d127      	bne.n	800789a <HAL_SPI_Transmit_DMA+0x146>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800784e:	b29b      	uxth	r3, r3
 8007850:	f003 0301 	and.w	r3, r3, #1
 8007854:	2b00      	cmp	r3, #0
 8007856:	d10f      	bne.n	8007878 <HAL_SPI_Transmit_DMA+0x124>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	685a      	ldr	r2, [r3, #4]
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007866:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800786c:	b29b      	uxth	r3, r3
 800786e:	085b      	lsrs	r3, r3, #1
 8007870:	b29a      	uxth	r2, r3
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007876:	e010      	b.n	800789a <HAL_SPI_Transmit_DMA+0x146>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	685a      	ldr	r2, [r3, #4]
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007886:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800788c:	b29b      	uxth	r3, r3
 800788e:	085b      	lsrs	r3, r3, #1
 8007890:	b29b      	uxth	r3, r3
 8007892:	3301      	adds	r3, #1
 8007894:	b29a      	uxth	r2, r3
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078a2:	4619      	mov	r1, r3
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	330c      	adds	r3, #12
 80078aa:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80078b0:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80078b2:	f7fe f8af 	bl	8005a14 <HAL_DMA_Start_IT>
 80078b6:	4603      	mov	r3, r0
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d00b      	beq.n	80078d4 <HAL_SPI_Transmit_DMA+0x180>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80078c0:	f043 0210 	orr.w	r2, r3, #16
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	2200      	movs	r2, #0
 80078cc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 80078d0:	2301      	movs	r3, #1
 80078d2:	e023      	b.n	800791c <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80078de:	2b40      	cmp	r3, #64	@ 0x40
 80078e0:	d007      	beq.n	80078f2 <HAL_SPI_Transmit_DMA+0x19e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	681a      	ldr	r2, [r3, #0]
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80078f0:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	2200      	movs	r2, #0
 80078f6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	685a      	ldr	r2, [r3, #4]
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	f042 0220 	orr.w	r2, r2, #32
 8007908:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	685a      	ldr	r2, [r3, #4]
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	f042 0202 	orr.w	r2, r2, #2
 8007918:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800791a:	2300      	movs	r3, #0
}
 800791c:	4618      	mov	r0, r3
 800791e:	3710      	adds	r7, #16
 8007920:	46bd      	mov	sp, r7
 8007922:	bd80      	pop	{r7, pc}
 8007924:	08007c1b 	.word	0x08007c1b
 8007928:	08007b75 	.word	0x08007b75
 800792c:	08007c37 	.word	0x08007c37

08007930 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8007930:	b580      	push	{r7, lr}
 8007932:	b088      	sub	sp, #32
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	685b      	ldr	r3, [r3, #4]
 800793e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	689b      	ldr	r3, [r3, #8]
 8007946:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007948:	69bb      	ldr	r3, [r7, #24]
 800794a:	099b      	lsrs	r3, r3, #6
 800794c:	f003 0301 	and.w	r3, r3, #1
 8007950:	2b00      	cmp	r3, #0
 8007952:	d10f      	bne.n	8007974 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007954:	69bb      	ldr	r3, [r7, #24]
 8007956:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800795a:	2b00      	cmp	r3, #0
 800795c:	d00a      	beq.n	8007974 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800795e:	69fb      	ldr	r3, [r7, #28]
 8007960:	099b      	lsrs	r3, r3, #6
 8007962:	f003 0301 	and.w	r3, r3, #1
 8007966:	2b00      	cmp	r3, #0
 8007968:	d004      	beq.n	8007974 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800796e:	6878      	ldr	r0, [r7, #4]
 8007970:	4798      	blx	r3
    return;
 8007972:	e0d7      	b.n	8007b24 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8007974:	69bb      	ldr	r3, [r7, #24]
 8007976:	085b      	lsrs	r3, r3, #1
 8007978:	f003 0301 	and.w	r3, r3, #1
 800797c:	2b00      	cmp	r3, #0
 800797e:	d00a      	beq.n	8007996 <HAL_SPI_IRQHandler+0x66>
 8007980:	69fb      	ldr	r3, [r7, #28]
 8007982:	09db      	lsrs	r3, r3, #7
 8007984:	f003 0301 	and.w	r3, r3, #1
 8007988:	2b00      	cmp	r3, #0
 800798a:	d004      	beq.n	8007996 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007990:	6878      	ldr	r0, [r7, #4]
 8007992:	4798      	blx	r3
    return;
 8007994:	e0c6      	b.n	8007b24 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007996:	69bb      	ldr	r3, [r7, #24]
 8007998:	095b      	lsrs	r3, r3, #5
 800799a:	f003 0301 	and.w	r3, r3, #1
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d10c      	bne.n	80079bc <HAL_SPI_IRQHandler+0x8c>
 80079a2:	69bb      	ldr	r3, [r7, #24]
 80079a4:	099b      	lsrs	r3, r3, #6
 80079a6:	f003 0301 	and.w	r3, r3, #1
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d106      	bne.n	80079bc <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80079ae:	69bb      	ldr	r3, [r7, #24]
 80079b0:	0a1b      	lsrs	r3, r3, #8
 80079b2:	f003 0301 	and.w	r3, r3, #1
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	f000 80b4 	beq.w	8007b24 <HAL_SPI_IRQHandler+0x1f4>
 80079bc:	69fb      	ldr	r3, [r7, #28]
 80079be:	095b      	lsrs	r3, r3, #5
 80079c0:	f003 0301 	and.w	r3, r3, #1
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	f000 80ad 	beq.w	8007b24 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80079ca:	69bb      	ldr	r3, [r7, #24]
 80079cc:	099b      	lsrs	r3, r3, #6
 80079ce:	f003 0301 	and.w	r3, r3, #1
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d023      	beq.n	8007a1e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80079dc:	b2db      	uxtb	r3, r3
 80079de:	2b03      	cmp	r3, #3
 80079e0:	d011      	beq.n	8007a06 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80079e6:	f043 0204 	orr.w	r2, r3, #4
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80079ee:	2300      	movs	r3, #0
 80079f0:	617b      	str	r3, [r7, #20]
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	68db      	ldr	r3, [r3, #12]
 80079f8:	617b      	str	r3, [r7, #20]
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	689b      	ldr	r3, [r3, #8]
 8007a00:	617b      	str	r3, [r7, #20]
 8007a02:	697b      	ldr	r3, [r7, #20]
 8007a04:	e00b      	b.n	8007a1e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007a06:	2300      	movs	r3, #0
 8007a08:	613b      	str	r3, [r7, #16]
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	68db      	ldr	r3, [r3, #12]
 8007a10:	613b      	str	r3, [r7, #16]
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	689b      	ldr	r3, [r3, #8]
 8007a18:	613b      	str	r3, [r7, #16]
 8007a1a:	693b      	ldr	r3, [r7, #16]
        return;
 8007a1c:	e082      	b.n	8007b24 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8007a1e:	69bb      	ldr	r3, [r7, #24]
 8007a20:	095b      	lsrs	r3, r3, #5
 8007a22:	f003 0301 	and.w	r3, r3, #1
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d014      	beq.n	8007a54 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007a2e:	f043 0201 	orr.w	r2, r3, #1
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007a36:	2300      	movs	r3, #0
 8007a38:	60fb      	str	r3, [r7, #12]
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	689b      	ldr	r3, [r3, #8]
 8007a40:	60fb      	str	r3, [r7, #12]
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	681a      	ldr	r2, [r3, #0]
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007a50:	601a      	str	r2, [r3, #0]
 8007a52:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8007a54:	69bb      	ldr	r3, [r7, #24]
 8007a56:	0a1b      	lsrs	r3, r3, #8
 8007a58:	f003 0301 	and.w	r3, r3, #1
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d00c      	beq.n	8007a7a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007a64:	f043 0208 	orr.w	r2, r3, #8
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	60bb      	str	r3, [r7, #8]
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	689b      	ldr	r3, [r3, #8]
 8007a76:	60bb      	str	r3, [r7, #8]
 8007a78:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d04f      	beq.n	8007b22 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	685a      	ldr	r2, [r3, #4]
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007a90:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	2201      	movs	r2, #1
 8007a96:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8007a9a:	69fb      	ldr	r3, [r7, #28]
 8007a9c:	f003 0302 	and.w	r3, r3, #2
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d104      	bne.n	8007aae <HAL_SPI_IRQHandler+0x17e>
 8007aa4:	69fb      	ldr	r3, [r7, #28]
 8007aa6:	f003 0301 	and.w	r3, r3, #1
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d034      	beq.n	8007b18 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	685a      	ldr	r2, [r3, #4]
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	f022 0203 	bic.w	r2, r2, #3
 8007abc:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d011      	beq.n	8007aea <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007aca:	4a18      	ldr	r2, [pc, #96]	@ (8007b2c <HAL_SPI_IRQHandler+0x1fc>)
 8007acc:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	f7fd fffe 	bl	8005ad4 <HAL_DMA_Abort_IT>
 8007ad8:	4603      	mov	r3, r0
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d005      	beq.n	8007aea <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007ae2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d016      	beq.n	8007b20 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007af6:	4a0d      	ldr	r2, [pc, #52]	@ (8007b2c <HAL_SPI_IRQHandler+0x1fc>)
 8007af8:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007afe:	4618      	mov	r0, r3
 8007b00:	f7fd ffe8 	bl	8005ad4 <HAL_DMA_Abort_IT>
 8007b04:	4603      	mov	r3, r0
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d00a      	beq.n	8007b20 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007b0e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8007b16:	e003      	b.n	8007b20 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8007b18:	6878      	ldr	r0, [r7, #4]
 8007b1a:	f000 f813 	bl	8007b44 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8007b1e:	e000      	b.n	8007b22 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8007b20:	bf00      	nop
    return;
 8007b22:	bf00      	nop
  }
}
 8007b24:	3720      	adds	r7, #32
 8007b26:	46bd      	mov	sp, r7
 8007b28:	bd80      	pop	{r7, pc}
 8007b2a:	bf00      	nop
 8007b2c:	08007c77 	.word	0x08007c77

08007b30 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007b30:	b480      	push	{r7}
 8007b32:	b083      	sub	sp, #12
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8007b38:	bf00      	nop
 8007b3a:	370c      	adds	r7, #12
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b42:	4770      	bx	lr

08007b44 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007b44:	b480      	push	{r7}
 8007b46:	b083      	sub	sp, #12
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007b4c:	bf00      	nop
 8007b4e:	370c      	adds	r7, #12
 8007b50:	46bd      	mov	sp, r7
 8007b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b56:	4770      	bx	lr

08007b58 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8007b58:	b480      	push	{r7}
 8007b5a:	b083      	sub	sp, #12
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007b66:	b2db      	uxtb	r3, r3
}
 8007b68:	4618      	mov	r0, r3
 8007b6a:	370c      	adds	r7, #12
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b72:	4770      	bx	lr

08007b74 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b086      	sub	sp, #24
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b80:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007b82:	f7fc fc6d 	bl	8004460 <HAL_GetTick>
 8007b86:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	f003 0320 	and.w	r3, r3, #32
 8007b92:	2b20      	cmp	r3, #32
 8007b94:	d03b      	beq.n	8007c0e <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8007b96:	697b      	ldr	r3, [r7, #20]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	685a      	ldr	r2, [r3, #4]
 8007b9c:	697b      	ldr	r3, [r7, #20]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	f022 0220 	bic.w	r2, r2, #32
 8007ba4:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8007ba6:	697b      	ldr	r3, [r7, #20]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	685a      	ldr	r2, [r3, #4]
 8007bac:	697b      	ldr	r3, [r7, #20]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	f022 0202 	bic.w	r2, r2, #2
 8007bb4:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8007bb6:	693a      	ldr	r2, [r7, #16]
 8007bb8:	2164      	movs	r1, #100	@ 0x64
 8007bba:	6978      	ldr	r0, [r7, #20]
 8007bbc:	f000 f98e 	bl	8007edc <SPI_EndRxTxTransaction>
 8007bc0:	4603      	mov	r3, r0
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d005      	beq.n	8007bd2 <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007bc6:	697b      	ldr	r3, [r7, #20]
 8007bc8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007bca:	f043 0220 	orr.w	r2, r3, #32
 8007bce:	697b      	ldr	r3, [r7, #20]
 8007bd0:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007bd2:	697b      	ldr	r3, [r7, #20]
 8007bd4:	689b      	ldr	r3, [r3, #8]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d10a      	bne.n	8007bf0 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007bda:	2300      	movs	r3, #0
 8007bdc:	60fb      	str	r3, [r7, #12]
 8007bde:	697b      	ldr	r3, [r7, #20]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	68db      	ldr	r3, [r3, #12]
 8007be4:	60fb      	str	r3, [r7, #12]
 8007be6:	697b      	ldr	r3, [r7, #20]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	689b      	ldr	r3, [r3, #8]
 8007bec:	60fb      	str	r3, [r7, #12]
 8007bee:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8007bf0:	697b      	ldr	r3, [r7, #20]
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8007bf6:	697b      	ldr	r3, [r7, #20]
 8007bf8:	2201      	movs	r2, #1
 8007bfa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007bfe:	697b      	ldr	r3, [r7, #20]
 8007c00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d003      	beq.n	8007c0e <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8007c06:	6978      	ldr	r0, [r7, #20]
 8007c08:	f7ff ff9c 	bl	8007b44 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8007c0c:	e002      	b.n	8007c14 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8007c0e:	6978      	ldr	r0, [r7, #20]
 8007c10:	f7fc f80e 	bl	8003c30 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007c14:	3718      	adds	r7, #24
 8007c16:	46bd      	mov	sp, r7
 8007c18:	bd80      	pop	{r7, pc}

08007c1a <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007c1a:	b580      	push	{r7, lr}
 8007c1c:	b084      	sub	sp, #16
 8007c1e:	af00      	add	r7, sp, #0
 8007c20:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c26:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8007c28:	68f8      	ldr	r0, [r7, #12]
 8007c2a:	f7ff ff81 	bl	8007b30 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007c2e:	bf00      	nop
 8007c30:	3710      	adds	r7, #16
 8007c32:	46bd      	mov	sp, r7
 8007c34:	bd80      	pop	{r7, pc}

08007c36 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8007c36:	b580      	push	{r7, lr}
 8007c38:	b084      	sub	sp, #16
 8007c3a:	af00      	add	r7, sp, #0
 8007c3c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c42:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	685a      	ldr	r2, [r3, #4]
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	f022 0203 	bic.w	r2, r2, #3
 8007c52:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007c58:	f043 0210 	orr.w	r2, r3, #16
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	2201      	movs	r2, #1
 8007c64:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007c68:	68f8      	ldr	r0, [r7, #12]
 8007c6a:	f7ff ff6b 	bl	8007b44 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007c6e:	bf00      	nop
 8007c70:	3710      	adds	r7, #16
 8007c72:	46bd      	mov	sp, r7
 8007c74:	bd80      	pop	{r7, pc}

08007c76 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007c76:	b580      	push	{r7, lr}
 8007c78:	b084      	sub	sp, #16
 8007c7a:	af00      	add	r7, sp, #0
 8007c7c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c82:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	2200      	movs	r2, #0
 8007c88:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	2200      	movs	r2, #0
 8007c90:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007c92:	68f8      	ldr	r0, [r7, #12]
 8007c94:	f7ff ff56 	bl	8007b44 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007c98:	bf00      	nop
 8007c9a:	3710      	adds	r7, #16
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	bd80      	pop	{r7, pc}

08007ca0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	b088      	sub	sp, #32
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	60f8      	str	r0, [r7, #12]
 8007ca8:	60b9      	str	r1, [r7, #8]
 8007caa:	603b      	str	r3, [r7, #0]
 8007cac:	4613      	mov	r3, r2
 8007cae:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007cb0:	f7fc fbd6 	bl	8004460 <HAL_GetTick>
 8007cb4:	4602      	mov	r2, r0
 8007cb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cb8:	1a9b      	subs	r3, r3, r2
 8007cba:	683a      	ldr	r2, [r7, #0]
 8007cbc:	4413      	add	r3, r2
 8007cbe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007cc0:	f7fc fbce 	bl	8004460 <HAL_GetTick>
 8007cc4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007cc6:	4b39      	ldr	r3, [pc, #228]	@ (8007dac <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	015b      	lsls	r3, r3, #5
 8007ccc:	0d1b      	lsrs	r3, r3, #20
 8007cce:	69fa      	ldr	r2, [r7, #28]
 8007cd0:	fb02 f303 	mul.w	r3, r2, r3
 8007cd4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007cd6:	e054      	b.n	8007d82 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007cd8:	683b      	ldr	r3, [r7, #0]
 8007cda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cde:	d050      	beq.n	8007d82 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007ce0:	f7fc fbbe 	bl	8004460 <HAL_GetTick>
 8007ce4:	4602      	mov	r2, r0
 8007ce6:	69bb      	ldr	r3, [r7, #24]
 8007ce8:	1ad3      	subs	r3, r2, r3
 8007cea:	69fa      	ldr	r2, [r7, #28]
 8007cec:	429a      	cmp	r2, r3
 8007cee:	d902      	bls.n	8007cf6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007cf0:	69fb      	ldr	r3, [r7, #28]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d13d      	bne.n	8007d72 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	685a      	ldr	r2, [r3, #4]
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007d04:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	685b      	ldr	r3, [r3, #4]
 8007d0a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007d0e:	d111      	bne.n	8007d34 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	689b      	ldr	r3, [r3, #8]
 8007d14:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007d18:	d004      	beq.n	8007d24 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	689b      	ldr	r3, [r3, #8]
 8007d1e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007d22:	d107      	bne.n	8007d34 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	681a      	ldr	r2, [r3, #0]
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007d32:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d38:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007d3c:	d10f      	bne.n	8007d5e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	681a      	ldr	r2, [r3, #0]
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007d4c:	601a      	str	r2, [r3, #0]
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	681a      	ldr	r2, [r3, #0]
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007d5c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	2201      	movs	r2, #1
 8007d62:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	2200      	movs	r2, #0
 8007d6a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8007d6e:	2303      	movs	r3, #3
 8007d70:	e017      	b.n	8007da2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007d72:	697b      	ldr	r3, [r7, #20]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d101      	bne.n	8007d7c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007d78:	2300      	movs	r3, #0
 8007d7a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007d7c:	697b      	ldr	r3, [r7, #20]
 8007d7e:	3b01      	subs	r3, #1
 8007d80:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	689a      	ldr	r2, [r3, #8]
 8007d88:	68bb      	ldr	r3, [r7, #8]
 8007d8a:	4013      	ands	r3, r2
 8007d8c:	68ba      	ldr	r2, [r7, #8]
 8007d8e:	429a      	cmp	r2, r3
 8007d90:	bf0c      	ite	eq
 8007d92:	2301      	moveq	r3, #1
 8007d94:	2300      	movne	r3, #0
 8007d96:	b2db      	uxtb	r3, r3
 8007d98:	461a      	mov	r2, r3
 8007d9a:	79fb      	ldrb	r3, [r7, #7]
 8007d9c:	429a      	cmp	r2, r3
 8007d9e:	d19b      	bne.n	8007cd8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007da0:	2300      	movs	r3, #0
}
 8007da2:	4618      	mov	r0, r3
 8007da4:	3720      	adds	r7, #32
 8007da6:	46bd      	mov	sp, r7
 8007da8:	bd80      	pop	{r7, pc}
 8007daa:	bf00      	nop
 8007dac:	2000000c 	.word	0x2000000c

08007db0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007db0:	b580      	push	{r7, lr}
 8007db2:	b08a      	sub	sp, #40	@ 0x28
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	60f8      	str	r0, [r7, #12]
 8007db8:	60b9      	str	r1, [r7, #8]
 8007dba:	607a      	str	r2, [r7, #4]
 8007dbc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007dc2:	f7fc fb4d 	bl	8004460 <HAL_GetTick>
 8007dc6:	4602      	mov	r2, r0
 8007dc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dca:	1a9b      	subs	r3, r3, r2
 8007dcc:	683a      	ldr	r2, [r7, #0]
 8007dce:	4413      	add	r3, r2
 8007dd0:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8007dd2:	f7fc fb45 	bl	8004460 <HAL_GetTick>
 8007dd6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	330c      	adds	r3, #12
 8007dde:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007de0:	4b3d      	ldr	r3, [pc, #244]	@ (8007ed8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8007de2:	681a      	ldr	r2, [r3, #0]
 8007de4:	4613      	mov	r3, r2
 8007de6:	009b      	lsls	r3, r3, #2
 8007de8:	4413      	add	r3, r2
 8007dea:	00da      	lsls	r2, r3, #3
 8007dec:	1ad3      	subs	r3, r2, r3
 8007dee:	0d1b      	lsrs	r3, r3, #20
 8007df0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007df2:	fb02 f303 	mul.w	r3, r2, r3
 8007df6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007df8:	e060      	b.n	8007ebc <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007dfa:	68bb      	ldr	r3, [r7, #8]
 8007dfc:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007e00:	d107      	bne.n	8007e12 <SPI_WaitFifoStateUntilTimeout+0x62>
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d104      	bne.n	8007e12 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007e08:	69fb      	ldr	r3, [r7, #28]
 8007e0a:	781b      	ldrb	r3, [r3, #0]
 8007e0c:	b2db      	uxtb	r3, r3
 8007e0e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8007e10:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8007e12:	683b      	ldr	r3, [r7, #0]
 8007e14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e18:	d050      	beq.n	8007ebc <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007e1a:	f7fc fb21 	bl	8004460 <HAL_GetTick>
 8007e1e:	4602      	mov	r2, r0
 8007e20:	6a3b      	ldr	r3, [r7, #32]
 8007e22:	1ad3      	subs	r3, r2, r3
 8007e24:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007e26:	429a      	cmp	r2, r3
 8007e28:	d902      	bls.n	8007e30 <SPI_WaitFifoStateUntilTimeout+0x80>
 8007e2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d13d      	bne.n	8007eac <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	685a      	ldr	r2, [r3, #4]
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007e3e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	685b      	ldr	r3, [r3, #4]
 8007e44:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007e48:	d111      	bne.n	8007e6e <SPI_WaitFifoStateUntilTimeout+0xbe>
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	689b      	ldr	r3, [r3, #8]
 8007e4e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007e52:	d004      	beq.n	8007e5e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	689b      	ldr	r3, [r3, #8]
 8007e58:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007e5c:	d107      	bne.n	8007e6e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	681a      	ldr	r2, [r3, #0]
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007e6c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e72:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007e76:	d10f      	bne.n	8007e98 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	681a      	ldr	r2, [r3, #0]
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007e86:	601a      	str	r2, [r3, #0]
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	681a      	ldr	r2, [r3, #0]
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007e96:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	2201      	movs	r2, #1
 8007e9c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8007ea8:	2303      	movs	r3, #3
 8007eaa:	e010      	b.n	8007ece <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007eac:	69bb      	ldr	r3, [r7, #24]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d101      	bne.n	8007eb6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8007eb6:	69bb      	ldr	r3, [r7, #24]
 8007eb8:	3b01      	subs	r3, #1
 8007eba:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	689a      	ldr	r2, [r3, #8]
 8007ec2:	68bb      	ldr	r3, [r7, #8]
 8007ec4:	4013      	ands	r3, r2
 8007ec6:	687a      	ldr	r2, [r7, #4]
 8007ec8:	429a      	cmp	r2, r3
 8007eca:	d196      	bne.n	8007dfa <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8007ecc:	2300      	movs	r3, #0
}
 8007ece:	4618      	mov	r0, r3
 8007ed0:	3728      	adds	r7, #40	@ 0x28
 8007ed2:	46bd      	mov	sp, r7
 8007ed4:	bd80      	pop	{r7, pc}
 8007ed6:	bf00      	nop
 8007ed8:	2000000c 	.word	0x2000000c

08007edc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b086      	sub	sp, #24
 8007ee0:	af02      	add	r7, sp, #8
 8007ee2:	60f8      	str	r0, [r7, #12]
 8007ee4:	60b9      	str	r1, [r7, #8]
 8007ee6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	9300      	str	r3, [sp, #0]
 8007eec:	68bb      	ldr	r3, [r7, #8]
 8007eee:	2200      	movs	r2, #0
 8007ef0:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8007ef4:	68f8      	ldr	r0, [r7, #12]
 8007ef6:	f7ff ff5b 	bl	8007db0 <SPI_WaitFifoStateUntilTimeout>
 8007efa:	4603      	mov	r3, r0
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d007      	beq.n	8007f10 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007f04:	f043 0220 	orr.w	r2, r3, #32
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007f0c:	2303      	movs	r3, #3
 8007f0e:	e027      	b.n	8007f60 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	9300      	str	r3, [sp, #0]
 8007f14:	68bb      	ldr	r3, [r7, #8]
 8007f16:	2200      	movs	r2, #0
 8007f18:	2180      	movs	r1, #128	@ 0x80
 8007f1a:	68f8      	ldr	r0, [r7, #12]
 8007f1c:	f7ff fec0 	bl	8007ca0 <SPI_WaitFlagStateUntilTimeout>
 8007f20:	4603      	mov	r3, r0
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d007      	beq.n	8007f36 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007f2a:	f043 0220 	orr.w	r2, r3, #32
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007f32:	2303      	movs	r3, #3
 8007f34:	e014      	b.n	8007f60 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	9300      	str	r3, [sp, #0]
 8007f3a:	68bb      	ldr	r3, [r7, #8]
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8007f42:	68f8      	ldr	r0, [r7, #12]
 8007f44:	f7ff ff34 	bl	8007db0 <SPI_WaitFifoStateUntilTimeout>
 8007f48:	4603      	mov	r3, r0
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d007      	beq.n	8007f5e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007f52:	f043 0220 	orr.w	r2, r3, #32
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007f5a:	2303      	movs	r3, #3
 8007f5c:	e000      	b.n	8007f60 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8007f5e:	2300      	movs	r3, #0
}
 8007f60:	4618      	mov	r0, r3
 8007f62:	3710      	adds	r7, #16
 8007f64:	46bd      	mov	sp, r7
 8007f66:	bd80      	pop	{r7, pc}

08007f68 <rand>:
 8007f68:	4b16      	ldr	r3, [pc, #88]	@ (8007fc4 <rand+0x5c>)
 8007f6a:	b510      	push	{r4, lr}
 8007f6c:	681c      	ldr	r4, [r3, #0]
 8007f6e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8007f70:	b9b3      	cbnz	r3, 8007fa0 <rand+0x38>
 8007f72:	2018      	movs	r0, #24
 8007f74:	f000 fa20 	bl	80083b8 <malloc>
 8007f78:	4602      	mov	r2, r0
 8007f7a:	6320      	str	r0, [r4, #48]	@ 0x30
 8007f7c:	b920      	cbnz	r0, 8007f88 <rand+0x20>
 8007f7e:	4b12      	ldr	r3, [pc, #72]	@ (8007fc8 <rand+0x60>)
 8007f80:	4812      	ldr	r0, [pc, #72]	@ (8007fcc <rand+0x64>)
 8007f82:	2152      	movs	r1, #82	@ 0x52
 8007f84:	f000 f9b0 	bl	80082e8 <__assert_func>
 8007f88:	4911      	ldr	r1, [pc, #68]	@ (8007fd0 <rand+0x68>)
 8007f8a:	4b12      	ldr	r3, [pc, #72]	@ (8007fd4 <rand+0x6c>)
 8007f8c:	e9c0 1300 	strd	r1, r3, [r0]
 8007f90:	4b11      	ldr	r3, [pc, #68]	@ (8007fd8 <rand+0x70>)
 8007f92:	6083      	str	r3, [r0, #8]
 8007f94:	230b      	movs	r3, #11
 8007f96:	8183      	strh	r3, [r0, #12]
 8007f98:	2100      	movs	r1, #0
 8007f9a:	2001      	movs	r0, #1
 8007f9c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8007fa0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8007fa2:	480e      	ldr	r0, [pc, #56]	@ (8007fdc <rand+0x74>)
 8007fa4:	690b      	ldr	r3, [r1, #16]
 8007fa6:	694c      	ldr	r4, [r1, #20]
 8007fa8:	4a0d      	ldr	r2, [pc, #52]	@ (8007fe0 <rand+0x78>)
 8007faa:	4358      	muls	r0, r3
 8007fac:	fb02 0004 	mla	r0, r2, r4, r0
 8007fb0:	fba3 3202 	umull	r3, r2, r3, r2
 8007fb4:	3301      	adds	r3, #1
 8007fb6:	eb40 0002 	adc.w	r0, r0, r2
 8007fba:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8007fbe:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8007fc2:	bd10      	pop	{r4, pc}
 8007fc4:	20000024 	.word	0x20000024
 8007fc8:	0800a610 	.word	0x0800a610
 8007fcc:	0800a627 	.word	0x0800a627
 8007fd0:	abcd330e 	.word	0xabcd330e
 8007fd4:	e66d1234 	.word	0xe66d1234
 8007fd8:	0005deec 	.word	0x0005deec
 8007fdc:	5851f42d 	.word	0x5851f42d
 8007fe0:	4c957f2d 	.word	0x4c957f2d

08007fe4 <std>:
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	b510      	push	{r4, lr}
 8007fe8:	4604      	mov	r4, r0
 8007fea:	e9c0 3300 	strd	r3, r3, [r0]
 8007fee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007ff2:	6083      	str	r3, [r0, #8]
 8007ff4:	8181      	strh	r1, [r0, #12]
 8007ff6:	6643      	str	r3, [r0, #100]	@ 0x64
 8007ff8:	81c2      	strh	r2, [r0, #14]
 8007ffa:	6183      	str	r3, [r0, #24]
 8007ffc:	4619      	mov	r1, r3
 8007ffe:	2208      	movs	r2, #8
 8008000:	305c      	adds	r0, #92	@ 0x5c
 8008002:	f000 f8f4 	bl	80081ee <memset>
 8008006:	4b0d      	ldr	r3, [pc, #52]	@ (800803c <std+0x58>)
 8008008:	6263      	str	r3, [r4, #36]	@ 0x24
 800800a:	4b0d      	ldr	r3, [pc, #52]	@ (8008040 <std+0x5c>)
 800800c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800800e:	4b0d      	ldr	r3, [pc, #52]	@ (8008044 <std+0x60>)
 8008010:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008012:	4b0d      	ldr	r3, [pc, #52]	@ (8008048 <std+0x64>)
 8008014:	6323      	str	r3, [r4, #48]	@ 0x30
 8008016:	4b0d      	ldr	r3, [pc, #52]	@ (800804c <std+0x68>)
 8008018:	6224      	str	r4, [r4, #32]
 800801a:	429c      	cmp	r4, r3
 800801c:	d006      	beq.n	800802c <std+0x48>
 800801e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008022:	4294      	cmp	r4, r2
 8008024:	d002      	beq.n	800802c <std+0x48>
 8008026:	33d0      	adds	r3, #208	@ 0xd0
 8008028:	429c      	cmp	r4, r3
 800802a:	d105      	bne.n	8008038 <std+0x54>
 800802c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008030:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008034:	f000 b954 	b.w	80082e0 <__retarget_lock_init_recursive>
 8008038:	bd10      	pop	{r4, pc}
 800803a:	bf00      	nop
 800803c:	08008169 	.word	0x08008169
 8008040:	0800818b 	.word	0x0800818b
 8008044:	080081c3 	.word	0x080081c3
 8008048:	080081e7 	.word	0x080081e7
 800804c:	20002c6c 	.word	0x20002c6c

08008050 <stdio_exit_handler>:
 8008050:	4a02      	ldr	r2, [pc, #8]	@ (800805c <stdio_exit_handler+0xc>)
 8008052:	4903      	ldr	r1, [pc, #12]	@ (8008060 <stdio_exit_handler+0x10>)
 8008054:	4803      	ldr	r0, [pc, #12]	@ (8008064 <stdio_exit_handler+0x14>)
 8008056:	f000 b869 	b.w	800812c <_fwalk_sglue>
 800805a:	bf00      	nop
 800805c:	20000018 	.word	0x20000018
 8008060:	0800862d 	.word	0x0800862d
 8008064:	20000028 	.word	0x20000028

08008068 <cleanup_stdio>:
 8008068:	6841      	ldr	r1, [r0, #4]
 800806a:	4b0c      	ldr	r3, [pc, #48]	@ (800809c <cleanup_stdio+0x34>)
 800806c:	4299      	cmp	r1, r3
 800806e:	b510      	push	{r4, lr}
 8008070:	4604      	mov	r4, r0
 8008072:	d001      	beq.n	8008078 <cleanup_stdio+0x10>
 8008074:	f000 fada 	bl	800862c <_fflush_r>
 8008078:	68a1      	ldr	r1, [r4, #8]
 800807a:	4b09      	ldr	r3, [pc, #36]	@ (80080a0 <cleanup_stdio+0x38>)
 800807c:	4299      	cmp	r1, r3
 800807e:	d002      	beq.n	8008086 <cleanup_stdio+0x1e>
 8008080:	4620      	mov	r0, r4
 8008082:	f000 fad3 	bl	800862c <_fflush_r>
 8008086:	68e1      	ldr	r1, [r4, #12]
 8008088:	4b06      	ldr	r3, [pc, #24]	@ (80080a4 <cleanup_stdio+0x3c>)
 800808a:	4299      	cmp	r1, r3
 800808c:	d004      	beq.n	8008098 <cleanup_stdio+0x30>
 800808e:	4620      	mov	r0, r4
 8008090:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008094:	f000 baca 	b.w	800862c <_fflush_r>
 8008098:	bd10      	pop	{r4, pc}
 800809a:	bf00      	nop
 800809c:	20002c6c 	.word	0x20002c6c
 80080a0:	20002cd4 	.word	0x20002cd4
 80080a4:	20002d3c 	.word	0x20002d3c

080080a8 <global_stdio_init.part.0>:
 80080a8:	b510      	push	{r4, lr}
 80080aa:	4b0b      	ldr	r3, [pc, #44]	@ (80080d8 <global_stdio_init.part.0+0x30>)
 80080ac:	4c0b      	ldr	r4, [pc, #44]	@ (80080dc <global_stdio_init.part.0+0x34>)
 80080ae:	4a0c      	ldr	r2, [pc, #48]	@ (80080e0 <global_stdio_init.part.0+0x38>)
 80080b0:	601a      	str	r2, [r3, #0]
 80080b2:	4620      	mov	r0, r4
 80080b4:	2200      	movs	r2, #0
 80080b6:	2104      	movs	r1, #4
 80080b8:	f7ff ff94 	bl	8007fe4 <std>
 80080bc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80080c0:	2201      	movs	r2, #1
 80080c2:	2109      	movs	r1, #9
 80080c4:	f7ff ff8e 	bl	8007fe4 <std>
 80080c8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80080cc:	2202      	movs	r2, #2
 80080ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80080d2:	2112      	movs	r1, #18
 80080d4:	f7ff bf86 	b.w	8007fe4 <std>
 80080d8:	20002da4 	.word	0x20002da4
 80080dc:	20002c6c 	.word	0x20002c6c
 80080e0:	08008051 	.word	0x08008051

080080e4 <__sfp_lock_acquire>:
 80080e4:	4801      	ldr	r0, [pc, #4]	@ (80080ec <__sfp_lock_acquire+0x8>)
 80080e6:	f000 b8fc 	b.w	80082e2 <__retarget_lock_acquire_recursive>
 80080ea:	bf00      	nop
 80080ec:	20002dad 	.word	0x20002dad

080080f0 <__sfp_lock_release>:
 80080f0:	4801      	ldr	r0, [pc, #4]	@ (80080f8 <__sfp_lock_release+0x8>)
 80080f2:	f000 b8f7 	b.w	80082e4 <__retarget_lock_release_recursive>
 80080f6:	bf00      	nop
 80080f8:	20002dad 	.word	0x20002dad

080080fc <__sinit>:
 80080fc:	b510      	push	{r4, lr}
 80080fe:	4604      	mov	r4, r0
 8008100:	f7ff fff0 	bl	80080e4 <__sfp_lock_acquire>
 8008104:	6a23      	ldr	r3, [r4, #32]
 8008106:	b11b      	cbz	r3, 8008110 <__sinit+0x14>
 8008108:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800810c:	f7ff bff0 	b.w	80080f0 <__sfp_lock_release>
 8008110:	4b04      	ldr	r3, [pc, #16]	@ (8008124 <__sinit+0x28>)
 8008112:	6223      	str	r3, [r4, #32]
 8008114:	4b04      	ldr	r3, [pc, #16]	@ (8008128 <__sinit+0x2c>)
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	2b00      	cmp	r3, #0
 800811a:	d1f5      	bne.n	8008108 <__sinit+0xc>
 800811c:	f7ff ffc4 	bl	80080a8 <global_stdio_init.part.0>
 8008120:	e7f2      	b.n	8008108 <__sinit+0xc>
 8008122:	bf00      	nop
 8008124:	08008069 	.word	0x08008069
 8008128:	20002da4 	.word	0x20002da4

0800812c <_fwalk_sglue>:
 800812c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008130:	4607      	mov	r7, r0
 8008132:	4688      	mov	r8, r1
 8008134:	4614      	mov	r4, r2
 8008136:	2600      	movs	r6, #0
 8008138:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800813c:	f1b9 0901 	subs.w	r9, r9, #1
 8008140:	d505      	bpl.n	800814e <_fwalk_sglue+0x22>
 8008142:	6824      	ldr	r4, [r4, #0]
 8008144:	2c00      	cmp	r4, #0
 8008146:	d1f7      	bne.n	8008138 <_fwalk_sglue+0xc>
 8008148:	4630      	mov	r0, r6
 800814a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800814e:	89ab      	ldrh	r3, [r5, #12]
 8008150:	2b01      	cmp	r3, #1
 8008152:	d907      	bls.n	8008164 <_fwalk_sglue+0x38>
 8008154:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008158:	3301      	adds	r3, #1
 800815a:	d003      	beq.n	8008164 <_fwalk_sglue+0x38>
 800815c:	4629      	mov	r1, r5
 800815e:	4638      	mov	r0, r7
 8008160:	47c0      	blx	r8
 8008162:	4306      	orrs	r6, r0
 8008164:	3568      	adds	r5, #104	@ 0x68
 8008166:	e7e9      	b.n	800813c <_fwalk_sglue+0x10>

08008168 <__sread>:
 8008168:	b510      	push	{r4, lr}
 800816a:	460c      	mov	r4, r1
 800816c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008170:	f000 f868 	bl	8008244 <_read_r>
 8008174:	2800      	cmp	r0, #0
 8008176:	bfab      	itete	ge
 8008178:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800817a:	89a3      	ldrhlt	r3, [r4, #12]
 800817c:	181b      	addge	r3, r3, r0
 800817e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008182:	bfac      	ite	ge
 8008184:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008186:	81a3      	strhlt	r3, [r4, #12]
 8008188:	bd10      	pop	{r4, pc}

0800818a <__swrite>:
 800818a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800818e:	461f      	mov	r7, r3
 8008190:	898b      	ldrh	r3, [r1, #12]
 8008192:	05db      	lsls	r3, r3, #23
 8008194:	4605      	mov	r5, r0
 8008196:	460c      	mov	r4, r1
 8008198:	4616      	mov	r6, r2
 800819a:	d505      	bpl.n	80081a8 <__swrite+0x1e>
 800819c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081a0:	2302      	movs	r3, #2
 80081a2:	2200      	movs	r2, #0
 80081a4:	f000 f83c 	bl	8008220 <_lseek_r>
 80081a8:	89a3      	ldrh	r3, [r4, #12]
 80081aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80081ae:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80081b2:	81a3      	strh	r3, [r4, #12]
 80081b4:	4632      	mov	r2, r6
 80081b6:	463b      	mov	r3, r7
 80081b8:	4628      	mov	r0, r5
 80081ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80081be:	f000 b853 	b.w	8008268 <_write_r>

080081c2 <__sseek>:
 80081c2:	b510      	push	{r4, lr}
 80081c4:	460c      	mov	r4, r1
 80081c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081ca:	f000 f829 	bl	8008220 <_lseek_r>
 80081ce:	1c43      	adds	r3, r0, #1
 80081d0:	89a3      	ldrh	r3, [r4, #12]
 80081d2:	bf15      	itete	ne
 80081d4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80081d6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80081da:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80081de:	81a3      	strheq	r3, [r4, #12]
 80081e0:	bf18      	it	ne
 80081e2:	81a3      	strhne	r3, [r4, #12]
 80081e4:	bd10      	pop	{r4, pc}

080081e6 <__sclose>:
 80081e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081ea:	f000 b809 	b.w	8008200 <_close_r>

080081ee <memset>:
 80081ee:	4402      	add	r2, r0
 80081f0:	4603      	mov	r3, r0
 80081f2:	4293      	cmp	r3, r2
 80081f4:	d100      	bne.n	80081f8 <memset+0xa>
 80081f6:	4770      	bx	lr
 80081f8:	f803 1b01 	strb.w	r1, [r3], #1
 80081fc:	e7f9      	b.n	80081f2 <memset+0x4>
	...

08008200 <_close_r>:
 8008200:	b538      	push	{r3, r4, r5, lr}
 8008202:	4d06      	ldr	r5, [pc, #24]	@ (800821c <_close_r+0x1c>)
 8008204:	2300      	movs	r3, #0
 8008206:	4604      	mov	r4, r0
 8008208:	4608      	mov	r0, r1
 800820a:	602b      	str	r3, [r5, #0]
 800820c:	f7fc f81a 	bl	8004244 <_close>
 8008210:	1c43      	adds	r3, r0, #1
 8008212:	d102      	bne.n	800821a <_close_r+0x1a>
 8008214:	682b      	ldr	r3, [r5, #0]
 8008216:	b103      	cbz	r3, 800821a <_close_r+0x1a>
 8008218:	6023      	str	r3, [r4, #0]
 800821a:	bd38      	pop	{r3, r4, r5, pc}
 800821c:	20002da8 	.word	0x20002da8

08008220 <_lseek_r>:
 8008220:	b538      	push	{r3, r4, r5, lr}
 8008222:	4d07      	ldr	r5, [pc, #28]	@ (8008240 <_lseek_r+0x20>)
 8008224:	4604      	mov	r4, r0
 8008226:	4608      	mov	r0, r1
 8008228:	4611      	mov	r1, r2
 800822a:	2200      	movs	r2, #0
 800822c:	602a      	str	r2, [r5, #0]
 800822e:	461a      	mov	r2, r3
 8008230:	f7fc f82f 	bl	8004292 <_lseek>
 8008234:	1c43      	adds	r3, r0, #1
 8008236:	d102      	bne.n	800823e <_lseek_r+0x1e>
 8008238:	682b      	ldr	r3, [r5, #0]
 800823a:	b103      	cbz	r3, 800823e <_lseek_r+0x1e>
 800823c:	6023      	str	r3, [r4, #0]
 800823e:	bd38      	pop	{r3, r4, r5, pc}
 8008240:	20002da8 	.word	0x20002da8

08008244 <_read_r>:
 8008244:	b538      	push	{r3, r4, r5, lr}
 8008246:	4d07      	ldr	r5, [pc, #28]	@ (8008264 <_read_r+0x20>)
 8008248:	4604      	mov	r4, r0
 800824a:	4608      	mov	r0, r1
 800824c:	4611      	mov	r1, r2
 800824e:	2200      	movs	r2, #0
 8008250:	602a      	str	r2, [r5, #0]
 8008252:	461a      	mov	r2, r3
 8008254:	f7fb ffbd 	bl	80041d2 <_read>
 8008258:	1c43      	adds	r3, r0, #1
 800825a:	d102      	bne.n	8008262 <_read_r+0x1e>
 800825c:	682b      	ldr	r3, [r5, #0]
 800825e:	b103      	cbz	r3, 8008262 <_read_r+0x1e>
 8008260:	6023      	str	r3, [r4, #0]
 8008262:	bd38      	pop	{r3, r4, r5, pc}
 8008264:	20002da8 	.word	0x20002da8

08008268 <_write_r>:
 8008268:	b538      	push	{r3, r4, r5, lr}
 800826a:	4d07      	ldr	r5, [pc, #28]	@ (8008288 <_write_r+0x20>)
 800826c:	4604      	mov	r4, r0
 800826e:	4608      	mov	r0, r1
 8008270:	4611      	mov	r1, r2
 8008272:	2200      	movs	r2, #0
 8008274:	602a      	str	r2, [r5, #0]
 8008276:	461a      	mov	r2, r3
 8008278:	f7fb ffc8 	bl	800420c <_write>
 800827c:	1c43      	adds	r3, r0, #1
 800827e:	d102      	bne.n	8008286 <_write_r+0x1e>
 8008280:	682b      	ldr	r3, [r5, #0]
 8008282:	b103      	cbz	r3, 8008286 <_write_r+0x1e>
 8008284:	6023      	str	r3, [r4, #0]
 8008286:	bd38      	pop	{r3, r4, r5, pc}
 8008288:	20002da8 	.word	0x20002da8

0800828c <__errno>:
 800828c:	4b01      	ldr	r3, [pc, #4]	@ (8008294 <__errno+0x8>)
 800828e:	6818      	ldr	r0, [r3, #0]
 8008290:	4770      	bx	lr
 8008292:	bf00      	nop
 8008294:	20000024 	.word	0x20000024

08008298 <__libc_init_array>:
 8008298:	b570      	push	{r4, r5, r6, lr}
 800829a:	4d0d      	ldr	r5, [pc, #52]	@ (80082d0 <__libc_init_array+0x38>)
 800829c:	4c0d      	ldr	r4, [pc, #52]	@ (80082d4 <__libc_init_array+0x3c>)
 800829e:	1b64      	subs	r4, r4, r5
 80082a0:	10a4      	asrs	r4, r4, #2
 80082a2:	2600      	movs	r6, #0
 80082a4:	42a6      	cmp	r6, r4
 80082a6:	d109      	bne.n	80082bc <__libc_init_array+0x24>
 80082a8:	4d0b      	ldr	r5, [pc, #44]	@ (80082d8 <__libc_init_array+0x40>)
 80082aa:	4c0c      	ldr	r4, [pc, #48]	@ (80082dc <__libc_init_array+0x44>)
 80082ac:	f001 fdc4 	bl	8009e38 <_init>
 80082b0:	1b64      	subs	r4, r4, r5
 80082b2:	10a4      	asrs	r4, r4, #2
 80082b4:	2600      	movs	r6, #0
 80082b6:	42a6      	cmp	r6, r4
 80082b8:	d105      	bne.n	80082c6 <__libc_init_array+0x2e>
 80082ba:	bd70      	pop	{r4, r5, r6, pc}
 80082bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80082c0:	4798      	blx	r3
 80082c2:	3601      	adds	r6, #1
 80082c4:	e7ee      	b.n	80082a4 <__libc_init_array+0xc>
 80082c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80082ca:	4798      	blx	r3
 80082cc:	3601      	adds	r6, #1
 80082ce:	e7f2      	b.n	80082b6 <__libc_init_array+0x1e>
 80082d0:	0800a738 	.word	0x0800a738
 80082d4:	0800a738 	.word	0x0800a738
 80082d8:	0800a738 	.word	0x0800a738
 80082dc:	0800a73c 	.word	0x0800a73c

080082e0 <__retarget_lock_init_recursive>:
 80082e0:	4770      	bx	lr

080082e2 <__retarget_lock_acquire_recursive>:
 80082e2:	4770      	bx	lr

080082e4 <__retarget_lock_release_recursive>:
 80082e4:	4770      	bx	lr
	...

080082e8 <__assert_func>:
 80082e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80082ea:	4614      	mov	r4, r2
 80082ec:	461a      	mov	r2, r3
 80082ee:	4b09      	ldr	r3, [pc, #36]	@ (8008314 <__assert_func+0x2c>)
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	4605      	mov	r5, r0
 80082f4:	68d8      	ldr	r0, [r3, #12]
 80082f6:	b14c      	cbz	r4, 800830c <__assert_func+0x24>
 80082f8:	4b07      	ldr	r3, [pc, #28]	@ (8008318 <__assert_func+0x30>)
 80082fa:	9100      	str	r1, [sp, #0]
 80082fc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008300:	4906      	ldr	r1, [pc, #24]	@ (800831c <__assert_func+0x34>)
 8008302:	462b      	mov	r3, r5
 8008304:	f000 f9ba 	bl	800867c <fiprintf>
 8008308:	f000 f9da 	bl	80086c0 <abort>
 800830c:	4b04      	ldr	r3, [pc, #16]	@ (8008320 <__assert_func+0x38>)
 800830e:	461c      	mov	r4, r3
 8008310:	e7f3      	b.n	80082fa <__assert_func+0x12>
 8008312:	bf00      	nop
 8008314:	20000024 	.word	0x20000024
 8008318:	0800a67f 	.word	0x0800a67f
 800831c:	0800a68c 	.word	0x0800a68c
 8008320:	0800a6ba 	.word	0x0800a6ba

08008324 <_free_r>:
 8008324:	b538      	push	{r3, r4, r5, lr}
 8008326:	4605      	mov	r5, r0
 8008328:	2900      	cmp	r1, #0
 800832a:	d041      	beq.n	80083b0 <_free_r+0x8c>
 800832c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008330:	1f0c      	subs	r4, r1, #4
 8008332:	2b00      	cmp	r3, #0
 8008334:	bfb8      	it	lt
 8008336:	18e4      	addlt	r4, r4, r3
 8008338:	f000 f8e8 	bl	800850c <__malloc_lock>
 800833c:	4a1d      	ldr	r2, [pc, #116]	@ (80083b4 <_free_r+0x90>)
 800833e:	6813      	ldr	r3, [r2, #0]
 8008340:	b933      	cbnz	r3, 8008350 <_free_r+0x2c>
 8008342:	6063      	str	r3, [r4, #4]
 8008344:	6014      	str	r4, [r2, #0]
 8008346:	4628      	mov	r0, r5
 8008348:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800834c:	f000 b8e4 	b.w	8008518 <__malloc_unlock>
 8008350:	42a3      	cmp	r3, r4
 8008352:	d908      	bls.n	8008366 <_free_r+0x42>
 8008354:	6820      	ldr	r0, [r4, #0]
 8008356:	1821      	adds	r1, r4, r0
 8008358:	428b      	cmp	r3, r1
 800835a:	bf01      	itttt	eq
 800835c:	6819      	ldreq	r1, [r3, #0]
 800835e:	685b      	ldreq	r3, [r3, #4]
 8008360:	1809      	addeq	r1, r1, r0
 8008362:	6021      	streq	r1, [r4, #0]
 8008364:	e7ed      	b.n	8008342 <_free_r+0x1e>
 8008366:	461a      	mov	r2, r3
 8008368:	685b      	ldr	r3, [r3, #4]
 800836a:	b10b      	cbz	r3, 8008370 <_free_r+0x4c>
 800836c:	42a3      	cmp	r3, r4
 800836e:	d9fa      	bls.n	8008366 <_free_r+0x42>
 8008370:	6811      	ldr	r1, [r2, #0]
 8008372:	1850      	adds	r0, r2, r1
 8008374:	42a0      	cmp	r0, r4
 8008376:	d10b      	bne.n	8008390 <_free_r+0x6c>
 8008378:	6820      	ldr	r0, [r4, #0]
 800837a:	4401      	add	r1, r0
 800837c:	1850      	adds	r0, r2, r1
 800837e:	4283      	cmp	r3, r0
 8008380:	6011      	str	r1, [r2, #0]
 8008382:	d1e0      	bne.n	8008346 <_free_r+0x22>
 8008384:	6818      	ldr	r0, [r3, #0]
 8008386:	685b      	ldr	r3, [r3, #4]
 8008388:	6053      	str	r3, [r2, #4]
 800838a:	4408      	add	r0, r1
 800838c:	6010      	str	r0, [r2, #0]
 800838e:	e7da      	b.n	8008346 <_free_r+0x22>
 8008390:	d902      	bls.n	8008398 <_free_r+0x74>
 8008392:	230c      	movs	r3, #12
 8008394:	602b      	str	r3, [r5, #0]
 8008396:	e7d6      	b.n	8008346 <_free_r+0x22>
 8008398:	6820      	ldr	r0, [r4, #0]
 800839a:	1821      	adds	r1, r4, r0
 800839c:	428b      	cmp	r3, r1
 800839e:	bf04      	itt	eq
 80083a0:	6819      	ldreq	r1, [r3, #0]
 80083a2:	685b      	ldreq	r3, [r3, #4]
 80083a4:	6063      	str	r3, [r4, #4]
 80083a6:	bf04      	itt	eq
 80083a8:	1809      	addeq	r1, r1, r0
 80083aa:	6021      	streq	r1, [r4, #0]
 80083ac:	6054      	str	r4, [r2, #4]
 80083ae:	e7ca      	b.n	8008346 <_free_r+0x22>
 80083b0:	bd38      	pop	{r3, r4, r5, pc}
 80083b2:	bf00      	nop
 80083b4:	20002db4 	.word	0x20002db4

080083b8 <malloc>:
 80083b8:	4b02      	ldr	r3, [pc, #8]	@ (80083c4 <malloc+0xc>)
 80083ba:	4601      	mov	r1, r0
 80083bc:	6818      	ldr	r0, [r3, #0]
 80083be:	f000 b825 	b.w	800840c <_malloc_r>
 80083c2:	bf00      	nop
 80083c4:	20000024 	.word	0x20000024

080083c8 <sbrk_aligned>:
 80083c8:	b570      	push	{r4, r5, r6, lr}
 80083ca:	4e0f      	ldr	r6, [pc, #60]	@ (8008408 <sbrk_aligned+0x40>)
 80083cc:	460c      	mov	r4, r1
 80083ce:	6831      	ldr	r1, [r6, #0]
 80083d0:	4605      	mov	r5, r0
 80083d2:	b911      	cbnz	r1, 80083da <sbrk_aligned+0x12>
 80083d4:	f000 f964 	bl	80086a0 <_sbrk_r>
 80083d8:	6030      	str	r0, [r6, #0]
 80083da:	4621      	mov	r1, r4
 80083dc:	4628      	mov	r0, r5
 80083de:	f000 f95f 	bl	80086a0 <_sbrk_r>
 80083e2:	1c43      	adds	r3, r0, #1
 80083e4:	d103      	bne.n	80083ee <sbrk_aligned+0x26>
 80083e6:	f04f 34ff 	mov.w	r4, #4294967295
 80083ea:	4620      	mov	r0, r4
 80083ec:	bd70      	pop	{r4, r5, r6, pc}
 80083ee:	1cc4      	adds	r4, r0, #3
 80083f0:	f024 0403 	bic.w	r4, r4, #3
 80083f4:	42a0      	cmp	r0, r4
 80083f6:	d0f8      	beq.n	80083ea <sbrk_aligned+0x22>
 80083f8:	1a21      	subs	r1, r4, r0
 80083fa:	4628      	mov	r0, r5
 80083fc:	f000 f950 	bl	80086a0 <_sbrk_r>
 8008400:	3001      	adds	r0, #1
 8008402:	d1f2      	bne.n	80083ea <sbrk_aligned+0x22>
 8008404:	e7ef      	b.n	80083e6 <sbrk_aligned+0x1e>
 8008406:	bf00      	nop
 8008408:	20002db0 	.word	0x20002db0

0800840c <_malloc_r>:
 800840c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008410:	1ccd      	adds	r5, r1, #3
 8008412:	f025 0503 	bic.w	r5, r5, #3
 8008416:	3508      	adds	r5, #8
 8008418:	2d0c      	cmp	r5, #12
 800841a:	bf38      	it	cc
 800841c:	250c      	movcc	r5, #12
 800841e:	2d00      	cmp	r5, #0
 8008420:	4606      	mov	r6, r0
 8008422:	db01      	blt.n	8008428 <_malloc_r+0x1c>
 8008424:	42a9      	cmp	r1, r5
 8008426:	d904      	bls.n	8008432 <_malloc_r+0x26>
 8008428:	230c      	movs	r3, #12
 800842a:	6033      	str	r3, [r6, #0]
 800842c:	2000      	movs	r0, #0
 800842e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008432:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008508 <_malloc_r+0xfc>
 8008436:	f000 f869 	bl	800850c <__malloc_lock>
 800843a:	f8d8 3000 	ldr.w	r3, [r8]
 800843e:	461c      	mov	r4, r3
 8008440:	bb44      	cbnz	r4, 8008494 <_malloc_r+0x88>
 8008442:	4629      	mov	r1, r5
 8008444:	4630      	mov	r0, r6
 8008446:	f7ff ffbf 	bl	80083c8 <sbrk_aligned>
 800844a:	1c43      	adds	r3, r0, #1
 800844c:	4604      	mov	r4, r0
 800844e:	d158      	bne.n	8008502 <_malloc_r+0xf6>
 8008450:	f8d8 4000 	ldr.w	r4, [r8]
 8008454:	4627      	mov	r7, r4
 8008456:	2f00      	cmp	r7, #0
 8008458:	d143      	bne.n	80084e2 <_malloc_r+0xd6>
 800845a:	2c00      	cmp	r4, #0
 800845c:	d04b      	beq.n	80084f6 <_malloc_r+0xea>
 800845e:	6823      	ldr	r3, [r4, #0]
 8008460:	4639      	mov	r1, r7
 8008462:	4630      	mov	r0, r6
 8008464:	eb04 0903 	add.w	r9, r4, r3
 8008468:	f000 f91a 	bl	80086a0 <_sbrk_r>
 800846c:	4581      	cmp	r9, r0
 800846e:	d142      	bne.n	80084f6 <_malloc_r+0xea>
 8008470:	6821      	ldr	r1, [r4, #0]
 8008472:	1a6d      	subs	r5, r5, r1
 8008474:	4629      	mov	r1, r5
 8008476:	4630      	mov	r0, r6
 8008478:	f7ff ffa6 	bl	80083c8 <sbrk_aligned>
 800847c:	3001      	adds	r0, #1
 800847e:	d03a      	beq.n	80084f6 <_malloc_r+0xea>
 8008480:	6823      	ldr	r3, [r4, #0]
 8008482:	442b      	add	r3, r5
 8008484:	6023      	str	r3, [r4, #0]
 8008486:	f8d8 3000 	ldr.w	r3, [r8]
 800848a:	685a      	ldr	r2, [r3, #4]
 800848c:	bb62      	cbnz	r2, 80084e8 <_malloc_r+0xdc>
 800848e:	f8c8 7000 	str.w	r7, [r8]
 8008492:	e00f      	b.n	80084b4 <_malloc_r+0xa8>
 8008494:	6822      	ldr	r2, [r4, #0]
 8008496:	1b52      	subs	r2, r2, r5
 8008498:	d420      	bmi.n	80084dc <_malloc_r+0xd0>
 800849a:	2a0b      	cmp	r2, #11
 800849c:	d917      	bls.n	80084ce <_malloc_r+0xc2>
 800849e:	1961      	adds	r1, r4, r5
 80084a0:	42a3      	cmp	r3, r4
 80084a2:	6025      	str	r5, [r4, #0]
 80084a4:	bf18      	it	ne
 80084a6:	6059      	strne	r1, [r3, #4]
 80084a8:	6863      	ldr	r3, [r4, #4]
 80084aa:	bf08      	it	eq
 80084ac:	f8c8 1000 	streq.w	r1, [r8]
 80084b0:	5162      	str	r2, [r4, r5]
 80084b2:	604b      	str	r3, [r1, #4]
 80084b4:	4630      	mov	r0, r6
 80084b6:	f000 f82f 	bl	8008518 <__malloc_unlock>
 80084ba:	f104 000b 	add.w	r0, r4, #11
 80084be:	1d23      	adds	r3, r4, #4
 80084c0:	f020 0007 	bic.w	r0, r0, #7
 80084c4:	1ac2      	subs	r2, r0, r3
 80084c6:	bf1c      	itt	ne
 80084c8:	1a1b      	subne	r3, r3, r0
 80084ca:	50a3      	strne	r3, [r4, r2]
 80084cc:	e7af      	b.n	800842e <_malloc_r+0x22>
 80084ce:	6862      	ldr	r2, [r4, #4]
 80084d0:	42a3      	cmp	r3, r4
 80084d2:	bf0c      	ite	eq
 80084d4:	f8c8 2000 	streq.w	r2, [r8]
 80084d8:	605a      	strne	r2, [r3, #4]
 80084da:	e7eb      	b.n	80084b4 <_malloc_r+0xa8>
 80084dc:	4623      	mov	r3, r4
 80084de:	6864      	ldr	r4, [r4, #4]
 80084e0:	e7ae      	b.n	8008440 <_malloc_r+0x34>
 80084e2:	463c      	mov	r4, r7
 80084e4:	687f      	ldr	r7, [r7, #4]
 80084e6:	e7b6      	b.n	8008456 <_malloc_r+0x4a>
 80084e8:	461a      	mov	r2, r3
 80084ea:	685b      	ldr	r3, [r3, #4]
 80084ec:	42a3      	cmp	r3, r4
 80084ee:	d1fb      	bne.n	80084e8 <_malloc_r+0xdc>
 80084f0:	2300      	movs	r3, #0
 80084f2:	6053      	str	r3, [r2, #4]
 80084f4:	e7de      	b.n	80084b4 <_malloc_r+0xa8>
 80084f6:	230c      	movs	r3, #12
 80084f8:	6033      	str	r3, [r6, #0]
 80084fa:	4630      	mov	r0, r6
 80084fc:	f000 f80c 	bl	8008518 <__malloc_unlock>
 8008500:	e794      	b.n	800842c <_malloc_r+0x20>
 8008502:	6005      	str	r5, [r0, #0]
 8008504:	e7d6      	b.n	80084b4 <_malloc_r+0xa8>
 8008506:	bf00      	nop
 8008508:	20002db4 	.word	0x20002db4

0800850c <__malloc_lock>:
 800850c:	4801      	ldr	r0, [pc, #4]	@ (8008514 <__malloc_lock+0x8>)
 800850e:	f7ff bee8 	b.w	80082e2 <__retarget_lock_acquire_recursive>
 8008512:	bf00      	nop
 8008514:	20002dac 	.word	0x20002dac

08008518 <__malloc_unlock>:
 8008518:	4801      	ldr	r0, [pc, #4]	@ (8008520 <__malloc_unlock+0x8>)
 800851a:	f7ff bee3 	b.w	80082e4 <__retarget_lock_release_recursive>
 800851e:	bf00      	nop
 8008520:	20002dac 	.word	0x20002dac

08008524 <__sflush_r>:
 8008524:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008528:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800852c:	0716      	lsls	r6, r2, #28
 800852e:	4605      	mov	r5, r0
 8008530:	460c      	mov	r4, r1
 8008532:	d454      	bmi.n	80085de <__sflush_r+0xba>
 8008534:	684b      	ldr	r3, [r1, #4]
 8008536:	2b00      	cmp	r3, #0
 8008538:	dc02      	bgt.n	8008540 <__sflush_r+0x1c>
 800853a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800853c:	2b00      	cmp	r3, #0
 800853e:	dd48      	ble.n	80085d2 <__sflush_r+0xae>
 8008540:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008542:	2e00      	cmp	r6, #0
 8008544:	d045      	beq.n	80085d2 <__sflush_r+0xae>
 8008546:	2300      	movs	r3, #0
 8008548:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800854c:	682f      	ldr	r7, [r5, #0]
 800854e:	6a21      	ldr	r1, [r4, #32]
 8008550:	602b      	str	r3, [r5, #0]
 8008552:	d030      	beq.n	80085b6 <__sflush_r+0x92>
 8008554:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008556:	89a3      	ldrh	r3, [r4, #12]
 8008558:	0759      	lsls	r1, r3, #29
 800855a:	d505      	bpl.n	8008568 <__sflush_r+0x44>
 800855c:	6863      	ldr	r3, [r4, #4]
 800855e:	1ad2      	subs	r2, r2, r3
 8008560:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008562:	b10b      	cbz	r3, 8008568 <__sflush_r+0x44>
 8008564:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008566:	1ad2      	subs	r2, r2, r3
 8008568:	2300      	movs	r3, #0
 800856a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800856c:	6a21      	ldr	r1, [r4, #32]
 800856e:	4628      	mov	r0, r5
 8008570:	47b0      	blx	r6
 8008572:	1c43      	adds	r3, r0, #1
 8008574:	89a3      	ldrh	r3, [r4, #12]
 8008576:	d106      	bne.n	8008586 <__sflush_r+0x62>
 8008578:	6829      	ldr	r1, [r5, #0]
 800857a:	291d      	cmp	r1, #29
 800857c:	d82b      	bhi.n	80085d6 <__sflush_r+0xb2>
 800857e:	4a2a      	ldr	r2, [pc, #168]	@ (8008628 <__sflush_r+0x104>)
 8008580:	40ca      	lsrs	r2, r1
 8008582:	07d6      	lsls	r6, r2, #31
 8008584:	d527      	bpl.n	80085d6 <__sflush_r+0xb2>
 8008586:	2200      	movs	r2, #0
 8008588:	6062      	str	r2, [r4, #4]
 800858a:	04d9      	lsls	r1, r3, #19
 800858c:	6922      	ldr	r2, [r4, #16]
 800858e:	6022      	str	r2, [r4, #0]
 8008590:	d504      	bpl.n	800859c <__sflush_r+0x78>
 8008592:	1c42      	adds	r2, r0, #1
 8008594:	d101      	bne.n	800859a <__sflush_r+0x76>
 8008596:	682b      	ldr	r3, [r5, #0]
 8008598:	b903      	cbnz	r3, 800859c <__sflush_r+0x78>
 800859a:	6560      	str	r0, [r4, #84]	@ 0x54
 800859c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800859e:	602f      	str	r7, [r5, #0]
 80085a0:	b1b9      	cbz	r1, 80085d2 <__sflush_r+0xae>
 80085a2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80085a6:	4299      	cmp	r1, r3
 80085a8:	d002      	beq.n	80085b0 <__sflush_r+0x8c>
 80085aa:	4628      	mov	r0, r5
 80085ac:	f7ff feba 	bl	8008324 <_free_r>
 80085b0:	2300      	movs	r3, #0
 80085b2:	6363      	str	r3, [r4, #52]	@ 0x34
 80085b4:	e00d      	b.n	80085d2 <__sflush_r+0xae>
 80085b6:	2301      	movs	r3, #1
 80085b8:	4628      	mov	r0, r5
 80085ba:	47b0      	blx	r6
 80085bc:	4602      	mov	r2, r0
 80085be:	1c50      	adds	r0, r2, #1
 80085c0:	d1c9      	bne.n	8008556 <__sflush_r+0x32>
 80085c2:	682b      	ldr	r3, [r5, #0]
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d0c6      	beq.n	8008556 <__sflush_r+0x32>
 80085c8:	2b1d      	cmp	r3, #29
 80085ca:	d001      	beq.n	80085d0 <__sflush_r+0xac>
 80085cc:	2b16      	cmp	r3, #22
 80085ce:	d11e      	bne.n	800860e <__sflush_r+0xea>
 80085d0:	602f      	str	r7, [r5, #0]
 80085d2:	2000      	movs	r0, #0
 80085d4:	e022      	b.n	800861c <__sflush_r+0xf8>
 80085d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80085da:	b21b      	sxth	r3, r3
 80085dc:	e01b      	b.n	8008616 <__sflush_r+0xf2>
 80085de:	690f      	ldr	r7, [r1, #16]
 80085e0:	2f00      	cmp	r7, #0
 80085e2:	d0f6      	beq.n	80085d2 <__sflush_r+0xae>
 80085e4:	0793      	lsls	r3, r2, #30
 80085e6:	680e      	ldr	r6, [r1, #0]
 80085e8:	bf08      	it	eq
 80085ea:	694b      	ldreq	r3, [r1, #20]
 80085ec:	600f      	str	r7, [r1, #0]
 80085ee:	bf18      	it	ne
 80085f0:	2300      	movne	r3, #0
 80085f2:	eba6 0807 	sub.w	r8, r6, r7
 80085f6:	608b      	str	r3, [r1, #8]
 80085f8:	f1b8 0f00 	cmp.w	r8, #0
 80085fc:	dde9      	ble.n	80085d2 <__sflush_r+0xae>
 80085fe:	6a21      	ldr	r1, [r4, #32]
 8008600:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008602:	4643      	mov	r3, r8
 8008604:	463a      	mov	r2, r7
 8008606:	4628      	mov	r0, r5
 8008608:	47b0      	blx	r6
 800860a:	2800      	cmp	r0, #0
 800860c:	dc08      	bgt.n	8008620 <__sflush_r+0xfc>
 800860e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008612:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008616:	81a3      	strh	r3, [r4, #12]
 8008618:	f04f 30ff 	mov.w	r0, #4294967295
 800861c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008620:	4407      	add	r7, r0
 8008622:	eba8 0800 	sub.w	r8, r8, r0
 8008626:	e7e7      	b.n	80085f8 <__sflush_r+0xd4>
 8008628:	20400001 	.word	0x20400001

0800862c <_fflush_r>:
 800862c:	b538      	push	{r3, r4, r5, lr}
 800862e:	690b      	ldr	r3, [r1, #16]
 8008630:	4605      	mov	r5, r0
 8008632:	460c      	mov	r4, r1
 8008634:	b913      	cbnz	r3, 800863c <_fflush_r+0x10>
 8008636:	2500      	movs	r5, #0
 8008638:	4628      	mov	r0, r5
 800863a:	bd38      	pop	{r3, r4, r5, pc}
 800863c:	b118      	cbz	r0, 8008646 <_fflush_r+0x1a>
 800863e:	6a03      	ldr	r3, [r0, #32]
 8008640:	b90b      	cbnz	r3, 8008646 <_fflush_r+0x1a>
 8008642:	f7ff fd5b 	bl	80080fc <__sinit>
 8008646:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800864a:	2b00      	cmp	r3, #0
 800864c:	d0f3      	beq.n	8008636 <_fflush_r+0xa>
 800864e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008650:	07d0      	lsls	r0, r2, #31
 8008652:	d404      	bmi.n	800865e <_fflush_r+0x32>
 8008654:	0599      	lsls	r1, r3, #22
 8008656:	d402      	bmi.n	800865e <_fflush_r+0x32>
 8008658:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800865a:	f7ff fe42 	bl	80082e2 <__retarget_lock_acquire_recursive>
 800865e:	4628      	mov	r0, r5
 8008660:	4621      	mov	r1, r4
 8008662:	f7ff ff5f 	bl	8008524 <__sflush_r>
 8008666:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008668:	07da      	lsls	r2, r3, #31
 800866a:	4605      	mov	r5, r0
 800866c:	d4e4      	bmi.n	8008638 <_fflush_r+0xc>
 800866e:	89a3      	ldrh	r3, [r4, #12]
 8008670:	059b      	lsls	r3, r3, #22
 8008672:	d4e1      	bmi.n	8008638 <_fflush_r+0xc>
 8008674:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008676:	f7ff fe35 	bl	80082e4 <__retarget_lock_release_recursive>
 800867a:	e7dd      	b.n	8008638 <_fflush_r+0xc>

0800867c <fiprintf>:
 800867c:	b40e      	push	{r1, r2, r3}
 800867e:	b503      	push	{r0, r1, lr}
 8008680:	4601      	mov	r1, r0
 8008682:	ab03      	add	r3, sp, #12
 8008684:	4805      	ldr	r0, [pc, #20]	@ (800869c <fiprintf+0x20>)
 8008686:	f853 2b04 	ldr.w	r2, [r3], #4
 800868a:	6800      	ldr	r0, [r0, #0]
 800868c:	9301      	str	r3, [sp, #4]
 800868e:	f000 f847 	bl	8008720 <_vfiprintf_r>
 8008692:	b002      	add	sp, #8
 8008694:	f85d eb04 	ldr.w	lr, [sp], #4
 8008698:	b003      	add	sp, #12
 800869a:	4770      	bx	lr
 800869c:	20000024 	.word	0x20000024

080086a0 <_sbrk_r>:
 80086a0:	b538      	push	{r3, r4, r5, lr}
 80086a2:	4d06      	ldr	r5, [pc, #24]	@ (80086bc <_sbrk_r+0x1c>)
 80086a4:	2300      	movs	r3, #0
 80086a6:	4604      	mov	r4, r0
 80086a8:	4608      	mov	r0, r1
 80086aa:	602b      	str	r3, [r5, #0]
 80086ac:	f7fb fdfe 	bl	80042ac <_sbrk>
 80086b0:	1c43      	adds	r3, r0, #1
 80086b2:	d102      	bne.n	80086ba <_sbrk_r+0x1a>
 80086b4:	682b      	ldr	r3, [r5, #0]
 80086b6:	b103      	cbz	r3, 80086ba <_sbrk_r+0x1a>
 80086b8:	6023      	str	r3, [r4, #0]
 80086ba:	bd38      	pop	{r3, r4, r5, pc}
 80086bc:	20002da8 	.word	0x20002da8

080086c0 <abort>:
 80086c0:	b508      	push	{r3, lr}
 80086c2:	2006      	movs	r0, #6
 80086c4:	f000 fb8c 	bl	8008de0 <raise>
 80086c8:	2001      	movs	r0, #1
 80086ca:	f7fb fd77 	bl	80041bc <_exit>

080086ce <__sfputc_r>:
 80086ce:	6893      	ldr	r3, [r2, #8]
 80086d0:	3b01      	subs	r3, #1
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	b410      	push	{r4}
 80086d6:	6093      	str	r3, [r2, #8]
 80086d8:	da08      	bge.n	80086ec <__sfputc_r+0x1e>
 80086da:	6994      	ldr	r4, [r2, #24]
 80086dc:	42a3      	cmp	r3, r4
 80086de:	db01      	blt.n	80086e4 <__sfputc_r+0x16>
 80086e0:	290a      	cmp	r1, #10
 80086e2:	d103      	bne.n	80086ec <__sfputc_r+0x1e>
 80086e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80086e8:	f000 babe 	b.w	8008c68 <__swbuf_r>
 80086ec:	6813      	ldr	r3, [r2, #0]
 80086ee:	1c58      	adds	r0, r3, #1
 80086f0:	6010      	str	r0, [r2, #0]
 80086f2:	7019      	strb	r1, [r3, #0]
 80086f4:	4608      	mov	r0, r1
 80086f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80086fa:	4770      	bx	lr

080086fc <__sfputs_r>:
 80086fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086fe:	4606      	mov	r6, r0
 8008700:	460f      	mov	r7, r1
 8008702:	4614      	mov	r4, r2
 8008704:	18d5      	adds	r5, r2, r3
 8008706:	42ac      	cmp	r4, r5
 8008708:	d101      	bne.n	800870e <__sfputs_r+0x12>
 800870a:	2000      	movs	r0, #0
 800870c:	e007      	b.n	800871e <__sfputs_r+0x22>
 800870e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008712:	463a      	mov	r2, r7
 8008714:	4630      	mov	r0, r6
 8008716:	f7ff ffda 	bl	80086ce <__sfputc_r>
 800871a:	1c43      	adds	r3, r0, #1
 800871c:	d1f3      	bne.n	8008706 <__sfputs_r+0xa>
 800871e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008720 <_vfiprintf_r>:
 8008720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008724:	460d      	mov	r5, r1
 8008726:	b09d      	sub	sp, #116	@ 0x74
 8008728:	4614      	mov	r4, r2
 800872a:	4698      	mov	r8, r3
 800872c:	4606      	mov	r6, r0
 800872e:	b118      	cbz	r0, 8008738 <_vfiprintf_r+0x18>
 8008730:	6a03      	ldr	r3, [r0, #32]
 8008732:	b90b      	cbnz	r3, 8008738 <_vfiprintf_r+0x18>
 8008734:	f7ff fce2 	bl	80080fc <__sinit>
 8008738:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800873a:	07d9      	lsls	r1, r3, #31
 800873c:	d405      	bmi.n	800874a <_vfiprintf_r+0x2a>
 800873e:	89ab      	ldrh	r3, [r5, #12]
 8008740:	059a      	lsls	r2, r3, #22
 8008742:	d402      	bmi.n	800874a <_vfiprintf_r+0x2a>
 8008744:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008746:	f7ff fdcc 	bl	80082e2 <__retarget_lock_acquire_recursive>
 800874a:	89ab      	ldrh	r3, [r5, #12]
 800874c:	071b      	lsls	r3, r3, #28
 800874e:	d501      	bpl.n	8008754 <_vfiprintf_r+0x34>
 8008750:	692b      	ldr	r3, [r5, #16]
 8008752:	b99b      	cbnz	r3, 800877c <_vfiprintf_r+0x5c>
 8008754:	4629      	mov	r1, r5
 8008756:	4630      	mov	r0, r6
 8008758:	f000 fac4 	bl	8008ce4 <__swsetup_r>
 800875c:	b170      	cbz	r0, 800877c <_vfiprintf_r+0x5c>
 800875e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008760:	07dc      	lsls	r4, r3, #31
 8008762:	d504      	bpl.n	800876e <_vfiprintf_r+0x4e>
 8008764:	f04f 30ff 	mov.w	r0, #4294967295
 8008768:	b01d      	add	sp, #116	@ 0x74
 800876a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800876e:	89ab      	ldrh	r3, [r5, #12]
 8008770:	0598      	lsls	r0, r3, #22
 8008772:	d4f7      	bmi.n	8008764 <_vfiprintf_r+0x44>
 8008774:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008776:	f7ff fdb5 	bl	80082e4 <__retarget_lock_release_recursive>
 800877a:	e7f3      	b.n	8008764 <_vfiprintf_r+0x44>
 800877c:	2300      	movs	r3, #0
 800877e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008780:	2320      	movs	r3, #32
 8008782:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008786:	f8cd 800c 	str.w	r8, [sp, #12]
 800878a:	2330      	movs	r3, #48	@ 0x30
 800878c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800893c <_vfiprintf_r+0x21c>
 8008790:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008794:	f04f 0901 	mov.w	r9, #1
 8008798:	4623      	mov	r3, r4
 800879a:	469a      	mov	sl, r3
 800879c:	f813 2b01 	ldrb.w	r2, [r3], #1
 80087a0:	b10a      	cbz	r2, 80087a6 <_vfiprintf_r+0x86>
 80087a2:	2a25      	cmp	r2, #37	@ 0x25
 80087a4:	d1f9      	bne.n	800879a <_vfiprintf_r+0x7a>
 80087a6:	ebba 0b04 	subs.w	fp, sl, r4
 80087aa:	d00b      	beq.n	80087c4 <_vfiprintf_r+0xa4>
 80087ac:	465b      	mov	r3, fp
 80087ae:	4622      	mov	r2, r4
 80087b0:	4629      	mov	r1, r5
 80087b2:	4630      	mov	r0, r6
 80087b4:	f7ff ffa2 	bl	80086fc <__sfputs_r>
 80087b8:	3001      	adds	r0, #1
 80087ba:	f000 80a7 	beq.w	800890c <_vfiprintf_r+0x1ec>
 80087be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80087c0:	445a      	add	r2, fp
 80087c2:	9209      	str	r2, [sp, #36]	@ 0x24
 80087c4:	f89a 3000 	ldrb.w	r3, [sl]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	f000 809f 	beq.w	800890c <_vfiprintf_r+0x1ec>
 80087ce:	2300      	movs	r3, #0
 80087d0:	f04f 32ff 	mov.w	r2, #4294967295
 80087d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80087d8:	f10a 0a01 	add.w	sl, sl, #1
 80087dc:	9304      	str	r3, [sp, #16]
 80087de:	9307      	str	r3, [sp, #28]
 80087e0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80087e4:	931a      	str	r3, [sp, #104]	@ 0x68
 80087e6:	4654      	mov	r4, sl
 80087e8:	2205      	movs	r2, #5
 80087ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087ee:	4853      	ldr	r0, [pc, #332]	@ (800893c <_vfiprintf_r+0x21c>)
 80087f0:	f7f7 fcee 	bl	80001d0 <memchr>
 80087f4:	9a04      	ldr	r2, [sp, #16]
 80087f6:	b9d8      	cbnz	r0, 8008830 <_vfiprintf_r+0x110>
 80087f8:	06d1      	lsls	r1, r2, #27
 80087fa:	bf44      	itt	mi
 80087fc:	2320      	movmi	r3, #32
 80087fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008802:	0713      	lsls	r3, r2, #28
 8008804:	bf44      	itt	mi
 8008806:	232b      	movmi	r3, #43	@ 0x2b
 8008808:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800880c:	f89a 3000 	ldrb.w	r3, [sl]
 8008810:	2b2a      	cmp	r3, #42	@ 0x2a
 8008812:	d015      	beq.n	8008840 <_vfiprintf_r+0x120>
 8008814:	9a07      	ldr	r2, [sp, #28]
 8008816:	4654      	mov	r4, sl
 8008818:	2000      	movs	r0, #0
 800881a:	f04f 0c0a 	mov.w	ip, #10
 800881e:	4621      	mov	r1, r4
 8008820:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008824:	3b30      	subs	r3, #48	@ 0x30
 8008826:	2b09      	cmp	r3, #9
 8008828:	d94b      	bls.n	80088c2 <_vfiprintf_r+0x1a2>
 800882a:	b1b0      	cbz	r0, 800885a <_vfiprintf_r+0x13a>
 800882c:	9207      	str	r2, [sp, #28]
 800882e:	e014      	b.n	800885a <_vfiprintf_r+0x13a>
 8008830:	eba0 0308 	sub.w	r3, r0, r8
 8008834:	fa09 f303 	lsl.w	r3, r9, r3
 8008838:	4313      	orrs	r3, r2
 800883a:	9304      	str	r3, [sp, #16]
 800883c:	46a2      	mov	sl, r4
 800883e:	e7d2      	b.n	80087e6 <_vfiprintf_r+0xc6>
 8008840:	9b03      	ldr	r3, [sp, #12]
 8008842:	1d19      	adds	r1, r3, #4
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	9103      	str	r1, [sp, #12]
 8008848:	2b00      	cmp	r3, #0
 800884a:	bfbb      	ittet	lt
 800884c:	425b      	neglt	r3, r3
 800884e:	f042 0202 	orrlt.w	r2, r2, #2
 8008852:	9307      	strge	r3, [sp, #28]
 8008854:	9307      	strlt	r3, [sp, #28]
 8008856:	bfb8      	it	lt
 8008858:	9204      	strlt	r2, [sp, #16]
 800885a:	7823      	ldrb	r3, [r4, #0]
 800885c:	2b2e      	cmp	r3, #46	@ 0x2e
 800885e:	d10a      	bne.n	8008876 <_vfiprintf_r+0x156>
 8008860:	7863      	ldrb	r3, [r4, #1]
 8008862:	2b2a      	cmp	r3, #42	@ 0x2a
 8008864:	d132      	bne.n	80088cc <_vfiprintf_r+0x1ac>
 8008866:	9b03      	ldr	r3, [sp, #12]
 8008868:	1d1a      	adds	r2, r3, #4
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	9203      	str	r2, [sp, #12]
 800886e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008872:	3402      	adds	r4, #2
 8008874:	9305      	str	r3, [sp, #20]
 8008876:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800894c <_vfiprintf_r+0x22c>
 800887a:	7821      	ldrb	r1, [r4, #0]
 800887c:	2203      	movs	r2, #3
 800887e:	4650      	mov	r0, sl
 8008880:	f7f7 fca6 	bl	80001d0 <memchr>
 8008884:	b138      	cbz	r0, 8008896 <_vfiprintf_r+0x176>
 8008886:	9b04      	ldr	r3, [sp, #16]
 8008888:	eba0 000a 	sub.w	r0, r0, sl
 800888c:	2240      	movs	r2, #64	@ 0x40
 800888e:	4082      	lsls	r2, r0
 8008890:	4313      	orrs	r3, r2
 8008892:	3401      	adds	r4, #1
 8008894:	9304      	str	r3, [sp, #16]
 8008896:	f814 1b01 	ldrb.w	r1, [r4], #1
 800889a:	4829      	ldr	r0, [pc, #164]	@ (8008940 <_vfiprintf_r+0x220>)
 800889c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80088a0:	2206      	movs	r2, #6
 80088a2:	f7f7 fc95 	bl	80001d0 <memchr>
 80088a6:	2800      	cmp	r0, #0
 80088a8:	d03f      	beq.n	800892a <_vfiprintf_r+0x20a>
 80088aa:	4b26      	ldr	r3, [pc, #152]	@ (8008944 <_vfiprintf_r+0x224>)
 80088ac:	bb1b      	cbnz	r3, 80088f6 <_vfiprintf_r+0x1d6>
 80088ae:	9b03      	ldr	r3, [sp, #12]
 80088b0:	3307      	adds	r3, #7
 80088b2:	f023 0307 	bic.w	r3, r3, #7
 80088b6:	3308      	adds	r3, #8
 80088b8:	9303      	str	r3, [sp, #12]
 80088ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80088bc:	443b      	add	r3, r7
 80088be:	9309      	str	r3, [sp, #36]	@ 0x24
 80088c0:	e76a      	b.n	8008798 <_vfiprintf_r+0x78>
 80088c2:	fb0c 3202 	mla	r2, ip, r2, r3
 80088c6:	460c      	mov	r4, r1
 80088c8:	2001      	movs	r0, #1
 80088ca:	e7a8      	b.n	800881e <_vfiprintf_r+0xfe>
 80088cc:	2300      	movs	r3, #0
 80088ce:	3401      	adds	r4, #1
 80088d0:	9305      	str	r3, [sp, #20]
 80088d2:	4619      	mov	r1, r3
 80088d4:	f04f 0c0a 	mov.w	ip, #10
 80088d8:	4620      	mov	r0, r4
 80088da:	f810 2b01 	ldrb.w	r2, [r0], #1
 80088de:	3a30      	subs	r2, #48	@ 0x30
 80088e0:	2a09      	cmp	r2, #9
 80088e2:	d903      	bls.n	80088ec <_vfiprintf_r+0x1cc>
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d0c6      	beq.n	8008876 <_vfiprintf_r+0x156>
 80088e8:	9105      	str	r1, [sp, #20]
 80088ea:	e7c4      	b.n	8008876 <_vfiprintf_r+0x156>
 80088ec:	fb0c 2101 	mla	r1, ip, r1, r2
 80088f0:	4604      	mov	r4, r0
 80088f2:	2301      	movs	r3, #1
 80088f4:	e7f0      	b.n	80088d8 <_vfiprintf_r+0x1b8>
 80088f6:	ab03      	add	r3, sp, #12
 80088f8:	9300      	str	r3, [sp, #0]
 80088fa:	462a      	mov	r2, r5
 80088fc:	4b12      	ldr	r3, [pc, #72]	@ (8008948 <_vfiprintf_r+0x228>)
 80088fe:	a904      	add	r1, sp, #16
 8008900:	4630      	mov	r0, r6
 8008902:	f3af 8000 	nop.w
 8008906:	4607      	mov	r7, r0
 8008908:	1c78      	adds	r0, r7, #1
 800890a:	d1d6      	bne.n	80088ba <_vfiprintf_r+0x19a>
 800890c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800890e:	07d9      	lsls	r1, r3, #31
 8008910:	d405      	bmi.n	800891e <_vfiprintf_r+0x1fe>
 8008912:	89ab      	ldrh	r3, [r5, #12]
 8008914:	059a      	lsls	r2, r3, #22
 8008916:	d402      	bmi.n	800891e <_vfiprintf_r+0x1fe>
 8008918:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800891a:	f7ff fce3 	bl	80082e4 <__retarget_lock_release_recursive>
 800891e:	89ab      	ldrh	r3, [r5, #12]
 8008920:	065b      	lsls	r3, r3, #25
 8008922:	f53f af1f 	bmi.w	8008764 <_vfiprintf_r+0x44>
 8008926:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008928:	e71e      	b.n	8008768 <_vfiprintf_r+0x48>
 800892a:	ab03      	add	r3, sp, #12
 800892c:	9300      	str	r3, [sp, #0]
 800892e:	462a      	mov	r2, r5
 8008930:	4b05      	ldr	r3, [pc, #20]	@ (8008948 <_vfiprintf_r+0x228>)
 8008932:	a904      	add	r1, sp, #16
 8008934:	4630      	mov	r0, r6
 8008936:	f000 f879 	bl	8008a2c <_printf_i>
 800893a:	e7e4      	b.n	8008906 <_vfiprintf_r+0x1e6>
 800893c:	0800a6bb 	.word	0x0800a6bb
 8008940:	0800a6c5 	.word	0x0800a6c5
 8008944:	00000000 	.word	0x00000000
 8008948:	080086fd 	.word	0x080086fd
 800894c:	0800a6c1 	.word	0x0800a6c1

08008950 <_printf_common>:
 8008950:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008954:	4616      	mov	r6, r2
 8008956:	4698      	mov	r8, r3
 8008958:	688a      	ldr	r2, [r1, #8]
 800895a:	690b      	ldr	r3, [r1, #16]
 800895c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008960:	4293      	cmp	r3, r2
 8008962:	bfb8      	it	lt
 8008964:	4613      	movlt	r3, r2
 8008966:	6033      	str	r3, [r6, #0]
 8008968:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800896c:	4607      	mov	r7, r0
 800896e:	460c      	mov	r4, r1
 8008970:	b10a      	cbz	r2, 8008976 <_printf_common+0x26>
 8008972:	3301      	adds	r3, #1
 8008974:	6033      	str	r3, [r6, #0]
 8008976:	6823      	ldr	r3, [r4, #0]
 8008978:	0699      	lsls	r1, r3, #26
 800897a:	bf42      	ittt	mi
 800897c:	6833      	ldrmi	r3, [r6, #0]
 800897e:	3302      	addmi	r3, #2
 8008980:	6033      	strmi	r3, [r6, #0]
 8008982:	6825      	ldr	r5, [r4, #0]
 8008984:	f015 0506 	ands.w	r5, r5, #6
 8008988:	d106      	bne.n	8008998 <_printf_common+0x48>
 800898a:	f104 0a19 	add.w	sl, r4, #25
 800898e:	68e3      	ldr	r3, [r4, #12]
 8008990:	6832      	ldr	r2, [r6, #0]
 8008992:	1a9b      	subs	r3, r3, r2
 8008994:	42ab      	cmp	r3, r5
 8008996:	dc26      	bgt.n	80089e6 <_printf_common+0x96>
 8008998:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800899c:	6822      	ldr	r2, [r4, #0]
 800899e:	3b00      	subs	r3, #0
 80089a0:	bf18      	it	ne
 80089a2:	2301      	movne	r3, #1
 80089a4:	0692      	lsls	r2, r2, #26
 80089a6:	d42b      	bmi.n	8008a00 <_printf_common+0xb0>
 80089a8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80089ac:	4641      	mov	r1, r8
 80089ae:	4638      	mov	r0, r7
 80089b0:	47c8      	blx	r9
 80089b2:	3001      	adds	r0, #1
 80089b4:	d01e      	beq.n	80089f4 <_printf_common+0xa4>
 80089b6:	6823      	ldr	r3, [r4, #0]
 80089b8:	6922      	ldr	r2, [r4, #16]
 80089ba:	f003 0306 	and.w	r3, r3, #6
 80089be:	2b04      	cmp	r3, #4
 80089c0:	bf02      	ittt	eq
 80089c2:	68e5      	ldreq	r5, [r4, #12]
 80089c4:	6833      	ldreq	r3, [r6, #0]
 80089c6:	1aed      	subeq	r5, r5, r3
 80089c8:	68a3      	ldr	r3, [r4, #8]
 80089ca:	bf0c      	ite	eq
 80089cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80089d0:	2500      	movne	r5, #0
 80089d2:	4293      	cmp	r3, r2
 80089d4:	bfc4      	itt	gt
 80089d6:	1a9b      	subgt	r3, r3, r2
 80089d8:	18ed      	addgt	r5, r5, r3
 80089da:	2600      	movs	r6, #0
 80089dc:	341a      	adds	r4, #26
 80089de:	42b5      	cmp	r5, r6
 80089e0:	d11a      	bne.n	8008a18 <_printf_common+0xc8>
 80089e2:	2000      	movs	r0, #0
 80089e4:	e008      	b.n	80089f8 <_printf_common+0xa8>
 80089e6:	2301      	movs	r3, #1
 80089e8:	4652      	mov	r2, sl
 80089ea:	4641      	mov	r1, r8
 80089ec:	4638      	mov	r0, r7
 80089ee:	47c8      	blx	r9
 80089f0:	3001      	adds	r0, #1
 80089f2:	d103      	bne.n	80089fc <_printf_common+0xac>
 80089f4:	f04f 30ff 	mov.w	r0, #4294967295
 80089f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089fc:	3501      	adds	r5, #1
 80089fe:	e7c6      	b.n	800898e <_printf_common+0x3e>
 8008a00:	18e1      	adds	r1, r4, r3
 8008a02:	1c5a      	adds	r2, r3, #1
 8008a04:	2030      	movs	r0, #48	@ 0x30
 8008a06:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008a0a:	4422      	add	r2, r4
 8008a0c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008a10:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008a14:	3302      	adds	r3, #2
 8008a16:	e7c7      	b.n	80089a8 <_printf_common+0x58>
 8008a18:	2301      	movs	r3, #1
 8008a1a:	4622      	mov	r2, r4
 8008a1c:	4641      	mov	r1, r8
 8008a1e:	4638      	mov	r0, r7
 8008a20:	47c8      	blx	r9
 8008a22:	3001      	adds	r0, #1
 8008a24:	d0e6      	beq.n	80089f4 <_printf_common+0xa4>
 8008a26:	3601      	adds	r6, #1
 8008a28:	e7d9      	b.n	80089de <_printf_common+0x8e>
	...

08008a2c <_printf_i>:
 8008a2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008a30:	7e0f      	ldrb	r7, [r1, #24]
 8008a32:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008a34:	2f78      	cmp	r7, #120	@ 0x78
 8008a36:	4691      	mov	r9, r2
 8008a38:	4680      	mov	r8, r0
 8008a3a:	460c      	mov	r4, r1
 8008a3c:	469a      	mov	sl, r3
 8008a3e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008a42:	d807      	bhi.n	8008a54 <_printf_i+0x28>
 8008a44:	2f62      	cmp	r7, #98	@ 0x62
 8008a46:	d80a      	bhi.n	8008a5e <_printf_i+0x32>
 8008a48:	2f00      	cmp	r7, #0
 8008a4a:	f000 80d1 	beq.w	8008bf0 <_printf_i+0x1c4>
 8008a4e:	2f58      	cmp	r7, #88	@ 0x58
 8008a50:	f000 80b8 	beq.w	8008bc4 <_printf_i+0x198>
 8008a54:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008a58:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008a5c:	e03a      	b.n	8008ad4 <_printf_i+0xa8>
 8008a5e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008a62:	2b15      	cmp	r3, #21
 8008a64:	d8f6      	bhi.n	8008a54 <_printf_i+0x28>
 8008a66:	a101      	add	r1, pc, #4	@ (adr r1, 8008a6c <_printf_i+0x40>)
 8008a68:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008a6c:	08008ac5 	.word	0x08008ac5
 8008a70:	08008ad9 	.word	0x08008ad9
 8008a74:	08008a55 	.word	0x08008a55
 8008a78:	08008a55 	.word	0x08008a55
 8008a7c:	08008a55 	.word	0x08008a55
 8008a80:	08008a55 	.word	0x08008a55
 8008a84:	08008ad9 	.word	0x08008ad9
 8008a88:	08008a55 	.word	0x08008a55
 8008a8c:	08008a55 	.word	0x08008a55
 8008a90:	08008a55 	.word	0x08008a55
 8008a94:	08008a55 	.word	0x08008a55
 8008a98:	08008bd7 	.word	0x08008bd7
 8008a9c:	08008b03 	.word	0x08008b03
 8008aa0:	08008b91 	.word	0x08008b91
 8008aa4:	08008a55 	.word	0x08008a55
 8008aa8:	08008a55 	.word	0x08008a55
 8008aac:	08008bf9 	.word	0x08008bf9
 8008ab0:	08008a55 	.word	0x08008a55
 8008ab4:	08008b03 	.word	0x08008b03
 8008ab8:	08008a55 	.word	0x08008a55
 8008abc:	08008a55 	.word	0x08008a55
 8008ac0:	08008b99 	.word	0x08008b99
 8008ac4:	6833      	ldr	r3, [r6, #0]
 8008ac6:	1d1a      	adds	r2, r3, #4
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	6032      	str	r2, [r6, #0]
 8008acc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008ad0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008ad4:	2301      	movs	r3, #1
 8008ad6:	e09c      	b.n	8008c12 <_printf_i+0x1e6>
 8008ad8:	6833      	ldr	r3, [r6, #0]
 8008ada:	6820      	ldr	r0, [r4, #0]
 8008adc:	1d19      	adds	r1, r3, #4
 8008ade:	6031      	str	r1, [r6, #0]
 8008ae0:	0606      	lsls	r6, r0, #24
 8008ae2:	d501      	bpl.n	8008ae8 <_printf_i+0xbc>
 8008ae4:	681d      	ldr	r5, [r3, #0]
 8008ae6:	e003      	b.n	8008af0 <_printf_i+0xc4>
 8008ae8:	0645      	lsls	r5, r0, #25
 8008aea:	d5fb      	bpl.n	8008ae4 <_printf_i+0xb8>
 8008aec:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008af0:	2d00      	cmp	r5, #0
 8008af2:	da03      	bge.n	8008afc <_printf_i+0xd0>
 8008af4:	232d      	movs	r3, #45	@ 0x2d
 8008af6:	426d      	negs	r5, r5
 8008af8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008afc:	4858      	ldr	r0, [pc, #352]	@ (8008c60 <_printf_i+0x234>)
 8008afe:	230a      	movs	r3, #10
 8008b00:	e011      	b.n	8008b26 <_printf_i+0xfa>
 8008b02:	6821      	ldr	r1, [r4, #0]
 8008b04:	6833      	ldr	r3, [r6, #0]
 8008b06:	0608      	lsls	r0, r1, #24
 8008b08:	f853 5b04 	ldr.w	r5, [r3], #4
 8008b0c:	d402      	bmi.n	8008b14 <_printf_i+0xe8>
 8008b0e:	0649      	lsls	r1, r1, #25
 8008b10:	bf48      	it	mi
 8008b12:	b2ad      	uxthmi	r5, r5
 8008b14:	2f6f      	cmp	r7, #111	@ 0x6f
 8008b16:	4852      	ldr	r0, [pc, #328]	@ (8008c60 <_printf_i+0x234>)
 8008b18:	6033      	str	r3, [r6, #0]
 8008b1a:	bf14      	ite	ne
 8008b1c:	230a      	movne	r3, #10
 8008b1e:	2308      	moveq	r3, #8
 8008b20:	2100      	movs	r1, #0
 8008b22:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008b26:	6866      	ldr	r6, [r4, #4]
 8008b28:	60a6      	str	r6, [r4, #8]
 8008b2a:	2e00      	cmp	r6, #0
 8008b2c:	db05      	blt.n	8008b3a <_printf_i+0x10e>
 8008b2e:	6821      	ldr	r1, [r4, #0]
 8008b30:	432e      	orrs	r6, r5
 8008b32:	f021 0104 	bic.w	r1, r1, #4
 8008b36:	6021      	str	r1, [r4, #0]
 8008b38:	d04b      	beq.n	8008bd2 <_printf_i+0x1a6>
 8008b3a:	4616      	mov	r6, r2
 8008b3c:	fbb5 f1f3 	udiv	r1, r5, r3
 8008b40:	fb03 5711 	mls	r7, r3, r1, r5
 8008b44:	5dc7      	ldrb	r7, [r0, r7]
 8008b46:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008b4a:	462f      	mov	r7, r5
 8008b4c:	42bb      	cmp	r3, r7
 8008b4e:	460d      	mov	r5, r1
 8008b50:	d9f4      	bls.n	8008b3c <_printf_i+0x110>
 8008b52:	2b08      	cmp	r3, #8
 8008b54:	d10b      	bne.n	8008b6e <_printf_i+0x142>
 8008b56:	6823      	ldr	r3, [r4, #0]
 8008b58:	07df      	lsls	r7, r3, #31
 8008b5a:	d508      	bpl.n	8008b6e <_printf_i+0x142>
 8008b5c:	6923      	ldr	r3, [r4, #16]
 8008b5e:	6861      	ldr	r1, [r4, #4]
 8008b60:	4299      	cmp	r1, r3
 8008b62:	bfde      	ittt	le
 8008b64:	2330      	movle	r3, #48	@ 0x30
 8008b66:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008b6a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008b6e:	1b92      	subs	r2, r2, r6
 8008b70:	6122      	str	r2, [r4, #16]
 8008b72:	f8cd a000 	str.w	sl, [sp]
 8008b76:	464b      	mov	r3, r9
 8008b78:	aa03      	add	r2, sp, #12
 8008b7a:	4621      	mov	r1, r4
 8008b7c:	4640      	mov	r0, r8
 8008b7e:	f7ff fee7 	bl	8008950 <_printf_common>
 8008b82:	3001      	adds	r0, #1
 8008b84:	d14a      	bne.n	8008c1c <_printf_i+0x1f0>
 8008b86:	f04f 30ff 	mov.w	r0, #4294967295
 8008b8a:	b004      	add	sp, #16
 8008b8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b90:	6823      	ldr	r3, [r4, #0]
 8008b92:	f043 0320 	orr.w	r3, r3, #32
 8008b96:	6023      	str	r3, [r4, #0]
 8008b98:	4832      	ldr	r0, [pc, #200]	@ (8008c64 <_printf_i+0x238>)
 8008b9a:	2778      	movs	r7, #120	@ 0x78
 8008b9c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008ba0:	6823      	ldr	r3, [r4, #0]
 8008ba2:	6831      	ldr	r1, [r6, #0]
 8008ba4:	061f      	lsls	r7, r3, #24
 8008ba6:	f851 5b04 	ldr.w	r5, [r1], #4
 8008baa:	d402      	bmi.n	8008bb2 <_printf_i+0x186>
 8008bac:	065f      	lsls	r7, r3, #25
 8008bae:	bf48      	it	mi
 8008bb0:	b2ad      	uxthmi	r5, r5
 8008bb2:	6031      	str	r1, [r6, #0]
 8008bb4:	07d9      	lsls	r1, r3, #31
 8008bb6:	bf44      	itt	mi
 8008bb8:	f043 0320 	orrmi.w	r3, r3, #32
 8008bbc:	6023      	strmi	r3, [r4, #0]
 8008bbe:	b11d      	cbz	r5, 8008bc8 <_printf_i+0x19c>
 8008bc0:	2310      	movs	r3, #16
 8008bc2:	e7ad      	b.n	8008b20 <_printf_i+0xf4>
 8008bc4:	4826      	ldr	r0, [pc, #152]	@ (8008c60 <_printf_i+0x234>)
 8008bc6:	e7e9      	b.n	8008b9c <_printf_i+0x170>
 8008bc8:	6823      	ldr	r3, [r4, #0]
 8008bca:	f023 0320 	bic.w	r3, r3, #32
 8008bce:	6023      	str	r3, [r4, #0]
 8008bd0:	e7f6      	b.n	8008bc0 <_printf_i+0x194>
 8008bd2:	4616      	mov	r6, r2
 8008bd4:	e7bd      	b.n	8008b52 <_printf_i+0x126>
 8008bd6:	6833      	ldr	r3, [r6, #0]
 8008bd8:	6825      	ldr	r5, [r4, #0]
 8008bda:	6961      	ldr	r1, [r4, #20]
 8008bdc:	1d18      	adds	r0, r3, #4
 8008bde:	6030      	str	r0, [r6, #0]
 8008be0:	062e      	lsls	r6, r5, #24
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	d501      	bpl.n	8008bea <_printf_i+0x1be>
 8008be6:	6019      	str	r1, [r3, #0]
 8008be8:	e002      	b.n	8008bf0 <_printf_i+0x1c4>
 8008bea:	0668      	lsls	r0, r5, #25
 8008bec:	d5fb      	bpl.n	8008be6 <_printf_i+0x1ba>
 8008bee:	8019      	strh	r1, [r3, #0]
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	6123      	str	r3, [r4, #16]
 8008bf4:	4616      	mov	r6, r2
 8008bf6:	e7bc      	b.n	8008b72 <_printf_i+0x146>
 8008bf8:	6833      	ldr	r3, [r6, #0]
 8008bfa:	1d1a      	adds	r2, r3, #4
 8008bfc:	6032      	str	r2, [r6, #0]
 8008bfe:	681e      	ldr	r6, [r3, #0]
 8008c00:	6862      	ldr	r2, [r4, #4]
 8008c02:	2100      	movs	r1, #0
 8008c04:	4630      	mov	r0, r6
 8008c06:	f7f7 fae3 	bl	80001d0 <memchr>
 8008c0a:	b108      	cbz	r0, 8008c10 <_printf_i+0x1e4>
 8008c0c:	1b80      	subs	r0, r0, r6
 8008c0e:	6060      	str	r0, [r4, #4]
 8008c10:	6863      	ldr	r3, [r4, #4]
 8008c12:	6123      	str	r3, [r4, #16]
 8008c14:	2300      	movs	r3, #0
 8008c16:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008c1a:	e7aa      	b.n	8008b72 <_printf_i+0x146>
 8008c1c:	6923      	ldr	r3, [r4, #16]
 8008c1e:	4632      	mov	r2, r6
 8008c20:	4649      	mov	r1, r9
 8008c22:	4640      	mov	r0, r8
 8008c24:	47d0      	blx	sl
 8008c26:	3001      	adds	r0, #1
 8008c28:	d0ad      	beq.n	8008b86 <_printf_i+0x15a>
 8008c2a:	6823      	ldr	r3, [r4, #0]
 8008c2c:	079b      	lsls	r3, r3, #30
 8008c2e:	d413      	bmi.n	8008c58 <_printf_i+0x22c>
 8008c30:	68e0      	ldr	r0, [r4, #12]
 8008c32:	9b03      	ldr	r3, [sp, #12]
 8008c34:	4298      	cmp	r0, r3
 8008c36:	bfb8      	it	lt
 8008c38:	4618      	movlt	r0, r3
 8008c3a:	e7a6      	b.n	8008b8a <_printf_i+0x15e>
 8008c3c:	2301      	movs	r3, #1
 8008c3e:	4632      	mov	r2, r6
 8008c40:	4649      	mov	r1, r9
 8008c42:	4640      	mov	r0, r8
 8008c44:	47d0      	blx	sl
 8008c46:	3001      	adds	r0, #1
 8008c48:	d09d      	beq.n	8008b86 <_printf_i+0x15a>
 8008c4a:	3501      	adds	r5, #1
 8008c4c:	68e3      	ldr	r3, [r4, #12]
 8008c4e:	9903      	ldr	r1, [sp, #12]
 8008c50:	1a5b      	subs	r3, r3, r1
 8008c52:	42ab      	cmp	r3, r5
 8008c54:	dcf2      	bgt.n	8008c3c <_printf_i+0x210>
 8008c56:	e7eb      	b.n	8008c30 <_printf_i+0x204>
 8008c58:	2500      	movs	r5, #0
 8008c5a:	f104 0619 	add.w	r6, r4, #25
 8008c5e:	e7f5      	b.n	8008c4c <_printf_i+0x220>
 8008c60:	0800a6cc 	.word	0x0800a6cc
 8008c64:	0800a6dd 	.word	0x0800a6dd

08008c68 <__swbuf_r>:
 8008c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c6a:	460e      	mov	r6, r1
 8008c6c:	4614      	mov	r4, r2
 8008c6e:	4605      	mov	r5, r0
 8008c70:	b118      	cbz	r0, 8008c7a <__swbuf_r+0x12>
 8008c72:	6a03      	ldr	r3, [r0, #32]
 8008c74:	b90b      	cbnz	r3, 8008c7a <__swbuf_r+0x12>
 8008c76:	f7ff fa41 	bl	80080fc <__sinit>
 8008c7a:	69a3      	ldr	r3, [r4, #24]
 8008c7c:	60a3      	str	r3, [r4, #8]
 8008c7e:	89a3      	ldrh	r3, [r4, #12]
 8008c80:	071a      	lsls	r2, r3, #28
 8008c82:	d501      	bpl.n	8008c88 <__swbuf_r+0x20>
 8008c84:	6923      	ldr	r3, [r4, #16]
 8008c86:	b943      	cbnz	r3, 8008c9a <__swbuf_r+0x32>
 8008c88:	4621      	mov	r1, r4
 8008c8a:	4628      	mov	r0, r5
 8008c8c:	f000 f82a 	bl	8008ce4 <__swsetup_r>
 8008c90:	b118      	cbz	r0, 8008c9a <__swbuf_r+0x32>
 8008c92:	f04f 37ff 	mov.w	r7, #4294967295
 8008c96:	4638      	mov	r0, r7
 8008c98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c9a:	6823      	ldr	r3, [r4, #0]
 8008c9c:	6922      	ldr	r2, [r4, #16]
 8008c9e:	1a98      	subs	r0, r3, r2
 8008ca0:	6963      	ldr	r3, [r4, #20]
 8008ca2:	b2f6      	uxtb	r6, r6
 8008ca4:	4283      	cmp	r3, r0
 8008ca6:	4637      	mov	r7, r6
 8008ca8:	dc05      	bgt.n	8008cb6 <__swbuf_r+0x4e>
 8008caa:	4621      	mov	r1, r4
 8008cac:	4628      	mov	r0, r5
 8008cae:	f7ff fcbd 	bl	800862c <_fflush_r>
 8008cb2:	2800      	cmp	r0, #0
 8008cb4:	d1ed      	bne.n	8008c92 <__swbuf_r+0x2a>
 8008cb6:	68a3      	ldr	r3, [r4, #8]
 8008cb8:	3b01      	subs	r3, #1
 8008cba:	60a3      	str	r3, [r4, #8]
 8008cbc:	6823      	ldr	r3, [r4, #0]
 8008cbe:	1c5a      	adds	r2, r3, #1
 8008cc0:	6022      	str	r2, [r4, #0]
 8008cc2:	701e      	strb	r6, [r3, #0]
 8008cc4:	6962      	ldr	r2, [r4, #20]
 8008cc6:	1c43      	adds	r3, r0, #1
 8008cc8:	429a      	cmp	r2, r3
 8008cca:	d004      	beq.n	8008cd6 <__swbuf_r+0x6e>
 8008ccc:	89a3      	ldrh	r3, [r4, #12]
 8008cce:	07db      	lsls	r3, r3, #31
 8008cd0:	d5e1      	bpl.n	8008c96 <__swbuf_r+0x2e>
 8008cd2:	2e0a      	cmp	r6, #10
 8008cd4:	d1df      	bne.n	8008c96 <__swbuf_r+0x2e>
 8008cd6:	4621      	mov	r1, r4
 8008cd8:	4628      	mov	r0, r5
 8008cda:	f7ff fca7 	bl	800862c <_fflush_r>
 8008cde:	2800      	cmp	r0, #0
 8008ce0:	d0d9      	beq.n	8008c96 <__swbuf_r+0x2e>
 8008ce2:	e7d6      	b.n	8008c92 <__swbuf_r+0x2a>

08008ce4 <__swsetup_r>:
 8008ce4:	b538      	push	{r3, r4, r5, lr}
 8008ce6:	4b29      	ldr	r3, [pc, #164]	@ (8008d8c <__swsetup_r+0xa8>)
 8008ce8:	4605      	mov	r5, r0
 8008cea:	6818      	ldr	r0, [r3, #0]
 8008cec:	460c      	mov	r4, r1
 8008cee:	b118      	cbz	r0, 8008cf8 <__swsetup_r+0x14>
 8008cf0:	6a03      	ldr	r3, [r0, #32]
 8008cf2:	b90b      	cbnz	r3, 8008cf8 <__swsetup_r+0x14>
 8008cf4:	f7ff fa02 	bl	80080fc <__sinit>
 8008cf8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008cfc:	0719      	lsls	r1, r3, #28
 8008cfe:	d422      	bmi.n	8008d46 <__swsetup_r+0x62>
 8008d00:	06da      	lsls	r2, r3, #27
 8008d02:	d407      	bmi.n	8008d14 <__swsetup_r+0x30>
 8008d04:	2209      	movs	r2, #9
 8008d06:	602a      	str	r2, [r5, #0]
 8008d08:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008d0c:	81a3      	strh	r3, [r4, #12]
 8008d0e:	f04f 30ff 	mov.w	r0, #4294967295
 8008d12:	e033      	b.n	8008d7c <__swsetup_r+0x98>
 8008d14:	0758      	lsls	r0, r3, #29
 8008d16:	d512      	bpl.n	8008d3e <__swsetup_r+0x5a>
 8008d18:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008d1a:	b141      	cbz	r1, 8008d2e <__swsetup_r+0x4a>
 8008d1c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008d20:	4299      	cmp	r1, r3
 8008d22:	d002      	beq.n	8008d2a <__swsetup_r+0x46>
 8008d24:	4628      	mov	r0, r5
 8008d26:	f7ff fafd 	bl	8008324 <_free_r>
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	6363      	str	r3, [r4, #52]	@ 0x34
 8008d2e:	89a3      	ldrh	r3, [r4, #12]
 8008d30:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008d34:	81a3      	strh	r3, [r4, #12]
 8008d36:	2300      	movs	r3, #0
 8008d38:	6063      	str	r3, [r4, #4]
 8008d3a:	6923      	ldr	r3, [r4, #16]
 8008d3c:	6023      	str	r3, [r4, #0]
 8008d3e:	89a3      	ldrh	r3, [r4, #12]
 8008d40:	f043 0308 	orr.w	r3, r3, #8
 8008d44:	81a3      	strh	r3, [r4, #12]
 8008d46:	6923      	ldr	r3, [r4, #16]
 8008d48:	b94b      	cbnz	r3, 8008d5e <__swsetup_r+0x7a>
 8008d4a:	89a3      	ldrh	r3, [r4, #12]
 8008d4c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008d50:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008d54:	d003      	beq.n	8008d5e <__swsetup_r+0x7a>
 8008d56:	4621      	mov	r1, r4
 8008d58:	4628      	mov	r0, r5
 8008d5a:	f000 f883 	bl	8008e64 <__smakebuf_r>
 8008d5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d62:	f013 0201 	ands.w	r2, r3, #1
 8008d66:	d00a      	beq.n	8008d7e <__swsetup_r+0x9a>
 8008d68:	2200      	movs	r2, #0
 8008d6a:	60a2      	str	r2, [r4, #8]
 8008d6c:	6962      	ldr	r2, [r4, #20]
 8008d6e:	4252      	negs	r2, r2
 8008d70:	61a2      	str	r2, [r4, #24]
 8008d72:	6922      	ldr	r2, [r4, #16]
 8008d74:	b942      	cbnz	r2, 8008d88 <__swsetup_r+0xa4>
 8008d76:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008d7a:	d1c5      	bne.n	8008d08 <__swsetup_r+0x24>
 8008d7c:	bd38      	pop	{r3, r4, r5, pc}
 8008d7e:	0799      	lsls	r1, r3, #30
 8008d80:	bf58      	it	pl
 8008d82:	6962      	ldrpl	r2, [r4, #20]
 8008d84:	60a2      	str	r2, [r4, #8]
 8008d86:	e7f4      	b.n	8008d72 <__swsetup_r+0x8e>
 8008d88:	2000      	movs	r0, #0
 8008d8a:	e7f7      	b.n	8008d7c <__swsetup_r+0x98>
 8008d8c:	20000024 	.word	0x20000024

08008d90 <_raise_r>:
 8008d90:	291f      	cmp	r1, #31
 8008d92:	b538      	push	{r3, r4, r5, lr}
 8008d94:	4605      	mov	r5, r0
 8008d96:	460c      	mov	r4, r1
 8008d98:	d904      	bls.n	8008da4 <_raise_r+0x14>
 8008d9a:	2316      	movs	r3, #22
 8008d9c:	6003      	str	r3, [r0, #0]
 8008d9e:	f04f 30ff 	mov.w	r0, #4294967295
 8008da2:	bd38      	pop	{r3, r4, r5, pc}
 8008da4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008da6:	b112      	cbz	r2, 8008dae <_raise_r+0x1e>
 8008da8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008dac:	b94b      	cbnz	r3, 8008dc2 <_raise_r+0x32>
 8008dae:	4628      	mov	r0, r5
 8008db0:	f000 f830 	bl	8008e14 <_getpid_r>
 8008db4:	4622      	mov	r2, r4
 8008db6:	4601      	mov	r1, r0
 8008db8:	4628      	mov	r0, r5
 8008dba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008dbe:	f000 b817 	b.w	8008df0 <_kill_r>
 8008dc2:	2b01      	cmp	r3, #1
 8008dc4:	d00a      	beq.n	8008ddc <_raise_r+0x4c>
 8008dc6:	1c59      	adds	r1, r3, #1
 8008dc8:	d103      	bne.n	8008dd2 <_raise_r+0x42>
 8008dca:	2316      	movs	r3, #22
 8008dcc:	6003      	str	r3, [r0, #0]
 8008dce:	2001      	movs	r0, #1
 8008dd0:	e7e7      	b.n	8008da2 <_raise_r+0x12>
 8008dd2:	2100      	movs	r1, #0
 8008dd4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008dd8:	4620      	mov	r0, r4
 8008dda:	4798      	blx	r3
 8008ddc:	2000      	movs	r0, #0
 8008dde:	e7e0      	b.n	8008da2 <_raise_r+0x12>

08008de0 <raise>:
 8008de0:	4b02      	ldr	r3, [pc, #8]	@ (8008dec <raise+0xc>)
 8008de2:	4601      	mov	r1, r0
 8008de4:	6818      	ldr	r0, [r3, #0]
 8008de6:	f7ff bfd3 	b.w	8008d90 <_raise_r>
 8008dea:	bf00      	nop
 8008dec:	20000024 	.word	0x20000024

08008df0 <_kill_r>:
 8008df0:	b538      	push	{r3, r4, r5, lr}
 8008df2:	4d07      	ldr	r5, [pc, #28]	@ (8008e10 <_kill_r+0x20>)
 8008df4:	2300      	movs	r3, #0
 8008df6:	4604      	mov	r4, r0
 8008df8:	4608      	mov	r0, r1
 8008dfa:	4611      	mov	r1, r2
 8008dfc:	602b      	str	r3, [r5, #0]
 8008dfe:	f7fb f9cd 	bl	800419c <_kill>
 8008e02:	1c43      	adds	r3, r0, #1
 8008e04:	d102      	bne.n	8008e0c <_kill_r+0x1c>
 8008e06:	682b      	ldr	r3, [r5, #0]
 8008e08:	b103      	cbz	r3, 8008e0c <_kill_r+0x1c>
 8008e0a:	6023      	str	r3, [r4, #0]
 8008e0c:	bd38      	pop	{r3, r4, r5, pc}
 8008e0e:	bf00      	nop
 8008e10:	20002da8 	.word	0x20002da8

08008e14 <_getpid_r>:
 8008e14:	f7fb b9ba 	b.w	800418c <_getpid>

08008e18 <__swhatbuf_r>:
 8008e18:	b570      	push	{r4, r5, r6, lr}
 8008e1a:	460c      	mov	r4, r1
 8008e1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e20:	2900      	cmp	r1, #0
 8008e22:	b096      	sub	sp, #88	@ 0x58
 8008e24:	4615      	mov	r5, r2
 8008e26:	461e      	mov	r6, r3
 8008e28:	da0d      	bge.n	8008e46 <__swhatbuf_r+0x2e>
 8008e2a:	89a3      	ldrh	r3, [r4, #12]
 8008e2c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008e30:	f04f 0100 	mov.w	r1, #0
 8008e34:	bf14      	ite	ne
 8008e36:	2340      	movne	r3, #64	@ 0x40
 8008e38:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008e3c:	2000      	movs	r0, #0
 8008e3e:	6031      	str	r1, [r6, #0]
 8008e40:	602b      	str	r3, [r5, #0]
 8008e42:	b016      	add	sp, #88	@ 0x58
 8008e44:	bd70      	pop	{r4, r5, r6, pc}
 8008e46:	466a      	mov	r2, sp
 8008e48:	f000 f848 	bl	8008edc <_fstat_r>
 8008e4c:	2800      	cmp	r0, #0
 8008e4e:	dbec      	blt.n	8008e2a <__swhatbuf_r+0x12>
 8008e50:	9901      	ldr	r1, [sp, #4]
 8008e52:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008e56:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008e5a:	4259      	negs	r1, r3
 8008e5c:	4159      	adcs	r1, r3
 8008e5e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008e62:	e7eb      	b.n	8008e3c <__swhatbuf_r+0x24>

08008e64 <__smakebuf_r>:
 8008e64:	898b      	ldrh	r3, [r1, #12]
 8008e66:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008e68:	079d      	lsls	r5, r3, #30
 8008e6a:	4606      	mov	r6, r0
 8008e6c:	460c      	mov	r4, r1
 8008e6e:	d507      	bpl.n	8008e80 <__smakebuf_r+0x1c>
 8008e70:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008e74:	6023      	str	r3, [r4, #0]
 8008e76:	6123      	str	r3, [r4, #16]
 8008e78:	2301      	movs	r3, #1
 8008e7a:	6163      	str	r3, [r4, #20]
 8008e7c:	b003      	add	sp, #12
 8008e7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e80:	ab01      	add	r3, sp, #4
 8008e82:	466a      	mov	r2, sp
 8008e84:	f7ff ffc8 	bl	8008e18 <__swhatbuf_r>
 8008e88:	9f00      	ldr	r7, [sp, #0]
 8008e8a:	4605      	mov	r5, r0
 8008e8c:	4639      	mov	r1, r7
 8008e8e:	4630      	mov	r0, r6
 8008e90:	f7ff fabc 	bl	800840c <_malloc_r>
 8008e94:	b948      	cbnz	r0, 8008eaa <__smakebuf_r+0x46>
 8008e96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e9a:	059a      	lsls	r2, r3, #22
 8008e9c:	d4ee      	bmi.n	8008e7c <__smakebuf_r+0x18>
 8008e9e:	f023 0303 	bic.w	r3, r3, #3
 8008ea2:	f043 0302 	orr.w	r3, r3, #2
 8008ea6:	81a3      	strh	r3, [r4, #12]
 8008ea8:	e7e2      	b.n	8008e70 <__smakebuf_r+0xc>
 8008eaa:	89a3      	ldrh	r3, [r4, #12]
 8008eac:	6020      	str	r0, [r4, #0]
 8008eae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008eb2:	81a3      	strh	r3, [r4, #12]
 8008eb4:	9b01      	ldr	r3, [sp, #4]
 8008eb6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008eba:	b15b      	cbz	r3, 8008ed4 <__smakebuf_r+0x70>
 8008ebc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008ec0:	4630      	mov	r0, r6
 8008ec2:	f000 f81d 	bl	8008f00 <_isatty_r>
 8008ec6:	b128      	cbz	r0, 8008ed4 <__smakebuf_r+0x70>
 8008ec8:	89a3      	ldrh	r3, [r4, #12]
 8008eca:	f023 0303 	bic.w	r3, r3, #3
 8008ece:	f043 0301 	orr.w	r3, r3, #1
 8008ed2:	81a3      	strh	r3, [r4, #12]
 8008ed4:	89a3      	ldrh	r3, [r4, #12]
 8008ed6:	431d      	orrs	r5, r3
 8008ed8:	81a5      	strh	r5, [r4, #12]
 8008eda:	e7cf      	b.n	8008e7c <__smakebuf_r+0x18>

08008edc <_fstat_r>:
 8008edc:	b538      	push	{r3, r4, r5, lr}
 8008ede:	4d07      	ldr	r5, [pc, #28]	@ (8008efc <_fstat_r+0x20>)
 8008ee0:	2300      	movs	r3, #0
 8008ee2:	4604      	mov	r4, r0
 8008ee4:	4608      	mov	r0, r1
 8008ee6:	4611      	mov	r1, r2
 8008ee8:	602b      	str	r3, [r5, #0]
 8008eea:	f7fb f9b7 	bl	800425c <_fstat>
 8008eee:	1c43      	adds	r3, r0, #1
 8008ef0:	d102      	bne.n	8008ef8 <_fstat_r+0x1c>
 8008ef2:	682b      	ldr	r3, [r5, #0]
 8008ef4:	b103      	cbz	r3, 8008ef8 <_fstat_r+0x1c>
 8008ef6:	6023      	str	r3, [r4, #0]
 8008ef8:	bd38      	pop	{r3, r4, r5, pc}
 8008efa:	bf00      	nop
 8008efc:	20002da8 	.word	0x20002da8

08008f00 <_isatty_r>:
 8008f00:	b538      	push	{r3, r4, r5, lr}
 8008f02:	4d06      	ldr	r5, [pc, #24]	@ (8008f1c <_isatty_r+0x1c>)
 8008f04:	2300      	movs	r3, #0
 8008f06:	4604      	mov	r4, r0
 8008f08:	4608      	mov	r0, r1
 8008f0a:	602b      	str	r3, [r5, #0]
 8008f0c:	f7fb f9b6 	bl	800427c <_isatty>
 8008f10:	1c43      	adds	r3, r0, #1
 8008f12:	d102      	bne.n	8008f1a <_isatty_r+0x1a>
 8008f14:	682b      	ldr	r3, [r5, #0]
 8008f16:	b103      	cbz	r3, 8008f1a <_isatty_r+0x1a>
 8008f18:	6023      	str	r3, [r4, #0]
 8008f1a:	bd38      	pop	{r3, r4, r5, pc}
 8008f1c:	20002da8 	.word	0x20002da8

08008f20 <pow>:
 8008f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f22:	ed2d 8b02 	vpush	{d8}
 8008f26:	eeb0 8a40 	vmov.f32	s16, s0
 8008f2a:	eef0 8a60 	vmov.f32	s17, s1
 8008f2e:	ec55 4b11 	vmov	r4, r5, d1
 8008f32:	f000 f975 	bl	8009220 <__ieee754_pow>
 8008f36:	4622      	mov	r2, r4
 8008f38:	462b      	mov	r3, r5
 8008f3a:	4620      	mov	r0, r4
 8008f3c:	4629      	mov	r1, r5
 8008f3e:	ec57 6b10 	vmov	r6, r7, d0
 8008f42:	f7f7 fdeb 	bl	8000b1c <__aeabi_dcmpun>
 8008f46:	2800      	cmp	r0, #0
 8008f48:	d13b      	bne.n	8008fc2 <pow+0xa2>
 8008f4a:	ec51 0b18 	vmov	r0, r1, d8
 8008f4e:	2200      	movs	r2, #0
 8008f50:	2300      	movs	r3, #0
 8008f52:	f7f7 fdb1 	bl	8000ab8 <__aeabi_dcmpeq>
 8008f56:	b1b8      	cbz	r0, 8008f88 <pow+0x68>
 8008f58:	2200      	movs	r2, #0
 8008f5a:	2300      	movs	r3, #0
 8008f5c:	4620      	mov	r0, r4
 8008f5e:	4629      	mov	r1, r5
 8008f60:	f7f7 fdaa 	bl	8000ab8 <__aeabi_dcmpeq>
 8008f64:	2800      	cmp	r0, #0
 8008f66:	d146      	bne.n	8008ff6 <pow+0xd6>
 8008f68:	ec45 4b10 	vmov	d0, r4, r5
 8008f6c:	f000 f874 	bl	8009058 <finite>
 8008f70:	b338      	cbz	r0, 8008fc2 <pow+0xa2>
 8008f72:	2200      	movs	r2, #0
 8008f74:	2300      	movs	r3, #0
 8008f76:	4620      	mov	r0, r4
 8008f78:	4629      	mov	r1, r5
 8008f7a:	f7f7 fda7 	bl	8000acc <__aeabi_dcmplt>
 8008f7e:	b300      	cbz	r0, 8008fc2 <pow+0xa2>
 8008f80:	f7ff f984 	bl	800828c <__errno>
 8008f84:	2322      	movs	r3, #34	@ 0x22
 8008f86:	e01b      	b.n	8008fc0 <pow+0xa0>
 8008f88:	ec47 6b10 	vmov	d0, r6, r7
 8008f8c:	f000 f864 	bl	8009058 <finite>
 8008f90:	b9e0      	cbnz	r0, 8008fcc <pow+0xac>
 8008f92:	eeb0 0a48 	vmov.f32	s0, s16
 8008f96:	eef0 0a68 	vmov.f32	s1, s17
 8008f9a:	f000 f85d 	bl	8009058 <finite>
 8008f9e:	b1a8      	cbz	r0, 8008fcc <pow+0xac>
 8008fa0:	ec45 4b10 	vmov	d0, r4, r5
 8008fa4:	f000 f858 	bl	8009058 <finite>
 8008fa8:	b180      	cbz	r0, 8008fcc <pow+0xac>
 8008faa:	4632      	mov	r2, r6
 8008fac:	463b      	mov	r3, r7
 8008fae:	4630      	mov	r0, r6
 8008fb0:	4639      	mov	r1, r7
 8008fb2:	f7f7 fdb3 	bl	8000b1c <__aeabi_dcmpun>
 8008fb6:	2800      	cmp	r0, #0
 8008fb8:	d0e2      	beq.n	8008f80 <pow+0x60>
 8008fba:	f7ff f967 	bl	800828c <__errno>
 8008fbe:	2321      	movs	r3, #33	@ 0x21
 8008fc0:	6003      	str	r3, [r0, #0]
 8008fc2:	ecbd 8b02 	vpop	{d8}
 8008fc6:	ec47 6b10 	vmov	d0, r6, r7
 8008fca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008fcc:	2200      	movs	r2, #0
 8008fce:	2300      	movs	r3, #0
 8008fd0:	4630      	mov	r0, r6
 8008fd2:	4639      	mov	r1, r7
 8008fd4:	f7f7 fd70 	bl	8000ab8 <__aeabi_dcmpeq>
 8008fd8:	2800      	cmp	r0, #0
 8008fda:	d0f2      	beq.n	8008fc2 <pow+0xa2>
 8008fdc:	eeb0 0a48 	vmov.f32	s0, s16
 8008fe0:	eef0 0a68 	vmov.f32	s1, s17
 8008fe4:	f000 f838 	bl	8009058 <finite>
 8008fe8:	2800      	cmp	r0, #0
 8008fea:	d0ea      	beq.n	8008fc2 <pow+0xa2>
 8008fec:	ec45 4b10 	vmov	d0, r4, r5
 8008ff0:	f000 f832 	bl	8009058 <finite>
 8008ff4:	e7c3      	b.n	8008f7e <pow+0x5e>
 8008ff6:	4f01      	ldr	r7, [pc, #4]	@ (8008ffc <pow+0xdc>)
 8008ff8:	2600      	movs	r6, #0
 8008ffa:	e7e2      	b.n	8008fc2 <pow+0xa2>
 8008ffc:	3ff00000 	.word	0x3ff00000

08009000 <sqrt>:
 8009000:	b538      	push	{r3, r4, r5, lr}
 8009002:	ed2d 8b02 	vpush	{d8}
 8009006:	ec55 4b10 	vmov	r4, r5, d0
 800900a:	f000 f831 	bl	8009070 <__ieee754_sqrt>
 800900e:	4622      	mov	r2, r4
 8009010:	462b      	mov	r3, r5
 8009012:	4620      	mov	r0, r4
 8009014:	4629      	mov	r1, r5
 8009016:	eeb0 8a40 	vmov.f32	s16, s0
 800901a:	eef0 8a60 	vmov.f32	s17, s1
 800901e:	f7f7 fd7d 	bl	8000b1c <__aeabi_dcmpun>
 8009022:	b990      	cbnz	r0, 800904a <sqrt+0x4a>
 8009024:	2200      	movs	r2, #0
 8009026:	2300      	movs	r3, #0
 8009028:	4620      	mov	r0, r4
 800902a:	4629      	mov	r1, r5
 800902c:	f7f7 fd4e 	bl	8000acc <__aeabi_dcmplt>
 8009030:	b158      	cbz	r0, 800904a <sqrt+0x4a>
 8009032:	f7ff f92b 	bl	800828c <__errno>
 8009036:	2321      	movs	r3, #33	@ 0x21
 8009038:	6003      	str	r3, [r0, #0]
 800903a:	2200      	movs	r2, #0
 800903c:	2300      	movs	r3, #0
 800903e:	4610      	mov	r0, r2
 8009040:	4619      	mov	r1, r3
 8009042:	f7f7 fbfb 	bl	800083c <__aeabi_ddiv>
 8009046:	ec41 0b18 	vmov	d8, r0, r1
 800904a:	eeb0 0a48 	vmov.f32	s0, s16
 800904e:	eef0 0a68 	vmov.f32	s1, s17
 8009052:	ecbd 8b02 	vpop	{d8}
 8009056:	bd38      	pop	{r3, r4, r5, pc}

08009058 <finite>:
 8009058:	b082      	sub	sp, #8
 800905a:	ed8d 0b00 	vstr	d0, [sp]
 800905e:	9801      	ldr	r0, [sp, #4]
 8009060:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8009064:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8009068:	0fc0      	lsrs	r0, r0, #31
 800906a:	b002      	add	sp, #8
 800906c:	4770      	bx	lr
	...

08009070 <__ieee754_sqrt>:
 8009070:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009074:	4a66      	ldr	r2, [pc, #408]	@ (8009210 <__ieee754_sqrt+0x1a0>)
 8009076:	ec55 4b10 	vmov	r4, r5, d0
 800907a:	43aa      	bics	r2, r5
 800907c:	462b      	mov	r3, r5
 800907e:	4621      	mov	r1, r4
 8009080:	d110      	bne.n	80090a4 <__ieee754_sqrt+0x34>
 8009082:	4622      	mov	r2, r4
 8009084:	4620      	mov	r0, r4
 8009086:	4629      	mov	r1, r5
 8009088:	f7f7 faae 	bl	80005e8 <__aeabi_dmul>
 800908c:	4602      	mov	r2, r0
 800908e:	460b      	mov	r3, r1
 8009090:	4620      	mov	r0, r4
 8009092:	4629      	mov	r1, r5
 8009094:	f7f7 f8f2 	bl	800027c <__adddf3>
 8009098:	4604      	mov	r4, r0
 800909a:	460d      	mov	r5, r1
 800909c:	ec45 4b10 	vmov	d0, r4, r5
 80090a0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090a4:	2d00      	cmp	r5, #0
 80090a6:	dc0e      	bgt.n	80090c6 <__ieee754_sqrt+0x56>
 80090a8:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 80090ac:	4322      	orrs	r2, r4
 80090ae:	d0f5      	beq.n	800909c <__ieee754_sqrt+0x2c>
 80090b0:	b19d      	cbz	r5, 80090da <__ieee754_sqrt+0x6a>
 80090b2:	4622      	mov	r2, r4
 80090b4:	4620      	mov	r0, r4
 80090b6:	4629      	mov	r1, r5
 80090b8:	f7f7 f8de 	bl	8000278 <__aeabi_dsub>
 80090bc:	4602      	mov	r2, r0
 80090be:	460b      	mov	r3, r1
 80090c0:	f7f7 fbbc 	bl	800083c <__aeabi_ddiv>
 80090c4:	e7e8      	b.n	8009098 <__ieee754_sqrt+0x28>
 80090c6:	152a      	asrs	r2, r5, #20
 80090c8:	d115      	bne.n	80090f6 <__ieee754_sqrt+0x86>
 80090ca:	2000      	movs	r0, #0
 80090cc:	e009      	b.n	80090e2 <__ieee754_sqrt+0x72>
 80090ce:	0acb      	lsrs	r3, r1, #11
 80090d0:	3a15      	subs	r2, #21
 80090d2:	0549      	lsls	r1, r1, #21
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d0fa      	beq.n	80090ce <__ieee754_sqrt+0x5e>
 80090d8:	e7f7      	b.n	80090ca <__ieee754_sqrt+0x5a>
 80090da:	462a      	mov	r2, r5
 80090dc:	e7fa      	b.n	80090d4 <__ieee754_sqrt+0x64>
 80090de:	005b      	lsls	r3, r3, #1
 80090e0:	3001      	adds	r0, #1
 80090e2:	02dc      	lsls	r4, r3, #11
 80090e4:	d5fb      	bpl.n	80090de <__ieee754_sqrt+0x6e>
 80090e6:	1e44      	subs	r4, r0, #1
 80090e8:	1b12      	subs	r2, r2, r4
 80090ea:	f1c0 0420 	rsb	r4, r0, #32
 80090ee:	fa21 f404 	lsr.w	r4, r1, r4
 80090f2:	4323      	orrs	r3, r4
 80090f4:	4081      	lsls	r1, r0
 80090f6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80090fa:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 80090fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009102:	07d2      	lsls	r2, r2, #31
 8009104:	bf5c      	itt	pl
 8009106:	005b      	lslpl	r3, r3, #1
 8009108:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800910c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009110:	bf58      	it	pl
 8009112:	0049      	lslpl	r1, r1, #1
 8009114:	2600      	movs	r6, #0
 8009116:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800911a:	107f      	asrs	r7, r7, #1
 800911c:	0049      	lsls	r1, r1, #1
 800911e:	2016      	movs	r0, #22
 8009120:	4632      	mov	r2, r6
 8009122:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8009126:	1915      	adds	r5, r2, r4
 8009128:	429d      	cmp	r5, r3
 800912a:	bfde      	ittt	le
 800912c:	192a      	addle	r2, r5, r4
 800912e:	1b5b      	suble	r3, r3, r5
 8009130:	1936      	addle	r6, r6, r4
 8009132:	0fcd      	lsrs	r5, r1, #31
 8009134:	3801      	subs	r0, #1
 8009136:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800913a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800913e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8009142:	d1f0      	bne.n	8009126 <__ieee754_sqrt+0xb6>
 8009144:	4605      	mov	r5, r0
 8009146:	2420      	movs	r4, #32
 8009148:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800914c:	4293      	cmp	r3, r2
 800914e:	eb0c 0e00 	add.w	lr, ip, r0
 8009152:	dc02      	bgt.n	800915a <__ieee754_sqrt+0xea>
 8009154:	d113      	bne.n	800917e <__ieee754_sqrt+0x10e>
 8009156:	458e      	cmp	lr, r1
 8009158:	d811      	bhi.n	800917e <__ieee754_sqrt+0x10e>
 800915a:	f1be 0f00 	cmp.w	lr, #0
 800915e:	eb0e 000c 	add.w	r0, lr, ip
 8009162:	da3f      	bge.n	80091e4 <__ieee754_sqrt+0x174>
 8009164:	2800      	cmp	r0, #0
 8009166:	db3d      	blt.n	80091e4 <__ieee754_sqrt+0x174>
 8009168:	f102 0801 	add.w	r8, r2, #1
 800916c:	1a9b      	subs	r3, r3, r2
 800916e:	458e      	cmp	lr, r1
 8009170:	bf88      	it	hi
 8009172:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8009176:	eba1 010e 	sub.w	r1, r1, lr
 800917a:	4465      	add	r5, ip
 800917c:	4642      	mov	r2, r8
 800917e:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8009182:	3c01      	subs	r4, #1
 8009184:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8009188:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800918c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8009190:	d1dc      	bne.n	800914c <__ieee754_sqrt+0xdc>
 8009192:	4319      	orrs	r1, r3
 8009194:	d01b      	beq.n	80091ce <__ieee754_sqrt+0x15e>
 8009196:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 8009214 <__ieee754_sqrt+0x1a4>
 800919a:	f8df b07c 	ldr.w	fp, [pc, #124]	@ 8009218 <__ieee754_sqrt+0x1a8>
 800919e:	e9da 0100 	ldrd	r0, r1, [sl]
 80091a2:	e9db 2300 	ldrd	r2, r3, [fp]
 80091a6:	f7f7 f867 	bl	8000278 <__aeabi_dsub>
 80091aa:	e9da 8900 	ldrd	r8, r9, [sl]
 80091ae:	4602      	mov	r2, r0
 80091b0:	460b      	mov	r3, r1
 80091b2:	4640      	mov	r0, r8
 80091b4:	4649      	mov	r1, r9
 80091b6:	f7f7 fc93 	bl	8000ae0 <__aeabi_dcmple>
 80091ba:	b140      	cbz	r0, 80091ce <__ieee754_sqrt+0x15e>
 80091bc:	f1b5 3fff 	cmp.w	r5, #4294967295
 80091c0:	e9da 0100 	ldrd	r0, r1, [sl]
 80091c4:	e9db 2300 	ldrd	r2, r3, [fp]
 80091c8:	d10e      	bne.n	80091e8 <__ieee754_sqrt+0x178>
 80091ca:	3601      	adds	r6, #1
 80091cc:	4625      	mov	r5, r4
 80091ce:	1073      	asrs	r3, r6, #1
 80091d0:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 80091d4:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 80091d8:	eb03 5107 	add.w	r1, r3, r7, lsl #20
 80091dc:	086b      	lsrs	r3, r5, #1
 80091de:	ea43 70c6 	orr.w	r0, r3, r6, lsl #31
 80091e2:	e759      	b.n	8009098 <__ieee754_sqrt+0x28>
 80091e4:	4690      	mov	r8, r2
 80091e6:	e7c1      	b.n	800916c <__ieee754_sqrt+0xfc>
 80091e8:	f7f7 f848 	bl	800027c <__adddf3>
 80091ec:	e9da 8900 	ldrd	r8, r9, [sl]
 80091f0:	4602      	mov	r2, r0
 80091f2:	460b      	mov	r3, r1
 80091f4:	4640      	mov	r0, r8
 80091f6:	4649      	mov	r1, r9
 80091f8:	f7f7 fc68 	bl	8000acc <__aeabi_dcmplt>
 80091fc:	b120      	cbz	r0, 8009208 <__ieee754_sqrt+0x198>
 80091fe:	1cab      	adds	r3, r5, #2
 8009200:	bf08      	it	eq
 8009202:	3601      	addeq	r6, #1
 8009204:	3502      	adds	r5, #2
 8009206:	e7e2      	b.n	80091ce <__ieee754_sqrt+0x15e>
 8009208:	1c6b      	adds	r3, r5, #1
 800920a:	f023 0501 	bic.w	r5, r3, #1
 800920e:	e7de      	b.n	80091ce <__ieee754_sqrt+0x15e>
 8009210:	7ff00000 	.word	0x7ff00000
 8009214:	0800a6f8 	.word	0x0800a6f8
 8009218:	0800a6f0 	.word	0x0800a6f0
 800921c:	00000000 	.word	0x00000000

08009220 <__ieee754_pow>:
 8009220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009224:	b091      	sub	sp, #68	@ 0x44
 8009226:	ed8d 1b00 	vstr	d1, [sp]
 800922a:	e9dd 1900 	ldrd	r1, r9, [sp]
 800922e:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 8009232:	ea5a 0001 	orrs.w	r0, sl, r1
 8009236:	ec57 6b10 	vmov	r6, r7, d0
 800923a:	d113      	bne.n	8009264 <__ieee754_pow+0x44>
 800923c:	19b3      	adds	r3, r6, r6
 800923e:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 8009242:	4152      	adcs	r2, r2
 8009244:	4298      	cmp	r0, r3
 8009246:	4b9a      	ldr	r3, [pc, #616]	@ (80094b0 <__ieee754_pow+0x290>)
 8009248:	4193      	sbcs	r3, r2
 800924a:	f080 84ee 	bcs.w	8009c2a <__ieee754_pow+0xa0a>
 800924e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009252:	4630      	mov	r0, r6
 8009254:	4639      	mov	r1, r7
 8009256:	f7f7 f811 	bl	800027c <__adddf3>
 800925a:	ec41 0b10 	vmov	d0, r0, r1
 800925e:	b011      	add	sp, #68	@ 0x44
 8009260:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009264:	4a93      	ldr	r2, [pc, #588]	@ (80094b4 <__ieee754_pow+0x294>)
 8009266:	f027 4500 	bic.w	r5, r7, #2147483648	@ 0x80000000
 800926a:	4295      	cmp	r5, r2
 800926c:	46b8      	mov	r8, r7
 800926e:	4633      	mov	r3, r6
 8009270:	d80a      	bhi.n	8009288 <__ieee754_pow+0x68>
 8009272:	d104      	bne.n	800927e <__ieee754_pow+0x5e>
 8009274:	2e00      	cmp	r6, #0
 8009276:	d1ea      	bne.n	800924e <__ieee754_pow+0x2e>
 8009278:	45aa      	cmp	sl, r5
 800927a:	d8e8      	bhi.n	800924e <__ieee754_pow+0x2e>
 800927c:	e001      	b.n	8009282 <__ieee754_pow+0x62>
 800927e:	4592      	cmp	sl, r2
 8009280:	d802      	bhi.n	8009288 <__ieee754_pow+0x68>
 8009282:	4592      	cmp	sl, r2
 8009284:	d10f      	bne.n	80092a6 <__ieee754_pow+0x86>
 8009286:	b171      	cbz	r1, 80092a6 <__ieee754_pow+0x86>
 8009288:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 800928c:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8009290:	ea58 0803 	orrs.w	r8, r8, r3
 8009294:	d1db      	bne.n	800924e <__ieee754_pow+0x2e>
 8009296:	e9dd 3200 	ldrd	r3, r2, [sp]
 800929a:	18db      	adds	r3, r3, r3
 800929c:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 80092a0:	4152      	adcs	r2, r2
 80092a2:	4598      	cmp	r8, r3
 80092a4:	e7cf      	b.n	8009246 <__ieee754_pow+0x26>
 80092a6:	f1b8 0f00 	cmp.w	r8, #0
 80092aa:	46ab      	mov	fp, r5
 80092ac:	da43      	bge.n	8009336 <__ieee754_pow+0x116>
 80092ae:	4a82      	ldr	r2, [pc, #520]	@ (80094b8 <__ieee754_pow+0x298>)
 80092b0:	4592      	cmp	sl, r2
 80092b2:	d856      	bhi.n	8009362 <__ieee754_pow+0x142>
 80092b4:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 80092b8:	4592      	cmp	sl, r2
 80092ba:	f240 84c5 	bls.w	8009c48 <__ieee754_pow+0xa28>
 80092be:	ea4f 522a 	mov.w	r2, sl, asr #20
 80092c2:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 80092c6:	2a14      	cmp	r2, #20
 80092c8:	dd18      	ble.n	80092fc <__ieee754_pow+0xdc>
 80092ca:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 80092ce:	fa21 f402 	lsr.w	r4, r1, r2
 80092d2:	fa04 f202 	lsl.w	r2, r4, r2
 80092d6:	428a      	cmp	r2, r1
 80092d8:	f040 84b6 	bne.w	8009c48 <__ieee754_pow+0xa28>
 80092dc:	f004 0401 	and.w	r4, r4, #1
 80092e0:	f1c4 0402 	rsb	r4, r4, #2
 80092e4:	2900      	cmp	r1, #0
 80092e6:	d159      	bne.n	800939c <__ieee754_pow+0x17c>
 80092e8:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 80092ec:	d148      	bne.n	8009380 <__ieee754_pow+0x160>
 80092ee:	4632      	mov	r2, r6
 80092f0:	463b      	mov	r3, r7
 80092f2:	4630      	mov	r0, r6
 80092f4:	4639      	mov	r1, r7
 80092f6:	f7f7 f977 	bl	80005e8 <__aeabi_dmul>
 80092fa:	e7ae      	b.n	800925a <__ieee754_pow+0x3a>
 80092fc:	2900      	cmp	r1, #0
 80092fe:	d14c      	bne.n	800939a <__ieee754_pow+0x17a>
 8009300:	f1c2 0214 	rsb	r2, r2, #20
 8009304:	fa4a f402 	asr.w	r4, sl, r2
 8009308:	fa04 f202 	lsl.w	r2, r4, r2
 800930c:	4552      	cmp	r2, sl
 800930e:	f040 8498 	bne.w	8009c42 <__ieee754_pow+0xa22>
 8009312:	f004 0401 	and.w	r4, r4, #1
 8009316:	f1c4 0402 	rsb	r4, r4, #2
 800931a:	4a68      	ldr	r2, [pc, #416]	@ (80094bc <__ieee754_pow+0x29c>)
 800931c:	4592      	cmp	sl, r2
 800931e:	d1e3      	bne.n	80092e8 <__ieee754_pow+0xc8>
 8009320:	f1b9 0f00 	cmp.w	r9, #0
 8009324:	f280 8489 	bge.w	8009c3a <__ieee754_pow+0xa1a>
 8009328:	4964      	ldr	r1, [pc, #400]	@ (80094bc <__ieee754_pow+0x29c>)
 800932a:	4632      	mov	r2, r6
 800932c:	463b      	mov	r3, r7
 800932e:	2000      	movs	r0, #0
 8009330:	f7f7 fa84 	bl	800083c <__aeabi_ddiv>
 8009334:	e791      	b.n	800925a <__ieee754_pow+0x3a>
 8009336:	2400      	movs	r4, #0
 8009338:	bb81      	cbnz	r1, 800939c <__ieee754_pow+0x17c>
 800933a:	4a5e      	ldr	r2, [pc, #376]	@ (80094b4 <__ieee754_pow+0x294>)
 800933c:	4592      	cmp	sl, r2
 800933e:	d1ec      	bne.n	800931a <__ieee754_pow+0xfa>
 8009340:	f105 4240 	add.w	r2, r5, #3221225472	@ 0xc0000000
 8009344:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 8009348:	431a      	orrs	r2, r3
 800934a:	f000 846e 	beq.w	8009c2a <__ieee754_pow+0xa0a>
 800934e:	4b5c      	ldr	r3, [pc, #368]	@ (80094c0 <__ieee754_pow+0x2a0>)
 8009350:	429d      	cmp	r5, r3
 8009352:	d908      	bls.n	8009366 <__ieee754_pow+0x146>
 8009354:	f1b9 0f00 	cmp.w	r9, #0
 8009358:	f280 846b 	bge.w	8009c32 <__ieee754_pow+0xa12>
 800935c:	2000      	movs	r0, #0
 800935e:	2100      	movs	r1, #0
 8009360:	e77b      	b.n	800925a <__ieee754_pow+0x3a>
 8009362:	2402      	movs	r4, #2
 8009364:	e7e8      	b.n	8009338 <__ieee754_pow+0x118>
 8009366:	f1b9 0f00 	cmp.w	r9, #0
 800936a:	f04f 0000 	mov.w	r0, #0
 800936e:	f04f 0100 	mov.w	r1, #0
 8009372:	f6bf af72 	bge.w	800925a <__ieee754_pow+0x3a>
 8009376:	e9dd 0300 	ldrd	r0, r3, [sp]
 800937a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800937e:	e76c      	b.n	800925a <__ieee754_pow+0x3a>
 8009380:	4a50      	ldr	r2, [pc, #320]	@ (80094c4 <__ieee754_pow+0x2a4>)
 8009382:	4591      	cmp	r9, r2
 8009384:	d10a      	bne.n	800939c <__ieee754_pow+0x17c>
 8009386:	f1b8 0f00 	cmp.w	r8, #0
 800938a:	db07      	blt.n	800939c <__ieee754_pow+0x17c>
 800938c:	ec47 6b10 	vmov	d0, r6, r7
 8009390:	b011      	add	sp, #68	@ 0x44
 8009392:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009396:	f7ff be6b 	b.w	8009070 <__ieee754_sqrt>
 800939a:	2400      	movs	r4, #0
 800939c:	ec47 6b10 	vmov	d0, r6, r7
 80093a0:	9302      	str	r3, [sp, #8]
 80093a2:	f000 fc87 	bl	8009cb4 <fabs>
 80093a6:	9b02      	ldr	r3, [sp, #8]
 80093a8:	ec51 0b10 	vmov	r0, r1, d0
 80093ac:	bb43      	cbnz	r3, 8009400 <__ieee754_pow+0x1e0>
 80093ae:	4b43      	ldr	r3, [pc, #268]	@ (80094bc <__ieee754_pow+0x29c>)
 80093b0:	f028 4240 	bic.w	r2, r8, #3221225472	@ 0xc0000000
 80093b4:	429a      	cmp	r2, r3
 80093b6:	d000      	beq.n	80093ba <__ieee754_pow+0x19a>
 80093b8:	bb15      	cbnz	r5, 8009400 <__ieee754_pow+0x1e0>
 80093ba:	f1b9 0f00 	cmp.w	r9, #0
 80093be:	da05      	bge.n	80093cc <__ieee754_pow+0x1ac>
 80093c0:	4602      	mov	r2, r0
 80093c2:	460b      	mov	r3, r1
 80093c4:	2000      	movs	r0, #0
 80093c6:	493d      	ldr	r1, [pc, #244]	@ (80094bc <__ieee754_pow+0x29c>)
 80093c8:	f7f7 fa38 	bl	800083c <__aeabi_ddiv>
 80093cc:	f1b8 0f00 	cmp.w	r8, #0
 80093d0:	f6bf af43 	bge.w	800925a <__ieee754_pow+0x3a>
 80093d4:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 80093d8:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 80093dc:	4325      	orrs	r5, r4
 80093de:	d108      	bne.n	80093f2 <__ieee754_pow+0x1d2>
 80093e0:	4602      	mov	r2, r0
 80093e2:	460b      	mov	r3, r1
 80093e4:	4610      	mov	r0, r2
 80093e6:	4619      	mov	r1, r3
 80093e8:	f7f6 ff46 	bl	8000278 <__aeabi_dsub>
 80093ec:	4602      	mov	r2, r0
 80093ee:	460b      	mov	r3, r1
 80093f0:	e79e      	b.n	8009330 <__ieee754_pow+0x110>
 80093f2:	2c01      	cmp	r4, #1
 80093f4:	f47f af31 	bne.w	800925a <__ieee754_pow+0x3a>
 80093f8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80093fc:	4619      	mov	r1, r3
 80093fe:	e72c      	b.n	800925a <__ieee754_pow+0x3a>
 8009400:	ea4f 73d8 	mov.w	r3, r8, lsr #31
 8009404:	3b01      	subs	r3, #1
 8009406:	ea53 0204 	orrs.w	r2, r3, r4
 800940a:	d102      	bne.n	8009412 <__ieee754_pow+0x1f2>
 800940c:	4632      	mov	r2, r6
 800940e:	463b      	mov	r3, r7
 8009410:	e7e8      	b.n	80093e4 <__ieee754_pow+0x1c4>
 8009412:	3c01      	subs	r4, #1
 8009414:	431c      	orrs	r4, r3
 8009416:	d016      	beq.n	8009446 <__ieee754_pow+0x226>
 8009418:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 80094a0 <__ieee754_pow+0x280>
 800941c:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 8009420:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009424:	f240 8110 	bls.w	8009648 <__ieee754_pow+0x428>
 8009428:	4b27      	ldr	r3, [pc, #156]	@ (80094c8 <__ieee754_pow+0x2a8>)
 800942a:	459a      	cmp	sl, r3
 800942c:	4b24      	ldr	r3, [pc, #144]	@ (80094c0 <__ieee754_pow+0x2a0>)
 800942e:	d916      	bls.n	800945e <__ieee754_pow+0x23e>
 8009430:	429d      	cmp	r5, r3
 8009432:	d80b      	bhi.n	800944c <__ieee754_pow+0x22c>
 8009434:	f1b9 0f00 	cmp.w	r9, #0
 8009438:	da0b      	bge.n	8009452 <__ieee754_pow+0x232>
 800943a:	2000      	movs	r0, #0
 800943c:	b011      	add	sp, #68	@ 0x44
 800943e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009442:	f000 bcf1 	b.w	8009e28 <__math_oflow>
 8009446:	ed9f 7b18 	vldr	d7, [pc, #96]	@ 80094a8 <__ieee754_pow+0x288>
 800944a:	e7e7      	b.n	800941c <__ieee754_pow+0x1fc>
 800944c:	f1b9 0f00 	cmp.w	r9, #0
 8009450:	dcf3      	bgt.n	800943a <__ieee754_pow+0x21a>
 8009452:	2000      	movs	r0, #0
 8009454:	b011      	add	sp, #68	@ 0x44
 8009456:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800945a:	f000 bcdd 	b.w	8009e18 <__math_uflow>
 800945e:	429d      	cmp	r5, r3
 8009460:	d20c      	bcs.n	800947c <__ieee754_pow+0x25c>
 8009462:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009466:	2200      	movs	r2, #0
 8009468:	2300      	movs	r3, #0
 800946a:	f7f7 fb2f 	bl	8000acc <__aeabi_dcmplt>
 800946e:	3800      	subs	r0, #0
 8009470:	bf18      	it	ne
 8009472:	2001      	movne	r0, #1
 8009474:	f1b9 0f00 	cmp.w	r9, #0
 8009478:	daec      	bge.n	8009454 <__ieee754_pow+0x234>
 800947a:	e7df      	b.n	800943c <__ieee754_pow+0x21c>
 800947c:	4b0f      	ldr	r3, [pc, #60]	@ (80094bc <__ieee754_pow+0x29c>)
 800947e:	429d      	cmp	r5, r3
 8009480:	f04f 0200 	mov.w	r2, #0
 8009484:	d922      	bls.n	80094cc <__ieee754_pow+0x2ac>
 8009486:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800948a:	2300      	movs	r3, #0
 800948c:	f7f7 fb1e 	bl	8000acc <__aeabi_dcmplt>
 8009490:	3800      	subs	r0, #0
 8009492:	bf18      	it	ne
 8009494:	2001      	movne	r0, #1
 8009496:	f1b9 0f00 	cmp.w	r9, #0
 800949a:	dccf      	bgt.n	800943c <__ieee754_pow+0x21c>
 800949c:	e7da      	b.n	8009454 <__ieee754_pow+0x234>
 800949e:	bf00      	nop
 80094a0:	00000000 	.word	0x00000000
 80094a4:	3ff00000 	.word	0x3ff00000
 80094a8:	00000000 	.word	0x00000000
 80094ac:	bff00000 	.word	0xbff00000
 80094b0:	fff00000 	.word	0xfff00000
 80094b4:	7ff00000 	.word	0x7ff00000
 80094b8:	433fffff 	.word	0x433fffff
 80094bc:	3ff00000 	.word	0x3ff00000
 80094c0:	3fefffff 	.word	0x3fefffff
 80094c4:	3fe00000 	.word	0x3fe00000
 80094c8:	43f00000 	.word	0x43f00000
 80094cc:	4b5a      	ldr	r3, [pc, #360]	@ (8009638 <__ieee754_pow+0x418>)
 80094ce:	f7f6 fed3 	bl	8000278 <__aeabi_dsub>
 80094d2:	a351      	add	r3, pc, #324	@ (adr r3, 8009618 <__ieee754_pow+0x3f8>)
 80094d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094d8:	4604      	mov	r4, r0
 80094da:	460d      	mov	r5, r1
 80094dc:	f7f7 f884 	bl	80005e8 <__aeabi_dmul>
 80094e0:	a34f      	add	r3, pc, #316	@ (adr r3, 8009620 <__ieee754_pow+0x400>)
 80094e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094e6:	4606      	mov	r6, r0
 80094e8:	460f      	mov	r7, r1
 80094ea:	4620      	mov	r0, r4
 80094ec:	4629      	mov	r1, r5
 80094ee:	f7f7 f87b 	bl	80005e8 <__aeabi_dmul>
 80094f2:	4b52      	ldr	r3, [pc, #328]	@ (800963c <__ieee754_pow+0x41c>)
 80094f4:	4682      	mov	sl, r0
 80094f6:	468b      	mov	fp, r1
 80094f8:	2200      	movs	r2, #0
 80094fa:	4620      	mov	r0, r4
 80094fc:	4629      	mov	r1, r5
 80094fe:	f7f7 f873 	bl	80005e8 <__aeabi_dmul>
 8009502:	4602      	mov	r2, r0
 8009504:	460b      	mov	r3, r1
 8009506:	a148      	add	r1, pc, #288	@ (adr r1, 8009628 <__ieee754_pow+0x408>)
 8009508:	e9d1 0100 	ldrd	r0, r1, [r1]
 800950c:	f7f6 feb4 	bl	8000278 <__aeabi_dsub>
 8009510:	4622      	mov	r2, r4
 8009512:	462b      	mov	r3, r5
 8009514:	f7f7 f868 	bl	80005e8 <__aeabi_dmul>
 8009518:	4602      	mov	r2, r0
 800951a:	460b      	mov	r3, r1
 800951c:	2000      	movs	r0, #0
 800951e:	4948      	ldr	r1, [pc, #288]	@ (8009640 <__ieee754_pow+0x420>)
 8009520:	f7f6 feaa 	bl	8000278 <__aeabi_dsub>
 8009524:	4622      	mov	r2, r4
 8009526:	4680      	mov	r8, r0
 8009528:	4689      	mov	r9, r1
 800952a:	462b      	mov	r3, r5
 800952c:	4620      	mov	r0, r4
 800952e:	4629      	mov	r1, r5
 8009530:	f7f7 f85a 	bl	80005e8 <__aeabi_dmul>
 8009534:	4602      	mov	r2, r0
 8009536:	460b      	mov	r3, r1
 8009538:	4640      	mov	r0, r8
 800953a:	4649      	mov	r1, r9
 800953c:	f7f7 f854 	bl	80005e8 <__aeabi_dmul>
 8009540:	a33b      	add	r3, pc, #236	@ (adr r3, 8009630 <__ieee754_pow+0x410>)
 8009542:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009546:	f7f7 f84f 	bl	80005e8 <__aeabi_dmul>
 800954a:	4602      	mov	r2, r0
 800954c:	460b      	mov	r3, r1
 800954e:	4650      	mov	r0, sl
 8009550:	4659      	mov	r1, fp
 8009552:	f7f6 fe91 	bl	8000278 <__aeabi_dsub>
 8009556:	4602      	mov	r2, r0
 8009558:	460b      	mov	r3, r1
 800955a:	4680      	mov	r8, r0
 800955c:	4689      	mov	r9, r1
 800955e:	4630      	mov	r0, r6
 8009560:	4639      	mov	r1, r7
 8009562:	f7f6 fe8b 	bl	800027c <__adddf3>
 8009566:	2400      	movs	r4, #0
 8009568:	4632      	mov	r2, r6
 800956a:	463b      	mov	r3, r7
 800956c:	4620      	mov	r0, r4
 800956e:	460d      	mov	r5, r1
 8009570:	f7f6 fe82 	bl	8000278 <__aeabi_dsub>
 8009574:	4602      	mov	r2, r0
 8009576:	460b      	mov	r3, r1
 8009578:	4640      	mov	r0, r8
 800957a:	4649      	mov	r1, r9
 800957c:	f7f6 fe7c 	bl	8000278 <__aeabi_dsub>
 8009580:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009584:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009588:	2300      	movs	r3, #0
 800958a:	9304      	str	r3, [sp, #16]
 800958c:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8009590:	4606      	mov	r6, r0
 8009592:	460f      	mov	r7, r1
 8009594:	465b      	mov	r3, fp
 8009596:	4652      	mov	r2, sl
 8009598:	e9dd 0100 	ldrd	r0, r1, [sp]
 800959c:	f7f6 fe6c 	bl	8000278 <__aeabi_dsub>
 80095a0:	4622      	mov	r2, r4
 80095a2:	462b      	mov	r3, r5
 80095a4:	f7f7 f820 	bl	80005e8 <__aeabi_dmul>
 80095a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80095ac:	4680      	mov	r8, r0
 80095ae:	4689      	mov	r9, r1
 80095b0:	4630      	mov	r0, r6
 80095b2:	4639      	mov	r1, r7
 80095b4:	f7f7 f818 	bl	80005e8 <__aeabi_dmul>
 80095b8:	4602      	mov	r2, r0
 80095ba:	460b      	mov	r3, r1
 80095bc:	4640      	mov	r0, r8
 80095be:	4649      	mov	r1, r9
 80095c0:	f7f6 fe5c 	bl	800027c <__adddf3>
 80095c4:	465b      	mov	r3, fp
 80095c6:	4606      	mov	r6, r0
 80095c8:	460f      	mov	r7, r1
 80095ca:	4652      	mov	r2, sl
 80095cc:	4620      	mov	r0, r4
 80095ce:	4629      	mov	r1, r5
 80095d0:	f7f7 f80a 	bl	80005e8 <__aeabi_dmul>
 80095d4:	460b      	mov	r3, r1
 80095d6:	4602      	mov	r2, r0
 80095d8:	4680      	mov	r8, r0
 80095da:	4689      	mov	r9, r1
 80095dc:	4630      	mov	r0, r6
 80095de:	4639      	mov	r1, r7
 80095e0:	f7f6 fe4c 	bl	800027c <__adddf3>
 80095e4:	4b17      	ldr	r3, [pc, #92]	@ (8009644 <__ieee754_pow+0x424>)
 80095e6:	4299      	cmp	r1, r3
 80095e8:	4604      	mov	r4, r0
 80095ea:	460d      	mov	r5, r1
 80095ec:	468b      	mov	fp, r1
 80095ee:	f340 820b 	ble.w	8009a08 <__ieee754_pow+0x7e8>
 80095f2:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 80095f6:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 80095fa:	4303      	orrs	r3, r0
 80095fc:	f000 81ea 	beq.w	80099d4 <__ieee754_pow+0x7b4>
 8009600:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009604:	2200      	movs	r2, #0
 8009606:	2300      	movs	r3, #0
 8009608:	f7f7 fa60 	bl	8000acc <__aeabi_dcmplt>
 800960c:	3800      	subs	r0, #0
 800960e:	bf18      	it	ne
 8009610:	2001      	movne	r0, #1
 8009612:	e713      	b.n	800943c <__ieee754_pow+0x21c>
 8009614:	f3af 8000 	nop.w
 8009618:	60000000 	.word	0x60000000
 800961c:	3ff71547 	.word	0x3ff71547
 8009620:	f85ddf44 	.word	0xf85ddf44
 8009624:	3e54ae0b 	.word	0x3e54ae0b
 8009628:	55555555 	.word	0x55555555
 800962c:	3fd55555 	.word	0x3fd55555
 8009630:	652b82fe 	.word	0x652b82fe
 8009634:	3ff71547 	.word	0x3ff71547
 8009638:	3ff00000 	.word	0x3ff00000
 800963c:	3fd00000 	.word	0x3fd00000
 8009640:	3fe00000 	.word	0x3fe00000
 8009644:	408fffff 	.word	0x408fffff
 8009648:	4bd5      	ldr	r3, [pc, #852]	@ (80099a0 <__ieee754_pow+0x780>)
 800964a:	ea08 0303 	and.w	r3, r8, r3
 800964e:	2200      	movs	r2, #0
 8009650:	b92b      	cbnz	r3, 800965e <__ieee754_pow+0x43e>
 8009652:	4bd4      	ldr	r3, [pc, #848]	@ (80099a4 <__ieee754_pow+0x784>)
 8009654:	f7f6 ffc8 	bl	80005e8 <__aeabi_dmul>
 8009658:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 800965c:	468b      	mov	fp, r1
 800965e:	ea4f 532b 	mov.w	r3, fp, asr #20
 8009662:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8009666:	4413      	add	r3, r2
 8009668:	930a      	str	r3, [sp, #40]	@ 0x28
 800966a:	4bcf      	ldr	r3, [pc, #828]	@ (80099a8 <__ieee754_pow+0x788>)
 800966c:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 8009670:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 8009674:	459b      	cmp	fp, r3
 8009676:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800967a:	dd08      	ble.n	800968e <__ieee754_pow+0x46e>
 800967c:	4bcb      	ldr	r3, [pc, #812]	@ (80099ac <__ieee754_pow+0x78c>)
 800967e:	459b      	cmp	fp, r3
 8009680:	f340 81a5 	ble.w	80099ce <__ieee754_pow+0x7ae>
 8009684:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009686:	3301      	adds	r3, #1
 8009688:	930a      	str	r3, [sp, #40]	@ 0x28
 800968a:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800968e:	f04f 0a00 	mov.w	sl, #0
 8009692:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8009696:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009698:	4bc5      	ldr	r3, [pc, #788]	@ (80099b0 <__ieee754_pow+0x790>)
 800969a:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800969e:	ed93 7b00 	vldr	d7, [r3]
 80096a2:	4629      	mov	r1, r5
 80096a4:	ec53 2b17 	vmov	r2, r3, d7
 80096a8:	ed8d 7b06 	vstr	d7, [sp, #24]
 80096ac:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80096b0:	f7f6 fde2 	bl	8000278 <__aeabi_dsub>
 80096b4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80096b8:	4606      	mov	r6, r0
 80096ba:	460f      	mov	r7, r1
 80096bc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80096c0:	f7f6 fddc 	bl	800027c <__adddf3>
 80096c4:	4602      	mov	r2, r0
 80096c6:	460b      	mov	r3, r1
 80096c8:	2000      	movs	r0, #0
 80096ca:	49ba      	ldr	r1, [pc, #744]	@ (80099b4 <__ieee754_pow+0x794>)
 80096cc:	f7f7 f8b6 	bl	800083c <__aeabi_ddiv>
 80096d0:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 80096d4:	4602      	mov	r2, r0
 80096d6:	460b      	mov	r3, r1
 80096d8:	4630      	mov	r0, r6
 80096da:	4639      	mov	r1, r7
 80096dc:	f7f6 ff84 	bl	80005e8 <__aeabi_dmul>
 80096e0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80096e4:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 80096e8:	106d      	asrs	r5, r5, #1
 80096ea:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 80096ee:	f04f 0b00 	mov.w	fp, #0
 80096f2:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 80096f6:	4661      	mov	r1, ip
 80096f8:	2200      	movs	r2, #0
 80096fa:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 80096fe:	4658      	mov	r0, fp
 8009700:	46e1      	mov	r9, ip
 8009702:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 8009706:	4614      	mov	r4, r2
 8009708:	461d      	mov	r5, r3
 800970a:	f7f6 ff6d 	bl	80005e8 <__aeabi_dmul>
 800970e:	4602      	mov	r2, r0
 8009710:	460b      	mov	r3, r1
 8009712:	4630      	mov	r0, r6
 8009714:	4639      	mov	r1, r7
 8009716:	f7f6 fdaf 	bl	8000278 <__aeabi_dsub>
 800971a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800971e:	4606      	mov	r6, r0
 8009720:	460f      	mov	r7, r1
 8009722:	4620      	mov	r0, r4
 8009724:	4629      	mov	r1, r5
 8009726:	f7f6 fda7 	bl	8000278 <__aeabi_dsub>
 800972a:	4602      	mov	r2, r0
 800972c:	460b      	mov	r3, r1
 800972e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009732:	f7f6 fda1 	bl	8000278 <__aeabi_dsub>
 8009736:	465a      	mov	r2, fp
 8009738:	464b      	mov	r3, r9
 800973a:	f7f6 ff55 	bl	80005e8 <__aeabi_dmul>
 800973e:	4602      	mov	r2, r0
 8009740:	460b      	mov	r3, r1
 8009742:	4630      	mov	r0, r6
 8009744:	4639      	mov	r1, r7
 8009746:	f7f6 fd97 	bl	8000278 <__aeabi_dsub>
 800974a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800974e:	f7f6 ff4b 	bl	80005e8 <__aeabi_dmul>
 8009752:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009756:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800975a:	4610      	mov	r0, r2
 800975c:	4619      	mov	r1, r3
 800975e:	f7f6 ff43 	bl	80005e8 <__aeabi_dmul>
 8009762:	a37d      	add	r3, pc, #500	@ (adr r3, 8009958 <__ieee754_pow+0x738>)
 8009764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009768:	4604      	mov	r4, r0
 800976a:	460d      	mov	r5, r1
 800976c:	f7f6 ff3c 	bl	80005e8 <__aeabi_dmul>
 8009770:	a37b      	add	r3, pc, #492	@ (adr r3, 8009960 <__ieee754_pow+0x740>)
 8009772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009776:	f7f6 fd81 	bl	800027c <__adddf3>
 800977a:	4622      	mov	r2, r4
 800977c:	462b      	mov	r3, r5
 800977e:	f7f6 ff33 	bl	80005e8 <__aeabi_dmul>
 8009782:	a379      	add	r3, pc, #484	@ (adr r3, 8009968 <__ieee754_pow+0x748>)
 8009784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009788:	f7f6 fd78 	bl	800027c <__adddf3>
 800978c:	4622      	mov	r2, r4
 800978e:	462b      	mov	r3, r5
 8009790:	f7f6 ff2a 	bl	80005e8 <__aeabi_dmul>
 8009794:	a376      	add	r3, pc, #472	@ (adr r3, 8009970 <__ieee754_pow+0x750>)
 8009796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800979a:	f7f6 fd6f 	bl	800027c <__adddf3>
 800979e:	4622      	mov	r2, r4
 80097a0:	462b      	mov	r3, r5
 80097a2:	f7f6 ff21 	bl	80005e8 <__aeabi_dmul>
 80097a6:	a374      	add	r3, pc, #464	@ (adr r3, 8009978 <__ieee754_pow+0x758>)
 80097a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097ac:	f7f6 fd66 	bl	800027c <__adddf3>
 80097b0:	4622      	mov	r2, r4
 80097b2:	462b      	mov	r3, r5
 80097b4:	f7f6 ff18 	bl	80005e8 <__aeabi_dmul>
 80097b8:	a371      	add	r3, pc, #452	@ (adr r3, 8009980 <__ieee754_pow+0x760>)
 80097ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097be:	f7f6 fd5d 	bl	800027c <__adddf3>
 80097c2:	4622      	mov	r2, r4
 80097c4:	4606      	mov	r6, r0
 80097c6:	460f      	mov	r7, r1
 80097c8:	462b      	mov	r3, r5
 80097ca:	4620      	mov	r0, r4
 80097cc:	4629      	mov	r1, r5
 80097ce:	f7f6 ff0b 	bl	80005e8 <__aeabi_dmul>
 80097d2:	4602      	mov	r2, r0
 80097d4:	460b      	mov	r3, r1
 80097d6:	4630      	mov	r0, r6
 80097d8:	4639      	mov	r1, r7
 80097da:	f7f6 ff05 	bl	80005e8 <__aeabi_dmul>
 80097de:	465a      	mov	r2, fp
 80097e0:	4604      	mov	r4, r0
 80097e2:	460d      	mov	r5, r1
 80097e4:	464b      	mov	r3, r9
 80097e6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80097ea:	f7f6 fd47 	bl	800027c <__adddf3>
 80097ee:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80097f2:	f7f6 fef9 	bl	80005e8 <__aeabi_dmul>
 80097f6:	4622      	mov	r2, r4
 80097f8:	462b      	mov	r3, r5
 80097fa:	f7f6 fd3f 	bl	800027c <__adddf3>
 80097fe:	465a      	mov	r2, fp
 8009800:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009804:	464b      	mov	r3, r9
 8009806:	4658      	mov	r0, fp
 8009808:	4649      	mov	r1, r9
 800980a:	f7f6 feed 	bl	80005e8 <__aeabi_dmul>
 800980e:	4b6a      	ldr	r3, [pc, #424]	@ (80099b8 <__ieee754_pow+0x798>)
 8009810:	2200      	movs	r2, #0
 8009812:	4606      	mov	r6, r0
 8009814:	460f      	mov	r7, r1
 8009816:	f7f6 fd31 	bl	800027c <__adddf3>
 800981a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800981e:	f7f6 fd2d 	bl	800027c <__adddf3>
 8009822:	46d8      	mov	r8, fp
 8009824:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 8009828:	460d      	mov	r5, r1
 800982a:	465a      	mov	r2, fp
 800982c:	460b      	mov	r3, r1
 800982e:	4640      	mov	r0, r8
 8009830:	4649      	mov	r1, r9
 8009832:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 8009836:	f7f6 fed7 	bl	80005e8 <__aeabi_dmul>
 800983a:	465c      	mov	r4, fp
 800983c:	4680      	mov	r8, r0
 800983e:	4689      	mov	r9, r1
 8009840:	4b5d      	ldr	r3, [pc, #372]	@ (80099b8 <__ieee754_pow+0x798>)
 8009842:	2200      	movs	r2, #0
 8009844:	4620      	mov	r0, r4
 8009846:	4629      	mov	r1, r5
 8009848:	f7f6 fd16 	bl	8000278 <__aeabi_dsub>
 800984c:	4632      	mov	r2, r6
 800984e:	463b      	mov	r3, r7
 8009850:	f7f6 fd12 	bl	8000278 <__aeabi_dsub>
 8009854:	4602      	mov	r2, r0
 8009856:	460b      	mov	r3, r1
 8009858:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800985c:	f7f6 fd0c 	bl	8000278 <__aeabi_dsub>
 8009860:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009864:	f7f6 fec0 	bl	80005e8 <__aeabi_dmul>
 8009868:	4622      	mov	r2, r4
 800986a:	4606      	mov	r6, r0
 800986c:	460f      	mov	r7, r1
 800986e:	462b      	mov	r3, r5
 8009870:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009874:	f7f6 feb8 	bl	80005e8 <__aeabi_dmul>
 8009878:	4602      	mov	r2, r0
 800987a:	460b      	mov	r3, r1
 800987c:	4630      	mov	r0, r6
 800987e:	4639      	mov	r1, r7
 8009880:	f7f6 fcfc 	bl	800027c <__adddf3>
 8009884:	4606      	mov	r6, r0
 8009886:	460f      	mov	r7, r1
 8009888:	4602      	mov	r2, r0
 800988a:	460b      	mov	r3, r1
 800988c:	4640      	mov	r0, r8
 800988e:	4649      	mov	r1, r9
 8009890:	f7f6 fcf4 	bl	800027c <__adddf3>
 8009894:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 8009898:	a33b      	add	r3, pc, #236	@ (adr r3, 8009988 <__ieee754_pow+0x768>)
 800989a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800989e:	4658      	mov	r0, fp
 80098a0:	e9cd bc08 	strd	fp, ip, [sp, #32]
 80098a4:	460d      	mov	r5, r1
 80098a6:	f7f6 fe9f 	bl	80005e8 <__aeabi_dmul>
 80098aa:	465c      	mov	r4, fp
 80098ac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80098b0:	4642      	mov	r2, r8
 80098b2:	464b      	mov	r3, r9
 80098b4:	4620      	mov	r0, r4
 80098b6:	4629      	mov	r1, r5
 80098b8:	f7f6 fcde 	bl	8000278 <__aeabi_dsub>
 80098bc:	4602      	mov	r2, r0
 80098be:	460b      	mov	r3, r1
 80098c0:	4630      	mov	r0, r6
 80098c2:	4639      	mov	r1, r7
 80098c4:	f7f6 fcd8 	bl	8000278 <__aeabi_dsub>
 80098c8:	a331      	add	r3, pc, #196	@ (adr r3, 8009990 <__ieee754_pow+0x770>)
 80098ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098ce:	f7f6 fe8b 	bl	80005e8 <__aeabi_dmul>
 80098d2:	a331      	add	r3, pc, #196	@ (adr r3, 8009998 <__ieee754_pow+0x778>)
 80098d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098d8:	4606      	mov	r6, r0
 80098da:	460f      	mov	r7, r1
 80098dc:	4620      	mov	r0, r4
 80098de:	4629      	mov	r1, r5
 80098e0:	f7f6 fe82 	bl	80005e8 <__aeabi_dmul>
 80098e4:	4602      	mov	r2, r0
 80098e6:	460b      	mov	r3, r1
 80098e8:	4630      	mov	r0, r6
 80098ea:	4639      	mov	r1, r7
 80098ec:	f7f6 fcc6 	bl	800027c <__adddf3>
 80098f0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80098f2:	4b32      	ldr	r3, [pc, #200]	@ (80099bc <__ieee754_pow+0x79c>)
 80098f4:	4413      	add	r3, r2
 80098f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098fa:	f7f6 fcbf 	bl	800027c <__adddf3>
 80098fe:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009902:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009904:	f7f6 fe06 	bl	8000514 <__aeabi_i2d>
 8009908:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800990a:	4b2d      	ldr	r3, [pc, #180]	@ (80099c0 <__ieee754_pow+0x7a0>)
 800990c:	4413      	add	r3, r2
 800990e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009912:	4606      	mov	r6, r0
 8009914:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009918:	460f      	mov	r7, r1
 800991a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800991e:	f7f6 fcad 	bl	800027c <__adddf3>
 8009922:	4642      	mov	r2, r8
 8009924:	464b      	mov	r3, r9
 8009926:	f7f6 fca9 	bl	800027c <__adddf3>
 800992a:	4632      	mov	r2, r6
 800992c:	463b      	mov	r3, r7
 800992e:	f7f6 fca5 	bl	800027c <__adddf3>
 8009932:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 8009936:	4632      	mov	r2, r6
 8009938:	463b      	mov	r3, r7
 800993a:	4658      	mov	r0, fp
 800993c:	460d      	mov	r5, r1
 800993e:	f7f6 fc9b 	bl	8000278 <__aeabi_dsub>
 8009942:	4642      	mov	r2, r8
 8009944:	464b      	mov	r3, r9
 8009946:	f7f6 fc97 	bl	8000278 <__aeabi_dsub>
 800994a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800994e:	f7f6 fc93 	bl	8000278 <__aeabi_dsub>
 8009952:	465c      	mov	r4, fp
 8009954:	e036      	b.n	80099c4 <__ieee754_pow+0x7a4>
 8009956:	bf00      	nop
 8009958:	4a454eef 	.word	0x4a454eef
 800995c:	3fca7e28 	.word	0x3fca7e28
 8009960:	93c9db65 	.word	0x93c9db65
 8009964:	3fcd864a 	.word	0x3fcd864a
 8009968:	a91d4101 	.word	0xa91d4101
 800996c:	3fd17460 	.word	0x3fd17460
 8009970:	518f264d 	.word	0x518f264d
 8009974:	3fd55555 	.word	0x3fd55555
 8009978:	db6fabff 	.word	0xdb6fabff
 800997c:	3fdb6db6 	.word	0x3fdb6db6
 8009980:	33333303 	.word	0x33333303
 8009984:	3fe33333 	.word	0x3fe33333
 8009988:	e0000000 	.word	0xe0000000
 800998c:	3feec709 	.word	0x3feec709
 8009990:	dc3a03fd 	.word	0xdc3a03fd
 8009994:	3feec709 	.word	0x3feec709
 8009998:	145b01f5 	.word	0x145b01f5
 800999c:	be3e2fe0 	.word	0xbe3e2fe0
 80099a0:	7ff00000 	.word	0x7ff00000
 80099a4:	43400000 	.word	0x43400000
 80099a8:	0003988e 	.word	0x0003988e
 80099ac:	000bb679 	.word	0x000bb679
 80099b0:	0800a720 	.word	0x0800a720
 80099b4:	3ff00000 	.word	0x3ff00000
 80099b8:	40080000 	.word	0x40080000
 80099bc:	0800a700 	.word	0x0800a700
 80099c0:	0800a710 	.word	0x0800a710
 80099c4:	4602      	mov	r2, r0
 80099c6:	460b      	mov	r3, r1
 80099c8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80099cc:	e5d6      	b.n	800957c <__ieee754_pow+0x35c>
 80099ce:	f04f 0a01 	mov.w	sl, #1
 80099d2:	e65e      	b.n	8009692 <__ieee754_pow+0x472>
 80099d4:	a3b5      	add	r3, pc, #724	@ (adr r3, 8009cac <__ieee754_pow+0xa8c>)
 80099d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099da:	4630      	mov	r0, r6
 80099dc:	4639      	mov	r1, r7
 80099de:	f7f6 fc4d 	bl	800027c <__adddf3>
 80099e2:	4642      	mov	r2, r8
 80099e4:	e9cd 0100 	strd	r0, r1, [sp]
 80099e8:	464b      	mov	r3, r9
 80099ea:	4620      	mov	r0, r4
 80099ec:	4629      	mov	r1, r5
 80099ee:	f7f6 fc43 	bl	8000278 <__aeabi_dsub>
 80099f2:	4602      	mov	r2, r0
 80099f4:	460b      	mov	r3, r1
 80099f6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80099fa:	f7f7 f885 	bl	8000b08 <__aeabi_dcmpgt>
 80099fe:	2800      	cmp	r0, #0
 8009a00:	f47f adfe 	bne.w	8009600 <__ieee754_pow+0x3e0>
 8009a04:	4ba2      	ldr	r3, [pc, #648]	@ (8009c90 <__ieee754_pow+0xa70>)
 8009a06:	e022      	b.n	8009a4e <__ieee754_pow+0x82e>
 8009a08:	4ca2      	ldr	r4, [pc, #648]	@ (8009c94 <__ieee754_pow+0xa74>)
 8009a0a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8009a0e:	42a3      	cmp	r3, r4
 8009a10:	d919      	bls.n	8009a46 <__ieee754_pow+0x826>
 8009a12:	4ba1      	ldr	r3, [pc, #644]	@ (8009c98 <__ieee754_pow+0xa78>)
 8009a14:	440b      	add	r3, r1
 8009a16:	4303      	orrs	r3, r0
 8009a18:	d009      	beq.n	8009a2e <__ieee754_pow+0x80e>
 8009a1a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009a1e:	2200      	movs	r2, #0
 8009a20:	2300      	movs	r3, #0
 8009a22:	f7f7 f853 	bl	8000acc <__aeabi_dcmplt>
 8009a26:	3800      	subs	r0, #0
 8009a28:	bf18      	it	ne
 8009a2a:	2001      	movne	r0, #1
 8009a2c:	e512      	b.n	8009454 <__ieee754_pow+0x234>
 8009a2e:	4642      	mov	r2, r8
 8009a30:	464b      	mov	r3, r9
 8009a32:	f7f6 fc21 	bl	8000278 <__aeabi_dsub>
 8009a36:	4632      	mov	r2, r6
 8009a38:	463b      	mov	r3, r7
 8009a3a:	f7f7 f85b 	bl	8000af4 <__aeabi_dcmpge>
 8009a3e:	2800      	cmp	r0, #0
 8009a40:	d1eb      	bne.n	8009a1a <__ieee754_pow+0x7fa>
 8009a42:	4b96      	ldr	r3, [pc, #600]	@ (8009c9c <__ieee754_pow+0xa7c>)
 8009a44:	e003      	b.n	8009a4e <__ieee754_pow+0x82e>
 8009a46:	4a96      	ldr	r2, [pc, #600]	@ (8009ca0 <__ieee754_pow+0xa80>)
 8009a48:	4293      	cmp	r3, r2
 8009a4a:	f240 80e7 	bls.w	8009c1c <__ieee754_pow+0x9fc>
 8009a4e:	151b      	asrs	r3, r3, #20
 8009a50:	f2a3 33fe 	subw	r3, r3, #1022	@ 0x3fe
 8009a54:	f44f 1a80 	mov.w	sl, #1048576	@ 0x100000
 8009a58:	fa4a fa03 	asr.w	sl, sl, r3
 8009a5c:	44da      	add	sl, fp
 8009a5e:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8009a62:	4890      	ldr	r0, [pc, #576]	@ (8009ca4 <__ieee754_pow+0xa84>)
 8009a64:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8009a68:	4108      	asrs	r0, r1
 8009a6a:	ea00 030a 	and.w	r3, r0, sl
 8009a6e:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8009a72:	f1c1 0114 	rsb	r1, r1, #20
 8009a76:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8009a7a:	fa4a fa01 	asr.w	sl, sl, r1
 8009a7e:	f1bb 0f00 	cmp.w	fp, #0
 8009a82:	4640      	mov	r0, r8
 8009a84:	4649      	mov	r1, r9
 8009a86:	f04f 0200 	mov.w	r2, #0
 8009a8a:	bfb8      	it	lt
 8009a8c:	f1ca 0a00 	rsblt	sl, sl, #0
 8009a90:	f7f6 fbf2 	bl	8000278 <__aeabi_dsub>
 8009a94:	4680      	mov	r8, r0
 8009a96:	4689      	mov	r9, r1
 8009a98:	4632      	mov	r2, r6
 8009a9a:	463b      	mov	r3, r7
 8009a9c:	4640      	mov	r0, r8
 8009a9e:	4649      	mov	r1, r9
 8009aa0:	f7f6 fbec 	bl	800027c <__adddf3>
 8009aa4:	2400      	movs	r4, #0
 8009aa6:	a36a      	add	r3, pc, #424	@ (adr r3, 8009c50 <__ieee754_pow+0xa30>)
 8009aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aac:	4620      	mov	r0, r4
 8009aae:	460d      	mov	r5, r1
 8009ab0:	f7f6 fd9a 	bl	80005e8 <__aeabi_dmul>
 8009ab4:	4642      	mov	r2, r8
 8009ab6:	e9cd 0100 	strd	r0, r1, [sp]
 8009aba:	464b      	mov	r3, r9
 8009abc:	4620      	mov	r0, r4
 8009abe:	4629      	mov	r1, r5
 8009ac0:	f7f6 fbda 	bl	8000278 <__aeabi_dsub>
 8009ac4:	4602      	mov	r2, r0
 8009ac6:	460b      	mov	r3, r1
 8009ac8:	4630      	mov	r0, r6
 8009aca:	4639      	mov	r1, r7
 8009acc:	f7f6 fbd4 	bl	8000278 <__aeabi_dsub>
 8009ad0:	a361      	add	r3, pc, #388	@ (adr r3, 8009c58 <__ieee754_pow+0xa38>)
 8009ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ad6:	f7f6 fd87 	bl	80005e8 <__aeabi_dmul>
 8009ada:	a361      	add	r3, pc, #388	@ (adr r3, 8009c60 <__ieee754_pow+0xa40>)
 8009adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ae0:	4680      	mov	r8, r0
 8009ae2:	4689      	mov	r9, r1
 8009ae4:	4620      	mov	r0, r4
 8009ae6:	4629      	mov	r1, r5
 8009ae8:	f7f6 fd7e 	bl	80005e8 <__aeabi_dmul>
 8009aec:	4602      	mov	r2, r0
 8009aee:	460b      	mov	r3, r1
 8009af0:	4640      	mov	r0, r8
 8009af2:	4649      	mov	r1, r9
 8009af4:	f7f6 fbc2 	bl	800027c <__adddf3>
 8009af8:	4604      	mov	r4, r0
 8009afa:	460d      	mov	r5, r1
 8009afc:	4602      	mov	r2, r0
 8009afe:	460b      	mov	r3, r1
 8009b00:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009b04:	f7f6 fbba 	bl	800027c <__adddf3>
 8009b08:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009b0c:	4680      	mov	r8, r0
 8009b0e:	4689      	mov	r9, r1
 8009b10:	f7f6 fbb2 	bl	8000278 <__aeabi_dsub>
 8009b14:	4602      	mov	r2, r0
 8009b16:	460b      	mov	r3, r1
 8009b18:	4620      	mov	r0, r4
 8009b1a:	4629      	mov	r1, r5
 8009b1c:	f7f6 fbac 	bl	8000278 <__aeabi_dsub>
 8009b20:	4642      	mov	r2, r8
 8009b22:	4606      	mov	r6, r0
 8009b24:	460f      	mov	r7, r1
 8009b26:	464b      	mov	r3, r9
 8009b28:	4640      	mov	r0, r8
 8009b2a:	4649      	mov	r1, r9
 8009b2c:	f7f6 fd5c 	bl	80005e8 <__aeabi_dmul>
 8009b30:	a34d      	add	r3, pc, #308	@ (adr r3, 8009c68 <__ieee754_pow+0xa48>)
 8009b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b36:	4604      	mov	r4, r0
 8009b38:	460d      	mov	r5, r1
 8009b3a:	f7f6 fd55 	bl	80005e8 <__aeabi_dmul>
 8009b3e:	a34c      	add	r3, pc, #304	@ (adr r3, 8009c70 <__ieee754_pow+0xa50>)
 8009b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b44:	f7f6 fb98 	bl	8000278 <__aeabi_dsub>
 8009b48:	4622      	mov	r2, r4
 8009b4a:	462b      	mov	r3, r5
 8009b4c:	f7f6 fd4c 	bl	80005e8 <__aeabi_dmul>
 8009b50:	a349      	add	r3, pc, #292	@ (adr r3, 8009c78 <__ieee754_pow+0xa58>)
 8009b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b56:	f7f6 fb91 	bl	800027c <__adddf3>
 8009b5a:	4622      	mov	r2, r4
 8009b5c:	462b      	mov	r3, r5
 8009b5e:	f7f6 fd43 	bl	80005e8 <__aeabi_dmul>
 8009b62:	a347      	add	r3, pc, #284	@ (adr r3, 8009c80 <__ieee754_pow+0xa60>)
 8009b64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b68:	f7f6 fb86 	bl	8000278 <__aeabi_dsub>
 8009b6c:	4622      	mov	r2, r4
 8009b6e:	462b      	mov	r3, r5
 8009b70:	f7f6 fd3a 	bl	80005e8 <__aeabi_dmul>
 8009b74:	a344      	add	r3, pc, #272	@ (adr r3, 8009c88 <__ieee754_pow+0xa68>)
 8009b76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b7a:	f7f6 fb7f 	bl	800027c <__adddf3>
 8009b7e:	4622      	mov	r2, r4
 8009b80:	462b      	mov	r3, r5
 8009b82:	f7f6 fd31 	bl	80005e8 <__aeabi_dmul>
 8009b86:	4602      	mov	r2, r0
 8009b88:	460b      	mov	r3, r1
 8009b8a:	4640      	mov	r0, r8
 8009b8c:	4649      	mov	r1, r9
 8009b8e:	f7f6 fb73 	bl	8000278 <__aeabi_dsub>
 8009b92:	4604      	mov	r4, r0
 8009b94:	460d      	mov	r5, r1
 8009b96:	4602      	mov	r2, r0
 8009b98:	460b      	mov	r3, r1
 8009b9a:	4640      	mov	r0, r8
 8009b9c:	4649      	mov	r1, r9
 8009b9e:	f7f6 fd23 	bl	80005e8 <__aeabi_dmul>
 8009ba2:	2200      	movs	r2, #0
 8009ba4:	e9cd 0100 	strd	r0, r1, [sp]
 8009ba8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009bac:	4620      	mov	r0, r4
 8009bae:	4629      	mov	r1, r5
 8009bb0:	f7f6 fb62 	bl	8000278 <__aeabi_dsub>
 8009bb4:	4602      	mov	r2, r0
 8009bb6:	460b      	mov	r3, r1
 8009bb8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009bbc:	f7f6 fe3e 	bl	800083c <__aeabi_ddiv>
 8009bc0:	4632      	mov	r2, r6
 8009bc2:	4604      	mov	r4, r0
 8009bc4:	460d      	mov	r5, r1
 8009bc6:	463b      	mov	r3, r7
 8009bc8:	4640      	mov	r0, r8
 8009bca:	4649      	mov	r1, r9
 8009bcc:	f7f6 fd0c 	bl	80005e8 <__aeabi_dmul>
 8009bd0:	4632      	mov	r2, r6
 8009bd2:	463b      	mov	r3, r7
 8009bd4:	f7f6 fb52 	bl	800027c <__adddf3>
 8009bd8:	4602      	mov	r2, r0
 8009bda:	460b      	mov	r3, r1
 8009bdc:	4620      	mov	r0, r4
 8009bde:	4629      	mov	r1, r5
 8009be0:	f7f6 fb4a 	bl	8000278 <__aeabi_dsub>
 8009be4:	4642      	mov	r2, r8
 8009be6:	464b      	mov	r3, r9
 8009be8:	f7f6 fb46 	bl	8000278 <__aeabi_dsub>
 8009bec:	460b      	mov	r3, r1
 8009bee:	4602      	mov	r2, r0
 8009bf0:	492d      	ldr	r1, [pc, #180]	@ (8009ca8 <__ieee754_pow+0xa88>)
 8009bf2:	2000      	movs	r0, #0
 8009bf4:	f7f6 fb40 	bl	8000278 <__aeabi_dsub>
 8009bf8:	ec41 0b10 	vmov	d0, r0, r1
 8009bfc:	ee10 3a90 	vmov	r3, s1
 8009c00:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8009c04:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009c08:	da0b      	bge.n	8009c22 <__ieee754_pow+0xa02>
 8009c0a:	4650      	mov	r0, sl
 8009c0c:	f000 f85c 	bl	8009cc8 <scalbn>
 8009c10:	ec51 0b10 	vmov	r0, r1, d0
 8009c14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009c18:	f7ff bb6d 	b.w	80092f6 <__ieee754_pow+0xd6>
 8009c1c:	f8dd a010 	ldr.w	sl, [sp, #16]
 8009c20:	e73a      	b.n	8009a98 <__ieee754_pow+0x878>
 8009c22:	ec51 0b10 	vmov	r0, r1, d0
 8009c26:	4619      	mov	r1, r3
 8009c28:	e7f4      	b.n	8009c14 <__ieee754_pow+0x9f4>
 8009c2a:	491f      	ldr	r1, [pc, #124]	@ (8009ca8 <__ieee754_pow+0xa88>)
 8009c2c:	2000      	movs	r0, #0
 8009c2e:	f7ff bb14 	b.w	800925a <__ieee754_pow+0x3a>
 8009c32:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009c36:	f7ff bb10 	b.w	800925a <__ieee754_pow+0x3a>
 8009c3a:	4630      	mov	r0, r6
 8009c3c:	4639      	mov	r1, r7
 8009c3e:	f7ff bb0c 	b.w	800925a <__ieee754_pow+0x3a>
 8009c42:	460c      	mov	r4, r1
 8009c44:	f7ff bb69 	b.w	800931a <__ieee754_pow+0xfa>
 8009c48:	2400      	movs	r4, #0
 8009c4a:	f7ff bb4b 	b.w	80092e4 <__ieee754_pow+0xc4>
 8009c4e:	bf00      	nop
 8009c50:	00000000 	.word	0x00000000
 8009c54:	3fe62e43 	.word	0x3fe62e43
 8009c58:	fefa39ef 	.word	0xfefa39ef
 8009c5c:	3fe62e42 	.word	0x3fe62e42
 8009c60:	0ca86c39 	.word	0x0ca86c39
 8009c64:	be205c61 	.word	0xbe205c61
 8009c68:	72bea4d0 	.word	0x72bea4d0
 8009c6c:	3e663769 	.word	0x3e663769
 8009c70:	c5d26bf1 	.word	0xc5d26bf1
 8009c74:	3ebbbd41 	.word	0x3ebbbd41
 8009c78:	af25de2c 	.word	0xaf25de2c
 8009c7c:	3f11566a 	.word	0x3f11566a
 8009c80:	16bebd93 	.word	0x16bebd93
 8009c84:	3f66c16c 	.word	0x3f66c16c
 8009c88:	5555553e 	.word	0x5555553e
 8009c8c:	3fc55555 	.word	0x3fc55555
 8009c90:	40900000 	.word	0x40900000
 8009c94:	4090cbff 	.word	0x4090cbff
 8009c98:	3f6f3400 	.word	0x3f6f3400
 8009c9c:	4090cc00 	.word	0x4090cc00
 8009ca0:	3fe00000 	.word	0x3fe00000
 8009ca4:	fff00000 	.word	0xfff00000
 8009ca8:	3ff00000 	.word	0x3ff00000
 8009cac:	652b82fe 	.word	0x652b82fe
 8009cb0:	3c971547 	.word	0x3c971547

08009cb4 <fabs>:
 8009cb4:	ec51 0b10 	vmov	r0, r1, d0
 8009cb8:	4602      	mov	r2, r0
 8009cba:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8009cbe:	ec43 2b10 	vmov	d0, r2, r3
 8009cc2:	4770      	bx	lr
 8009cc4:	0000      	movs	r0, r0
	...

08009cc8 <scalbn>:
 8009cc8:	b570      	push	{r4, r5, r6, lr}
 8009cca:	ec55 4b10 	vmov	r4, r5, d0
 8009cce:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8009cd2:	4606      	mov	r6, r0
 8009cd4:	462b      	mov	r3, r5
 8009cd6:	b991      	cbnz	r1, 8009cfe <scalbn+0x36>
 8009cd8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8009cdc:	4323      	orrs	r3, r4
 8009cde:	d03b      	beq.n	8009d58 <scalbn+0x90>
 8009ce0:	4b33      	ldr	r3, [pc, #204]	@ (8009db0 <scalbn+0xe8>)
 8009ce2:	4620      	mov	r0, r4
 8009ce4:	4629      	mov	r1, r5
 8009ce6:	2200      	movs	r2, #0
 8009ce8:	f7f6 fc7e 	bl	80005e8 <__aeabi_dmul>
 8009cec:	4b31      	ldr	r3, [pc, #196]	@ (8009db4 <scalbn+0xec>)
 8009cee:	429e      	cmp	r6, r3
 8009cf0:	4604      	mov	r4, r0
 8009cf2:	460d      	mov	r5, r1
 8009cf4:	da0f      	bge.n	8009d16 <scalbn+0x4e>
 8009cf6:	a326      	add	r3, pc, #152	@ (adr r3, 8009d90 <scalbn+0xc8>)
 8009cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cfc:	e01e      	b.n	8009d3c <scalbn+0x74>
 8009cfe:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8009d02:	4291      	cmp	r1, r2
 8009d04:	d10b      	bne.n	8009d1e <scalbn+0x56>
 8009d06:	4622      	mov	r2, r4
 8009d08:	4620      	mov	r0, r4
 8009d0a:	4629      	mov	r1, r5
 8009d0c:	f7f6 fab6 	bl	800027c <__adddf3>
 8009d10:	4604      	mov	r4, r0
 8009d12:	460d      	mov	r5, r1
 8009d14:	e020      	b.n	8009d58 <scalbn+0x90>
 8009d16:	460b      	mov	r3, r1
 8009d18:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8009d1c:	3936      	subs	r1, #54	@ 0x36
 8009d1e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8009d22:	4296      	cmp	r6, r2
 8009d24:	dd0d      	ble.n	8009d42 <scalbn+0x7a>
 8009d26:	2d00      	cmp	r5, #0
 8009d28:	a11b      	add	r1, pc, #108	@ (adr r1, 8009d98 <scalbn+0xd0>)
 8009d2a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009d2e:	da02      	bge.n	8009d36 <scalbn+0x6e>
 8009d30:	a11b      	add	r1, pc, #108	@ (adr r1, 8009da0 <scalbn+0xd8>)
 8009d32:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009d36:	a318      	add	r3, pc, #96	@ (adr r3, 8009d98 <scalbn+0xd0>)
 8009d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d3c:	f7f6 fc54 	bl	80005e8 <__aeabi_dmul>
 8009d40:	e7e6      	b.n	8009d10 <scalbn+0x48>
 8009d42:	1872      	adds	r2, r6, r1
 8009d44:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8009d48:	428a      	cmp	r2, r1
 8009d4a:	dcec      	bgt.n	8009d26 <scalbn+0x5e>
 8009d4c:	2a00      	cmp	r2, #0
 8009d4e:	dd06      	ble.n	8009d5e <scalbn+0x96>
 8009d50:	f36f 531e 	bfc	r3, #20, #11
 8009d54:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009d58:	ec45 4b10 	vmov	d0, r4, r5
 8009d5c:	bd70      	pop	{r4, r5, r6, pc}
 8009d5e:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8009d62:	da08      	bge.n	8009d76 <scalbn+0xae>
 8009d64:	2d00      	cmp	r5, #0
 8009d66:	a10a      	add	r1, pc, #40	@ (adr r1, 8009d90 <scalbn+0xc8>)
 8009d68:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009d6c:	dac3      	bge.n	8009cf6 <scalbn+0x2e>
 8009d6e:	a10e      	add	r1, pc, #56	@ (adr r1, 8009da8 <scalbn+0xe0>)
 8009d70:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009d74:	e7bf      	b.n	8009cf6 <scalbn+0x2e>
 8009d76:	3236      	adds	r2, #54	@ 0x36
 8009d78:	f36f 531e 	bfc	r3, #20, #11
 8009d7c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009d80:	4620      	mov	r0, r4
 8009d82:	4b0d      	ldr	r3, [pc, #52]	@ (8009db8 <scalbn+0xf0>)
 8009d84:	4629      	mov	r1, r5
 8009d86:	2200      	movs	r2, #0
 8009d88:	e7d8      	b.n	8009d3c <scalbn+0x74>
 8009d8a:	bf00      	nop
 8009d8c:	f3af 8000 	nop.w
 8009d90:	c2f8f359 	.word	0xc2f8f359
 8009d94:	01a56e1f 	.word	0x01a56e1f
 8009d98:	8800759c 	.word	0x8800759c
 8009d9c:	7e37e43c 	.word	0x7e37e43c
 8009da0:	8800759c 	.word	0x8800759c
 8009da4:	fe37e43c 	.word	0xfe37e43c
 8009da8:	c2f8f359 	.word	0xc2f8f359
 8009dac:	81a56e1f 	.word	0x81a56e1f
 8009db0:	43500000 	.word	0x43500000
 8009db4:	ffff3cb0 	.word	0xffff3cb0
 8009db8:	3c900000 	.word	0x3c900000

08009dbc <with_errno>:
 8009dbc:	b510      	push	{r4, lr}
 8009dbe:	ed2d 8b02 	vpush	{d8}
 8009dc2:	eeb0 8a40 	vmov.f32	s16, s0
 8009dc6:	eef0 8a60 	vmov.f32	s17, s1
 8009dca:	4604      	mov	r4, r0
 8009dcc:	f7fe fa5e 	bl	800828c <__errno>
 8009dd0:	eeb0 0a48 	vmov.f32	s0, s16
 8009dd4:	eef0 0a68 	vmov.f32	s1, s17
 8009dd8:	ecbd 8b02 	vpop	{d8}
 8009ddc:	6004      	str	r4, [r0, #0]
 8009dde:	bd10      	pop	{r4, pc}

08009de0 <xflow>:
 8009de0:	4603      	mov	r3, r0
 8009de2:	b507      	push	{r0, r1, r2, lr}
 8009de4:	ec51 0b10 	vmov	r0, r1, d0
 8009de8:	b183      	cbz	r3, 8009e0c <xflow+0x2c>
 8009dea:	4602      	mov	r2, r0
 8009dec:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009df0:	e9cd 2300 	strd	r2, r3, [sp]
 8009df4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009df8:	f7f6 fbf6 	bl	80005e8 <__aeabi_dmul>
 8009dfc:	ec41 0b10 	vmov	d0, r0, r1
 8009e00:	2022      	movs	r0, #34	@ 0x22
 8009e02:	b003      	add	sp, #12
 8009e04:	f85d eb04 	ldr.w	lr, [sp], #4
 8009e08:	f7ff bfd8 	b.w	8009dbc <with_errno>
 8009e0c:	4602      	mov	r2, r0
 8009e0e:	460b      	mov	r3, r1
 8009e10:	e7ee      	b.n	8009df0 <xflow+0x10>
 8009e12:	0000      	movs	r0, r0
 8009e14:	0000      	movs	r0, r0
	...

08009e18 <__math_uflow>:
 8009e18:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8009e20 <__math_uflow+0x8>
 8009e1c:	f7ff bfe0 	b.w	8009de0 <xflow>
 8009e20:	00000000 	.word	0x00000000
 8009e24:	10000000 	.word	0x10000000

08009e28 <__math_oflow>:
 8009e28:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8009e30 <__math_oflow+0x8>
 8009e2c:	f7ff bfd8 	b.w	8009de0 <xflow>
 8009e30:	00000000 	.word	0x00000000
 8009e34:	70000000 	.word	0x70000000

08009e38 <_init>:
 8009e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e3a:	bf00      	nop
 8009e3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e3e:	bc08      	pop	{r3}
 8009e40:	469e      	mov	lr, r3
 8009e42:	4770      	bx	lr

08009e44 <_fini>:
 8009e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e46:	bf00      	nop
 8009e48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e4a:	bc08      	pop	{r3}
 8009e4c:	469e      	mov	lr, r3
 8009e4e:	4770      	bx	lr
