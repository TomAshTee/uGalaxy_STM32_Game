
SpaceShooter-v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008e0c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000930  08008fa0  08008fa0  00018fa0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080098d0  080098d0  0002007c  2**0
                  CONTENTS
  4 .ARM          00000000  080098d0  080098d0  0002007c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080098d0  080098d0  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080098d0  080098d0  000198d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080098d4  080098d4  000198d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  080098d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003610  2000007c  08009954  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000368c  08009954  0002368c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f138  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000267b  00000000  00000000  0002f1e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ec0  00000000  00000000  00031860  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d88  00000000  00000000  00032720  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022bd1  00000000  00000000  000334a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fe91  00000000  00000000  00056079  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d1be9  00000000  00000000  00065f0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00137af3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000049e8  00000000  00000000  00137b44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000007c 	.word	0x2000007c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008f84 	.word	0x08008f84

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000080 	.word	0x20000080
 80001cc:	08008f84 	.word	0x08008f84

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmpun>:
 8000b1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b24:	d102      	bne.n	8000b2c <__aeabi_dcmpun+0x10>
 8000b26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b2a:	d10a      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x20>
 8000b36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b3a:	d102      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	f04f 0001 	mov.w	r0, #1
 8000b46:	4770      	bx	lr

08000b48 <GFX_DrowLine>:
	        }
	   }
}

//Bresenham's algorithm - Wikipedia
void GFX_DrowLine(int X1, int Y1,int X2,int Y2,int I_O) {
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b08e      	sub	sp, #56	; 0x38
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	60f8      	str	r0, [r7, #12]
 8000b50:	60b9      	str	r1, [r7, #8]
 8000b52:	607a      	str	r2, [r7, #4]
 8000b54:	603b      	str	r3, [r7, #0]
	int CurrentX, CurrentY, Xinc, Yinc,
		Dx, Dy, TwoDx, TwoDy,
		TwoDxAccumulatedError, TwoDyAccumulatedError;

	Dx = (X2-X1);
 8000b56:	687a      	ldr	r2, [r7, #4]
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	1ad3      	subs	r3, r2, r3
 8000b5c:	627b      	str	r3, [r7, #36]	; 0x24
	Dy = (Y2-Y1);
 8000b5e:	683a      	ldr	r2, [r7, #0]
 8000b60:	68bb      	ldr	r3, [r7, #8]
 8000b62:	1ad3      	subs	r3, r2, r3
 8000b64:	623b      	str	r3, [r7, #32]

	TwoDx = Dx + Dx;
 8000b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b68:	005b      	lsls	r3, r3, #1
 8000b6a:	61fb      	str	r3, [r7, #28]
	TwoDy = Dy + Dy;
 8000b6c:	6a3b      	ldr	r3, [r7, #32]
 8000b6e:	005b      	lsls	r3, r3, #1
 8000b70:	61bb      	str	r3, [r7, #24]

	CurrentX = X1;
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	637b      	str	r3, [r7, #52]	; 0x34
	CurrentY = Y1;
 8000b76:	68bb      	ldr	r3, [r7, #8]
 8000b78:	633b      	str	r3, [r7, #48]	; 0x30

	Xinc = 1;
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	62fb      	str	r3, [r7, #44]	; 0x2c
	Yinc = 1;
 8000b7e:	2301      	movs	r3, #1
 8000b80:	62bb      	str	r3, [r7, #40]	; 0x28

	if(Dx < 0) {
 8000b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	da08      	bge.n	8000b9a <GFX_DrowLine+0x52>

		Xinc = -1;
 8000b88:	f04f 33ff 	mov.w	r3, #4294967295
 8000b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
		Dx = -Dx;
 8000b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b90:	425b      	negs	r3, r3
 8000b92:	627b      	str	r3, [r7, #36]	; 0x24
		TwoDx = -TwoDx;
 8000b94:	69fb      	ldr	r3, [r7, #28]
 8000b96:	425b      	negs	r3, r3
 8000b98:	61fb      	str	r3, [r7, #28]
	}

	if (Dy < 0) {
 8000b9a:	6a3b      	ldr	r3, [r7, #32]
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	da08      	bge.n	8000bb2 <GFX_DrowLine+0x6a>
		Yinc = -1;
 8000ba0:	f04f 33ff 	mov.w	r3, #4294967295
 8000ba4:	62bb      	str	r3, [r7, #40]	; 0x28
		Dy = -Dy;
 8000ba6:	6a3b      	ldr	r3, [r7, #32]
 8000ba8:	425b      	negs	r3, r3
 8000baa:	623b      	str	r3, [r7, #32]
		TwoDy = -TwoDy;
 8000bac:	69bb      	ldr	r3, [r7, #24]
 8000bae:	425b      	negs	r3, r3
 8000bb0:	61bb      	str	r3, [r7, #24]
	}

	ssd1327_setPixel(X1,Y1,I_O);
 8000bb2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000bb4:	68b9      	ldr	r1, [r7, #8]
 8000bb6:	68f8      	ldr	r0, [r7, #12]
 8000bb8:	f002 ff0e 	bl	80039d8 <ssd1327_setPixel>

	if ((Dx != 0) || (Dy != 0)) {
 8000bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d102      	bne.n	8000bc8 <GFX_DrowLine+0x80>
 8000bc2:	6a3b      	ldr	r3, [r7, #32]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d042      	beq.n	8000c4e <GFX_DrowLine+0x106>

		if (Dy <= Dx) {
 8000bc8:	6a3a      	ldr	r2, [r7, #32]
 8000bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bcc:	429a      	cmp	r2, r3
 8000bce:	dc1f      	bgt.n	8000c10 <GFX_DrowLine+0xc8>
			TwoDxAccumulatedError = 0;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	617b      	str	r3, [r7, #20]
			do {
			    CurrentX += Xinc;
 8000bd4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000bd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bd8:	4413      	add	r3, r2
 8000bda:	637b      	str	r3, [r7, #52]	; 0x34
			    TwoDxAccumulatedError += TwoDy;
 8000bdc:	697a      	ldr	r2, [r7, #20]
 8000bde:	69bb      	ldr	r3, [r7, #24]
 8000be0:	4413      	add	r3, r2
 8000be2:	617b      	str	r3, [r7, #20]
			    if(TwoDxAccumulatedError > Dx) {
 8000be4:	697a      	ldr	r2, [r7, #20]
 8000be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000be8:	429a      	cmp	r2, r3
 8000bea:	dd07      	ble.n	8000bfc <GFX_DrowLine+0xb4>
			        CurrentY += Yinc;
 8000bec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bf0:	4413      	add	r3, r2
 8000bf2:	633b      	str	r3, [r7, #48]	; 0x30
			        TwoDxAccumulatedError -= TwoDx;
 8000bf4:	697a      	ldr	r2, [r7, #20]
 8000bf6:	69fb      	ldr	r3, [r7, #28]
 8000bf8:	1ad3      	subs	r3, r2, r3
 8000bfa:	617b      	str	r3, [r7, #20]
			    }
			    ssd1327_setPixel(CurrentX,CurrentY,I_O);
 8000bfc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000bfe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8000c00:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000c02:	f002 fee9 	bl	80039d8 <ssd1327_setPixel>
			  } while (CurrentX != X2);
 8000c06:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	429a      	cmp	r2, r3
 8000c0c:	d1e2      	bne.n	8000bd4 <GFX_DrowLine+0x8c>
			      }
			      ssd1327_setPixel(CurrentX,CurrentY,I_O);
			  } while (CurrentY != Y2);
		  }
	}
}
 8000c0e:	e01e      	b.n	8000c4e <GFX_DrowLine+0x106>
			  TwoDyAccumulatedError = 0;
 8000c10:	2300      	movs	r3, #0
 8000c12:	613b      	str	r3, [r7, #16]
			      CurrentY += Yinc;
 8000c14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000c16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c18:	4413      	add	r3, r2
 8000c1a:	633b      	str	r3, [r7, #48]	; 0x30
			      TwoDyAccumulatedError += TwoDx;
 8000c1c:	693a      	ldr	r2, [r7, #16]
 8000c1e:	69fb      	ldr	r3, [r7, #28]
 8000c20:	4413      	add	r3, r2
 8000c22:	613b      	str	r3, [r7, #16]
			      if(TwoDyAccumulatedError>Dy) {
 8000c24:	693a      	ldr	r2, [r7, #16]
 8000c26:	6a3b      	ldr	r3, [r7, #32]
 8000c28:	429a      	cmp	r2, r3
 8000c2a:	dd07      	ble.n	8000c3c <GFX_DrowLine+0xf4>
				      CurrentX += Xinc;
 8000c2c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000c2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c30:	4413      	add	r3, r2
 8000c32:	637b      	str	r3, [r7, #52]	; 0x34
				      TwoDyAccumulatedError -= TwoDy;
 8000c34:	693a      	ldr	r2, [r7, #16]
 8000c36:	69bb      	ldr	r3, [r7, #24]
 8000c38:	1ad3      	subs	r3, r2, r3
 8000c3a:	613b      	str	r3, [r7, #16]
			      ssd1327_setPixel(CurrentX,CurrentY,I_O);
 8000c3c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000c3e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8000c40:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000c42:	f002 fec9 	bl	80039d8 <ssd1327_setPixel>
			  } while (CurrentY != Y2);
 8000c46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	429a      	cmp	r2, r3
 8000c4c:	d1e2      	bne.n	8000c14 <GFX_DrowLine+0xcc>
}
 8000c4e:	bf00      	nop
 8000c50:	3738      	adds	r7, #56	; 0x38
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}

08000c56 <GFX_DrowCircleHelper>:
		}
	}
}

void GFX_DrowCircleHelper(int x0, int y0, int r, uint8_t cornername, uint8_t color )
{
 8000c56:	b580      	push	{r7, lr}
 8000c58:	b08a      	sub	sp, #40	; 0x28
 8000c5a:	af00      	add	r7, sp, #0
 8000c5c:	60f8      	str	r0, [r7, #12]
 8000c5e:	60b9      	str	r1, [r7, #8]
 8000c60:	607a      	str	r2, [r7, #4]
 8000c62:	70fb      	strb	r3, [r7, #3]
	int f 		= 1 - r;
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	f1c3 0301 	rsb	r3, r3, #1
 8000c6a:	627b      	str	r3, [r7, #36]	; 0x24
	int ddF_x 	= 1;
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	623b      	str	r3, [r7, #32]
	int ddF_y	= -2 * r;
 8000c70:	687a      	ldr	r2, [r7, #4]
 8000c72:	4613      	mov	r3, r2
 8000c74:	07db      	lsls	r3, r3, #31
 8000c76:	1a9b      	subs	r3, r3, r2
 8000c78:	005b      	lsls	r3, r3, #1
 8000c7a:	61fb      	str	r3, [r7, #28]
	int x		= 0;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	61bb      	str	r3, [r7, #24]
	int y		= r;
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	617b      	str	r3, [r7, #20]

	while(x<y)
 8000c84:	e082      	b.n	8000d8c <GFX_DrowCircleHelper+0x136>
	{
		if(f >= 0)
 8000c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	db09      	blt.n	8000ca0 <GFX_DrowCircleHelper+0x4a>
		{
			y--;
 8000c8c:	697b      	ldr	r3, [r7, #20]
 8000c8e:	3b01      	subs	r3, #1
 8000c90:	617b      	str	r3, [r7, #20]
			ddF_y += 2;
 8000c92:	69fb      	ldr	r3, [r7, #28]
 8000c94:	3302      	adds	r3, #2
 8000c96:	61fb      	str	r3, [r7, #28]
			f += ddF_y;
 8000c98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c9a:	69fb      	ldr	r3, [r7, #28]
 8000c9c:	4413      	add	r3, r2
 8000c9e:	627b      	str	r3, [r7, #36]	; 0x24
		}
		x++;
 8000ca0:	69bb      	ldr	r3, [r7, #24]
 8000ca2:	3301      	adds	r3, #1
 8000ca4:	61bb      	str	r3, [r7, #24]
		ddF_x += 2;
 8000ca6:	6a3b      	ldr	r3, [r7, #32]
 8000ca8:	3302      	adds	r3, #2
 8000caa:	623b      	str	r3, [r7, #32]
		f += ddF_x;
 8000cac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000cae:	6a3b      	ldr	r3, [r7, #32]
 8000cb0:	4413      	add	r3, r2
 8000cb2:	627b      	str	r3, [r7, #36]	; 0x24

		if(cornername & 0x4)
 8000cb4:	78fb      	ldrb	r3, [r7, #3]
 8000cb6:	f003 0304 	and.w	r3, r3, #4
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d015      	beq.n	8000cea <GFX_DrowCircleHelper+0x94>
		{
			ssd1327_setPixel(x0 + x, y0 + y, color);
 8000cbe:	68fa      	ldr	r2, [r7, #12]
 8000cc0:	69bb      	ldr	r3, [r7, #24]
 8000cc2:	18d0      	adds	r0, r2, r3
 8000cc4:	68ba      	ldr	r2, [r7, #8]
 8000cc6:	697b      	ldr	r3, [r7, #20]
 8000cc8:	4413      	add	r3, r2
 8000cca:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8000cce:	4619      	mov	r1, r3
 8000cd0:	f002 fe82 	bl	80039d8 <ssd1327_setPixel>
			ssd1327_setPixel(x0 + y, y0 + x, color);
 8000cd4:	68fa      	ldr	r2, [r7, #12]
 8000cd6:	697b      	ldr	r3, [r7, #20]
 8000cd8:	18d0      	adds	r0, r2, r3
 8000cda:	68ba      	ldr	r2, [r7, #8]
 8000cdc:	69bb      	ldr	r3, [r7, #24]
 8000cde:	4413      	add	r3, r2
 8000ce0:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	f002 fe77 	bl	80039d8 <ssd1327_setPixel>
		}
		if(cornername & 0x2)
 8000cea:	78fb      	ldrb	r3, [r7, #3]
 8000cec:	f003 0302 	and.w	r3, r3, #2
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d015      	beq.n	8000d20 <GFX_DrowCircleHelper+0xca>
		{
			ssd1327_setPixel(x0 + x, y0 - y, color);
 8000cf4:	68fa      	ldr	r2, [r7, #12]
 8000cf6:	69bb      	ldr	r3, [r7, #24]
 8000cf8:	18d0      	adds	r0, r2, r3
 8000cfa:	68ba      	ldr	r2, [r7, #8]
 8000cfc:	697b      	ldr	r3, [r7, #20]
 8000cfe:	1ad3      	subs	r3, r2, r3
 8000d00:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8000d04:	4619      	mov	r1, r3
 8000d06:	f002 fe67 	bl	80039d8 <ssd1327_setPixel>
			ssd1327_setPixel(x0 + y, y0 - x, color);
 8000d0a:	68fa      	ldr	r2, [r7, #12]
 8000d0c:	697b      	ldr	r3, [r7, #20]
 8000d0e:	18d0      	adds	r0, r2, r3
 8000d10:	68ba      	ldr	r2, [r7, #8]
 8000d12:	69bb      	ldr	r3, [r7, #24]
 8000d14:	1ad3      	subs	r3, r2, r3
 8000d16:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	f002 fe5c 	bl	80039d8 <ssd1327_setPixel>
		}
		if(cornername & 0x8)
 8000d20:	78fb      	ldrb	r3, [r7, #3]
 8000d22:	f003 0308 	and.w	r3, r3, #8
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d015      	beq.n	8000d56 <GFX_DrowCircleHelper+0x100>
		{
			ssd1327_setPixel(x0 - x, y0 + y, color);
 8000d2a:	68fa      	ldr	r2, [r7, #12]
 8000d2c:	69bb      	ldr	r3, [r7, #24]
 8000d2e:	1ad0      	subs	r0, r2, r3
 8000d30:	68ba      	ldr	r2, [r7, #8]
 8000d32:	697b      	ldr	r3, [r7, #20]
 8000d34:	4413      	add	r3, r2
 8000d36:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	f002 fe4c 	bl	80039d8 <ssd1327_setPixel>
			ssd1327_setPixel(x0 - y, y0 + x, color);
 8000d40:	68fa      	ldr	r2, [r7, #12]
 8000d42:	697b      	ldr	r3, [r7, #20]
 8000d44:	1ad0      	subs	r0, r2, r3
 8000d46:	68ba      	ldr	r2, [r7, #8]
 8000d48:	69bb      	ldr	r3, [r7, #24]
 8000d4a:	4413      	add	r3, r2
 8000d4c:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8000d50:	4619      	mov	r1, r3
 8000d52:	f002 fe41 	bl	80039d8 <ssd1327_setPixel>
		}
		if(cornername & 0x1)
 8000d56:	78fb      	ldrb	r3, [r7, #3]
 8000d58:	f003 0301 	and.w	r3, r3, #1
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d015      	beq.n	8000d8c <GFX_DrowCircleHelper+0x136>
		{
			ssd1327_setPixel(x0 - x, y0 - y, color);
 8000d60:	68fa      	ldr	r2, [r7, #12]
 8000d62:	69bb      	ldr	r3, [r7, #24]
 8000d64:	1ad0      	subs	r0, r2, r3
 8000d66:	68ba      	ldr	r2, [r7, #8]
 8000d68:	697b      	ldr	r3, [r7, #20]
 8000d6a:	1ad3      	subs	r3, r2, r3
 8000d6c:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8000d70:	4619      	mov	r1, r3
 8000d72:	f002 fe31 	bl	80039d8 <ssd1327_setPixel>
			ssd1327_setPixel(x0 - y, y0 - x, color);
 8000d76:	68fa      	ldr	r2, [r7, #12]
 8000d78:	697b      	ldr	r3, [r7, #20]
 8000d7a:	1ad0      	subs	r0, r2, r3
 8000d7c:	68ba      	ldr	r2, [r7, #8]
 8000d7e:	69bb      	ldr	r3, [r7, #24]
 8000d80:	1ad3      	subs	r3, r2, r3
 8000d82:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8000d86:	4619      	mov	r1, r3
 8000d88:	f002 fe26 	bl	80039d8 <ssd1327_setPixel>
	while(x<y)
 8000d8c:	69ba      	ldr	r2, [r7, #24]
 8000d8e:	697b      	ldr	r3, [r7, #20]
 8000d90:	429a      	cmp	r2, r3
 8000d92:	f6ff af78 	blt.w	8000c86 <GFX_DrowCircleHelper+0x30>
		}
	}
}
 8000d96:	bf00      	nop
 8000d98:	bf00      	nop
 8000d9a:	3728      	adds	r7, #40	; 0x28
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}

08000da0 <GFX_DrowBitMap_P>:
		GFX_DrowLine(x0-y, y0+x, x0-y, y0-x,I_O);
  	}
}

void GFX_DrowBitMap_P (int x, int y, const uint8_t *bitmap, uint8_t w, uint8_t h, uint8_t color)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b086      	sub	sp, #24
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	60f8      	str	r0, [r7, #12]
 8000da8:	60b9      	str	r1, [r7, #8]
 8000daa:	607a      	str	r2, [r7, #4]
 8000dac:	70fb      	strb	r3, [r7, #3]
//
//			ssd1327_setPixel(x+i, y+j, );
//		}
//	}

	uint8_t i, j, byteWidth = (w+7)/8;
 8000dae:	78fb      	ldrb	r3, [r7, #3]
 8000db0:	3307      	adds	r3, #7
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	da00      	bge.n	8000db8 <GFX_DrowBitMap_P+0x18>
 8000db6:	3307      	adds	r3, #7
 8000db8:	10db      	asrs	r3, r3, #3
 8000dba:	757b      	strb	r3, [r7, #21]

	for(j = 0; j < h; j++)
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	75bb      	strb	r3, [r7, #22]
 8000dc0:	e02d      	b.n	8000e1e <GFX_DrowBitMap_P+0x7e>
	{
		for(i = 0; i < w; i++)
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	75fb      	strb	r3, [r7, #23]
 8000dc6:	e023      	b.n	8000e10 <GFX_DrowBitMap_P+0x70>
		{
			if(*(bitmap + j *byteWidth + i /8) & (128 >> (i&7)) )
 8000dc8:	7dbb      	ldrb	r3, [r7, #22]
 8000dca:	7d7a      	ldrb	r2, [r7, #21]
 8000dcc:	fb02 f303 	mul.w	r3, r2, r3
 8000dd0:	461a      	mov	r2, r3
 8000dd2:	7dfb      	ldrb	r3, [r7, #23]
 8000dd4:	08db      	lsrs	r3, r3, #3
 8000dd6:	b2db      	uxtb	r3, r3
 8000dd8:	4413      	add	r3, r2
 8000dda:	687a      	ldr	r2, [r7, #4]
 8000ddc:	4413      	add	r3, r2
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	4619      	mov	r1, r3
 8000de2:	7dfb      	ldrb	r3, [r7, #23]
 8000de4:	f003 0307 	and.w	r3, r3, #7
 8000de8:	2280      	movs	r2, #128	; 0x80
 8000dea:	fa42 f303 	asr.w	r3, r2, r3
 8000dee:	400b      	ands	r3, r1
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d00a      	beq.n	8000e0a <GFX_DrowBitMap_P+0x6a>
				ssd1327_setPixel(x+i, y+j, color);
 8000df4:	7dfa      	ldrb	r2, [r7, #23]
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	18d0      	adds	r0, r2, r3
 8000dfa:	7dba      	ldrb	r2, [r7, #22]
 8000dfc:	68bb      	ldr	r3, [r7, #8]
 8000dfe:	4413      	add	r3, r2
 8000e00:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8000e04:	4619      	mov	r1, r3
 8000e06:	f002 fde7 	bl	80039d8 <ssd1327_setPixel>
		for(i = 0; i < w; i++)
 8000e0a:	7dfb      	ldrb	r3, [r7, #23]
 8000e0c:	3301      	adds	r3, #1
 8000e0e:	75fb      	strb	r3, [r7, #23]
 8000e10:	7dfa      	ldrb	r2, [r7, #23]
 8000e12:	78fb      	ldrb	r3, [r7, #3]
 8000e14:	429a      	cmp	r2, r3
 8000e16:	d3d7      	bcc.n	8000dc8 <GFX_DrowBitMap_P+0x28>
	for(j = 0; j < h; j++)
 8000e18:	7dbb      	ldrb	r3, [r7, #22]
 8000e1a:	3301      	adds	r3, #1
 8000e1c:	75bb      	strb	r3, [r7, #22]
 8000e1e:	7dba      	ldrb	r2, [r7, #22]
 8000e20:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000e24:	429a      	cmp	r2, r3
 8000e26:	d3cc      	bcc.n	8000dc2 <GFX_DrowBitMap_P+0x22>
		}
	}

}
 8000e28:	bf00      	nop
 8000e2a:	bf00      	nop
 8000e2c:	3718      	adds	r7, #24
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
	...

08000e34 <GFX_DrowChar>:

void GFX_DrowChar(int x, int y, char c, uint8_t color, uint8_t bg, uint8_t size)
{
 8000e34:	b590      	push	{r4, r7, lr}
 8000e36:	b089      	sub	sp, #36	; 0x24
 8000e38:	af02      	add	r7, sp, #8
 8000e3a:	60f8      	str	r0, [r7, #12]
 8000e3c:	60b9      	str	r1, [r7, #8]
 8000e3e:	4611      	mov	r1, r2
 8000e40:	461a      	mov	r2, r3
 8000e42:	460b      	mov	r3, r1
 8000e44:	71fb      	strb	r3, [r7, #7]
 8000e46:	4613      	mov	r3, r2
 8000e48:	71bb      	strb	r3, [r7, #6]

	  uint8_t line;
	  int8_t i,j;
	  if((x >= SSD1327_WIDTH)            || // Clip right
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	2b7f      	cmp	r3, #127	; 0x7f
 8000e4e:	f300 80a9 	bgt.w	8000fa4 <GFX_DrowChar+0x170>
 8000e52:	68bb      	ldr	r3, [r7, #8]
 8000e54:	2b7f      	cmp	r3, #127	; 0x7f
 8000e56:	f300 80a5 	bgt.w	8000fa4 <GFX_DrowChar+0x170>
	     (y >= SSD1327_HEIGHT)           || // Clip bottom
	     ((x + 6 * size - 1) < 0) || // Clip left
 8000e5a:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8000e5e:	4613      	mov	r3, r2
 8000e60:	005b      	lsls	r3, r3, #1
 8000e62:	4413      	add	r3, r2
 8000e64:	005b      	lsls	r3, r3, #1
 8000e66:	461a      	mov	r2, r3
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	4413      	add	r3, r2
	     (y >= SSD1327_HEIGHT)           || // Clip bottom
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	f340 8099 	ble.w	8000fa4 <GFX_DrowChar+0x170>
	     ((y + 8 * size - 1) < 0))   // Clip top
 8000e72:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000e76:	00da      	lsls	r2, r3, #3
 8000e78:	68bb      	ldr	r3, [r7, #8]
 8000e7a:	4413      	add	r3, r2
	     ((x + 6 * size - 1) < 0) || // Clip left
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	f340 8091 	ble.w	8000fa4 <GFX_DrowChar+0x170>
	    return;

	  for  (i=0; i<6; i++ ) {
 8000e82:	2300      	movs	r3, #0
 8000e84:	75bb      	strb	r3, [r7, #22]
 8000e86:	e087      	b.n	8000f98 <GFX_DrowChar+0x164>
	    if (i == 5)
 8000e88:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8000e8c:	2b05      	cmp	r3, #5
 8000e8e:	d102      	bne.n	8000e96 <GFX_DrowChar+0x62>
	      line = 0x0;
 8000e90:	2300      	movs	r3, #0
 8000e92:	75fb      	strb	r3, [r7, #23]
 8000e94:	e009      	b.n	8000eaa <GFX_DrowChar+0x76>
	    else
	      //line = pgm_read_byte(font+(c*5)+i);
	    	line = (font[(c*5)+i]);
 8000e96:	79fa      	ldrb	r2, [r7, #7]
 8000e98:	4613      	mov	r3, r2
 8000e9a:	009b      	lsls	r3, r3, #2
 8000e9c:	441a      	add	r2, r3
 8000e9e:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8000ea2:	4413      	add	r3, r2
 8000ea4:	4a41      	ldr	r2, [pc, #260]	; (8000fac <GFX_DrowChar+0x178>)
 8000ea6:	5cd3      	ldrb	r3, [r2, r3]
 8000ea8:	75fb      	strb	r3, [r7, #23]
	    for (j = 0; j<8; j++) {
 8000eaa:	2300      	movs	r3, #0
 8000eac:	757b      	strb	r3, [r7, #21]
 8000eae:	e069      	b.n	8000f84 <GFX_DrowChar+0x150>
	      if (line & 0x1) {
 8000eb0:	7dfb      	ldrb	r3, [r7, #23]
 8000eb2:	f003 0301 	and.w	r3, r3, #1
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d02a      	beq.n	8000f10 <GFX_DrowChar+0xdc>
	        if (size == 1) // default size
 8000eba:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000ebe:	2b01      	cmp	r3, #1
 8000ec0:	d10c      	bne.n	8000edc <GFX_DrowChar+0xa8>
	        	ssd1327_setPixel(x+i, y+j, color);
 8000ec2:	f997 2016 	ldrsb.w	r2, [r7, #22]
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	18d0      	adds	r0, r2, r3
 8000eca:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8000ece:	68bb      	ldr	r3, [r7, #8]
 8000ed0:	4413      	add	r3, r2
 8000ed2:	79ba      	ldrb	r2, [r7, #6]
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	f002 fd7f 	bl	80039d8 <ssd1327_setPixel>
 8000eda:	e04a      	b.n	8000f72 <GFX_DrowChar+0x13e>
	        else {  // big size
	        	GFX_FillRect(x+(i*size), y+(j*size), size, size, color);
 8000edc:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8000ee0:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8000ee4:	fb03 f202 	mul.w	r2, r3, r2
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	18d0      	adds	r0, r2, r3
 8000eec:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000ef0:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8000ef4:	fb03 f202 	mul.w	r2, r3, r2
 8000ef8:	68bb      	ldr	r3, [r7, #8]
 8000efa:	18d1      	adds	r1, r2, r3
 8000efc:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8000f00:	f897 402c 	ldrb.w	r4, [r7, #44]	; 0x2c
 8000f04:	79bb      	ldrb	r3, [r7, #6]
 8000f06:	9300      	str	r3, [sp, #0]
 8000f08:	4623      	mov	r3, r4
 8000f0a:	f000 f851 	bl	8000fb0 <GFX_FillRect>
 8000f0e:	e030      	b.n	8000f72 <GFX_DrowChar+0x13e>
	        }
	      } else if (bg != color) {
 8000f10:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8000f14:	79bb      	ldrb	r3, [r7, #6]
 8000f16:	429a      	cmp	r2, r3
 8000f18:	d02b      	beq.n	8000f72 <GFX_DrowChar+0x13e>
	        if (size == 1) // default size
 8000f1a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000f1e:	2b01      	cmp	r3, #1
 8000f20:	d10d      	bne.n	8000f3e <GFX_DrowChar+0x10a>
	        	ssd1327_setPixel(x+i, y+j, bg);
 8000f22:	f997 2016 	ldrsb.w	r2, [r7, #22]
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	18d0      	adds	r0, r2, r3
 8000f2a:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8000f2e:	68bb      	ldr	r3, [r7, #8]
 8000f30:	4413      	add	r3, r2
 8000f32:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8000f36:	4619      	mov	r1, r3
 8000f38:	f002 fd4e 	bl	80039d8 <ssd1327_setPixel>
 8000f3c:	e019      	b.n	8000f72 <GFX_DrowChar+0x13e>
	        else {  // big size
	        	GFX_FillRect(x+i*size, y+j*size, size, size, bg);
 8000f3e:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8000f42:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8000f46:	fb03 f202 	mul.w	r2, r3, r2
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	18d0      	adds	r0, r2, r3
 8000f4e:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000f52:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8000f56:	fb03 f202 	mul.w	r2, r3, r2
 8000f5a:	68bb      	ldr	r3, [r7, #8]
 8000f5c:	18d1      	adds	r1, r2, r3
 8000f5e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8000f62:	f897 402c 	ldrb.w	r4, [r7, #44]	; 0x2c
 8000f66:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000f6a:	9300      	str	r3, [sp, #0]
 8000f6c:	4623      	mov	r3, r4
 8000f6e:	f000 f81f 	bl	8000fb0 <GFX_FillRect>
	        }
	      }
	      line >>= 1;
 8000f72:	7dfb      	ldrb	r3, [r7, #23]
 8000f74:	085b      	lsrs	r3, r3, #1
 8000f76:	75fb      	strb	r3, [r7, #23]
	    for (j = 0; j<8; j++) {
 8000f78:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000f7c:	b2db      	uxtb	r3, r3
 8000f7e:	3301      	adds	r3, #1
 8000f80:	b2db      	uxtb	r3, r3
 8000f82:	757b      	strb	r3, [r7, #21]
 8000f84:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000f88:	2b07      	cmp	r3, #7
 8000f8a:	dd91      	ble.n	8000eb0 <GFX_DrowChar+0x7c>
	  for  (i=0; i<6; i++ ) {
 8000f8c:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8000f90:	b2db      	uxtb	r3, r3
 8000f92:	3301      	adds	r3, #1
 8000f94:	b2db      	uxtb	r3, r3
 8000f96:	75bb      	strb	r3, [r7, #22]
 8000f98:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8000f9c:	2b05      	cmp	r3, #5
 8000f9e:	f77f af73 	ble.w	8000e88 <GFX_DrowChar+0x54>
 8000fa2:	e000      	b.n	8000fa6 <GFX_DrowChar+0x172>
	    return;
 8000fa4:	bf00      	nop
	    }
	  }
}
 8000fa6:	371c      	adds	r7, #28
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd90      	pop	{r4, r7, pc}
 8000fac:	08008fa0 	.word	0x08008fa0

08000fb0 <GFX_FillRect>:

void GFX_FillRect (int x, int y, int w, int h, uint8_t color )
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b086      	sub	sp, #24
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	60f8      	str	r0, [r7, #12]
 8000fb8:	60b9      	str	r1, [r7, #8]
 8000fba:	607a      	str	r2, [r7, #4]
 8000fbc:	603b      	str	r3, [r7, #0]
	int16_t i;
	for(i=x; i <x+w; i++)
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	82fb      	strh	r3, [r7, #22]
 8000fc2:	e00d      	b.n	8000fe0 <GFX_FillRect+0x30>
	{
		GFX_DrowFastVLine(i, y, h, color);
 8000fc4:	f9b7 0016 	ldrsh.w	r0, [r7, #22]
 8000fc8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000fcc:	683a      	ldr	r2, [r7, #0]
 8000fce:	68b9      	ldr	r1, [r7, #8]
 8000fd0:	f000 f812 	bl	8000ff8 <GFX_DrowFastVLine>
	for(i=x; i <x+w; i++)
 8000fd4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000fd8:	b29b      	uxth	r3, r3
 8000fda:	3301      	adds	r3, #1
 8000fdc:	b29b      	uxth	r3, r3
 8000fde:	82fb      	strh	r3, [r7, #22]
 8000fe0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8000fe4:	68f9      	ldr	r1, [r7, #12]
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	440b      	add	r3, r1
 8000fea:	429a      	cmp	r2, r3
 8000fec:	dbea      	blt.n	8000fc4 <GFX_FillRect+0x14>
	}
}
 8000fee:	bf00      	nop
 8000ff0:	bf00      	nop
 8000ff2:	3718      	adds	r7, #24
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}

08000ff8 <GFX_DrowFastVLine>:

void GFX_DrowFastVLine(int x, int y, int h, uint8_t color)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b086      	sub	sp, #24
 8000ffc:	af02      	add	r7, sp, #8
 8000ffe:	60f8      	str	r0, [r7, #12]
 8001000:	60b9      	str	r1, [r7, #8]
 8001002:	607a      	str	r2, [r7, #4]
 8001004:	70fb      	strb	r3, [r7, #3]
	GFX_DrowLine(x, y, x, y+h-1, color);
 8001006:	68ba      	ldr	r2, [r7, #8]
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	4413      	add	r3, r2
 800100c:	1e5a      	subs	r2, r3, #1
 800100e:	78fb      	ldrb	r3, [r7, #3]
 8001010:	9300      	str	r3, [sp, #0]
 8001012:	4613      	mov	r3, r2
 8001014:	68fa      	ldr	r2, [r7, #12]
 8001016:	68b9      	ldr	r1, [r7, #8]
 8001018:	68f8      	ldr	r0, [r7, #12]
 800101a:	f7ff fd95 	bl	8000b48 <GFX_DrowLine>
}
 800101e:	bf00      	nop
 8001020:	3710      	adds	r7, #16
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}

08001026 <GFX_DrowFastHLine>:

void GFX_DrowFastHLine(int x, int y, int w, uint8_t color)
{
 8001026:	b580      	push	{r7, lr}
 8001028:	b086      	sub	sp, #24
 800102a:	af02      	add	r7, sp, #8
 800102c:	60f8      	str	r0, [r7, #12]
 800102e:	60b9      	str	r1, [r7, #8]
 8001030:	607a      	str	r2, [r7, #4]
 8001032:	70fb      	strb	r3, [r7, #3]
	GFX_DrowLine(x, y, x+w-1 ,y , color);
 8001034:	68fa      	ldr	r2, [r7, #12]
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	4413      	add	r3, r2
 800103a:	1e5a      	subs	r2, r3, #1
 800103c:	78fb      	ldrb	r3, [r7, #3]
 800103e:	9300      	str	r3, [sp, #0]
 8001040:	68bb      	ldr	r3, [r7, #8]
 8001042:	68b9      	ldr	r1, [r7, #8]
 8001044:	68f8      	ldr	r0, [r7, #12]
 8001046:	f7ff fd7f 	bl	8000b48 <GFX_DrowLine>
}
 800104a:	bf00      	nop
 800104c:	3710      	adds	r7, #16
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
	...

08001054 <GFX_PutString>:

void GFX_PutString(int x, int y, char* str, uint8_t txt_size, uint8_t color, uint8_t bg)
{
 8001054:	b590      	push	{r4, r7, lr}
 8001056:	b087      	sub	sp, #28
 8001058:	af02      	add	r7, sp, #8
 800105a:	60f8      	str	r0, [r7, #12]
 800105c:	60b9      	str	r1, [r7, #8]
 800105e:	607a      	str	r2, [r7, #4]
 8001060:	70fb      	strb	r3, [r7, #3]
	cursor_x = x;
 8001062:	4a16      	ldr	r2, [pc, #88]	; (80010bc <GFX_PutString+0x68>)
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	6013      	str	r3, [r2, #0]
	cursor_y = y;
 8001068:	4a15      	ldr	r2, [pc, #84]	; (80010c0 <GFX_PutString+0x6c>)
 800106a:	68bb      	ldr	r3, [r7, #8]
 800106c:	6013      	str	r3, [r2, #0]

	while(*str)		//do kiedy jest cos w stringu
 800106e:	e01c      	b.n	80010aa <GFX_PutString+0x56>
	{
		GFX_DrowChar(cursor_x,cursor_y, *str++, color, bg, txt_size);
 8001070:	4b12      	ldr	r3, [pc, #72]	; (80010bc <GFX_PutString+0x68>)
 8001072:	6818      	ldr	r0, [r3, #0]
 8001074:	4b12      	ldr	r3, [pc, #72]	; (80010c0 <GFX_PutString+0x6c>)
 8001076:	6819      	ldr	r1, [r3, #0]
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	1c5a      	adds	r2, r3, #1
 800107c:	607a      	str	r2, [r7, #4]
 800107e:	781a      	ldrb	r2, [r3, #0]
 8001080:	f897 4020 	ldrb.w	r4, [r7, #32]
 8001084:	78fb      	ldrb	r3, [r7, #3]
 8001086:	9301      	str	r3, [sp, #4]
 8001088:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800108c:	9300      	str	r3, [sp, #0]
 800108e:	4623      	mov	r3, r4
 8001090:	f7ff fed0 	bl	8000e34 <GFX_DrowChar>
		cursor_x += txt_size*6; // tylko pod dany font trzeba potem to korygowa�
 8001094:	78fa      	ldrb	r2, [r7, #3]
 8001096:	4613      	mov	r3, r2
 8001098:	005b      	lsls	r3, r3, #1
 800109a:	4413      	add	r3, r2
 800109c:	005b      	lsls	r3, r3, #1
 800109e:	461a      	mov	r2, r3
 80010a0:	4b06      	ldr	r3, [pc, #24]	; (80010bc <GFX_PutString+0x68>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4413      	add	r3, r2
 80010a6:	4a05      	ldr	r2, [pc, #20]	; (80010bc <GFX_PutString+0x68>)
 80010a8:	6013      	str	r3, [r2, #0]
	while(*str)		//do kiedy jest cos w stringu
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d1de      	bne.n	8001070 <GFX_PutString+0x1c>
	}
}
 80010b2:	bf00      	nop
 80010b4:	bf00      	nop
 80010b6:	3714      	adds	r7, #20
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd90      	pop	{r4, r7, pc}
 80010bc:	20000098 	.word	0x20000098
 80010c0:	2000009c 	.word	0x2000009c

080010c4 <GFX_PutInt>:

void GFX_PutInt (int x, int y, int data, uint8_t txt_size, uint8_t color, uint8_t bg)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b08a      	sub	sp, #40	; 0x28
 80010c8:	af02      	add	r7, sp, #8
 80010ca:	60f8      	str	r0, [r7, #12]
 80010cc:	60b9      	str	r1, [r7, #8]
 80010ce:	607a      	str	r2, [r7, #4]
 80010d0:	70fb      	strb	r3, [r7, #3]
	char buf[16];
	GFX_PutString(x, y, itoa(data, buf,10), txt_size, color, bg);
 80010d2:	f107 0310 	add.w	r3, r7, #16
 80010d6:	220a      	movs	r2, #10
 80010d8:	4619      	mov	r1, r3
 80010da:	6878      	ldr	r0, [r7, #4]
 80010dc:	f000 f88c 	bl	80011f8 <itoa>
 80010e0:	4601      	mov	r1, r0
 80010e2:	78fa      	ldrb	r2, [r7, #3]
 80010e4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80010e8:	9301      	str	r3, [sp, #4]
 80010ea:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80010ee:	9300      	str	r3, [sp, #0]
 80010f0:	4613      	mov	r3, r2
 80010f2:	460a      	mov	r2, r1
 80010f4:	68b9      	ldr	r1, [r7, #8]
 80010f6:	68f8      	ldr	r0, [r7, #12]
 80010f8:	f7ff ffac 	bl	8001054 <GFX_PutString>
	//GFX_PutString(x, y, dtoa((double)data,1,1,1,1,buf), txt_size, color, bg);
	//itoa(data,buf);
	//GFX_PutString(x, y, buf , txt_size, color, bg);
}
 80010fc:	bf00      	nop
 80010fe:	3720      	adds	r7, #32
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}

08001104 <GFX_DrowRoundRect>:

void GFX_DrowRoundRect(int x, int y, int w, int h, uint8_t r, uint8_t color)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b086      	sub	sp, #24
 8001108:	af02      	add	r7, sp, #8
 800110a:	60f8      	str	r0, [r7, #12]
 800110c:	60b9      	str	r1, [r7, #8]
 800110e:	607a      	str	r2, [r7, #4]
 8001110:	603b      	str	r3, [r7, #0]
	// r - to jest wielkosc zaokraglonego naro�nika
	GFX_DrowFastHLine(x+r	,y		,w-2*r	,color );
 8001112:	7e3a      	ldrb	r2, [r7, #24]
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	18d0      	adds	r0, r2, r3
 8001118:	7e3b      	ldrb	r3, [r7, #24]
 800111a:	005b      	lsls	r3, r3, #1
 800111c:	687a      	ldr	r2, [r7, #4]
 800111e:	1ad2      	subs	r2, r2, r3
 8001120:	7f3b      	ldrb	r3, [r7, #28]
 8001122:	68b9      	ldr	r1, [r7, #8]
 8001124:	f7ff ff7f 	bl	8001026 <GFX_DrowFastHLine>
	GFX_DrowFastHLine(x+r	,y+h-1	,w-2*r	,color );
 8001128:	7e3a      	ldrb	r2, [r7, #24]
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	18d0      	adds	r0, r2, r3
 800112e:	68ba      	ldr	r2, [r7, #8]
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	4413      	add	r3, r2
 8001134:	1e59      	subs	r1, r3, #1
 8001136:	7e3b      	ldrb	r3, [r7, #24]
 8001138:	005b      	lsls	r3, r3, #1
 800113a:	687a      	ldr	r2, [r7, #4]
 800113c:	1ad2      	subs	r2, r2, r3
 800113e:	7f3b      	ldrb	r3, [r7, #28]
 8001140:	f7ff ff71 	bl	8001026 <GFX_DrowFastHLine>
	GFX_DrowFastVLine(x		,y+r	,h-2*r	,color );
 8001144:	7e3a      	ldrb	r2, [r7, #24]
 8001146:	68bb      	ldr	r3, [r7, #8]
 8001148:	18d1      	adds	r1, r2, r3
 800114a:	7e3b      	ldrb	r3, [r7, #24]
 800114c:	005b      	lsls	r3, r3, #1
 800114e:	683a      	ldr	r2, [r7, #0]
 8001150:	1ad2      	subs	r2, r2, r3
 8001152:	7f3b      	ldrb	r3, [r7, #28]
 8001154:	68f8      	ldr	r0, [r7, #12]
 8001156:	f7ff ff4f 	bl	8000ff8 <GFX_DrowFastVLine>
	GFX_DrowFastVLine(x+w-1	,y+r	,h-2*r	,color );
 800115a:	68fa      	ldr	r2, [r7, #12]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	4413      	add	r3, r2
 8001160:	1e58      	subs	r0, r3, #1
 8001162:	7e3a      	ldrb	r2, [r7, #24]
 8001164:	68bb      	ldr	r3, [r7, #8]
 8001166:	18d1      	adds	r1, r2, r3
 8001168:	7e3b      	ldrb	r3, [r7, #24]
 800116a:	005b      	lsls	r3, r3, #1
 800116c:	683a      	ldr	r2, [r7, #0]
 800116e:	1ad2      	subs	r2, r2, r3
 8001170:	7f3b      	ldrb	r3, [r7, #28]
 8001172:	f7ff ff41 	bl	8000ff8 <GFX_DrowFastVLine>

	GFX_DrowCircleHelper(x+r	,y+r	,r	,1	,color);
 8001176:	7e3a      	ldrb	r2, [r7, #24]
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	18d0      	adds	r0, r2, r3
 800117c:	7e3a      	ldrb	r2, [r7, #24]
 800117e:	68bb      	ldr	r3, [r7, #8]
 8001180:	18d1      	adds	r1, r2, r3
 8001182:	7e3a      	ldrb	r2, [r7, #24]
 8001184:	7f3b      	ldrb	r3, [r7, #28]
 8001186:	9300      	str	r3, [sp, #0]
 8001188:	2301      	movs	r3, #1
 800118a:	f7ff fd64 	bl	8000c56 <GFX_DrowCircleHelper>
	GFX_DrowCircleHelper(x+w-r-1,y+r	,r	,2	,color);
 800118e:	68fa      	ldr	r2, [r7, #12]
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	441a      	add	r2, r3
 8001194:	7e3b      	ldrb	r3, [r7, #24]
 8001196:	1ad3      	subs	r3, r2, r3
 8001198:	1e58      	subs	r0, r3, #1
 800119a:	7e3a      	ldrb	r2, [r7, #24]
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	18d1      	adds	r1, r2, r3
 80011a0:	7e3a      	ldrb	r2, [r7, #24]
 80011a2:	7f3b      	ldrb	r3, [r7, #28]
 80011a4:	9300      	str	r3, [sp, #0]
 80011a6:	2302      	movs	r3, #2
 80011a8:	f7ff fd55 	bl	8000c56 <GFX_DrowCircleHelper>
	GFX_DrowCircleHelper(x+w-r-1,y+h-r-1,r	,4	,color);
 80011ac:	68fa      	ldr	r2, [r7, #12]
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	441a      	add	r2, r3
 80011b2:	7e3b      	ldrb	r3, [r7, #24]
 80011b4:	1ad3      	subs	r3, r2, r3
 80011b6:	1e58      	subs	r0, r3, #1
 80011b8:	68ba      	ldr	r2, [r7, #8]
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	441a      	add	r2, r3
 80011be:	7e3b      	ldrb	r3, [r7, #24]
 80011c0:	1ad3      	subs	r3, r2, r3
 80011c2:	1e59      	subs	r1, r3, #1
 80011c4:	7e3a      	ldrb	r2, [r7, #24]
 80011c6:	7f3b      	ldrb	r3, [r7, #28]
 80011c8:	9300      	str	r3, [sp, #0]
 80011ca:	2304      	movs	r3, #4
 80011cc:	f7ff fd43 	bl	8000c56 <GFX_DrowCircleHelper>
	GFX_DrowCircleHelper(x+r	,y+h-r-1,r	,8	,color);
 80011d0:	7e3a      	ldrb	r2, [r7, #24]
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	18d0      	adds	r0, r2, r3
 80011d6:	68ba      	ldr	r2, [r7, #8]
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	441a      	add	r2, r3
 80011dc:	7e3b      	ldrb	r3, [r7, #24]
 80011de:	1ad3      	subs	r3, r2, r3
 80011e0:	1e59      	subs	r1, r3, #1
 80011e2:	7e3a      	ldrb	r2, [r7, #24]
 80011e4:	7f3b      	ldrb	r3, [r7, #28]
 80011e6:	9300      	str	r3, [sp, #0]
 80011e8:	2308      	movs	r3, #8
 80011ea:	f7ff fd34 	bl	8000c56 <GFX_DrowCircleHelper>
}
 80011ee:	bf00      	nop
 80011f0:	3710      	adds	r7, #16
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
	...

080011f8 <itoa>:
* \param [in] base the base of conversion
* \return pointer to \em buffer
*//*-------------------------------------------------------------------------*/

char* itoa(int value, char* buffer, int base)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b088      	sub	sp, #32
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	60f8      	str	r0, [r7, #12]
 8001200:	60b9      	str	r1, [r7, #8]
 8001202:	607a      	str	r2, [r7, #4]
	static const char digits[]="0123456789abcdef";

	char* buffer_copy=buffer;
 8001204:	68bb      	ldr	r3, [r7, #8]
 8001206:	61bb      	str	r3, [r7, #24]
	int32_t sign=0;
 8001208:	2300      	movs	r3, #0
 800120a:	61fb      	str	r3, [r7, #28]
	int32_t quot,rem;

	if ((base>=2)&&(base<=16))				// is the base valid?
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2b01      	cmp	r3, #1
 8001210:	dd36      	ble.n	8001280 <itoa+0x88>
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	2b10      	cmp	r3, #16
 8001216:	dc33      	bgt.n	8001280 <itoa+0x88>
	{
		if (base == 10 && (sign = value) < 0)// negative value and base == 10? store the copy (sign)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	2b0a      	cmp	r3, #10
 800121c:	d107      	bne.n	800122e <itoa+0x36>
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	61fb      	str	r3, [r7, #28]
 8001222:	69fb      	ldr	r3, [r7, #28]
 8001224:	2b00      	cmp	r3, #0
 8001226:	da02      	bge.n	800122e <itoa+0x36>
			value = -value;					// make it positive
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	425b      	negs	r3, r3
 800122c:	60fb      	str	r3, [r7, #12]

		do
		{
			quot=value/base;				// calculate quotient and remainder
 800122e:	68fa      	ldr	r2, [r7, #12]
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	fb92 f3f3 	sdiv	r3, r2, r3
 8001236:	617b      	str	r3, [r7, #20]
			rem=value%base;
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	687a      	ldr	r2, [r7, #4]
 800123c:	fb93 f2f2 	sdiv	r2, r3, r2
 8001240:	6879      	ldr	r1, [r7, #4]
 8001242:	fb01 f202 	mul.w	r2, r1, r2
 8001246:	1a9b      	subs	r3, r3, r2
 8001248:	613b      	str	r3, [r7, #16]
			*buffer++ = digits[rem];		// append the remainder to the string
 800124a:	68bb      	ldr	r3, [r7, #8]
 800124c:	1c5a      	adds	r2, r3, #1
 800124e:	60ba      	str	r2, [r7, #8]
 8001250:	490f      	ldr	r1, [pc, #60]	; (8001290 <itoa+0x98>)
 8001252:	693a      	ldr	r2, [r7, #16]
 8001254:	440a      	add	r2, r1
 8001256:	7812      	ldrb	r2, [r2, #0]
 8001258:	701a      	strb	r2, [r3, #0]
		} while ((value=quot));				// loop while there is something to convert
 800125a:	697b      	ldr	r3, [r7, #20]
 800125c:	60fb      	str	r3, [r7, #12]
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d1e4      	bne.n	800122e <itoa+0x36>

		if (sign<0)							// was the value negative?
 8001264:	69fb      	ldr	r3, [r7, #28]
 8001266:	2b00      	cmp	r3, #0
 8001268:	da04      	bge.n	8001274 <itoa+0x7c>
			*buffer++='-';					// append the sign
 800126a:	68bb      	ldr	r3, [r7, #8]
 800126c:	1c5a      	adds	r2, r3, #1
 800126e:	60ba      	str	r2, [r7, #8]
 8001270:	222d      	movs	r2, #45	; 0x2d
 8001272:	701a      	strb	r2, [r3, #0]

		__reverse(buffer_copy,buffer-1);		// reverse the string
 8001274:	68bb      	ldr	r3, [r7, #8]
 8001276:	3b01      	subs	r3, #1
 8001278:	4619      	mov	r1, r3
 800127a:	69b8      	ldr	r0, [r7, #24]
 800127c:	f000 f80a 	bl	8001294 <__reverse>
	}

	*buffer='\0';
 8001280:	68bb      	ldr	r3, [r7, #8]
 8001282:	2200      	movs	r2, #0
 8001284:	701a      	strb	r2, [r3, #0]
	return buffer_copy;
 8001286:	69bb      	ldr	r3, [r7, #24]
}
 8001288:	4618      	mov	r0, r3
 800128a:	3720      	adds	r7, #32
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	08009704 	.word	0x08009704

08001294 <__reverse>:
* \param [in,out] begin pointer to the beginning of the string
* \param [in,out] end pointer to the end of the string
*//*-------------------------------------------------------------------------*/

static void __reverse(char* begin,char* end)
{
 8001294:	b480      	push	{r7}
 8001296:	b085      	sub	sp, #20
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
 800129c:	6039      	str	r1, [r7, #0]
	char temp;

	while (end>begin)
 800129e:	e00d      	b.n	80012bc <__reverse+0x28>
	{
		temp=*end;
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	73fb      	strb	r3, [r7, #15]
		*end--=*begin;
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	1e5a      	subs	r2, r3, #1
 80012aa:	603a      	str	r2, [r7, #0]
 80012ac:	687a      	ldr	r2, [r7, #4]
 80012ae:	7812      	ldrb	r2, [r2, #0]
 80012b0:	701a      	strb	r2, [r3, #0]
		*begin++=temp;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	1c5a      	adds	r2, r3, #1
 80012b6:	607a      	str	r2, [r7, #4]
 80012b8:	7bfa      	ldrb	r2, [r7, #15]
 80012ba:	701a      	strb	r2, [r3, #0]
	while (end>begin)
 80012bc:	683a      	ldr	r2, [r7, #0]
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	429a      	cmp	r2, r3
 80012c2:	d8ed      	bhi.n	80012a0 <__reverse+0xc>
	}
}
 80012c4:	bf00      	nop
 80012c6:	bf00      	nop
 80012c8:	3714      	adds	r7, #20
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr
	...

080012d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012d8:	f002 fdc3 	bl	8003e62 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012dc:	f000 f834 	bl	8001348 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012e0:	f000 f936 	bl	8001550 <MX_GPIO_Init>
  MX_ADC1_Init();
 80012e4:	f000 f892 	bl	800140c <MX_ADC1_Init>
  MX_SPI1_Init();
 80012e8:	f000 f8f4 	bl	80014d4 <MX_SPI1_Init>

//  // Konfiguracja ADC z DMA
//  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
//  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)value, 2);

  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 80012ec:	217f      	movs	r1, #127	; 0x7f
 80012ee:	4813      	ldr	r0, [pc, #76]	; (800133c <main+0x68>)
 80012f0:	f003 fed4 	bl	800509c <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start(&hadc1);
 80012f4:	4811      	ldr	r0, [pc, #68]	; (800133c <main+0x68>)
 80012f6:	f003 f96f 	bl	80045d8 <HAL_ADC_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  ssd1327_SpiInit(&hspi1);
 80012fa:	4811      	ldr	r0, [pc, #68]	; (8001340 <main+0x6c>)
 80012fc:	f002 faa6 	bl	800384c <ssd1327_SpiInit>
  ssd1327_CLR();
 8001300:	f002 fb5e 	bl	80039c0 <ssd1327_CLR>
  ssd1327_display();
 8001304:	f002 fb24 	bl	8003950 <ssd1327_display>

  start_game();
 8001308:	f001 ff12 	bl	8003130 <start_game>
  add_enemy();
 800130c:	f001 ffa8 	bl	8003260 <add_enemy>

  while (1)
  {
		switch (state)
 8001310:	4b0c      	ldr	r3, [pc, #48]	; (8001344 <main+0x70>)
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	2b02      	cmp	r3, #2
 8001316:	d00c      	beq.n	8001332 <main+0x5e>
 8001318:	2b02      	cmp	r3, #2
 800131a:	dcf9      	bgt.n	8001310 <main+0x3c>
 800131c:	2b00      	cmp	r3, #0
 800131e:	d002      	beq.n	8001326 <main+0x52>
 8001320:	2b01      	cmp	r3, #1
 8001322:	d003      	beq.n	800132c <main+0x58>
 8001324:	e7f4      	b.n	8001310 <main+0x3c>
		{
		case st_menu:
			run_menu(); break;
 8001326:	f001 feb1 	bl	800308c <run_menu>
 800132a:	e005      	b.n	8001338 <main+0x64>
		case st_playing:
			run_game(); break;
 800132c:	f001 fe9c 	bl	8003068 <run_game>
 8001330:	e002      	b.n	8001338 <main+0x64>
		case st_dead:
			run_dead();	break;
 8001332:	f000 fb2b 	bl	800198c <run_dead>
 8001336:	bf00      	nop
		switch (state)
 8001338:	e7ea      	b.n	8001310 <main+0x3c>
 800133a:	bf00      	nop
 800133c:	200000a0 	.word	0x200000a0
 8001340:	20000104 	.word	0x20000104
 8001344:	20001658 	.word	0x20001658

08001348 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b096      	sub	sp, #88	; 0x58
 800134c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800134e:	f107 0314 	add.w	r3, r7, #20
 8001352:	2244      	movs	r2, #68	; 0x44
 8001354:	2100      	movs	r1, #0
 8001356:	4618      	mov	r0, r3
 8001358:	f005 fe8c 	bl	8007074 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800135c:	463b      	mov	r3, r7
 800135e:	2200      	movs	r2, #0
 8001360:	601a      	str	r2, [r3, #0]
 8001362:	605a      	str	r2, [r3, #4]
 8001364:	609a      	str	r2, [r3, #8]
 8001366:	60da      	str	r2, [r3, #12]
 8001368:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800136a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800136e:	f004 f993 	bl	8005698 <HAL_PWREx_ControlVoltageScaling>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d001      	beq.n	800137c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001378:	f002 fa28 	bl	80037cc <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800137c:	f004 f96e 	bl	800565c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001380:	4b21      	ldr	r3, [pc, #132]	; (8001408 <SystemClock_Config+0xc0>)
 8001382:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001386:	4a20      	ldr	r2, [pc, #128]	; (8001408 <SystemClock_Config+0xc0>)
 8001388:	f023 0318 	bic.w	r3, r3, #24
 800138c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001390:	2314      	movs	r3, #20
 8001392:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001394:	2301      	movs	r3, #1
 8001396:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001398:	2301      	movs	r3, #1
 800139a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800139c:	2300      	movs	r3, #0
 800139e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80013a0:	2360      	movs	r3, #96	; 0x60
 80013a2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013a4:	2302      	movs	r3, #2
 80013a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80013a8:	2301      	movs	r3, #1
 80013aa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80013ac:	2301      	movs	r3, #1
 80013ae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80013b0:	2328      	movs	r3, #40	; 0x28
 80013b2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80013b4:	2307      	movs	r3, #7
 80013b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80013b8:	2302      	movs	r3, #2
 80013ba:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80013bc:	2302      	movs	r3, #2
 80013be:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013c0:	f107 0314 	add.w	r3, r7, #20
 80013c4:	4618      	mov	r0, r3
 80013c6:	f004 f9bd 	bl	8005744 <HAL_RCC_OscConfig>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d001      	beq.n	80013d4 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80013d0:	f002 f9fc 	bl	80037cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013d4:	230f      	movs	r3, #15
 80013d6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013d8:	2303      	movs	r3, #3
 80013da:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013dc:	2300      	movs	r3, #0
 80013de:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013e0:	2300      	movs	r3, #0
 80013e2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013e4:	2300      	movs	r3, #0
 80013e6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80013e8:	463b      	mov	r3, r7
 80013ea:	2104      	movs	r1, #4
 80013ec:	4618      	mov	r0, r3
 80013ee:	f004 fdbd 	bl	8005f6c <HAL_RCC_ClockConfig>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80013f8:	f002 f9e8 	bl	80037cc <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80013fc:	f005 f998 	bl	8006730 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001400:	bf00      	nop
 8001402:	3758      	adds	r7, #88	; 0x58
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	40021000 	.word	0x40021000

0800140c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b086      	sub	sp, #24
 8001410:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001412:	463b      	mov	r3, r7
 8001414:	2200      	movs	r2, #0
 8001416:	601a      	str	r2, [r3, #0]
 8001418:	605a      	str	r2, [r3, #4]
 800141a:	609a      	str	r2, [r3, #8]
 800141c:	60da      	str	r2, [r3, #12]
 800141e:	611a      	str	r2, [r3, #16]
 8001420:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001422:	4b29      	ldr	r3, [pc, #164]	; (80014c8 <MX_ADC1_Init+0xbc>)
 8001424:	4a29      	ldr	r2, [pc, #164]	; (80014cc <MX_ADC1_Init+0xc0>)
 8001426:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001428:	4b27      	ldr	r3, [pc, #156]	; (80014c8 <MX_ADC1_Init+0xbc>)
 800142a:	2200      	movs	r2, #0
 800142c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800142e:	4b26      	ldr	r3, [pc, #152]	; (80014c8 <MX_ADC1_Init+0xbc>)
 8001430:	2200      	movs	r2, #0
 8001432:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001434:	4b24      	ldr	r3, [pc, #144]	; (80014c8 <MX_ADC1_Init+0xbc>)
 8001436:	2200      	movs	r2, #0
 8001438:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800143a:	4b23      	ldr	r3, [pc, #140]	; (80014c8 <MX_ADC1_Init+0xbc>)
 800143c:	2200      	movs	r2, #0
 800143e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001440:	4b21      	ldr	r3, [pc, #132]	; (80014c8 <MX_ADC1_Init+0xbc>)
 8001442:	2204      	movs	r2, #4
 8001444:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001446:	4b20      	ldr	r3, [pc, #128]	; (80014c8 <MX_ADC1_Init+0xbc>)
 8001448:	2200      	movs	r2, #0
 800144a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800144c:	4b1e      	ldr	r3, [pc, #120]	; (80014c8 <MX_ADC1_Init+0xbc>)
 800144e:	2201      	movs	r2, #1
 8001450:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001452:	4b1d      	ldr	r3, [pc, #116]	; (80014c8 <MX_ADC1_Init+0xbc>)
 8001454:	2201      	movs	r2, #1
 8001456:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001458:	4b1b      	ldr	r3, [pc, #108]	; (80014c8 <MX_ADC1_Init+0xbc>)
 800145a:	2200      	movs	r2, #0
 800145c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001460:	4b19      	ldr	r3, [pc, #100]	; (80014c8 <MX_ADC1_Init+0xbc>)
 8001462:	2200      	movs	r2, #0
 8001464:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001466:	4b18      	ldr	r3, [pc, #96]	; (80014c8 <MX_ADC1_Init+0xbc>)
 8001468:	2200      	movs	r2, #0
 800146a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800146c:	4b16      	ldr	r3, [pc, #88]	; (80014c8 <MX_ADC1_Init+0xbc>)
 800146e:	2200      	movs	r2, #0
 8001470:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001474:	4b14      	ldr	r3, [pc, #80]	; (80014c8 <MX_ADC1_Init+0xbc>)
 8001476:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800147a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800147c:	4b12      	ldr	r3, [pc, #72]	; (80014c8 <MX_ADC1_Init+0xbc>)
 800147e:	2200      	movs	r2, #0
 8001480:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001484:	4810      	ldr	r0, [pc, #64]	; (80014c8 <MX_ADC1_Init+0xbc>)
 8001486:	f002 ff5f 	bl	8004348 <HAL_ADC_Init>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d001      	beq.n	8001494 <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 8001490:	f002 f99c 	bl	80037cc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001494:	4b0e      	ldr	r3, [pc, #56]	; (80014d0 <MX_ADC1_Init+0xc4>)
 8001496:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001498:	2306      	movs	r3, #6
 800149a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 800149c:	2307      	movs	r3, #7
 800149e:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80014a0:	237f      	movs	r3, #127	; 0x7f
 80014a2:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80014a4:	2304      	movs	r3, #4
 80014a6:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80014a8:	2300      	movs	r3, #0
 80014aa:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014ac:	463b      	mov	r3, r7
 80014ae:	4619      	mov	r1, r3
 80014b0:	4805      	ldr	r0, [pc, #20]	; (80014c8 <MX_ADC1_Init+0xbc>)
 80014b2:	f003 f901 	bl	80046b8 <HAL_ADC_ConfigChannel>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d001      	beq.n	80014c0 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 80014bc:	f002 f986 	bl	80037cc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80014c0:	bf00      	nop
 80014c2:	3718      	adds	r7, #24
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	200000a0 	.word	0x200000a0
 80014cc:	50040000 	.word	0x50040000
 80014d0:	14f00020 	.word	0x14f00020

080014d4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80014d8:	4b1b      	ldr	r3, [pc, #108]	; (8001548 <MX_SPI1_Init+0x74>)
 80014da:	4a1c      	ldr	r2, [pc, #112]	; (800154c <MX_SPI1_Init+0x78>)
 80014dc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80014de:	4b1a      	ldr	r3, [pc, #104]	; (8001548 <MX_SPI1_Init+0x74>)
 80014e0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80014e4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80014e6:	4b18      	ldr	r3, [pc, #96]	; (8001548 <MX_SPI1_Init+0x74>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80014ec:	4b16      	ldr	r3, [pc, #88]	; (8001548 <MX_SPI1_Init+0x74>)
 80014ee:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80014f2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80014f4:	4b14      	ldr	r3, [pc, #80]	; (8001548 <MX_SPI1_Init+0x74>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80014fa:	4b13      	ldr	r3, [pc, #76]	; (8001548 <MX_SPI1_Init+0x74>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001500:	4b11      	ldr	r3, [pc, #68]	; (8001548 <MX_SPI1_Init+0x74>)
 8001502:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001506:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001508:	4b0f      	ldr	r3, [pc, #60]	; (8001548 <MX_SPI1_Init+0x74>)
 800150a:	2210      	movs	r2, #16
 800150c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800150e:	4b0e      	ldr	r3, [pc, #56]	; (8001548 <MX_SPI1_Init+0x74>)
 8001510:	2200      	movs	r2, #0
 8001512:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001514:	4b0c      	ldr	r3, [pc, #48]	; (8001548 <MX_SPI1_Init+0x74>)
 8001516:	2200      	movs	r2, #0
 8001518:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800151a:	4b0b      	ldr	r3, [pc, #44]	; (8001548 <MX_SPI1_Init+0x74>)
 800151c:	2200      	movs	r2, #0
 800151e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001520:	4b09      	ldr	r3, [pc, #36]	; (8001548 <MX_SPI1_Init+0x74>)
 8001522:	2207      	movs	r2, #7
 8001524:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001526:	4b08      	ldr	r3, [pc, #32]	; (8001548 <MX_SPI1_Init+0x74>)
 8001528:	2200      	movs	r2, #0
 800152a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800152c:	4b06      	ldr	r3, [pc, #24]	; (8001548 <MX_SPI1_Init+0x74>)
 800152e:	2208      	movs	r2, #8
 8001530:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001532:	4805      	ldr	r0, [pc, #20]	; (8001548 <MX_SPI1_Init+0x74>)
 8001534:	f005 f9fe 	bl	8006934 <HAL_SPI_Init>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d001      	beq.n	8001542 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800153e:	f002 f945 	bl	80037cc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001542:	bf00      	nop
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	20000104 	.word	0x20000104
 800154c:	40013000 	.word	0x40013000

08001550 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b088      	sub	sp, #32
 8001554:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001556:	f107 030c 	add.w	r3, r7, #12
 800155a:	2200      	movs	r2, #0
 800155c:	601a      	str	r2, [r3, #0]
 800155e:	605a      	str	r2, [r3, #4]
 8001560:	609a      	str	r2, [r3, #8]
 8001562:	60da      	str	r2, [r3, #12]
 8001564:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001566:	4b30      	ldr	r3, [pc, #192]	; (8001628 <MX_GPIO_Init+0xd8>)
 8001568:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800156a:	4a2f      	ldr	r2, [pc, #188]	; (8001628 <MX_GPIO_Init+0xd8>)
 800156c:	f043 0304 	orr.w	r3, r3, #4
 8001570:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001572:	4b2d      	ldr	r3, [pc, #180]	; (8001628 <MX_GPIO_Init+0xd8>)
 8001574:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001576:	f003 0304 	and.w	r3, r3, #4
 800157a:	60bb      	str	r3, [r7, #8]
 800157c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800157e:	4b2a      	ldr	r3, [pc, #168]	; (8001628 <MX_GPIO_Init+0xd8>)
 8001580:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001582:	4a29      	ldr	r2, [pc, #164]	; (8001628 <MX_GPIO_Init+0xd8>)
 8001584:	f043 0301 	orr.w	r3, r3, #1
 8001588:	64d3      	str	r3, [r2, #76]	; 0x4c
 800158a:	4b27      	ldr	r3, [pc, #156]	; (8001628 <MX_GPIO_Init+0xd8>)
 800158c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800158e:	f003 0301 	and.w	r3, r3, #1
 8001592:	607b      	str	r3, [r7, #4]
 8001594:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001596:	4b24      	ldr	r3, [pc, #144]	; (8001628 <MX_GPIO_Init+0xd8>)
 8001598:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800159a:	4a23      	ldr	r2, [pc, #140]	; (8001628 <MX_GPIO_Init+0xd8>)
 800159c:	f043 0302 	orr.w	r3, r3, #2
 80015a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015a2:	4b21      	ldr	r3, [pc, #132]	; (8001628 <MX_GPIO_Init+0xd8>)
 80015a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015a6:	f003 0302 	and.w	r3, r3, #2
 80015aa:	603b      	str	r3, [r7, #0]
 80015ac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_RESET);
 80015ae:	2200      	movs	r2, #0
 80015b0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80015b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015b8:	f004 f838 	bl	800562c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|CS_Pin|DC_Pin, GPIO_PIN_RESET);
 80015bc:	2200      	movs	r2, #0
 80015be:	2138      	movs	r1, #56	; 0x38
 80015c0:	481a      	ldr	r0, [pc, #104]	; (800162c <MX_GPIO_Init+0xdc>)
 80015c2:	f004 f833 	bl	800562c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_BTN_1_Pin */
  GPIO_InitStruct.Pin = USER_BTN_1_Pin;
 80015c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015cc:	2300      	movs	r3, #0
 80015ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80015d0:	2302      	movs	r3, #2
 80015d2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(USER_BTN_1_GPIO_Port, &GPIO_InitStruct);
 80015d4:	f107 030c 	add.w	r3, r7, #12
 80015d8:	4619      	mov	r1, r3
 80015da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015de:	f003 fea3 	bl	8005328 <HAL_GPIO_Init>

  /*Configure GPIO pin : RST_Pin */
  GPIO_InitStruct.Pin = RST_Pin;
 80015e2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80015e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015e8:	2301      	movs	r3, #1
 80015ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ec:	2300      	movs	r3, #0
 80015ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f0:	2300      	movs	r3, #0
 80015f2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 80015f4:	f107 030c 	add.w	r3, r7, #12
 80015f8:	4619      	mov	r1, r3
 80015fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015fe:	f003 fe93 	bl	8005328 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin CS_Pin DC_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|CS_Pin|DC_Pin;
 8001602:	2338      	movs	r3, #56	; 0x38
 8001604:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001606:	2301      	movs	r3, #1
 8001608:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160a:	2300      	movs	r3, #0
 800160c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800160e:	2300      	movs	r3, #0
 8001610:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001612:	f107 030c 	add.w	r3, r7, #12
 8001616:	4619      	mov	r1, r3
 8001618:	4804      	ldr	r0, [pc, #16]	; (800162c <MX_GPIO_Init+0xdc>)
 800161a:	f003 fe85 	bl	8005328 <HAL_GPIO_Init>

}
 800161e:	bf00      	nop
 8001620:	3720      	adds	r7, #32
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	40021000 	.word	0x40021000
 800162c:	48000400 	.word	0x48000400

08001630 <add_backgrand>:

/* USER CODE BEGIN 4 */

void add_backgrand(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b082      	sub	sp, #8
 8001634:	af00      	add	r7, sp, #0
	 * Dodatkowo ustawia losowe parametry odswiezania jej oraz
	 * losowe położenie na osi Y.
	 */
	uint8_t i;

	for(i = 0; i < num_backgrand; i++)
 8001636:	2300      	movs	r3, #0
 8001638:	71fb      	strb	r3, [r7, #7]
 800163a:	e052      	b.n	80016e2 <add_backgrand+0xb2>
	{
		if(!backgrand[i].active)
 800163c:	79fa      	ldrb	r2, [r7, #7]
 800163e:	492d      	ldr	r1, [pc, #180]	; (80016f4 <add_backgrand+0xc4>)
 8001640:	4613      	mov	r3, r2
 8001642:	009b      	lsls	r3, r3, #2
 8001644:	4413      	add	r3, r2
 8001646:	009b      	lsls	r3, r3, #2
 8001648:	440b      	add	r3, r1
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	f083 0301 	eor.w	r3, r3, #1
 8001650:	b2db      	uxtb	r3, r3
 8001652:	2b00      	cmp	r3, #0
 8001654:	d042      	beq.n	80016dc <add_backgrand+0xac>
		{
			backgrand[i].active = true;
 8001656:	79fa      	ldrb	r2, [r7, #7]
 8001658:	4926      	ldr	r1, [pc, #152]	; (80016f4 <add_backgrand+0xc4>)
 800165a:	4613      	mov	r3, r2
 800165c:	009b      	lsls	r3, r3, #2
 800165e:	4413      	add	r3, r2
 8001660:	009b      	lsls	r3, r3, #2
 8001662:	440b      	add	r3, r1
 8001664:	2201      	movs	r2, #1
 8001666:	701a      	strb	r2, [r3, #0]
			backgrand[i].x 		= 128;
 8001668:	79fa      	ldrb	r2, [r7, #7]
 800166a:	4922      	ldr	r1, [pc, #136]	; (80016f4 <add_backgrand+0xc4>)
 800166c:	4613      	mov	r3, r2
 800166e:	009b      	lsls	r3, r3, #2
 8001670:	4413      	add	r3, r2
 8001672:	009b      	lsls	r3, r3, #2
 8001674:	440b      	add	r3, r1
 8001676:	3304      	adds	r3, #4
 8001678:	2280      	movs	r2, #128	; 0x80
 800167a:	601a      	str	r2, [r3, #0]
			backgrand[i].y		= (rand()%(screen_height-10)) +10;
 800167c:	f005 fd02 	bl	8007084 <rand>
 8001680:	4602      	mov	r2, r0
 8001682:	4b1d      	ldr	r3, [pc, #116]	; (80016f8 <add_backgrand+0xc8>)
 8001684:	fb83 1302 	smull	r1, r3, r3, r2
 8001688:	1119      	asrs	r1, r3, #4
 800168a:	17d3      	asrs	r3, r2, #31
 800168c:	1acb      	subs	r3, r1, r3
 800168e:	2176      	movs	r1, #118	; 0x76
 8001690:	fb01 f303 	mul.w	r3, r1, r3
 8001694:	1ad3      	subs	r3, r2, r3
 8001696:	79fa      	ldrb	r2, [r7, #7]
 8001698:	f103 010a 	add.w	r1, r3, #10
 800169c:	4815      	ldr	r0, [pc, #84]	; (80016f4 <add_backgrand+0xc4>)
 800169e:	4613      	mov	r3, r2
 80016a0:	009b      	lsls	r3, r3, #2
 80016a2:	4413      	add	r3, r2
 80016a4:	009b      	lsls	r3, r3, #2
 80016a6:	4403      	add	r3, r0
 80016a8:	3308      	adds	r3, #8
 80016aa:	6019      	str	r1, [r3, #0]
			backgrand[i].update_delay = (rand()%6)+2; // def. (rand()%4)+2;
 80016ac:	f005 fcea 	bl	8007084 <rand>
 80016b0:	4601      	mov	r1, r0
 80016b2:	4b12      	ldr	r3, [pc, #72]	; (80016fc <add_backgrand+0xcc>)
 80016b4:	fb83 3201 	smull	r3, r2, r3, r1
 80016b8:	17cb      	asrs	r3, r1, #31
 80016ba:	1ad2      	subs	r2, r2, r3
 80016bc:	4613      	mov	r3, r2
 80016be:	005b      	lsls	r3, r3, #1
 80016c0:	4413      	add	r3, r2
 80016c2:	005b      	lsls	r3, r3, #1
 80016c4:	1aca      	subs	r2, r1, r3
 80016c6:	79f9      	ldrb	r1, [r7, #7]
 80016c8:	3202      	adds	r2, #2
 80016ca:	480a      	ldr	r0, [pc, #40]	; (80016f4 <add_backgrand+0xc4>)
 80016cc:	460b      	mov	r3, r1
 80016ce:	009b      	lsls	r3, r3, #2
 80016d0:	440b      	add	r3, r1
 80016d2:	009b      	lsls	r3, r3, #2
 80016d4:	4403      	add	r3, r0
 80016d6:	3310      	adds	r3, #16
 80016d8:	601a      	str	r2, [r3, #0]

			break;
 80016da:	e006      	b.n	80016ea <add_backgrand+0xba>
	for(i = 0; i < num_backgrand; i++)
 80016dc:	79fb      	ldrb	r3, [r7, #7]
 80016de:	3301      	adds	r3, #1
 80016e0:	71fb      	strb	r3, [r7, #7]
 80016e2:	79fb      	ldrb	r3, [r7, #7]
 80016e4:	2bc7      	cmp	r3, #199	; 0xc7
 80016e6:	d9a9      	bls.n	800163c <add_backgrand+0xc>
		}
	}
}
 80016e8:	bf00      	nop
 80016ea:	bf00      	nop
 80016ec:	3708      	adds	r7, #8
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	20000610 	.word	0x20000610
 80016f8:	22b63cbf 	.word	0x22b63cbf
 80016fc:	2aaaaaab 	.word	0x2aaaaaab

08001700 <update_backgrand>:

void update_backgrand(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0
	 * Przesuwa elementy , oraz losuje kiedy ma
	 * zostać dodany nowy element.
	 */
	uint8_t i;

	for(i = 0; i < num_backgrand; i++)
 8001706:	2300      	movs	r3, #0
 8001708:	71fb      	strb	r3, [r7, #7]
 800170a:	e06e      	b.n	80017ea <update_backgrand+0xea>
	{
		if(backgrand[i].active)
 800170c:	79fa      	ldrb	r2, [r7, #7]
 800170e:	4943      	ldr	r1, [pc, #268]	; (800181c <update_backgrand+0x11c>)
 8001710:	4613      	mov	r3, r2
 8001712:	009b      	lsls	r3, r3, #2
 8001714:	4413      	add	r3, r2
 8001716:	009b      	lsls	r3, r3, #2
 8001718:	440b      	add	r3, r1
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d061      	beq.n	80017e4 <update_backgrand+0xe4>
		{
			backgrand[i].next_update -= 1;
 8001720:	79fa      	ldrb	r2, [r7, #7]
 8001722:	493e      	ldr	r1, [pc, #248]	; (800181c <update_backgrand+0x11c>)
 8001724:	4613      	mov	r3, r2
 8001726:	009b      	lsls	r3, r3, #2
 8001728:	4413      	add	r3, r2
 800172a:	009b      	lsls	r3, r3, #2
 800172c:	440b      	add	r3, r1
 800172e:	330c      	adds	r3, #12
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	79fa      	ldrb	r2, [r7, #7]
 8001734:	1e59      	subs	r1, r3, #1
 8001736:	4839      	ldr	r0, [pc, #228]	; (800181c <update_backgrand+0x11c>)
 8001738:	4613      	mov	r3, r2
 800173a:	009b      	lsls	r3, r3, #2
 800173c:	4413      	add	r3, r2
 800173e:	009b      	lsls	r3, r3, #2
 8001740:	4403      	add	r3, r0
 8001742:	330c      	adds	r3, #12
 8001744:	6019      	str	r1, [r3, #0]
			if(backgrand[i].next_update <= 0)
 8001746:	79fa      	ldrb	r2, [r7, #7]
 8001748:	4934      	ldr	r1, [pc, #208]	; (800181c <update_backgrand+0x11c>)
 800174a:	4613      	mov	r3, r2
 800174c:	009b      	lsls	r3, r3, #2
 800174e:	4413      	add	r3, r2
 8001750:	009b      	lsls	r3, r3, #2
 8001752:	440b      	add	r3, r1
 8001754:	330c      	adds	r3, #12
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	2b00      	cmp	r3, #0
 800175a:	dc43      	bgt.n	80017e4 <update_backgrand+0xe4>
			{
				backgrand[i].next_update = backgrand[i].update_delay;
 800175c:	79f9      	ldrb	r1, [r7, #7]
 800175e:	79fa      	ldrb	r2, [r7, #7]
 8001760:	482e      	ldr	r0, [pc, #184]	; (800181c <update_backgrand+0x11c>)
 8001762:	460b      	mov	r3, r1
 8001764:	009b      	lsls	r3, r3, #2
 8001766:	440b      	add	r3, r1
 8001768:	009b      	lsls	r3, r3, #2
 800176a:	4403      	add	r3, r0
 800176c:	3310      	adds	r3, #16
 800176e:	6819      	ldr	r1, [r3, #0]
 8001770:	482a      	ldr	r0, [pc, #168]	; (800181c <update_backgrand+0x11c>)
 8001772:	4613      	mov	r3, r2
 8001774:	009b      	lsls	r3, r3, #2
 8001776:	4413      	add	r3, r2
 8001778:	009b      	lsls	r3, r3, #2
 800177a:	4403      	add	r3, r0
 800177c:	330c      	adds	r3, #12
 800177e:	6019      	str	r1, [r3, #0]
				if(backgrand[i].active)
 8001780:	79fa      	ldrb	r2, [r7, #7]
 8001782:	4926      	ldr	r1, [pc, #152]	; (800181c <update_backgrand+0x11c>)
 8001784:	4613      	mov	r3, r2
 8001786:	009b      	lsls	r3, r3, #2
 8001788:	4413      	add	r3, r2
 800178a:	009b      	lsls	r3, r3, #2
 800178c:	440b      	add	r3, r1
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d027      	beq.n	80017e4 <update_backgrand+0xe4>
				{
					backgrand[i].x -= 1;
 8001794:	79fa      	ldrb	r2, [r7, #7]
 8001796:	4921      	ldr	r1, [pc, #132]	; (800181c <update_backgrand+0x11c>)
 8001798:	4613      	mov	r3, r2
 800179a:	009b      	lsls	r3, r3, #2
 800179c:	4413      	add	r3, r2
 800179e:	009b      	lsls	r3, r3, #2
 80017a0:	440b      	add	r3, r1
 80017a2:	3304      	adds	r3, #4
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	79fa      	ldrb	r2, [r7, #7]
 80017a8:	1e59      	subs	r1, r3, #1
 80017aa:	481c      	ldr	r0, [pc, #112]	; (800181c <update_backgrand+0x11c>)
 80017ac:	4613      	mov	r3, r2
 80017ae:	009b      	lsls	r3, r3, #2
 80017b0:	4413      	add	r3, r2
 80017b2:	009b      	lsls	r3, r3, #2
 80017b4:	4403      	add	r3, r0
 80017b6:	3304      	adds	r3, #4
 80017b8:	6019      	str	r1, [r3, #0]

					if(backgrand[i].x <= -2)
 80017ba:	79fa      	ldrb	r2, [r7, #7]
 80017bc:	4917      	ldr	r1, [pc, #92]	; (800181c <update_backgrand+0x11c>)
 80017be:	4613      	mov	r3, r2
 80017c0:	009b      	lsls	r3, r3, #2
 80017c2:	4413      	add	r3, r2
 80017c4:	009b      	lsls	r3, r3, #2
 80017c6:	440b      	add	r3, r1
 80017c8:	3304      	adds	r3, #4
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017d0:	da08      	bge.n	80017e4 <update_backgrand+0xe4>
						backgrand[i].active = false;
 80017d2:	79fa      	ldrb	r2, [r7, #7]
 80017d4:	4911      	ldr	r1, [pc, #68]	; (800181c <update_backgrand+0x11c>)
 80017d6:	4613      	mov	r3, r2
 80017d8:	009b      	lsls	r3, r3, #2
 80017da:	4413      	add	r3, r2
 80017dc:	009b      	lsls	r3, r3, #2
 80017de:	440b      	add	r3, r1
 80017e0:	2200      	movs	r2, #0
 80017e2:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < num_backgrand; i++)
 80017e4:	79fb      	ldrb	r3, [r7, #7]
 80017e6:	3301      	adds	r3, #1
 80017e8:	71fb      	strb	r3, [r7, #7]
 80017ea:	79fb      	ldrb	r3, [r7, #7]
 80017ec:	2bc7      	cmp	r3, #199	; 0xc7
 80017ee:	d98d      	bls.n	800170c <update_backgrand+0xc>
				}
			}
		}
	}

	if ((rand()%100) < 20) 		//Częstotliwość dodawania tła
 80017f0:	f005 fc48 	bl	8007084 <rand>
 80017f4:	4602      	mov	r2, r0
 80017f6:	4b0a      	ldr	r3, [pc, #40]	; (8001820 <update_backgrand+0x120>)
 80017f8:	fb83 1302 	smull	r1, r3, r3, r2
 80017fc:	1159      	asrs	r1, r3, #5
 80017fe:	17d3      	asrs	r3, r2, #31
 8001800:	1acb      	subs	r3, r1, r3
 8001802:	2164      	movs	r1, #100	; 0x64
 8001804:	fb01 f303 	mul.w	r3, r1, r3
 8001808:	1ad3      	subs	r3, r2, r3
 800180a:	2b13      	cmp	r3, #19
 800180c:	dc01      	bgt.n	8001812 <update_backgrand+0x112>
		add_backgrand();
 800180e:	f7ff ff0f 	bl	8001630 <add_backgrand>

}
 8001812:	bf00      	nop
 8001814:	3708      	adds	r7, #8
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	20000610 	.word	0x20000610
 8001820:	51eb851f 	.word	0x51eb851f

08001824 <update_lvl>:

void update_lvl(void)
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0
	 * do jej postepu.
	 */
	static uint8_t i = 0;

	//Obliczanie postepu gry
	if(i > 70) //poprawne dzia�anie 128 (cały ekran)
 8001828:	4b55      	ldr	r3, [pc, #340]	; (8001980 <update_lvl+0x15c>)
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	2b46      	cmp	r3, #70	; 0x46
 800182e:	d907      	bls.n	8001840 <update_lvl+0x1c>
	{
		player.game_progres += 1;
 8001830:	4b54      	ldr	r3, [pc, #336]	; (8001984 <update_lvl+0x160>)
 8001832:	699b      	ldr	r3, [r3, #24]
 8001834:	3301      	adds	r3, #1
 8001836:	4a53      	ldr	r2, [pc, #332]	; (8001984 <update_lvl+0x160>)
 8001838:	6193      	str	r3, [r2, #24]
		i = 0;
 800183a:	4b51      	ldr	r3, [pc, #324]	; (8001980 <update_lvl+0x15c>)
 800183c:	2200      	movs	r2, #0
 800183e:	701a      	strb	r2, [r3, #0]
	}

	//Jesli boss nie aktywny naliczaj postep
	if(!boss.active) i++;
 8001840:	4b51      	ldr	r3, [pc, #324]	; (8001988 <update_lvl+0x164>)
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	f083 0301 	eor.w	r3, r3, #1
 8001848:	b2db      	uxtb	r3, r3
 800184a:	2b00      	cmp	r3, #0
 800184c:	d005      	beq.n	800185a <update_lvl+0x36>
 800184e:	4b4c      	ldr	r3, [pc, #304]	; (8001980 <update_lvl+0x15c>)
 8001850:	781b      	ldrb	r3, [r3, #0]
 8001852:	3301      	adds	r3, #1
 8001854:	b2da      	uxtb	r2, r3
 8001856:	4b4a      	ldr	r3, [pc, #296]	; (8001980 <update_lvl+0x15c>)
 8001858:	701a      	strb	r2, [r3, #0]

	//---- Momenty pojawienia sie bosa -----
	//Oraz jego parametry
	//boss.update_delay = x; powienien on posiadac pażystą liczbę ponieważ
	//w innym wypadku z niewiadomych przyczyn wysupje sie jego animacja.
	if(player.game_progres == 29)
 800185a:	4b4a      	ldr	r3, [pc, #296]	; (8001984 <update_lvl+0x160>)
 800185c:	699b      	ldr	r3, [r3, #24]
 800185e:	2b1d      	cmp	r3, #29
 8001860:	d10d      	bne.n	800187e <update_lvl+0x5a>
	{
		boss.active = true;
 8001862:	4b49      	ldr	r3, [pc, #292]	; (8001988 <update_lvl+0x164>)
 8001864:	2201      	movs	r2, #1
 8001866:	701a      	strb	r2, [r3, #0]
		boss.lives = 1;
 8001868:	4b47      	ldr	r3, [pc, #284]	; (8001988 <update_lvl+0x164>)
 800186a:	2201      	movs	r2, #1
 800186c:	615a      	str	r2, [r3, #20]
		boss.update_delay = 4;
 800186e:	4b46      	ldr	r3, [pc, #280]	; (8001988 <update_lvl+0x164>)
 8001870:	2204      	movs	r2, #4
 8001872:	611a      	str	r2, [r3, #16]
		player.game_progres += 1;
 8001874:	4b43      	ldr	r3, [pc, #268]	; (8001984 <update_lvl+0x160>)
 8001876:	699b      	ldr	r3, [r3, #24]
 8001878:	3301      	adds	r3, #1
 800187a:	4a42      	ldr	r2, [pc, #264]	; (8001984 <update_lvl+0x160>)
 800187c:	6193      	str	r3, [r2, #24]

	}
	if(player.game_progres == 59)
 800187e:	4b41      	ldr	r3, [pc, #260]	; (8001984 <update_lvl+0x160>)
 8001880:	699b      	ldr	r3, [r3, #24]
 8001882:	2b3b      	cmp	r3, #59	; 0x3b
 8001884:	d10d      	bne.n	80018a2 <update_lvl+0x7e>
	{
		boss.active = true;
 8001886:	4b40      	ldr	r3, [pc, #256]	; (8001988 <update_lvl+0x164>)
 8001888:	2201      	movs	r2, #1
 800188a:	701a      	strb	r2, [r3, #0]
		boss.lives = 1;
 800188c:	4b3e      	ldr	r3, [pc, #248]	; (8001988 <update_lvl+0x164>)
 800188e:	2201      	movs	r2, #1
 8001890:	615a      	str	r2, [r3, #20]
		boss.update_delay = 2;
 8001892:	4b3d      	ldr	r3, [pc, #244]	; (8001988 <update_lvl+0x164>)
 8001894:	2202      	movs	r2, #2
 8001896:	611a      	str	r2, [r3, #16]
		player.game_progres += 1;
 8001898:	4b3a      	ldr	r3, [pc, #232]	; (8001984 <update_lvl+0x160>)
 800189a:	699b      	ldr	r3, [r3, #24]
 800189c:	3301      	adds	r3, #1
 800189e:	4a39      	ldr	r2, [pc, #228]	; (8001984 <update_lvl+0x160>)
 80018a0:	6193      	str	r3, [r2, #24]
	}
	//--------------------------------------

	//Kolejne levele
	if(player.game_progres > 9 && player.game_progres < 10 )
 80018a2:	4b38      	ldr	r3, [pc, #224]	; (8001984 <update_lvl+0x160>)
 80018a4:	699b      	ldr	r3, [r3, #24]
 80018a6:	2b09      	cmp	r3, #9
 80018a8:	dd06      	ble.n	80018b8 <update_lvl+0x94>
 80018aa:	4b36      	ldr	r3, [pc, #216]	; (8001984 <update_lvl+0x160>)
 80018ac:	699b      	ldr	r3, [r3, #24]
 80018ae:	2b09      	cmp	r3, #9
 80018b0:	dc02      	bgt.n	80018b8 <update_lvl+0x94>
		player.level = 1;
 80018b2:	4b34      	ldr	r3, [pc, #208]	; (8001984 <update_lvl+0x160>)
 80018b4:	2201      	movs	r2, #1
 80018b6:	615a      	str	r2, [r3, #20]
	if(player.game_progres > 10 && player.game_progres < 19)
 80018b8:	4b32      	ldr	r3, [pc, #200]	; (8001984 <update_lvl+0x160>)
 80018ba:	699b      	ldr	r3, [r3, #24]
 80018bc:	2b0a      	cmp	r3, #10
 80018be:	dd06      	ble.n	80018ce <update_lvl+0xaa>
 80018c0:	4b30      	ldr	r3, [pc, #192]	; (8001984 <update_lvl+0x160>)
 80018c2:	699b      	ldr	r3, [r3, #24]
 80018c4:	2b12      	cmp	r3, #18
 80018c6:	dc02      	bgt.n	80018ce <update_lvl+0xaa>
		player.level = 2;
 80018c8:	4b2e      	ldr	r3, [pc, #184]	; (8001984 <update_lvl+0x160>)
 80018ca:	2202      	movs	r2, #2
 80018cc:	615a      	str	r2, [r3, #20]
	if(player.game_progres > 20 && player.game_progres < 29)
 80018ce:	4b2d      	ldr	r3, [pc, #180]	; (8001984 <update_lvl+0x160>)
 80018d0:	699b      	ldr	r3, [r3, #24]
 80018d2:	2b14      	cmp	r3, #20
 80018d4:	dd06      	ble.n	80018e4 <update_lvl+0xc0>
 80018d6:	4b2b      	ldr	r3, [pc, #172]	; (8001984 <update_lvl+0x160>)
 80018d8:	699b      	ldr	r3, [r3, #24]
 80018da:	2b1c      	cmp	r3, #28
 80018dc:	dc02      	bgt.n	80018e4 <update_lvl+0xc0>
		player.level = 3;
 80018de:	4b29      	ldr	r3, [pc, #164]	; (8001984 <update_lvl+0x160>)
 80018e0:	2203      	movs	r2, #3
 80018e2:	615a      	str	r2, [r3, #20]
	if(player.game_progres > 30 && player.game_progres < 39)
 80018e4:	4b27      	ldr	r3, [pc, #156]	; (8001984 <update_lvl+0x160>)
 80018e6:	699b      	ldr	r3, [r3, #24]
 80018e8:	2b1e      	cmp	r3, #30
 80018ea:	dd06      	ble.n	80018fa <update_lvl+0xd6>
 80018ec:	4b25      	ldr	r3, [pc, #148]	; (8001984 <update_lvl+0x160>)
 80018ee:	699b      	ldr	r3, [r3, #24]
 80018f0:	2b26      	cmp	r3, #38	; 0x26
 80018f2:	dc02      	bgt.n	80018fa <update_lvl+0xd6>
		player.level = 4;
 80018f4:	4b23      	ldr	r3, [pc, #140]	; (8001984 <update_lvl+0x160>)
 80018f6:	2204      	movs	r2, #4
 80018f8:	615a      	str	r2, [r3, #20]
	if(player.game_progres > 40 && player.game_progres < 49)
 80018fa:	4b22      	ldr	r3, [pc, #136]	; (8001984 <update_lvl+0x160>)
 80018fc:	699b      	ldr	r3, [r3, #24]
 80018fe:	2b28      	cmp	r3, #40	; 0x28
 8001900:	dd06      	ble.n	8001910 <update_lvl+0xec>
 8001902:	4b20      	ldr	r3, [pc, #128]	; (8001984 <update_lvl+0x160>)
 8001904:	699b      	ldr	r3, [r3, #24]
 8001906:	2b30      	cmp	r3, #48	; 0x30
 8001908:	dc02      	bgt.n	8001910 <update_lvl+0xec>
		player.level = 5;
 800190a:	4b1e      	ldr	r3, [pc, #120]	; (8001984 <update_lvl+0x160>)
 800190c:	2205      	movs	r2, #5
 800190e:	615a      	str	r2, [r3, #20]
	if(player.game_progres > 50 && player.game_progres < 59)
 8001910:	4b1c      	ldr	r3, [pc, #112]	; (8001984 <update_lvl+0x160>)
 8001912:	699b      	ldr	r3, [r3, #24]
 8001914:	2b32      	cmp	r3, #50	; 0x32
 8001916:	dd06      	ble.n	8001926 <update_lvl+0x102>
 8001918:	4b1a      	ldr	r3, [pc, #104]	; (8001984 <update_lvl+0x160>)
 800191a:	699b      	ldr	r3, [r3, #24]
 800191c:	2b3a      	cmp	r3, #58	; 0x3a
 800191e:	dc02      	bgt.n	8001926 <update_lvl+0x102>
		player.level = 6;
 8001920:	4b18      	ldr	r3, [pc, #96]	; (8001984 <update_lvl+0x160>)
 8001922:	2206      	movs	r2, #6
 8001924:	615a      	str	r2, [r3, #20]
	if(player.game_progres > 60 && player.game_progres < 69)
 8001926:	4b17      	ldr	r3, [pc, #92]	; (8001984 <update_lvl+0x160>)
 8001928:	699b      	ldr	r3, [r3, #24]
 800192a:	2b3c      	cmp	r3, #60	; 0x3c
 800192c:	dd06      	ble.n	800193c <update_lvl+0x118>
 800192e:	4b15      	ldr	r3, [pc, #84]	; (8001984 <update_lvl+0x160>)
 8001930:	699b      	ldr	r3, [r3, #24]
 8001932:	2b44      	cmp	r3, #68	; 0x44
 8001934:	dc02      	bgt.n	800193c <update_lvl+0x118>
		player.level = 7;
 8001936:	4b13      	ldr	r3, [pc, #76]	; (8001984 <update_lvl+0x160>)
 8001938:	2207      	movs	r2, #7
 800193a:	615a      	str	r2, [r3, #20]
	if(player.game_progres > 70 && player.game_progres < 79)
 800193c:	4b11      	ldr	r3, [pc, #68]	; (8001984 <update_lvl+0x160>)
 800193e:	699b      	ldr	r3, [r3, #24]
 8001940:	2b46      	cmp	r3, #70	; 0x46
 8001942:	dd06      	ble.n	8001952 <update_lvl+0x12e>
 8001944:	4b0f      	ldr	r3, [pc, #60]	; (8001984 <update_lvl+0x160>)
 8001946:	699b      	ldr	r3, [r3, #24]
 8001948:	2b4e      	cmp	r3, #78	; 0x4e
 800194a:	dc02      	bgt.n	8001952 <update_lvl+0x12e>
		player.level = 8;
 800194c:	4b0d      	ldr	r3, [pc, #52]	; (8001984 <update_lvl+0x160>)
 800194e:	2208      	movs	r2, #8
 8001950:	615a      	str	r2, [r3, #20]
	if(player.game_progres > 80 && player.game_progres < 89)
 8001952:	4b0c      	ldr	r3, [pc, #48]	; (8001984 <update_lvl+0x160>)
 8001954:	699b      	ldr	r3, [r3, #24]
 8001956:	2b50      	cmp	r3, #80	; 0x50
 8001958:	dd06      	ble.n	8001968 <update_lvl+0x144>
 800195a:	4b0a      	ldr	r3, [pc, #40]	; (8001984 <update_lvl+0x160>)
 800195c:	699b      	ldr	r3, [r3, #24]
 800195e:	2b58      	cmp	r3, #88	; 0x58
 8001960:	dc02      	bgt.n	8001968 <update_lvl+0x144>
		player.level = 9;
 8001962:	4b08      	ldr	r3, [pc, #32]	; (8001984 <update_lvl+0x160>)
 8001964:	2209      	movs	r2, #9
 8001966:	615a      	str	r2, [r3, #20]
	if(player.game_progres > 90)
 8001968:	4b06      	ldr	r3, [pc, #24]	; (8001984 <update_lvl+0x160>)
 800196a:	699b      	ldr	r3, [r3, #24]
 800196c:	2b5a      	cmp	r3, #90	; 0x5a
 800196e:	dd02      	ble.n	8001976 <update_lvl+0x152>
		player.level = 10;
 8001970:	4b04      	ldr	r3, [pc, #16]	; (8001984 <update_lvl+0x160>)
 8001972:	220a      	movs	r2, #10
 8001974:	615a      	str	r2, [r3, #20]

}
 8001976:	bf00      	nop
 8001978:	46bd      	mov	sp, r7
 800197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197e:	4770      	bx	lr
 8001980:	20001660 	.word	0x20001660
 8001984:	20000168 	.word	0x20000168
 8001988:	200015b0 	.word	0x200015b0

0800198c <run_dead>:

void run_dead(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b082      	sub	sp, #8
 8001990:	af02      	add	r7, sp, #8
		eeprom_write_byte(eeprom_magic_addr_1, eeprom_magic_number_1);
	}
	*/
	//Pokazanie wyniku i najwyższego wyniku

	x += dx;
 8001992:	4b22      	ldr	r3, [pc, #136]	; (8001a1c <run_dead+0x90>)
 8001994:	681a      	ldr	r2, [r3, #0]
 8001996:	4b22      	ldr	r3, [pc, #136]	; (8001a20 <run_dead+0x94>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4413      	add	r3, r2
 800199c:	4a1f      	ldr	r2, [pc, #124]	; (8001a1c <run_dead+0x90>)
 800199e:	6013      	str	r3, [r2, #0]
	if (x < 1 || x > 55) dx = -dx;
 80019a0:	4b1e      	ldr	r3, [pc, #120]	; (8001a1c <run_dead+0x90>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	dd03      	ble.n	80019b0 <run_dead+0x24>
 80019a8:	4b1c      	ldr	r3, [pc, #112]	; (8001a1c <run_dead+0x90>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	2b37      	cmp	r3, #55	; 0x37
 80019ae:	dd04      	ble.n	80019ba <run_dead+0x2e>
 80019b0:	4b1b      	ldr	r3, [pc, #108]	; (8001a20 <run_dead+0x94>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	425b      	negs	r3, r3
 80019b6:	4a1a      	ldr	r2, [pc, #104]	; (8001a20 <run_dead+0x94>)
 80019b8:	6013      	str	r3, [r2, #0]
	ssd1327_CLR();
 80019ba:	f002 f801 	bl	80039c0 <ssd1327_CLR>
	GFX_DrowBitMap_P(x,(screen_height/2) - 4,Defeated_map,67,16,1);
 80019be:	4b17      	ldr	r3, [pc, #92]	; (8001a1c <run_dead+0x90>)
 80019c0:	6818      	ldr	r0, [r3, #0]
 80019c2:	2301      	movs	r3, #1
 80019c4:	9301      	str	r3, [sp, #4]
 80019c6:	2310      	movs	r3, #16
 80019c8:	9300      	str	r3, [sp, #0]
 80019ca:	2343      	movs	r3, #67	; 0x43
 80019cc:	4a15      	ldr	r2, [pc, #84]	; (8001a24 <run_dead+0x98>)
 80019ce:	213c      	movs	r1, #60	; 0x3c
 80019d0:	f7ff f9e6 	bl	8000da0 <GFX_DrowBitMap_P>
	GFX_DrowBitMap_P(35,(screen_height/2) + 24,Score_map,37,10,1);
 80019d4:	2301      	movs	r3, #1
 80019d6:	9301      	str	r3, [sp, #4]
 80019d8:	230a      	movs	r3, #10
 80019da:	9300      	str	r3, [sp, #0]
 80019dc:	2325      	movs	r3, #37	; 0x25
 80019de:	4a12      	ldr	r2, [pc, #72]	; (8001a28 <run_dead+0x9c>)
 80019e0:	2158      	movs	r1, #88	; 0x58
 80019e2:	2023      	movs	r0, #35	; 0x23
 80019e4:	f7ff f9dc 	bl	8000da0 <GFX_DrowBitMap_P>
	GFX_PutInt(73,(screen_height/2) + 27,player.score,1,1,0);
 80019e8:	4b10      	ldr	r3, [pc, #64]	; (8001a2c <run_dead+0xa0>)
 80019ea:	689a      	ldr	r2, [r3, #8]
 80019ec:	2300      	movs	r3, #0
 80019ee:	9301      	str	r3, [sp, #4]
 80019f0:	2301      	movs	r3, #1
 80019f2:	9300      	str	r3, [sp, #0]
 80019f4:	2301      	movs	r3, #1
 80019f6:	215b      	movs	r1, #91	; 0x5b
 80019f8:	2049      	movs	r0, #73	; 0x49
 80019fa:	f7ff fb63 	bl	80010c4 <GFX_PutInt>
	//GFX_DrowBitMap_P(36,40,Best_map,27,10,1);
	//GFX_PutInt(73,43,player.high_score,1,1,0);
	ssd1327_display();
 80019fe:	f001 ffa7 	bl	8003950 <ssd1327_display>

	if(button_pressed())
 8001a02:	f001 feb3 	bl	800376c <button_pressed>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d004      	beq.n	8001a16 <run_dead+0x8a>
	{
		play_dead_anim();
 8001a0c:	f000 f812 	bl	8001a34 <play_dead_anim>
		state = st_menu;
 8001a10:	4b07      	ldr	r3, [pc, #28]	; (8001a30 <run_dead+0xa4>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	701a      	strb	r2, [r3, #0]
	}
}
 8001a16:	bf00      	nop
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	20001664 	.word	0x20001664
 8001a20:	20000000 	.word	0x20000000
 8001a24:	0800950c 	.word	0x0800950c
 8001a28:	080094d8 	.word	0x080094d8
 8001a2c:	20000168 	.word	0x20000168
 8001a30:	20001658 	.word	0x20001658

08001a34 <play_dead_anim>:

void play_dead_anim(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b084      	sub	sp, #16
 8001a38:	af02      	add	r7, sp, #8
	/*
	 * Animacja miedzy poczczegolnymi ekranami. Daje złudzenie starej gry.
	 */
	uint8_t i;

	for (i = 0; i < 10; ++i)
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	71fb      	strb	r3, [r7, #7]
 8001a3e:	e012      	b.n	8001a66 <play_dead_anim+0x32>
	{
		ssd1327_CLR();
 8001a40:	f001 ffbe 	bl	80039c0 <ssd1327_CLR>
		GFX_FillRect(0,0,128,128,1);
 8001a44:	2301      	movs	r3, #1
 8001a46:	9300      	str	r3, [sp, #0]
 8001a48:	2380      	movs	r3, #128	; 0x80
 8001a4a:	2280      	movs	r2, #128	; 0x80
 8001a4c:	2100      	movs	r1, #0
 8001a4e:	2000      	movs	r0, #0
 8001a50:	f7ff faae 	bl	8000fb0 <GFX_FillRect>
		ssd1327_display();
 8001a54:	f001 ff7c 	bl	8003950 <ssd1327_display>

		ssd1327_CLR();
 8001a58:	f001 ffb2 	bl	80039c0 <ssd1327_CLR>
		ssd1327_display();
 8001a5c:	f001 ff78 	bl	8003950 <ssd1327_display>
	for (i = 0; i < 10; ++i)
 8001a60:	79fb      	ldrb	r3, [r7, #7]
 8001a62:	3301      	adds	r3, #1
 8001a64:	71fb      	strb	r3, [r7, #7]
 8001a66:	79fb      	ldrb	r3, [r7, #7]
 8001a68:	2b09      	cmp	r3, #9
 8001a6a:	d9e9      	bls.n	8001a40 <play_dead_anim+0xc>

	}
}
 8001a6c:	bf00      	nop
 8001a6e:	bf00      	nop
 8001a70:	3708      	adds	r7, #8
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
	...

08001a78 <shoot>:

void shoot(void)
{
 8001a78:	b5b0      	push	{r4, r5, r7, lr}
 8001a7a:	b08c      	sub	sp, #48	; 0x30
 8001a7c:	af00      	add	r7, sp, #0

	int closest_enemy_number;
	int temp_x;
	int temp_y;
	double temp_distance;
	double smolest_distance = 500;
 8001a7e:	f04f 0200 	mov.w	r2, #0
 8001a82:	4b95      	ldr	r3, [pc, #596]	; (8001cd8 <shoot+0x260>)
 8001a84:	e9c7 2306 	strd	r2, r3, [r7, #24]
	int random_tracking_number;

	for (i = 0; i < num_shots; ++i)
 8001a88:	2300      	movs	r3, #0
 8001a8a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001a8e:	e116      	b.n	8001cbe <shoot+0x246>
	{
		if (!shoots[i].active)
 8001a90:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8001a94:	4991      	ldr	r1, [pc, #580]	; (8001cdc <shoot+0x264>)
 8001a96:	4613      	mov	r3, r2
 8001a98:	009b      	lsls	r3, r3, #2
 8001a9a:	4413      	add	r3, r2
 8001a9c:	009b      	lsls	r3, r3, #2
 8001a9e:	440b      	add	r3, r1
 8001aa0:	781b      	ldrb	r3, [r3, #0]
 8001aa2:	f083 0301 	eor.w	r3, r3, #1
 8001aa6:	b2db      	uxtb	r3, r3
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	f000 8103 	beq.w	8001cb4 <shoot+0x23c>
		{
			shoots[i].active = true;
 8001aae:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8001ab2:	498a      	ldr	r1, [pc, #552]	; (8001cdc <shoot+0x264>)
 8001ab4:	4613      	mov	r3, r2
 8001ab6:	009b      	lsls	r3, r3, #2
 8001ab8:	4413      	add	r3, r2
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	440b      	add	r3, r1
 8001abe:	2201      	movs	r2, #1
 8001ac0:	701a      	strb	r2, [r3, #0]
			shoots[i].x = 11;
 8001ac2:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8001ac6:	4985      	ldr	r1, [pc, #532]	; (8001cdc <shoot+0x264>)
 8001ac8:	4613      	mov	r3, r2
 8001aca:	009b      	lsls	r3, r3, #2
 8001acc:	4413      	add	r3, r2
 8001ace:	009b      	lsls	r3, r3, #2
 8001ad0:	440b      	add	r3, r1
 8001ad2:	3304      	adds	r3, #4
 8001ad4:	220b      	movs	r2, #11
 8001ad6:	601a      	str	r2, [r3, #0]
			shoots[i].y = player.y + 5;
 8001ad8:	4b81      	ldr	r3, [pc, #516]	; (8001ce0 <shoot+0x268>)
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8001ae0:	1d59      	adds	r1, r3, #5
 8001ae2:	487e      	ldr	r0, [pc, #504]	; (8001cdc <shoot+0x264>)
 8001ae4:	4613      	mov	r3, r2
 8001ae6:	009b      	lsls	r3, r3, #2
 8001ae8:	4413      	add	r3, r2
 8001aea:	009b      	lsls	r3, r3, #2
 8001aec:	4403      	add	r3, r0
 8001aee:	3308      	adds	r3, #8
 8001af0:	6019      	str	r1, [r3, #0]

			//Ustawienie rodzaju strzału
			switch(player.shoot_type)
 8001af2:	4b7b      	ldr	r3, [pc, #492]	; (8001ce0 <shoot+0x268>)
 8001af4:	7f1b      	ldrb	r3, [r3, #28]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d002      	beq.n	8001b00 <shoot+0x88>
 8001afa:	2b01      	cmp	r3, #1
 8001afc:	d00c      	beq.n	8001b18 <shoot+0xa0>
					// Jeśli nie znalazłeś żadnego celu zachowój się jak normlany strzał
					shoots[i].type = st_normal;
				}
				break;
			}
			return;
 8001afe:	e0e3      	b.n	8001cc8 <shoot+0x250>
				shoots[i].type = st_normal;
 8001b00:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8001b04:	4975      	ldr	r1, [pc, #468]	; (8001cdc <shoot+0x264>)
 8001b06:	4613      	mov	r3, r2
 8001b08:	009b      	lsls	r3, r3, #2
 8001b0a:	4413      	add	r3, r2
 8001b0c:	009b      	lsls	r3, r3, #2
 8001b0e:	440b      	add	r3, r1
 8001b10:	330c      	adds	r3, #12
 8001b12:	2200      	movs	r2, #0
 8001b14:	701a      	strb	r2, [r3, #0]
				break;
 8001b16:	e0cc      	b.n	8001cb2 <shoot+0x23a>
				for(int j = 0; j < num_enemies; j++)
 8001b18:	2300      	movs	r3, #0
 8001b1a:	627b      	str	r3, [r7, #36]	; 0x24
 8001b1c:	e084      	b.n	8001c28 <shoot+0x1b0>
					if(enemies[j].active && !enemies[j].tracked_by_missile)
 8001b1e:	4971      	ldr	r1, [pc, #452]	; (8001ce4 <shoot+0x26c>)
 8001b20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b22:	4613      	mov	r3, r2
 8001b24:	00db      	lsls	r3, r3, #3
 8001b26:	4413      	add	r3, r2
 8001b28:	009b      	lsls	r3, r3, #2
 8001b2a:	440b      	add	r3, r1
 8001b2c:	781b      	ldrb	r3, [r3, #0]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d077      	beq.n	8001c22 <shoot+0x1aa>
 8001b32:	496c      	ldr	r1, [pc, #432]	; (8001ce4 <shoot+0x26c>)
 8001b34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b36:	4613      	mov	r3, r2
 8001b38:	00db      	lsls	r3, r3, #3
 8001b3a:	4413      	add	r3, r2
 8001b3c:	009b      	lsls	r3, r3, #2
 8001b3e:	440b      	add	r3, r1
 8001b40:	331c      	adds	r3, #28
 8001b42:	781b      	ldrb	r3, [r3, #0]
 8001b44:	f083 0301 	eor.w	r3, r3, #1
 8001b48:	b2db      	uxtb	r3, r3
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d069      	beq.n	8001c22 <shoot+0x1aa>
						is_any_enemies_active = true;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
						temp_x = enemies[j].x;
 8001b54:	4963      	ldr	r1, [pc, #396]	; (8001ce4 <shoot+0x26c>)
 8001b56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b58:	4613      	mov	r3, r2
 8001b5a:	00db      	lsls	r3, r3, #3
 8001b5c:	4413      	add	r3, r2
 8001b5e:	009b      	lsls	r3, r3, #2
 8001b60:	440b      	add	r3, r1
 8001b62:	3304      	adds	r3, #4
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	617b      	str	r3, [r7, #20]
						temp_y = enemies[j].y;
 8001b68:	495e      	ldr	r1, [pc, #376]	; (8001ce4 <shoot+0x26c>)
 8001b6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b6c:	4613      	mov	r3, r2
 8001b6e:	00db      	lsls	r3, r3, #3
 8001b70:	4413      	add	r3, r2
 8001b72:	009b      	lsls	r3, r3, #2
 8001b74:	440b      	add	r3, r1
 8001b76:	3308      	adds	r3, #8
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	613b      	str	r3, [r7, #16]
						temp_distance = sqrt(pow(enemies[j].x - player.x, 2) + pow(enemies[j].y - player.y, 2));
 8001b7c:	4959      	ldr	r1, [pc, #356]	; (8001ce4 <shoot+0x26c>)
 8001b7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b80:	4613      	mov	r3, r2
 8001b82:	00db      	lsls	r3, r3, #3
 8001b84:	4413      	add	r3, r2
 8001b86:	009b      	lsls	r3, r3, #2
 8001b88:	440b      	add	r3, r1
 8001b8a:	3304      	adds	r3, #4
 8001b8c:	681a      	ldr	r2, [r3, #0]
 8001b8e:	4b54      	ldr	r3, [pc, #336]	; (8001ce0 <shoot+0x268>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	1ad3      	subs	r3, r2, r3
 8001b94:	4618      	mov	r0, r3
 8001b96:	f7fe fcbd 	bl	8000514 <__aeabi_i2d>
 8001b9a:	4602      	mov	r2, r0
 8001b9c:	460b      	mov	r3, r1
 8001b9e:	ed9f 1b4c 	vldr	d1, [pc, #304]	; 8001cd0 <shoot+0x258>
 8001ba2:	ec43 2b10 	vmov	d0, r2, r3
 8001ba6:	f006 faa5 	bl	80080f4 <pow>
 8001baa:	ec55 4b10 	vmov	r4, r5, d0
 8001bae:	494d      	ldr	r1, [pc, #308]	; (8001ce4 <shoot+0x26c>)
 8001bb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bb2:	4613      	mov	r3, r2
 8001bb4:	00db      	lsls	r3, r3, #3
 8001bb6:	4413      	add	r3, r2
 8001bb8:	009b      	lsls	r3, r3, #2
 8001bba:	440b      	add	r3, r1
 8001bbc:	3308      	adds	r3, #8
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	4b47      	ldr	r3, [pc, #284]	; (8001ce0 <shoot+0x268>)
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	1ad3      	subs	r3, r2, r3
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f7fe fca4 	bl	8000514 <__aeabi_i2d>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	460b      	mov	r3, r1
 8001bd0:	ed9f 1b3f 	vldr	d1, [pc, #252]	; 8001cd0 <shoot+0x258>
 8001bd4:	ec43 2b10 	vmov	d0, r2, r3
 8001bd8:	f006 fa8c 	bl	80080f4 <pow>
 8001bdc:	ec53 2b10 	vmov	r2, r3, d0
 8001be0:	4620      	mov	r0, r4
 8001be2:	4629      	mov	r1, r5
 8001be4:	f7fe fb4a 	bl	800027c <__adddf3>
 8001be8:	4602      	mov	r2, r0
 8001bea:	460b      	mov	r3, r1
 8001bec:	ec43 2b17 	vmov	d7, r2, r3
 8001bf0:	eeb0 0a47 	vmov.f32	s0, s14
 8001bf4:	eef0 0a67 	vmov.f32	s1, s15
 8001bf8:	f006 faec 	bl	80081d4 <sqrt>
 8001bfc:	ed87 0b02 	vstr	d0, [r7, #8]
						if (temp_distance < smolest_distance)
 8001c00:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c04:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001c08:	f7fe ff60 	bl	8000acc <__aeabi_dcmplt>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d100      	bne.n	8001c14 <shoot+0x19c>
						break;
 8001c12:	e00d      	b.n	8001c30 <shoot+0x1b8>
							smolest_distance = temp_distance;
 8001c14:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001c18:	e9c7 2306 	strd	r2, r3, [r7, #24]
							closest_enemy_number = j;
 8001c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c1e:	62bb      	str	r3, [r7, #40]	; 0x28
						break;
 8001c20:	e006      	b.n	8001c30 <shoot+0x1b8>
				for(int j = 0; j < num_enemies; j++)
 8001c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c24:	3301      	adds	r3, #1
 8001c26:	627b      	str	r3, [r7, #36]	; 0x24
 8001c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c2a:	2b09      	cmp	r3, #9
 8001c2c:	f77f af77 	ble.w	8001b1e <shoot+0xa6>
				if(is_any_enemies_active)
 8001c30:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d030      	beq.n	8001c9a <shoot+0x222>
					random_tracking_number = rand();
 8001c38:	f005 fa24 	bl	8007084 <rand>
 8001c3c:	6078      	str	r0, [r7, #4]
					enemies[closest_enemy_number].truck_number = random_tracking_number;
 8001c3e:	4929      	ldr	r1, [pc, #164]	; (8001ce4 <shoot+0x26c>)
 8001c40:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001c42:	4613      	mov	r3, r2
 8001c44:	00db      	lsls	r3, r3, #3
 8001c46:	4413      	add	r3, r2
 8001c48:	009b      	lsls	r3, r3, #2
 8001c4a:	440b      	add	r3, r1
 8001c4c:	3320      	adds	r3, #32
 8001c4e:	687a      	ldr	r2, [r7, #4]
 8001c50:	601a      	str	r2, [r3, #0]
					enemies[closest_enemy_number].tracked_by_missile = true;
 8001c52:	4924      	ldr	r1, [pc, #144]	; (8001ce4 <shoot+0x26c>)
 8001c54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001c56:	4613      	mov	r3, r2
 8001c58:	00db      	lsls	r3, r3, #3
 8001c5a:	4413      	add	r3, r2
 8001c5c:	009b      	lsls	r3, r3, #2
 8001c5e:	440b      	add	r3, r1
 8001c60:	331c      	adds	r3, #28
 8001c62:	2201      	movs	r2, #1
 8001c64:	701a      	strb	r2, [r3, #0]
					shoots[i].type = st_tracker;
 8001c66:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8001c6a:	491c      	ldr	r1, [pc, #112]	; (8001cdc <shoot+0x264>)
 8001c6c:	4613      	mov	r3, r2
 8001c6e:	009b      	lsls	r3, r3, #2
 8001c70:	4413      	add	r3, r2
 8001c72:	009b      	lsls	r3, r3, #2
 8001c74:	440b      	add	r3, r1
 8001c76:	330c      	adds	r3, #12
 8001c78:	2201      	movs	r2, #1
 8001c7a:	701a      	strb	r2, [r3, #0]
					shoots[i].truck_number = random_tracking_number;
 8001c7c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8001c80:	4916      	ldr	r1, [pc, #88]	; (8001cdc <shoot+0x264>)
 8001c82:	4613      	mov	r3, r2
 8001c84:	009b      	lsls	r3, r3, #2
 8001c86:	4413      	add	r3, r2
 8001c88:	009b      	lsls	r3, r3, #2
 8001c8a:	440b      	add	r3, r1
 8001c8c:	3310      	adds	r3, #16
 8001c8e:	687a      	ldr	r2, [r7, #4]
 8001c90:	601a      	str	r2, [r3, #0]
					debug_value = random_tracking_number;
 8001c92:	4a15      	ldr	r2, [pc, #84]	; (8001ce8 <shoot+0x270>)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6013      	str	r3, [r2, #0]
				break;
 8001c98:	e00a      	b.n	8001cb0 <shoot+0x238>
					shoots[i].type = st_normal;
 8001c9a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8001c9e:	490f      	ldr	r1, [pc, #60]	; (8001cdc <shoot+0x264>)
 8001ca0:	4613      	mov	r3, r2
 8001ca2:	009b      	lsls	r3, r3, #2
 8001ca4:	4413      	add	r3, r2
 8001ca6:	009b      	lsls	r3, r3, #2
 8001ca8:	440b      	add	r3, r1
 8001caa:	330c      	adds	r3, #12
 8001cac:	2200      	movs	r2, #0
 8001cae:	701a      	strb	r2, [r3, #0]
				break;
 8001cb0:	bf00      	nop
			return;
 8001cb2:	e009      	b.n	8001cc8 <shoot+0x250>
	for (i = 0; i < num_shots; ++i)
 8001cb4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001cb8:	3301      	adds	r3, #1
 8001cba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001cbe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001cc2:	2b22      	cmp	r3, #34	; 0x22
 8001cc4:	f67f aee4 	bls.w	8001a90 <shoot+0x18>
		}
	}
}
 8001cc8:	3730      	adds	r7, #48	; 0x30
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bdb0      	pop	{r4, r5, r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	00000000 	.word	0x00000000
 8001cd4:	40000000 	.word	0x40000000
 8001cd8:	407f4000 	.word	0x407f4000
 8001cdc:	20000188 	.word	0x20000188
 8001ce0:	20000168 	.word	0x20000168
 8001ce4:	200004a8 	.word	0x200004a8
 8001ce8:	2000165c 	.word	0x2000165c

08001cec <boss_shoot>:

void boss_shoot(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b083      	sub	sp, #12
 8001cf0:	af00      	add	r7, sp, #0
	 * To samo co shoot() tylko �e odpowiada za strza�y
	 * boss�w.
	 */
	uint8_t i;

	for (i = 0; i < num_shots; ++i)
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	71fb      	strb	r3, [r7, #7]
 8001cf6:	e030      	b.n	8001d5a <boss_shoot+0x6e>
	{
		if (!boss_shots[i].active)
 8001cf8:	79fa      	ldrb	r2, [r7, #7]
 8001cfa:	491c      	ldr	r1, [pc, #112]	; (8001d6c <boss_shoot+0x80>)
 8001cfc:	4613      	mov	r3, r2
 8001cfe:	009b      	lsls	r3, r3, #2
 8001d00:	4413      	add	r3, r2
 8001d02:	009b      	lsls	r3, r3, #2
 8001d04:	440b      	add	r3, r1
 8001d06:	781b      	ldrb	r3, [r3, #0]
 8001d08:	f083 0301 	eor.w	r3, r3, #1
 8001d0c:	b2db      	uxtb	r3, r3
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d020      	beq.n	8001d54 <boss_shoot+0x68>
		{
			boss_shots[i].active = true;
 8001d12:	79fa      	ldrb	r2, [r7, #7]
 8001d14:	4915      	ldr	r1, [pc, #84]	; (8001d6c <boss_shoot+0x80>)
 8001d16:	4613      	mov	r3, r2
 8001d18:	009b      	lsls	r3, r3, #2
 8001d1a:	4413      	add	r3, r2
 8001d1c:	009b      	lsls	r3, r3, #2
 8001d1e:	440b      	add	r3, r1
 8001d20:	2201      	movs	r2, #1
 8001d22:	701a      	strb	r2, [r3, #0]
			boss_shots[i].x = boss.x;
 8001d24:	79fa      	ldrb	r2, [r7, #7]
 8001d26:	4b12      	ldr	r3, [pc, #72]	; (8001d70 <boss_shoot+0x84>)
 8001d28:	6859      	ldr	r1, [r3, #4]
 8001d2a:	4810      	ldr	r0, [pc, #64]	; (8001d6c <boss_shoot+0x80>)
 8001d2c:	4613      	mov	r3, r2
 8001d2e:	009b      	lsls	r3, r3, #2
 8001d30:	4413      	add	r3, r2
 8001d32:	009b      	lsls	r3, r3, #2
 8001d34:	4403      	add	r3, r0
 8001d36:	3304      	adds	r3, #4
 8001d38:	6019      	str	r1, [r3, #0]
			boss_shots[i].y = boss.y + 5;
 8001d3a:	4b0d      	ldr	r3, [pc, #52]	; (8001d70 <boss_shoot+0x84>)
 8001d3c:	689b      	ldr	r3, [r3, #8]
 8001d3e:	79fa      	ldrb	r2, [r7, #7]
 8001d40:	1d59      	adds	r1, r3, #5
 8001d42:	480a      	ldr	r0, [pc, #40]	; (8001d6c <boss_shoot+0x80>)
 8001d44:	4613      	mov	r3, r2
 8001d46:	009b      	lsls	r3, r3, #2
 8001d48:	4413      	add	r3, r2
 8001d4a:	009b      	lsls	r3, r3, #2
 8001d4c:	4403      	add	r3, r0
 8001d4e:	3308      	adds	r3, #8
 8001d50:	6019      	str	r1, [r3, #0]
			return;
 8001d52:	e005      	b.n	8001d60 <boss_shoot+0x74>
	for (i = 0; i < num_shots; ++i)
 8001d54:	79fb      	ldrb	r3, [r7, #7]
 8001d56:	3301      	adds	r3, #1
 8001d58:	71fb      	strb	r3, [r7, #7]
 8001d5a:	79fb      	ldrb	r3, [r7, #7]
 8001d5c:	2b22      	cmp	r3, #34	; 0x22
 8001d5e:	d9cb      	bls.n	8001cf8 <boss_shoot+0xc>
		}
	}
}
 8001d60:	370c      	adds	r7, #12
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr
 8001d6a:	bf00      	nop
 8001d6c:	20000444 	.word	0x20000444
 8001d70:	200015b0 	.word	0x200015b0

08001d74 <colliding>:

bool colliding(int x0, int y0, int x1, int y1)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b087      	sub	sp, #28
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	60f8      	str	r0, [r7, #12]
 8001d7c:	60b9      	str	r1, [r7, #8]
 8001d7e:	607a      	str	r2, [r7, #4]
 8001d80:	603b      	str	r3, [r7, #0]
	/*
	 * Sprawdzanie czy dane obiekty ze sob� koliduj�.
	 * Tzw. hitbox.
	 */
	int dx = abs(x0 - x1);
 8001d82:	68fa      	ldr	r2, [r7, #12]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	1ad3      	subs	r3, r2, r3
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	bfb8      	it	lt
 8001d8c:	425b      	neglt	r3, r3
 8001d8e:	617b      	str	r3, [r7, #20]
	int dy = abs(y0 - y1);
 8001d90:	68ba      	ldr	r2, [r7, #8]
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	1ad3      	subs	r3, r2, r3
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	bfb8      	it	lt
 8001d9a:	425b      	neglt	r3, r3
 8001d9c:	613b      	str	r3, [r7, #16]
	return dx < 5 && dy < 8; // orginlanie  dx < 4 && dy < 6
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	2b04      	cmp	r3, #4
 8001da2:	dc04      	bgt.n	8001dae <colliding+0x3a>
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	2b07      	cmp	r3, #7
 8001da8:	dc01      	bgt.n	8001dae <colliding+0x3a>
 8001daa:	2301      	movs	r3, #1
 8001dac:	e000      	b.n	8001db0 <colliding+0x3c>
 8001dae:	2300      	movs	r3, #0
 8001db0:	f003 0301 	and.w	r3, r3, #1
 8001db4:	b2db      	uxtb	r3, r3
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	371c      	adds	r7, #28
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr
	...

08001dc4 <update_scene>:

void update_scene(void)
{
 8001dc4:	b5b0      	push	{r4, r5, r7, lr}
 8001dc6:	b086      	sub	sp, #24
 8001dc8:	af02      	add	r7, sp, #8
	 */
	uint8_t i,j;

	static uint8_t y = 0, dy = 1;
	// Read analog stick
	int stick = joystick_value_y();
 8001dca:	f001 fcf5 	bl	80037b8 <joystick_value_y>
 8001dce:	6078      	str	r0, [r7, #4]

	if (stick < 1000)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001dd6:	da05      	bge.n	8001de4 <update_scene+0x20>
		player.y -= 1;
 8001dd8:	4bb3      	ldr	r3, [pc, #716]	; (80020a8 <update_scene+0x2e4>)
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	3b01      	subs	r3, #1
 8001dde:	4ab2      	ldr	r2, [pc, #712]	; (80020a8 <update_scene+0x2e4>)
 8001de0:	6053      	str	r3, [r2, #4]
 8001de2:	e009      	b.n	8001df8 <update_scene+0x34>
	else if (stick > 3500)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	f640 52ac 	movw	r2, #3500	; 0xdac
 8001dea:	4293      	cmp	r3, r2
 8001dec:	dd04      	ble.n	8001df8 <update_scene+0x34>
		player.y += 1;
 8001dee:	4bae      	ldr	r3, [pc, #696]	; (80020a8 <update_scene+0x2e4>)
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	3301      	adds	r3, #1
 8001df4:	4aac      	ldr	r2, [pc, #688]	; (80020a8 <update_scene+0x2e4>)
 8001df6:	6053      	str	r3, [r2, #4]

	// Trzymanie gracza w ramach ekranu
	if (player.y < 10) player.y = 10;
 8001df8:	4bab      	ldr	r3, [pc, #684]	; (80020a8 <update_scene+0x2e4>)
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	2b09      	cmp	r3, #9
 8001dfe:	dc02      	bgt.n	8001e06 <update_scene+0x42>
 8001e00:	4ba9      	ldr	r3, [pc, #676]	; (80020a8 <update_scene+0x2e4>)
 8001e02:	220a      	movs	r2, #10
 8001e04:	605a      	str	r2, [r3, #4]
	if (player.y > (screen_height - 14)) player.y = (screen_height - 14);
 8001e06:	4ba8      	ldr	r3, [pc, #672]	; (80020a8 <update_scene+0x2e4>)
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	2b72      	cmp	r3, #114	; 0x72
 8001e0c:	dd02      	ble.n	8001e14 <update_scene+0x50>
 8001e0e:	4ba6      	ldr	r3, [pc, #664]	; (80020a8 <update_scene+0x2e4>)
 8001e10:	2272      	movs	r2, #114	; 0x72
 8001e12:	605a      	str	r2, [r3, #4]

	// Przesunięcie strałów do przodu

	bool shoot_updated = false;
 8001e14:	2300      	movs	r3, #0
 8001e16:	737b      	strb	r3, [r7, #13]

	for (i = 0; i < num_shots; ++i)
 8001e18:	2300      	movs	r3, #0
 8001e1a:	73fb      	strb	r3, [r7, #15]
 8001e1c:	e14e      	b.n	80020bc <update_scene+0x2f8>
	{
		switch(shoots[i].type)
 8001e1e:	7bfa      	ldrb	r2, [r7, #15]
 8001e20:	49a2      	ldr	r1, [pc, #648]	; (80020ac <update_scene+0x2e8>)
 8001e22:	4613      	mov	r3, r2
 8001e24:	009b      	lsls	r3, r3, #2
 8001e26:	4413      	add	r3, r2
 8001e28:	009b      	lsls	r3, r3, #2
 8001e2a:	440b      	add	r3, r1
 8001e2c:	330c      	adds	r3, #12
 8001e2e:	781b      	ldrb	r3, [r3, #0]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d002      	beq.n	8001e3a <update_scene+0x76>
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	d032      	beq.n	8001e9e <update_scene+0xda>
 8001e38:	e13d      	b.n	80020b6 <update_scene+0x2f2>
		{
		case st_normal:
			if (shoots[i].active)
 8001e3a:	7bfa      	ldrb	r2, [r7, #15]
 8001e3c:	499b      	ldr	r1, [pc, #620]	; (80020ac <update_scene+0x2e8>)
 8001e3e:	4613      	mov	r3, r2
 8001e40:	009b      	lsls	r3, r3, #2
 8001e42:	4413      	add	r3, r2
 8001e44:	009b      	lsls	r3, r3, #2
 8001e46:	440b      	add	r3, r1
 8001e48:	781b      	ldrb	r3, [r3, #0]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d011      	beq.n	8001e72 <update_scene+0xae>
				shoots[i].x++;
 8001e4e:	7bfa      	ldrb	r2, [r7, #15]
 8001e50:	4996      	ldr	r1, [pc, #600]	; (80020ac <update_scene+0x2e8>)
 8001e52:	4613      	mov	r3, r2
 8001e54:	009b      	lsls	r3, r3, #2
 8001e56:	4413      	add	r3, r2
 8001e58:	009b      	lsls	r3, r3, #2
 8001e5a:	440b      	add	r3, r1
 8001e5c:	3304      	adds	r3, #4
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	1c59      	adds	r1, r3, #1
 8001e62:	4892      	ldr	r0, [pc, #584]	; (80020ac <update_scene+0x2e8>)
 8001e64:	4613      	mov	r3, r2
 8001e66:	009b      	lsls	r3, r3, #2
 8001e68:	4413      	add	r3, r2
 8001e6a:	009b      	lsls	r3, r3, #2
 8001e6c:	4403      	add	r3, r0
 8001e6e:	3304      	adds	r3, #4
 8001e70:	6019      	str	r1, [r3, #0]
			if (shoots[i].x > 128)
 8001e72:	7bfa      	ldrb	r2, [r7, #15]
 8001e74:	498d      	ldr	r1, [pc, #564]	; (80020ac <update_scene+0x2e8>)
 8001e76:	4613      	mov	r3, r2
 8001e78:	009b      	lsls	r3, r3, #2
 8001e7a:	4413      	add	r3, r2
 8001e7c:	009b      	lsls	r3, r3, #2
 8001e7e:	440b      	add	r3, r1
 8001e80:	3304      	adds	r3, #4
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	2b80      	cmp	r3, #128	; 0x80
 8001e86:	f340 810d 	ble.w	80020a4 <update_scene+0x2e0>
				shoots[i].active = false;
 8001e8a:	7bfa      	ldrb	r2, [r7, #15]
 8001e8c:	4987      	ldr	r1, [pc, #540]	; (80020ac <update_scene+0x2e8>)
 8001e8e:	4613      	mov	r3, r2
 8001e90:	009b      	lsls	r3, r3, #2
 8001e92:	4413      	add	r3, r2
 8001e94:	009b      	lsls	r3, r3, #2
 8001e96:	440b      	add	r3, r1
 8001e98:	2200      	movs	r2, #0
 8001e9a:	701a      	strb	r2, [r3, #0]
			break;
 8001e9c:	e102      	b.n	80020a4 <update_scene+0x2e0>
		case st_tracker:

			for (int j = 0; j < num_enemies; j++)
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	60bb      	str	r3, [r7, #8]
 8001ea2:	e0b6      	b.n	8002012 <update_scene+0x24e>
			{
				if (shoots[i].truck_number == enemies[j].truck_number)
 8001ea4:	7bfa      	ldrb	r2, [r7, #15]
 8001ea6:	4981      	ldr	r1, [pc, #516]	; (80020ac <update_scene+0x2e8>)
 8001ea8:	4613      	mov	r3, r2
 8001eaa:	009b      	lsls	r3, r3, #2
 8001eac:	4413      	add	r3, r2
 8001eae:	009b      	lsls	r3, r3, #2
 8001eb0:	440b      	add	r3, r1
 8001eb2:	3310      	adds	r3, #16
 8001eb4:	6819      	ldr	r1, [r3, #0]
 8001eb6:	487e      	ldr	r0, [pc, #504]	; (80020b0 <update_scene+0x2ec>)
 8001eb8:	68ba      	ldr	r2, [r7, #8]
 8001eba:	4613      	mov	r3, r2
 8001ebc:	00db      	lsls	r3, r3, #3
 8001ebe:	4413      	add	r3, r2
 8001ec0:	009b      	lsls	r3, r3, #2
 8001ec2:	4403      	add	r3, r0
 8001ec4:	3320      	adds	r3, #32
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4299      	cmp	r1, r3
 8001eca:	f040 809f 	bne.w	800200c <update_scene+0x248>
				{
					//shoots[i].x += 1;
					if(shoots[i].x > enemies[j].x) shoots[i].x -= 2;
 8001ece:	7bfa      	ldrb	r2, [r7, #15]
 8001ed0:	4976      	ldr	r1, [pc, #472]	; (80020ac <update_scene+0x2e8>)
 8001ed2:	4613      	mov	r3, r2
 8001ed4:	009b      	lsls	r3, r3, #2
 8001ed6:	4413      	add	r3, r2
 8001ed8:	009b      	lsls	r3, r3, #2
 8001eda:	440b      	add	r3, r1
 8001edc:	3304      	adds	r3, #4
 8001ede:	6819      	ldr	r1, [r3, #0]
 8001ee0:	4873      	ldr	r0, [pc, #460]	; (80020b0 <update_scene+0x2ec>)
 8001ee2:	68ba      	ldr	r2, [r7, #8]
 8001ee4:	4613      	mov	r3, r2
 8001ee6:	00db      	lsls	r3, r3, #3
 8001ee8:	4413      	add	r3, r2
 8001eea:	009b      	lsls	r3, r3, #2
 8001eec:	4403      	add	r3, r0
 8001eee:	3304      	adds	r3, #4
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4299      	cmp	r1, r3
 8001ef4:	dd12      	ble.n	8001f1c <update_scene+0x158>
 8001ef6:	7bfa      	ldrb	r2, [r7, #15]
 8001ef8:	496c      	ldr	r1, [pc, #432]	; (80020ac <update_scene+0x2e8>)
 8001efa:	4613      	mov	r3, r2
 8001efc:	009b      	lsls	r3, r3, #2
 8001efe:	4413      	add	r3, r2
 8001f00:	009b      	lsls	r3, r3, #2
 8001f02:	440b      	add	r3, r1
 8001f04:	3304      	adds	r3, #4
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	7bfa      	ldrb	r2, [r7, #15]
 8001f0a:	1e99      	subs	r1, r3, #2
 8001f0c:	4867      	ldr	r0, [pc, #412]	; (80020ac <update_scene+0x2e8>)
 8001f0e:	4613      	mov	r3, r2
 8001f10:	009b      	lsls	r3, r3, #2
 8001f12:	4413      	add	r3, r2
 8001f14:	009b      	lsls	r3, r3, #2
 8001f16:	4403      	add	r3, r0
 8001f18:	3304      	adds	r3, #4
 8001f1a:	6019      	str	r1, [r3, #0]
					if(shoots[i].x < enemies[j].x) shoots[i].x += 2;
 8001f1c:	7bfa      	ldrb	r2, [r7, #15]
 8001f1e:	4963      	ldr	r1, [pc, #396]	; (80020ac <update_scene+0x2e8>)
 8001f20:	4613      	mov	r3, r2
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	4413      	add	r3, r2
 8001f26:	009b      	lsls	r3, r3, #2
 8001f28:	440b      	add	r3, r1
 8001f2a:	3304      	adds	r3, #4
 8001f2c:	6819      	ldr	r1, [r3, #0]
 8001f2e:	4860      	ldr	r0, [pc, #384]	; (80020b0 <update_scene+0x2ec>)
 8001f30:	68ba      	ldr	r2, [r7, #8]
 8001f32:	4613      	mov	r3, r2
 8001f34:	00db      	lsls	r3, r3, #3
 8001f36:	4413      	add	r3, r2
 8001f38:	009b      	lsls	r3, r3, #2
 8001f3a:	4403      	add	r3, r0
 8001f3c:	3304      	adds	r3, #4
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4299      	cmp	r1, r3
 8001f42:	da12      	bge.n	8001f6a <update_scene+0x1a6>
 8001f44:	7bfa      	ldrb	r2, [r7, #15]
 8001f46:	4959      	ldr	r1, [pc, #356]	; (80020ac <update_scene+0x2e8>)
 8001f48:	4613      	mov	r3, r2
 8001f4a:	009b      	lsls	r3, r3, #2
 8001f4c:	4413      	add	r3, r2
 8001f4e:	009b      	lsls	r3, r3, #2
 8001f50:	440b      	add	r3, r1
 8001f52:	3304      	adds	r3, #4
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	7bfa      	ldrb	r2, [r7, #15]
 8001f58:	1c99      	adds	r1, r3, #2
 8001f5a:	4854      	ldr	r0, [pc, #336]	; (80020ac <update_scene+0x2e8>)
 8001f5c:	4613      	mov	r3, r2
 8001f5e:	009b      	lsls	r3, r3, #2
 8001f60:	4413      	add	r3, r2
 8001f62:	009b      	lsls	r3, r3, #2
 8001f64:	4403      	add	r3, r0
 8001f66:	3304      	adds	r3, #4
 8001f68:	6019      	str	r1, [r3, #0]
					if(shoots[i].y > enemies[j].y) shoots[i].y -= 2;
 8001f6a:	7bfa      	ldrb	r2, [r7, #15]
 8001f6c:	494f      	ldr	r1, [pc, #316]	; (80020ac <update_scene+0x2e8>)
 8001f6e:	4613      	mov	r3, r2
 8001f70:	009b      	lsls	r3, r3, #2
 8001f72:	4413      	add	r3, r2
 8001f74:	009b      	lsls	r3, r3, #2
 8001f76:	440b      	add	r3, r1
 8001f78:	3308      	adds	r3, #8
 8001f7a:	6819      	ldr	r1, [r3, #0]
 8001f7c:	484c      	ldr	r0, [pc, #304]	; (80020b0 <update_scene+0x2ec>)
 8001f7e:	68ba      	ldr	r2, [r7, #8]
 8001f80:	4613      	mov	r3, r2
 8001f82:	00db      	lsls	r3, r3, #3
 8001f84:	4413      	add	r3, r2
 8001f86:	009b      	lsls	r3, r3, #2
 8001f88:	4403      	add	r3, r0
 8001f8a:	3308      	adds	r3, #8
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4299      	cmp	r1, r3
 8001f90:	dd12      	ble.n	8001fb8 <update_scene+0x1f4>
 8001f92:	7bfa      	ldrb	r2, [r7, #15]
 8001f94:	4945      	ldr	r1, [pc, #276]	; (80020ac <update_scene+0x2e8>)
 8001f96:	4613      	mov	r3, r2
 8001f98:	009b      	lsls	r3, r3, #2
 8001f9a:	4413      	add	r3, r2
 8001f9c:	009b      	lsls	r3, r3, #2
 8001f9e:	440b      	add	r3, r1
 8001fa0:	3308      	adds	r3, #8
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	7bfa      	ldrb	r2, [r7, #15]
 8001fa6:	1e99      	subs	r1, r3, #2
 8001fa8:	4840      	ldr	r0, [pc, #256]	; (80020ac <update_scene+0x2e8>)
 8001faa:	4613      	mov	r3, r2
 8001fac:	009b      	lsls	r3, r3, #2
 8001fae:	4413      	add	r3, r2
 8001fb0:	009b      	lsls	r3, r3, #2
 8001fb2:	4403      	add	r3, r0
 8001fb4:	3308      	adds	r3, #8
 8001fb6:	6019      	str	r1, [r3, #0]
					if(shoots[i].y < enemies[j].y) shoots[i].y += 2;
 8001fb8:	7bfa      	ldrb	r2, [r7, #15]
 8001fba:	493c      	ldr	r1, [pc, #240]	; (80020ac <update_scene+0x2e8>)
 8001fbc:	4613      	mov	r3, r2
 8001fbe:	009b      	lsls	r3, r3, #2
 8001fc0:	4413      	add	r3, r2
 8001fc2:	009b      	lsls	r3, r3, #2
 8001fc4:	440b      	add	r3, r1
 8001fc6:	3308      	adds	r3, #8
 8001fc8:	6819      	ldr	r1, [r3, #0]
 8001fca:	4839      	ldr	r0, [pc, #228]	; (80020b0 <update_scene+0x2ec>)
 8001fcc:	68ba      	ldr	r2, [r7, #8]
 8001fce:	4613      	mov	r3, r2
 8001fd0:	00db      	lsls	r3, r3, #3
 8001fd2:	4413      	add	r3, r2
 8001fd4:	009b      	lsls	r3, r3, #2
 8001fd6:	4403      	add	r3, r0
 8001fd8:	3308      	adds	r3, #8
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4299      	cmp	r1, r3
 8001fde:	da12      	bge.n	8002006 <update_scene+0x242>
 8001fe0:	7bfa      	ldrb	r2, [r7, #15]
 8001fe2:	4932      	ldr	r1, [pc, #200]	; (80020ac <update_scene+0x2e8>)
 8001fe4:	4613      	mov	r3, r2
 8001fe6:	009b      	lsls	r3, r3, #2
 8001fe8:	4413      	add	r3, r2
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	440b      	add	r3, r1
 8001fee:	3308      	adds	r3, #8
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	7bfa      	ldrb	r2, [r7, #15]
 8001ff4:	1c99      	adds	r1, r3, #2
 8001ff6:	482d      	ldr	r0, [pc, #180]	; (80020ac <update_scene+0x2e8>)
 8001ff8:	4613      	mov	r3, r2
 8001ffa:	009b      	lsls	r3, r3, #2
 8001ffc:	4413      	add	r3, r2
 8001ffe:	009b      	lsls	r3, r3, #2
 8002000:	4403      	add	r3, r0
 8002002:	3308      	adds	r3, #8
 8002004:	6019      	str	r1, [r3, #0]
					shoot_updated = true;
 8002006:	2301      	movs	r3, #1
 8002008:	737b      	strb	r3, [r7, #13]
					break;
 800200a:	e006      	b.n	800201a <update_scene+0x256>
			for (int j = 0; j < num_enemies; j++)
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	3301      	adds	r3, #1
 8002010:	60bb      	str	r3, [r7, #8]
 8002012:	68bb      	ldr	r3, [r7, #8]
 8002014:	2b09      	cmp	r3, #9
 8002016:	f77f af45 	ble.w	8001ea4 <update_scene+0xe0>
				}
			}
			//Usuń śledzące pociski które nie mają celu
			if(!shoot_updated && shoots[i].type == st_tracker)
 800201a:	7b7b      	ldrb	r3, [r7, #13]
 800201c:	f083 0301 	eor.w	r3, r3, #1
 8002020:	b2db      	uxtb	r3, r3
 8002022:	2b00      	cmp	r3, #0
 8002024:	d01f      	beq.n	8002066 <update_scene+0x2a2>
 8002026:	7bfa      	ldrb	r2, [r7, #15]
 8002028:	4920      	ldr	r1, [pc, #128]	; (80020ac <update_scene+0x2e8>)
 800202a:	4613      	mov	r3, r2
 800202c:	009b      	lsls	r3, r3, #2
 800202e:	4413      	add	r3, r2
 8002030:	009b      	lsls	r3, r3, #2
 8002032:	440b      	add	r3, r1
 8002034:	330c      	adds	r3, #12
 8002036:	781b      	ldrb	r3, [r3, #0]
 8002038:	2b01      	cmp	r3, #1
 800203a:	d114      	bne.n	8002066 <update_scene+0x2a2>
			{
				shoots[i].active = false;
 800203c:	7bfa      	ldrb	r2, [r7, #15]
 800203e:	491b      	ldr	r1, [pc, #108]	; (80020ac <update_scene+0x2e8>)
 8002040:	4613      	mov	r3, r2
 8002042:	009b      	lsls	r3, r3, #2
 8002044:	4413      	add	r3, r2
 8002046:	009b      	lsls	r3, r3, #2
 8002048:	440b      	add	r3, r1
 800204a:	2200      	movs	r2, #0
 800204c:	701a      	strb	r2, [r3, #0]
				shoots[i].truck_number = 0;
 800204e:	7bfa      	ldrb	r2, [r7, #15]
 8002050:	4916      	ldr	r1, [pc, #88]	; (80020ac <update_scene+0x2e8>)
 8002052:	4613      	mov	r3, r2
 8002054:	009b      	lsls	r3, r3, #2
 8002056:	4413      	add	r3, r2
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	440b      	add	r3, r1
 800205c:	3310      	adds	r3, #16
 800205e:	2200      	movs	r2, #0
 8002060:	601a      	str	r2, [r3, #0]
				shoot_updated = false;
 8002062:	2300      	movs	r3, #0
 8002064:	737b      	strb	r3, [r7, #13]
			}

			if(shoots[i].x > 128)
 8002066:	7bfa      	ldrb	r2, [r7, #15]
 8002068:	4910      	ldr	r1, [pc, #64]	; (80020ac <update_scene+0x2e8>)
 800206a:	4613      	mov	r3, r2
 800206c:	009b      	lsls	r3, r3, #2
 800206e:	4413      	add	r3, r2
 8002070:	009b      	lsls	r3, r3, #2
 8002072:	440b      	add	r3, r1
 8002074:	3304      	adds	r3, #4
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	2b80      	cmp	r3, #128	; 0x80
 800207a:	dd1b      	ble.n	80020b4 <update_scene+0x2f0>
			{
				shoots[i].active = false;
 800207c:	7bfa      	ldrb	r2, [r7, #15]
 800207e:	490b      	ldr	r1, [pc, #44]	; (80020ac <update_scene+0x2e8>)
 8002080:	4613      	mov	r3, r2
 8002082:	009b      	lsls	r3, r3, #2
 8002084:	4413      	add	r3, r2
 8002086:	009b      	lsls	r3, r3, #2
 8002088:	440b      	add	r3, r1
 800208a:	2200      	movs	r2, #0
 800208c:	701a      	strb	r2, [r3, #0]
				shoots[i].truck_number = 0;
 800208e:	7bfa      	ldrb	r2, [r7, #15]
 8002090:	4906      	ldr	r1, [pc, #24]	; (80020ac <update_scene+0x2e8>)
 8002092:	4613      	mov	r3, r2
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	4413      	add	r3, r2
 8002098:	009b      	lsls	r3, r3, #2
 800209a:	440b      	add	r3, r1
 800209c:	3310      	adds	r3, #16
 800209e:	2200      	movs	r2, #0
 80020a0:	601a      	str	r2, [r3, #0]
			}
			break;
 80020a2:	e007      	b.n	80020b4 <update_scene+0x2f0>
			break;
 80020a4:	bf00      	nop
 80020a6:	e006      	b.n	80020b6 <update_scene+0x2f2>
 80020a8:	20000168 	.word	0x20000168
 80020ac:	20000188 	.word	0x20000188
 80020b0:	200004a8 	.word	0x200004a8
			break;
 80020b4:	bf00      	nop
	for (i = 0; i < num_shots; ++i)
 80020b6:	7bfb      	ldrb	r3, [r7, #15]
 80020b8:	3301      	adds	r3, #1
 80020ba:	73fb      	strb	r3, [r7, #15]
 80020bc:	7bfb      	ldrb	r3, [r7, #15]
 80020be:	2b22      	cmp	r3, #34	; 0x22
 80020c0:	f67f aead 	bls.w	8001e1e <update_scene+0x5a>
		}

	}

	// Aktualizacja przeciwników
	for (i = 0; i < num_enemies; ++i)
 80020c4:	2300      	movs	r3, #0
 80020c6:	73fb      	strb	r3, [r7, #15]
 80020c8:	e273      	b.n	80025b2 <update_scene+0x7ee>
	{

		if (enemies[i].active)
 80020ca:	7bfa      	ldrb	r2, [r7, #15]
 80020cc:	49b6      	ldr	r1, [pc, #728]	; (80023a8 <update_scene+0x5e4>)
 80020ce:	4613      	mov	r3, r2
 80020d0:	00db      	lsls	r3, r3, #3
 80020d2:	4413      	add	r3, r2
 80020d4:	009b      	lsls	r3, r3, #2
 80020d6:	440b      	add	r3, r1
 80020d8:	781b      	ldrb	r3, [r3, #0]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	f000 8266 	beq.w	80025ac <update_scene+0x7e8>
		{
			enemies[i].next_update -= 1;
 80020e0:	7bfa      	ldrb	r2, [r7, #15]
 80020e2:	49b1      	ldr	r1, [pc, #708]	; (80023a8 <update_scene+0x5e4>)
 80020e4:	4613      	mov	r3, r2
 80020e6:	00db      	lsls	r3, r3, #3
 80020e8:	4413      	add	r3, r2
 80020ea:	009b      	lsls	r3, r3, #2
 80020ec:	440b      	add	r3, r1
 80020ee:	3314      	adds	r3, #20
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	7bfa      	ldrb	r2, [r7, #15]
 80020f4:	1e59      	subs	r1, r3, #1
 80020f6:	48ac      	ldr	r0, [pc, #688]	; (80023a8 <update_scene+0x5e4>)
 80020f8:	4613      	mov	r3, r2
 80020fa:	00db      	lsls	r3, r3, #3
 80020fc:	4413      	add	r3, r2
 80020fe:	009b      	lsls	r3, r3, #2
 8002100:	4403      	add	r3, r0
 8002102:	3314      	adds	r3, #20
 8002104:	6019      	str	r1, [r3, #0]
				if (enemies[i].next_update <= 0)
 8002106:	7bfa      	ldrb	r2, [r7, #15]
 8002108:	49a7      	ldr	r1, [pc, #668]	; (80023a8 <update_scene+0x5e4>)
 800210a:	4613      	mov	r3, r2
 800210c:	00db      	lsls	r3, r3, #3
 800210e:	4413      	add	r3, r2
 8002110:	009b      	lsls	r3, r3, #2
 8002112:	440b      	add	r3, r1
 8002114:	3314      	adds	r3, #20
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	2b00      	cmp	r3, #0
 800211a:	f300 8247 	bgt.w	80025ac <update_scene+0x7e8>
				{
					if (enemies[i].active)
 800211e:	7bfa      	ldrb	r2, [r7, #15]
 8002120:	49a1      	ldr	r1, [pc, #644]	; (80023a8 <update_scene+0x5e4>)
 8002122:	4613      	mov	r3, r2
 8002124:	00db      	lsls	r3, r3, #3
 8002126:	4413      	add	r3, r2
 8002128:	009b      	lsls	r3, r3, #2
 800212a:	440b      	add	r3, r1
 800212c:	781b      	ldrb	r3, [r3, #0]
 800212e:	2b00      	cmp	r3, #0
 8002130:	f000 823c 	beq.w	80025ac <update_scene+0x7e8>
					{

						enemies[i].next_update = enemies[i].update_delay;
 8002134:	7bf9      	ldrb	r1, [r7, #15]
 8002136:	7bfa      	ldrb	r2, [r7, #15]
 8002138:	489b      	ldr	r0, [pc, #620]	; (80023a8 <update_scene+0x5e4>)
 800213a:	460b      	mov	r3, r1
 800213c:	00db      	lsls	r3, r3, #3
 800213e:	440b      	add	r3, r1
 8002140:	009b      	lsls	r3, r3, #2
 8002142:	4403      	add	r3, r0
 8002144:	3318      	adds	r3, #24
 8002146:	6819      	ldr	r1, [r3, #0]
 8002148:	4897      	ldr	r0, [pc, #604]	; (80023a8 <update_scene+0x5e4>)
 800214a:	4613      	mov	r3, r2
 800214c:	00db      	lsls	r3, r3, #3
 800214e:	4413      	add	r3, r2
 8002150:	009b      	lsls	r3, r3, #2
 8002152:	4403      	add	r3, r0
 8002154:	3314      	adds	r3, #20
 8002156:	6019      	str	r1, [r3, #0]

						//Sprawdzanie kolizji przeciwników z graczem
						if (colliding(enemies[i].x,enemies[i].y, player.x, player.y) 	||
 8002158:	7bfa      	ldrb	r2, [r7, #15]
 800215a:	4993      	ldr	r1, [pc, #588]	; (80023a8 <update_scene+0x5e4>)
 800215c:	4613      	mov	r3, r2
 800215e:	00db      	lsls	r3, r3, #3
 8002160:	4413      	add	r3, r2
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	440b      	add	r3, r1
 8002166:	3304      	adds	r3, #4
 8002168:	6818      	ldr	r0, [r3, #0]
 800216a:	7bfa      	ldrb	r2, [r7, #15]
 800216c:	498e      	ldr	r1, [pc, #568]	; (80023a8 <update_scene+0x5e4>)
 800216e:	4613      	mov	r3, r2
 8002170:	00db      	lsls	r3, r3, #3
 8002172:	4413      	add	r3, r2
 8002174:	009b      	lsls	r3, r3, #2
 8002176:	440b      	add	r3, r1
 8002178:	3308      	adds	r3, #8
 800217a:	6819      	ldr	r1, [r3, #0]
 800217c:	4b8b      	ldr	r3, [pc, #556]	; (80023ac <update_scene+0x5e8>)
 800217e:	681a      	ldr	r2, [r3, #0]
 8002180:	4b8a      	ldr	r3, [pc, #552]	; (80023ac <update_scene+0x5e8>)
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	f7ff fdf6 	bl	8001d74 <colliding>
 8002188:	4603      	mov	r3, r0
 800218a:	2b00      	cmp	r3, #0
 800218c:	d154      	bne.n	8002238 <update_scene+0x474>
							colliding(enemies[i].x,enemies[i].y, player.x, player.y+5) 	||
 800218e:	7bfa      	ldrb	r2, [r7, #15]
 8002190:	4985      	ldr	r1, [pc, #532]	; (80023a8 <update_scene+0x5e4>)
 8002192:	4613      	mov	r3, r2
 8002194:	00db      	lsls	r3, r3, #3
 8002196:	4413      	add	r3, r2
 8002198:	009b      	lsls	r3, r3, #2
 800219a:	440b      	add	r3, r1
 800219c:	3304      	adds	r3, #4
 800219e:	6818      	ldr	r0, [r3, #0]
 80021a0:	7bfa      	ldrb	r2, [r7, #15]
 80021a2:	4981      	ldr	r1, [pc, #516]	; (80023a8 <update_scene+0x5e4>)
 80021a4:	4613      	mov	r3, r2
 80021a6:	00db      	lsls	r3, r3, #3
 80021a8:	4413      	add	r3, r2
 80021aa:	009b      	lsls	r3, r3, #2
 80021ac:	440b      	add	r3, r1
 80021ae:	3308      	adds	r3, #8
 80021b0:	6819      	ldr	r1, [r3, #0]
 80021b2:	4b7e      	ldr	r3, [pc, #504]	; (80023ac <update_scene+0x5e8>)
 80021b4:	681a      	ldr	r2, [r3, #0]
 80021b6:	4b7d      	ldr	r3, [pc, #500]	; (80023ac <update_scene+0x5e8>)
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	3305      	adds	r3, #5
 80021bc:	f7ff fdda 	bl	8001d74 <colliding>
 80021c0:	4603      	mov	r3, r0
						if (colliding(enemies[i].x,enemies[i].y, player.x, player.y) 	||
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d138      	bne.n	8002238 <update_scene+0x474>
							colliding(enemies[i].x,enemies[i].y, player.x+7, player.y)	||
 80021c6:	7bfa      	ldrb	r2, [r7, #15]
 80021c8:	4977      	ldr	r1, [pc, #476]	; (80023a8 <update_scene+0x5e4>)
 80021ca:	4613      	mov	r3, r2
 80021cc:	00db      	lsls	r3, r3, #3
 80021ce:	4413      	add	r3, r2
 80021d0:	009b      	lsls	r3, r3, #2
 80021d2:	440b      	add	r3, r1
 80021d4:	3304      	adds	r3, #4
 80021d6:	6818      	ldr	r0, [r3, #0]
 80021d8:	7bfa      	ldrb	r2, [r7, #15]
 80021da:	4973      	ldr	r1, [pc, #460]	; (80023a8 <update_scene+0x5e4>)
 80021dc:	4613      	mov	r3, r2
 80021de:	00db      	lsls	r3, r3, #3
 80021e0:	4413      	add	r3, r2
 80021e2:	009b      	lsls	r3, r3, #2
 80021e4:	440b      	add	r3, r1
 80021e6:	3308      	adds	r3, #8
 80021e8:	6819      	ldr	r1, [r3, #0]
 80021ea:	4b70      	ldr	r3, [pc, #448]	; (80023ac <update_scene+0x5e8>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	1dda      	adds	r2, r3, #7
 80021f0:	4b6e      	ldr	r3, [pc, #440]	; (80023ac <update_scene+0x5e8>)
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	f7ff fdbe 	bl	8001d74 <colliding>
 80021f8:	4603      	mov	r3, r0
							colliding(enemies[i].x,enemies[i].y, player.x, player.y+5) 	||
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d11c      	bne.n	8002238 <update_scene+0x474>
							colliding(enemies[i].x,enemies[i].y, player.x+7, player.y+5)
 80021fe:	7bfa      	ldrb	r2, [r7, #15]
 8002200:	4969      	ldr	r1, [pc, #420]	; (80023a8 <update_scene+0x5e4>)
 8002202:	4613      	mov	r3, r2
 8002204:	00db      	lsls	r3, r3, #3
 8002206:	4413      	add	r3, r2
 8002208:	009b      	lsls	r3, r3, #2
 800220a:	440b      	add	r3, r1
 800220c:	3304      	adds	r3, #4
 800220e:	6818      	ldr	r0, [r3, #0]
 8002210:	7bfa      	ldrb	r2, [r7, #15]
 8002212:	4965      	ldr	r1, [pc, #404]	; (80023a8 <update_scene+0x5e4>)
 8002214:	4613      	mov	r3, r2
 8002216:	00db      	lsls	r3, r3, #3
 8002218:	4413      	add	r3, r2
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	440b      	add	r3, r1
 800221e:	3308      	adds	r3, #8
 8002220:	6819      	ldr	r1, [r3, #0]
 8002222:	4b62      	ldr	r3, [pc, #392]	; (80023ac <update_scene+0x5e8>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	1dda      	adds	r2, r3, #7
 8002228:	4b60      	ldr	r3, [pc, #384]	; (80023ac <update_scene+0x5e8>)
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	3305      	adds	r3, #5
 800222e:	f7ff fda1 	bl	8001d74 <colliding>
 8002232:	4603      	mov	r3, r0
							colliding(enemies[i].x,enemies[i].y, player.x+7, player.y)	||
 8002234:	2b00      	cmp	r3, #0
 8002236:	d062      	beq.n	80022fe <update_scene+0x53a>
							)
						{
							player.lives -= 1;;
 8002238:	4b5c      	ldr	r3, [pc, #368]	; (80023ac <update_scene+0x5e8>)
 800223a:	691b      	ldr	r3, [r3, #16]
 800223c:	3b01      	subs	r3, #1
 800223e:	4a5b      	ldr	r2, [pc, #364]	; (80023ac <update_scene+0x5e8>)
 8002240:	6113      	str	r3, [r2, #16]
							enemies[i].active = false;
 8002242:	7bfa      	ldrb	r2, [r7, #15]
 8002244:	4958      	ldr	r1, [pc, #352]	; (80023a8 <update_scene+0x5e4>)
 8002246:	4613      	mov	r3, r2
 8002248:	00db      	lsls	r3, r3, #3
 800224a:	4413      	add	r3, r2
 800224c:	009b      	lsls	r3, r3, #2
 800224e:	440b      	add	r3, r1
 8002250:	2200      	movs	r2, #0
 8002252:	701a      	strb	r2, [r3, #0]
							enemies[i].tracked_by_missile = false;
 8002254:	7bfa      	ldrb	r2, [r7, #15]
 8002256:	4954      	ldr	r1, [pc, #336]	; (80023a8 <update_scene+0x5e4>)
 8002258:	4613      	mov	r3, r2
 800225a:	00db      	lsls	r3, r3, #3
 800225c:	4413      	add	r3, r2
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	440b      	add	r3, r1
 8002262:	331c      	adds	r3, #28
 8002264:	2200      	movs	r2, #0
 8002266:	701a      	strb	r2, [r3, #0]
							enemies[i].truck_number = 0;
 8002268:	7bfa      	ldrb	r2, [r7, #15]
 800226a:	494f      	ldr	r1, [pc, #316]	; (80023a8 <update_scene+0x5e4>)
 800226c:	4613      	mov	r3, r2
 800226e:	00db      	lsls	r3, r3, #3
 8002270:	4413      	add	r3, r2
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	440b      	add	r3, r1
 8002276:	3320      	adds	r3, #32
 8002278:	2200      	movs	r2, #0
 800227a:	601a      	str	r2, [r3, #0]
							GFX_DrowBitMap_P(enemies[i].x+2, enemies[i].y, explosion_map,10,10,1);
 800227c:	7bfa      	ldrb	r2, [r7, #15]
 800227e:	494a      	ldr	r1, [pc, #296]	; (80023a8 <update_scene+0x5e4>)
 8002280:	4613      	mov	r3, r2
 8002282:	00db      	lsls	r3, r3, #3
 8002284:	4413      	add	r3, r2
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	440b      	add	r3, r1
 800228a:	3304      	adds	r3, #4
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	1c98      	adds	r0, r3, #2
 8002290:	7bfa      	ldrb	r2, [r7, #15]
 8002292:	4945      	ldr	r1, [pc, #276]	; (80023a8 <update_scene+0x5e4>)
 8002294:	4613      	mov	r3, r2
 8002296:	00db      	lsls	r3, r3, #3
 8002298:	4413      	add	r3, r2
 800229a:	009b      	lsls	r3, r3, #2
 800229c:	440b      	add	r3, r1
 800229e:	3308      	adds	r3, #8
 80022a0:	6819      	ldr	r1, [r3, #0]
 80022a2:	2301      	movs	r3, #1
 80022a4:	9301      	str	r3, [sp, #4]
 80022a6:	230a      	movs	r3, #10
 80022a8:	9300      	str	r3, [sp, #0]
 80022aa:	230a      	movs	r3, #10
 80022ac:	4a40      	ldr	r2, [pc, #256]	; (80023b0 <update_scene+0x5ec>)
 80022ae:	f7fe fd77 	bl	8000da0 <GFX_DrowBitMap_P>
							GFX_DrowBitMap_P(player.x + 8, player.y-2, player_shield_map,10 ,16,1);
 80022b2:	4b3e      	ldr	r3, [pc, #248]	; (80023ac <update_scene+0x5e8>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f103 0008 	add.w	r0, r3, #8
 80022ba:	4b3c      	ldr	r3, [pc, #240]	; (80023ac <update_scene+0x5e8>)
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	1e99      	subs	r1, r3, #2
 80022c0:	2301      	movs	r3, #1
 80022c2:	9301      	str	r3, [sp, #4]
 80022c4:	2310      	movs	r3, #16
 80022c6:	9300      	str	r3, [sp, #0]
 80022c8:	230a      	movs	r3, #10
 80022ca:	4a3a      	ldr	r2, [pc, #232]	; (80023b4 <update_scene+0x5f0>)
 80022cc:	f7fe fd68 	bl	8000da0 <GFX_DrowBitMap_P>
							GFX_DrowBitMap_P(player.x, player.y, player_map, 11, 11, 1);
 80022d0:	4b36      	ldr	r3, [pc, #216]	; (80023ac <update_scene+0x5e8>)
 80022d2:	6818      	ldr	r0, [r3, #0]
 80022d4:	4b35      	ldr	r3, [pc, #212]	; (80023ac <update_scene+0x5e8>)
 80022d6:	6859      	ldr	r1, [r3, #4]
 80022d8:	2301      	movs	r3, #1
 80022da:	9301      	str	r3, [sp, #4]
 80022dc:	230b      	movs	r3, #11
 80022de:	9300      	str	r3, [sp, #0]
 80022e0:	230b      	movs	r3, #11
 80022e2:	4a35      	ldr	r2, [pc, #212]	; (80023b8 <update_scene+0x5f4>)
 80022e4:	f7fe fd5c 	bl	8000da0 <GFX_DrowBitMap_P>

							ssd1327_display();
 80022e8:	f001 fb32 	bl	8003950 <ssd1327_display>
							if (player.lives <= 0)
 80022ec:	4b2f      	ldr	r3, [pc, #188]	; (80023ac <update_scene+0x5e8>)
 80022ee:	691b      	ldr	r3, [r3, #16]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	dc04      	bgt.n	80022fe <update_scene+0x53a>
							{
								play_dead_anim();
 80022f4:	f7ff fb9e 	bl	8001a34 <play_dead_anim>
								state = st_dead;
 80022f8:	4b30      	ldr	r3, [pc, #192]	; (80023bc <update_scene+0x5f8>)
 80022fa:	2202      	movs	r2, #2
 80022fc:	701a      	strb	r2, [r3, #0]
							}
						}

						// Przesunięcie w lewo i wykonanie specjalnych ruchów
						enemies[i].x -= 1;
 80022fe:	7bfa      	ldrb	r2, [r7, #15]
 8002300:	4929      	ldr	r1, [pc, #164]	; (80023a8 <update_scene+0x5e4>)
 8002302:	4613      	mov	r3, r2
 8002304:	00db      	lsls	r3, r3, #3
 8002306:	4413      	add	r3, r2
 8002308:	009b      	lsls	r3, r3, #2
 800230a:	440b      	add	r3, r1
 800230c:	3304      	adds	r3, #4
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	7bfa      	ldrb	r2, [r7, #15]
 8002312:	1e59      	subs	r1, r3, #1
 8002314:	4824      	ldr	r0, [pc, #144]	; (80023a8 <update_scene+0x5e4>)
 8002316:	4613      	mov	r3, r2
 8002318:	00db      	lsls	r3, r3, #3
 800231a:	4413      	add	r3, r2
 800231c:	009b      	lsls	r3, r3, #2
 800231e:	4403      	add	r3, r0
 8002320:	3304      	adds	r3, #4
 8002322:	6019      	str	r1, [r3, #0]

						switch (enemies[i].type)
 8002324:	7bfa      	ldrb	r2, [r7, #15]
 8002326:	4920      	ldr	r1, [pc, #128]	; (80023a8 <update_scene+0x5e4>)
 8002328:	4613      	mov	r3, r2
 800232a:	00db      	lsls	r3, r3, #3
 800232c:	4413      	add	r3, r2
 800232e:	009b      	lsls	r3, r3, #2
 8002330:	440b      	add	r3, r1
 8002332:	330c      	adds	r3, #12
 8002334:	781b      	ldrb	r3, [r3, #0]
 8002336:	2b02      	cmp	r3, #2
 8002338:	d064      	beq.n	8002404 <update_scene+0x640>
 800233a:	2b02      	cmp	r3, #2
 800233c:	f300 810d 	bgt.w	800255a <update_scene+0x796>
 8002340:	2b00      	cmp	r3, #0
 8002342:	f000 8105 	beq.w	8002550 <update_scene+0x78c>
 8002346:	2b01      	cmp	r3, #1
 8002348:	f040 8107 	bne.w	800255a <update_scene+0x796>
						{
						case et_tracker:
							if (enemies[i].x < 70)
 800234c:	7bfa      	ldrb	r2, [r7, #15]
 800234e:	4916      	ldr	r1, [pc, #88]	; (80023a8 <update_scene+0x5e4>)
 8002350:	4613      	mov	r3, r2
 8002352:	00db      	lsls	r3, r3, #3
 8002354:	4413      	add	r3, r2
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	440b      	add	r3, r1
 800235a:	3304      	adds	r3, #4
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	2b45      	cmp	r3, #69	; 0x45
 8002360:	f300 80f8 	bgt.w	8002554 <update_scene+0x790>
							{
								if (player.y > enemies[i].y) enemies[i].y += 1;
 8002364:	4b11      	ldr	r3, [pc, #68]	; (80023ac <update_scene+0x5e8>)
 8002366:	6859      	ldr	r1, [r3, #4]
 8002368:	7bfa      	ldrb	r2, [r7, #15]
 800236a:	480f      	ldr	r0, [pc, #60]	; (80023a8 <update_scene+0x5e4>)
 800236c:	4613      	mov	r3, r2
 800236e:	00db      	lsls	r3, r3, #3
 8002370:	4413      	add	r3, r2
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	4403      	add	r3, r0
 8002376:	3308      	adds	r3, #8
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4299      	cmp	r1, r3
 800237c:	dd20      	ble.n	80023c0 <update_scene+0x5fc>
 800237e:	7bfa      	ldrb	r2, [r7, #15]
 8002380:	4909      	ldr	r1, [pc, #36]	; (80023a8 <update_scene+0x5e4>)
 8002382:	4613      	mov	r3, r2
 8002384:	00db      	lsls	r3, r3, #3
 8002386:	4413      	add	r3, r2
 8002388:	009b      	lsls	r3, r3, #2
 800238a:	440b      	add	r3, r1
 800238c:	3308      	adds	r3, #8
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	7bfa      	ldrb	r2, [r7, #15]
 8002392:	1c59      	adds	r1, r3, #1
 8002394:	4804      	ldr	r0, [pc, #16]	; (80023a8 <update_scene+0x5e4>)
 8002396:	4613      	mov	r3, r2
 8002398:	00db      	lsls	r3, r3, #3
 800239a:	4413      	add	r3, r2
 800239c:	009b      	lsls	r3, r3, #2
 800239e:	4403      	add	r3, r0
 80023a0:	3308      	adds	r3, #8
 80023a2:	6019      	str	r1, [r3, #0]
 80023a4:	e00c      	b.n	80023c0 <update_scene+0x5fc>
 80023a6:	bf00      	nop
 80023a8:	200004a8 	.word	0x200004a8
 80023ac:	20000168 	.word	0x20000168
 80023b0:	080096a0 	.word	0x080096a0
 80023b4:	08009668 	.word	0x08009668
 80023b8:	080094a0 	.word	0x080094a0
 80023bc:	20001658 	.word	0x20001658
								if (player.y < enemies[i].y) enemies[i].y -= 1;
 80023c0:	4bad      	ldr	r3, [pc, #692]	; (8002678 <update_scene+0x8b4>)
 80023c2:	6859      	ldr	r1, [r3, #4]
 80023c4:	7bfa      	ldrb	r2, [r7, #15]
 80023c6:	48ad      	ldr	r0, [pc, #692]	; (800267c <update_scene+0x8b8>)
 80023c8:	4613      	mov	r3, r2
 80023ca:	00db      	lsls	r3, r3, #3
 80023cc:	4413      	add	r3, r2
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	4403      	add	r3, r0
 80023d2:	3308      	adds	r3, #8
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4299      	cmp	r1, r3
 80023d8:	f280 80bc 	bge.w	8002554 <update_scene+0x790>
 80023dc:	7bfa      	ldrb	r2, [r7, #15]
 80023de:	49a7      	ldr	r1, [pc, #668]	; (800267c <update_scene+0x8b8>)
 80023e0:	4613      	mov	r3, r2
 80023e2:	00db      	lsls	r3, r3, #3
 80023e4:	4413      	add	r3, r2
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	440b      	add	r3, r1
 80023ea:	3308      	adds	r3, #8
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	7bfa      	ldrb	r2, [r7, #15]
 80023f0:	1e59      	subs	r1, r3, #1
 80023f2:	48a2      	ldr	r0, [pc, #648]	; (800267c <update_scene+0x8b8>)
 80023f4:	4613      	mov	r3, r2
 80023f6:	00db      	lsls	r3, r3, #3
 80023f8:	4413      	add	r3, r2
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	4403      	add	r3, r0
 80023fe:	3308      	adds	r3, #8
 8002400:	6019      	str	r1, [r3, #0]
							}
							break;
 8002402:	e0a7      	b.n	8002554 <update_scene+0x790>
						case et_diver:
							break;
						case et_bobber:
							if((enemies[i].x%4 == 0) && (enemies[i].x%8 == 0))
 8002404:	7bfa      	ldrb	r2, [r7, #15]
 8002406:	499d      	ldr	r1, [pc, #628]	; (800267c <update_scene+0x8b8>)
 8002408:	4613      	mov	r3, r2
 800240a:	00db      	lsls	r3, r3, #3
 800240c:	4413      	add	r3, r2
 800240e:	009b      	lsls	r3, r3, #2
 8002410:	440b      	add	r3, r1
 8002412:	3304      	adds	r3, #4
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 0303 	and.w	r3, r3, #3
 800241a:	2b00      	cmp	r3, #0
 800241c:	d11f      	bne.n	800245e <update_scene+0x69a>
 800241e:	7bfa      	ldrb	r2, [r7, #15]
 8002420:	4996      	ldr	r1, [pc, #600]	; (800267c <update_scene+0x8b8>)
 8002422:	4613      	mov	r3, r2
 8002424:	00db      	lsls	r3, r3, #3
 8002426:	4413      	add	r3, r2
 8002428:	009b      	lsls	r3, r3, #2
 800242a:	440b      	add	r3, r1
 800242c:	3304      	adds	r3, #4
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f003 0307 	and.w	r3, r3, #7
 8002434:	2b00      	cmp	r3, #0
 8002436:	d112      	bne.n	800245e <update_scene+0x69a>
								enemies[i].y += 4;
 8002438:	7bfa      	ldrb	r2, [r7, #15]
 800243a:	4990      	ldr	r1, [pc, #576]	; (800267c <update_scene+0x8b8>)
 800243c:	4613      	mov	r3, r2
 800243e:	00db      	lsls	r3, r3, #3
 8002440:	4413      	add	r3, r2
 8002442:	009b      	lsls	r3, r3, #2
 8002444:	440b      	add	r3, r1
 8002446:	3308      	adds	r3, #8
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	7bfa      	ldrb	r2, [r7, #15]
 800244c:	1d19      	adds	r1, r3, #4
 800244e:	488b      	ldr	r0, [pc, #556]	; (800267c <update_scene+0x8b8>)
 8002450:	4613      	mov	r3, r2
 8002452:	00db      	lsls	r3, r3, #3
 8002454:	4413      	add	r3, r2
 8002456:	009b      	lsls	r3, r3, #2
 8002458:	4403      	add	r3, r0
 800245a:	3308      	adds	r3, #8
 800245c:	6019      	str	r1, [r3, #0]
							if((enemies[i].x%4 == 0) && !(enemies[i].x%8 == 0))
 800245e:	7bfa      	ldrb	r2, [r7, #15]
 8002460:	4986      	ldr	r1, [pc, #536]	; (800267c <update_scene+0x8b8>)
 8002462:	4613      	mov	r3, r2
 8002464:	00db      	lsls	r3, r3, #3
 8002466:	4413      	add	r3, r2
 8002468:	009b      	lsls	r3, r3, #2
 800246a:	440b      	add	r3, r1
 800246c:	3304      	adds	r3, #4
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f003 0303 	and.w	r3, r3, #3
 8002474:	2b00      	cmp	r3, #0
 8002476:	d11f      	bne.n	80024b8 <update_scene+0x6f4>
 8002478:	7bfa      	ldrb	r2, [r7, #15]
 800247a:	4980      	ldr	r1, [pc, #512]	; (800267c <update_scene+0x8b8>)
 800247c:	4613      	mov	r3, r2
 800247e:	00db      	lsls	r3, r3, #3
 8002480:	4413      	add	r3, r2
 8002482:	009b      	lsls	r3, r3, #2
 8002484:	440b      	add	r3, r1
 8002486:	3304      	adds	r3, #4
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f003 0307 	and.w	r3, r3, #7
 800248e:	2b00      	cmp	r3, #0
 8002490:	d012      	beq.n	80024b8 <update_scene+0x6f4>
								enemies[i].y -= 4;
 8002492:	7bfa      	ldrb	r2, [r7, #15]
 8002494:	4979      	ldr	r1, [pc, #484]	; (800267c <update_scene+0x8b8>)
 8002496:	4613      	mov	r3, r2
 8002498:	00db      	lsls	r3, r3, #3
 800249a:	4413      	add	r3, r2
 800249c:	009b      	lsls	r3, r3, #2
 800249e:	440b      	add	r3, r1
 80024a0:	3308      	adds	r3, #8
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	7bfa      	ldrb	r2, [r7, #15]
 80024a6:	1f19      	subs	r1, r3, #4
 80024a8:	4874      	ldr	r0, [pc, #464]	; (800267c <update_scene+0x8b8>)
 80024aa:	4613      	mov	r3, r2
 80024ac:	00db      	lsls	r3, r3, #3
 80024ae:	4413      	add	r3, r2
 80024b0:	009b      	lsls	r3, r3, #2
 80024b2:	4403      	add	r3, r0
 80024b4:	3308      	adds	r3, #8
 80024b6:	6019      	str	r1, [r3, #0]
							if (enemies[i].x < 70)
 80024b8:	7bfa      	ldrb	r2, [r7, #15]
 80024ba:	4970      	ldr	r1, [pc, #448]	; (800267c <update_scene+0x8b8>)
 80024bc:	4613      	mov	r3, r2
 80024be:	00db      	lsls	r3, r3, #3
 80024c0:	4413      	add	r3, r2
 80024c2:	009b      	lsls	r3, r3, #2
 80024c4:	440b      	add	r3, r1
 80024c6:	3304      	adds	r3, #4
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	2b45      	cmp	r3, #69	; 0x45
 80024cc:	dc44      	bgt.n	8002558 <update_scene+0x794>
							{
								if (player.y > enemies[i].y) enemies[i].y += 1;
 80024ce:	4b6a      	ldr	r3, [pc, #424]	; (8002678 <update_scene+0x8b4>)
 80024d0:	6859      	ldr	r1, [r3, #4]
 80024d2:	7bfa      	ldrb	r2, [r7, #15]
 80024d4:	4869      	ldr	r0, [pc, #420]	; (800267c <update_scene+0x8b8>)
 80024d6:	4613      	mov	r3, r2
 80024d8:	00db      	lsls	r3, r3, #3
 80024da:	4413      	add	r3, r2
 80024dc:	009b      	lsls	r3, r3, #2
 80024de:	4403      	add	r3, r0
 80024e0:	3308      	adds	r3, #8
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4299      	cmp	r1, r3
 80024e6:	dd12      	ble.n	800250e <update_scene+0x74a>
 80024e8:	7bfa      	ldrb	r2, [r7, #15]
 80024ea:	4964      	ldr	r1, [pc, #400]	; (800267c <update_scene+0x8b8>)
 80024ec:	4613      	mov	r3, r2
 80024ee:	00db      	lsls	r3, r3, #3
 80024f0:	4413      	add	r3, r2
 80024f2:	009b      	lsls	r3, r3, #2
 80024f4:	440b      	add	r3, r1
 80024f6:	3308      	adds	r3, #8
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	7bfa      	ldrb	r2, [r7, #15]
 80024fc:	1c59      	adds	r1, r3, #1
 80024fe:	485f      	ldr	r0, [pc, #380]	; (800267c <update_scene+0x8b8>)
 8002500:	4613      	mov	r3, r2
 8002502:	00db      	lsls	r3, r3, #3
 8002504:	4413      	add	r3, r2
 8002506:	009b      	lsls	r3, r3, #2
 8002508:	4403      	add	r3, r0
 800250a:	3308      	adds	r3, #8
 800250c:	6019      	str	r1, [r3, #0]
								if (player.y < enemies[i].y) enemies[i].y -= 1;
 800250e:	4b5a      	ldr	r3, [pc, #360]	; (8002678 <update_scene+0x8b4>)
 8002510:	6859      	ldr	r1, [r3, #4]
 8002512:	7bfa      	ldrb	r2, [r7, #15]
 8002514:	4859      	ldr	r0, [pc, #356]	; (800267c <update_scene+0x8b8>)
 8002516:	4613      	mov	r3, r2
 8002518:	00db      	lsls	r3, r3, #3
 800251a:	4413      	add	r3, r2
 800251c:	009b      	lsls	r3, r3, #2
 800251e:	4403      	add	r3, r0
 8002520:	3308      	adds	r3, #8
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4299      	cmp	r1, r3
 8002526:	da17      	bge.n	8002558 <update_scene+0x794>
 8002528:	7bfa      	ldrb	r2, [r7, #15]
 800252a:	4954      	ldr	r1, [pc, #336]	; (800267c <update_scene+0x8b8>)
 800252c:	4613      	mov	r3, r2
 800252e:	00db      	lsls	r3, r3, #3
 8002530:	4413      	add	r3, r2
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	440b      	add	r3, r1
 8002536:	3308      	adds	r3, #8
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	7bfa      	ldrb	r2, [r7, #15]
 800253c:	1e59      	subs	r1, r3, #1
 800253e:	484f      	ldr	r0, [pc, #316]	; (800267c <update_scene+0x8b8>)
 8002540:	4613      	mov	r3, r2
 8002542:	00db      	lsls	r3, r3, #3
 8002544:	4413      	add	r3, r2
 8002546:	009b      	lsls	r3, r3, #2
 8002548:	4403      	add	r3, r0
 800254a:	3308      	adds	r3, #8
 800254c:	6019      	str	r1, [r3, #0]
							}
							break;
 800254e:	e003      	b.n	8002558 <update_scene+0x794>
							break;
 8002550:	bf00      	nop
 8002552:	e002      	b.n	800255a <update_scene+0x796>
							break;
 8002554:	bf00      	nop
 8002556:	e000      	b.n	800255a <update_scene+0x796>
							break;
 8002558:	bf00      	nop
						}

						// Jeśli poza ekranem, dezaktywacja
						if (enemies[i].x < -4)
 800255a:	7bfa      	ldrb	r2, [r7, #15]
 800255c:	4947      	ldr	r1, [pc, #284]	; (800267c <update_scene+0x8b8>)
 800255e:	4613      	mov	r3, r2
 8002560:	00db      	lsls	r3, r3, #3
 8002562:	4413      	add	r3, r2
 8002564:	009b      	lsls	r3, r3, #2
 8002566:	440b      	add	r3, r1
 8002568:	3304      	adds	r3, #4
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f113 0f04 	cmn.w	r3, #4
 8002570:	da1c      	bge.n	80025ac <update_scene+0x7e8>
						{
							enemies[i].active = false;
 8002572:	7bfa      	ldrb	r2, [r7, #15]
 8002574:	4941      	ldr	r1, [pc, #260]	; (800267c <update_scene+0x8b8>)
 8002576:	4613      	mov	r3, r2
 8002578:	00db      	lsls	r3, r3, #3
 800257a:	4413      	add	r3, r2
 800257c:	009b      	lsls	r3, r3, #2
 800257e:	440b      	add	r3, r1
 8002580:	2200      	movs	r2, #0
 8002582:	701a      	strb	r2, [r3, #0]
							enemies[i].tracked_by_missile = false;
 8002584:	7bfa      	ldrb	r2, [r7, #15]
 8002586:	493d      	ldr	r1, [pc, #244]	; (800267c <update_scene+0x8b8>)
 8002588:	4613      	mov	r3, r2
 800258a:	00db      	lsls	r3, r3, #3
 800258c:	4413      	add	r3, r2
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	440b      	add	r3, r1
 8002592:	331c      	adds	r3, #28
 8002594:	2200      	movs	r2, #0
 8002596:	701a      	strb	r2, [r3, #0]
							enemies[i].truck_number = 0;
 8002598:	7bfa      	ldrb	r2, [r7, #15]
 800259a:	4938      	ldr	r1, [pc, #224]	; (800267c <update_scene+0x8b8>)
 800259c:	4613      	mov	r3, r2
 800259e:	00db      	lsls	r3, r3, #3
 80025a0:	4413      	add	r3, r2
 80025a2:	009b      	lsls	r3, r3, #2
 80025a4:	440b      	add	r3, r1
 80025a6:	3320      	adds	r3, #32
 80025a8:	2200      	movs	r2, #0
 80025aa:	601a      	str	r2, [r3, #0]
	for (i = 0; i < num_enemies; ++i)
 80025ac:	7bfb      	ldrb	r3, [r7, #15]
 80025ae:	3301      	adds	r3, #1
 80025b0:	73fb      	strb	r3, [r7, #15]
 80025b2:	7bfb      	ldrb	r3, [r7, #15]
 80025b4:	2b09      	cmp	r3, #9
 80025b6:	f67f ad88 	bls.w	80020ca <update_scene+0x306>
				}
		}
	}

	//------------- Obsługa Bossa ---------------
	if(boss.active)
 80025ba:	4b31      	ldr	r3, [pc, #196]	; (8002680 <update_scene+0x8bc>)
 80025bc:	781b      	ldrb	r3, [r3, #0]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	f000 821c 	beq.w	80029fc <update_scene+0xc38>
	{
		boss.next_update -= 1;
 80025c4:	4b2e      	ldr	r3, [pc, #184]	; (8002680 <update_scene+0x8bc>)
 80025c6:	68db      	ldr	r3, [r3, #12]
 80025c8:	3b01      	subs	r3, #1
 80025ca:	4a2d      	ldr	r2, [pc, #180]	; (8002680 <update_scene+0x8bc>)
 80025cc:	60d3      	str	r3, [r2, #12]

		//Pozycja bosa
		if(boss.next_update <= 0)
 80025ce:	4b2c      	ldr	r3, [pc, #176]	; (8002680 <update_scene+0x8bc>)
 80025d0:	68db      	ldr	r3, [r3, #12]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	dc38      	bgt.n	8002648 <update_scene+0x884>
		{
			boss.next_update = boss.update_delay;
 80025d6:	4b2a      	ldr	r3, [pc, #168]	; (8002680 <update_scene+0x8bc>)
 80025d8:	691b      	ldr	r3, [r3, #16]
 80025da:	4a29      	ldr	r2, [pc, #164]	; (8002680 <update_scene+0x8bc>)
 80025dc:	60d3      	str	r3, [r2, #12]

			y += dy;
 80025de:	4b29      	ldr	r3, [pc, #164]	; (8002684 <update_scene+0x8c0>)
 80025e0:	781a      	ldrb	r2, [r3, #0]
 80025e2:	4b29      	ldr	r3, [pc, #164]	; (8002688 <update_scene+0x8c4>)
 80025e4:	781b      	ldrb	r3, [r3, #0]
 80025e6:	4413      	add	r3, r2
 80025e8:	b2da      	uxtb	r2, r3
 80025ea:	4b26      	ldr	r3, [pc, #152]	; (8002684 <update_scene+0x8c0>)
 80025ec:	701a      	strb	r2, [r3, #0]
			if (y < 1 || y > (screen_height - 24)) dy = -dy;
 80025ee:	4b25      	ldr	r3, [pc, #148]	; (8002684 <update_scene+0x8c0>)
 80025f0:	781b      	ldrb	r3, [r3, #0]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d003      	beq.n	80025fe <update_scene+0x83a>
 80025f6:	4b23      	ldr	r3, [pc, #140]	; (8002684 <update_scene+0x8c0>)
 80025f8:	781b      	ldrb	r3, [r3, #0]
 80025fa:	2b68      	cmp	r3, #104	; 0x68
 80025fc:	d905      	bls.n	800260a <update_scene+0x846>
 80025fe:	4b22      	ldr	r3, [pc, #136]	; (8002688 <update_scene+0x8c4>)
 8002600:	781b      	ldrb	r3, [r3, #0]
 8002602:	425b      	negs	r3, r3
 8002604:	b2da      	uxtb	r2, r3
 8002606:	4b20      	ldr	r3, [pc, #128]	; (8002688 <update_scene+0x8c4>)
 8002608:	701a      	strb	r2, [r3, #0]

			boss.y = y;
 800260a:	4b1e      	ldr	r3, [pc, #120]	; (8002684 <update_scene+0x8c0>)
 800260c:	781b      	ldrb	r3, [r3, #0]
 800260e:	461a      	mov	r2, r3
 8002610:	4b1b      	ldr	r3, [pc, #108]	; (8002680 <update_scene+0x8bc>)
 8002612:	609a      	str	r2, [r3, #8]

			if(boss.y < 10) boss.y = 10;
 8002614:	4b1a      	ldr	r3, [pc, #104]	; (8002680 <update_scene+0x8bc>)
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	2b09      	cmp	r3, #9
 800261a:	dc02      	bgt.n	8002622 <update_scene+0x85e>
 800261c:	4b18      	ldr	r3, [pc, #96]	; (8002680 <update_scene+0x8bc>)
 800261e:	220a      	movs	r2, #10
 8002620:	609a      	str	r2, [r3, #8]
			if(boss.y > (screen_height - 24)) boss.y = (screen_height - 24);
 8002622:	4b17      	ldr	r3, [pc, #92]	; (8002680 <update_scene+0x8bc>)
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	2b68      	cmp	r3, #104	; 0x68
 8002628:	dd02      	ble.n	8002630 <update_scene+0x86c>
 800262a:	4b15      	ldr	r3, [pc, #84]	; (8002680 <update_scene+0x8bc>)
 800262c:	2268      	movs	r2, #104	; 0x68
 800262e:	609a      	str	r2, [r3, #8]

			boss.x -= 1;
 8002630:	4b13      	ldr	r3, [pc, #76]	; (8002680 <update_scene+0x8bc>)
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	3b01      	subs	r3, #1
 8002636:	4a12      	ldr	r2, [pc, #72]	; (8002680 <update_scene+0x8bc>)
 8002638:	6053      	str	r3, [r2, #4]
			if(boss.x < 100) boss.x = 100;
 800263a:	4b11      	ldr	r3, [pc, #68]	; (8002680 <update_scene+0x8bc>)
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	2b63      	cmp	r3, #99	; 0x63
 8002640:	dc02      	bgt.n	8002648 <update_scene+0x884>
 8002642:	4b0f      	ldr	r3, [pc, #60]	; (8002680 <update_scene+0x8bc>)
 8002644:	2264      	movs	r2, #100	; 0x64
 8002646:	605a      	str	r2, [r3, #4]
		}

		//Częstotliwość strzałów bosa
		if((rand()%100) < (boss.level * 2 ))
 8002648:	f004 fd1c 	bl	8007084 <rand>
 800264c:	4602      	mov	r2, r0
 800264e:	4b0f      	ldr	r3, [pc, #60]	; (800268c <update_scene+0x8c8>)
 8002650:	fb83 1302 	smull	r1, r3, r3, r2
 8002654:	1159      	asrs	r1, r3, #5
 8002656:	17d3      	asrs	r3, r2, #31
 8002658:	1acb      	subs	r3, r1, r3
 800265a:	2164      	movs	r1, #100	; 0x64
 800265c:	fb01 f303 	mul.w	r3, r1, r3
 8002660:	1ad3      	subs	r3, r2, r3
 8002662:	4a07      	ldr	r2, [pc, #28]	; (8002680 <update_scene+0x8bc>)
 8002664:	6992      	ldr	r2, [r2, #24]
 8002666:	0052      	lsls	r2, r2, #1
 8002668:	4293      	cmp	r3, r2
 800266a:	da01      	bge.n	8002670 <update_scene+0x8ac>
			boss_shoot();
 800266c:	f7ff fb3e 	bl	8001cec <boss_shoot>

		for (i = 0; i < num_boss_shots; ++i)
 8002670:	2300      	movs	r3, #0
 8002672:	73fb      	strb	r3, [r7, #15]
 8002674:	e040      	b.n	80026f8 <update_scene+0x934>
 8002676:	bf00      	nop
 8002678:	20000168 	.word	0x20000168
 800267c:	200004a8 	.word	0x200004a8
 8002680:	200015b0 	.word	0x200015b0
 8002684:	20001668 	.word	0x20001668
 8002688:	20000004 	.word	0x20000004
 800268c:	51eb851f 	.word	0x51eb851f
		{
			if (boss_shots[i].active)
 8002690:	7bfa      	ldrb	r2, [r7, #15]
 8002692:	4986      	ldr	r1, [pc, #536]	; (80028ac <update_scene+0xae8>)
 8002694:	4613      	mov	r3, r2
 8002696:	009b      	lsls	r3, r3, #2
 8002698:	4413      	add	r3, r2
 800269a:	009b      	lsls	r3, r3, #2
 800269c:	440b      	add	r3, r1
 800269e:	781b      	ldrb	r3, [r3, #0]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d011      	beq.n	80026c8 <update_scene+0x904>
				--boss_shots[i].x;
 80026a4:	7bfa      	ldrb	r2, [r7, #15]
 80026a6:	4981      	ldr	r1, [pc, #516]	; (80028ac <update_scene+0xae8>)
 80026a8:	4613      	mov	r3, r2
 80026aa:	009b      	lsls	r3, r3, #2
 80026ac:	4413      	add	r3, r2
 80026ae:	009b      	lsls	r3, r3, #2
 80026b0:	440b      	add	r3, r1
 80026b2:	3304      	adds	r3, #4
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	1e59      	subs	r1, r3, #1
 80026b8:	487c      	ldr	r0, [pc, #496]	; (80028ac <update_scene+0xae8>)
 80026ba:	4613      	mov	r3, r2
 80026bc:	009b      	lsls	r3, r3, #2
 80026be:	4413      	add	r3, r2
 80026c0:	009b      	lsls	r3, r3, #2
 80026c2:	4403      	add	r3, r0
 80026c4:	3304      	adds	r3, #4
 80026c6:	6019      	str	r1, [r3, #0]
			if (boss_shots[i].x < -4)
 80026c8:	7bfa      	ldrb	r2, [r7, #15]
 80026ca:	4978      	ldr	r1, [pc, #480]	; (80028ac <update_scene+0xae8>)
 80026cc:	4613      	mov	r3, r2
 80026ce:	009b      	lsls	r3, r3, #2
 80026d0:	4413      	add	r3, r2
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	440b      	add	r3, r1
 80026d6:	3304      	adds	r3, #4
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f113 0f04 	cmn.w	r3, #4
 80026de:	da08      	bge.n	80026f2 <update_scene+0x92e>
				boss_shots[i].active = false;
 80026e0:	7bfa      	ldrb	r2, [r7, #15]
 80026e2:	4972      	ldr	r1, [pc, #456]	; (80028ac <update_scene+0xae8>)
 80026e4:	4613      	mov	r3, r2
 80026e6:	009b      	lsls	r3, r3, #2
 80026e8:	4413      	add	r3, r2
 80026ea:	009b      	lsls	r3, r3, #2
 80026ec:	440b      	add	r3, r1
 80026ee:	2200      	movs	r2, #0
 80026f0:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < num_boss_shots; ++i)
 80026f2:	7bfb      	ldrb	r3, [r7, #15]
 80026f4:	3301      	adds	r3, #1
 80026f6:	73fb      	strb	r3, [r7, #15]
 80026f8:	7bfb      	ldrb	r3, [r7, #15]
 80026fa:	2b04      	cmp	r3, #4
 80026fc:	d9c8      	bls.n	8002690 <update_scene+0x8cc>
		}

		for(i = 0; i < num_boss_shots; i++)
 80026fe:	2300      	movs	r3, #0
 8002700:	73fb      	strb	r3, [r7, #15]
 8002702:	e0cc      	b.n	800289e <update_scene+0xada>
		{
			if(boss_shots[i].active)
 8002704:	7bfa      	ldrb	r2, [r7, #15]
 8002706:	4969      	ldr	r1, [pc, #420]	; (80028ac <update_scene+0xae8>)
 8002708:	4613      	mov	r3, r2
 800270a:	009b      	lsls	r3, r3, #2
 800270c:	4413      	add	r3, r2
 800270e:	009b      	lsls	r3, r3, #2
 8002710:	440b      	add	r3, r1
 8002712:	781b      	ldrb	r3, [r3, #0]
 8002714:	2b00      	cmp	r3, #0
 8002716:	f000 80bf 	beq.w	8002898 <update_scene+0xad4>
			{
				if (colliding(boss_shots[i].x,boss_shots[i].y, player.x, player.y) 	||
 800271a:	7bfa      	ldrb	r2, [r7, #15]
 800271c:	4963      	ldr	r1, [pc, #396]	; (80028ac <update_scene+0xae8>)
 800271e:	4613      	mov	r3, r2
 8002720:	009b      	lsls	r3, r3, #2
 8002722:	4413      	add	r3, r2
 8002724:	009b      	lsls	r3, r3, #2
 8002726:	440b      	add	r3, r1
 8002728:	3304      	adds	r3, #4
 800272a:	6818      	ldr	r0, [r3, #0]
 800272c:	7bfa      	ldrb	r2, [r7, #15]
 800272e:	495f      	ldr	r1, [pc, #380]	; (80028ac <update_scene+0xae8>)
 8002730:	4613      	mov	r3, r2
 8002732:	009b      	lsls	r3, r3, #2
 8002734:	4413      	add	r3, r2
 8002736:	009b      	lsls	r3, r3, #2
 8002738:	440b      	add	r3, r1
 800273a:	3308      	adds	r3, #8
 800273c:	6819      	ldr	r1, [r3, #0]
 800273e:	4b5c      	ldr	r3, [pc, #368]	; (80028b0 <update_scene+0xaec>)
 8002740:	681a      	ldr	r2, [r3, #0]
 8002742:	4b5b      	ldr	r3, [pc, #364]	; (80028b0 <update_scene+0xaec>)
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	f7ff fb15 	bl	8001d74 <colliding>
 800274a:	4603      	mov	r3, r0
 800274c:	2b00      	cmp	r3, #0
 800274e:	d154      	bne.n	80027fa <update_scene+0xa36>
					colliding(boss_shots[i].x,boss_shots[i].y, player.x, player.y+5) 	||
 8002750:	7bfa      	ldrb	r2, [r7, #15]
 8002752:	4956      	ldr	r1, [pc, #344]	; (80028ac <update_scene+0xae8>)
 8002754:	4613      	mov	r3, r2
 8002756:	009b      	lsls	r3, r3, #2
 8002758:	4413      	add	r3, r2
 800275a:	009b      	lsls	r3, r3, #2
 800275c:	440b      	add	r3, r1
 800275e:	3304      	adds	r3, #4
 8002760:	6818      	ldr	r0, [r3, #0]
 8002762:	7bfa      	ldrb	r2, [r7, #15]
 8002764:	4951      	ldr	r1, [pc, #324]	; (80028ac <update_scene+0xae8>)
 8002766:	4613      	mov	r3, r2
 8002768:	009b      	lsls	r3, r3, #2
 800276a:	4413      	add	r3, r2
 800276c:	009b      	lsls	r3, r3, #2
 800276e:	440b      	add	r3, r1
 8002770:	3308      	adds	r3, #8
 8002772:	6819      	ldr	r1, [r3, #0]
 8002774:	4b4e      	ldr	r3, [pc, #312]	; (80028b0 <update_scene+0xaec>)
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	4b4d      	ldr	r3, [pc, #308]	; (80028b0 <update_scene+0xaec>)
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	3305      	adds	r3, #5
 800277e:	f7ff faf9 	bl	8001d74 <colliding>
 8002782:	4603      	mov	r3, r0
				if (colliding(boss_shots[i].x,boss_shots[i].y, player.x, player.y) 	||
 8002784:	2b00      	cmp	r3, #0
 8002786:	d138      	bne.n	80027fa <update_scene+0xa36>
					colliding(boss_shots[i].x,boss_shots[i].y, player.x+7, player.y)	||
 8002788:	7bfa      	ldrb	r2, [r7, #15]
 800278a:	4948      	ldr	r1, [pc, #288]	; (80028ac <update_scene+0xae8>)
 800278c:	4613      	mov	r3, r2
 800278e:	009b      	lsls	r3, r3, #2
 8002790:	4413      	add	r3, r2
 8002792:	009b      	lsls	r3, r3, #2
 8002794:	440b      	add	r3, r1
 8002796:	3304      	adds	r3, #4
 8002798:	6818      	ldr	r0, [r3, #0]
 800279a:	7bfa      	ldrb	r2, [r7, #15]
 800279c:	4943      	ldr	r1, [pc, #268]	; (80028ac <update_scene+0xae8>)
 800279e:	4613      	mov	r3, r2
 80027a0:	009b      	lsls	r3, r3, #2
 80027a2:	4413      	add	r3, r2
 80027a4:	009b      	lsls	r3, r3, #2
 80027a6:	440b      	add	r3, r1
 80027a8:	3308      	adds	r3, #8
 80027aa:	6819      	ldr	r1, [r3, #0]
 80027ac:	4b40      	ldr	r3, [pc, #256]	; (80028b0 <update_scene+0xaec>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	1dda      	adds	r2, r3, #7
 80027b2:	4b3f      	ldr	r3, [pc, #252]	; (80028b0 <update_scene+0xaec>)
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	f7ff fadd 	bl	8001d74 <colliding>
 80027ba:	4603      	mov	r3, r0
					colliding(boss_shots[i].x,boss_shots[i].y, player.x, player.y+5) 	||
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d11c      	bne.n	80027fa <update_scene+0xa36>
					colliding(boss_shots[i].x,boss_shots[i].y, player.x+7, player.y+5))
 80027c0:	7bfa      	ldrb	r2, [r7, #15]
 80027c2:	493a      	ldr	r1, [pc, #232]	; (80028ac <update_scene+0xae8>)
 80027c4:	4613      	mov	r3, r2
 80027c6:	009b      	lsls	r3, r3, #2
 80027c8:	4413      	add	r3, r2
 80027ca:	009b      	lsls	r3, r3, #2
 80027cc:	440b      	add	r3, r1
 80027ce:	3304      	adds	r3, #4
 80027d0:	6818      	ldr	r0, [r3, #0]
 80027d2:	7bfa      	ldrb	r2, [r7, #15]
 80027d4:	4935      	ldr	r1, [pc, #212]	; (80028ac <update_scene+0xae8>)
 80027d6:	4613      	mov	r3, r2
 80027d8:	009b      	lsls	r3, r3, #2
 80027da:	4413      	add	r3, r2
 80027dc:	009b      	lsls	r3, r3, #2
 80027de:	440b      	add	r3, r1
 80027e0:	3308      	adds	r3, #8
 80027e2:	6819      	ldr	r1, [r3, #0]
 80027e4:	4b32      	ldr	r3, [pc, #200]	; (80028b0 <update_scene+0xaec>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	1dda      	adds	r2, r3, #7
 80027ea:	4b31      	ldr	r3, [pc, #196]	; (80028b0 <update_scene+0xaec>)
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	3305      	adds	r3, #5
 80027f0:	f7ff fac0 	bl	8001d74 <colliding>
 80027f4:	4603      	mov	r3, r0
					colliding(boss_shots[i].x,boss_shots[i].y, player.x+7, player.y)	||
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d04e      	beq.n	8002898 <update_scene+0xad4>
				{
					player.lives -= 1;;
 80027fa:	4b2d      	ldr	r3, [pc, #180]	; (80028b0 <update_scene+0xaec>)
 80027fc:	691b      	ldr	r3, [r3, #16]
 80027fe:	3b01      	subs	r3, #1
 8002800:	4a2b      	ldr	r2, [pc, #172]	; (80028b0 <update_scene+0xaec>)
 8002802:	6113      	str	r3, [r2, #16]
					boss_shots[i].active = false;
 8002804:	7bfa      	ldrb	r2, [r7, #15]
 8002806:	4929      	ldr	r1, [pc, #164]	; (80028ac <update_scene+0xae8>)
 8002808:	4613      	mov	r3, r2
 800280a:	009b      	lsls	r3, r3, #2
 800280c:	4413      	add	r3, r2
 800280e:	009b      	lsls	r3, r3, #2
 8002810:	440b      	add	r3, r1
 8002812:	2200      	movs	r2, #0
 8002814:	701a      	strb	r2, [r3, #0]
					GFX_DrowBitMap_P(boss_shots[i].x+2, boss_shots[i].y, explosion_map,10,10,1);
 8002816:	7bfa      	ldrb	r2, [r7, #15]
 8002818:	4924      	ldr	r1, [pc, #144]	; (80028ac <update_scene+0xae8>)
 800281a:	4613      	mov	r3, r2
 800281c:	009b      	lsls	r3, r3, #2
 800281e:	4413      	add	r3, r2
 8002820:	009b      	lsls	r3, r3, #2
 8002822:	440b      	add	r3, r1
 8002824:	3304      	adds	r3, #4
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	1c98      	adds	r0, r3, #2
 800282a:	7bfa      	ldrb	r2, [r7, #15]
 800282c:	491f      	ldr	r1, [pc, #124]	; (80028ac <update_scene+0xae8>)
 800282e:	4613      	mov	r3, r2
 8002830:	009b      	lsls	r3, r3, #2
 8002832:	4413      	add	r3, r2
 8002834:	009b      	lsls	r3, r3, #2
 8002836:	440b      	add	r3, r1
 8002838:	3308      	adds	r3, #8
 800283a:	6819      	ldr	r1, [r3, #0]
 800283c:	2301      	movs	r3, #1
 800283e:	9301      	str	r3, [sp, #4]
 8002840:	230a      	movs	r3, #10
 8002842:	9300      	str	r3, [sp, #0]
 8002844:	230a      	movs	r3, #10
 8002846:	4a1b      	ldr	r2, [pc, #108]	; (80028b4 <update_scene+0xaf0>)
 8002848:	f7fe faaa 	bl	8000da0 <GFX_DrowBitMap_P>
					GFX_DrowBitMap_P(player.x + 8, player.y-2, player_shield_map,10 ,16,1);
 800284c:	4b18      	ldr	r3, [pc, #96]	; (80028b0 <update_scene+0xaec>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f103 0008 	add.w	r0, r3, #8
 8002854:	4b16      	ldr	r3, [pc, #88]	; (80028b0 <update_scene+0xaec>)
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	1e99      	subs	r1, r3, #2
 800285a:	2301      	movs	r3, #1
 800285c:	9301      	str	r3, [sp, #4]
 800285e:	2310      	movs	r3, #16
 8002860:	9300      	str	r3, [sp, #0]
 8002862:	230a      	movs	r3, #10
 8002864:	4a14      	ldr	r2, [pc, #80]	; (80028b8 <update_scene+0xaf4>)
 8002866:	f7fe fa9b 	bl	8000da0 <GFX_DrowBitMap_P>
					GFX_DrowBitMap_P(player.x, player.y, player_map, 11, 11, 1);
 800286a:	4b11      	ldr	r3, [pc, #68]	; (80028b0 <update_scene+0xaec>)
 800286c:	6818      	ldr	r0, [r3, #0]
 800286e:	4b10      	ldr	r3, [pc, #64]	; (80028b0 <update_scene+0xaec>)
 8002870:	6859      	ldr	r1, [r3, #4]
 8002872:	2301      	movs	r3, #1
 8002874:	9301      	str	r3, [sp, #4]
 8002876:	230b      	movs	r3, #11
 8002878:	9300      	str	r3, [sp, #0]
 800287a:	230b      	movs	r3, #11
 800287c:	4a0f      	ldr	r2, [pc, #60]	; (80028bc <update_scene+0xaf8>)
 800287e:	f7fe fa8f 	bl	8000da0 <GFX_DrowBitMap_P>

					ssd1327_display();
 8002882:	f001 f865 	bl	8003950 <ssd1327_display>
					if (player.lives <= 0)
 8002886:	4b0a      	ldr	r3, [pc, #40]	; (80028b0 <update_scene+0xaec>)
 8002888:	691b      	ldr	r3, [r3, #16]
 800288a:	2b00      	cmp	r3, #0
 800288c:	dc04      	bgt.n	8002898 <update_scene+0xad4>
					{
						play_dead_anim();
 800288e:	f7ff f8d1 	bl	8001a34 <play_dead_anim>
						state = st_dead;
 8002892:	4b0b      	ldr	r3, [pc, #44]	; (80028c0 <update_scene+0xafc>)
 8002894:	2202      	movs	r2, #2
 8002896:	701a      	strb	r2, [r3, #0]
		for(i = 0; i < num_boss_shots; i++)
 8002898:	7bfb      	ldrb	r3, [r7, #15]
 800289a:	3301      	adds	r3, #1
 800289c:	73fb      	strb	r3, [r7, #15]
 800289e:	7bfb      	ldrb	r3, [r7, #15]
 80028a0:	2b04      	cmp	r3, #4
 80028a2:	f67f af2f 	bls.w	8002704 <update_scene+0x940>
				}
			}
		}

		// Strzały bosa do gracza
		for(i = 0; i < num_shots; i++)
 80028a6:	2300      	movs	r3, #0
 80028a8:	73fb      	strb	r3, [r7, #15]
 80028aa:	e0a3      	b.n	80029f4 <update_scene+0xc30>
 80028ac:	20000444 	.word	0x20000444
 80028b0:	20000168 	.word	0x20000168
 80028b4:	080096a0 	.word	0x080096a0
 80028b8:	08009668 	.word	0x08009668
 80028bc:	080094a0 	.word	0x080094a0
 80028c0:	20001658 	.word	0x20001658
		{
			if(shoots[i].active)
 80028c4:	7bfa      	ldrb	r2, [r7, #15]
 80028c6:	4972      	ldr	r1, [pc, #456]	; (8002a90 <update_scene+0xccc>)
 80028c8:	4613      	mov	r3, r2
 80028ca:	009b      	lsls	r3, r3, #2
 80028cc:	4413      	add	r3, r2
 80028ce:	009b      	lsls	r3, r3, #2
 80028d0:	440b      	add	r3, r1
 80028d2:	781b      	ldrb	r3, [r3, #0]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	f000 808a 	beq.w	80029ee <update_scene+0xc2a>
			{
				if(colliding(boss.x, boss.y, shoots[i].x, shoots[i].y) ||
 80028da:	4b6e      	ldr	r3, [pc, #440]	; (8002a94 <update_scene+0xcd0>)
 80028dc:	6858      	ldr	r0, [r3, #4]
 80028de:	4b6d      	ldr	r3, [pc, #436]	; (8002a94 <update_scene+0xcd0>)
 80028e0:	6899      	ldr	r1, [r3, #8]
 80028e2:	7bfa      	ldrb	r2, [r7, #15]
 80028e4:	4c6a      	ldr	r4, [pc, #424]	; (8002a90 <update_scene+0xccc>)
 80028e6:	4613      	mov	r3, r2
 80028e8:	009b      	lsls	r3, r3, #2
 80028ea:	4413      	add	r3, r2
 80028ec:	009b      	lsls	r3, r3, #2
 80028ee:	4423      	add	r3, r4
 80028f0:	3304      	adds	r3, #4
 80028f2:	681c      	ldr	r4, [r3, #0]
 80028f4:	7bfa      	ldrb	r2, [r7, #15]
 80028f6:	4d66      	ldr	r5, [pc, #408]	; (8002a90 <update_scene+0xccc>)
 80028f8:	4613      	mov	r3, r2
 80028fa:	009b      	lsls	r3, r3, #2
 80028fc:	4413      	add	r3, r2
 80028fe:	009b      	lsls	r3, r3, #2
 8002900:	442b      	add	r3, r5
 8002902:	3308      	adds	r3, #8
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4622      	mov	r2, r4
 8002908:	f7ff fa34 	bl	8001d74 <colliding>
 800290c:	4603      	mov	r3, r0
 800290e:	2b00      	cmp	r3, #0
 8002910:	d13a      	bne.n	8002988 <update_scene+0xbc4>
				   colliding(boss.x, boss.y+6, shoots[i].x, shoots[i].y) ||
 8002912:	4b60      	ldr	r3, [pc, #384]	; (8002a94 <update_scene+0xcd0>)
 8002914:	6858      	ldr	r0, [r3, #4]
 8002916:	4b5f      	ldr	r3, [pc, #380]	; (8002a94 <update_scene+0xcd0>)
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	1d99      	adds	r1, r3, #6
 800291c:	7bfa      	ldrb	r2, [r7, #15]
 800291e:	4c5c      	ldr	r4, [pc, #368]	; (8002a90 <update_scene+0xccc>)
 8002920:	4613      	mov	r3, r2
 8002922:	009b      	lsls	r3, r3, #2
 8002924:	4413      	add	r3, r2
 8002926:	009b      	lsls	r3, r3, #2
 8002928:	4423      	add	r3, r4
 800292a:	3304      	adds	r3, #4
 800292c:	681c      	ldr	r4, [r3, #0]
 800292e:	7bfa      	ldrb	r2, [r7, #15]
 8002930:	4d57      	ldr	r5, [pc, #348]	; (8002a90 <update_scene+0xccc>)
 8002932:	4613      	mov	r3, r2
 8002934:	009b      	lsls	r3, r3, #2
 8002936:	4413      	add	r3, r2
 8002938:	009b      	lsls	r3, r3, #2
 800293a:	442b      	add	r3, r5
 800293c:	3308      	adds	r3, #8
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4622      	mov	r2, r4
 8002942:	f7ff fa17 	bl	8001d74 <colliding>
 8002946:	4603      	mov	r3, r0
				if(colliding(boss.x, boss.y, shoots[i].x, shoots[i].y) ||
 8002948:	2b00      	cmp	r3, #0
 800294a:	d11d      	bne.n	8002988 <update_scene+0xbc4>
				   colliding(boss.x, boss.y+12, shoots[i].x, shoots[i].y))
 800294c:	4b51      	ldr	r3, [pc, #324]	; (8002a94 <update_scene+0xcd0>)
 800294e:	6858      	ldr	r0, [r3, #4]
 8002950:	4b50      	ldr	r3, [pc, #320]	; (8002a94 <update_scene+0xcd0>)
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	f103 010c 	add.w	r1, r3, #12
 8002958:	7bfa      	ldrb	r2, [r7, #15]
 800295a:	4c4d      	ldr	r4, [pc, #308]	; (8002a90 <update_scene+0xccc>)
 800295c:	4613      	mov	r3, r2
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	4413      	add	r3, r2
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	4423      	add	r3, r4
 8002966:	3304      	adds	r3, #4
 8002968:	681c      	ldr	r4, [r3, #0]
 800296a:	7bfa      	ldrb	r2, [r7, #15]
 800296c:	4d48      	ldr	r5, [pc, #288]	; (8002a90 <update_scene+0xccc>)
 800296e:	4613      	mov	r3, r2
 8002970:	009b      	lsls	r3, r3, #2
 8002972:	4413      	add	r3, r2
 8002974:	009b      	lsls	r3, r3, #2
 8002976:	442b      	add	r3, r5
 8002978:	3308      	adds	r3, #8
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4622      	mov	r2, r4
 800297e:	f7ff f9f9 	bl	8001d74 <colliding>
 8002982:	4603      	mov	r3, r0
				   colliding(boss.x, boss.y+6, shoots[i].x, shoots[i].y) ||
 8002984:	2b00      	cmp	r3, #0
 8002986:	d032      	beq.n	80029ee <update_scene+0xc2a>
				{
					boss.lives -= 1;
 8002988:	4b42      	ldr	r3, [pc, #264]	; (8002a94 <update_scene+0xcd0>)
 800298a:	695b      	ldr	r3, [r3, #20]
 800298c:	3b01      	subs	r3, #1
 800298e:	4a41      	ldr	r2, [pc, #260]	; (8002a94 <update_scene+0xcd0>)
 8002990:	6153      	str	r3, [r2, #20]
					shoots[i].active = false;
 8002992:	7bfa      	ldrb	r2, [r7, #15]
 8002994:	493e      	ldr	r1, [pc, #248]	; (8002a90 <update_scene+0xccc>)
 8002996:	4613      	mov	r3, r2
 8002998:	009b      	lsls	r3, r3, #2
 800299a:	4413      	add	r3, r2
 800299c:	009b      	lsls	r3, r3, #2
 800299e:	440b      	add	r3, r1
 80029a0:	2200      	movs	r2, #0
 80029a2:	701a      	strb	r2, [r3, #0]
					GFX_DrowBitMap_P(shoots[i].x, shoots[i].y, explosion_map, 10,10,1);
 80029a4:	7bfa      	ldrb	r2, [r7, #15]
 80029a6:	493a      	ldr	r1, [pc, #232]	; (8002a90 <update_scene+0xccc>)
 80029a8:	4613      	mov	r3, r2
 80029aa:	009b      	lsls	r3, r3, #2
 80029ac:	4413      	add	r3, r2
 80029ae:	009b      	lsls	r3, r3, #2
 80029b0:	440b      	add	r3, r1
 80029b2:	3304      	adds	r3, #4
 80029b4:	6818      	ldr	r0, [r3, #0]
 80029b6:	7bfa      	ldrb	r2, [r7, #15]
 80029b8:	4935      	ldr	r1, [pc, #212]	; (8002a90 <update_scene+0xccc>)
 80029ba:	4613      	mov	r3, r2
 80029bc:	009b      	lsls	r3, r3, #2
 80029be:	4413      	add	r3, r2
 80029c0:	009b      	lsls	r3, r3, #2
 80029c2:	440b      	add	r3, r1
 80029c4:	3308      	adds	r3, #8
 80029c6:	6819      	ldr	r1, [r3, #0]
 80029c8:	2301      	movs	r3, #1
 80029ca:	9301      	str	r3, [sp, #4]
 80029cc:	230a      	movs	r3, #10
 80029ce:	9300      	str	r3, [sp, #0]
 80029d0:	230a      	movs	r3, #10
 80029d2:	4a31      	ldr	r2, [pc, #196]	; (8002a98 <update_scene+0xcd4>)
 80029d4:	f7fe f9e4 	bl	8000da0 <GFX_DrowBitMap_P>

					if(boss.lives <= 0)
 80029d8:	4b2e      	ldr	r3, [pc, #184]	; (8002a94 <update_scene+0xcd0>)
 80029da:	695b      	ldr	r3, [r3, #20]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	dc06      	bgt.n	80029ee <update_scene+0xc2a>
					{
						boss.active = false;
 80029e0:	4b2c      	ldr	r3, [pc, #176]	; (8002a94 <update_scene+0xcd0>)
 80029e2:	2200      	movs	r2, #0
 80029e4:	701a      	strb	r2, [r3, #0]
						//boss.level += 1;
						boss.lives = 0;
 80029e6:	4b2b      	ldr	r3, [pc, #172]	; (8002a94 <update_scene+0xcd0>)
 80029e8:	2200      	movs	r2, #0
 80029ea:	615a      	str	r2, [r3, #20]
						break;
 80029ec:	e006      	b.n	80029fc <update_scene+0xc38>
		for(i = 0; i < num_shots; i++)
 80029ee:	7bfb      	ldrb	r3, [r7, #15]
 80029f0:	3301      	adds	r3, #1
 80029f2:	73fb      	strb	r3, [r7, #15]
 80029f4:	7bfb      	ldrb	r3, [r7, #15]
 80029f6:	2b22      	cmp	r3, #34	; 0x22
 80029f8:	f67f af64 	bls.w	80028c4 <update_scene+0xb00>
			}
		}
	}

	//Zamalowanie i dezaktywacja strzałów pozostałych po bosie
	if(!boss.active)
 80029fc:	4b25      	ldr	r3, [pc, #148]	; (8002a94 <update_scene+0xcd0>)
 80029fe:	781b      	ldrb	r3, [r3, #0]
 8002a00:	f083 0301 	eor.w	r3, r3, #1
 8002a04:	b2db      	uxtb	r3, r3
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d035      	beq.n	8002a76 <update_scene+0xcb2>
	{
		for(i = 0; i < num_boss_shots; i++)
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	73fb      	strb	r3, [r7, #15]
 8002a0e:	e02f      	b.n	8002a70 <update_scene+0xcac>
		{
			if(boss_shots[i].active)
 8002a10:	7bfa      	ldrb	r2, [r7, #15]
 8002a12:	4922      	ldr	r1, [pc, #136]	; (8002a9c <update_scene+0xcd8>)
 8002a14:	4613      	mov	r3, r2
 8002a16:	009b      	lsls	r3, r3, #2
 8002a18:	4413      	add	r3, r2
 8002a1a:	009b      	lsls	r3, r3, #2
 8002a1c:	440b      	add	r3, r1
 8002a1e:	781b      	ldrb	r3, [r3, #0]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d022      	beq.n	8002a6a <update_scene+0xca6>
			{
				boss_shots[i].active = false;
 8002a24:	7bfa      	ldrb	r2, [r7, #15]
 8002a26:	491d      	ldr	r1, [pc, #116]	; (8002a9c <update_scene+0xcd8>)
 8002a28:	4613      	mov	r3, r2
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	4413      	add	r3, r2
 8002a2e:	009b      	lsls	r3, r3, #2
 8002a30:	440b      	add	r3, r1
 8002a32:	2200      	movs	r2, #0
 8002a34:	701a      	strb	r2, [r3, #0]
				GFX_DrowBitMap_P(boss_shots[i].x, boss_shots[i].y, player_shot_map,4,1,0);
 8002a36:	7bfa      	ldrb	r2, [r7, #15]
 8002a38:	4918      	ldr	r1, [pc, #96]	; (8002a9c <update_scene+0xcd8>)
 8002a3a:	4613      	mov	r3, r2
 8002a3c:	009b      	lsls	r3, r3, #2
 8002a3e:	4413      	add	r3, r2
 8002a40:	009b      	lsls	r3, r3, #2
 8002a42:	440b      	add	r3, r1
 8002a44:	3304      	adds	r3, #4
 8002a46:	6818      	ldr	r0, [r3, #0]
 8002a48:	7bfa      	ldrb	r2, [r7, #15]
 8002a4a:	4914      	ldr	r1, [pc, #80]	; (8002a9c <update_scene+0xcd8>)
 8002a4c:	4613      	mov	r3, r2
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	4413      	add	r3, r2
 8002a52:	009b      	lsls	r3, r3, #2
 8002a54:	440b      	add	r3, r1
 8002a56:	3308      	adds	r3, #8
 8002a58:	6819      	ldr	r1, [r3, #0]
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	9301      	str	r3, [sp, #4]
 8002a5e:	2301      	movs	r3, #1
 8002a60:	9300      	str	r3, [sp, #0]
 8002a62:	2304      	movs	r3, #4
 8002a64:	4a0e      	ldr	r2, [pc, #56]	; (8002aa0 <update_scene+0xcdc>)
 8002a66:	f7fe f99b 	bl	8000da0 <GFX_DrowBitMap_P>
		for(i = 0; i < num_boss_shots; i++)
 8002a6a:	7bfb      	ldrb	r3, [r7, #15]
 8002a6c:	3301      	adds	r3, #1
 8002a6e:	73fb      	strb	r3, [r7, #15]
 8002a70:	7bfb      	ldrb	r3, [r7, #15]
 8002a72:	2b04      	cmp	r3, #4
 8002a74:	d9cc      	bls.n	8002a10 <update_scene+0xc4c>
			}
		}
	}
	//-------------------------------------------

	if (button_pressed())
 8002a76:	f000 fe79 	bl	800376c <button_pressed>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d001      	beq.n	8002a84 <update_scene+0xcc0>
		shoot();
 8002a80:	f7fe fffa 	bl	8001a78 <shoot>

	// Sprawdzenie kolicji strzałów gracza z przeciwnikami. Dodawania Bonusów
	for (i = 0; i < num_shots; ++i)
 8002a84:	2300      	movs	r3, #0
 8002a86:	73fb      	strb	r3, [r7, #15]
 8002a88:	e0bf      	b.n	8002c0a <update_scene+0xe46>
	{
		for (j = 0; j < num_enemies; ++j)
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	73bb      	strb	r3, [r7, #14]
 8002a8e:	e0b5      	b.n	8002bfc <update_scene+0xe38>
 8002a90:	20000188 	.word	0x20000188
 8002a94:	200015b0 	.word	0x200015b0
 8002a98:	080096a0 	.word	0x080096a0
 8002a9c:	20000444 	.word	0x20000444
 8002aa0:	0800949c 	.word	0x0800949c
		{
			if (shoots[i].active && enemies[j].active)
 8002aa4:	7bfa      	ldrb	r2, [r7, #15]
 8002aa6:	496a      	ldr	r1, [pc, #424]	; (8002c50 <update_scene+0xe8c>)
 8002aa8:	4613      	mov	r3, r2
 8002aaa:	009b      	lsls	r3, r3, #2
 8002aac:	4413      	add	r3, r2
 8002aae:	009b      	lsls	r3, r3, #2
 8002ab0:	440b      	add	r3, r1
 8002ab2:	781b      	ldrb	r3, [r3, #0]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	f000 809e 	beq.w	8002bf6 <update_scene+0xe32>
 8002aba:	7bba      	ldrb	r2, [r7, #14]
 8002abc:	4965      	ldr	r1, [pc, #404]	; (8002c54 <update_scene+0xe90>)
 8002abe:	4613      	mov	r3, r2
 8002ac0:	00db      	lsls	r3, r3, #3
 8002ac2:	4413      	add	r3, r2
 8002ac4:	009b      	lsls	r3, r3, #2
 8002ac6:	440b      	add	r3, r1
 8002ac8:	781b      	ldrb	r3, [r3, #0]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	f000 8093 	beq.w	8002bf6 <update_scene+0xe32>
			{
				if (colliding(enemies[j].x, enemies[j].y, shoots[i].x, shoots[i].y))
 8002ad0:	7bba      	ldrb	r2, [r7, #14]
 8002ad2:	4960      	ldr	r1, [pc, #384]	; (8002c54 <update_scene+0xe90>)
 8002ad4:	4613      	mov	r3, r2
 8002ad6:	00db      	lsls	r3, r3, #3
 8002ad8:	4413      	add	r3, r2
 8002ada:	009b      	lsls	r3, r3, #2
 8002adc:	440b      	add	r3, r1
 8002ade:	3304      	adds	r3, #4
 8002ae0:	6818      	ldr	r0, [r3, #0]
 8002ae2:	7bba      	ldrb	r2, [r7, #14]
 8002ae4:	495b      	ldr	r1, [pc, #364]	; (8002c54 <update_scene+0xe90>)
 8002ae6:	4613      	mov	r3, r2
 8002ae8:	00db      	lsls	r3, r3, #3
 8002aea:	4413      	add	r3, r2
 8002aec:	009b      	lsls	r3, r3, #2
 8002aee:	440b      	add	r3, r1
 8002af0:	3308      	adds	r3, #8
 8002af2:	6819      	ldr	r1, [r3, #0]
 8002af4:	7bfa      	ldrb	r2, [r7, #15]
 8002af6:	4c56      	ldr	r4, [pc, #344]	; (8002c50 <update_scene+0xe8c>)
 8002af8:	4613      	mov	r3, r2
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	4413      	add	r3, r2
 8002afe:	009b      	lsls	r3, r3, #2
 8002b00:	4423      	add	r3, r4
 8002b02:	3304      	adds	r3, #4
 8002b04:	681c      	ldr	r4, [r3, #0]
 8002b06:	7bfa      	ldrb	r2, [r7, #15]
 8002b08:	4d51      	ldr	r5, [pc, #324]	; (8002c50 <update_scene+0xe8c>)
 8002b0a:	4613      	mov	r3, r2
 8002b0c:	009b      	lsls	r3, r3, #2
 8002b0e:	4413      	add	r3, r2
 8002b10:	009b      	lsls	r3, r3, #2
 8002b12:	442b      	add	r3, r5
 8002b14:	3308      	adds	r3, #8
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4622      	mov	r2, r4
 8002b1a:	f7ff f92b 	bl	8001d74 <colliding>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d068      	beq.n	8002bf6 <update_scene+0xe32>
//				if(	colliding(enemies[j].x,enemies[j].y, shoots[i].x, shoots[i].y) 	||
//					colliding(enemies[j].x + 2,enemies[j].y, shoots[i].x, shoots[i].y) 	||
//					colliding(enemies[j].x,enemies[j].y + 2, shoots[i].x, shoots[i].y)	||
//					colliding(enemies[j].x + 2,enemies[j].y + 2, shoots[i].x, shoots[i].y))
				{
					enemies[j].active = false;
 8002b24:	7bba      	ldrb	r2, [r7, #14]
 8002b26:	494b      	ldr	r1, [pc, #300]	; (8002c54 <update_scene+0xe90>)
 8002b28:	4613      	mov	r3, r2
 8002b2a:	00db      	lsls	r3, r3, #3
 8002b2c:	4413      	add	r3, r2
 8002b2e:	009b      	lsls	r3, r3, #2
 8002b30:	440b      	add	r3, r1
 8002b32:	2200      	movs	r2, #0
 8002b34:	701a      	strb	r2, [r3, #0]
					enemies[j].tracked_by_missile = false;
 8002b36:	7bba      	ldrb	r2, [r7, #14]
 8002b38:	4946      	ldr	r1, [pc, #280]	; (8002c54 <update_scene+0xe90>)
 8002b3a:	4613      	mov	r3, r2
 8002b3c:	00db      	lsls	r3, r3, #3
 8002b3e:	4413      	add	r3, r2
 8002b40:	009b      	lsls	r3, r3, #2
 8002b42:	440b      	add	r3, r1
 8002b44:	331c      	adds	r3, #28
 8002b46:	2200      	movs	r2, #0
 8002b48:	701a      	strb	r2, [r3, #0]
					enemies[j].truck_number = 0;
 8002b4a:	7bba      	ldrb	r2, [r7, #14]
 8002b4c:	4941      	ldr	r1, [pc, #260]	; (8002c54 <update_scene+0xe90>)
 8002b4e:	4613      	mov	r3, r2
 8002b50:	00db      	lsls	r3, r3, #3
 8002b52:	4413      	add	r3, r2
 8002b54:	009b      	lsls	r3, r3, #2
 8002b56:	440b      	add	r3, r1
 8002b58:	3320      	adds	r3, #32
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	601a      	str	r2, [r3, #0]
					shoots[i].active = false;
 8002b5e:	7bfa      	ldrb	r2, [r7, #15]
 8002b60:	493b      	ldr	r1, [pc, #236]	; (8002c50 <update_scene+0xe8c>)
 8002b62:	4613      	mov	r3, r2
 8002b64:	009b      	lsls	r3, r3, #2
 8002b66:	4413      	add	r3, r2
 8002b68:	009b      	lsls	r3, r3, #2
 8002b6a:	440b      	add	r3, r1
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	701a      	strb	r2, [r3, #0]
					player.score += 1;
 8002b70:	4b39      	ldr	r3, [pc, #228]	; (8002c58 <update_scene+0xe94>)
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	3301      	adds	r3, #1
 8002b76:	4a38      	ldr	r2, [pc, #224]	; (8002c58 <update_scene+0xe94>)
 8002b78:	6093      	str	r3, [r2, #8]
					GFX_DrowBitMap_P(enemies[j].x, enemies[j].y, explosion_map,10,10,1);
 8002b7a:	7bba      	ldrb	r2, [r7, #14]
 8002b7c:	4935      	ldr	r1, [pc, #212]	; (8002c54 <update_scene+0xe90>)
 8002b7e:	4613      	mov	r3, r2
 8002b80:	00db      	lsls	r3, r3, #3
 8002b82:	4413      	add	r3, r2
 8002b84:	009b      	lsls	r3, r3, #2
 8002b86:	440b      	add	r3, r1
 8002b88:	3304      	adds	r3, #4
 8002b8a:	6818      	ldr	r0, [r3, #0]
 8002b8c:	7bba      	ldrb	r2, [r7, #14]
 8002b8e:	4931      	ldr	r1, [pc, #196]	; (8002c54 <update_scene+0xe90>)
 8002b90:	4613      	mov	r3, r2
 8002b92:	00db      	lsls	r3, r3, #3
 8002b94:	4413      	add	r3, r2
 8002b96:	009b      	lsls	r3, r3, #2
 8002b98:	440b      	add	r3, r1
 8002b9a:	3308      	adds	r3, #8
 8002b9c:	6819      	ldr	r1, [r3, #0]
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	9301      	str	r3, [sp, #4]
 8002ba2:	230a      	movs	r3, #10
 8002ba4:	9300      	str	r3, [sp, #0]
 8002ba6:	230a      	movs	r3, #10
 8002ba8:	4a2c      	ldr	r2, [pc, #176]	; (8002c5c <update_scene+0xe98>)
 8002baa:	f7fe f8f9 	bl	8000da0 <GFX_DrowBitMap_P>

					//Dodanie bonusa w miejscu zestrzelenia
					if((rand()%100) < frequ_bonus)
 8002bae:	f004 fa69 	bl	8007084 <rand>
 8002bb2:	4602      	mov	r2, r0
 8002bb4:	4b2a      	ldr	r3, [pc, #168]	; (8002c60 <update_scene+0xe9c>)
 8002bb6:	fb83 1302 	smull	r1, r3, r3, r2
 8002bba:	1159      	asrs	r1, r3, #5
 8002bbc:	17d3      	asrs	r3, r2, #31
 8002bbe:	1acb      	subs	r3, r1, r3
 8002bc0:	2164      	movs	r1, #100	; 0x64
 8002bc2:	fb01 f303 	mul.w	r3, r1, r3
 8002bc6:	1ad3      	subs	r3, r2, r3
 8002bc8:	2b09      	cmp	r3, #9
 8002bca:	dc14      	bgt.n	8002bf6 <update_scene+0xe32>
						add_bonus(enemies[j].x, enemies[j].y);
 8002bcc:	7bba      	ldrb	r2, [r7, #14]
 8002bce:	4921      	ldr	r1, [pc, #132]	; (8002c54 <update_scene+0xe90>)
 8002bd0:	4613      	mov	r3, r2
 8002bd2:	00db      	lsls	r3, r3, #3
 8002bd4:	4413      	add	r3, r2
 8002bd6:	009b      	lsls	r3, r3, #2
 8002bd8:	440b      	add	r3, r1
 8002bda:	3304      	adds	r3, #4
 8002bdc:	6818      	ldr	r0, [r3, #0]
 8002bde:	7bba      	ldrb	r2, [r7, #14]
 8002be0:	491c      	ldr	r1, [pc, #112]	; (8002c54 <update_scene+0xe90>)
 8002be2:	4613      	mov	r3, r2
 8002be4:	00db      	lsls	r3, r3, #3
 8002be6:	4413      	add	r3, r2
 8002be8:	009b      	lsls	r3, r3, #2
 8002bea:	440b      	add	r3, r1
 8002bec:	3308      	adds	r3, #8
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4619      	mov	r1, r3
 8002bf2:	f000 fc49 	bl	8003488 <add_bonus>
		for (j = 0; j < num_enemies; ++j)
 8002bf6:	7bbb      	ldrb	r3, [r7, #14]
 8002bf8:	3301      	adds	r3, #1
 8002bfa:	73bb      	strb	r3, [r7, #14]
 8002bfc:	7bbb      	ldrb	r3, [r7, #14]
 8002bfe:	2b09      	cmp	r3, #9
 8002c00:	f67f af50 	bls.w	8002aa4 <update_scene+0xce0>
	for (i = 0; i < num_shots; ++i)
 8002c04:	7bfb      	ldrb	r3, [r7, #15]
 8002c06:	3301      	adds	r3, #1
 8002c08:	73fb      	strb	r3, [r7, #15]
 8002c0a:	7bfb      	ldrb	r3, [r7, #15]
 8002c0c:	2b22      	cmp	r3, #34	; 0x22
 8002c0e:	f67f af3c 	bls.w	8002a8a <update_scene+0xcc6>
				}
			}
		}
	}
	if ((rand()%100) < (player.level * 2) && !(boss.active)) //Częstotliwość dodawania przeciwników w zależności od poziomu
 8002c12:	f004 fa37 	bl	8007084 <rand>
 8002c16:	4602      	mov	r2, r0
 8002c18:	4b11      	ldr	r3, [pc, #68]	; (8002c60 <update_scene+0xe9c>)
 8002c1a:	fb83 1302 	smull	r1, r3, r3, r2
 8002c1e:	1159      	asrs	r1, r3, #5
 8002c20:	17d3      	asrs	r3, r2, #31
 8002c22:	1acb      	subs	r3, r1, r3
 8002c24:	2164      	movs	r1, #100	; 0x64
 8002c26:	fb01 f303 	mul.w	r3, r1, r3
 8002c2a:	1ad3      	subs	r3, r2, r3
 8002c2c:	4a0a      	ldr	r2, [pc, #40]	; (8002c58 <update_scene+0xe94>)
 8002c2e:	6952      	ldr	r2, [r2, #20]
 8002c30:	0052      	lsls	r2, r2, #1
 8002c32:	4293      	cmp	r3, r2
 8002c34:	da08      	bge.n	8002c48 <update_scene+0xe84>
 8002c36:	4b0b      	ldr	r3, [pc, #44]	; (8002c64 <update_scene+0xea0>)
 8002c38:	781b      	ldrb	r3, [r3, #0]
 8002c3a:	f083 0301 	eor.w	r3, r3, #1
 8002c3e:	b2db      	uxtb	r3, r3
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d001      	beq.n	8002c48 <update_scene+0xe84>
			add_enemy();
 8002c44:	f000 fb0c 	bl	8003260 <add_enemy>
}
 8002c48:	bf00      	nop
 8002c4a:	3710      	adds	r7, #16
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bdb0      	pop	{r4, r5, r7, pc}
 8002c50:	20000188 	.word	0x20000188
 8002c54:	200004a8 	.word	0x200004a8
 8002c58:	20000168 	.word	0x20000168
 8002c5c:	080096a0 	.word	0x080096a0
 8002c60:	51eb851f 	.word	0x51eb851f
 8002c64:	200015b0 	.word	0x200015b0

08002c68 <drow_game>:

void drow_game(void)
{
 8002c68:	b5b0      	push	{r4, r5, r7, lr}
 8002c6a:	b084      	sub	sp, #16
 8002c6c:	af02      	add	r7, sp, #8
	 * Rysowanie ca�ej grafiki podczas gry.
	 */
	uint8_t i;

	//Rsownanie informacji o grze
	GFX_PutInt(5,0,player.score,1,1,0);
 8002c6e:	4b9f      	ldr	r3, [pc, #636]	; (8002eec <drow_game+0x284>)
 8002c70:	689a      	ldr	r2, [r3, #8]
 8002c72:	2300      	movs	r3, #0
 8002c74:	9301      	str	r3, [sp, #4]
 8002c76:	2301      	movs	r3, #1
 8002c78:	9300      	str	r3, [sp, #0]
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	2100      	movs	r1, #0
 8002c7e:	2005      	movs	r0, #5
 8002c80:	f7fe fa20 	bl	80010c4 <GFX_PutInt>
	GFX_DrowBitMap_P(102,0,lives_map,8,6,1);
 8002c84:	2301      	movs	r3, #1
 8002c86:	9301      	str	r3, [sp, #4]
 8002c88:	2306      	movs	r3, #6
 8002c8a:	9300      	str	r3, [sp, #0]
 8002c8c:	2308      	movs	r3, #8
 8002c8e:	4a98      	ldr	r2, [pc, #608]	; (8002ef0 <drow_game+0x288>)
 8002c90:	2100      	movs	r1, #0
 8002c92:	2066      	movs	r0, #102	; 0x66
 8002c94:	f7fe f884 	bl	8000da0 <GFX_DrowBitMap_P>
	GFX_PutInt(122,0,player.lives,1,1,0);
 8002c98:	4b94      	ldr	r3, [pc, #592]	; (8002eec <drow_game+0x284>)
 8002c9a:	691a      	ldr	r2, [r3, #16]
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	9301      	str	r3, [sp, #4]
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	9300      	str	r3, [sp, #0]
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	2100      	movs	r1, #0
 8002ca8:	207a      	movs	r0, #122	; 0x7a
 8002caa:	f7fe fa0b 	bl	80010c4 <GFX_PutInt>
	GFX_DrowBitMap_P(50,0,Level_map,20,7,1);
 8002cae:	2301      	movs	r3, #1
 8002cb0:	9301      	str	r3, [sp, #4]
 8002cb2:	2307      	movs	r3, #7
 8002cb4:	9300      	str	r3, [sp, #0]
 8002cb6:	2314      	movs	r3, #20
 8002cb8:	4a8e      	ldr	r2, [pc, #568]	; (8002ef4 <drow_game+0x28c>)
 8002cba:	2100      	movs	r1, #0
 8002cbc:	2032      	movs	r0, #50	; 0x32
 8002cbe:	f7fe f86f 	bl	8000da0 <GFX_DrowBitMap_P>
	GFX_PutInt(80,0,player.level,1,1,0);
 8002cc2:	4b8a      	ldr	r3, [pc, #552]	; (8002eec <drow_game+0x284>)
 8002cc4:	695a      	ldr	r2, [r3, #20]
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	9301      	str	r3, [sp, #4]
 8002cca:	2301      	movs	r3, #1
 8002ccc:	9300      	str	r3, [sp, #0]
 8002cce:	2301      	movs	r3, #1
 8002cd0:	2100      	movs	r1, #0
 8002cd2:	2050      	movs	r0, #80	; 0x50
 8002cd4:	f7fe f9f6 	bl	80010c4 <GFX_PutInt>

	//Rysowniae grafiki strzału gracza
	for(i = 0; i < num_shots; i++)
 8002cd8:	2300      	movs	r3, #0
 8002cda:	71fb      	strb	r3, [r7, #7]
 8002cdc:	e026      	b.n	8002d2c <drow_game+0xc4>
	{
		if(shoots[i].active)
 8002cde:	79fa      	ldrb	r2, [r7, #7]
 8002ce0:	4985      	ldr	r1, [pc, #532]	; (8002ef8 <drow_game+0x290>)
 8002ce2:	4613      	mov	r3, r2
 8002ce4:	009b      	lsls	r3, r3, #2
 8002ce6:	4413      	add	r3, r2
 8002ce8:	009b      	lsls	r3, r3, #2
 8002cea:	440b      	add	r3, r1
 8002cec:	781b      	ldrb	r3, [r3, #0]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d019      	beq.n	8002d26 <drow_game+0xbe>
		{
			GFX_DrowBitMap_P(shoots[i].x, shoots[i].y, player_shot_map,4,1,1);
 8002cf2:	79fa      	ldrb	r2, [r7, #7]
 8002cf4:	4980      	ldr	r1, [pc, #512]	; (8002ef8 <drow_game+0x290>)
 8002cf6:	4613      	mov	r3, r2
 8002cf8:	009b      	lsls	r3, r3, #2
 8002cfa:	4413      	add	r3, r2
 8002cfc:	009b      	lsls	r3, r3, #2
 8002cfe:	440b      	add	r3, r1
 8002d00:	3304      	adds	r3, #4
 8002d02:	6818      	ldr	r0, [r3, #0]
 8002d04:	79fa      	ldrb	r2, [r7, #7]
 8002d06:	497c      	ldr	r1, [pc, #496]	; (8002ef8 <drow_game+0x290>)
 8002d08:	4613      	mov	r3, r2
 8002d0a:	009b      	lsls	r3, r3, #2
 8002d0c:	4413      	add	r3, r2
 8002d0e:	009b      	lsls	r3, r3, #2
 8002d10:	440b      	add	r3, r1
 8002d12:	3308      	adds	r3, #8
 8002d14:	6819      	ldr	r1, [r3, #0]
 8002d16:	2301      	movs	r3, #1
 8002d18:	9301      	str	r3, [sp, #4]
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	9300      	str	r3, [sp, #0]
 8002d1e:	2304      	movs	r3, #4
 8002d20:	4a76      	ldr	r2, [pc, #472]	; (8002efc <drow_game+0x294>)
 8002d22:	f7fe f83d 	bl	8000da0 <GFX_DrowBitMap_P>
	for(i = 0; i < num_shots; i++)
 8002d26:	79fb      	ldrb	r3, [r7, #7]
 8002d28:	3301      	adds	r3, #1
 8002d2a:	71fb      	strb	r3, [r7, #7]
 8002d2c:	79fb      	ldrb	r3, [r7, #7]
 8002d2e:	2b22      	cmp	r3, #34	; 0x22
 8002d30:	d9d5      	bls.n	8002cde <drow_game+0x76>
		}
	}

	//Rysowniae grafiki strzału bosa
	if(boss.active)
 8002d32:	4b73      	ldr	r3, [pc, #460]	; (8002f00 <drow_game+0x298>)
 8002d34:	781b      	ldrb	r3, [r3, #0]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d02c      	beq.n	8002d94 <drow_game+0x12c>
	{
		for(i = 0; i < num_boss_shots; i++)
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	71fb      	strb	r3, [r7, #7]
 8002d3e:	e026      	b.n	8002d8e <drow_game+0x126>
		{
			if(boss_shots[i].active)
 8002d40:	79fa      	ldrb	r2, [r7, #7]
 8002d42:	4970      	ldr	r1, [pc, #448]	; (8002f04 <drow_game+0x29c>)
 8002d44:	4613      	mov	r3, r2
 8002d46:	009b      	lsls	r3, r3, #2
 8002d48:	4413      	add	r3, r2
 8002d4a:	009b      	lsls	r3, r3, #2
 8002d4c:	440b      	add	r3, r1
 8002d4e:	781b      	ldrb	r3, [r3, #0]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d019      	beq.n	8002d88 <drow_game+0x120>
			{
				GFX_DrowBitMap_P(boss_shots[i].x, boss_shots[i].y, player_shot_map,4,1,1);
 8002d54:	79fa      	ldrb	r2, [r7, #7]
 8002d56:	496b      	ldr	r1, [pc, #428]	; (8002f04 <drow_game+0x29c>)
 8002d58:	4613      	mov	r3, r2
 8002d5a:	009b      	lsls	r3, r3, #2
 8002d5c:	4413      	add	r3, r2
 8002d5e:	009b      	lsls	r3, r3, #2
 8002d60:	440b      	add	r3, r1
 8002d62:	3304      	adds	r3, #4
 8002d64:	6818      	ldr	r0, [r3, #0]
 8002d66:	79fa      	ldrb	r2, [r7, #7]
 8002d68:	4966      	ldr	r1, [pc, #408]	; (8002f04 <drow_game+0x29c>)
 8002d6a:	4613      	mov	r3, r2
 8002d6c:	009b      	lsls	r3, r3, #2
 8002d6e:	4413      	add	r3, r2
 8002d70:	009b      	lsls	r3, r3, #2
 8002d72:	440b      	add	r3, r1
 8002d74:	3308      	adds	r3, #8
 8002d76:	6819      	ldr	r1, [r3, #0]
 8002d78:	2301      	movs	r3, #1
 8002d7a:	9301      	str	r3, [sp, #4]
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	9300      	str	r3, [sp, #0]
 8002d80:	2304      	movs	r3, #4
 8002d82:	4a5e      	ldr	r2, [pc, #376]	; (8002efc <drow_game+0x294>)
 8002d84:	f7fe f80c 	bl	8000da0 <GFX_DrowBitMap_P>
		for(i = 0; i < num_boss_shots; i++)
 8002d88:	79fb      	ldrb	r3, [r7, #7]
 8002d8a:	3301      	adds	r3, #1
 8002d8c:	71fb      	strb	r3, [r7, #7]
 8002d8e:	79fb      	ldrb	r3, [r7, #7]
 8002d90:	2b04      	cmp	r3, #4
 8002d92:	d9d5      	bls.n	8002d40 <drow_game+0xd8>
			}
		}
	}
	//Rysownaie grafiki przeciwników
	for(i = 0; i < num_enemies; i++)
 8002d94:	2300      	movs	r3, #0
 8002d96:	71fb      	strb	r3, [r7, #7]
 8002d98:	e094      	b.n	8002ec4 <drow_game+0x25c>
	{
		if(enemies[i].active)
 8002d9a:	79fa      	ldrb	r2, [r7, #7]
 8002d9c:	495a      	ldr	r1, [pc, #360]	; (8002f08 <drow_game+0x2a0>)
 8002d9e:	4613      	mov	r3, r2
 8002da0:	00db      	lsls	r3, r3, #3
 8002da2:	4413      	add	r3, r2
 8002da4:	009b      	lsls	r3, r3, #2
 8002da6:	440b      	add	r3, r1
 8002da8:	781b      	ldrb	r3, [r3, #0]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	f000 8087 	beq.w	8002ebe <drow_game+0x256>
		{
			if(enemies[i].type == et_tracker)
 8002db0:	79fa      	ldrb	r2, [r7, #7]
 8002db2:	4955      	ldr	r1, [pc, #340]	; (8002f08 <drow_game+0x2a0>)
 8002db4:	4613      	mov	r3, r2
 8002db6:	00db      	lsls	r3, r3, #3
 8002db8:	4413      	add	r3, r2
 8002dba:	009b      	lsls	r3, r3, #2
 8002dbc:	440b      	add	r3, r1
 8002dbe:	330c      	adds	r3, #12
 8002dc0:	781b      	ldrb	r3, [r3, #0]
 8002dc2:	2b01      	cmp	r3, #1
 8002dc4:	d121      	bne.n	8002e0a <drow_game+0x1a2>
				GFX_DrowBitMap_P(enemies[i].x, enemies[i].y, enemies[i].bit_map,5,5,1);
 8002dc6:	79fa      	ldrb	r2, [r7, #7]
 8002dc8:	494f      	ldr	r1, [pc, #316]	; (8002f08 <drow_game+0x2a0>)
 8002dca:	4613      	mov	r3, r2
 8002dcc:	00db      	lsls	r3, r3, #3
 8002dce:	4413      	add	r3, r2
 8002dd0:	009b      	lsls	r3, r3, #2
 8002dd2:	440b      	add	r3, r1
 8002dd4:	3304      	adds	r3, #4
 8002dd6:	6818      	ldr	r0, [r3, #0]
 8002dd8:	79fa      	ldrb	r2, [r7, #7]
 8002dda:	494b      	ldr	r1, [pc, #300]	; (8002f08 <drow_game+0x2a0>)
 8002ddc:	4613      	mov	r3, r2
 8002dde:	00db      	lsls	r3, r3, #3
 8002de0:	4413      	add	r3, r2
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	440b      	add	r3, r1
 8002de6:	3308      	adds	r3, #8
 8002de8:	6819      	ldr	r1, [r3, #0]
 8002dea:	79fa      	ldrb	r2, [r7, #7]
 8002dec:	4c46      	ldr	r4, [pc, #280]	; (8002f08 <drow_game+0x2a0>)
 8002dee:	4613      	mov	r3, r2
 8002df0:	00db      	lsls	r3, r3, #3
 8002df2:	4413      	add	r3, r2
 8002df4:	009b      	lsls	r3, r3, #2
 8002df6:	4423      	add	r3, r4
 8002df8:	3310      	adds	r3, #16
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	9301      	str	r3, [sp, #4]
 8002e00:	2305      	movs	r3, #5
 8002e02:	9300      	str	r3, [sp, #0]
 8002e04:	2305      	movs	r3, #5
 8002e06:	f7fd ffcb 	bl	8000da0 <GFX_DrowBitMap_P>
			if(enemies[i].type == et_diver)
 8002e0a:	79fa      	ldrb	r2, [r7, #7]
 8002e0c:	493e      	ldr	r1, [pc, #248]	; (8002f08 <drow_game+0x2a0>)
 8002e0e:	4613      	mov	r3, r2
 8002e10:	00db      	lsls	r3, r3, #3
 8002e12:	4413      	add	r3, r2
 8002e14:	009b      	lsls	r3, r3, #2
 8002e16:	440b      	add	r3, r1
 8002e18:	330c      	adds	r3, #12
 8002e1a:	781b      	ldrb	r3, [r3, #0]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d121      	bne.n	8002e64 <drow_game+0x1fc>
				GFX_DrowBitMap_P(enemies[i].x, enemies[i].y, enemies[i].bit_map,3,7,1);
 8002e20:	79fa      	ldrb	r2, [r7, #7]
 8002e22:	4939      	ldr	r1, [pc, #228]	; (8002f08 <drow_game+0x2a0>)
 8002e24:	4613      	mov	r3, r2
 8002e26:	00db      	lsls	r3, r3, #3
 8002e28:	4413      	add	r3, r2
 8002e2a:	009b      	lsls	r3, r3, #2
 8002e2c:	440b      	add	r3, r1
 8002e2e:	3304      	adds	r3, #4
 8002e30:	6818      	ldr	r0, [r3, #0]
 8002e32:	79fa      	ldrb	r2, [r7, #7]
 8002e34:	4934      	ldr	r1, [pc, #208]	; (8002f08 <drow_game+0x2a0>)
 8002e36:	4613      	mov	r3, r2
 8002e38:	00db      	lsls	r3, r3, #3
 8002e3a:	4413      	add	r3, r2
 8002e3c:	009b      	lsls	r3, r3, #2
 8002e3e:	440b      	add	r3, r1
 8002e40:	3308      	adds	r3, #8
 8002e42:	6819      	ldr	r1, [r3, #0]
 8002e44:	79fa      	ldrb	r2, [r7, #7]
 8002e46:	4c30      	ldr	r4, [pc, #192]	; (8002f08 <drow_game+0x2a0>)
 8002e48:	4613      	mov	r3, r2
 8002e4a:	00db      	lsls	r3, r3, #3
 8002e4c:	4413      	add	r3, r2
 8002e4e:	009b      	lsls	r3, r3, #2
 8002e50:	4423      	add	r3, r4
 8002e52:	3310      	adds	r3, #16
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	2301      	movs	r3, #1
 8002e58:	9301      	str	r3, [sp, #4]
 8002e5a:	2307      	movs	r3, #7
 8002e5c:	9300      	str	r3, [sp, #0]
 8002e5e:	2303      	movs	r3, #3
 8002e60:	f7fd ff9e 	bl	8000da0 <GFX_DrowBitMap_P>
			if(enemies[i].type == et_bobber)
 8002e64:	79fa      	ldrb	r2, [r7, #7]
 8002e66:	4928      	ldr	r1, [pc, #160]	; (8002f08 <drow_game+0x2a0>)
 8002e68:	4613      	mov	r3, r2
 8002e6a:	00db      	lsls	r3, r3, #3
 8002e6c:	4413      	add	r3, r2
 8002e6e:	009b      	lsls	r3, r3, #2
 8002e70:	440b      	add	r3, r1
 8002e72:	330c      	adds	r3, #12
 8002e74:	781b      	ldrb	r3, [r3, #0]
 8002e76:	2b02      	cmp	r3, #2
 8002e78:	d121      	bne.n	8002ebe <drow_game+0x256>
				GFX_DrowBitMap_P(enemies[i].x, enemies[i].y, enemies[i].bit_map,5,5,1);
 8002e7a:	79fa      	ldrb	r2, [r7, #7]
 8002e7c:	4922      	ldr	r1, [pc, #136]	; (8002f08 <drow_game+0x2a0>)
 8002e7e:	4613      	mov	r3, r2
 8002e80:	00db      	lsls	r3, r3, #3
 8002e82:	4413      	add	r3, r2
 8002e84:	009b      	lsls	r3, r3, #2
 8002e86:	440b      	add	r3, r1
 8002e88:	3304      	adds	r3, #4
 8002e8a:	6818      	ldr	r0, [r3, #0]
 8002e8c:	79fa      	ldrb	r2, [r7, #7]
 8002e8e:	491e      	ldr	r1, [pc, #120]	; (8002f08 <drow_game+0x2a0>)
 8002e90:	4613      	mov	r3, r2
 8002e92:	00db      	lsls	r3, r3, #3
 8002e94:	4413      	add	r3, r2
 8002e96:	009b      	lsls	r3, r3, #2
 8002e98:	440b      	add	r3, r1
 8002e9a:	3308      	adds	r3, #8
 8002e9c:	6819      	ldr	r1, [r3, #0]
 8002e9e:	79fa      	ldrb	r2, [r7, #7]
 8002ea0:	4c19      	ldr	r4, [pc, #100]	; (8002f08 <drow_game+0x2a0>)
 8002ea2:	4613      	mov	r3, r2
 8002ea4:	00db      	lsls	r3, r3, #3
 8002ea6:	4413      	add	r3, r2
 8002ea8:	009b      	lsls	r3, r3, #2
 8002eaa:	4423      	add	r3, r4
 8002eac:	3310      	adds	r3, #16
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	9301      	str	r3, [sp, #4]
 8002eb4:	2305      	movs	r3, #5
 8002eb6:	9300      	str	r3, [sp, #0]
 8002eb8:	2305      	movs	r3, #5
 8002eba:	f7fd ff71 	bl	8000da0 <GFX_DrowBitMap_P>
	for(i = 0; i < num_enemies; i++)
 8002ebe:	79fb      	ldrb	r3, [r7, #7]
 8002ec0:	3301      	adds	r3, #1
 8002ec2:	71fb      	strb	r3, [r7, #7]
 8002ec4:	79fb      	ldrb	r3, [r7, #7]
 8002ec6:	2b09      	cmp	r3, #9
 8002ec8:	f67f af67 	bls.w	8002d9a <drow_game+0x132>
		}
	}
	//Rysowanie grafiki gracza
	GFX_DrowBitMap_P(player.x,player.y,player_map,11,11,1);
 8002ecc:	4b07      	ldr	r3, [pc, #28]	; (8002eec <drow_game+0x284>)
 8002ece:	6818      	ldr	r0, [r3, #0]
 8002ed0:	4b06      	ldr	r3, [pc, #24]	; (8002eec <drow_game+0x284>)
 8002ed2:	6859      	ldr	r1, [r3, #4]
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	9301      	str	r3, [sp, #4]
 8002ed8:	230b      	movs	r3, #11
 8002eda:	9300      	str	r3, [sp, #0]
 8002edc:	230b      	movs	r3, #11
 8002ede:	4a0b      	ldr	r2, [pc, #44]	; (8002f0c <drow_game+0x2a4>)
 8002ee0:	f7fd ff5e 	bl	8000da0 <GFX_DrowBitMap_P>

	//Rysowanie tła
	for(i = 0; i < num_backgrand; i++)
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	71fb      	strb	r3, [r7, #7]
 8002ee8:	e045      	b.n	8002f76 <drow_game+0x30e>
 8002eea:	bf00      	nop
 8002eec:	20000168 	.word	0x20000168
 8002ef0:	080094d0 	.word	0x080094d0
 8002ef4:	080094b8 	.word	0x080094b8
 8002ef8:	20000188 	.word	0x20000188
 8002efc:	0800949c 	.word	0x0800949c
 8002f00:	200015b0 	.word	0x200015b0
 8002f04:	20000444 	.word	0x20000444
 8002f08:	200004a8 	.word	0x200004a8
 8002f0c:	080094a0 	.word	0x080094a0
	{
		if(backgrand[i].active)
 8002f10:	79fa      	ldrb	r2, [r7, #7]
 8002f12:	494c      	ldr	r1, [pc, #304]	; (8003044 <drow_game+0x3dc>)
 8002f14:	4613      	mov	r3, r2
 8002f16:	009b      	lsls	r3, r3, #2
 8002f18:	4413      	add	r3, r2
 8002f1a:	009b      	lsls	r3, r3, #2
 8002f1c:	440b      	add	r3, r1
 8002f1e:	781b      	ldrb	r3, [r3, #0]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d025      	beq.n	8002f70 <drow_game+0x308>
		{
			ssd1327_setPixel(backgrand[i].x, backgrand[i].y,(rand()%15));
 8002f24:	79fa      	ldrb	r2, [r7, #7]
 8002f26:	4947      	ldr	r1, [pc, #284]	; (8003044 <drow_game+0x3dc>)
 8002f28:	4613      	mov	r3, r2
 8002f2a:	009b      	lsls	r3, r3, #2
 8002f2c:	4413      	add	r3, r2
 8002f2e:	009b      	lsls	r3, r3, #2
 8002f30:	440b      	add	r3, r1
 8002f32:	3304      	adds	r3, #4
 8002f34:	681c      	ldr	r4, [r3, #0]
 8002f36:	79fa      	ldrb	r2, [r7, #7]
 8002f38:	4942      	ldr	r1, [pc, #264]	; (8003044 <drow_game+0x3dc>)
 8002f3a:	4613      	mov	r3, r2
 8002f3c:	009b      	lsls	r3, r3, #2
 8002f3e:	4413      	add	r3, r2
 8002f40:	009b      	lsls	r3, r3, #2
 8002f42:	440b      	add	r3, r1
 8002f44:	3308      	adds	r3, #8
 8002f46:	681d      	ldr	r5, [r3, #0]
 8002f48:	f004 f89c 	bl	8007084 <rand>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	4b3e      	ldr	r3, [pc, #248]	; (8003048 <drow_game+0x3e0>)
 8002f50:	fb83 1302 	smull	r1, r3, r3, r2
 8002f54:	4413      	add	r3, r2
 8002f56:	10d9      	asrs	r1, r3, #3
 8002f58:	17d3      	asrs	r3, r2, #31
 8002f5a:	1ac9      	subs	r1, r1, r3
 8002f5c:	460b      	mov	r3, r1
 8002f5e:	011b      	lsls	r3, r3, #4
 8002f60:	1a5b      	subs	r3, r3, r1
 8002f62:	1ad1      	subs	r1, r2, r3
 8002f64:	b2cb      	uxtb	r3, r1
 8002f66:	461a      	mov	r2, r3
 8002f68:	4629      	mov	r1, r5
 8002f6a:	4620      	mov	r0, r4
 8002f6c:	f000 fd34 	bl	80039d8 <ssd1327_setPixel>
	for(i = 0; i < num_backgrand; i++)
 8002f70:	79fb      	ldrb	r3, [r7, #7]
 8002f72:	3301      	adds	r3, #1
 8002f74:	71fb      	strb	r3, [r7, #7]
 8002f76:	79fb      	ldrb	r3, [r7, #7]
 8002f78:	2bc7      	cmp	r3, #199	; 0xc7
 8002f7a:	d9c9      	bls.n	8002f10 <drow_game+0x2a8>
		}
	}

	//Rysowanie bosów
	if(boss.active && player.game_progres == 30)
 8002f7c:	4b33      	ldr	r3, [pc, #204]	; (800304c <drow_game+0x3e4>)
 8002f7e:	781b      	ldrb	r3, [r3, #0]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d00f      	beq.n	8002fa4 <drow_game+0x33c>
 8002f84:	4b32      	ldr	r3, [pc, #200]	; (8003050 <drow_game+0x3e8>)
 8002f86:	699b      	ldr	r3, [r3, #24]
 8002f88:	2b1e      	cmp	r3, #30
 8002f8a:	d10b      	bne.n	8002fa4 <drow_game+0x33c>
		GFX_DrowBitMap_P(boss.x, boss.y, boss_map_1,10,18,1);
 8002f8c:	4b2f      	ldr	r3, [pc, #188]	; (800304c <drow_game+0x3e4>)
 8002f8e:	6858      	ldr	r0, [r3, #4]
 8002f90:	4b2e      	ldr	r3, [pc, #184]	; (800304c <drow_game+0x3e4>)
 8002f92:	6899      	ldr	r1, [r3, #8]
 8002f94:	2301      	movs	r3, #1
 8002f96:	9301      	str	r3, [sp, #4]
 8002f98:	2312      	movs	r3, #18
 8002f9a:	9300      	str	r3, [sp, #0]
 8002f9c:	230a      	movs	r3, #10
 8002f9e:	4a2d      	ldr	r2, [pc, #180]	; (8003054 <drow_game+0x3ec>)
 8002fa0:	f7fd fefe 	bl	8000da0 <GFX_DrowBitMap_P>
	if(boss.active && player.game_progres == 60)
 8002fa4:	4b29      	ldr	r3, [pc, #164]	; (800304c <drow_game+0x3e4>)
 8002fa6:	781b      	ldrb	r3, [r3, #0]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d00f      	beq.n	8002fcc <drow_game+0x364>
 8002fac:	4b28      	ldr	r3, [pc, #160]	; (8003050 <drow_game+0x3e8>)
 8002fae:	699b      	ldr	r3, [r3, #24]
 8002fb0:	2b3c      	cmp	r3, #60	; 0x3c
 8002fb2:	d10b      	bne.n	8002fcc <drow_game+0x364>
		GFX_DrowBitMap_P(boss.x, boss.y, boss_map_2, 10, 18, 1);
 8002fb4:	4b25      	ldr	r3, [pc, #148]	; (800304c <drow_game+0x3e4>)
 8002fb6:	6858      	ldr	r0, [r3, #4]
 8002fb8:	4b24      	ldr	r3, [pc, #144]	; (800304c <drow_game+0x3e4>)
 8002fba:	6899      	ldr	r1, [r3, #8]
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	9301      	str	r3, [sp, #4]
 8002fc0:	2312      	movs	r3, #18
 8002fc2:	9300      	str	r3, [sp, #0]
 8002fc4:	230a      	movs	r3, #10
 8002fc6:	4a24      	ldr	r2, [pc, #144]	; (8003058 <drow_game+0x3f0>)
 8002fc8:	f7fd feea 	bl	8000da0 <GFX_DrowBitMap_P>

	//Rysowanie bonusów
	for(i = 0; i < num_bonus; i++)
 8002fcc:	2300      	movs	r3, #0
 8002fce:	71fb      	strb	r3, [r7, #7]
 8002fd0:	e026      	b.n	8003020 <drow_game+0x3b8>
	{
		if(bonuses[i].active)
 8002fd2:	79fa      	ldrb	r2, [r7, #7]
 8002fd4:	4921      	ldr	r1, [pc, #132]	; (800305c <drow_game+0x3f4>)
 8002fd6:	4613      	mov	r3, r2
 8002fd8:	00db      	lsls	r3, r3, #3
 8002fda:	1a9b      	subs	r3, r3, r2
 8002fdc:	009b      	lsls	r3, r3, #2
 8002fde:	440b      	add	r3, r1
 8002fe0:	781b      	ldrb	r3, [r3, #0]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d019      	beq.n	800301a <drow_game+0x3b2>
			GFX_DrowBitMap_P(bonuses[i].x, bonuses[i].y, bonus_live_map, 7, 6, 1);
 8002fe6:	79fa      	ldrb	r2, [r7, #7]
 8002fe8:	491c      	ldr	r1, [pc, #112]	; (800305c <drow_game+0x3f4>)
 8002fea:	4613      	mov	r3, r2
 8002fec:	00db      	lsls	r3, r3, #3
 8002fee:	1a9b      	subs	r3, r3, r2
 8002ff0:	009b      	lsls	r3, r3, #2
 8002ff2:	440b      	add	r3, r1
 8002ff4:	3304      	adds	r3, #4
 8002ff6:	6818      	ldr	r0, [r3, #0]
 8002ff8:	79fa      	ldrb	r2, [r7, #7]
 8002ffa:	4918      	ldr	r1, [pc, #96]	; (800305c <drow_game+0x3f4>)
 8002ffc:	4613      	mov	r3, r2
 8002ffe:	00db      	lsls	r3, r3, #3
 8003000:	1a9b      	subs	r3, r3, r2
 8003002:	009b      	lsls	r3, r3, #2
 8003004:	440b      	add	r3, r1
 8003006:	3308      	adds	r3, #8
 8003008:	6819      	ldr	r1, [r3, #0]
 800300a:	2301      	movs	r3, #1
 800300c:	9301      	str	r3, [sp, #4]
 800300e:	2306      	movs	r3, #6
 8003010:	9300      	str	r3, [sp, #0]
 8003012:	2307      	movs	r3, #7
 8003014:	4a12      	ldr	r2, [pc, #72]	; (8003060 <drow_game+0x3f8>)
 8003016:	f7fd fec3 	bl	8000da0 <GFX_DrowBitMap_P>
	for(i = 0; i < num_bonus; i++)
 800301a:	79fb      	ldrb	r3, [r7, #7]
 800301c:	3301      	adds	r3, #1
 800301e:	71fb      	strb	r3, [r7, #7]
 8003020:	79fb      	ldrb	r3, [r7, #7]
 8003022:	2b04      	cmp	r3, #4
 8003024:	d9d5      	bls.n	8002fd2 <drow_game+0x36a>
	}

	// DEBUG VALUE
	GFX_PutInt(0, 100, debug_value, 1, 1, 0);
 8003026:	4b0f      	ldr	r3, [pc, #60]	; (8003064 <drow_game+0x3fc>)
 8003028:	681a      	ldr	r2, [r3, #0]
 800302a:	2300      	movs	r3, #0
 800302c:	9301      	str	r3, [sp, #4]
 800302e:	2301      	movs	r3, #1
 8003030:	9300      	str	r3, [sp, #0]
 8003032:	2301      	movs	r3, #1
 8003034:	2164      	movs	r1, #100	; 0x64
 8003036:	2000      	movs	r0, #0
 8003038:	f7fe f844 	bl	80010c4 <GFX_PutInt>

}
 800303c:	bf00      	nop
 800303e:	3708      	adds	r7, #8
 8003040:	46bd      	mov	sp, r7
 8003042:	bdb0      	pop	{r4, r5, r7, pc}
 8003044:	20000610 	.word	0x20000610
 8003048:	88888889 	.word	0x88888889
 800304c:	200015b0 	.word	0x200015b0
 8003050:	20000168 	.word	0x20000168
 8003054:	080096b4 	.word	0x080096b4
 8003058:	080096d8 	.word	0x080096d8
 800305c:	200015cc 	.word	0x200015cc
 8003060:	080096fc 	.word	0x080096fc
 8003064:	2000165c 	.word	0x2000165c

08003068 <run_game>:

void run_game (void)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	af00      	add	r7, sp, #0
	/*
	 * G��wna p�tla gry, czyli wykonywanie po kolei odpowiednich sekwencji.
	 */
	drow_game();
 800306c:	f7ff fdfc 	bl	8002c68 <drow_game>
	ssd1327_display();
 8003070:	f000 fc6e 	bl	8003950 <ssd1327_display>
	ssd1327_CLR();
 8003074:	f000 fca4 	bl	80039c0 <ssd1327_CLR>

	update_lvl();
 8003078:	f7fe fbd4 	bl	8001824 <update_lvl>
	update_scene();
 800307c:	f7fe fea2 	bl	8001dc4 <update_scene>
	update_backgrand();
 8003080:	f7fe fb3e 	bl	8001700 <update_backgrand>
	update_bonus();
 8003084:	f000 fa60 	bl	8003548 <update_bonus>

}
 8003088:	bf00      	nop
 800308a:	bd80      	pop	{r7, pc}

0800308c <run_menu>:

void run_menu (void)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b082      	sub	sp, #8
 8003090:	af02      	add	r7, sp, #8
	/*
	 * Startowy ekran, podstawowe info. dla gracza na pocz�tku
	 */
	static int x = 0, dx = 1;
	x += dx;
 8003092:	4b22      	ldr	r3, [pc, #136]	; (800311c <run_menu+0x90>)
 8003094:	681a      	ldr	r2, [r3, #0]
 8003096:	4b22      	ldr	r3, [pc, #136]	; (8003120 <run_menu+0x94>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4413      	add	r3, r2
 800309c:	4a1f      	ldr	r2, [pc, #124]	; (800311c <run_menu+0x90>)
 800309e:	6013      	str	r3, [r2, #0]
	if (x < 1 || x > 65) dx = -dx;
 80030a0:	4b1e      	ldr	r3, [pc, #120]	; (800311c <run_menu+0x90>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	dd03      	ble.n	80030b0 <run_menu+0x24>
 80030a8:	4b1c      	ldr	r3, [pc, #112]	; (800311c <run_menu+0x90>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	2b41      	cmp	r3, #65	; 0x41
 80030ae:	dd04      	ble.n	80030ba <run_menu+0x2e>
 80030b0:	4b1b      	ldr	r3, [pc, #108]	; (8003120 <run_menu+0x94>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	425b      	negs	r3, r3
 80030b6:	4a1a      	ldr	r2, [pc, #104]	; (8003120 <run_menu+0x94>)
 80030b8:	6013      	str	r3, [r2, #0]
	ssd1327_CLR();
 80030ba:	f000 fc81 	bl	80039c0 <ssd1327_CLR>

	GFX_DrowBitMap_P(x,(screen_height/2) - 10,uGalaxy_map,54,16,1);
 80030be:	4b17      	ldr	r3, [pc, #92]	; (800311c <run_menu+0x90>)
 80030c0:	6818      	ldr	r0, [r3, #0]
 80030c2:	2301      	movs	r3, #1
 80030c4:	9301      	str	r3, [sp, #4]
 80030c6:	2310      	movs	r3, #16
 80030c8:	9300      	str	r3, [sp, #0]
 80030ca:	2336      	movs	r3, #54	; 0x36
 80030cc:	4a15      	ldr	r2, [pc, #84]	; (8003124 <run_menu+0x98>)
 80030ce:	2136      	movs	r1, #54	; 0x36
 80030d0:	f7fd fe66 	bl	8000da0 <GFX_DrowBitMap_P>
	GFX_DrowRoundRect(15,(screen_height/2) + 34,93,20,8,1);
 80030d4:	2301      	movs	r3, #1
 80030d6:	9301      	str	r3, [sp, #4]
 80030d8:	2308      	movs	r3, #8
 80030da:	9300      	str	r3, [sp, #0]
 80030dc:	2314      	movs	r3, #20
 80030de:	225d      	movs	r2, #93	; 0x5d
 80030e0:	2162      	movs	r1, #98	; 0x62
 80030e2:	200f      	movs	r0, #15
 80030e4:	f7fe f80e 	bl	8001104 <GFX_DrowRoundRect>
	GFX_DrowBitMap_P(26, (screen_height/2)+ 37, PressToStart_map, 66,10,1);
 80030e8:	2301      	movs	r3, #1
 80030ea:	9301      	str	r3, [sp, #4]
 80030ec:	230a      	movs	r3, #10
 80030ee:	9300      	str	r3, [sp, #0]
 80030f0:	2342      	movs	r3, #66	; 0x42
 80030f2:	4a0d      	ldr	r2, [pc, #52]	; (8003128 <run_menu+0x9c>)
 80030f4:	2165      	movs	r1, #101	; 0x65
 80030f6:	201a      	movs	r0, #26
 80030f8:	f7fd fe52 	bl	8000da0 <GFX_DrowBitMap_P>

	if(button_pressed())
 80030fc:	f000 fb36 	bl	800376c <button_pressed>
 8003100:	4603      	mov	r3, r0
 8003102:	2b00      	cmp	r3, #0
 8003104:	d004      	beq.n	8003110 <run_menu+0x84>
	{
		start_game();
 8003106:	f000 f813 	bl	8003130 <start_game>
		state = st_playing;
 800310a:	4b08      	ldr	r3, [pc, #32]	; (800312c <run_menu+0xa0>)
 800310c:	2201      	movs	r2, #1
 800310e:	701a      	strb	r2, [r3, #0]
	}
	ssd1327_display();
 8003110:	f000 fc1e 	bl	8003950 <ssd1327_display>

}
 8003114:	bf00      	nop
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}
 800311a:	bf00      	nop
 800311c:	2000166c 	.word	0x2000166c
 8003120:	20000008 	.word	0x20000008
 8003124:	0800959c 	.word	0x0800959c
 8003128:	0800960c 	.word	0x0800960c
 800312c:	20001658 	.word	0x20001658

08003130 <start_game>:

void start_game(void)
{
 8003130:	b480      	push	{r7}
 8003132:	b083      	sub	sp, #12
 8003134:	af00      	add	r7, sp, #0
	 * startowych dla gracza jak i ustawnie pierwszego bosa.
	 * Co więcej "resetuje" ona tablice pocisków, przeciwników i bonosów
	 */
	uint8_t i;
	//Ustawiniania początkowe gracza
	player.lives = initial_lives;
 8003136:	4b44      	ldr	r3, [pc, #272]	; (8003248 <start_game+0x118>)
 8003138:	220a      	movs	r2, #10
 800313a:	611a      	str	r2, [r3, #16]
	player.score = initial_score;
 800313c:	4b42      	ldr	r3, [pc, #264]	; (8003248 <start_game+0x118>)
 800313e:	2200      	movs	r2, #0
 8003140:	609a      	str	r2, [r3, #8]
	player.x = initial_x;
 8003142:	4b41      	ldr	r3, [pc, #260]	; (8003248 <start_game+0x118>)
 8003144:	2202      	movs	r2, #2
 8003146:	601a      	str	r2, [r3, #0]
	player.y = initial_y;
 8003148:	4b3f      	ldr	r3, [pc, #252]	; (8003248 <start_game+0x118>)
 800314a:	2240      	movs	r2, #64	; 0x40
 800314c:	605a      	str	r2, [r3, #4]
	player.level = initial_level;
 800314e:	4b3e      	ldr	r3, [pc, #248]	; (8003248 <start_game+0x118>)
 8003150:	2201      	movs	r2, #1
 8003152:	615a      	str	r2, [r3, #20]
	player.game_progres = initial_game_progres;
 8003154:	4b3c      	ldr	r3, [pc, #240]	; (8003248 <start_game+0x118>)
 8003156:	2200      	movs	r2, #0
 8003158:	619a      	str	r2, [r3, #24]
	player.shoot_type = st_tracker;
 800315a:	4b3b      	ldr	r3, [pc, #236]	; (8003248 <start_game+0x118>)
 800315c:	2201      	movs	r2, #1
 800315e:	771a      	strb	r2, [r3, #28]

	//Dezaktywacja pocisków gracza
	for (i = 0; i < num_shots; ++i)
 8003160:	2300      	movs	r3, #0
 8003162:	71fb      	strb	r3, [r7, #7]
 8003164:	e00b      	b.n	800317e <start_game+0x4e>
		shoots[i].active = false;
 8003166:	79fa      	ldrb	r2, [r7, #7]
 8003168:	4938      	ldr	r1, [pc, #224]	; (800324c <start_game+0x11c>)
 800316a:	4613      	mov	r3, r2
 800316c:	009b      	lsls	r3, r3, #2
 800316e:	4413      	add	r3, r2
 8003170:	009b      	lsls	r3, r3, #2
 8003172:	440b      	add	r3, r1
 8003174:	2200      	movs	r2, #0
 8003176:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < num_shots; ++i)
 8003178:	79fb      	ldrb	r3, [r7, #7]
 800317a:	3301      	adds	r3, #1
 800317c:	71fb      	strb	r3, [r7, #7]
 800317e:	79fb      	ldrb	r3, [r7, #7]
 8003180:	2b22      	cmp	r3, #34	; 0x22
 8003182:	d9f0      	bls.n	8003166 <start_game+0x36>

	//Dezaktywacja pocisków bosa
	for (i = 0; i < num_boss_shots; ++i)
 8003184:	2300      	movs	r3, #0
 8003186:	71fb      	strb	r3, [r7, #7]
 8003188:	e00b      	b.n	80031a2 <start_game+0x72>
		boss_shots[i].active = false;
 800318a:	79fa      	ldrb	r2, [r7, #7]
 800318c:	4930      	ldr	r1, [pc, #192]	; (8003250 <start_game+0x120>)
 800318e:	4613      	mov	r3, r2
 8003190:	009b      	lsls	r3, r3, #2
 8003192:	4413      	add	r3, r2
 8003194:	009b      	lsls	r3, r3, #2
 8003196:	440b      	add	r3, r1
 8003198:	2200      	movs	r2, #0
 800319a:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < num_boss_shots; ++i)
 800319c:	79fb      	ldrb	r3, [r7, #7]
 800319e:	3301      	adds	r3, #1
 80031a0:	71fb      	strb	r3, [r7, #7]
 80031a2:	79fb      	ldrb	r3, [r7, #7]
 80031a4:	2b04      	cmp	r3, #4
 80031a6:	d9f0      	bls.n	800318a <start_game+0x5a>

	//Dezaktywacja przeciwników
	for (i = 0; i < num_enemies; i++)
 80031a8:	2300      	movs	r3, #0
 80031aa:	71fb      	strb	r3, [r7, #7]
 80031ac:	e01f      	b.n	80031ee <start_game+0xbe>
	{
		enemies[i].active = false;
 80031ae:	79fa      	ldrb	r2, [r7, #7]
 80031b0:	4928      	ldr	r1, [pc, #160]	; (8003254 <start_game+0x124>)
 80031b2:	4613      	mov	r3, r2
 80031b4:	00db      	lsls	r3, r3, #3
 80031b6:	4413      	add	r3, r2
 80031b8:	009b      	lsls	r3, r3, #2
 80031ba:	440b      	add	r3, r1
 80031bc:	2200      	movs	r2, #0
 80031be:	701a      	strb	r2, [r3, #0]
		enemies[i].truck_number = 0;
 80031c0:	79fa      	ldrb	r2, [r7, #7]
 80031c2:	4924      	ldr	r1, [pc, #144]	; (8003254 <start_game+0x124>)
 80031c4:	4613      	mov	r3, r2
 80031c6:	00db      	lsls	r3, r3, #3
 80031c8:	4413      	add	r3, r2
 80031ca:	009b      	lsls	r3, r3, #2
 80031cc:	440b      	add	r3, r1
 80031ce:	3320      	adds	r3, #32
 80031d0:	2200      	movs	r2, #0
 80031d2:	601a      	str	r2, [r3, #0]
		enemies[i].tracked_by_missile = false;
 80031d4:	79fa      	ldrb	r2, [r7, #7]
 80031d6:	491f      	ldr	r1, [pc, #124]	; (8003254 <start_game+0x124>)
 80031d8:	4613      	mov	r3, r2
 80031da:	00db      	lsls	r3, r3, #3
 80031dc:	4413      	add	r3, r2
 80031de:	009b      	lsls	r3, r3, #2
 80031e0:	440b      	add	r3, r1
 80031e2:	331c      	adds	r3, #28
 80031e4:	2200      	movs	r2, #0
 80031e6:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < num_enemies; i++)
 80031e8:	79fb      	ldrb	r3, [r7, #7]
 80031ea:	3301      	adds	r3, #1
 80031ec:	71fb      	strb	r3, [r7, #7]
 80031ee:	79fb      	ldrb	r3, [r7, #7]
 80031f0:	2b09      	cmp	r3, #9
 80031f2:	d9dc      	bls.n	80031ae <start_game+0x7e>
	}

	//Dezaktywacja bonusów
	for (i = 0; i < num_bonus; i++)
 80031f4:	2300      	movs	r3, #0
 80031f6:	71fb      	strb	r3, [r7, #7]
 80031f8:	e00b      	b.n	8003212 <start_game+0xe2>
		bonuses[i].active = false;
 80031fa:	79fa      	ldrb	r2, [r7, #7]
 80031fc:	4916      	ldr	r1, [pc, #88]	; (8003258 <start_game+0x128>)
 80031fe:	4613      	mov	r3, r2
 8003200:	00db      	lsls	r3, r3, #3
 8003202:	1a9b      	subs	r3, r3, r2
 8003204:	009b      	lsls	r3, r3, #2
 8003206:	440b      	add	r3, r1
 8003208:	2200      	movs	r2, #0
 800320a:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < num_bonus; i++)
 800320c:	79fb      	ldrb	r3, [r7, #7]
 800320e:	3301      	adds	r3, #1
 8003210:	71fb      	strb	r3, [r7, #7]
 8003212:	79fb      	ldrb	r3, [r7, #7]
 8003214:	2b04      	cmp	r3, #4
 8003216:	d9f0      	bls.n	80031fa <start_game+0xca>

	//Dezaktywacja bossa
	boss.active = false;
 8003218:	4b10      	ldr	r3, [pc, #64]	; (800325c <start_game+0x12c>)
 800321a:	2200      	movs	r2, #0
 800321c:	701a      	strb	r2, [r3, #0]
	boss.lives = 6;
 800321e:	4b0f      	ldr	r3, [pc, #60]	; (800325c <start_game+0x12c>)
 8003220:	2206      	movs	r2, #6
 8003222:	615a      	str	r2, [r3, #20]
	boss.level = 1;
 8003224:	4b0d      	ldr	r3, [pc, #52]	; (800325c <start_game+0x12c>)
 8003226:	2201      	movs	r2, #1
 8003228:	619a      	str	r2, [r3, #24]
	boss.x = 140;
 800322a:	4b0c      	ldr	r3, [pc, #48]	; (800325c <start_game+0x12c>)
 800322c:	228c      	movs	r2, #140	; 0x8c
 800322e:	605a      	str	r2, [r3, #4]
	boss.y = 32;
 8003230:	4b0a      	ldr	r3, [pc, #40]	; (800325c <start_game+0x12c>)
 8003232:	2220      	movs	r2, #32
 8003234:	609a      	str	r2, [r3, #8]
	boss.update_delay = 3;
 8003236:	4b09      	ldr	r3, [pc, #36]	; (800325c <start_game+0x12c>)
 8003238:	2203      	movs	r2, #3
 800323a:	611a      	str	r2, [r3, #16]

}
 800323c:	bf00      	nop
 800323e:	370c      	adds	r7, #12
 8003240:	46bd      	mov	sp, r7
 8003242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003246:	4770      	bx	lr
 8003248:	20000168 	.word	0x20000168
 800324c:	20000188 	.word	0x20000188
 8003250:	20000444 	.word	0x20000444
 8003254:	200004a8 	.word	0x200004a8
 8003258:	200015cc 	.word	0x200015cc
 800325c:	200015b0 	.word	0x200015b0

08003260 <add_enemy>:

void add_enemy(void)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b082      	sub	sp, #8
 8003264:	af00      	add	r7, sp, #0
	 * grafika, typ.
	 */
	uint8_t i;
	uint8_t enemy_type;

	for(i = 0; i < player.level; i++)
 8003266:	2300      	movs	r3, #0
 8003268:	71fb      	strb	r3, [r7, #7]
 800326a:	e0f0      	b.n	800344e <add_enemy+0x1ee>
	{
		if(!enemies[i].active)
 800326c:	79fa      	ldrb	r2, [r7, #7]
 800326e:	497e      	ldr	r1, [pc, #504]	; (8003468 <add_enemy+0x208>)
 8003270:	4613      	mov	r3, r2
 8003272:	00db      	lsls	r3, r3, #3
 8003274:	4413      	add	r3, r2
 8003276:	009b      	lsls	r3, r3, #2
 8003278:	440b      	add	r3, r1
 800327a:	781b      	ldrb	r3, [r3, #0]
 800327c:	f083 0301 	eor.w	r3, r3, #1
 8003280:	b2db      	uxtb	r3, r3
 8003282:	2b00      	cmp	r3, #0
 8003284:	f000 80e0 	beq.w	8003448 <add_enemy+0x1e8>
		{
			enemies[i].active = true;
 8003288:	79fa      	ldrb	r2, [r7, #7]
 800328a:	4977      	ldr	r1, [pc, #476]	; (8003468 <add_enemy+0x208>)
 800328c:	4613      	mov	r3, r2
 800328e:	00db      	lsls	r3, r3, #3
 8003290:	4413      	add	r3, r2
 8003292:	009b      	lsls	r3, r3, #2
 8003294:	440b      	add	r3, r1
 8003296:	2201      	movs	r2, #1
 8003298:	701a      	strb	r2, [r3, #0]
			enemies[i].x = 140;			//pozycja startowa przeciwnika
 800329a:	79fa      	ldrb	r2, [r7, #7]
 800329c:	4972      	ldr	r1, [pc, #456]	; (8003468 <add_enemy+0x208>)
 800329e:	4613      	mov	r3, r2
 80032a0:	00db      	lsls	r3, r3, #3
 80032a2:	4413      	add	r3, r2
 80032a4:	009b      	lsls	r3, r3, #2
 80032a6:	440b      	add	r3, r1
 80032a8:	3304      	adds	r3, #4
 80032aa:	228c      	movs	r2, #140	; 0x8c
 80032ac:	601a      	str	r2, [r3, #0]
			enemies[i].y = ((rand()%(screen_height - 10))+10);
 80032ae:	f003 fee9 	bl	8007084 <rand>
 80032b2:	4602      	mov	r2, r0
 80032b4:	4b6d      	ldr	r3, [pc, #436]	; (800346c <add_enemy+0x20c>)
 80032b6:	fb83 1302 	smull	r1, r3, r3, r2
 80032ba:	1119      	asrs	r1, r3, #4
 80032bc:	17d3      	asrs	r3, r2, #31
 80032be:	1acb      	subs	r3, r1, r3
 80032c0:	2176      	movs	r1, #118	; 0x76
 80032c2:	fb01 f303 	mul.w	r3, r1, r3
 80032c6:	1ad3      	subs	r3, r2, r3
 80032c8:	79fa      	ldrb	r2, [r7, #7]
 80032ca:	f103 010a 	add.w	r1, r3, #10
 80032ce:	4866      	ldr	r0, [pc, #408]	; (8003468 <add_enemy+0x208>)
 80032d0:	4613      	mov	r3, r2
 80032d2:	00db      	lsls	r3, r3, #3
 80032d4:	4413      	add	r3, r2
 80032d6:	009b      	lsls	r3, r3, #2
 80032d8:	4403      	add	r3, r0
 80032da:	3308      	adds	r3, #8
 80032dc:	6019      	str	r1, [r3, #0]
			enemies[i].tracked_by_missile = false;
 80032de:	79fa      	ldrb	r2, [r7, #7]
 80032e0:	4961      	ldr	r1, [pc, #388]	; (8003468 <add_enemy+0x208>)
 80032e2:	4613      	mov	r3, r2
 80032e4:	00db      	lsls	r3, r3, #3
 80032e6:	4413      	add	r3, r2
 80032e8:	009b      	lsls	r3, r3, #2
 80032ea:	440b      	add	r3, r1
 80032ec:	331c      	adds	r3, #28
 80032ee:	2200      	movs	r2, #0
 80032f0:	701a      	strb	r2, [r3, #0]
			enemies[i].truck_number = 0;
 80032f2:	79fa      	ldrb	r2, [r7, #7]
 80032f4:	495c      	ldr	r1, [pc, #368]	; (8003468 <add_enemy+0x208>)
 80032f6:	4613      	mov	r3, r2
 80032f8:	00db      	lsls	r3, r3, #3
 80032fa:	4413      	add	r3, r2
 80032fc:	009b      	lsls	r3, r3, #2
 80032fe:	440b      	add	r3, r1
 8003300:	3320      	adds	r3, #32
 8003302:	2200      	movs	r2, #0
 8003304:	601a      	str	r2, [r3, #0]

			enemy_type = (rand()%100);
 8003306:	f003 febd 	bl	8007084 <rand>
 800330a:	4603      	mov	r3, r0
 800330c:	4a58      	ldr	r2, [pc, #352]	; (8003470 <add_enemy+0x210>)
 800330e:	fb82 1203 	smull	r1, r2, r2, r3
 8003312:	1151      	asrs	r1, r2, #5
 8003314:	17da      	asrs	r2, r3, #31
 8003316:	1a8a      	subs	r2, r1, r2
 8003318:	2164      	movs	r1, #100	; 0x64
 800331a:	fb01 f202 	mul.w	r2, r1, r2
 800331e:	1a9a      	subs	r2, r3, r2
 8003320:	4613      	mov	r3, r2
 8003322:	71bb      	strb	r3, [r7, #6]

			if((enemy_type > 50))				//rodzaj przeciwnika
 8003324:	79bb      	ldrb	r3, [r7, #6]
 8003326:	2b32      	cmp	r3, #50	; 0x32
 8003328:	d928      	bls.n	800337c <add_enemy+0x11c>
			{

				enemies[i].type = et_diver;
 800332a:	79fa      	ldrb	r2, [r7, #7]
 800332c:	494e      	ldr	r1, [pc, #312]	; (8003468 <add_enemy+0x208>)
 800332e:	4613      	mov	r3, r2
 8003330:	00db      	lsls	r3, r3, #3
 8003332:	4413      	add	r3, r2
 8003334:	009b      	lsls	r3, r3, #2
 8003336:	440b      	add	r3, r1
 8003338:	330c      	adds	r3, #12
 800333a:	2200      	movs	r2, #0
 800333c:	701a      	strb	r2, [r3, #0]
				enemies[i].update_delay = (rand()%3);	//ustawinie predkosci (mniej = szybciej)
 800333e:	f003 fea1 	bl	8007084 <rand>
 8003342:	4601      	mov	r1, r0
 8003344:	79f8      	ldrb	r0, [r7, #7]
 8003346:	4b4b      	ldr	r3, [pc, #300]	; (8003474 <add_enemy+0x214>)
 8003348:	fb83 3201 	smull	r3, r2, r3, r1
 800334c:	17cb      	asrs	r3, r1, #31
 800334e:	1ad2      	subs	r2, r2, r3
 8003350:	4613      	mov	r3, r2
 8003352:	005b      	lsls	r3, r3, #1
 8003354:	4413      	add	r3, r2
 8003356:	1aca      	subs	r2, r1, r3
 8003358:	4943      	ldr	r1, [pc, #268]	; (8003468 <add_enemy+0x208>)
 800335a:	4603      	mov	r3, r0
 800335c:	00db      	lsls	r3, r3, #3
 800335e:	4403      	add	r3, r0
 8003360:	009b      	lsls	r3, r3, #2
 8003362:	440b      	add	r3, r1
 8003364:	3318      	adds	r3, #24
 8003366:	601a      	str	r2, [r3, #0]
				enemies[i].bit_map = driver_map;		//grafika przeciwnika
 8003368:	79fa      	ldrb	r2, [r7, #7]
 800336a:	493f      	ldr	r1, [pc, #252]	; (8003468 <add_enemy+0x208>)
 800336c:	4613      	mov	r3, r2
 800336e:	00db      	lsls	r3, r3, #3
 8003370:	4413      	add	r3, r2
 8003372:	009b      	lsls	r3, r3, #2
 8003374:	440b      	add	r3, r1
 8003376:	3310      	adds	r3, #16
 8003378:	4a3f      	ldr	r2, [pc, #252]	; (8003478 <add_enemy+0x218>)
 800337a:	601a      	str	r2, [r3, #0]
			}
			if((enemy_type > 20 && enemy_type < 50) && (player.level > 4))
 800337c:	79bb      	ldrb	r3, [r7, #6]
 800337e:	2b14      	cmp	r3, #20
 8003380:	d930      	bls.n	80033e4 <add_enemy+0x184>
 8003382:	79bb      	ldrb	r3, [r7, #6]
 8003384:	2b31      	cmp	r3, #49	; 0x31
 8003386:	d82d      	bhi.n	80033e4 <add_enemy+0x184>
 8003388:	4b3c      	ldr	r3, [pc, #240]	; (800347c <add_enemy+0x21c>)
 800338a:	695b      	ldr	r3, [r3, #20]
 800338c:	2b04      	cmp	r3, #4
 800338e:	dd29      	ble.n	80033e4 <add_enemy+0x184>
			{
				enemies[i].type = et_tracker;
 8003390:	79fa      	ldrb	r2, [r7, #7]
 8003392:	4935      	ldr	r1, [pc, #212]	; (8003468 <add_enemy+0x208>)
 8003394:	4613      	mov	r3, r2
 8003396:	00db      	lsls	r3, r3, #3
 8003398:	4413      	add	r3, r2
 800339a:	009b      	lsls	r3, r3, #2
 800339c:	440b      	add	r3, r1
 800339e:	330c      	adds	r3, #12
 80033a0:	2201      	movs	r2, #1
 80033a2:	701a      	strb	r2, [r3, #0]
				enemies[i].update_delay = ((rand()%3)+1);
 80033a4:	f003 fe6e 	bl	8007084 <rand>
 80033a8:	4601      	mov	r1, r0
 80033aa:	4b32      	ldr	r3, [pc, #200]	; (8003474 <add_enemy+0x214>)
 80033ac:	fb83 3201 	smull	r3, r2, r3, r1
 80033b0:	17cb      	asrs	r3, r1, #31
 80033b2:	1ad2      	subs	r2, r2, r3
 80033b4:	4613      	mov	r3, r2
 80033b6:	005b      	lsls	r3, r3, #1
 80033b8:	4413      	add	r3, r2
 80033ba:	1aca      	subs	r2, r1, r3
 80033bc:	79f9      	ldrb	r1, [r7, #7]
 80033be:	3201      	adds	r2, #1
 80033c0:	4829      	ldr	r0, [pc, #164]	; (8003468 <add_enemy+0x208>)
 80033c2:	460b      	mov	r3, r1
 80033c4:	00db      	lsls	r3, r3, #3
 80033c6:	440b      	add	r3, r1
 80033c8:	009b      	lsls	r3, r3, #2
 80033ca:	4403      	add	r3, r0
 80033cc:	3318      	adds	r3, #24
 80033ce:	601a      	str	r2, [r3, #0]
				enemies[i].bit_map = tracker_map;
 80033d0:	79fa      	ldrb	r2, [r7, #7]
 80033d2:	4925      	ldr	r1, [pc, #148]	; (8003468 <add_enemy+0x208>)
 80033d4:	4613      	mov	r3, r2
 80033d6:	00db      	lsls	r3, r3, #3
 80033d8:	4413      	add	r3, r2
 80033da:	009b      	lsls	r3, r3, #2
 80033dc:	440b      	add	r3, r1
 80033de:	3310      	adds	r3, #16
 80033e0:	4a27      	ldr	r2, [pc, #156]	; (8003480 <add_enemy+0x220>)
 80033e2:	601a      	str	r2, [r3, #0]
			}
			if((enemy_type < 20) && (player.level > 7))
 80033e4:	79bb      	ldrb	r3, [r7, #6]
 80033e6:	2b13      	cmp	r3, #19
 80033e8:	d838      	bhi.n	800345c <add_enemy+0x1fc>
 80033ea:	4b24      	ldr	r3, [pc, #144]	; (800347c <add_enemy+0x21c>)
 80033ec:	695b      	ldr	r3, [r3, #20]
 80033ee:	2b07      	cmp	r3, #7
 80033f0:	dd34      	ble.n	800345c <add_enemy+0x1fc>
			{
				enemies[i].type = et_bobber;
 80033f2:	79fa      	ldrb	r2, [r7, #7]
 80033f4:	491c      	ldr	r1, [pc, #112]	; (8003468 <add_enemy+0x208>)
 80033f6:	4613      	mov	r3, r2
 80033f8:	00db      	lsls	r3, r3, #3
 80033fa:	4413      	add	r3, r2
 80033fc:	009b      	lsls	r3, r3, #2
 80033fe:	440b      	add	r3, r1
 8003400:	330c      	adds	r3, #12
 8003402:	2202      	movs	r2, #2
 8003404:	701a      	strb	r2, [r3, #0]
				enemies[i].update_delay = ((rand()%3)+2);
 8003406:	f003 fe3d 	bl	8007084 <rand>
 800340a:	4601      	mov	r1, r0
 800340c:	4b19      	ldr	r3, [pc, #100]	; (8003474 <add_enemy+0x214>)
 800340e:	fb83 3201 	smull	r3, r2, r3, r1
 8003412:	17cb      	asrs	r3, r1, #31
 8003414:	1ad2      	subs	r2, r2, r3
 8003416:	4613      	mov	r3, r2
 8003418:	005b      	lsls	r3, r3, #1
 800341a:	4413      	add	r3, r2
 800341c:	1aca      	subs	r2, r1, r3
 800341e:	79f9      	ldrb	r1, [r7, #7]
 8003420:	3202      	adds	r2, #2
 8003422:	4811      	ldr	r0, [pc, #68]	; (8003468 <add_enemy+0x208>)
 8003424:	460b      	mov	r3, r1
 8003426:	00db      	lsls	r3, r3, #3
 8003428:	440b      	add	r3, r1
 800342a:	009b      	lsls	r3, r3, #2
 800342c:	4403      	add	r3, r0
 800342e:	3318      	adds	r3, #24
 8003430:	601a      	str	r2, [r3, #0]
				enemies[i].bit_map = bobber_map;
 8003432:	79fa      	ldrb	r2, [r7, #7]
 8003434:	490c      	ldr	r1, [pc, #48]	; (8003468 <add_enemy+0x208>)
 8003436:	4613      	mov	r3, r2
 8003438:	00db      	lsls	r3, r3, #3
 800343a:	4413      	add	r3, r2
 800343c:	009b      	lsls	r3, r3, #2
 800343e:	440b      	add	r3, r1
 8003440:	3310      	adds	r3, #16
 8003442:	4a10      	ldr	r2, [pc, #64]	; (8003484 <add_enemy+0x224>)
 8003444:	601a      	str	r2, [r3, #0]
			}
			break;
 8003446:	e009      	b.n	800345c <add_enemy+0x1fc>
	for(i = 0; i < player.level; i++)
 8003448:	79fb      	ldrb	r3, [r7, #7]
 800344a:	3301      	adds	r3, #1
 800344c:	71fb      	strb	r3, [r7, #7]
 800344e:	79fa      	ldrb	r2, [r7, #7]
 8003450:	4b0a      	ldr	r3, [pc, #40]	; (800347c <add_enemy+0x21c>)
 8003452:	695b      	ldr	r3, [r3, #20]
 8003454:	429a      	cmp	r2, r3
 8003456:	f6ff af09 	blt.w	800326c <add_enemy+0xc>
		}
	}
}
 800345a:	e000      	b.n	800345e <add_enemy+0x1fe>
			break;
 800345c:	bf00      	nop
}
 800345e:	bf00      	nop
 8003460:	3708      	adds	r7, #8
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}
 8003466:	bf00      	nop
 8003468:	200004a8 	.word	0x200004a8
 800346c:	22b63cbf 	.word	0x22b63cbf
 8003470:	51eb851f 	.word	0x51eb851f
 8003474:	55555556 	.word	0x55555556
 8003478:	08009690 	.word	0x08009690
 800347c:	20000168 	.word	0x20000168
 8003480:	08009688 	.word	0x08009688
 8003484:	08009698 	.word	0x08009698

08003488 <add_bonus>:

void add_bonus(int x, int y)
{
 8003488:	b480      	push	{r7}
 800348a:	b085      	sub	sp, #20
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
 8003490:	6039      	str	r1, [r7, #0]
	 * Sprawdzenie czy jest to możliwe.
	 */

	uint8_t i;

	for (i = 0; i < num_bonus; i++)
 8003492:	2300      	movs	r3, #0
 8003494:	73fb      	strb	r3, [r7, #15]
 8003496:	e04b      	b.n	8003530 <add_bonus+0xa8>
	{
		if (!bonuses[i].active)
 8003498:	7bfa      	ldrb	r2, [r7, #15]
 800349a:	4929      	ldr	r1, [pc, #164]	; (8003540 <add_bonus+0xb8>)
 800349c:	4613      	mov	r3, r2
 800349e:	00db      	lsls	r3, r3, #3
 80034a0:	1a9b      	subs	r3, r3, r2
 80034a2:	009b      	lsls	r3, r3, #2
 80034a4:	440b      	add	r3, r1
 80034a6:	781b      	ldrb	r3, [r3, #0]
 80034a8:	f083 0301 	eor.w	r3, r3, #1
 80034ac:	b2db      	uxtb	r3, r3
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d03b      	beq.n	800352a <add_bonus+0xa2>
		{
			bonuses[i].active = true;
 80034b2:	7bfa      	ldrb	r2, [r7, #15]
 80034b4:	4922      	ldr	r1, [pc, #136]	; (8003540 <add_bonus+0xb8>)
 80034b6:	4613      	mov	r3, r2
 80034b8:	00db      	lsls	r3, r3, #3
 80034ba:	1a9b      	subs	r3, r3, r2
 80034bc:	009b      	lsls	r3, r3, #2
 80034be:	440b      	add	r3, r1
 80034c0:	2201      	movs	r2, #1
 80034c2:	701a      	strb	r2, [r3, #0]
			bonuses[i].x = x;
 80034c4:	7bfa      	ldrb	r2, [r7, #15]
 80034c6:	491e      	ldr	r1, [pc, #120]	; (8003540 <add_bonus+0xb8>)
 80034c8:	4613      	mov	r3, r2
 80034ca:	00db      	lsls	r3, r3, #3
 80034cc:	1a9b      	subs	r3, r3, r2
 80034ce:	009b      	lsls	r3, r3, #2
 80034d0:	440b      	add	r3, r1
 80034d2:	3304      	adds	r3, #4
 80034d4:	687a      	ldr	r2, [r7, #4]
 80034d6:	601a      	str	r2, [r3, #0]
			bonuses[i].y = y;
 80034d8:	7bfa      	ldrb	r2, [r7, #15]
 80034da:	4919      	ldr	r1, [pc, #100]	; (8003540 <add_bonus+0xb8>)
 80034dc:	4613      	mov	r3, r2
 80034de:	00db      	lsls	r3, r3, #3
 80034e0:	1a9b      	subs	r3, r3, r2
 80034e2:	009b      	lsls	r3, r3, #2
 80034e4:	440b      	add	r3, r1
 80034e6:	3308      	adds	r3, #8
 80034e8:	683a      	ldr	r2, [r7, #0]
 80034ea:	601a      	str	r2, [r3, #0]
			bonuses[i].type = bt_live;
 80034ec:	7bfa      	ldrb	r2, [r7, #15]
 80034ee:	4914      	ldr	r1, [pc, #80]	; (8003540 <add_bonus+0xb8>)
 80034f0:	4613      	mov	r3, r2
 80034f2:	00db      	lsls	r3, r3, #3
 80034f4:	1a9b      	subs	r3, r3, r2
 80034f6:	009b      	lsls	r3, r3, #2
 80034f8:	440b      	add	r3, r1
 80034fa:	330c      	adds	r3, #12
 80034fc:	2200      	movs	r2, #0
 80034fe:	701a      	strb	r2, [r3, #0]
			bonuses[i].bit_map = bonus_live_map;
 8003500:	7bfa      	ldrb	r2, [r7, #15]
 8003502:	490f      	ldr	r1, [pc, #60]	; (8003540 <add_bonus+0xb8>)
 8003504:	4613      	mov	r3, r2
 8003506:	00db      	lsls	r3, r3, #3
 8003508:	1a9b      	subs	r3, r3, r2
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	440b      	add	r3, r1
 800350e:	3310      	adds	r3, #16
 8003510:	4a0c      	ldr	r2, [pc, #48]	; (8003544 <add_bonus+0xbc>)
 8003512:	601a      	str	r2, [r3, #0]
			bonuses[i].update_delay = 3;
 8003514:	7bfa      	ldrb	r2, [r7, #15]
 8003516:	490a      	ldr	r1, [pc, #40]	; (8003540 <add_bonus+0xb8>)
 8003518:	4613      	mov	r3, r2
 800351a:	00db      	lsls	r3, r3, #3
 800351c:	1a9b      	subs	r3, r3, r2
 800351e:	009b      	lsls	r3, r3, #2
 8003520:	440b      	add	r3, r1
 8003522:	3318      	adds	r3, #24
 8003524:	2203      	movs	r2, #3
 8003526:	601a      	str	r2, [r3, #0]
			return;
 8003528:	e005      	b.n	8003536 <add_bonus+0xae>
	for (i = 0; i < num_bonus; i++)
 800352a:	7bfb      	ldrb	r3, [r7, #15]
 800352c:	3301      	adds	r3, #1
 800352e:	73fb      	strb	r3, [r7, #15]
 8003530:	7bfb      	ldrb	r3, [r7, #15]
 8003532:	2b04      	cmp	r3, #4
 8003534:	d9b0      	bls.n	8003498 <add_bonus+0x10>
		}
	}
}
 8003536:	3714      	adds	r7, #20
 8003538:	46bd      	mov	sp, r7
 800353a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353e:	4770      	bx	lr
 8003540:	200015cc 	.word	0x200015cc
 8003544:	080096fc 	.word	0x080096fc

08003548 <update_bonus>:

void update_bonus(void)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b082      	sub	sp, #8
 800354c:	af00      	add	r7, sp, #0
	/*
	 * Sprawdzanie czy gracz najechał na bonus.
	 * Przesuwanie bonusa na mapie
	 * */
	int i = 0;
 800354e:	2300      	movs	r3, #0
 8003550:	607b      	str	r3, [r7, #4]

	for (i = 0; i < num_bonus; i++)
 8003552:	2300      	movs	r3, #0
 8003554:	607b      	str	r3, [r7, #4]
 8003556:	e0fc      	b.n	8003752 <update_bonus+0x20a>
	{
		if(bonuses[i].active)
 8003558:	4982      	ldr	r1, [pc, #520]	; (8003764 <update_bonus+0x21c>)
 800355a:	687a      	ldr	r2, [r7, #4]
 800355c:	4613      	mov	r3, r2
 800355e:	00db      	lsls	r3, r3, #3
 8003560:	1a9b      	subs	r3, r3, r2
 8003562:	009b      	lsls	r3, r3, #2
 8003564:	440b      	add	r3, r1
 8003566:	781b      	ldrb	r3, [r3, #0]
 8003568:	2b00      	cmp	r3, #0
 800356a:	f000 80ef 	beq.w	800374c <update_bonus+0x204>
		{
			bonuses[i].next_update -= 1;
 800356e:	497d      	ldr	r1, [pc, #500]	; (8003764 <update_bonus+0x21c>)
 8003570:	687a      	ldr	r2, [r7, #4]
 8003572:	4613      	mov	r3, r2
 8003574:	00db      	lsls	r3, r3, #3
 8003576:	1a9b      	subs	r3, r3, r2
 8003578:	009b      	lsls	r3, r3, #2
 800357a:	440b      	add	r3, r1
 800357c:	3314      	adds	r3, #20
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	1e59      	subs	r1, r3, #1
 8003582:	4878      	ldr	r0, [pc, #480]	; (8003764 <update_bonus+0x21c>)
 8003584:	687a      	ldr	r2, [r7, #4]
 8003586:	4613      	mov	r3, r2
 8003588:	00db      	lsls	r3, r3, #3
 800358a:	1a9b      	subs	r3, r3, r2
 800358c:	009b      	lsls	r3, r3, #2
 800358e:	4403      	add	r3, r0
 8003590:	3314      	adds	r3, #20
 8003592:	6019      	str	r1, [r3, #0]
			if(bonuses[i].next_update <= 0)
 8003594:	4973      	ldr	r1, [pc, #460]	; (8003764 <update_bonus+0x21c>)
 8003596:	687a      	ldr	r2, [r7, #4]
 8003598:	4613      	mov	r3, r2
 800359a:	00db      	lsls	r3, r3, #3
 800359c:	1a9b      	subs	r3, r3, r2
 800359e:	009b      	lsls	r3, r3, #2
 80035a0:	440b      	add	r3, r1
 80035a2:	3314      	adds	r3, #20
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	f300 80d0 	bgt.w	800374c <update_bonus+0x204>
			{
				if(bonuses[i].active)
 80035ac:	496d      	ldr	r1, [pc, #436]	; (8003764 <update_bonus+0x21c>)
 80035ae:	687a      	ldr	r2, [r7, #4]
 80035b0:	4613      	mov	r3, r2
 80035b2:	00db      	lsls	r3, r3, #3
 80035b4:	1a9b      	subs	r3, r3, r2
 80035b6:	009b      	lsls	r3, r3, #2
 80035b8:	440b      	add	r3, r1
 80035ba:	781b      	ldrb	r3, [r3, #0]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	f000 80c5 	beq.w	800374c <update_bonus+0x204>
				{
					bonuses[i].next_update = bonuses[i].update_delay;
 80035c2:	4968      	ldr	r1, [pc, #416]	; (8003764 <update_bonus+0x21c>)
 80035c4:	687a      	ldr	r2, [r7, #4]
 80035c6:	4613      	mov	r3, r2
 80035c8:	00db      	lsls	r3, r3, #3
 80035ca:	1a9b      	subs	r3, r3, r2
 80035cc:	009b      	lsls	r3, r3, #2
 80035ce:	440b      	add	r3, r1
 80035d0:	3318      	adds	r3, #24
 80035d2:	6819      	ldr	r1, [r3, #0]
 80035d4:	4863      	ldr	r0, [pc, #396]	; (8003764 <update_bonus+0x21c>)
 80035d6:	687a      	ldr	r2, [r7, #4]
 80035d8:	4613      	mov	r3, r2
 80035da:	00db      	lsls	r3, r3, #3
 80035dc:	1a9b      	subs	r3, r3, r2
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	4403      	add	r3, r0
 80035e2:	3314      	adds	r3, #20
 80035e4:	6019      	str	r1, [r3, #0]

					//Sprawdzanie kolizji z graczem
					if (colliding(bonuses[i].x,bonuses[i].y, player.x, player.y) 	||
 80035e6:	495f      	ldr	r1, [pc, #380]	; (8003764 <update_bonus+0x21c>)
 80035e8:	687a      	ldr	r2, [r7, #4]
 80035ea:	4613      	mov	r3, r2
 80035ec:	00db      	lsls	r3, r3, #3
 80035ee:	1a9b      	subs	r3, r3, r2
 80035f0:	009b      	lsls	r3, r3, #2
 80035f2:	440b      	add	r3, r1
 80035f4:	3304      	adds	r3, #4
 80035f6:	6818      	ldr	r0, [r3, #0]
 80035f8:	495a      	ldr	r1, [pc, #360]	; (8003764 <update_bonus+0x21c>)
 80035fa:	687a      	ldr	r2, [r7, #4]
 80035fc:	4613      	mov	r3, r2
 80035fe:	00db      	lsls	r3, r3, #3
 8003600:	1a9b      	subs	r3, r3, r2
 8003602:	009b      	lsls	r3, r3, #2
 8003604:	440b      	add	r3, r1
 8003606:	3308      	adds	r3, #8
 8003608:	6819      	ldr	r1, [r3, #0]
 800360a:	4b57      	ldr	r3, [pc, #348]	; (8003768 <update_bonus+0x220>)
 800360c:	681a      	ldr	r2, [r3, #0]
 800360e:	4b56      	ldr	r3, [pc, #344]	; (8003768 <update_bonus+0x220>)
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	f7fe fbaf 	bl	8001d74 <colliding>
 8003616:	4603      	mov	r3, r0
 8003618:	2b00      	cmp	r3, #0
 800361a:	d154      	bne.n	80036c6 <update_bonus+0x17e>
						colliding(bonuses[i].x,bonuses[i].y, player.x, player.y+5) 	||
 800361c:	4951      	ldr	r1, [pc, #324]	; (8003764 <update_bonus+0x21c>)
 800361e:	687a      	ldr	r2, [r7, #4]
 8003620:	4613      	mov	r3, r2
 8003622:	00db      	lsls	r3, r3, #3
 8003624:	1a9b      	subs	r3, r3, r2
 8003626:	009b      	lsls	r3, r3, #2
 8003628:	440b      	add	r3, r1
 800362a:	3304      	adds	r3, #4
 800362c:	6818      	ldr	r0, [r3, #0]
 800362e:	494d      	ldr	r1, [pc, #308]	; (8003764 <update_bonus+0x21c>)
 8003630:	687a      	ldr	r2, [r7, #4]
 8003632:	4613      	mov	r3, r2
 8003634:	00db      	lsls	r3, r3, #3
 8003636:	1a9b      	subs	r3, r3, r2
 8003638:	009b      	lsls	r3, r3, #2
 800363a:	440b      	add	r3, r1
 800363c:	3308      	adds	r3, #8
 800363e:	6819      	ldr	r1, [r3, #0]
 8003640:	4b49      	ldr	r3, [pc, #292]	; (8003768 <update_bonus+0x220>)
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	4b48      	ldr	r3, [pc, #288]	; (8003768 <update_bonus+0x220>)
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	3305      	adds	r3, #5
 800364a:	f7fe fb93 	bl	8001d74 <colliding>
 800364e:	4603      	mov	r3, r0
					if (colliding(bonuses[i].x,bonuses[i].y, player.x, player.y) 	||
 8003650:	2b00      	cmp	r3, #0
 8003652:	d138      	bne.n	80036c6 <update_bonus+0x17e>
						colliding(bonuses[i].x,bonuses[i].y, player.x+7, player.y)	||
 8003654:	4943      	ldr	r1, [pc, #268]	; (8003764 <update_bonus+0x21c>)
 8003656:	687a      	ldr	r2, [r7, #4]
 8003658:	4613      	mov	r3, r2
 800365a:	00db      	lsls	r3, r3, #3
 800365c:	1a9b      	subs	r3, r3, r2
 800365e:	009b      	lsls	r3, r3, #2
 8003660:	440b      	add	r3, r1
 8003662:	3304      	adds	r3, #4
 8003664:	6818      	ldr	r0, [r3, #0]
 8003666:	493f      	ldr	r1, [pc, #252]	; (8003764 <update_bonus+0x21c>)
 8003668:	687a      	ldr	r2, [r7, #4]
 800366a:	4613      	mov	r3, r2
 800366c:	00db      	lsls	r3, r3, #3
 800366e:	1a9b      	subs	r3, r3, r2
 8003670:	009b      	lsls	r3, r3, #2
 8003672:	440b      	add	r3, r1
 8003674:	3308      	adds	r3, #8
 8003676:	6819      	ldr	r1, [r3, #0]
 8003678:	4b3b      	ldr	r3, [pc, #236]	; (8003768 <update_bonus+0x220>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	1dda      	adds	r2, r3, #7
 800367e:	4b3a      	ldr	r3, [pc, #232]	; (8003768 <update_bonus+0x220>)
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	f7fe fb77 	bl	8001d74 <colliding>
 8003686:	4603      	mov	r3, r0
						colliding(bonuses[i].x,bonuses[i].y, player.x, player.y+5) 	||
 8003688:	2b00      	cmp	r3, #0
 800368a:	d11c      	bne.n	80036c6 <update_bonus+0x17e>
						colliding(bonuses[i].x,bonuses[i].y, player.x+7, player.y+5)
 800368c:	4935      	ldr	r1, [pc, #212]	; (8003764 <update_bonus+0x21c>)
 800368e:	687a      	ldr	r2, [r7, #4]
 8003690:	4613      	mov	r3, r2
 8003692:	00db      	lsls	r3, r3, #3
 8003694:	1a9b      	subs	r3, r3, r2
 8003696:	009b      	lsls	r3, r3, #2
 8003698:	440b      	add	r3, r1
 800369a:	3304      	adds	r3, #4
 800369c:	6818      	ldr	r0, [r3, #0]
 800369e:	4931      	ldr	r1, [pc, #196]	; (8003764 <update_bonus+0x21c>)
 80036a0:	687a      	ldr	r2, [r7, #4]
 80036a2:	4613      	mov	r3, r2
 80036a4:	00db      	lsls	r3, r3, #3
 80036a6:	1a9b      	subs	r3, r3, r2
 80036a8:	009b      	lsls	r3, r3, #2
 80036aa:	440b      	add	r3, r1
 80036ac:	3308      	adds	r3, #8
 80036ae:	6819      	ldr	r1, [r3, #0]
 80036b0:	4b2d      	ldr	r3, [pc, #180]	; (8003768 <update_bonus+0x220>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	1dda      	adds	r2, r3, #7
 80036b6:	4b2c      	ldr	r3, [pc, #176]	; (8003768 <update_bonus+0x220>)
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	3305      	adds	r3, #5
 80036bc:	f7fe fb5a 	bl	8001d74 <colliding>
 80036c0:	4603      	mov	r3, r0
						colliding(bonuses[i].x,bonuses[i].y, player.x+7, player.y)	||
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d019      	beq.n	80036fa <update_bonus+0x1b2>
						)
					{
						switch(bonuses[i].type)
 80036c6:	4927      	ldr	r1, [pc, #156]	; (8003764 <update_bonus+0x21c>)
 80036c8:	687a      	ldr	r2, [r7, #4]
 80036ca:	4613      	mov	r3, r2
 80036cc:	00db      	lsls	r3, r3, #3
 80036ce:	1a9b      	subs	r3, r3, r2
 80036d0:	009b      	lsls	r3, r3, #2
 80036d2:	440b      	add	r3, r1
 80036d4:	330c      	adds	r3, #12
 80036d6:	781b      	ldrb	r3, [r3, #0]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d10f      	bne.n	80036fc <update_bonus+0x1b4>
						{
						case bt_live:
							player.lives += 1;
 80036dc:	4b22      	ldr	r3, [pc, #136]	; (8003768 <update_bonus+0x220>)
 80036de:	691b      	ldr	r3, [r3, #16]
 80036e0:	3301      	adds	r3, #1
 80036e2:	4a21      	ldr	r2, [pc, #132]	; (8003768 <update_bonus+0x220>)
 80036e4:	6113      	str	r3, [r2, #16]
							bonuses[i].active = false;
 80036e6:	491f      	ldr	r1, [pc, #124]	; (8003764 <update_bonus+0x21c>)
 80036e8:	687a      	ldr	r2, [r7, #4]
 80036ea:	4613      	mov	r3, r2
 80036ec:	00db      	lsls	r3, r3, #3
 80036ee:	1a9b      	subs	r3, r3, r2
 80036f0:	009b      	lsls	r3, r3, #2
 80036f2:	440b      	add	r3, r1
 80036f4:	2200      	movs	r2, #0
 80036f6:	701a      	strb	r2, [r3, #0]
							break;
 80036f8:	e000      	b.n	80036fc <update_bonus+0x1b4>
						}

					}
 80036fa:	bf00      	nop

					bonuses[i].x -= 1;
 80036fc:	4919      	ldr	r1, [pc, #100]	; (8003764 <update_bonus+0x21c>)
 80036fe:	687a      	ldr	r2, [r7, #4]
 8003700:	4613      	mov	r3, r2
 8003702:	00db      	lsls	r3, r3, #3
 8003704:	1a9b      	subs	r3, r3, r2
 8003706:	009b      	lsls	r3, r3, #2
 8003708:	440b      	add	r3, r1
 800370a:	3304      	adds	r3, #4
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	1e59      	subs	r1, r3, #1
 8003710:	4814      	ldr	r0, [pc, #80]	; (8003764 <update_bonus+0x21c>)
 8003712:	687a      	ldr	r2, [r7, #4]
 8003714:	4613      	mov	r3, r2
 8003716:	00db      	lsls	r3, r3, #3
 8003718:	1a9b      	subs	r3, r3, r2
 800371a:	009b      	lsls	r3, r3, #2
 800371c:	4403      	add	r3, r0
 800371e:	3304      	adds	r3, #4
 8003720:	6019      	str	r1, [r3, #0]
					if(bonuses[i].x <= -2){
 8003722:	4910      	ldr	r1, [pc, #64]	; (8003764 <update_bonus+0x21c>)
 8003724:	687a      	ldr	r2, [r7, #4]
 8003726:	4613      	mov	r3, r2
 8003728:	00db      	lsls	r3, r3, #3
 800372a:	1a9b      	subs	r3, r3, r2
 800372c:	009b      	lsls	r3, r3, #2
 800372e:	440b      	add	r3, r1
 8003730:	3304      	adds	r3, #4
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003738:	da08      	bge.n	800374c <update_bonus+0x204>
						bonuses[i].active = false;
 800373a:	490a      	ldr	r1, [pc, #40]	; (8003764 <update_bonus+0x21c>)
 800373c:	687a      	ldr	r2, [r7, #4]
 800373e:	4613      	mov	r3, r2
 8003740:	00db      	lsls	r3, r3, #3
 8003742:	1a9b      	subs	r3, r3, r2
 8003744:	009b      	lsls	r3, r3, #2
 8003746:	440b      	add	r3, r1
 8003748:	2200      	movs	r2, #0
 800374a:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < num_bonus; i++)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	3301      	adds	r3, #1
 8003750:	607b      	str	r3, [r7, #4]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2b04      	cmp	r3, #4
 8003756:	f77f aeff 	ble.w	8003558 <update_bonus+0x10>
					}
				}
			}
		}
	}
}
 800375a:	bf00      	nop
 800375c:	bf00      	nop
 800375e:	3708      	adds	r7, #8
 8003760:	46bd      	mov	sp, r7
 8003762:	bd80      	pop	{r7, pc}
 8003764:	200015cc 	.word	0x200015cc
 8003768:	20000168 	.word	0x20000168

0800376c <button_pressed>:

uint8_t button_pressed (void)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	af00      	add	r7, sp, #0
	 * repetycje gdy klawisz jest dlaej wcisniety.
	 * Jest to szczeg�lnie przydatane przy strzelaniu bo zapobiega
	 * oddawaniu kilku strza��w naraz.
	 */

	if((HAL_GPIO_ReadPin(USER_BTN_1_GPIO_Port, USER_BTN_1_Pin) == GPIO_PIN_SET) && btn_prev == 0)
 8003770:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003774:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003778:	f001 ff40 	bl	80055fc <HAL_GPIO_ReadPin>
 800377c:	4603      	mov	r3, r0
 800377e:	2b01      	cmp	r3, #1
 8003780:	d108      	bne.n	8003794 <button_pressed+0x28>
 8003782:	4b0c      	ldr	r3, [pc, #48]	; (80037b4 <button_pressed+0x48>)
 8003784:	781b      	ldrb	r3, [r3, #0]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d104      	bne.n	8003794 <button_pressed+0x28>
	{
		btn_prev = 1;
 800378a:	4b0a      	ldr	r3, [pc, #40]	; (80037b4 <button_pressed+0x48>)
 800378c:	2201      	movs	r2, #1
 800378e:	701a      	strb	r2, [r3, #0]
		return 1;
 8003790:	2301      	movs	r3, #1
 8003792:	e00c      	b.n	80037ae <button_pressed+0x42>
	}

	if(HAL_GPIO_ReadPin(USER_BTN_1_GPIO_Port, USER_BTN_1_Pin) == GPIO_PIN_RESET) //oczekiwania na zwolnienie kalwisza
 8003794:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003798:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800379c:	f001 ff2e 	bl	80055fc <HAL_GPIO_ReadPin>
 80037a0:	4603      	mov	r3, r0
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d102      	bne.n	80037ac <button_pressed+0x40>
	{
		btn_prev = 0;
 80037a6:	4b03      	ldr	r3, [pc, #12]	; (80037b4 <button_pressed+0x48>)
 80037a8:	2200      	movs	r2, #0
 80037aa:	701a      	strb	r2, [r3, #0]
	}
	return 0;
 80037ac:	2300      	movs	r3, #0
}
 80037ae:	4618      	mov	r0, r3
 80037b0:	bd80      	pop	{r7, pc}
 80037b2:	bf00      	nop
 80037b4:	20001659 	.word	0x20001659

080037b8 <joystick_value_y>:

int joystick_value_y (void){
 80037b8:	b580      	push	{r7, lr}
 80037ba:	af00      	add	r7, sp, #0
	return HAL_ADC_GetValue(&hadc1);
 80037bc:	4802      	ldr	r0, [pc, #8]	; (80037c8 <joystick_value_y+0x10>)
 80037be:	f000 ff6e 	bl	800469e <HAL_ADC_GetValue>
 80037c2:	4603      	mov	r3, r0
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	bd80      	pop	{r7, pc}
 80037c8:	200000a0 	.word	0x200000a0

080037cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80037cc:	b480      	push	{r7}
 80037ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80037d0:	b672      	cpsid	i
}
 80037d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80037d4:	e7fe      	b.n	80037d4 <Error_Handler+0x8>
	...

080037d8 <ssd1327_cmd>:
SPI_HandleTypeDef *ssd1337_spi;

static uint8_t buffer[BUF_SIZE];


void ssd1327_cmd (uint8_t cmd){
 80037d8:	b580      	push	{r7, lr}
 80037da:	b082      	sub	sp, #8
 80037dc:	af00      	add	r7, sp, #0
 80037de:	4603      	mov	r3, r0
 80037e0:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(DC_PORT, DC, GPIO_PIN_RESET);
 80037e2:	2200      	movs	r2, #0
 80037e4:	2120      	movs	r1, #32
 80037e6:	480c      	ldr	r0, [pc, #48]	; (8003818 <ssd1327_cmd+0x40>)
 80037e8:	f001 ff20 	bl	800562c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS_PORT, CS, GPIO_PIN_RESET);
 80037ec:	2200      	movs	r2, #0
 80037ee:	2110      	movs	r1, #16
 80037f0:	4809      	ldr	r0, [pc, #36]	; (8003818 <ssd1327_cmd+0x40>)
 80037f2:	f001 ff1b 	bl	800562c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(ssd1337_spi, &cmd, 1, 10);
 80037f6:	4b09      	ldr	r3, [pc, #36]	; (800381c <ssd1327_cmd+0x44>)
 80037f8:	6818      	ldr	r0, [r3, #0]
 80037fa:	1df9      	adds	r1, r7, #7
 80037fc:	230a      	movs	r3, #10
 80037fe:	2201      	movs	r2, #1
 8003800:	f003 f93b 	bl	8006a7a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CS_PORT, CS, GPIO_PIN_SET);
 8003804:	2201      	movs	r2, #1
 8003806:	2110      	movs	r1, #16
 8003808:	4803      	ldr	r0, [pc, #12]	; (8003818 <ssd1327_cmd+0x40>)
 800380a:	f001 ff0f 	bl	800562c <HAL_GPIO_WritePin>

}
 800380e:	bf00      	nop
 8003810:	3708      	adds	r7, #8
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}
 8003816:	bf00      	nop
 8003818:	48000400 	.word	0x48000400
 800381c:	20001670 	.word	0x20001670

08003820 <ssd1327_Reset>:
{
	ssd1327_cmd(SSD1327_SETCONTRASTCURRENT);	// Set Contrast Control
	ssd1327_cmd(Contrast);
}

void ssd1327_Reset(void){
 8003820:	b580      	push	{r7, lr}
 8003822:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(RST_PORT, RST, GPIO_PIN_RESET);
 8003824:	2200      	movs	r2, #0
 8003826:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800382a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800382e:	f001 fefd 	bl	800562c <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8003832:	2005      	movs	r0, #5
 8003834:	f000 fb8a 	bl	8003f4c <HAL_Delay>
	HAL_GPIO_WritePin(RST_PORT, RST, GPIO_PIN_SET);
 8003838:	2201      	movs	r2, #1
 800383a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800383e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003842:	f001 fef3 	bl	800562c <HAL_GPIO_WritePin>

}
 8003846:	bf00      	nop
 8003848:	bd80      	pop	{r7, pc}
	...

0800384c <ssd1327_SpiInit>:

void ssd1327_SpiInit(SPI_HandleTypeDef *spi){
 800384c:	b580      	push	{r7, lr}
 800384e:	b082      	sub	sp, #8
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]

	ssd1337_spi = spi;
 8003854:	4a05      	ldr	r2, [pc, #20]	; (800386c <ssd1327_SpiInit+0x20>)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6013      	str	r3, [r2, #0]

	ssd1327_Reset();
 800385a:	f7ff ffe1 	bl	8003820 <ssd1327_Reset>
	ssd1327_Init();
 800385e:	f000 f807 	bl	8003870 <ssd1327_Init>

}
 8003862:	bf00      	nop
 8003864:	3708      	adds	r7, #8
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}
 800386a:	bf00      	nop
 800386c:	20001670 	.word	0x20001670

08003870 <ssd1327_Init>:

void ssd1327_Init (void){
 8003870:	b580      	push	{r7, lr}
 8003872:	af00      	add	r7, sp, #0
//
//	ssd1327_cmd(SSD1327_DISPLAYALLON_RESUME);  // Entire Display ON

//--------------------------------------------------------------------------

	ssd1327_cmd(0xae);//--turn off oled panel
 8003874:	20ae      	movs	r0, #174	; 0xae
 8003876:	f7ff ffaf 	bl	80037d8 <ssd1327_cmd>

	ssd1327_cmd(0x15);  //set column addresses
 800387a:	2015      	movs	r0, #21
 800387c:	f7ff ffac 	bl	80037d8 <ssd1327_cmd>
	ssd1327_cmd(0x00);  //start column  0
 8003880:	2000      	movs	r0, #0
 8003882:	f7ff ffa9 	bl	80037d8 <ssd1327_cmd>
	ssd1327_cmd(0x7f);  //end column  127
 8003886:	207f      	movs	r0, #127	; 0x7f
 8003888:	f7ff ffa6 	bl	80037d8 <ssd1327_cmd>

	ssd1327_cmd(0x75);  //set row addresses
 800388c:	2075      	movs	r0, #117	; 0x75
 800388e:	f7ff ffa3 	bl	80037d8 <ssd1327_cmd>
	ssd1327_cmd(0x00);  //start row  0
 8003892:	2000      	movs	r0, #0
 8003894:	f7ff ffa0 	bl	80037d8 <ssd1327_cmd>
	ssd1327_cmd(0x7f);  //end row  127
 8003898:	207f      	movs	r0, #127	; 0x7f
 800389a:	f7ff ff9d 	bl	80037d8 <ssd1327_cmd>

	ssd1327_cmd(0x81);  //set contrast control
 800389e:	2081      	movs	r0, #129	; 0x81
 80038a0:	f7ff ff9a 	bl	80037d8 <ssd1327_cmd>
	ssd1327_cmd(0x80);  //50% (128/255) def.0x80
 80038a4:	2080      	movs	r0, #128	; 0x80
 80038a6:	f7ff ff97 	bl	80037d8 <ssd1327_cmd>

	ssd1327_cmd(0xa0);   //gment remap
 80038aa:	20a0      	movs	r0, #160	; 0xa0
 80038ac:	f7ff ff94 	bl	80037d8 <ssd1327_cmd>
	ssd1327_cmd(0x51);  //51 (To my understanding, this is orientation
 80038b0:	2051      	movs	r0, #81	; 0x51
 80038b2:	f7ff ff91 	bl	80037d8 <ssd1327_cmd>

	ssd1327_cmd(0xa1);  //start line
 80038b6:	20a1      	movs	r0, #161	; 0xa1
 80038b8:	f7ff ff8e 	bl	80037d8 <ssd1327_cmd>
	ssd1327_cmd(0x00);
 80038bc:	2000      	movs	r0, #0
 80038be:	f7ff ff8b 	bl	80037d8 <ssd1327_cmd>

	ssd1327_cmd(0xa2);  //display offset
 80038c2:	20a2      	movs	r0, #162	; 0xa2
 80038c4:	f7ff ff88 	bl	80037d8 <ssd1327_cmd>
	ssd1327_cmd(0x00);
 80038c8:	2000      	movs	r0, #0
 80038ca:	f7ff ff85 	bl	80037d8 <ssd1327_cmd>

	ssd1327_cmd(0xa4);  //rmal display
 80038ce:	20a4      	movs	r0, #164	; 0xa4
 80038d0:	f7ff ff82 	bl	80037d8 <ssd1327_cmd>
	ssd1327_cmd(0xa8);  //set multiplex ratio
 80038d4:	20a8      	movs	r0, #168	; 0xa8
 80038d6:	f7ff ff7f 	bl	80037d8 <ssd1327_cmd>
	ssd1327_cmd(0x7f);
 80038da:	207f      	movs	r0, #127	; 0x7f
 80038dc:	f7ff ff7c 	bl	80037d8 <ssd1327_cmd>

	ssd1327_cmd(0xb1);  //set phase leghth
 80038e0:	20b1      	movs	r0, #177	; 0xb1
 80038e2:	f7ff ff79 	bl	80037d8 <ssd1327_cmd>
	ssd1327_cmd(0xf1);
 80038e6:	20f1      	movs	r0, #241	; 0xf1
 80038e8:	f7ff ff76 	bl	80037d8 <ssd1327_cmd>

	ssd1327_cmd(0xb3);  //set dclk
 80038ec:	20b3      	movs	r0, #179	; 0xb3
 80038ee:	f7ff ff73 	bl	80037d8 <ssd1327_cmd>
	ssd1327_cmd(0x00);  //80Hz:0xc1 90Hz:0xe1  100Hz:0x00  110Hz:0x30 120Hz:0x50  130Hz:0x70   01
 80038f2:	2000      	movs	r0, #0
 80038f4:	f7ff ff70 	bl	80037d8 <ssd1327_cmd>

	ssd1327_cmd(0xab);  //Enable vReg
 80038f8:	20ab      	movs	r0, #171	; 0xab
 80038fa:	f7ff ff6d 	bl	80037d8 <ssd1327_cmd>
	ssd1327_cmd(0x01);
 80038fe:	2001      	movs	r0, #1
 8003900:	f7ff ff6a 	bl	80037d8 <ssd1327_cmd>

	ssd1327_cmd(0xb6);  //set phase leghth
 8003904:	20b6      	movs	r0, #182	; 0xb6
 8003906:	f7ff ff67 	bl	80037d8 <ssd1327_cmd>
	ssd1327_cmd(0x0f);
 800390a:	200f      	movs	r0, #15
 800390c:	f7ff ff64 	bl	80037d8 <ssd1327_cmd>

	ssd1327_cmd(0xbe); //Set vcomh voltage
 8003910:	20be      	movs	r0, #190	; 0xbe
 8003912:	f7ff ff61 	bl	80037d8 <ssd1327_cmd>
	ssd1327_cmd(0x0f);
 8003916:	200f      	movs	r0, #15
 8003918:	f7ff ff5e 	bl	80037d8 <ssd1327_cmd>

	ssd1327_cmd(0xbc); //set pre-charge voltage
 800391c:	20bc      	movs	r0, #188	; 0xbc
 800391e:	f7ff ff5b 	bl	80037d8 <ssd1327_cmd>
	ssd1327_cmd(0x08);
 8003922:	2008      	movs	r0, #8
 8003924:	f7ff ff58 	bl	80037d8 <ssd1327_cmd>

	ssd1327_cmd(0xd5); //second precharge period
 8003928:	20d5      	movs	r0, #213	; 0xd5
 800392a:	f7ff ff55 	bl	80037d8 <ssd1327_cmd>
	ssd1327_cmd(0x62);
 800392e:	2062      	movs	r0, #98	; 0x62
 8003930:	f7ff ff52 	bl	80037d8 <ssd1327_cmd>

	ssd1327_cmd(0xfd); //Unlock commands
 8003934:	20fd      	movs	r0, #253	; 0xfd
 8003936:	f7ff ff4f 	bl	80037d8 <ssd1327_cmd>
	ssd1327_cmd(0x12);
 800393a:	2012      	movs	r0, #18
 800393c:	f7ff ff4c 	bl	80037d8 <ssd1327_cmd>

	ssd1327_cmd(0xA4);
 8003940:	20a4      	movs	r0, #164	; 0xa4
 8003942:	f7ff ff49 	bl	80037d8 <ssd1327_cmd>

	ssd1327_cmd(SSD1327_DISPLAYON);
 8003946:	20af      	movs	r0, #175	; 0xaf
 8003948:	f7ff ff46 	bl	80037d8 <ssd1327_cmd>
}
 800394c:	bf00      	nop
 800394e:	bd80      	pop	{r7, pc}

08003950 <ssd1327_display>:

void ssd1327_display (void){
 8003950:	b580      	push	{r7, lr}
 8003952:	af00      	add	r7, sp, #0

	ssd1327_cmd(SSD1327_SETCOLUMNADDRESS);
 8003954:	2015      	movs	r0, #21
 8003956:	f7ff ff3f 	bl	80037d8 <ssd1327_cmd>
	ssd1327_cmd(0x00);
 800395a:	2000      	movs	r0, #0
 800395c:	f7ff ff3c 	bl	80037d8 <ssd1327_cmd>
	ssd1327_cmd(0x7F);
 8003960:	207f      	movs	r0, #127	; 0x7f
 8003962:	f7ff ff39 	bl	80037d8 <ssd1327_cmd>

	ssd1327_cmd(SSD1327_SETROWADDRESS);
 8003966:	2075      	movs	r0, #117	; 0x75
 8003968:	f7ff ff36 	bl	80037d8 <ssd1327_cmd>
	ssd1327_cmd(0x00);
 800396c:	2000      	movs	r0, #0
 800396e:	f7ff ff33 	bl	80037d8 <ssd1327_cmd>
	ssd1327_cmd(0x7F);
 8003972:	207f      	movs	r0, #127	; 0x7f
 8003974:	f7ff ff30 	bl	80037d8 <ssd1327_cmd>

	HAL_GPIO_WritePin(CS_PORT, CS, GPIO_PIN_RESET);
 8003978:	2200      	movs	r2, #0
 800397a:	2110      	movs	r1, #16
 800397c:	480d      	ldr	r0, [pc, #52]	; (80039b4 <ssd1327_display+0x64>)
 800397e:	f001 fe55 	bl	800562c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DC_PORT, DC, GPIO_PIN_SET);
 8003982:	2201      	movs	r2, #1
 8003984:	2120      	movs	r1, #32
 8003986:	480b      	ldr	r0, [pc, #44]	; (80039b4 <ssd1327_display+0x64>)
 8003988:	f001 fe50 	bl	800562c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS_PORT, CS, GPIO_PIN_RESET);
 800398c:	2200      	movs	r2, #0
 800398e:	2110      	movs	r1, #16
 8003990:	4808      	ldr	r0, [pc, #32]	; (80039b4 <ssd1327_display+0x64>)
 8003992:	f001 fe4b 	bl	800562c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(ssd1337_spi, (uint8_t*)&buffer, BUF_SIZE, 100);
 8003996:	4b08      	ldr	r3, [pc, #32]	; (80039b8 <ssd1327_display+0x68>)
 8003998:	6818      	ldr	r0, [r3, #0]
 800399a:	2364      	movs	r3, #100	; 0x64
 800399c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80039a0:	4906      	ldr	r1, [pc, #24]	; (80039bc <ssd1327_display+0x6c>)
 80039a2:	f003 f86a 	bl	8006a7a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CS_PORT, CS, GPIO_PIN_SET);
 80039a6:	2201      	movs	r2, #1
 80039a8:	2110      	movs	r1, #16
 80039aa:	4802      	ldr	r0, [pc, #8]	; (80039b4 <ssd1327_display+0x64>)
 80039ac:	f001 fe3e 	bl	800562c <HAL_GPIO_WritePin>

}
 80039b0:	bf00      	nop
 80039b2:	bd80      	pop	{r7, pc}
 80039b4:	48000400 	.word	0x48000400
 80039b8:	20001670 	.word	0x20001670
 80039bc:	20001674 	.word	0x20001674

080039c0 <ssd1327_CLR>:

void ssd1327_CLR(void){
 80039c0:	b580      	push	{r7, lr}
 80039c2:	af00      	add	r7, sp, #0
		memset(buffer, (0 << 4 | 0), BUF_SIZE);
 80039c4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80039c8:	2100      	movs	r1, #0
 80039ca:	4802      	ldr	r0, [pc, #8]	; (80039d4 <ssd1327_CLR+0x14>)
 80039cc:	f003 fb52 	bl	8007074 <memset>
}
 80039d0:	bf00      	nop
 80039d2:	bd80      	pop	{r7, pc}
 80039d4:	20001674 	.word	0x20001674

080039d8 <ssd1327_setPixel>:

void ssd1327_setPixel( int x , int y , uint8_t bw){
 80039d8:	b480      	push	{r7}
 80039da:	b087      	sub	sp, #28
 80039dc:	af00      	add	r7, sp, #0
 80039de:	60f8      	str	r0, [r7, #12]
 80039e0:	60b9      	str	r1, [r7, #8]
 80039e2:	4613      	mov	r3, r2
 80039e4:	71fb      	strb	r3, [r7, #7]
	if ((x < 0) || (x >= SSD1327_WIDTH) || (y < 0) || (y >= SSD1327_HEIGHT))
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	db3c      	blt.n	8003a66 <ssd1327_setPixel+0x8e>
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	2b7f      	cmp	r3, #127	; 0x7f
 80039f0:	dc39      	bgt.n	8003a66 <ssd1327_setPixel+0x8e>
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	db36      	blt.n	8003a66 <ssd1327_setPixel+0x8e>
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	2b7f      	cmp	r3, #127	; 0x7f
 80039fc:	dc33      	bgt.n	8003a66 <ssd1327_setPixel+0x8e>
		return;

	uint8_t SelectedCell = buffer[x/2 + y*(SSD1327_WIDTH/2)];
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	0fda      	lsrs	r2, r3, #31
 8003a02:	4413      	add	r3, r2
 8003a04:	105b      	asrs	r3, r3, #1
 8003a06:	461a      	mov	r2, r3
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	019b      	lsls	r3, r3, #6
 8003a0c:	4413      	add	r3, r2
 8003a0e:	4a19      	ldr	r2, [pc, #100]	; (8003a74 <ssd1327_setPixel+0x9c>)
 8003a10:	5cd3      	ldrb	r3, [r2, r3]
 8003a12:	75fb      	strb	r3, [r7, #23]

	if(x % 2)
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	f003 0301 	and.w	r3, r3, #1
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d00b      	beq.n	8003a36 <ssd1327_setPixel+0x5e>
	{
		SelectedCell &= ~(0x0F);
 8003a1e:	7dfb      	ldrb	r3, [r7, #23]
 8003a20:	f023 030f 	bic.w	r3, r3, #15
 8003a24:	75fb      	strb	r3, [r7, #23]
		SelectedCell |= (0x0F & bw);
 8003a26:	79fb      	ldrb	r3, [r7, #7]
 8003a28:	f003 030f 	and.w	r3, r3, #15
 8003a2c:	b2da      	uxtb	r2, r3
 8003a2e:	7dfb      	ldrb	r3, [r7, #23]
 8003a30:	4313      	orrs	r3, r2
 8003a32:	75fb      	strb	r3, [r7, #23]
 8003a34:	e00b      	b.n	8003a4e <ssd1327_setPixel+0x76>
	}
	else
	{
		SelectedCell &= ~(0xF0);
 8003a36:	7dfb      	ldrb	r3, [r7, #23]
 8003a38:	f003 030f 	and.w	r3, r3, #15
 8003a3c:	75fb      	strb	r3, [r7, #23]
		SelectedCell |= (0xF0 & (bw<<4));
 8003a3e:	79fb      	ldrb	r3, [r7, #7]
 8003a40:	011b      	lsls	r3, r3, #4
 8003a42:	b25a      	sxtb	r2, r3
 8003a44:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	b25b      	sxtb	r3, r3
 8003a4c:	75fb      	strb	r3, [r7, #23]
	}

	buffer[x/2 + y*(SSD1327_WIDTH/2)] = SelectedCell;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	0fda      	lsrs	r2, r3, #31
 8003a52:	4413      	add	r3, r2
 8003a54:	105b      	asrs	r3, r3, #1
 8003a56:	461a      	mov	r2, r3
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	019b      	lsls	r3, r3, #6
 8003a5c:	4413      	add	r3, r2
 8003a5e:	4905      	ldr	r1, [pc, #20]	; (8003a74 <ssd1327_setPixel+0x9c>)
 8003a60:	7dfa      	ldrb	r2, [r7, #23]
 8003a62:	54ca      	strb	r2, [r1, r3]
 8003a64:	e000      	b.n	8003a68 <ssd1327_setPixel+0x90>
		return;
 8003a66:	bf00      	nop

//	if ((x < 0) || (x >= SSD1327_WIDTH) || (y < 0) || (y >= SSD1327_HEIGHT))
//		return;
//	if (bw) buffer[x + (y/4)*SSD1327_WIDTH] |= (1<<(y%4));
//	else buffer[x + (y/4)*SSD1327_WIDTH] &= ~(1<<(y%4));
}
 8003a68:	371c      	adds	r7, #28
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a70:	4770      	bx	lr
 8003a72:	bf00      	nop
 8003a74:	20001674 	.word	0x20001674

08003a78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b083      	sub	sp, #12
 8003a7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a7e:	4b0f      	ldr	r3, [pc, #60]	; (8003abc <HAL_MspInit+0x44>)
 8003a80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a82:	4a0e      	ldr	r2, [pc, #56]	; (8003abc <HAL_MspInit+0x44>)
 8003a84:	f043 0301 	orr.w	r3, r3, #1
 8003a88:	6613      	str	r3, [r2, #96]	; 0x60
 8003a8a:	4b0c      	ldr	r3, [pc, #48]	; (8003abc <HAL_MspInit+0x44>)
 8003a8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a8e:	f003 0301 	and.w	r3, r3, #1
 8003a92:	607b      	str	r3, [r7, #4]
 8003a94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003a96:	4b09      	ldr	r3, [pc, #36]	; (8003abc <HAL_MspInit+0x44>)
 8003a98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a9a:	4a08      	ldr	r2, [pc, #32]	; (8003abc <HAL_MspInit+0x44>)
 8003a9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003aa0:	6593      	str	r3, [r2, #88]	; 0x58
 8003aa2:	4b06      	ldr	r3, [pc, #24]	; (8003abc <HAL_MspInit+0x44>)
 8003aa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003aaa:	603b      	str	r3, [r7, #0]
 8003aac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003aae:	bf00      	nop
 8003ab0:	370c      	adds	r7, #12
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab8:	4770      	bx	lr
 8003aba:	bf00      	nop
 8003abc:	40021000 	.word	0x40021000

08003ac0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b09e      	sub	sp, #120	; 0x78
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ac8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003acc:	2200      	movs	r2, #0
 8003ace:	601a      	str	r2, [r3, #0]
 8003ad0:	605a      	str	r2, [r3, #4]
 8003ad2:	609a      	str	r2, [r3, #8]
 8003ad4:	60da      	str	r2, [r3, #12]
 8003ad6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003ad8:	f107 0310 	add.w	r3, r7, #16
 8003adc:	2254      	movs	r2, #84	; 0x54
 8003ade:	2100      	movs	r1, #0
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f003 fac7 	bl	8007074 <memset>
  if(hadc->Instance==ADC1)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a25      	ldr	r2, [pc, #148]	; (8003b80 <HAL_ADC_MspInit+0xc0>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d143      	bne.n	8003b78 <HAL_ADC_MspInit+0xb8>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8003af0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003af4:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8003af6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003afa:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8003afc:	2301      	movs	r3, #1
 8003afe:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8003b00:	2301      	movs	r3, #1
 8003b02:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8003b04:	2310      	movs	r3, #16
 8003b06:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8003b08:	2307      	movs	r3, #7
 8003b0a:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8003b0c:	2302      	movs	r3, #2
 8003b0e:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8003b10:	2302      	movs	r3, #2
 8003b12:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8003b14:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003b18:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003b1a:	f107 0310 	add.w	r3, r7, #16
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f002 fc10 	bl	8006344 <HAL_RCCEx_PeriphCLKConfig>
 8003b24:	4603      	mov	r3, r0
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d001      	beq.n	8003b2e <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8003b2a:	f7ff fe4f 	bl	80037cc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8003b2e:	4b15      	ldr	r3, [pc, #84]	; (8003b84 <HAL_ADC_MspInit+0xc4>)
 8003b30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b32:	4a14      	ldr	r2, [pc, #80]	; (8003b84 <HAL_ADC_MspInit+0xc4>)
 8003b34:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003b38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003b3a:	4b12      	ldr	r3, [pc, #72]	; (8003b84 <HAL_ADC_MspInit+0xc4>)
 8003b3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b3e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b42:	60fb      	str	r3, [r7, #12]
 8003b44:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b46:	4b0f      	ldr	r3, [pc, #60]	; (8003b84 <HAL_ADC_MspInit+0xc4>)
 8003b48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b4a:	4a0e      	ldr	r2, [pc, #56]	; (8003b84 <HAL_ADC_MspInit+0xc4>)
 8003b4c:	f043 0301 	orr.w	r3, r3, #1
 8003b50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003b52:	4b0c      	ldr	r3, [pc, #48]	; (8003b84 <HAL_ADC_MspInit+0xc4>)
 8003b54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b56:	f003 0301 	and.w	r3, r3, #1
 8003b5a:	60bb      	str	r3, [r7, #8]
 8003b5c:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8003b62:	230b      	movs	r3, #11
 8003b64:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b66:	2300      	movs	r3, #0
 8003b68:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b6a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003b6e:	4619      	mov	r1, r3
 8003b70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003b74:	f001 fbd8 	bl	8005328 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003b78:	bf00      	nop
 8003b7a:	3778      	adds	r7, #120	; 0x78
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bd80      	pop	{r7, pc}
 8003b80:	50040000 	.word	0x50040000
 8003b84:	40021000 	.word	0x40021000

08003b88 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b08a      	sub	sp, #40	; 0x28
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b90:	f107 0314 	add.w	r3, r7, #20
 8003b94:	2200      	movs	r2, #0
 8003b96:	601a      	str	r2, [r3, #0]
 8003b98:	605a      	str	r2, [r3, #4]
 8003b9a:	609a      	str	r2, [r3, #8]
 8003b9c:	60da      	str	r2, [r3, #12]
 8003b9e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a17      	ldr	r2, [pc, #92]	; (8003c04 <HAL_SPI_MspInit+0x7c>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d128      	bne.n	8003bfc <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003baa:	4b17      	ldr	r3, [pc, #92]	; (8003c08 <HAL_SPI_MspInit+0x80>)
 8003bac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bae:	4a16      	ldr	r2, [pc, #88]	; (8003c08 <HAL_SPI_MspInit+0x80>)
 8003bb0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003bb4:	6613      	str	r3, [r2, #96]	; 0x60
 8003bb6:	4b14      	ldr	r3, [pc, #80]	; (8003c08 <HAL_SPI_MspInit+0x80>)
 8003bb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003bbe:	613b      	str	r3, [r7, #16]
 8003bc0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003bc2:	4b11      	ldr	r3, [pc, #68]	; (8003c08 <HAL_SPI_MspInit+0x80>)
 8003bc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bc6:	4a10      	ldr	r2, [pc, #64]	; (8003c08 <HAL_SPI_MspInit+0x80>)
 8003bc8:	f043 0301 	orr.w	r3, r3, #1
 8003bcc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003bce:	4b0e      	ldr	r3, [pc, #56]	; (8003c08 <HAL_SPI_MspInit+0x80>)
 8003bd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bd2:	f003 0301 	and.w	r3, r3, #1
 8003bd6:	60fb      	str	r3, [r7, #12]
 8003bd8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_7;
 8003bda:	2382      	movs	r3, #130	; 0x82
 8003bdc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bde:	2302      	movs	r3, #2
 8003be0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003be2:	2300      	movs	r3, #0
 8003be4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003be6:	2303      	movs	r3, #3
 8003be8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003bea:	2305      	movs	r3, #5
 8003bec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003bee:	f107 0314 	add.w	r3, r7, #20
 8003bf2:	4619      	mov	r1, r3
 8003bf4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003bf8:	f001 fb96 	bl	8005328 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003bfc:	bf00      	nop
 8003bfe:	3728      	adds	r7, #40	; 0x28
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd80      	pop	{r7, pc}
 8003c04:	40013000 	.word	0x40013000
 8003c08:	40021000 	.word	0x40021000

08003c0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003c10:	e7fe      	b.n	8003c10 <NMI_Handler+0x4>

08003c12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003c12:	b480      	push	{r7}
 8003c14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003c16:	e7fe      	b.n	8003c16 <HardFault_Handler+0x4>

08003c18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003c1c:	e7fe      	b.n	8003c1c <MemManage_Handler+0x4>

08003c1e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003c1e:	b480      	push	{r7}
 8003c20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003c22:	e7fe      	b.n	8003c22 <BusFault_Handler+0x4>

08003c24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003c24:	b480      	push	{r7}
 8003c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003c28:	e7fe      	b.n	8003c28 <UsageFault_Handler+0x4>

08003c2a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003c2a:	b480      	push	{r7}
 8003c2c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003c2e:	bf00      	nop
 8003c30:	46bd      	mov	sp, r7
 8003c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c36:	4770      	bx	lr

08003c38 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003c3c:	bf00      	nop
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c44:	4770      	bx	lr

08003c46 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003c46:	b480      	push	{r7}
 8003c48:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003c4a:	bf00      	nop
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c52:	4770      	bx	lr

08003c54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003c58:	f000 f958 	bl	8003f0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003c5c:	bf00      	nop
 8003c5e:	bd80      	pop	{r7, pc}

08003c60 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003c60:	b480      	push	{r7}
 8003c62:	af00      	add	r7, sp, #0
	return 1;
 8003c64:	2301      	movs	r3, #1
}
 8003c66:	4618      	mov	r0, r3
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6e:	4770      	bx	lr

08003c70 <_kill>:

int _kill(int pid, int sig)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b082      	sub	sp, #8
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
 8003c78:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003c7a:	f003 f9d1 	bl	8007020 <__errno>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	2216      	movs	r2, #22
 8003c82:	601a      	str	r2, [r3, #0]
	return -1;
 8003c84:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	3708      	adds	r7, #8
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bd80      	pop	{r7, pc}

08003c90 <_exit>:

void _exit (int status)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b082      	sub	sp, #8
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003c98:	f04f 31ff 	mov.w	r1, #4294967295
 8003c9c:	6878      	ldr	r0, [r7, #4]
 8003c9e:	f7ff ffe7 	bl	8003c70 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003ca2:	e7fe      	b.n	8003ca2 <_exit+0x12>

08003ca4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b086      	sub	sp, #24
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	60f8      	str	r0, [r7, #12]
 8003cac:	60b9      	str	r1, [r7, #8]
 8003cae:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	617b      	str	r3, [r7, #20]
 8003cb4:	e00a      	b.n	8003ccc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003cb6:	f3af 8000 	nop.w
 8003cba:	4601      	mov	r1, r0
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	1c5a      	adds	r2, r3, #1
 8003cc0:	60ba      	str	r2, [r7, #8]
 8003cc2:	b2ca      	uxtb	r2, r1
 8003cc4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	3301      	adds	r3, #1
 8003cca:	617b      	str	r3, [r7, #20]
 8003ccc:	697a      	ldr	r2, [r7, #20]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	dbf0      	blt.n	8003cb6 <_read+0x12>
	}

return len;
 8003cd4:	687b      	ldr	r3, [r7, #4]
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	3718      	adds	r7, #24
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}

08003cde <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003cde:	b580      	push	{r7, lr}
 8003ce0:	b086      	sub	sp, #24
 8003ce2:	af00      	add	r7, sp, #0
 8003ce4:	60f8      	str	r0, [r7, #12]
 8003ce6:	60b9      	str	r1, [r7, #8]
 8003ce8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003cea:	2300      	movs	r3, #0
 8003cec:	617b      	str	r3, [r7, #20]
 8003cee:	e009      	b.n	8003d04 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	1c5a      	adds	r2, r3, #1
 8003cf4:	60ba      	str	r2, [r7, #8]
 8003cf6:	781b      	ldrb	r3, [r3, #0]
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	3301      	adds	r3, #1
 8003d02:	617b      	str	r3, [r7, #20]
 8003d04:	697a      	ldr	r2, [r7, #20]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	429a      	cmp	r2, r3
 8003d0a:	dbf1      	blt.n	8003cf0 <_write+0x12>
	}
	return len;
 8003d0c:	687b      	ldr	r3, [r7, #4]
}
 8003d0e:	4618      	mov	r0, r3
 8003d10:	3718      	adds	r7, #24
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}

08003d16 <_close>:

int _close(int file)
{
 8003d16:	b480      	push	{r7}
 8003d18:	b083      	sub	sp, #12
 8003d1a:	af00      	add	r7, sp, #0
 8003d1c:	6078      	str	r0, [r7, #4]
	return -1;
 8003d1e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	370c      	adds	r7, #12
 8003d26:	46bd      	mov	sp, r7
 8003d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2c:	4770      	bx	lr

08003d2e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003d2e:	b480      	push	{r7}
 8003d30:	b083      	sub	sp, #12
 8003d32:	af00      	add	r7, sp, #0
 8003d34:	6078      	str	r0, [r7, #4]
 8003d36:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003d3e:	605a      	str	r2, [r3, #4]
	return 0;
 8003d40:	2300      	movs	r3, #0
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	370c      	adds	r7, #12
 8003d46:	46bd      	mov	sp, r7
 8003d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4c:	4770      	bx	lr

08003d4e <_isatty>:

int _isatty(int file)
{
 8003d4e:	b480      	push	{r7}
 8003d50:	b083      	sub	sp, #12
 8003d52:	af00      	add	r7, sp, #0
 8003d54:	6078      	str	r0, [r7, #4]
	return 1;
 8003d56:	2301      	movs	r3, #1
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	370c      	adds	r7, #12
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d62:	4770      	bx	lr

08003d64 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003d64:	b480      	push	{r7}
 8003d66:	b085      	sub	sp, #20
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	60f8      	str	r0, [r7, #12]
 8003d6c:	60b9      	str	r1, [r7, #8]
 8003d6e:	607a      	str	r2, [r7, #4]
	return 0;
 8003d70:	2300      	movs	r3, #0
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	3714      	adds	r7, #20
 8003d76:	46bd      	mov	sp, r7
 8003d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7c:	4770      	bx	lr
	...

08003d80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b086      	sub	sp, #24
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003d88:	4a14      	ldr	r2, [pc, #80]	; (8003ddc <_sbrk+0x5c>)
 8003d8a:	4b15      	ldr	r3, [pc, #84]	; (8003de0 <_sbrk+0x60>)
 8003d8c:	1ad3      	subs	r3, r2, r3
 8003d8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003d94:	4b13      	ldr	r3, [pc, #76]	; (8003de4 <_sbrk+0x64>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d102      	bne.n	8003da2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003d9c:	4b11      	ldr	r3, [pc, #68]	; (8003de4 <_sbrk+0x64>)
 8003d9e:	4a12      	ldr	r2, [pc, #72]	; (8003de8 <_sbrk+0x68>)
 8003da0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003da2:	4b10      	ldr	r3, [pc, #64]	; (8003de4 <_sbrk+0x64>)
 8003da4:	681a      	ldr	r2, [r3, #0]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	4413      	add	r3, r2
 8003daa:	693a      	ldr	r2, [r7, #16]
 8003dac:	429a      	cmp	r2, r3
 8003dae:	d207      	bcs.n	8003dc0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003db0:	f003 f936 	bl	8007020 <__errno>
 8003db4:	4603      	mov	r3, r0
 8003db6:	220c      	movs	r2, #12
 8003db8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003dba:	f04f 33ff 	mov.w	r3, #4294967295
 8003dbe:	e009      	b.n	8003dd4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003dc0:	4b08      	ldr	r3, [pc, #32]	; (8003de4 <_sbrk+0x64>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003dc6:	4b07      	ldr	r3, [pc, #28]	; (8003de4 <_sbrk+0x64>)
 8003dc8:	681a      	ldr	r2, [r3, #0]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	4413      	add	r3, r2
 8003dce:	4a05      	ldr	r2, [pc, #20]	; (8003de4 <_sbrk+0x64>)
 8003dd0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	3718      	adds	r7, #24
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bd80      	pop	{r7, pc}
 8003ddc:	20010000 	.word	0x20010000
 8003de0:	00000400 	.word	0x00000400
 8003de4:	20003674 	.word	0x20003674
 8003de8:	20003690 	.word	0x20003690

08003dec <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003dec:	b480      	push	{r7}
 8003dee:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003df0:	4b06      	ldr	r3, [pc, #24]	; (8003e0c <SystemInit+0x20>)
 8003df2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003df6:	4a05      	ldr	r2, [pc, #20]	; (8003e0c <SystemInit+0x20>)
 8003df8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003dfc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8003e00:	bf00      	nop
 8003e02:	46bd      	mov	sp, r7
 8003e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e08:	4770      	bx	lr
 8003e0a:	bf00      	nop
 8003e0c:	e000ed00 	.word	0xe000ed00

08003e10 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003e10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003e48 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003e14:	f7ff ffea 	bl	8003dec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003e18:	480c      	ldr	r0, [pc, #48]	; (8003e4c <LoopForever+0x6>)
  ldr r1, =_edata
 8003e1a:	490d      	ldr	r1, [pc, #52]	; (8003e50 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003e1c:	4a0d      	ldr	r2, [pc, #52]	; (8003e54 <LoopForever+0xe>)
  movs r3, #0
 8003e1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003e20:	e002      	b.n	8003e28 <LoopCopyDataInit>

08003e22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003e22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003e24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003e26:	3304      	adds	r3, #4

08003e28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003e28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003e2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003e2c:	d3f9      	bcc.n	8003e22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003e2e:	4a0a      	ldr	r2, [pc, #40]	; (8003e58 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003e30:	4c0a      	ldr	r4, [pc, #40]	; (8003e5c <LoopForever+0x16>)
  movs r3, #0
 8003e32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003e34:	e001      	b.n	8003e3a <LoopFillZerobss>

08003e36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003e36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003e38:	3204      	adds	r2, #4

08003e3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003e3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003e3c:	d3fb      	bcc.n	8003e36 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003e3e:	f003 f8f5 	bl	800702c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003e42:	f7fd fa47 	bl	80012d4 <main>

08003e46 <LoopForever>:

LoopForever:
    b LoopForever
 8003e46:	e7fe      	b.n	8003e46 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003e48:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8003e4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003e50:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8003e54:	080098d8 	.word	0x080098d8
  ldr r2, =_sbss
 8003e58:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8003e5c:	2000368c 	.word	0x2000368c

08003e60 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003e60:	e7fe      	b.n	8003e60 <ADC1_IRQHandler>

08003e62 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003e62:	b580      	push	{r7, lr}
 8003e64:	b082      	sub	sp, #8
 8003e66:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003e68:	2300      	movs	r3, #0
 8003e6a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003e6c:	2003      	movs	r0, #3
 8003e6e:	f001 fa27 	bl	80052c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003e72:	200f      	movs	r0, #15
 8003e74:	f000 f80e 	bl	8003e94 <HAL_InitTick>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d002      	beq.n	8003e84 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	71fb      	strb	r3, [r7, #7]
 8003e82:	e001      	b.n	8003e88 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003e84:	f7ff fdf8 	bl	8003a78 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003e88:	79fb      	ldrb	r3, [r7, #7]
}
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	3708      	adds	r7, #8
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}
	...

08003e94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b084      	sub	sp, #16
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003ea0:	4b17      	ldr	r3, [pc, #92]	; (8003f00 <HAL_InitTick+0x6c>)
 8003ea2:	781b      	ldrb	r3, [r3, #0]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d023      	beq.n	8003ef0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003ea8:	4b16      	ldr	r3, [pc, #88]	; (8003f04 <HAL_InitTick+0x70>)
 8003eaa:	681a      	ldr	r2, [r3, #0]
 8003eac:	4b14      	ldr	r3, [pc, #80]	; (8003f00 <HAL_InitTick+0x6c>)
 8003eae:	781b      	ldrb	r3, [r3, #0]
 8003eb0:	4619      	mov	r1, r3
 8003eb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003eb6:	fbb3 f3f1 	udiv	r3, r3, r1
 8003eba:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	f001 fa25 	bl	800530e <HAL_SYSTICK_Config>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d10f      	bne.n	8003eea <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2b0f      	cmp	r3, #15
 8003ece:	d809      	bhi.n	8003ee4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	6879      	ldr	r1, [r7, #4]
 8003ed4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ed8:	f001 f9fd 	bl	80052d6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003edc:	4a0a      	ldr	r2, [pc, #40]	; (8003f08 <HAL_InitTick+0x74>)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6013      	str	r3, [r2, #0]
 8003ee2:	e007      	b.n	8003ef4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	73fb      	strb	r3, [r7, #15]
 8003ee8:	e004      	b.n	8003ef4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	73fb      	strb	r3, [r7, #15]
 8003eee:	e001      	b.n	8003ef4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003ef4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	3710      	adds	r7, #16
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}
 8003efe:	bf00      	nop
 8003f00:	20000014 	.word	0x20000014
 8003f04:	2000000c 	.word	0x2000000c
 8003f08:	20000010 	.word	0x20000010

08003f0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003f10:	4b06      	ldr	r3, [pc, #24]	; (8003f2c <HAL_IncTick+0x20>)
 8003f12:	781b      	ldrb	r3, [r3, #0]
 8003f14:	461a      	mov	r2, r3
 8003f16:	4b06      	ldr	r3, [pc, #24]	; (8003f30 <HAL_IncTick+0x24>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4413      	add	r3, r2
 8003f1c:	4a04      	ldr	r2, [pc, #16]	; (8003f30 <HAL_IncTick+0x24>)
 8003f1e:	6013      	str	r3, [r2, #0]
}
 8003f20:	bf00      	nop
 8003f22:	46bd      	mov	sp, r7
 8003f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f28:	4770      	bx	lr
 8003f2a:	bf00      	nop
 8003f2c:	20000014 	.word	0x20000014
 8003f30:	20003678 	.word	0x20003678

08003f34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003f34:	b480      	push	{r7}
 8003f36:	af00      	add	r7, sp, #0
  return uwTick;
 8003f38:	4b03      	ldr	r3, [pc, #12]	; (8003f48 <HAL_GetTick+0x14>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f44:	4770      	bx	lr
 8003f46:	bf00      	nop
 8003f48:	20003678 	.word	0x20003678

08003f4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b084      	sub	sp, #16
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003f54:	f7ff ffee 	bl	8003f34 <HAL_GetTick>
 8003f58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f64:	d005      	beq.n	8003f72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003f66:	4b0a      	ldr	r3, [pc, #40]	; (8003f90 <HAL_Delay+0x44>)
 8003f68:	781b      	ldrb	r3, [r3, #0]
 8003f6a:	461a      	mov	r2, r3
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	4413      	add	r3, r2
 8003f70:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003f72:	bf00      	nop
 8003f74:	f7ff ffde 	bl	8003f34 <HAL_GetTick>
 8003f78:	4602      	mov	r2, r0
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	1ad3      	subs	r3, r2, r3
 8003f7e:	68fa      	ldr	r2, [r7, #12]
 8003f80:	429a      	cmp	r2, r3
 8003f82:	d8f7      	bhi.n	8003f74 <HAL_Delay+0x28>
  {
  }
}
 8003f84:	bf00      	nop
 8003f86:	bf00      	nop
 8003f88:	3710      	adds	r7, #16
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}
 8003f8e:	bf00      	nop
 8003f90:	20000014 	.word	0x20000014

08003f94 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b083      	sub	sp, #12
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
 8003f9c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	689b      	ldr	r3, [r3, #8]
 8003fa2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	431a      	orrs	r2, r3
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	609a      	str	r2, [r3, #8]
}
 8003fae:	bf00      	nop
 8003fb0:	370c      	adds	r7, #12
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb8:	4770      	bx	lr

08003fba <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003fba:	b480      	push	{r7}
 8003fbc:	b083      	sub	sp, #12
 8003fbe:	af00      	add	r7, sp, #0
 8003fc0:	6078      	str	r0, [r7, #4]
 8003fc2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	689b      	ldr	r3, [r3, #8]
 8003fc8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	431a      	orrs	r2, r3
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	609a      	str	r2, [r3, #8]
}
 8003fd4:	bf00      	nop
 8003fd6:	370c      	adds	r7, #12
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fde:	4770      	bx	lr

08003fe0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b083      	sub	sp, #12
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	689b      	ldr	r3, [r3, #8]
 8003fec:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	370c      	adds	r7, #12
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffa:	4770      	bx	lr

08003ffc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b087      	sub	sp, #28
 8004000:	af00      	add	r7, sp, #0
 8004002:	60f8      	str	r0, [r7, #12]
 8004004:	60b9      	str	r1, [r7, #8]
 8004006:	607a      	str	r2, [r7, #4]
 8004008:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	3360      	adds	r3, #96	; 0x60
 800400e:	461a      	mov	r2, r3
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	009b      	lsls	r3, r3, #2
 8004014:	4413      	add	r3, r2
 8004016:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004018:	697b      	ldr	r3, [r7, #20]
 800401a:	681a      	ldr	r2, [r3, #0]
 800401c:	4b08      	ldr	r3, [pc, #32]	; (8004040 <LL_ADC_SetOffset+0x44>)
 800401e:	4013      	ands	r3, r2
 8004020:	687a      	ldr	r2, [r7, #4]
 8004022:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8004026:	683a      	ldr	r2, [r7, #0]
 8004028:	430a      	orrs	r2, r1
 800402a:	4313      	orrs	r3, r2
 800402c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004030:	697b      	ldr	r3, [r7, #20]
 8004032:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8004034:	bf00      	nop
 8004036:	371c      	adds	r7, #28
 8004038:	46bd      	mov	sp, r7
 800403a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403e:	4770      	bx	lr
 8004040:	03fff000 	.word	0x03fff000

08004044 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8004044:	b480      	push	{r7}
 8004046:	b085      	sub	sp, #20
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
 800404c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	3360      	adds	r3, #96	; 0x60
 8004052:	461a      	mov	r2, r3
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	009b      	lsls	r3, r3, #2
 8004058:	4413      	add	r3, r2
 800405a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8004064:	4618      	mov	r0, r3
 8004066:	3714      	adds	r7, #20
 8004068:	46bd      	mov	sp, r7
 800406a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406e:	4770      	bx	lr

08004070 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8004070:	b480      	push	{r7}
 8004072:	b087      	sub	sp, #28
 8004074:	af00      	add	r7, sp, #0
 8004076:	60f8      	str	r0, [r7, #12]
 8004078:	60b9      	str	r1, [r7, #8]
 800407a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	3360      	adds	r3, #96	; 0x60
 8004080:	461a      	mov	r2, r3
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	009b      	lsls	r3, r3, #2
 8004086:	4413      	add	r3, r2
 8004088:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	431a      	orrs	r2, r3
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800409a:	bf00      	nop
 800409c:	371c      	adds	r7, #28
 800409e:	46bd      	mov	sp, r7
 80040a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a4:	4770      	bx	lr

080040a6 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80040a6:	b480      	push	{r7}
 80040a8:	b087      	sub	sp, #28
 80040aa:	af00      	add	r7, sp, #0
 80040ac:	60f8      	str	r0, [r7, #12]
 80040ae:	60b9      	str	r1, [r7, #8]
 80040b0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	3330      	adds	r3, #48	; 0x30
 80040b6:	461a      	mov	r2, r3
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	0a1b      	lsrs	r3, r3, #8
 80040bc:	009b      	lsls	r3, r3, #2
 80040be:	f003 030c 	and.w	r3, r3, #12
 80040c2:	4413      	add	r3, r2
 80040c4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	681a      	ldr	r2, [r3, #0]
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	f003 031f 	and.w	r3, r3, #31
 80040d0:	211f      	movs	r1, #31
 80040d2:	fa01 f303 	lsl.w	r3, r1, r3
 80040d6:	43db      	mvns	r3, r3
 80040d8:	401a      	ands	r2, r3
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	0e9b      	lsrs	r3, r3, #26
 80040de:	f003 011f 	and.w	r1, r3, #31
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	f003 031f 	and.w	r3, r3, #31
 80040e8:	fa01 f303 	lsl.w	r3, r1, r3
 80040ec:	431a      	orrs	r2, r3
 80040ee:	697b      	ldr	r3, [r7, #20]
 80040f0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80040f2:	bf00      	nop
 80040f4:	371c      	adds	r7, #28
 80040f6:	46bd      	mov	sp, r7
 80040f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fc:	4770      	bx	lr

080040fe <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80040fe:	b480      	push	{r7}
 8004100:	b087      	sub	sp, #28
 8004102:	af00      	add	r7, sp, #0
 8004104:	60f8      	str	r0, [r7, #12]
 8004106:	60b9      	str	r1, [r7, #8]
 8004108:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	3314      	adds	r3, #20
 800410e:	461a      	mov	r2, r3
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	0e5b      	lsrs	r3, r3, #25
 8004114:	009b      	lsls	r3, r3, #2
 8004116:	f003 0304 	and.w	r3, r3, #4
 800411a:	4413      	add	r3, r2
 800411c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800411e:	697b      	ldr	r3, [r7, #20]
 8004120:	681a      	ldr	r2, [r3, #0]
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	0d1b      	lsrs	r3, r3, #20
 8004126:	f003 031f 	and.w	r3, r3, #31
 800412a:	2107      	movs	r1, #7
 800412c:	fa01 f303 	lsl.w	r3, r1, r3
 8004130:	43db      	mvns	r3, r3
 8004132:	401a      	ands	r2, r3
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	0d1b      	lsrs	r3, r3, #20
 8004138:	f003 031f 	and.w	r3, r3, #31
 800413c:	6879      	ldr	r1, [r7, #4]
 800413e:	fa01 f303 	lsl.w	r3, r1, r3
 8004142:	431a      	orrs	r2, r3
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004148:	bf00      	nop
 800414a:	371c      	adds	r7, #28
 800414c:	46bd      	mov	sp, r7
 800414e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004152:	4770      	bx	lr

08004154 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004154:	b480      	push	{r7}
 8004156:	b085      	sub	sp, #20
 8004158:	af00      	add	r7, sp, #0
 800415a:	60f8      	str	r0, [r7, #12]
 800415c:	60b9      	str	r1, [r7, #8]
 800415e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800416c:	43db      	mvns	r3, r3
 800416e:	401a      	ands	r2, r3
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	f003 0318 	and.w	r3, r3, #24
 8004176:	4908      	ldr	r1, [pc, #32]	; (8004198 <LL_ADC_SetChannelSingleDiff+0x44>)
 8004178:	40d9      	lsrs	r1, r3
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	400b      	ands	r3, r1
 800417e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004182:	431a      	orrs	r2, r3
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800418a:	bf00      	nop
 800418c:	3714      	adds	r7, #20
 800418e:	46bd      	mov	sp, r7
 8004190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004194:	4770      	bx	lr
 8004196:	bf00      	nop
 8004198:	0007ffff 	.word	0x0007ffff

0800419c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800419c:	b480      	push	{r7}
 800419e:	b083      	sub	sp, #12
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	689b      	ldr	r3, [r3, #8]
 80041a8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80041ac:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80041b0:	687a      	ldr	r2, [r7, #4]
 80041b2:	6093      	str	r3, [r2, #8]
}
 80041b4:	bf00      	nop
 80041b6:	370c      	adds	r7, #12
 80041b8:	46bd      	mov	sp, r7
 80041ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041be:	4770      	bx	lr

080041c0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b083      	sub	sp, #12
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	689b      	ldr	r3, [r3, #8]
 80041cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80041d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80041d4:	d101      	bne.n	80041da <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80041d6:	2301      	movs	r3, #1
 80041d8:	e000      	b.n	80041dc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80041da:	2300      	movs	r3, #0
}
 80041dc:	4618      	mov	r0, r3
 80041de:	370c      	adds	r7, #12
 80041e0:	46bd      	mov	sp, r7
 80041e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e6:	4770      	bx	lr

080041e8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80041e8:	b480      	push	{r7}
 80041ea:	b083      	sub	sp, #12
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	689b      	ldr	r3, [r3, #8]
 80041f4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80041f8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80041fc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004204:	bf00      	nop
 8004206:	370c      	adds	r7, #12
 8004208:	46bd      	mov	sp, r7
 800420a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420e:	4770      	bx	lr

08004210 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8004210:	b480      	push	{r7}
 8004212:	b083      	sub	sp, #12
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004220:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004224:	d101      	bne.n	800422a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004226:	2301      	movs	r3, #1
 8004228:	e000      	b.n	800422c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800422a:	2300      	movs	r3, #0
}
 800422c:	4618      	mov	r0, r3
 800422e:	370c      	adds	r7, #12
 8004230:	46bd      	mov	sp, r7
 8004232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004236:	4770      	bx	lr

08004238 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004238:	b480      	push	{r7}
 800423a:	b083      	sub	sp, #12
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004248:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800424c:	f043 0201 	orr.w	r2, r3, #1
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004254:	bf00      	nop
 8004256:	370c      	adds	r7, #12
 8004258:	46bd      	mov	sp, r7
 800425a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425e:	4770      	bx	lr

08004260 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8004260:	b480      	push	{r7}
 8004262:	b083      	sub	sp, #12
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004270:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004274:	f043 0202 	orr.w	r2, r3, #2
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800427c:	bf00      	nop
 800427e:	370c      	adds	r7, #12
 8004280:	46bd      	mov	sp, r7
 8004282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004286:	4770      	bx	lr

08004288 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8004288:	b480      	push	{r7}
 800428a:	b083      	sub	sp, #12
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	689b      	ldr	r3, [r3, #8]
 8004294:	f003 0301 	and.w	r3, r3, #1
 8004298:	2b01      	cmp	r3, #1
 800429a:	d101      	bne.n	80042a0 <LL_ADC_IsEnabled+0x18>
 800429c:	2301      	movs	r3, #1
 800429e:	e000      	b.n	80042a2 <LL_ADC_IsEnabled+0x1a>
 80042a0:	2300      	movs	r3, #0
}
 80042a2:	4618      	mov	r0, r3
 80042a4:	370c      	adds	r7, #12
 80042a6:	46bd      	mov	sp, r7
 80042a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ac:	4770      	bx	lr

080042ae <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80042ae:	b480      	push	{r7}
 80042b0:	b083      	sub	sp, #12
 80042b2:	af00      	add	r7, sp, #0
 80042b4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	689b      	ldr	r3, [r3, #8]
 80042ba:	f003 0302 	and.w	r3, r3, #2
 80042be:	2b02      	cmp	r3, #2
 80042c0:	d101      	bne.n	80042c6 <LL_ADC_IsDisableOngoing+0x18>
 80042c2:	2301      	movs	r3, #1
 80042c4:	e000      	b.n	80042c8 <LL_ADC_IsDisableOngoing+0x1a>
 80042c6:	2300      	movs	r3, #0
}
 80042c8:	4618      	mov	r0, r3
 80042ca:	370c      	adds	r7, #12
 80042cc:	46bd      	mov	sp, r7
 80042ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d2:	4770      	bx	lr

080042d4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b083      	sub	sp, #12
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	689b      	ldr	r3, [r3, #8]
 80042e0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80042e4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80042e8:	f043 0204 	orr.w	r2, r3, #4
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80042f0:	bf00      	nop
 80042f2:	370c      	adds	r7, #12
 80042f4:	46bd      	mov	sp, r7
 80042f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fa:	4770      	bx	lr

080042fc <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80042fc:	b480      	push	{r7}
 80042fe:	b083      	sub	sp, #12
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	689b      	ldr	r3, [r3, #8]
 8004308:	f003 0304 	and.w	r3, r3, #4
 800430c:	2b04      	cmp	r3, #4
 800430e:	d101      	bne.n	8004314 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004310:	2301      	movs	r3, #1
 8004312:	e000      	b.n	8004316 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004314:	2300      	movs	r3, #0
}
 8004316:	4618      	mov	r0, r3
 8004318:	370c      	adds	r7, #12
 800431a:	46bd      	mov	sp, r7
 800431c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004320:	4770      	bx	lr

08004322 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004322:	b480      	push	{r7}
 8004324:	b083      	sub	sp, #12
 8004326:	af00      	add	r7, sp, #0
 8004328:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	689b      	ldr	r3, [r3, #8]
 800432e:	f003 0308 	and.w	r3, r3, #8
 8004332:	2b08      	cmp	r3, #8
 8004334:	d101      	bne.n	800433a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004336:	2301      	movs	r3, #1
 8004338:	e000      	b.n	800433c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800433a:	2300      	movs	r3, #0
}
 800433c:	4618      	mov	r0, r3
 800433e:	370c      	adds	r7, #12
 8004340:	46bd      	mov	sp, r7
 8004342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004346:	4770      	bx	lr

08004348 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b088      	sub	sp, #32
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004350:	2300      	movs	r3, #0
 8004352:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004354:	2300      	movs	r3, #0
 8004356:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d101      	bne.n	8004362 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800435e:	2301      	movs	r3, #1
 8004360:	e12c      	b.n	80045bc <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	691b      	ldr	r3, [r3, #16]
 8004366:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800436c:	2b00      	cmp	r3, #0
 800436e:	d109      	bne.n	8004384 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004370:	6878      	ldr	r0, [r7, #4]
 8004372:	f7ff fba5 	bl	8003ac0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2200      	movs	r2, #0
 800437a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2200      	movs	r2, #0
 8004380:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4618      	mov	r0, r3
 800438a:	f7ff ff19 	bl	80041c0 <LL_ADC_IsDeepPowerDownEnabled>
 800438e:	4603      	mov	r3, r0
 8004390:	2b00      	cmp	r3, #0
 8004392:	d004      	beq.n	800439e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4618      	mov	r0, r3
 800439a:	f7ff feff 	bl	800419c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4618      	mov	r0, r3
 80043a4:	f7ff ff34 	bl	8004210 <LL_ADC_IsInternalRegulatorEnabled>
 80043a8:	4603      	mov	r3, r0
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d115      	bne.n	80043da <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4618      	mov	r0, r3
 80043b4:	f7ff ff18 	bl	80041e8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80043b8:	4b82      	ldr	r3, [pc, #520]	; (80045c4 <HAL_ADC_Init+0x27c>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	099b      	lsrs	r3, r3, #6
 80043be:	4a82      	ldr	r2, [pc, #520]	; (80045c8 <HAL_ADC_Init+0x280>)
 80043c0:	fba2 2303 	umull	r2, r3, r2, r3
 80043c4:	099b      	lsrs	r3, r3, #6
 80043c6:	3301      	adds	r3, #1
 80043c8:	005b      	lsls	r3, r3, #1
 80043ca:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80043cc:	e002      	b.n	80043d4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	3b01      	subs	r3, #1
 80043d2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d1f9      	bne.n	80043ce <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4618      	mov	r0, r3
 80043e0:	f7ff ff16 	bl	8004210 <LL_ADC_IsInternalRegulatorEnabled>
 80043e4:	4603      	mov	r3, r0
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d10d      	bne.n	8004406 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043ee:	f043 0210 	orr.w	r2, r3, #16
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043fa:	f043 0201 	orr.w	r2, r3, #1
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004402:	2301      	movs	r3, #1
 8004404:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4618      	mov	r0, r3
 800440c:	f7ff ff76 	bl	80042fc <LL_ADC_REG_IsConversionOngoing>
 8004410:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004416:	f003 0310 	and.w	r3, r3, #16
 800441a:	2b00      	cmp	r3, #0
 800441c:	f040 80c5 	bne.w	80045aa <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	2b00      	cmp	r3, #0
 8004424:	f040 80c1 	bne.w	80045aa <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800442c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004430:	f043 0202 	orr.w	r2, r3, #2
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4618      	mov	r0, r3
 800443e:	f7ff ff23 	bl	8004288 <LL_ADC_IsEnabled>
 8004442:	4603      	mov	r3, r0
 8004444:	2b00      	cmp	r3, #0
 8004446:	d10b      	bne.n	8004460 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004448:	4860      	ldr	r0, [pc, #384]	; (80045cc <HAL_ADC_Init+0x284>)
 800444a:	f7ff ff1d 	bl	8004288 <LL_ADC_IsEnabled>
 800444e:	4603      	mov	r3, r0
 8004450:	2b00      	cmp	r3, #0
 8004452:	d105      	bne.n	8004460 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	4619      	mov	r1, r3
 800445a:	485d      	ldr	r0, [pc, #372]	; (80045d0 <HAL_ADC_Init+0x288>)
 800445c:	f7ff fd9a 	bl	8003f94 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	7e5b      	ldrb	r3, [r3, #25]
 8004464:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800446a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8004470:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8004476:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800447e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004480:	4313      	orrs	r3, r2
 8004482:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	f893 3020 	ldrb.w	r3, [r3, #32]
 800448a:	2b01      	cmp	r3, #1
 800448c:	d106      	bne.n	800449c <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004492:	3b01      	subs	r3, #1
 8004494:	045b      	lsls	r3, r3, #17
 8004496:	69ba      	ldr	r2, [r7, #24]
 8004498:	4313      	orrs	r3, r2
 800449a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d009      	beq.n	80044b8 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044a8:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044b0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80044b2:	69ba      	ldr	r2, [r7, #24]
 80044b4:	4313      	orrs	r3, r2
 80044b6:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	68da      	ldr	r2, [r3, #12]
 80044be:	4b45      	ldr	r3, [pc, #276]	; (80045d4 <HAL_ADC_Init+0x28c>)
 80044c0:	4013      	ands	r3, r2
 80044c2:	687a      	ldr	r2, [r7, #4]
 80044c4:	6812      	ldr	r2, [r2, #0]
 80044c6:	69b9      	ldr	r1, [r7, #24]
 80044c8:	430b      	orrs	r3, r1
 80044ca:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4618      	mov	r0, r3
 80044d2:	f7ff ff13 	bl	80042fc <LL_ADC_REG_IsConversionOngoing>
 80044d6:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4618      	mov	r0, r3
 80044de:	f7ff ff20 	bl	8004322 <LL_ADC_INJ_IsConversionOngoing>
 80044e2:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80044e4:	693b      	ldr	r3, [r7, #16]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d13d      	bne.n	8004566 <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d13a      	bne.n	8004566 <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80044f4:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80044fc:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80044fe:	4313      	orrs	r3, r2
 8004500:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	68db      	ldr	r3, [r3, #12]
 8004508:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800450c:	f023 0302 	bic.w	r3, r3, #2
 8004510:	687a      	ldr	r2, [r7, #4]
 8004512:	6812      	ldr	r2, [r2, #0]
 8004514:	69b9      	ldr	r1, [r7, #24]
 8004516:	430b      	orrs	r3, r1
 8004518:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004520:	2b01      	cmp	r3, #1
 8004522:	d118      	bne.n	8004556 <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	691b      	ldr	r3, [r3, #16]
 800452a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800452e:	f023 0304 	bic.w	r3, r3, #4
 8004532:	687a      	ldr	r2, [r7, #4]
 8004534:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8004536:	687a      	ldr	r2, [r7, #4]
 8004538:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800453a:	4311      	orrs	r1, r2
 800453c:	687a      	ldr	r2, [r7, #4]
 800453e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004540:	4311      	orrs	r1, r2
 8004542:	687a      	ldr	r2, [r7, #4]
 8004544:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004546:	430a      	orrs	r2, r1
 8004548:	431a      	orrs	r2, r3
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f042 0201 	orr.w	r2, r2, #1
 8004552:	611a      	str	r2, [r3, #16]
 8004554:	e007      	b.n	8004566 <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	691a      	ldr	r2, [r3, #16]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f022 0201 	bic.w	r2, r2, #1
 8004564:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	691b      	ldr	r3, [r3, #16]
 800456a:	2b01      	cmp	r3, #1
 800456c:	d10c      	bne.n	8004588 <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004574:	f023 010f 	bic.w	r1, r3, #15
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	69db      	ldr	r3, [r3, #28]
 800457c:	1e5a      	subs	r2, r3, #1
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	430a      	orrs	r2, r1
 8004584:	631a      	str	r2, [r3, #48]	; 0x30
 8004586:	e007      	b.n	8004598 <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f022 020f 	bic.w	r2, r2, #15
 8004596:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800459c:	f023 0303 	bic.w	r3, r3, #3
 80045a0:	f043 0201 	orr.w	r2, r3, #1
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	655a      	str	r2, [r3, #84]	; 0x54
 80045a8:	e007      	b.n	80045ba <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045ae:	f043 0210 	orr.w	r2, r3, #16
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
 80045b8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80045ba:	7ffb      	ldrb	r3, [r7, #31]
}
 80045bc:	4618      	mov	r0, r3
 80045be:	3720      	adds	r7, #32
 80045c0:	46bd      	mov	sp, r7
 80045c2:	bd80      	pop	{r7, pc}
 80045c4:	2000000c 	.word	0x2000000c
 80045c8:	053e2d63 	.word	0x053e2d63
 80045cc:	50040000 	.word	0x50040000
 80045d0:	50040300 	.word	0x50040300
 80045d4:	fff0c007 	.word	0xfff0c007

080045d8 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b084      	sub	sp, #16
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4618      	mov	r0, r3
 80045e6:	f7ff fe89 	bl	80042fc <LL_ADC_REG_IsConversionOngoing>
 80045ea:	4603      	mov	r3, r0
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d14f      	bne.n	8004690 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80045f6:	2b01      	cmp	r3, #1
 80045f8:	d101      	bne.n	80045fe <HAL_ADC_Start+0x26>
 80045fa:	2302      	movs	r3, #2
 80045fc:	e04b      	b.n	8004696 <HAL_ADC_Start+0xbe>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2201      	movs	r2, #1
 8004602:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8004606:	6878      	ldr	r0, [r7, #4]
 8004608:	f000 fc36 	bl	8004e78 <ADC_Enable>
 800460c:	4603      	mov	r3, r0
 800460e:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8004610:	7bfb      	ldrb	r3, [r7, #15]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d137      	bne.n	8004686 <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800461a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800461e:	f023 0301 	bic.w	r3, r3, #1
 8004622:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800462e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004632:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004636:	d106      	bne.n	8004646 <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800463c:	f023 0206 	bic.w	r2, r3, #6
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	659a      	str	r2, [r3, #88]	; 0x58
 8004644:	e002      	b.n	800464c <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2200      	movs	r2, #0
 800464a:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	221c      	movs	r2, #28
 8004652:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2200      	movs	r2, #0
 8004658:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	68db      	ldr	r3, [r3, #12]
 8004662:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004666:	2b00      	cmp	r3, #0
 8004668:	d007      	beq.n	800467a <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800466e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004672:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4618      	mov	r0, r3
 8004680:	f7ff fe28 	bl	80042d4 <LL_ADC_REG_StartConversion>
 8004684:	e006      	b.n	8004694 <HAL_ADC_Start+0xbc>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2200      	movs	r2, #0
 800468a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800468e:	e001      	b.n	8004694 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004690:	2302      	movs	r3, #2
 8004692:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8004694:	7bfb      	ldrb	r3, [r7, #15]
}
 8004696:	4618      	mov	r0, r3
 8004698:	3710      	adds	r7, #16
 800469a:	46bd      	mov	sp, r7
 800469c:	bd80      	pop	{r7, pc}

0800469e <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800469e:	b480      	push	{r7}
 80046a0:	b083      	sub	sp, #12
 80046a2:	af00      	add	r7, sp, #0
 80046a4:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80046ac:	4618      	mov	r0, r3
 80046ae:	370c      	adds	r7, #12
 80046b0:	46bd      	mov	sp, r7
 80046b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b6:	4770      	bx	lr

080046b8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b0b6      	sub	sp, #216	; 0xd8
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
 80046c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80046c2:	2300      	movs	r3, #0
 80046c4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80046c8:	2300      	movs	r3, #0
 80046ca:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80046d2:	2b01      	cmp	r3, #1
 80046d4:	d101      	bne.n	80046da <HAL_ADC_ConfigChannel+0x22>
 80046d6:	2302      	movs	r3, #2
 80046d8:	e3b9      	b.n	8004e4e <HAL_ADC_ConfigChannel+0x796>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2201      	movs	r2, #1
 80046de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4618      	mov	r0, r3
 80046e8:	f7ff fe08 	bl	80042fc <LL_ADC_REG_IsConversionOngoing>
 80046ec:	4603      	mov	r3, r0
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	f040 839e 	bne.w	8004e30 <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	2b05      	cmp	r3, #5
 80046fa:	d824      	bhi.n	8004746 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	3b02      	subs	r3, #2
 8004702:	2b03      	cmp	r3, #3
 8004704:	d81b      	bhi.n	800473e <HAL_ADC_ConfigChannel+0x86>
 8004706:	a201      	add	r2, pc, #4	; (adr r2, 800470c <HAL_ADC_ConfigChannel+0x54>)
 8004708:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800470c:	0800471d 	.word	0x0800471d
 8004710:	08004725 	.word	0x08004725
 8004714:	0800472d 	.word	0x0800472d
 8004718:	08004735 	.word	0x08004735
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	220c      	movs	r2, #12
 8004720:	605a      	str	r2, [r3, #4]
          break;
 8004722:	e011      	b.n	8004748 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	2212      	movs	r2, #18
 8004728:	605a      	str	r2, [r3, #4]
          break;
 800472a:	e00d      	b.n	8004748 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	2218      	movs	r2, #24
 8004730:	605a      	str	r2, [r3, #4]
          break;
 8004732:	e009      	b.n	8004748 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	f44f 7280 	mov.w	r2, #256	; 0x100
 800473a:	605a      	str	r2, [r3, #4]
          break;
 800473c:	e004      	b.n	8004748 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	2206      	movs	r2, #6
 8004742:	605a      	str	r2, [r3, #4]
          break;
 8004744:	e000      	b.n	8004748 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8004746:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6818      	ldr	r0, [r3, #0]
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	6859      	ldr	r1, [r3, #4]
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	461a      	mov	r2, r3
 8004756:	f7ff fca6 	bl	80040a6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4618      	mov	r0, r3
 8004760:	f7ff fdcc 	bl	80042fc <LL_ADC_REG_IsConversionOngoing>
 8004764:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4618      	mov	r0, r3
 800476e:	f7ff fdd8 	bl	8004322 <LL_ADC_INJ_IsConversionOngoing>
 8004772:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004776:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800477a:	2b00      	cmp	r3, #0
 800477c:	f040 81a6 	bne.w	8004acc <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004780:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004784:	2b00      	cmp	r3, #0
 8004786:	f040 81a1 	bne.w	8004acc <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6818      	ldr	r0, [r3, #0]
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	6819      	ldr	r1, [r3, #0]
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	689b      	ldr	r3, [r3, #8]
 8004796:	461a      	mov	r2, r3
 8004798:	f7ff fcb1 	bl	80040fe <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	695a      	ldr	r2, [r3, #20]
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	68db      	ldr	r3, [r3, #12]
 80047a6:	08db      	lsrs	r3, r3, #3
 80047a8:	f003 0303 	and.w	r3, r3, #3
 80047ac:	005b      	lsls	r3, r3, #1
 80047ae:	fa02 f303 	lsl.w	r3, r2, r3
 80047b2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	691b      	ldr	r3, [r3, #16]
 80047ba:	2b04      	cmp	r3, #4
 80047bc:	d00a      	beq.n	80047d4 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6818      	ldr	r0, [r3, #0]
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	6919      	ldr	r1, [r3, #16]
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	681a      	ldr	r2, [r3, #0]
 80047ca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80047ce:	f7ff fc15 	bl	8003ffc <LL_ADC_SetOffset>
 80047d2:	e17b      	b.n	8004acc <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	2100      	movs	r1, #0
 80047da:	4618      	mov	r0, r3
 80047dc:	f7ff fc32 	bl	8004044 <LL_ADC_GetOffsetChannel>
 80047e0:	4603      	mov	r3, r0
 80047e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d10a      	bne.n	8004800 <HAL_ADC_ConfigChannel+0x148>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	2100      	movs	r1, #0
 80047f0:	4618      	mov	r0, r3
 80047f2:	f7ff fc27 	bl	8004044 <LL_ADC_GetOffsetChannel>
 80047f6:	4603      	mov	r3, r0
 80047f8:	0e9b      	lsrs	r3, r3, #26
 80047fa:	f003 021f 	and.w	r2, r3, #31
 80047fe:	e01e      	b.n	800483e <HAL_ADC_ConfigChannel+0x186>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	2100      	movs	r1, #0
 8004806:	4618      	mov	r0, r3
 8004808:	f7ff fc1c 	bl	8004044 <LL_ADC_GetOffsetChannel>
 800480c:	4603      	mov	r3, r0
 800480e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004812:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004816:	fa93 f3a3 	rbit	r3, r3
 800481a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800481e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004822:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004826:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800482a:	2b00      	cmp	r3, #0
 800482c:	d101      	bne.n	8004832 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 800482e:	2320      	movs	r3, #32
 8004830:	e004      	b.n	800483c <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8004832:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004836:	fab3 f383 	clz	r3, r3
 800483a:	b2db      	uxtb	r3, r3
 800483c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004846:	2b00      	cmp	r3, #0
 8004848:	d105      	bne.n	8004856 <HAL_ADC_ConfigChannel+0x19e>
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	0e9b      	lsrs	r3, r3, #26
 8004850:	f003 031f 	and.w	r3, r3, #31
 8004854:	e018      	b.n	8004888 <HAL_ADC_ConfigChannel+0x1d0>
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800485e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004862:	fa93 f3a3 	rbit	r3, r3
 8004866:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800486a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800486e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8004872:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004876:	2b00      	cmp	r3, #0
 8004878:	d101      	bne.n	800487e <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 800487a:	2320      	movs	r3, #32
 800487c:	e004      	b.n	8004888 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 800487e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004882:	fab3 f383 	clz	r3, r3
 8004886:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004888:	429a      	cmp	r2, r3
 800488a:	d106      	bne.n	800489a <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	2200      	movs	r2, #0
 8004892:	2100      	movs	r1, #0
 8004894:	4618      	mov	r0, r3
 8004896:	f7ff fbeb 	bl	8004070 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	2101      	movs	r1, #1
 80048a0:	4618      	mov	r0, r3
 80048a2:	f7ff fbcf 	bl	8004044 <LL_ADC_GetOffsetChannel>
 80048a6:	4603      	mov	r3, r0
 80048a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d10a      	bne.n	80048c6 <HAL_ADC_ConfigChannel+0x20e>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	2101      	movs	r1, #1
 80048b6:	4618      	mov	r0, r3
 80048b8:	f7ff fbc4 	bl	8004044 <LL_ADC_GetOffsetChannel>
 80048bc:	4603      	mov	r3, r0
 80048be:	0e9b      	lsrs	r3, r3, #26
 80048c0:	f003 021f 	and.w	r2, r3, #31
 80048c4:	e01e      	b.n	8004904 <HAL_ADC_ConfigChannel+0x24c>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	2101      	movs	r1, #1
 80048cc:	4618      	mov	r0, r3
 80048ce:	f7ff fbb9 	bl	8004044 <LL_ADC_GetOffsetChannel>
 80048d2:	4603      	mov	r3, r0
 80048d4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048d8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80048dc:	fa93 f3a3 	rbit	r3, r3
 80048e0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80048e4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80048e8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80048ec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d101      	bne.n	80048f8 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 80048f4:	2320      	movs	r3, #32
 80048f6:	e004      	b.n	8004902 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 80048f8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80048fc:	fab3 f383 	clz	r3, r3
 8004900:	b2db      	uxtb	r3, r3
 8004902:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800490c:	2b00      	cmp	r3, #0
 800490e:	d105      	bne.n	800491c <HAL_ADC_ConfigChannel+0x264>
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	0e9b      	lsrs	r3, r3, #26
 8004916:	f003 031f 	and.w	r3, r3, #31
 800491a:	e018      	b.n	800494e <HAL_ADC_ConfigChannel+0x296>
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004924:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004928:	fa93 f3a3 	rbit	r3, r3
 800492c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8004930:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004934:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8004938:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800493c:	2b00      	cmp	r3, #0
 800493e:	d101      	bne.n	8004944 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8004940:	2320      	movs	r3, #32
 8004942:	e004      	b.n	800494e <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8004944:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004948:	fab3 f383 	clz	r3, r3
 800494c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800494e:	429a      	cmp	r2, r3
 8004950:	d106      	bne.n	8004960 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	2200      	movs	r2, #0
 8004958:	2101      	movs	r1, #1
 800495a:	4618      	mov	r0, r3
 800495c:	f7ff fb88 	bl	8004070 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	2102      	movs	r1, #2
 8004966:	4618      	mov	r0, r3
 8004968:	f7ff fb6c 	bl	8004044 <LL_ADC_GetOffsetChannel>
 800496c:	4603      	mov	r3, r0
 800496e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004972:	2b00      	cmp	r3, #0
 8004974:	d10a      	bne.n	800498c <HAL_ADC_ConfigChannel+0x2d4>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	2102      	movs	r1, #2
 800497c:	4618      	mov	r0, r3
 800497e:	f7ff fb61 	bl	8004044 <LL_ADC_GetOffsetChannel>
 8004982:	4603      	mov	r3, r0
 8004984:	0e9b      	lsrs	r3, r3, #26
 8004986:	f003 021f 	and.w	r2, r3, #31
 800498a:	e01e      	b.n	80049ca <HAL_ADC_ConfigChannel+0x312>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	2102      	movs	r1, #2
 8004992:	4618      	mov	r0, r3
 8004994:	f7ff fb56 	bl	8004044 <LL_ADC_GetOffsetChannel>
 8004998:	4603      	mov	r3, r0
 800499a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800499e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80049a2:	fa93 f3a3 	rbit	r3, r3
 80049a6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80049aa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80049ae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80049b2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d101      	bne.n	80049be <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 80049ba:	2320      	movs	r3, #32
 80049bc:	e004      	b.n	80049c8 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80049be:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80049c2:	fab3 f383 	clz	r3, r3
 80049c6:	b2db      	uxtb	r3, r3
 80049c8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d105      	bne.n	80049e2 <HAL_ADC_ConfigChannel+0x32a>
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	0e9b      	lsrs	r3, r3, #26
 80049dc:	f003 031f 	and.w	r3, r3, #31
 80049e0:	e016      	b.n	8004a10 <HAL_ADC_ConfigChannel+0x358>
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049ea:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80049ee:	fa93 f3a3 	rbit	r3, r3
 80049f2:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80049f4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80049f6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80049fa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d101      	bne.n	8004a06 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8004a02:	2320      	movs	r3, #32
 8004a04:	e004      	b.n	8004a10 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8004a06:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004a0a:	fab3 f383 	clz	r3, r3
 8004a0e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004a10:	429a      	cmp	r2, r3
 8004a12:	d106      	bne.n	8004a22 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	2200      	movs	r2, #0
 8004a1a:	2102      	movs	r1, #2
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	f7ff fb27 	bl	8004070 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	2103      	movs	r1, #3
 8004a28:	4618      	mov	r0, r3
 8004a2a:	f7ff fb0b 	bl	8004044 <LL_ADC_GetOffsetChannel>
 8004a2e:	4603      	mov	r3, r0
 8004a30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d10a      	bne.n	8004a4e <HAL_ADC_ConfigChannel+0x396>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	2103      	movs	r1, #3
 8004a3e:	4618      	mov	r0, r3
 8004a40:	f7ff fb00 	bl	8004044 <LL_ADC_GetOffsetChannel>
 8004a44:	4603      	mov	r3, r0
 8004a46:	0e9b      	lsrs	r3, r3, #26
 8004a48:	f003 021f 	and.w	r2, r3, #31
 8004a4c:	e017      	b.n	8004a7e <HAL_ADC_ConfigChannel+0x3c6>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	2103      	movs	r1, #3
 8004a54:	4618      	mov	r0, r3
 8004a56:	f7ff faf5 	bl	8004044 <LL_ADC_GetOffsetChannel>
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a5e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a60:	fa93 f3a3 	rbit	r3, r3
 8004a64:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8004a66:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004a68:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8004a6a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d101      	bne.n	8004a74 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8004a70:	2320      	movs	r3, #32
 8004a72:	e003      	b.n	8004a7c <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8004a74:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a76:	fab3 f383 	clz	r3, r3
 8004a7a:	b2db      	uxtb	r3, r3
 8004a7c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d105      	bne.n	8004a96 <HAL_ADC_ConfigChannel+0x3de>
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	0e9b      	lsrs	r3, r3, #26
 8004a90:	f003 031f 	and.w	r3, r3, #31
 8004a94:	e011      	b.n	8004aba <HAL_ADC_ConfigChannel+0x402>
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a9c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004a9e:	fa93 f3a3 	rbit	r3, r3
 8004aa2:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8004aa4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004aa6:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8004aa8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d101      	bne.n	8004ab2 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8004aae:	2320      	movs	r3, #32
 8004ab0:	e003      	b.n	8004aba <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8004ab2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ab4:	fab3 f383 	clz	r3, r3
 8004ab8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004aba:	429a      	cmp	r2, r3
 8004abc:	d106      	bne.n	8004acc <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	2103      	movs	r1, #3
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	f7ff fad2 	bl	8004070 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	f7ff fbd9 	bl	8004288 <LL_ADC_IsEnabled>
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	f040 813f 	bne.w	8004d5c <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6818      	ldr	r0, [r3, #0]
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	6819      	ldr	r1, [r3, #0]
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	68db      	ldr	r3, [r3, #12]
 8004aea:	461a      	mov	r2, r3
 8004aec:	f7ff fb32 	bl	8004154 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	68db      	ldr	r3, [r3, #12]
 8004af4:	4a8e      	ldr	r2, [pc, #568]	; (8004d30 <HAL_ADC_ConfigChannel+0x678>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	f040 8130 	bne.w	8004d5c <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d10b      	bne.n	8004b24 <HAL_ADC_ConfigChannel+0x46c>
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	0e9b      	lsrs	r3, r3, #26
 8004b12:	3301      	adds	r3, #1
 8004b14:	f003 031f 	and.w	r3, r3, #31
 8004b18:	2b09      	cmp	r3, #9
 8004b1a:	bf94      	ite	ls
 8004b1c:	2301      	movls	r3, #1
 8004b1e:	2300      	movhi	r3, #0
 8004b20:	b2db      	uxtb	r3, r3
 8004b22:	e019      	b.n	8004b58 <HAL_ADC_ConfigChannel+0x4a0>
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b2c:	fa93 f3a3 	rbit	r3, r3
 8004b30:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8004b32:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004b34:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8004b36:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d101      	bne.n	8004b40 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8004b3c:	2320      	movs	r3, #32
 8004b3e:	e003      	b.n	8004b48 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8004b40:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b42:	fab3 f383 	clz	r3, r3
 8004b46:	b2db      	uxtb	r3, r3
 8004b48:	3301      	adds	r3, #1
 8004b4a:	f003 031f 	and.w	r3, r3, #31
 8004b4e:	2b09      	cmp	r3, #9
 8004b50:	bf94      	ite	ls
 8004b52:	2301      	movls	r3, #1
 8004b54:	2300      	movhi	r3, #0
 8004b56:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d079      	beq.n	8004c50 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d107      	bne.n	8004b78 <HAL_ADC_ConfigChannel+0x4c0>
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	0e9b      	lsrs	r3, r3, #26
 8004b6e:	3301      	adds	r3, #1
 8004b70:	069b      	lsls	r3, r3, #26
 8004b72:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004b76:	e015      	b.n	8004ba4 <HAL_ADC_ConfigChannel+0x4ec>
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b80:	fa93 f3a3 	rbit	r3, r3
 8004b84:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004b86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b88:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8004b8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d101      	bne.n	8004b94 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8004b90:	2320      	movs	r3, #32
 8004b92:	e003      	b.n	8004b9c <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8004b94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b96:	fab3 f383 	clz	r3, r3
 8004b9a:	b2db      	uxtb	r3, r3
 8004b9c:	3301      	adds	r3, #1
 8004b9e:	069b      	lsls	r3, r3, #26
 8004ba0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d109      	bne.n	8004bc4 <HAL_ADC_ConfigChannel+0x50c>
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	0e9b      	lsrs	r3, r3, #26
 8004bb6:	3301      	adds	r3, #1
 8004bb8:	f003 031f 	and.w	r3, r3, #31
 8004bbc:	2101      	movs	r1, #1
 8004bbe:	fa01 f303 	lsl.w	r3, r1, r3
 8004bc2:	e017      	b.n	8004bf4 <HAL_ADC_ConfigChannel+0x53c>
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004bcc:	fa93 f3a3 	rbit	r3, r3
 8004bd0:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8004bd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004bd4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8004bd6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d101      	bne.n	8004be0 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8004bdc:	2320      	movs	r3, #32
 8004bde:	e003      	b.n	8004be8 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8004be0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004be2:	fab3 f383 	clz	r3, r3
 8004be6:	b2db      	uxtb	r3, r3
 8004be8:	3301      	adds	r3, #1
 8004bea:	f003 031f 	and.w	r3, r3, #31
 8004bee:	2101      	movs	r1, #1
 8004bf0:	fa01 f303 	lsl.w	r3, r1, r3
 8004bf4:	ea42 0103 	orr.w	r1, r2, r3
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d10a      	bne.n	8004c1a <HAL_ADC_ConfigChannel+0x562>
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	0e9b      	lsrs	r3, r3, #26
 8004c0a:	3301      	adds	r3, #1
 8004c0c:	f003 021f 	and.w	r2, r3, #31
 8004c10:	4613      	mov	r3, r2
 8004c12:	005b      	lsls	r3, r3, #1
 8004c14:	4413      	add	r3, r2
 8004c16:	051b      	lsls	r3, r3, #20
 8004c18:	e018      	b.n	8004c4c <HAL_ADC_ConfigChannel+0x594>
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c22:	fa93 f3a3 	rbit	r3, r3
 8004c26:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004c28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c2a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8004c2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d101      	bne.n	8004c36 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8004c32:	2320      	movs	r3, #32
 8004c34:	e003      	b.n	8004c3e <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8004c36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c38:	fab3 f383 	clz	r3, r3
 8004c3c:	b2db      	uxtb	r3, r3
 8004c3e:	3301      	adds	r3, #1
 8004c40:	f003 021f 	and.w	r2, r3, #31
 8004c44:	4613      	mov	r3, r2
 8004c46:	005b      	lsls	r3, r3, #1
 8004c48:	4413      	add	r3, r2
 8004c4a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004c4c:	430b      	orrs	r3, r1
 8004c4e:	e080      	b.n	8004d52 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d107      	bne.n	8004c6c <HAL_ADC_ConfigChannel+0x5b4>
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	0e9b      	lsrs	r3, r3, #26
 8004c62:	3301      	adds	r3, #1
 8004c64:	069b      	lsls	r3, r3, #26
 8004c66:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004c6a:	e015      	b.n	8004c98 <HAL_ADC_ConfigChannel+0x5e0>
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c74:	fa93 f3a3 	rbit	r3, r3
 8004c78:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8004c7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c7c:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8004c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d101      	bne.n	8004c88 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8004c84:	2320      	movs	r3, #32
 8004c86:	e003      	b.n	8004c90 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8004c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c8a:	fab3 f383 	clz	r3, r3
 8004c8e:	b2db      	uxtb	r3, r3
 8004c90:	3301      	adds	r3, #1
 8004c92:	069b      	lsls	r3, r3, #26
 8004c94:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d109      	bne.n	8004cb8 <HAL_ADC_ConfigChannel+0x600>
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	0e9b      	lsrs	r3, r3, #26
 8004caa:	3301      	adds	r3, #1
 8004cac:	f003 031f 	and.w	r3, r3, #31
 8004cb0:	2101      	movs	r1, #1
 8004cb2:	fa01 f303 	lsl.w	r3, r1, r3
 8004cb6:	e017      	b.n	8004ce8 <HAL_ADC_ConfigChannel+0x630>
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cbe:	6a3b      	ldr	r3, [r7, #32]
 8004cc0:	fa93 f3a3 	rbit	r3, r3
 8004cc4:	61fb      	str	r3, [r7, #28]
  return result;
 8004cc6:	69fb      	ldr	r3, [r7, #28]
 8004cc8:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8004cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d101      	bne.n	8004cd4 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8004cd0:	2320      	movs	r3, #32
 8004cd2:	e003      	b.n	8004cdc <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8004cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd6:	fab3 f383 	clz	r3, r3
 8004cda:	b2db      	uxtb	r3, r3
 8004cdc:	3301      	adds	r3, #1
 8004cde:	f003 031f 	and.w	r3, r3, #31
 8004ce2:	2101      	movs	r1, #1
 8004ce4:	fa01 f303 	lsl.w	r3, r1, r3
 8004ce8:	ea42 0103 	orr.w	r1, r2, r3
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d10d      	bne.n	8004d14 <HAL_ADC_ConfigChannel+0x65c>
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	0e9b      	lsrs	r3, r3, #26
 8004cfe:	3301      	adds	r3, #1
 8004d00:	f003 021f 	and.w	r2, r3, #31
 8004d04:	4613      	mov	r3, r2
 8004d06:	005b      	lsls	r3, r3, #1
 8004d08:	4413      	add	r3, r2
 8004d0a:	3b1e      	subs	r3, #30
 8004d0c:	051b      	lsls	r3, r3, #20
 8004d0e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004d12:	e01d      	b.n	8004d50 <HAL_ADC_ConfigChannel+0x698>
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d1a:	697b      	ldr	r3, [r7, #20]
 8004d1c:	fa93 f3a3 	rbit	r3, r3
 8004d20:	613b      	str	r3, [r7, #16]
  return result;
 8004d22:	693b      	ldr	r3, [r7, #16]
 8004d24:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004d26:	69bb      	ldr	r3, [r7, #24]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d103      	bne.n	8004d34 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8004d2c:	2320      	movs	r3, #32
 8004d2e:	e005      	b.n	8004d3c <HAL_ADC_ConfigChannel+0x684>
 8004d30:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004d34:	69bb      	ldr	r3, [r7, #24]
 8004d36:	fab3 f383 	clz	r3, r3
 8004d3a:	b2db      	uxtb	r3, r3
 8004d3c:	3301      	adds	r3, #1
 8004d3e:	f003 021f 	and.w	r2, r3, #31
 8004d42:	4613      	mov	r3, r2
 8004d44:	005b      	lsls	r3, r3, #1
 8004d46:	4413      	add	r3, r2
 8004d48:	3b1e      	subs	r3, #30
 8004d4a:	051b      	lsls	r3, r3, #20
 8004d4c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004d50:	430b      	orrs	r3, r1
 8004d52:	683a      	ldr	r2, [r7, #0]
 8004d54:	6892      	ldr	r2, [r2, #8]
 8004d56:	4619      	mov	r1, r3
 8004d58:	f7ff f9d1 	bl	80040fe <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	681a      	ldr	r2, [r3, #0]
 8004d60:	4b3d      	ldr	r3, [pc, #244]	; (8004e58 <HAL_ADC_ConfigChannel+0x7a0>)
 8004d62:	4013      	ands	r3, r2
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d06c      	beq.n	8004e42 <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004d68:	483c      	ldr	r0, [pc, #240]	; (8004e5c <HAL_ADC_ConfigChannel+0x7a4>)
 8004d6a:	f7ff f939 	bl	8003fe0 <LL_ADC_GetCommonPathInternalCh>
 8004d6e:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a3a      	ldr	r2, [pc, #232]	; (8004e60 <HAL_ADC_ConfigChannel+0x7a8>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d127      	bne.n	8004dcc <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004d7c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004d80:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d121      	bne.n	8004dcc <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	4a35      	ldr	r2, [pc, #212]	; (8004e64 <HAL_ADC_ConfigChannel+0x7ac>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d157      	bne.n	8004e42 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004d92:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004d96:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004d9a:	4619      	mov	r1, r3
 8004d9c:	482f      	ldr	r0, [pc, #188]	; (8004e5c <HAL_ADC_ConfigChannel+0x7a4>)
 8004d9e:	f7ff f90c 	bl	8003fba <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004da2:	4b31      	ldr	r3, [pc, #196]	; (8004e68 <HAL_ADC_ConfigChannel+0x7b0>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	099b      	lsrs	r3, r3, #6
 8004da8:	4a30      	ldr	r2, [pc, #192]	; (8004e6c <HAL_ADC_ConfigChannel+0x7b4>)
 8004daa:	fba2 2303 	umull	r2, r3, r2, r3
 8004dae:	099b      	lsrs	r3, r3, #6
 8004db0:	1c5a      	adds	r2, r3, #1
 8004db2:	4613      	mov	r3, r2
 8004db4:	005b      	lsls	r3, r3, #1
 8004db6:	4413      	add	r3, r2
 8004db8:	009b      	lsls	r3, r3, #2
 8004dba:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004dbc:	e002      	b.n	8004dc4 <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	3b01      	subs	r3, #1
 8004dc2:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d1f9      	bne.n	8004dbe <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004dca:	e03a      	b.n	8004e42 <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a27      	ldr	r2, [pc, #156]	; (8004e70 <HAL_ADC_ConfigChannel+0x7b8>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d113      	bne.n	8004dfe <HAL_ADC_ConfigChannel+0x746>
 8004dd6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004dda:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d10d      	bne.n	8004dfe <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4a1f      	ldr	r2, [pc, #124]	; (8004e64 <HAL_ADC_ConfigChannel+0x7ac>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d12a      	bne.n	8004e42 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004dec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004df0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004df4:	4619      	mov	r1, r3
 8004df6:	4819      	ldr	r0, [pc, #100]	; (8004e5c <HAL_ADC_ConfigChannel+0x7a4>)
 8004df8:	f7ff f8df 	bl	8003fba <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004dfc:	e021      	b.n	8004e42 <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4a1c      	ldr	r2, [pc, #112]	; (8004e74 <HAL_ADC_ConfigChannel+0x7bc>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d11c      	bne.n	8004e42 <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004e08:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004e0c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d116      	bne.n	8004e42 <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a12      	ldr	r2, [pc, #72]	; (8004e64 <HAL_ADC_ConfigChannel+0x7ac>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d111      	bne.n	8004e42 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004e1e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004e22:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004e26:	4619      	mov	r1, r3
 8004e28:	480c      	ldr	r0, [pc, #48]	; (8004e5c <HAL_ADC_ConfigChannel+0x7a4>)
 8004e2a:	f7ff f8c6 	bl	8003fba <LL_ADC_SetCommonPathInternalCh>
 8004e2e:	e008      	b.n	8004e42 <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e34:	f043 0220 	orr.w	r2, r3, #32
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2200      	movs	r2, #0
 8004e46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004e4a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8004e4e:	4618      	mov	r0, r3
 8004e50:	37d8      	adds	r7, #216	; 0xd8
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bd80      	pop	{r7, pc}
 8004e56:	bf00      	nop
 8004e58:	80080000 	.word	0x80080000
 8004e5c:	50040300 	.word	0x50040300
 8004e60:	c7520000 	.word	0xc7520000
 8004e64:	50040000 	.word	0x50040000
 8004e68:	2000000c 	.word	0x2000000c
 8004e6c:	053e2d63 	.word	0x053e2d63
 8004e70:	cb840000 	.word	0xcb840000
 8004e74:	80000001 	.word	0x80000001

08004e78 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b084      	sub	sp, #16
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004e80:	2300      	movs	r3, #0
 8004e82:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4618      	mov	r0, r3
 8004e8a:	f7ff f9fd 	bl	8004288 <LL_ADC_IsEnabled>
 8004e8e:	4603      	mov	r3, r0
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d169      	bne.n	8004f68 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	689a      	ldr	r2, [r3, #8]
 8004e9a:	4b36      	ldr	r3, [pc, #216]	; (8004f74 <ADC_Enable+0xfc>)
 8004e9c:	4013      	ands	r3, r2
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d00d      	beq.n	8004ebe <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ea6:	f043 0210 	orr.w	r2, r3, #16
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004eb2:	f043 0201 	orr.w	r2, r3, #1
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8004eba:	2301      	movs	r3, #1
 8004ebc:	e055      	b.n	8004f6a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	f7ff f9b8 	bl	8004238 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8004ec8:	482b      	ldr	r0, [pc, #172]	; (8004f78 <ADC_Enable+0x100>)
 8004eca:	f7ff f889 	bl	8003fe0 <LL_ADC_GetCommonPathInternalCh>
 8004ece:	4603      	mov	r3, r0
 8004ed0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d013      	beq.n	8004f00 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004ed8:	4b28      	ldr	r3, [pc, #160]	; (8004f7c <ADC_Enable+0x104>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	099b      	lsrs	r3, r3, #6
 8004ede:	4a28      	ldr	r2, [pc, #160]	; (8004f80 <ADC_Enable+0x108>)
 8004ee0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ee4:	099b      	lsrs	r3, r3, #6
 8004ee6:	1c5a      	adds	r2, r3, #1
 8004ee8:	4613      	mov	r3, r2
 8004eea:	005b      	lsls	r3, r3, #1
 8004eec:	4413      	add	r3, r2
 8004eee:	009b      	lsls	r3, r3, #2
 8004ef0:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8004ef2:	e002      	b.n	8004efa <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	3b01      	subs	r3, #1
 8004ef8:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d1f9      	bne.n	8004ef4 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004f00:	f7ff f818 	bl	8003f34 <HAL_GetTick>
 8004f04:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004f06:	e028      	b.n	8004f5a <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	f7ff f9bb 	bl	8004288 <LL_ADC_IsEnabled>
 8004f12:	4603      	mov	r3, r0
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d104      	bne.n	8004f22 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	f7ff f98b 	bl	8004238 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004f22:	f7ff f807 	bl	8003f34 <HAL_GetTick>
 8004f26:	4602      	mov	r2, r0
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	1ad3      	subs	r3, r2, r3
 8004f2c:	2b02      	cmp	r3, #2
 8004f2e:	d914      	bls.n	8004f5a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f003 0301 	and.w	r3, r3, #1
 8004f3a:	2b01      	cmp	r3, #1
 8004f3c:	d00d      	beq.n	8004f5a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f42:	f043 0210 	orr.w	r2, r3, #16
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f4e:	f043 0201 	orr.w	r2, r3, #1
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8004f56:	2301      	movs	r3, #1
 8004f58:	e007      	b.n	8004f6a <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f003 0301 	and.w	r3, r3, #1
 8004f64:	2b01      	cmp	r3, #1
 8004f66:	d1cf      	bne.n	8004f08 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004f68:	2300      	movs	r3, #0
}
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	3710      	adds	r7, #16
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bd80      	pop	{r7, pc}
 8004f72:	bf00      	nop
 8004f74:	8000003f 	.word	0x8000003f
 8004f78:	50040300 	.word	0x50040300
 8004f7c:	2000000c 	.word	0x2000000c
 8004f80:	053e2d63 	.word	0x053e2d63

08004f84 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b084      	sub	sp, #16
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4618      	mov	r0, r3
 8004f92:	f7ff f98c 	bl	80042ae <LL_ADC_IsDisableOngoing>
 8004f96:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	f7ff f973 	bl	8004288 <LL_ADC_IsEnabled>
 8004fa2:	4603      	mov	r3, r0
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d047      	beq.n	8005038 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d144      	bne.n	8005038 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	689b      	ldr	r3, [r3, #8]
 8004fb4:	f003 030d 	and.w	r3, r3, #13
 8004fb8:	2b01      	cmp	r3, #1
 8004fba:	d10c      	bne.n	8004fd6 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	f7ff f94d 	bl	8004260 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	2203      	movs	r2, #3
 8004fcc:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004fce:	f7fe ffb1 	bl	8003f34 <HAL_GetTick>
 8004fd2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004fd4:	e029      	b.n	800502a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fda:	f043 0210 	orr.w	r2, r3, #16
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fe6:	f043 0201 	orr.w	r2, r3, #1
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8004fee:	2301      	movs	r3, #1
 8004ff0:	e023      	b.n	800503a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004ff2:	f7fe ff9f 	bl	8003f34 <HAL_GetTick>
 8004ff6:	4602      	mov	r2, r0
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	1ad3      	subs	r3, r2, r3
 8004ffc:	2b02      	cmp	r3, #2
 8004ffe:	d914      	bls.n	800502a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	689b      	ldr	r3, [r3, #8]
 8005006:	f003 0301 	and.w	r3, r3, #1
 800500a:	2b00      	cmp	r3, #0
 800500c:	d00d      	beq.n	800502a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005012:	f043 0210 	orr.w	r2, r3, #16
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800501e:	f043 0201 	orr.w	r2, r3, #1
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8005026:	2301      	movs	r3, #1
 8005028:	e007      	b.n	800503a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	689b      	ldr	r3, [r3, #8]
 8005030:	f003 0301 	and.w	r3, r3, #1
 8005034:	2b00      	cmp	r3, #0
 8005036:	d1dc      	bne.n	8004ff2 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005038:	2300      	movs	r3, #0
}
 800503a:	4618      	mov	r0, r3
 800503c:	3710      	adds	r7, #16
 800503e:	46bd      	mov	sp, r7
 8005040:	bd80      	pop	{r7, pc}

08005042 <LL_ADC_StartCalibration>:
{
 8005042:	b480      	push	{r7}
 8005044:	b083      	sub	sp, #12
 8005046:	af00      	add	r7, sp, #0
 8005048:	6078      	str	r0, [r7, #4]
 800504a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	689b      	ldr	r3, [r3, #8]
 8005050:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8005054:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005058:	683a      	ldr	r2, [r7, #0]
 800505a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800505e:	4313      	orrs	r3, r2
 8005060:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	609a      	str	r2, [r3, #8]
}
 8005068:	bf00      	nop
 800506a:	370c      	adds	r7, #12
 800506c:	46bd      	mov	sp, r7
 800506e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005072:	4770      	bx	lr

08005074 <LL_ADC_IsCalibrationOnGoing>:
{
 8005074:	b480      	push	{r7}
 8005076:	b083      	sub	sp, #12
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	689b      	ldr	r3, [r3, #8]
 8005080:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005084:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005088:	d101      	bne.n	800508e <LL_ADC_IsCalibrationOnGoing+0x1a>
 800508a:	2301      	movs	r3, #1
 800508c:	e000      	b.n	8005090 <LL_ADC_IsCalibrationOnGoing+0x1c>
 800508e:	2300      	movs	r3, #0
}
 8005090:	4618      	mov	r0, r3
 8005092:	370c      	adds	r7, #12
 8005094:	46bd      	mov	sp, r7
 8005096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509a:	4770      	bx	lr

0800509c <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b084      	sub	sp, #16
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
 80050a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80050a6:	2300      	movs	r3, #0
 80050a8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80050b0:	2b01      	cmp	r3, #1
 80050b2:	d101      	bne.n	80050b8 <HAL_ADCEx_Calibration_Start+0x1c>
 80050b4:	2302      	movs	r3, #2
 80050b6:	e04d      	b.n	8005154 <HAL_ADCEx_Calibration_Start+0xb8>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2201      	movs	r2, #1
 80050bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80050c0:	6878      	ldr	r0, [r7, #4]
 80050c2:	f7ff ff5f 	bl	8004f84 <ADC_Disable>
 80050c6:	4603      	mov	r3, r0
 80050c8:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80050ca:	7bfb      	ldrb	r3, [r7, #15]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d136      	bne.n	800513e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050d4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80050d8:	f023 0302 	bic.w	r3, r3, #2
 80050dc:	f043 0202 	orr.w	r2, r3, #2
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	6839      	ldr	r1, [r7, #0]
 80050ea:	4618      	mov	r0, r3
 80050ec:	f7ff ffa9 	bl	8005042 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80050f0:	e014      	b.n	800511c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	3301      	adds	r3, #1
 80050f6:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 80050fe:	d30d      	bcc.n	800511c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005104:	f023 0312 	bic.w	r3, r3, #18
 8005108:	f043 0210 	orr.w	r2, r3, #16
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2200      	movs	r2, #0
 8005114:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8005118:	2301      	movs	r3, #1
 800511a:	e01b      	b.n	8005154 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4618      	mov	r0, r3
 8005122:	f7ff ffa7 	bl	8005074 <LL_ADC_IsCalibrationOnGoing>
 8005126:	4603      	mov	r3, r0
 8005128:	2b00      	cmp	r3, #0
 800512a:	d1e2      	bne.n	80050f2 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005130:	f023 0303 	bic.w	r3, r3, #3
 8005134:	f043 0201 	orr.w	r2, r3, #1
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	655a      	str	r2, [r3, #84]	; 0x54
 800513c:	e005      	b.n	800514a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005142:	f043 0210 	orr.w	r2, r3, #16
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2200      	movs	r2, #0
 800514e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8005152:	7bfb      	ldrb	r3, [r7, #15]
}
 8005154:	4618      	mov	r0, r3
 8005156:	3710      	adds	r7, #16
 8005158:	46bd      	mov	sp, r7
 800515a:	bd80      	pop	{r7, pc}

0800515c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800515c:	b480      	push	{r7}
 800515e:	b085      	sub	sp, #20
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	f003 0307 	and.w	r3, r3, #7
 800516a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800516c:	4b0c      	ldr	r3, [pc, #48]	; (80051a0 <__NVIC_SetPriorityGrouping+0x44>)
 800516e:	68db      	ldr	r3, [r3, #12]
 8005170:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005172:	68ba      	ldr	r2, [r7, #8]
 8005174:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005178:	4013      	ands	r3, r2
 800517a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005184:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005188:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800518c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800518e:	4a04      	ldr	r2, [pc, #16]	; (80051a0 <__NVIC_SetPriorityGrouping+0x44>)
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	60d3      	str	r3, [r2, #12]
}
 8005194:	bf00      	nop
 8005196:	3714      	adds	r7, #20
 8005198:	46bd      	mov	sp, r7
 800519a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519e:	4770      	bx	lr
 80051a0:	e000ed00 	.word	0xe000ed00

080051a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80051a4:	b480      	push	{r7}
 80051a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80051a8:	4b04      	ldr	r3, [pc, #16]	; (80051bc <__NVIC_GetPriorityGrouping+0x18>)
 80051aa:	68db      	ldr	r3, [r3, #12]
 80051ac:	0a1b      	lsrs	r3, r3, #8
 80051ae:	f003 0307 	and.w	r3, r3, #7
}
 80051b2:	4618      	mov	r0, r3
 80051b4:	46bd      	mov	sp, r7
 80051b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ba:	4770      	bx	lr
 80051bc:	e000ed00 	.word	0xe000ed00

080051c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80051c0:	b480      	push	{r7}
 80051c2:	b083      	sub	sp, #12
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	4603      	mov	r3, r0
 80051c8:	6039      	str	r1, [r7, #0]
 80051ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80051cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	db0a      	blt.n	80051ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	b2da      	uxtb	r2, r3
 80051d8:	490c      	ldr	r1, [pc, #48]	; (800520c <__NVIC_SetPriority+0x4c>)
 80051da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051de:	0112      	lsls	r2, r2, #4
 80051e0:	b2d2      	uxtb	r2, r2
 80051e2:	440b      	add	r3, r1
 80051e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80051e8:	e00a      	b.n	8005200 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	b2da      	uxtb	r2, r3
 80051ee:	4908      	ldr	r1, [pc, #32]	; (8005210 <__NVIC_SetPriority+0x50>)
 80051f0:	79fb      	ldrb	r3, [r7, #7]
 80051f2:	f003 030f 	and.w	r3, r3, #15
 80051f6:	3b04      	subs	r3, #4
 80051f8:	0112      	lsls	r2, r2, #4
 80051fa:	b2d2      	uxtb	r2, r2
 80051fc:	440b      	add	r3, r1
 80051fe:	761a      	strb	r2, [r3, #24]
}
 8005200:	bf00      	nop
 8005202:	370c      	adds	r7, #12
 8005204:	46bd      	mov	sp, r7
 8005206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520a:	4770      	bx	lr
 800520c:	e000e100 	.word	0xe000e100
 8005210:	e000ed00 	.word	0xe000ed00

08005214 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005214:	b480      	push	{r7}
 8005216:	b089      	sub	sp, #36	; 0x24
 8005218:	af00      	add	r7, sp, #0
 800521a:	60f8      	str	r0, [r7, #12]
 800521c:	60b9      	str	r1, [r7, #8]
 800521e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	f003 0307 	and.w	r3, r3, #7
 8005226:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005228:	69fb      	ldr	r3, [r7, #28]
 800522a:	f1c3 0307 	rsb	r3, r3, #7
 800522e:	2b04      	cmp	r3, #4
 8005230:	bf28      	it	cs
 8005232:	2304      	movcs	r3, #4
 8005234:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005236:	69fb      	ldr	r3, [r7, #28]
 8005238:	3304      	adds	r3, #4
 800523a:	2b06      	cmp	r3, #6
 800523c:	d902      	bls.n	8005244 <NVIC_EncodePriority+0x30>
 800523e:	69fb      	ldr	r3, [r7, #28]
 8005240:	3b03      	subs	r3, #3
 8005242:	e000      	b.n	8005246 <NVIC_EncodePriority+0x32>
 8005244:	2300      	movs	r3, #0
 8005246:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005248:	f04f 32ff 	mov.w	r2, #4294967295
 800524c:	69bb      	ldr	r3, [r7, #24]
 800524e:	fa02 f303 	lsl.w	r3, r2, r3
 8005252:	43da      	mvns	r2, r3
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	401a      	ands	r2, r3
 8005258:	697b      	ldr	r3, [r7, #20]
 800525a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800525c:	f04f 31ff 	mov.w	r1, #4294967295
 8005260:	697b      	ldr	r3, [r7, #20]
 8005262:	fa01 f303 	lsl.w	r3, r1, r3
 8005266:	43d9      	mvns	r1, r3
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800526c:	4313      	orrs	r3, r2
         );
}
 800526e:	4618      	mov	r0, r3
 8005270:	3724      	adds	r7, #36	; 0x24
 8005272:	46bd      	mov	sp, r7
 8005274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005278:	4770      	bx	lr
	...

0800527c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b082      	sub	sp, #8
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	3b01      	subs	r3, #1
 8005288:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800528c:	d301      	bcc.n	8005292 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800528e:	2301      	movs	r3, #1
 8005290:	e00f      	b.n	80052b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005292:	4a0a      	ldr	r2, [pc, #40]	; (80052bc <SysTick_Config+0x40>)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	3b01      	subs	r3, #1
 8005298:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800529a:	210f      	movs	r1, #15
 800529c:	f04f 30ff 	mov.w	r0, #4294967295
 80052a0:	f7ff ff8e 	bl	80051c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80052a4:	4b05      	ldr	r3, [pc, #20]	; (80052bc <SysTick_Config+0x40>)
 80052a6:	2200      	movs	r2, #0
 80052a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80052aa:	4b04      	ldr	r3, [pc, #16]	; (80052bc <SysTick_Config+0x40>)
 80052ac:	2207      	movs	r2, #7
 80052ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80052b0:	2300      	movs	r3, #0
}
 80052b2:	4618      	mov	r0, r3
 80052b4:	3708      	adds	r7, #8
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bd80      	pop	{r7, pc}
 80052ba:	bf00      	nop
 80052bc:	e000e010 	.word	0xe000e010

080052c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b082      	sub	sp, #8
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80052c8:	6878      	ldr	r0, [r7, #4]
 80052ca:	f7ff ff47 	bl	800515c <__NVIC_SetPriorityGrouping>
}
 80052ce:	bf00      	nop
 80052d0:	3708      	adds	r7, #8
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bd80      	pop	{r7, pc}

080052d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80052d6:	b580      	push	{r7, lr}
 80052d8:	b086      	sub	sp, #24
 80052da:	af00      	add	r7, sp, #0
 80052dc:	4603      	mov	r3, r0
 80052de:	60b9      	str	r1, [r7, #8]
 80052e0:	607a      	str	r2, [r7, #4]
 80052e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80052e4:	2300      	movs	r3, #0
 80052e6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80052e8:	f7ff ff5c 	bl	80051a4 <__NVIC_GetPriorityGrouping>
 80052ec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80052ee:	687a      	ldr	r2, [r7, #4]
 80052f0:	68b9      	ldr	r1, [r7, #8]
 80052f2:	6978      	ldr	r0, [r7, #20]
 80052f4:	f7ff ff8e 	bl	8005214 <NVIC_EncodePriority>
 80052f8:	4602      	mov	r2, r0
 80052fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80052fe:	4611      	mov	r1, r2
 8005300:	4618      	mov	r0, r3
 8005302:	f7ff ff5d 	bl	80051c0 <__NVIC_SetPriority>
}
 8005306:	bf00      	nop
 8005308:	3718      	adds	r7, #24
 800530a:	46bd      	mov	sp, r7
 800530c:	bd80      	pop	{r7, pc}

0800530e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800530e:	b580      	push	{r7, lr}
 8005310:	b082      	sub	sp, #8
 8005312:	af00      	add	r7, sp, #0
 8005314:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005316:	6878      	ldr	r0, [r7, #4]
 8005318:	f7ff ffb0 	bl	800527c <SysTick_Config>
 800531c:	4603      	mov	r3, r0
}
 800531e:	4618      	mov	r0, r3
 8005320:	3708      	adds	r7, #8
 8005322:	46bd      	mov	sp, r7
 8005324:	bd80      	pop	{r7, pc}
	...

08005328 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005328:	b480      	push	{r7}
 800532a:	b087      	sub	sp, #28
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
 8005330:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005332:	2300      	movs	r3, #0
 8005334:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005336:	e148      	b.n	80055ca <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	681a      	ldr	r2, [r3, #0]
 800533c:	2101      	movs	r1, #1
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	fa01 f303 	lsl.w	r3, r1, r3
 8005344:	4013      	ands	r3, r2
 8005346:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	2b00      	cmp	r3, #0
 800534c:	f000 813a 	beq.w	80055c4 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	f003 0303 	and.w	r3, r3, #3
 8005358:	2b01      	cmp	r3, #1
 800535a:	d005      	beq.n	8005368 <HAL_GPIO_Init+0x40>
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	685b      	ldr	r3, [r3, #4]
 8005360:	f003 0303 	and.w	r3, r3, #3
 8005364:	2b02      	cmp	r3, #2
 8005366:	d130      	bne.n	80053ca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	689b      	ldr	r3, [r3, #8]
 800536c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800536e:	697b      	ldr	r3, [r7, #20]
 8005370:	005b      	lsls	r3, r3, #1
 8005372:	2203      	movs	r2, #3
 8005374:	fa02 f303 	lsl.w	r3, r2, r3
 8005378:	43db      	mvns	r3, r3
 800537a:	693a      	ldr	r2, [r7, #16]
 800537c:	4013      	ands	r3, r2
 800537e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	68da      	ldr	r2, [r3, #12]
 8005384:	697b      	ldr	r3, [r7, #20]
 8005386:	005b      	lsls	r3, r3, #1
 8005388:	fa02 f303 	lsl.w	r3, r2, r3
 800538c:	693a      	ldr	r2, [r7, #16]
 800538e:	4313      	orrs	r3, r2
 8005390:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	693a      	ldr	r2, [r7, #16]
 8005396:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	685b      	ldr	r3, [r3, #4]
 800539c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800539e:	2201      	movs	r2, #1
 80053a0:	697b      	ldr	r3, [r7, #20]
 80053a2:	fa02 f303 	lsl.w	r3, r2, r3
 80053a6:	43db      	mvns	r3, r3
 80053a8:	693a      	ldr	r2, [r7, #16]
 80053aa:	4013      	ands	r3, r2
 80053ac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	685b      	ldr	r3, [r3, #4]
 80053b2:	091b      	lsrs	r3, r3, #4
 80053b4:	f003 0201 	and.w	r2, r3, #1
 80053b8:	697b      	ldr	r3, [r7, #20]
 80053ba:	fa02 f303 	lsl.w	r3, r2, r3
 80053be:	693a      	ldr	r2, [r7, #16]
 80053c0:	4313      	orrs	r3, r2
 80053c2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	693a      	ldr	r2, [r7, #16]
 80053c8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	f003 0303 	and.w	r3, r3, #3
 80053d2:	2b03      	cmp	r3, #3
 80053d4:	d017      	beq.n	8005406 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	68db      	ldr	r3, [r3, #12]
 80053da:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80053dc:	697b      	ldr	r3, [r7, #20]
 80053de:	005b      	lsls	r3, r3, #1
 80053e0:	2203      	movs	r2, #3
 80053e2:	fa02 f303 	lsl.w	r3, r2, r3
 80053e6:	43db      	mvns	r3, r3
 80053e8:	693a      	ldr	r2, [r7, #16]
 80053ea:	4013      	ands	r3, r2
 80053ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	689a      	ldr	r2, [r3, #8]
 80053f2:	697b      	ldr	r3, [r7, #20]
 80053f4:	005b      	lsls	r3, r3, #1
 80053f6:	fa02 f303 	lsl.w	r3, r2, r3
 80053fa:	693a      	ldr	r2, [r7, #16]
 80053fc:	4313      	orrs	r3, r2
 80053fe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	693a      	ldr	r2, [r7, #16]
 8005404:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	685b      	ldr	r3, [r3, #4]
 800540a:	f003 0303 	and.w	r3, r3, #3
 800540e:	2b02      	cmp	r3, #2
 8005410:	d123      	bne.n	800545a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005412:	697b      	ldr	r3, [r7, #20]
 8005414:	08da      	lsrs	r2, r3, #3
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	3208      	adds	r2, #8
 800541a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800541e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005420:	697b      	ldr	r3, [r7, #20]
 8005422:	f003 0307 	and.w	r3, r3, #7
 8005426:	009b      	lsls	r3, r3, #2
 8005428:	220f      	movs	r2, #15
 800542a:	fa02 f303 	lsl.w	r3, r2, r3
 800542e:	43db      	mvns	r3, r3
 8005430:	693a      	ldr	r2, [r7, #16]
 8005432:	4013      	ands	r3, r2
 8005434:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	691a      	ldr	r2, [r3, #16]
 800543a:	697b      	ldr	r3, [r7, #20]
 800543c:	f003 0307 	and.w	r3, r3, #7
 8005440:	009b      	lsls	r3, r3, #2
 8005442:	fa02 f303 	lsl.w	r3, r2, r3
 8005446:	693a      	ldr	r2, [r7, #16]
 8005448:	4313      	orrs	r3, r2
 800544a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800544c:	697b      	ldr	r3, [r7, #20]
 800544e:	08da      	lsrs	r2, r3, #3
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	3208      	adds	r2, #8
 8005454:	6939      	ldr	r1, [r7, #16]
 8005456:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005460:	697b      	ldr	r3, [r7, #20]
 8005462:	005b      	lsls	r3, r3, #1
 8005464:	2203      	movs	r2, #3
 8005466:	fa02 f303 	lsl.w	r3, r2, r3
 800546a:	43db      	mvns	r3, r3
 800546c:	693a      	ldr	r2, [r7, #16]
 800546e:	4013      	ands	r3, r2
 8005470:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	685b      	ldr	r3, [r3, #4]
 8005476:	f003 0203 	and.w	r2, r3, #3
 800547a:	697b      	ldr	r3, [r7, #20]
 800547c:	005b      	lsls	r3, r3, #1
 800547e:	fa02 f303 	lsl.w	r3, r2, r3
 8005482:	693a      	ldr	r2, [r7, #16]
 8005484:	4313      	orrs	r3, r2
 8005486:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	693a      	ldr	r2, [r7, #16]
 800548c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	685b      	ldr	r3, [r3, #4]
 8005492:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005496:	2b00      	cmp	r3, #0
 8005498:	f000 8094 	beq.w	80055c4 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800549c:	4b52      	ldr	r3, [pc, #328]	; (80055e8 <HAL_GPIO_Init+0x2c0>)
 800549e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054a0:	4a51      	ldr	r2, [pc, #324]	; (80055e8 <HAL_GPIO_Init+0x2c0>)
 80054a2:	f043 0301 	orr.w	r3, r3, #1
 80054a6:	6613      	str	r3, [r2, #96]	; 0x60
 80054a8:	4b4f      	ldr	r3, [pc, #316]	; (80055e8 <HAL_GPIO_Init+0x2c0>)
 80054aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054ac:	f003 0301 	and.w	r3, r3, #1
 80054b0:	60bb      	str	r3, [r7, #8]
 80054b2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80054b4:	4a4d      	ldr	r2, [pc, #308]	; (80055ec <HAL_GPIO_Init+0x2c4>)
 80054b6:	697b      	ldr	r3, [r7, #20]
 80054b8:	089b      	lsrs	r3, r3, #2
 80054ba:	3302      	adds	r3, #2
 80054bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054c0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	f003 0303 	and.w	r3, r3, #3
 80054c8:	009b      	lsls	r3, r3, #2
 80054ca:	220f      	movs	r2, #15
 80054cc:	fa02 f303 	lsl.w	r3, r2, r3
 80054d0:	43db      	mvns	r3, r3
 80054d2:	693a      	ldr	r2, [r7, #16]
 80054d4:	4013      	ands	r3, r2
 80054d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80054de:	d00d      	beq.n	80054fc <HAL_GPIO_Init+0x1d4>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	4a43      	ldr	r2, [pc, #268]	; (80055f0 <HAL_GPIO_Init+0x2c8>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d007      	beq.n	80054f8 <HAL_GPIO_Init+0x1d0>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	4a42      	ldr	r2, [pc, #264]	; (80055f4 <HAL_GPIO_Init+0x2cc>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d101      	bne.n	80054f4 <HAL_GPIO_Init+0x1cc>
 80054f0:	2302      	movs	r3, #2
 80054f2:	e004      	b.n	80054fe <HAL_GPIO_Init+0x1d6>
 80054f4:	2307      	movs	r3, #7
 80054f6:	e002      	b.n	80054fe <HAL_GPIO_Init+0x1d6>
 80054f8:	2301      	movs	r3, #1
 80054fa:	e000      	b.n	80054fe <HAL_GPIO_Init+0x1d6>
 80054fc:	2300      	movs	r3, #0
 80054fe:	697a      	ldr	r2, [r7, #20]
 8005500:	f002 0203 	and.w	r2, r2, #3
 8005504:	0092      	lsls	r2, r2, #2
 8005506:	4093      	lsls	r3, r2
 8005508:	693a      	ldr	r2, [r7, #16]
 800550a:	4313      	orrs	r3, r2
 800550c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800550e:	4937      	ldr	r1, [pc, #220]	; (80055ec <HAL_GPIO_Init+0x2c4>)
 8005510:	697b      	ldr	r3, [r7, #20]
 8005512:	089b      	lsrs	r3, r3, #2
 8005514:	3302      	adds	r3, #2
 8005516:	693a      	ldr	r2, [r7, #16]
 8005518:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800551c:	4b36      	ldr	r3, [pc, #216]	; (80055f8 <HAL_GPIO_Init+0x2d0>)
 800551e:	689b      	ldr	r3, [r3, #8]
 8005520:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	43db      	mvns	r3, r3
 8005526:	693a      	ldr	r2, [r7, #16]
 8005528:	4013      	ands	r3, r2
 800552a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005534:	2b00      	cmp	r3, #0
 8005536:	d003      	beq.n	8005540 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8005538:	693a      	ldr	r2, [r7, #16]
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	4313      	orrs	r3, r2
 800553e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005540:	4a2d      	ldr	r2, [pc, #180]	; (80055f8 <HAL_GPIO_Init+0x2d0>)
 8005542:	693b      	ldr	r3, [r7, #16]
 8005544:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005546:	4b2c      	ldr	r3, [pc, #176]	; (80055f8 <HAL_GPIO_Init+0x2d0>)
 8005548:	68db      	ldr	r3, [r3, #12]
 800554a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	43db      	mvns	r3, r3
 8005550:	693a      	ldr	r2, [r7, #16]
 8005552:	4013      	ands	r3, r2
 8005554:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	685b      	ldr	r3, [r3, #4]
 800555a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800555e:	2b00      	cmp	r3, #0
 8005560:	d003      	beq.n	800556a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8005562:	693a      	ldr	r2, [r7, #16]
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	4313      	orrs	r3, r2
 8005568:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800556a:	4a23      	ldr	r2, [pc, #140]	; (80055f8 <HAL_GPIO_Init+0x2d0>)
 800556c:	693b      	ldr	r3, [r7, #16]
 800556e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8005570:	4b21      	ldr	r3, [pc, #132]	; (80055f8 <HAL_GPIO_Init+0x2d0>)
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	43db      	mvns	r3, r3
 800557a:	693a      	ldr	r2, [r7, #16]
 800557c:	4013      	ands	r3, r2
 800557e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	685b      	ldr	r3, [r3, #4]
 8005584:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005588:	2b00      	cmp	r3, #0
 800558a:	d003      	beq.n	8005594 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 800558c:	693a      	ldr	r2, [r7, #16]
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	4313      	orrs	r3, r2
 8005592:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005594:	4a18      	ldr	r2, [pc, #96]	; (80055f8 <HAL_GPIO_Init+0x2d0>)
 8005596:	693b      	ldr	r3, [r7, #16]
 8005598:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800559a:	4b17      	ldr	r3, [pc, #92]	; (80055f8 <HAL_GPIO_Init+0x2d0>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	43db      	mvns	r3, r3
 80055a4:	693a      	ldr	r2, [r7, #16]
 80055a6:	4013      	ands	r3, r2
 80055a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d003      	beq.n	80055be <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80055b6:	693a      	ldr	r2, [r7, #16]
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	4313      	orrs	r3, r2
 80055bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80055be:	4a0e      	ldr	r2, [pc, #56]	; (80055f8 <HAL_GPIO_Init+0x2d0>)
 80055c0:	693b      	ldr	r3, [r7, #16]
 80055c2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80055c4:	697b      	ldr	r3, [r7, #20]
 80055c6:	3301      	adds	r3, #1
 80055c8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	681a      	ldr	r2, [r3, #0]
 80055ce:	697b      	ldr	r3, [r7, #20]
 80055d0:	fa22 f303 	lsr.w	r3, r2, r3
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	f47f aeaf 	bne.w	8005338 <HAL_GPIO_Init+0x10>
  }
}
 80055da:	bf00      	nop
 80055dc:	bf00      	nop
 80055de:	371c      	adds	r7, #28
 80055e0:	46bd      	mov	sp, r7
 80055e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e6:	4770      	bx	lr
 80055e8:	40021000 	.word	0x40021000
 80055ec:	40010000 	.word	0x40010000
 80055f0:	48000400 	.word	0x48000400
 80055f4:	48000800 	.word	0x48000800
 80055f8:	40010400 	.word	0x40010400

080055fc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80055fc:	b480      	push	{r7}
 80055fe:	b085      	sub	sp, #20
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
 8005604:	460b      	mov	r3, r1
 8005606:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	691a      	ldr	r2, [r3, #16]
 800560c:	887b      	ldrh	r3, [r7, #2]
 800560e:	4013      	ands	r3, r2
 8005610:	2b00      	cmp	r3, #0
 8005612:	d002      	beq.n	800561a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005614:	2301      	movs	r3, #1
 8005616:	73fb      	strb	r3, [r7, #15]
 8005618:	e001      	b.n	800561e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800561a:	2300      	movs	r3, #0
 800561c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800561e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005620:	4618      	mov	r0, r3
 8005622:	3714      	adds	r7, #20
 8005624:	46bd      	mov	sp, r7
 8005626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562a:	4770      	bx	lr

0800562c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800562c:	b480      	push	{r7}
 800562e:	b083      	sub	sp, #12
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
 8005634:	460b      	mov	r3, r1
 8005636:	807b      	strh	r3, [r7, #2]
 8005638:	4613      	mov	r3, r2
 800563a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800563c:	787b      	ldrb	r3, [r7, #1]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d003      	beq.n	800564a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005642:	887a      	ldrh	r2, [r7, #2]
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005648:	e002      	b.n	8005650 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800564a:	887a      	ldrh	r2, [r7, #2]
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005650:	bf00      	nop
 8005652:	370c      	adds	r7, #12
 8005654:	46bd      	mov	sp, r7
 8005656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565a:	4770      	bx	lr

0800565c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800565c:	b480      	push	{r7}
 800565e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005660:	4b05      	ldr	r3, [pc, #20]	; (8005678 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4a04      	ldr	r2, [pc, #16]	; (8005678 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005666:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800566a:	6013      	str	r3, [r2, #0]
}
 800566c:	bf00      	nop
 800566e:	46bd      	mov	sp, r7
 8005670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005674:	4770      	bx	lr
 8005676:	bf00      	nop
 8005678:	40007000 	.word	0x40007000

0800567c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800567c:	b480      	push	{r7}
 800567e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005680:	4b04      	ldr	r3, [pc, #16]	; (8005694 <HAL_PWREx_GetVoltageRange+0x18>)
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8005688:	4618      	mov	r0, r3
 800568a:	46bd      	mov	sp, r7
 800568c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005690:	4770      	bx	lr
 8005692:	bf00      	nop
 8005694:	40007000 	.word	0x40007000

08005698 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005698:	b480      	push	{r7}
 800569a:	b085      	sub	sp, #20
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80056a6:	d130      	bne.n	800570a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80056a8:	4b23      	ldr	r3, [pc, #140]	; (8005738 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80056b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80056b4:	d038      	beq.n	8005728 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80056b6:	4b20      	ldr	r3, [pc, #128]	; (8005738 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80056be:	4a1e      	ldr	r2, [pc, #120]	; (8005738 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80056c0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80056c4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80056c6:	4b1d      	ldr	r3, [pc, #116]	; (800573c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	2232      	movs	r2, #50	; 0x32
 80056cc:	fb02 f303 	mul.w	r3, r2, r3
 80056d0:	4a1b      	ldr	r2, [pc, #108]	; (8005740 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80056d2:	fba2 2303 	umull	r2, r3, r2, r3
 80056d6:	0c9b      	lsrs	r3, r3, #18
 80056d8:	3301      	adds	r3, #1
 80056da:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80056dc:	e002      	b.n	80056e4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	3b01      	subs	r3, #1
 80056e2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80056e4:	4b14      	ldr	r3, [pc, #80]	; (8005738 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80056e6:	695b      	ldr	r3, [r3, #20]
 80056e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056f0:	d102      	bne.n	80056f8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d1f2      	bne.n	80056de <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80056f8:	4b0f      	ldr	r3, [pc, #60]	; (8005738 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80056fa:	695b      	ldr	r3, [r3, #20]
 80056fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005700:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005704:	d110      	bne.n	8005728 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8005706:	2303      	movs	r3, #3
 8005708:	e00f      	b.n	800572a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800570a:	4b0b      	ldr	r3, [pc, #44]	; (8005738 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005712:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005716:	d007      	beq.n	8005728 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005718:	4b07      	ldr	r3, [pc, #28]	; (8005738 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005720:	4a05      	ldr	r2, [pc, #20]	; (8005738 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005722:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005726:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005728:	2300      	movs	r3, #0
}
 800572a:	4618      	mov	r0, r3
 800572c:	3714      	adds	r7, #20
 800572e:	46bd      	mov	sp, r7
 8005730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005734:	4770      	bx	lr
 8005736:	bf00      	nop
 8005738:	40007000 	.word	0x40007000
 800573c:	2000000c 	.word	0x2000000c
 8005740:	431bde83 	.word	0x431bde83

08005744 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b088      	sub	sp, #32
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d102      	bne.n	8005758 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005752:	2301      	movs	r3, #1
 8005754:	f000 bc02 	b.w	8005f5c <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005758:	4b96      	ldr	r3, [pc, #600]	; (80059b4 <HAL_RCC_OscConfig+0x270>)
 800575a:	689b      	ldr	r3, [r3, #8]
 800575c:	f003 030c 	and.w	r3, r3, #12
 8005760:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005762:	4b94      	ldr	r3, [pc, #592]	; (80059b4 <HAL_RCC_OscConfig+0x270>)
 8005764:	68db      	ldr	r3, [r3, #12]
 8005766:	f003 0303 	and.w	r3, r3, #3
 800576a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f003 0310 	and.w	r3, r3, #16
 8005774:	2b00      	cmp	r3, #0
 8005776:	f000 80e4 	beq.w	8005942 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800577a:	69bb      	ldr	r3, [r7, #24]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d007      	beq.n	8005790 <HAL_RCC_OscConfig+0x4c>
 8005780:	69bb      	ldr	r3, [r7, #24]
 8005782:	2b0c      	cmp	r3, #12
 8005784:	f040 808b 	bne.w	800589e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005788:	697b      	ldr	r3, [r7, #20]
 800578a:	2b01      	cmp	r3, #1
 800578c:	f040 8087 	bne.w	800589e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005790:	4b88      	ldr	r3, [pc, #544]	; (80059b4 <HAL_RCC_OscConfig+0x270>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f003 0302 	and.w	r3, r3, #2
 8005798:	2b00      	cmp	r3, #0
 800579a:	d005      	beq.n	80057a8 <HAL_RCC_OscConfig+0x64>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	699b      	ldr	r3, [r3, #24]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d101      	bne.n	80057a8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80057a4:	2301      	movs	r3, #1
 80057a6:	e3d9      	b.n	8005f5c <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6a1a      	ldr	r2, [r3, #32]
 80057ac:	4b81      	ldr	r3, [pc, #516]	; (80059b4 <HAL_RCC_OscConfig+0x270>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f003 0308 	and.w	r3, r3, #8
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d004      	beq.n	80057c2 <HAL_RCC_OscConfig+0x7e>
 80057b8:	4b7e      	ldr	r3, [pc, #504]	; (80059b4 <HAL_RCC_OscConfig+0x270>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80057c0:	e005      	b.n	80057ce <HAL_RCC_OscConfig+0x8a>
 80057c2:	4b7c      	ldr	r3, [pc, #496]	; (80059b4 <HAL_RCC_OscConfig+0x270>)
 80057c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80057c8:	091b      	lsrs	r3, r3, #4
 80057ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d223      	bcs.n	800581a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6a1b      	ldr	r3, [r3, #32]
 80057d6:	4618      	mov	r0, r3
 80057d8:	f000 fd54 	bl	8006284 <RCC_SetFlashLatencyFromMSIRange>
 80057dc:	4603      	mov	r3, r0
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d001      	beq.n	80057e6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80057e2:	2301      	movs	r3, #1
 80057e4:	e3ba      	b.n	8005f5c <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80057e6:	4b73      	ldr	r3, [pc, #460]	; (80059b4 <HAL_RCC_OscConfig+0x270>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4a72      	ldr	r2, [pc, #456]	; (80059b4 <HAL_RCC_OscConfig+0x270>)
 80057ec:	f043 0308 	orr.w	r3, r3, #8
 80057f0:	6013      	str	r3, [r2, #0]
 80057f2:	4b70      	ldr	r3, [pc, #448]	; (80059b4 <HAL_RCC_OscConfig+0x270>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6a1b      	ldr	r3, [r3, #32]
 80057fe:	496d      	ldr	r1, [pc, #436]	; (80059b4 <HAL_RCC_OscConfig+0x270>)
 8005800:	4313      	orrs	r3, r2
 8005802:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005804:	4b6b      	ldr	r3, [pc, #428]	; (80059b4 <HAL_RCC_OscConfig+0x270>)
 8005806:	685b      	ldr	r3, [r3, #4]
 8005808:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	69db      	ldr	r3, [r3, #28]
 8005810:	021b      	lsls	r3, r3, #8
 8005812:	4968      	ldr	r1, [pc, #416]	; (80059b4 <HAL_RCC_OscConfig+0x270>)
 8005814:	4313      	orrs	r3, r2
 8005816:	604b      	str	r3, [r1, #4]
 8005818:	e025      	b.n	8005866 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800581a:	4b66      	ldr	r3, [pc, #408]	; (80059b4 <HAL_RCC_OscConfig+0x270>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4a65      	ldr	r2, [pc, #404]	; (80059b4 <HAL_RCC_OscConfig+0x270>)
 8005820:	f043 0308 	orr.w	r3, r3, #8
 8005824:	6013      	str	r3, [r2, #0]
 8005826:	4b63      	ldr	r3, [pc, #396]	; (80059b4 <HAL_RCC_OscConfig+0x270>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6a1b      	ldr	r3, [r3, #32]
 8005832:	4960      	ldr	r1, [pc, #384]	; (80059b4 <HAL_RCC_OscConfig+0x270>)
 8005834:	4313      	orrs	r3, r2
 8005836:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005838:	4b5e      	ldr	r3, [pc, #376]	; (80059b4 <HAL_RCC_OscConfig+0x270>)
 800583a:	685b      	ldr	r3, [r3, #4]
 800583c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	69db      	ldr	r3, [r3, #28]
 8005844:	021b      	lsls	r3, r3, #8
 8005846:	495b      	ldr	r1, [pc, #364]	; (80059b4 <HAL_RCC_OscConfig+0x270>)
 8005848:	4313      	orrs	r3, r2
 800584a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800584c:	69bb      	ldr	r3, [r7, #24]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d109      	bne.n	8005866 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6a1b      	ldr	r3, [r3, #32]
 8005856:	4618      	mov	r0, r3
 8005858:	f000 fd14 	bl	8006284 <RCC_SetFlashLatencyFromMSIRange>
 800585c:	4603      	mov	r3, r0
 800585e:	2b00      	cmp	r3, #0
 8005860:	d001      	beq.n	8005866 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8005862:	2301      	movs	r3, #1
 8005864:	e37a      	b.n	8005f5c <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005866:	f000 fc81 	bl	800616c <HAL_RCC_GetSysClockFreq>
 800586a:	4602      	mov	r2, r0
 800586c:	4b51      	ldr	r3, [pc, #324]	; (80059b4 <HAL_RCC_OscConfig+0x270>)
 800586e:	689b      	ldr	r3, [r3, #8]
 8005870:	091b      	lsrs	r3, r3, #4
 8005872:	f003 030f 	and.w	r3, r3, #15
 8005876:	4950      	ldr	r1, [pc, #320]	; (80059b8 <HAL_RCC_OscConfig+0x274>)
 8005878:	5ccb      	ldrb	r3, [r1, r3]
 800587a:	f003 031f 	and.w	r3, r3, #31
 800587e:	fa22 f303 	lsr.w	r3, r2, r3
 8005882:	4a4e      	ldr	r2, [pc, #312]	; (80059bc <HAL_RCC_OscConfig+0x278>)
 8005884:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005886:	4b4e      	ldr	r3, [pc, #312]	; (80059c0 <HAL_RCC_OscConfig+0x27c>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4618      	mov	r0, r3
 800588c:	f7fe fb02 	bl	8003e94 <HAL_InitTick>
 8005890:	4603      	mov	r3, r0
 8005892:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005894:	7bfb      	ldrb	r3, [r7, #15]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d052      	beq.n	8005940 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800589a:	7bfb      	ldrb	r3, [r7, #15]
 800589c:	e35e      	b.n	8005f5c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	699b      	ldr	r3, [r3, #24]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d032      	beq.n	800590c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80058a6:	4b43      	ldr	r3, [pc, #268]	; (80059b4 <HAL_RCC_OscConfig+0x270>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4a42      	ldr	r2, [pc, #264]	; (80059b4 <HAL_RCC_OscConfig+0x270>)
 80058ac:	f043 0301 	orr.w	r3, r3, #1
 80058b0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80058b2:	f7fe fb3f 	bl	8003f34 <HAL_GetTick>
 80058b6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80058b8:	e008      	b.n	80058cc <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80058ba:	f7fe fb3b 	bl	8003f34 <HAL_GetTick>
 80058be:	4602      	mov	r2, r0
 80058c0:	693b      	ldr	r3, [r7, #16]
 80058c2:	1ad3      	subs	r3, r2, r3
 80058c4:	2b02      	cmp	r3, #2
 80058c6:	d901      	bls.n	80058cc <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80058c8:	2303      	movs	r3, #3
 80058ca:	e347      	b.n	8005f5c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80058cc:	4b39      	ldr	r3, [pc, #228]	; (80059b4 <HAL_RCC_OscConfig+0x270>)
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f003 0302 	and.w	r3, r3, #2
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d0f0      	beq.n	80058ba <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80058d8:	4b36      	ldr	r3, [pc, #216]	; (80059b4 <HAL_RCC_OscConfig+0x270>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4a35      	ldr	r2, [pc, #212]	; (80059b4 <HAL_RCC_OscConfig+0x270>)
 80058de:	f043 0308 	orr.w	r3, r3, #8
 80058e2:	6013      	str	r3, [r2, #0]
 80058e4:	4b33      	ldr	r3, [pc, #204]	; (80059b4 <HAL_RCC_OscConfig+0x270>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6a1b      	ldr	r3, [r3, #32]
 80058f0:	4930      	ldr	r1, [pc, #192]	; (80059b4 <HAL_RCC_OscConfig+0x270>)
 80058f2:	4313      	orrs	r3, r2
 80058f4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80058f6:	4b2f      	ldr	r3, [pc, #188]	; (80059b4 <HAL_RCC_OscConfig+0x270>)
 80058f8:	685b      	ldr	r3, [r3, #4]
 80058fa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	69db      	ldr	r3, [r3, #28]
 8005902:	021b      	lsls	r3, r3, #8
 8005904:	492b      	ldr	r1, [pc, #172]	; (80059b4 <HAL_RCC_OscConfig+0x270>)
 8005906:	4313      	orrs	r3, r2
 8005908:	604b      	str	r3, [r1, #4]
 800590a:	e01a      	b.n	8005942 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800590c:	4b29      	ldr	r3, [pc, #164]	; (80059b4 <HAL_RCC_OscConfig+0x270>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	4a28      	ldr	r2, [pc, #160]	; (80059b4 <HAL_RCC_OscConfig+0x270>)
 8005912:	f023 0301 	bic.w	r3, r3, #1
 8005916:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005918:	f7fe fb0c 	bl	8003f34 <HAL_GetTick>
 800591c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800591e:	e008      	b.n	8005932 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005920:	f7fe fb08 	bl	8003f34 <HAL_GetTick>
 8005924:	4602      	mov	r2, r0
 8005926:	693b      	ldr	r3, [r7, #16]
 8005928:	1ad3      	subs	r3, r2, r3
 800592a:	2b02      	cmp	r3, #2
 800592c:	d901      	bls.n	8005932 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800592e:	2303      	movs	r3, #3
 8005930:	e314      	b.n	8005f5c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005932:	4b20      	ldr	r3, [pc, #128]	; (80059b4 <HAL_RCC_OscConfig+0x270>)
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f003 0302 	and.w	r3, r3, #2
 800593a:	2b00      	cmp	r3, #0
 800593c:	d1f0      	bne.n	8005920 <HAL_RCC_OscConfig+0x1dc>
 800593e:	e000      	b.n	8005942 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005940:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f003 0301 	and.w	r3, r3, #1
 800594a:	2b00      	cmp	r3, #0
 800594c:	d073      	beq.n	8005a36 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800594e:	69bb      	ldr	r3, [r7, #24]
 8005950:	2b08      	cmp	r3, #8
 8005952:	d005      	beq.n	8005960 <HAL_RCC_OscConfig+0x21c>
 8005954:	69bb      	ldr	r3, [r7, #24]
 8005956:	2b0c      	cmp	r3, #12
 8005958:	d10e      	bne.n	8005978 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800595a:	697b      	ldr	r3, [r7, #20]
 800595c:	2b03      	cmp	r3, #3
 800595e:	d10b      	bne.n	8005978 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005960:	4b14      	ldr	r3, [pc, #80]	; (80059b4 <HAL_RCC_OscConfig+0x270>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005968:	2b00      	cmp	r3, #0
 800596a:	d063      	beq.n	8005a34 <HAL_RCC_OscConfig+0x2f0>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	685b      	ldr	r3, [r3, #4]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d15f      	bne.n	8005a34 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005974:	2301      	movs	r3, #1
 8005976:	e2f1      	b.n	8005f5c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	685b      	ldr	r3, [r3, #4]
 800597c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005980:	d106      	bne.n	8005990 <HAL_RCC_OscConfig+0x24c>
 8005982:	4b0c      	ldr	r3, [pc, #48]	; (80059b4 <HAL_RCC_OscConfig+0x270>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a0b      	ldr	r2, [pc, #44]	; (80059b4 <HAL_RCC_OscConfig+0x270>)
 8005988:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800598c:	6013      	str	r3, [r2, #0]
 800598e:	e025      	b.n	80059dc <HAL_RCC_OscConfig+0x298>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	685b      	ldr	r3, [r3, #4]
 8005994:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005998:	d114      	bne.n	80059c4 <HAL_RCC_OscConfig+0x280>
 800599a:	4b06      	ldr	r3, [pc, #24]	; (80059b4 <HAL_RCC_OscConfig+0x270>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	4a05      	ldr	r2, [pc, #20]	; (80059b4 <HAL_RCC_OscConfig+0x270>)
 80059a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80059a4:	6013      	str	r3, [r2, #0]
 80059a6:	4b03      	ldr	r3, [pc, #12]	; (80059b4 <HAL_RCC_OscConfig+0x270>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	4a02      	ldr	r2, [pc, #8]	; (80059b4 <HAL_RCC_OscConfig+0x270>)
 80059ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059b0:	6013      	str	r3, [r2, #0]
 80059b2:	e013      	b.n	80059dc <HAL_RCC_OscConfig+0x298>
 80059b4:	40021000 	.word	0x40021000
 80059b8:	08009718 	.word	0x08009718
 80059bc:	2000000c 	.word	0x2000000c
 80059c0:	20000010 	.word	0x20000010
 80059c4:	4ba0      	ldr	r3, [pc, #640]	; (8005c48 <HAL_RCC_OscConfig+0x504>)
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4a9f      	ldr	r2, [pc, #636]	; (8005c48 <HAL_RCC_OscConfig+0x504>)
 80059ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80059ce:	6013      	str	r3, [r2, #0]
 80059d0:	4b9d      	ldr	r3, [pc, #628]	; (8005c48 <HAL_RCC_OscConfig+0x504>)
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	4a9c      	ldr	r2, [pc, #624]	; (8005c48 <HAL_RCC_OscConfig+0x504>)
 80059d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80059da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	685b      	ldr	r3, [r3, #4]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d013      	beq.n	8005a0c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059e4:	f7fe faa6 	bl	8003f34 <HAL_GetTick>
 80059e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80059ea:	e008      	b.n	80059fe <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80059ec:	f7fe faa2 	bl	8003f34 <HAL_GetTick>
 80059f0:	4602      	mov	r2, r0
 80059f2:	693b      	ldr	r3, [r7, #16]
 80059f4:	1ad3      	subs	r3, r2, r3
 80059f6:	2b64      	cmp	r3, #100	; 0x64
 80059f8:	d901      	bls.n	80059fe <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80059fa:	2303      	movs	r3, #3
 80059fc:	e2ae      	b.n	8005f5c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80059fe:	4b92      	ldr	r3, [pc, #584]	; (8005c48 <HAL_RCC_OscConfig+0x504>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d0f0      	beq.n	80059ec <HAL_RCC_OscConfig+0x2a8>
 8005a0a:	e014      	b.n	8005a36 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a0c:	f7fe fa92 	bl	8003f34 <HAL_GetTick>
 8005a10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005a12:	e008      	b.n	8005a26 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005a14:	f7fe fa8e 	bl	8003f34 <HAL_GetTick>
 8005a18:	4602      	mov	r2, r0
 8005a1a:	693b      	ldr	r3, [r7, #16]
 8005a1c:	1ad3      	subs	r3, r2, r3
 8005a1e:	2b64      	cmp	r3, #100	; 0x64
 8005a20:	d901      	bls.n	8005a26 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005a22:	2303      	movs	r3, #3
 8005a24:	e29a      	b.n	8005f5c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005a26:	4b88      	ldr	r3, [pc, #544]	; (8005c48 <HAL_RCC_OscConfig+0x504>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d1f0      	bne.n	8005a14 <HAL_RCC_OscConfig+0x2d0>
 8005a32:	e000      	b.n	8005a36 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f003 0302 	and.w	r3, r3, #2
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d060      	beq.n	8005b04 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005a42:	69bb      	ldr	r3, [r7, #24]
 8005a44:	2b04      	cmp	r3, #4
 8005a46:	d005      	beq.n	8005a54 <HAL_RCC_OscConfig+0x310>
 8005a48:	69bb      	ldr	r3, [r7, #24]
 8005a4a:	2b0c      	cmp	r3, #12
 8005a4c:	d119      	bne.n	8005a82 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005a4e:	697b      	ldr	r3, [r7, #20]
 8005a50:	2b02      	cmp	r3, #2
 8005a52:	d116      	bne.n	8005a82 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005a54:	4b7c      	ldr	r3, [pc, #496]	; (8005c48 <HAL_RCC_OscConfig+0x504>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d005      	beq.n	8005a6c <HAL_RCC_OscConfig+0x328>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	68db      	ldr	r3, [r3, #12]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d101      	bne.n	8005a6c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005a68:	2301      	movs	r3, #1
 8005a6a:	e277      	b.n	8005f5c <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a6c:	4b76      	ldr	r3, [pc, #472]	; (8005c48 <HAL_RCC_OscConfig+0x504>)
 8005a6e:	685b      	ldr	r3, [r3, #4]
 8005a70:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	691b      	ldr	r3, [r3, #16]
 8005a78:	061b      	lsls	r3, r3, #24
 8005a7a:	4973      	ldr	r1, [pc, #460]	; (8005c48 <HAL_RCC_OscConfig+0x504>)
 8005a7c:	4313      	orrs	r3, r2
 8005a7e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005a80:	e040      	b.n	8005b04 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	68db      	ldr	r3, [r3, #12]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d023      	beq.n	8005ad2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005a8a:	4b6f      	ldr	r3, [pc, #444]	; (8005c48 <HAL_RCC_OscConfig+0x504>)
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	4a6e      	ldr	r2, [pc, #440]	; (8005c48 <HAL_RCC_OscConfig+0x504>)
 8005a90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a94:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a96:	f7fe fa4d 	bl	8003f34 <HAL_GetTick>
 8005a9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005a9c:	e008      	b.n	8005ab0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005a9e:	f7fe fa49 	bl	8003f34 <HAL_GetTick>
 8005aa2:	4602      	mov	r2, r0
 8005aa4:	693b      	ldr	r3, [r7, #16]
 8005aa6:	1ad3      	subs	r3, r2, r3
 8005aa8:	2b02      	cmp	r3, #2
 8005aaa:	d901      	bls.n	8005ab0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005aac:	2303      	movs	r3, #3
 8005aae:	e255      	b.n	8005f5c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005ab0:	4b65      	ldr	r3, [pc, #404]	; (8005c48 <HAL_RCC_OscConfig+0x504>)
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d0f0      	beq.n	8005a9e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005abc:	4b62      	ldr	r3, [pc, #392]	; (8005c48 <HAL_RCC_OscConfig+0x504>)
 8005abe:	685b      	ldr	r3, [r3, #4]
 8005ac0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	691b      	ldr	r3, [r3, #16]
 8005ac8:	061b      	lsls	r3, r3, #24
 8005aca:	495f      	ldr	r1, [pc, #380]	; (8005c48 <HAL_RCC_OscConfig+0x504>)
 8005acc:	4313      	orrs	r3, r2
 8005ace:	604b      	str	r3, [r1, #4]
 8005ad0:	e018      	b.n	8005b04 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005ad2:	4b5d      	ldr	r3, [pc, #372]	; (8005c48 <HAL_RCC_OscConfig+0x504>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	4a5c      	ldr	r2, [pc, #368]	; (8005c48 <HAL_RCC_OscConfig+0x504>)
 8005ad8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005adc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ade:	f7fe fa29 	bl	8003f34 <HAL_GetTick>
 8005ae2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005ae4:	e008      	b.n	8005af8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ae6:	f7fe fa25 	bl	8003f34 <HAL_GetTick>
 8005aea:	4602      	mov	r2, r0
 8005aec:	693b      	ldr	r3, [r7, #16]
 8005aee:	1ad3      	subs	r3, r2, r3
 8005af0:	2b02      	cmp	r3, #2
 8005af2:	d901      	bls.n	8005af8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005af4:	2303      	movs	r3, #3
 8005af6:	e231      	b.n	8005f5c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005af8:	4b53      	ldr	r3, [pc, #332]	; (8005c48 <HAL_RCC_OscConfig+0x504>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d1f0      	bne.n	8005ae6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f003 0308 	and.w	r3, r3, #8
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d03c      	beq.n	8005b8a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	695b      	ldr	r3, [r3, #20]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d01c      	beq.n	8005b52 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005b18:	4b4b      	ldr	r3, [pc, #300]	; (8005c48 <HAL_RCC_OscConfig+0x504>)
 8005b1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b1e:	4a4a      	ldr	r2, [pc, #296]	; (8005c48 <HAL_RCC_OscConfig+0x504>)
 8005b20:	f043 0301 	orr.w	r3, r3, #1
 8005b24:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b28:	f7fe fa04 	bl	8003f34 <HAL_GetTick>
 8005b2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005b2e:	e008      	b.n	8005b42 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005b30:	f7fe fa00 	bl	8003f34 <HAL_GetTick>
 8005b34:	4602      	mov	r2, r0
 8005b36:	693b      	ldr	r3, [r7, #16]
 8005b38:	1ad3      	subs	r3, r2, r3
 8005b3a:	2b02      	cmp	r3, #2
 8005b3c:	d901      	bls.n	8005b42 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005b3e:	2303      	movs	r3, #3
 8005b40:	e20c      	b.n	8005f5c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005b42:	4b41      	ldr	r3, [pc, #260]	; (8005c48 <HAL_RCC_OscConfig+0x504>)
 8005b44:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b48:	f003 0302 	and.w	r3, r3, #2
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d0ef      	beq.n	8005b30 <HAL_RCC_OscConfig+0x3ec>
 8005b50:	e01b      	b.n	8005b8a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005b52:	4b3d      	ldr	r3, [pc, #244]	; (8005c48 <HAL_RCC_OscConfig+0x504>)
 8005b54:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b58:	4a3b      	ldr	r2, [pc, #236]	; (8005c48 <HAL_RCC_OscConfig+0x504>)
 8005b5a:	f023 0301 	bic.w	r3, r3, #1
 8005b5e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b62:	f7fe f9e7 	bl	8003f34 <HAL_GetTick>
 8005b66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005b68:	e008      	b.n	8005b7c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005b6a:	f7fe f9e3 	bl	8003f34 <HAL_GetTick>
 8005b6e:	4602      	mov	r2, r0
 8005b70:	693b      	ldr	r3, [r7, #16]
 8005b72:	1ad3      	subs	r3, r2, r3
 8005b74:	2b02      	cmp	r3, #2
 8005b76:	d901      	bls.n	8005b7c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005b78:	2303      	movs	r3, #3
 8005b7a:	e1ef      	b.n	8005f5c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005b7c:	4b32      	ldr	r3, [pc, #200]	; (8005c48 <HAL_RCC_OscConfig+0x504>)
 8005b7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b82:	f003 0302 	and.w	r3, r3, #2
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d1ef      	bne.n	8005b6a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f003 0304 	and.w	r3, r3, #4
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	f000 80a6 	beq.w	8005ce4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005b98:	2300      	movs	r3, #0
 8005b9a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005b9c:	4b2a      	ldr	r3, [pc, #168]	; (8005c48 <HAL_RCC_OscConfig+0x504>)
 8005b9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ba0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d10d      	bne.n	8005bc4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005ba8:	4b27      	ldr	r3, [pc, #156]	; (8005c48 <HAL_RCC_OscConfig+0x504>)
 8005baa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bac:	4a26      	ldr	r2, [pc, #152]	; (8005c48 <HAL_RCC_OscConfig+0x504>)
 8005bae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005bb2:	6593      	str	r3, [r2, #88]	; 0x58
 8005bb4:	4b24      	ldr	r3, [pc, #144]	; (8005c48 <HAL_RCC_OscConfig+0x504>)
 8005bb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bbc:	60bb      	str	r3, [r7, #8]
 8005bbe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005bc0:	2301      	movs	r3, #1
 8005bc2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005bc4:	4b21      	ldr	r3, [pc, #132]	; (8005c4c <HAL_RCC_OscConfig+0x508>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d118      	bne.n	8005c02 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005bd0:	4b1e      	ldr	r3, [pc, #120]	; (8005c4c <HAL_RCC_OscConfig+0x508>)
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	4a1d      	ldr	r2, [pc, #116]	; (8005c4c <HAL_RCC_OscConfig+0x508>)
 8005bd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005bda:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005bdc:	f7fe f9aa 	bl	8003f34 <HAL_GetTick>
 8005be0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005be2:	e008      	b.n	8005bf6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005be4:	f7fe f9a6 	bl	8003f34 <HAL_GetTick>
 8005be8:	4602      	mov	r2, r0
 8005bea:	693b      	ldr	r3, [r7, #16]
 8005bec:	1ad3      	subs	r3, r2, r3
 8005bee:	2b02      	cmp	r3, #2
 8005bf0:	d901      	bls.n	8005bf6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005bf2:	2303      	movs	r3, #3
 8005bf4:	e1b2      	b.n	8005f5c <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005bf6:	4b15      	ldr	r3, [pc, #84]	; (8005c4c <HAL_RCC_OscConfig+0x508>)
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d0f0      	beq.n	8005be4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	689b      	ldr	r3, [r3, #8]
 8005c06:	2b01      	cmp	r3, #1
 8005c08:	d108      	bne.n	8005c1c <HAL_RCC_OscConfig+0x4d8>
 8005c0a:	4b0f      	ldr	r3, [pc, #60]	; (8005c48 <HAL_RCC_OscConfig+0x504>)
 8005c0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c10:	4a0d      	ldr	r2, [pc, #52]	; (8005c48 <HAL_RCC_OscConfig+0x504>)
 8005c12:	f043 0301 	orr.w	r3, r3, #1
 8005c16:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005c1a:	e029      	b.n	8005c70 <HAL_RCC_OscConfig+0x52c>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	689b      	ldr	r3, [r3, #8]
 8005c20:	2b05      	cmp	r3, #5
 8005c22:	d115      	bne.n	8005c50 <HAL_RCC_OscConfig+0x50c>
 8005c24:	4b08      	ldr	r3, [pc, #32]	; (8005c48 <HAL_RCC_OscConfig+0x504>)
 8005c26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c2a:	4a07      	ldr	r2, [pc, #28]	; (8005c48 <HAL_RCC_OscConfig+0x504>)
 8005c2c:	f043 0304 	orr.w	r3, r3, #4
 8005c30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005c34:	4b04      	ldr	r3, [pc, #16]	; (8005c48 <HAL_RCC_OscConfig+0x504>)
 8005c36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c3a:	4a03      	ldr	r2, [pc, #12]	; (8005c48 <HAL_RCC_OscConfig+0x504>)
 8005c3c:	f043 0301 	orr.w	r3, r3, #1
 8005c40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005c44:	e014      	b.n	8005c70 <HAL_RCC_OscConfig+0x52c>
 8005c46:	bf00      	nop
 8005c48:	40021000 	.word	0x40021000
 8005c4c:	40007000 	.word	0x40007000
 8005c50:	4b9a      	ldr	r3, [pc, #616]	; (8005ebc <HAL_RCC_OscConfig+0x778>)
 8005c52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c56:	4a99      	ldr	r2, [pc, #612]	; (8005ebc <HAL_RCC_OscConfig+0x778>)
 8005c58:	f023 0301 	bic.w	r3, r3, #1
 8005c5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005c60:	4b96      	ldr	r3, [pc, #600]	; (8005ebc <HAL_RCC_OscConfig+0x778>)
 8005c62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c66:	4a95      	ldr	r2, [pc, #596]	; (8005ebc <HAL_RCC_OscConfig+0x778>)
 8005c68:	f023 0304 	bic.w	r3, r3, #4
 8005c6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	689b      	ldr	r3, [r3, #8]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d016      	beq.n	8005ca6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c78:	f7fe f95c 	bl	8003f34 <HAL_GetTick>
 8005c7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005c7e:	e00a      	b.n	8005c96 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c80:	f7fe f958 	bl	8003f34 <HAL_GetTick>
 8005c84:	4602      	mov	r2, r0
 8005c86:	693b      	ldr	r3, [r7, #16]
 8005c88:	1ad3      	subs	r3, r2, r3
 8005c8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d901      	bls.n	8005c96 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8005c92:	2303      	movs	r3, #3
 8005c94:	e162      	b.n	8005f5c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005c96:	4b89      	ldr	r3, [pc, #548]	; (8005ebc <HAL_RCC_OscConfig+0x778>)
 8005c98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c9c:	f003 0302 	and.w	r3, r3, #2
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d0ed      	beq.n	8005c80 <HAL_RCC_OscConfig+0x53c>
 8005ca4:	e015      	b.n	8005cd2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ca6:	f7fe f945 	bl	8003f34 <HAL_GetTick>
 8005caa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005cac:	e00a      	b.n	8005cc4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005cae:	f7fe f941 	bl	8003f34 <HAL_GetTick>
 8005cb2:	4602      	mov	r2, r0
 8005cb4:	693b      	ldr	r3, [r7, #16]
 8005cb6:	1ad3      	subs	r3, r2, r3
 8005cb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d901      	bls.n	8005cc4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005cc0:	2303      	movs	r3, #3
 8005cc2:	e14b      	b.n	8005f5c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005cc4:	4b7d      	ldr	r3, [pc, #500]	; (8005ebc <HAL_RCC_OscConfig+0x778>)
 8005cc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cca:	f003 0302 	and.w	r3, r3, #2
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d1ed      	bne.n	8005cae <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005cd2:	7ffb      	ldrb	r3, [r7, #31]
 8005cd4:	2b01      	cmp	r3, #1
 8005cd6:	d105      	bne.n	8005ce4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005cd8:	4b78      	ldr	r3, [pc, #480]	; (8005ebc <HAL_RCC_OscConfig+0x778>)
 8005cda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cdc:	4a77      	ldr	r2, [pc, #476]	; (8005ebc <HAL_RCC_OscConfig+0x778>)
 8005cde:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005ce2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f003 0320 	and.w	r3, r3, #32
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d03c      	beq.n	8005d6a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d01c      	beq.n	8005d32 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005cf8:	4b70      	ldr	r3, [pc, #448]	; (8005ebc <HAL_RCC_OscConfig+0x778>)
 8005cfa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005cfe:	4a6f      	ldr	r2, [pc, #444]	; (8005ebc <HAL_RCC_OscConfig+0x778>)
 8005d00:	f043 0301 	orr.w	r3, r3, #1
 8005d04:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d08:	f7fe f914 	bl	8003f34 <HAL_GetTick>
 8005d0c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005d0e:	e008      	b.n	8005d22 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005d10:	f7fe f910 	bl	8003f34 <HAL_GetTick>
 8005d14:	4602      	mov	r2, r0
 8005d16:	693b      	ldr	r3, [r7, #16]
 8005d18:	1ad3      	subs	r3, r2, r3
 8005d1a:	2b02      	cmp	r3, #2
 8005d1c:	d901      	bls.n	8005d22 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8005d1e:	2303      	movs	r3, #3
 8005d20:	e11c      	b.n	8005f5c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005d22:	4b66      	ldr	r3, [pc, #408]	; (8005ebc <HAL_RCC_OscConfig+0x778>)
 8005d24:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005d28:	f003 0302 	and.w	r3, r3, #2
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d0ef      	beq.n	8005d10 <HAL_RCC_OscConfig+0x5cc>
 8005d30:	e01b      	b.n	8005d6a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005d32:	4b62      	ldr	r3, [pc, #392]	; (8005ebc <HAL_RCC_OscConfig+0x778>)
 8005d34:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005d38:	4a60      	ldr	r2, [pc, #384]	; (8005ebc <HAL_RCC_OscConfig+0x778>)
 8005d3a:	f023 0301 	bic.w	r3, r3, #1
 8005d3e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d42:	f7fe f8f7 	bl	8003f34 <HAL_GetTick>
 8005d46:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005d48:	e008      	b.n	8005d5c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005d4a:	f7fe f8f3 	bl	8003f34 <HAL_GetTick>
 8005d4e:	4602      	mov	r2, r0
 8005d50:	693b      	ldr	r3, [r7, #16]
 8005d52:	1ad3      	subs	r3, r2, r3
 8005d54:	2b02      	cmp	r3, #2
 8005d56:	d901      	bls.n	8005d5c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8005d58:	2303      	movs	r3, #3
 8005d5a:	e0ff      	b.n	8005f5c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005d5c:	4b57      	ldr	r3, [pc, #348]	; (8005ebc <HAL_RCC_OscConfig+0x778>)
 8005d5e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005d62:	f003 0302 	and.w	r3, r3, #2
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d1ef      	bne.n	8005d4a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	f000 80f3 	beq.w	8005f5a <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d78:	2b02      	cmp	r3, #2
 8005d7a:	f040 80c9 	bne.w	8005f10 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005d7e:	4b4f      	ldr	r3, [pc, #316]	; (8005ebc <HAL_RCC_OscConfig+0x778>)
 8005d80:	68db      	ldr	r3, [r3, #12]
 8005d82:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d84:	697b      	ldr	r3, [r7, #20]
 8005d86:	f003 0203 	and.w	r2, r3, #3
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d8e:	429a      	cmp	r2, r3
 8005d90:	d12c      	bne.n	8005dec <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005d92:	697b      	ldr	r3, [r7, #20]
 8005d94:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d9c:	3b01      	subs	r3, #1
 8005d9e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005da0:	429a      	cmp	r2, r3
 8005da2:	d123      	bne.n	8005dec <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005da4:	697b      	ldr	r3, [r7, #20]
 8005da6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dae:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005db0:	429a      	cmp	r2, r3
 8005db2:	d11b      	bne.n	8005dec <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005db4:	697b      	ldr	r3, [r7, #20]
 8005db6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dbe:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005dc0:	429a      	cmp	r2, r3
 8005dc2:	d113      	bne.n	8005dec <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005dc4:	697b      	ldr	r3, [r7, #20]
 8005dc6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dce:	085b      	lsrs	r3, r3, #1
 8005dd0:	3b01      	subs	r3, #1
 8005dd2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005dd4:	429a      	cmp	r2, r3
 8005dd6:	d109      	bne.n	8005dec <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005dd8:	697b      	ldr	r3, [r7, #20]
 8005dda:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005de2:	085b      	lsrs	r3, r3, #1
 8005de4:	3b01      	subs	r3, #1
 8005de6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005de8:	429a      	cmp	r2, r3
 8005dea:	d06b      	beq.n	8005ec4 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005dec:	69bb      	ldr	r3, [r7, #24]
 8005dee:	2b0c      	cmp	r3, #12
 8005df0:	d062      	beq.n	8005eb8 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005df2:	4b32      	ldr	r3, [pc, #200]	; (8005ebc <HAL_RCC_OscConfig+0x778>)
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d001      	beq.n	8005e02 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8005dfe:	2301      	movs	r3, #1
 8005e00:	e0ac      	b.n	8005f5c <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005e02:	4b2e      	ldr	r3, [pc, #184]	; (8005ebc <HAL_RCC_OscConfig+0x778>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4a2d      	ldr	r2, [pc, #180]	; (8005ebc <HAL_RCC_OscConfig+0x778>)
 8005e08:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005e0c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005e0e:	f7fe f891 	bl	8003f34 <HAL_GetTick>
 8005e12:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005e14:	e008      	b.n	8005e28 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e16:	f7fe f88d 	bl	8003f34 <HAL_GetTick>
 8005e1a:	4602      	mov	r2, r0
 8005e1c:	693b      	ldr	r3, [r7, #16]
 8005e1e:	1ad3      	subs	r3, r2, r3
 8005e20:	2b02      	cmp	r3, #2
 8005e22:	d901      	bls.n	8005e28 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8005e24:	2303      	movs	r3, #3
 8005e26:	e099      	b.n	8005f5c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005e28:	4b24      	ldr	r3, [pc, #144]	; (8005ebc <HAL_RCC_OscConfig+0x778>)
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d1f0      	bne.n	8005e16 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005e34:	4b21      	ldr	r3, [pc, #132]	; (8005ebc <HAL_RCC_OscConfig+0x778>)
 8005e36:	68da      	ldr	r2, [r3, #12]
 8005e38:	4b21      	ldr	r3, [pc, #132]	; (8005ec0 <HAL_RCC_OscConfig+0x77c>)
 8005e3a:	4013      	ands	r3, r2
 8005e3c:	687a      	ldr	r2, [r7, #4]
 8005e3e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005e40:	687a      	ldr	r2, [r7, #4]
 8005e42:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005e44:	3a01      	subs	r2, #1
 8005e46:	0112      	lsls	r2, r2, #4
 8005e48:	4311      	orrs	r1, r2
 8005e4a:	687a      	ldr	r2, [r7, #4]
 8005e4c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005e4e:	0212      	lsls	r2, r2, #8
 8005e50:	4311      	orrs	r1, r2
 8005e52:	687a      	ldr	r2, [r7, #4]
 8005e54:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005e56:	0852      	lsrs	r2, r2, #1
 8005e58:	3a01      	subs	r2, #1
 8005e5a:	0552      	lsls	r2, r2, #21
 8005e5c:	4311      	orrs	r1, r2
 8005e5e:	687a      	ldr	r2, [r7, #4]
 8005e60:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005e62:	0852      	lsrs	r2, r2, #1
 8005e64:	3a01      	subs	r2, #1
 8005e66:	0652      	lsls	r2, r2, #25
 8005e68:	4311      	orrs	r1, r2
 8005e6a:	687a      	ldr	r2, [r7, #4]
 8005e6c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005e6e:	06d2      	lsls	r2, r2, #27
 8005e70:	430a      	orrs	r2, r1
 8005e72:	4912      	ldr	r1, [pc, #72]	; (8005ebc <HAL_RCC_OscConfig+0x778>)
 8005e74:	4313      	orrs	r3, r2
 8005e76:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005e78:	4b10      	ldr	r3, [pc, #64]	; (8005ebc <HAL_RCC_OscConfig+0x778>)
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4a0f      	ldr	r2, [pc, #60]	; (8005ebc <HAL_RCC_OscConfig+0x778>)
 8005e7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005e82:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005e84:	4b0d      	ldr	r3, [pc, #52]	; (8005ebc <HAL_RCC_OscConfig+0x778>)
 8005e86:	68db      	ldr	r3, [r3, #12]
 8005e88:	4a0c      	ldr	r2, [pc, #48]	; (8005ebc <HAL_RCC_OscConfig+0x778>)
 8005e8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005e8e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005e90:	f7fe f850 	bl	8003f34 <HAL_GetTick>
 8005e94:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005e96:	e008      	b.n	8005eaa <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e98:	f7fe f84c 	bl	8003f34 <HAL_GetTick>
 8005e9c:	4602      	mov	r2, r0
 8005e9e:	693b      	ldr	r3, [r7, #16]
 8005ea0:	1ad3      	subs	r3, r2, r3
 8005ea2:	2b02      	cmp	r3, #2
 8005ea4:	d901      	bls.n	8005eaa <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8005ea6:	2303      	movs	r3, #3
 8005ea8:	e058      	b.n	8005f5c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005eaa:	4b04      	ldr	r3, [pc, #16]	; (8005ebc <HAL_RCC_OscConfig+0x778>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d0f0      	beq.n	8005e98 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005eb6:	e050      	b.n	8005f5a <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005eb8:	2301      	movs	r3, #1
 8005eba:	e04f      	b.n	8005f5c <HAL_RCC_OscConfig+0x818>
 8005ebc:	40021000 	.word	0x40021000
 8005ec0:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005ec4:	4b27      	ldr	r3, [pc, #156]	; (8005f64 <HAL_RCC_OscConfig+0x820>)
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d144      	bne.n	8005f5a <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005ed0:	4b24      	ldr	r3, [pc, #144]	; (8005f64 <HAL_RCC_OscConfig+0x820>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4a23      	ldr	r2, [pc, #140]	; (8005f64 <HAL_RCC_OscConfig+0x820>)
 8005ed6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005eda:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005edc:	4b21      	ldr	r3, [pc, #132]	; (8005f64 <HAL_RCC_OscConfig+0x820>)
 8005ede:	68db      	ldr	r3, [r3, #12]
 8005ee0:	4a20      	ldr	r2, [pc, #128]	; (8005f64 <HAL_RCC_OscConfig+0x820>)
 8005ee2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005ee6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005ee8:	f7fe f824 	bl	8003f34 <HAL_GetTick>
 8005eec:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005eee:	e008      	b.n	8005f02 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ef0:	f7fe f820 	bl	8003f34 <HAL_GetTick>
 8005ef4:	4602      	mov	r2, r0
 8005ef6:	693b      	ldr	r3, [r7, #16]
 8005ef8:	1ad3      	subs	r3, r2, r3
 8005efa:	2b02      	cmp	r3, #2
 8005efc:	d901      	bls.n	8005f02 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8005efe:	2303      	movs	r3, #3
 8005f00:	e02c      	b.n	8005f5c <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005f02:	4b18      	ldr	r3, [pc, #96]	; (8005f64 <HAL_RCC_OscConfig+0x820>)
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d0f0      	beq.n	8005ef0 <HAL_RCC_OscConfig+0x7ac>
 8005f0e:	e024      	b.n	8005f5a <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005f10:	69bb      	ldr	r3, [r7, #24]
 8005f12:	2b0c      	cmp	r3, #12
 8005f14:	d01f      	beq.n	8005f56 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f16:	4b13      	ldr	r3, [pc, #76]	; (8005f64 <HAL_RCC_OscConfig+0x820>)
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	4a12      	ldr	r2, [pc, #72]	; (8005f64 <HAL_RCC_OscConfig+0x820>)
 8005f1c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005f20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f22:	f7fe f807 	bl	8003f34 <HAL_GetTick>
 8005f26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005f28:	e008      	b.n	8005f3c <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f2a:	f7fe f803 	bl	8003f34 <HAL_GetTick>
 8005f2e:	4602      	mov	r2, r0
 8005f30:	693b      	ldr	r3, [r7, #16]
 8005f32:	1ad3      	subs	r3, r2, r3
 8005f34:	2b02      	cmp	r3, #2
 8005f36:	d901      	bls.n	8005f3c <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8005f38:	2303      	movs	r3, #3
 8005f3a:	e00f      	b.n	8005f5c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005f3c:	4b09      	ldr	r3, [pc, #36]	; (8005f64 <HAL_RCC_OscConfig+0x820>)
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d1f0      	bne.n	8005f2a <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8005f48:	4b06      	ldr	r3, [pc, #24]	; (8005f64 <HAL_RCC_OscConfig+0x820>)
 8005f4a:	68da      	ldr	r2, [r3, #12]
 8005f4c:	4905      	ldr	r1, [pc, #20]	; (8005f64 <HAL_RCC_OscConfig+0x820>)
 8005f4e:	4b06      	ldr	r3, [pc, #24]	; (8005f68 <HAL_RCC_OscConfig+0x824>)
 8005f50:	4013      	ands	r3, r2
 8005f52:	60cb      	str	r3, [r1, #12]
 8005f54:	e001      	b.n	8005f5a <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005f56:	2301      	movs	r3, #1
 8005f58:	e000      	b.n	8005f5c <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8005f5a:	2300      	movs	r3, #0
}
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	3720      	adds	r7, #32
 8005f60:	46bd      	mov	sp, r7
 8005f62:	bd80      	pop	{r7, pc}
 8005f64:	40021000 	.word	0x40021000
 8005f68:	feeefffc 	.word	0xfeeefffc

08005f6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b084      	sub	sp, #16
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
 8005f74:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d101      	bne.n	8005f80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	e0e7      	b.n	8006150 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005f80:	4b75      	ldr	r3, [pc, #468]	; (8006158 <HAL_RCC_ClockConfig+0x1ec>)
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f003 0307 	and.w	r3, r3, #7
 8005f88:	683a      	ldr	r2, [r7, #0]
 8005f8a:	429a      	cmp	r2, r3
 8005f8c:	d910      	bls.n	8005fb0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f8e:	4b72      	ldr	r3, [pc, #456]	; (8006158 <HAL_RCC_ClockConfig+0x1ec>)
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f023 0207 	bic.w	r2, r3, #7
 8005f96:	4970      	ldr	r1, [pc, #448]	; (8006158 <HAL_RCC_ClockConfig+0x1ec>)
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	4313      	orrs	r3, r2
 8005f9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f9e:	4b6e      	ldr	r3, [pc, #440]	; (8006158 <HAL_RCC_ClockConfig+0x1ec>)
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f003 0307 	and.w	r3, r3, #7
 8005fa6:	683a      	ldr	r2, [r7, #0]
 8005fa8:	429a      	cmp	r2, r3
 8005faa:	d001      	beq.n	8005fb0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005fac:	2301      	movs	r3, #1
 8005fae:	e0cf      	b.n	8006150 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f003 0302 	and.w	r3, r3, #2
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d010      	beq.n	8005fde <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	689a      	ldr	r2, [r3, #8]
 8005fc0:	4b66      	ldr	r3, [pc, #408]	; (800615c <HAL_RCC_ClockConfig+0x1f0>)
 8005fc2:	689b      	ldr	r3, [r3, #8]
 8005fc4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005fc8:	429a      	cmp	r2, r3
 8005fca:	d908      	bls.n	8005fde <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005fcc:	4b63      	ldr	r3, [pc, #396]	; (800615c <HAL_RCC_ClockConfig+0x1f0>)
 8005fce:	689b      	ldr	r3, [r3, #8]
 8005fd0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	689b      	ldr	r3, [r3, #8]
 8005fd8:	4960      	ldr	r1, [pc, #384]	; (800615c <HAL_RCC_ClockConfig+0x1f0>)
 8005fda:	4313      	orrs	r3, r2
 8005fdc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f003 0301 	and.w	r3, r3, #1
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d04c      	beq.n	8006084 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	685b      	ldr	r3, [r3, #4]
 8005fee:	2b03      	cmp	r3, #3
 8005ff0:	d107      	bne.n	8006002 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005ff2:	4b5a      	ldr	r3, [pc, #360]	; (800615c <HAL_RCC_ClockConfig+0x1f0>)
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d121      	bne.n	8006042 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005ffe:	2301      	movs	r3, #1
 8006000:	e0a6      	b.n	8006150 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	685b      	ldr	r3, [r3, #4]
 8006006:	2b02      	cmp	r3, #2
 8006008:	d107      	bne.n	800601a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800600a:	4b54      	ldr	r3, [pc, #336]	; (800615c <HAL_RCC_ClockConfig+0x1f0>)
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006012:	2b00      	cmp	r3, #0
 8006014:	d115      	bne.n	8006042 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006016:	2301      	movs	r3, #1
 8006018:	e09a      	b.n	8006150 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	685b      	ldr	r3, [r3, #4]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d107      	bne.n	8006032 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006022:	4b4e      	ldr	r3, [pc, #312]	; (800615c <HAL_RCC_ClockConfig+0x1f0>)
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f003 0302 	and.w	r3, r3, #2
 800602a:	2b00      	cmp	r3, #0
 800602c:	d109      	bne.n	8006042 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800602e:	2301      	movs	r3, #1
 8006030:	e08e      	b.n	8006150 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006032:	4b4a      	ldr	r3, [pc, #296]	; (800615c <HAL_RCC_ClockConfig+0x1f0>)
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800603a:	2b00      	cmp	r3, #0
 800603c:	d101      	bne.n	8006042 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800603e:	2301      	movs	r3, #1
 8006040:	e086      	b.n	8006150 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006042:	4b46      	ldr	r3, [pc, #280]	; (800615c <HAL_RCC_ClockConfig+0x1f0>)
 8006044:	689b      	ldr	r3, [r3, #8]
 8006046:	f023 0203 	bic.w	r2, r3, #3
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	685b      	ldr	r3, [r3, #4]
 800604e:	4943      	ldr	r1, [pc, #268]	; (800615c <HAL_RCC_ClockConfig+0x1f0>)
 8006050:	4313      	orrs	r3, r2
 8006052:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006054:	f7fd ff6e 	bl	8003f34 <HAL_GetTick>
 8006058:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800605a:	e00a      	b.n	8006072 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800605c:	f7fd ff6a 	bl	8003f34 <HAL_GetTick>
 8006060:	4602      	mov	r2, r0
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	1ad3      	subs	r3, r2, r3
 8006066:	f241 3288 	movw	r2, #5000	; 0x1388
 800606a:	4293      	cmp	r3, r2
 800606c:	d901      	bls.n	8006072 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800606e:	2303      	movs	r3, #3
 8006070:	e06e      	b.n	8006150 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006072:	4b3a      	ldr	r3, [pc, #232]	; (800615c <HAL_RCC_ClockConfig+0x1f0>)
 8006074:	689b      	ldr	r3, [r3, #8]
 8006076:	f003 020c 	and.w	r2, r3, #12
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	685b      	ldr	r3, [r3, #4]
 800607e:	009b      	lsls	r3, r3, #2
 8006080:	429a      	cmp	r2, r3
 8006082:	d1eb      	bne.n	800605c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f003 0302 	and.w	r3, r3, #2
 800608c:	2b00      	cmp	r3, #0
 800608e:	d010      	beq.n	80060b2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	689a      	ldr	r2, [r3, #8]
 8006094:	4b31      	ldr	r3, [pc, #196]	; (800615c <HAL_RCC_ClockConfig+0x1f0>)
 8006096:	689b      	ldr	r3, [r3, #8]
 8006098:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800609c:	429a      	cmp	r2, r3
 800609e:	d208      	bcs.n	80060b2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80060a0:	4b2e      	ldr	r3, [pc, #184]	; (800615c <HAL_RCC_ClockConfig+0x1f0>)
 80060a2:	689b      	ldr	r3, [r3, #8]
 80060a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	689b      	ldr	r3, [r3, #8]
 80060ac:	492b      	ldr	r1, [pc, #172]	; (800615c <HAL_RCC_ClockConfig+0x1f0>)
 80060ae:	4313      	orrs	r3, r2
 80060b0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80060b2:	4b29      	ldr	r3, [pc, #164]	; (8006158 <HAL_RCC_ClockConfig+0x1ec>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f003 0307 	and.w	r3, r3, #7
 80060ba:	683a      	ldr	r2, [r7, #0]
 80060bc:	429a      	cmp	r2, r3
 80060be:	d210      	bcs.n	80060e2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80060c0:	4b25      	ldr	r3, [pc, #148]	; (8006158 <HAL_RCC_ClockConfig+0x1ec>)
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f023 0207 	bic.w	r2, r3, #7
 80060c8:	4923      	ldr	r1, [pc, #140]	; (8006158 <HAL_RCC_ClockConfig+0x1ec>)
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	4313      	orrs	r3, r2
 80060ce:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80060d0:	4b21      	ldr	r3, [pc, #132]	; (8006158 <HAL_RCC_ClockConfig+0x1ec>)
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f003 0307 	and.w	r3, r3, #7
 80060d8:	683a      	ldr	r2, [r7, #0]
 80060da:	429a      	cmp	r2, r3
 80060dc:	d001      	beq.n	80060e2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80060de:	2301      	movs	r3, #1
 80060e0:	e036      	b.n	8006150 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f003 0304 	and.w	r3, r3, #4
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d008      	beq.n	8006100 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80060ee:	4b1b      	ldr	r3, [pc, #108]	; (800615c <HAL_RCC_ClockConfig+0x1f0>)
 80060f0:	689b      	ldr	r3, [r3, #8]
 80060f2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	68db      	ldr	r3, [r3, #12]
 80060fa:	4918      	ldr	r1, [pc, #96]	; (800615c <HAL_RCC_ClockConfig+0x1f0>)
 80060fc:	4313      	orrs	r3, r2
 80060fe:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f003 0308 	and.w	r3, r3, #8
 8006108:	2b00      	cmp	r3, #0
 800610a:	d009      	beq.n	8006120 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800610c:	4b13      	ldr	r3, [pc, #76]	; (800615c <HAL_RCC_ClockConfig+0x1f0>)
 800610e:	689b      	ldr	r3, [r3, #8]
 8006110:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	691b      	ldr	r3, [r3, #16]
 8006118:	00db      	lsls	r3, r3, #3
 800611a:	4910      	ldr	r1, [pc, #64]	; (800615c <HAL_RCC_ClockConfig+0x1f0>)
 800611c:	4313      	orrs	r3, r2
 800611e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006120:	f000 f824 	bl	800616c <HAL_RCC_GetSysClockFreq>
 8006124:	4602      	mov	r2, r0
 8006126:	4b0d      	ldr	r3, [pc, #52]	; (800615c <HAL_RCC_ClockConfig+0x1f0>)
 8006128:	689b      	ldr	r3, [r3, #8]
 800612a:	091b      	lsrs	r3, r3, #4
 800612c:	f003 030f 	and.w	r3, r3, #15
 8006130:	490b      	ldr	r1, [pc, #44]	; (8006160 <HAL_RCC_ClockConfig+0x1f4>)
 8006132:	5ccb      	ldrb	r3, [r1, r3]
 8006134:	f003 031f 	and.w	r3, r3, #31
 8006138:	fa22 f303 	lsr.w	r3, r2, r3
 800613c:	4a09      	ldr	r2, [pc, #36]	; (8006164 <HAL_RCC_ClockConfig+0x1f8>)
 800613e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006140:	4b09      	ldr	r3, [pc, #36]	; (8006168 <HAL_RCC_ClockConfig+0x1fc>)
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4618      	mov	r0, r3
 8006146:	f7fd fea5 	bl	8003e94 <HAL_InitTick>
 800614a:	4603      	mov	r3, r0
 800614c:	72fb      	strb	r3, [r7, #11]

  return status;
 800614e:	7afb      	ldrb	r3, [r7, #11]
}
 8006150:	4618      	mov	r0, r3
 8006152:	3710      	adds	r7, #16
 8006154:	46bd      	mov	sp, r7
 8006156:	bd80      	pop	{r7, pc}
 8006158:	40022000 	.word	0x40022000
 800615c:	40021000 	.word	0x40021000
 8006160:	08009718 	.word	0x08009718
 8006164:	2000000c 	.word	0x2000000c
 8006168:	20000010 	.word	0x20000010

0800616c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800616c:	b480      	push	{r7}
 800616e:	b089      	sub	sp, #36	; 0x24
 8006170:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8006172:	2300      	movs	r3, #0
 8006174:	61fb      	str	r3, [r7, #28]
 8006176:	2300      	movs	r3, #0
 8006178:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800617a:	4b3e      	ldr	r3, [pc, #248]	; (8006274 <HAL_RCC_GetSysClockFreq+0x108>)
 800617c:	689b      	ldr	r3, [r3, #8]
 800617e:	f003 030c 	and.w	r3, r3, #12
 8006182:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006184:	4b3b      	ldr	r3, [pc, #236]	; (8006274 <HAL_RCC_GetSysClockFreq+0x108>)
 8006186:	68db      	ldr	r3, [r3, #12]
 8006188:	f003 0303 	and.w	r3, r3, #3
 800618c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800618e:	693b      	ldr	r3, [r7, #16]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d005      	beq.n	80061a0 <HAL_RCC_GetSysClockFreq+0x34>
 8006194:	693b      	ldr	r3, [r7, #16]
 8006196:	2b0c      	cmp	r3, #12
 8006198:	d121      	bne.n	80061de <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	2b01      	cmp	r3, #1
 800619e:	d11e      	bne.n	80061de <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80061a0:	4b34      	ldr	r3, [pc, #208]	; (8006274 <HAL_RCC_GetSysClockFreq+0x108>)
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f003 0308 	and.w	r3, r3, #8
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d107      	bne.n	80061bc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80061ac:	4b31      	ldr	r3, [pc, #196]	; (8006274 <HAL_RCC_GetSysClockFreq+0x108>)
 80061ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80061b2:	0a1b      	lsrs	r3, r3, #8
 80061b4:	f003 030f 	and.w	r3, r3, #15
 80061b8:	61fb      	str	r3, [r7, #28]
 80061ba:	e005      	b.n	80061c8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80061bc:	4b2d      	ldr	r3, [pc, #180]	; (8006274 <HAL_RCC_GetSysClockFreq+0x108>)
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	091b      	lsrs	r3, r3, #4
 80061c2:	f003 030f 	and.w	r3, r3, #15
 80061c6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80061c8:	4a2b      	ldr	r2, [pc, #172]	; (8006278 <HAL_RCC_GetSysClockFreq+0x10c>)
 80061ca:	69fb      	ldr	r3, [r7, #28]
 80061cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061d0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80061d2:	693b      	ldr	r3, [r7, #16]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d10d      	bne.n	80061f4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80061d8:	69fb      	ldr	r3, [r7, #28]
 80061da:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80061dc:	e00a      	b.n	80061f4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80061de:	693b      	ldr	r3, [r7, #16]
 80061e0:	2b04      	cmp	r3, #4
 80061e2:	d102      	bne.n	80061ea <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80061e4:	4b25      	ldr	r3, [pc, #148]	; (800627c <HAL_RCC_GetSysClockFreq+0x110>)
 80061e6:	61bb      	str	r3, [r7, #24]
 80061e8:	e004      	b.n	80061f4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80061ea:	693b      	ldr	r3, [r7, #16]
 80061ec:	2b08      	cmp	r3, #8
 80061ee:	d101      	bne.n	80061f4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80061f0:	4b23      	ldr	r3, [pc, #140]	; (8006280 <HAL_RCC_GetSysClockFreq+0x114>)
 80061f2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80061f4:	693b      	ldr	r3, [r7, #16]
 80061f6:	2b0c      	cmp	r3, #12
 80061f8:	d134      	bne.n	8006264 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80061fa:	4b1e      	ldr	r3, [pc, #120]	; (8006274 <HAL_RCC_GetSysClockFreq+0x108>)
 80061fc:	68db      	ldr	r3, [r3, #12]
 80061fe:	f003 0303 	and.w	r3, r3, #3
 8006202:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006204:	68bb      	ldr	r3, [r7, #8]
 8006206:	2b02      	cmp	r3, #2
 8006208:	d003      	beq.n	8006212 <HAL_RCC_GetSysClockFreq+0xa6>
 800620a:	68bb      	ldr	r3, [r7, #8]
 800620c:	2b03      	cmp	r3, #3
 800620e:	d003      	beq.n	8006218 <HAL_RCC_GetSysClockFreq+0xac>
 8006210:	e005      	b.n	800621e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8006212:	4b1a      	ldr	r3, [pc, #104]	; (800627c <HAL_RCC_GetSysClockFreq+0x110>)
 8006214:	617b      	str	r3, [r7, #20]
      break;
 8006216:	e005      	b.n	8006224 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006218:	4b19      	ldr	r3, [pc, #100]	; (8006280 <HAL_RCC_GetSysClockFreq+0x114>)
 800621a:	617b      	str	r3, [r7, #20]
      break;
 800621c:	e002      	b.n	8006224 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800621e:	69fb      	ldr	r3, [r7, #28]
 8006220:	617b      	str	r3, [r7, #20]
      break;
 8006222:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006224:	4b13      	ldr	r3, [pc, #76]	; (8006274 <HAL_RCC_GetSysClockFreq+0x108>)
 8006226:	68db      	ldr	r3, [r3, #12]
 8006228:	091b      	lsrs	r3, r3, #4
 800622a:	f003 0307 	and.w	r3, r3, #7
 800622e:	3301      	adds	r3, #1
 8006230:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006232:	4b10      	ldr	r3, [pc, #64]	; (8006274 <HAL_RCC_GetSysClockFreq+0x108>)
 8006234:	68db      	ldr	r3, [r3, #12]
 8006236:	0a1b      	lsrs	r3, r3, #8
 8006238:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800623c:	697a      	ldr	r2, [r7, #20]
 800623e:	fb03 f202 	mul.w	r2, r3, r2
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	fbb2 f3f3 	udiv	r3, r2, r3
 8006248:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800624a:	4b0a      	ldr	r3, [pc, #40]	; (8006274 <HAL_RCC_GetSysClockFreq+0x108>)
 800624c:	68db      	ldr	r3, [r3, #12]
 800624e:	0e5b      	lsrs	r3, r3, #25
 8006250:	f003 0303 	and.w	r3, r3, #3
 8006254:	3301      	adds	r3, #1
 8006256:	005b      	lsls	r3, r3, #1
 8006258:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800625a:	697a      	ldr	r2, [r7, #20]
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006262:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006264:	69bb      	ldr	r3, [r7, #24]
}
 8006266:	4618      	mov	r0, r3
 8006268:	3724      	adds	r7, #36	; 0x24
 800626a:	46bd      	mov	sp, r7
 800626c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006270:	4770      	bx	lr
 8006272:	bf00      	nop
 8006274:	40021000 	.word	0x40021000
 8006278:	08009728 	.word	0x08009728
 800627c:	00f42400 	.word	0x00f42400
 8006280:	007a1200 	.word	0x007a1200

08006284 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b086      	sub	sp, #24
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800628c:	2300      	movs	r3, #0
 800628e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006290:	4b2a      	ldr	r3, [pc, #168]	; (800633c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006292:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006294:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006298:	2b00      	cmp	r3, #0
 800629a:	d003      	beq.n	80062a4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800629c:	f7ff f9ee 	bl	800567c <HAL_PWREx_GetVoltageRange>
 80062a0:	6178      	str	r0, [r7, #20]
 80062a2:	e014      	b.n	80062ce <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80062a4:	4b25      	ldr	r3, [pc, #148]	; (800633c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80062a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062a8:	4a24      	ldr	r2, [pc, #144]	; (800633c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80062aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80062ae:	6593      	str	r3, [r2, #88]	; 0x58
 80062b0:	4b22      	ldr	r3, [pc, #136]	; (800633c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80062b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80062b8:	60fb      	str	r3, [r7, #12]
 80062ba:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80062bc:	f7ff f9de 	bl	800567c <HAL_PWREx_GetVoltageRange>
 80062c0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80062c2:	4b1e      	ldr	r3, [pc, #120]	; (800633c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80062c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062c6:	4a1d      	ldr	r2, [pc, #116]	; (800633c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80062c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80062cc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80062ce:	697b      	ldr	r3, [r7, #20]
 80062d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80062d4:	d10b      	bne.n	80062ee <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2b80      	cmp	r3, #128	; 0x80
 80062da:	d919      	bls.n	8006310 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2ba0      	cmp	r3, #160	; 0xa0
 80062e0:	d902      	bls.n	80062e8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80062e2:	2302      	movs	r3, #2
 80062e4:	613b      	str	r3, [r7, #16]
 80062e6:	e013      	b.n	8006310 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80062e8:	2301      	movs	r3, #1
 80062ea:	613b      	str	r3, [r7, #16]
 80062ec:	e010      	b.n	8006310 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	2b80      	cmp	r3, #128	; 0x80
 80062f2:	d902      	bls.n	80062fa <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80062f4:	2303      	movs	r3, #3
 80062f6:	613b      	str	r3, [r7, #16]
 80062f8:	e00a      	b.n	8006310 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2b80      	cmp	r3, #128	; 0x80
 80062fe:	d102      	bne.n	8006306 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006300:	2302      	movs	r3, #2
 8006302:	613b      	str	r3, [r7, #16]
 8006304:	e004      	b.n	8006310 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2b70      	cmp	r3, #112	; 0x70
 800630a:	d101      	bne.n	8006310 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800630c:	2301      	movs	r3, #1
 800630e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006310:	4b0b      	ldr	r3, [pc, #44]	; (8006340 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f023 0207 	bic.w	r2, r3, #7
 8006318:	4909      	ldr	r1, [pc, #36]	; (8006340 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800631a:	693b      	ldr	r3, [r7, #16]
 800631c:	4313      	orrs	r3, r2
 800631e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006320:	4b07      	ldr	r3, [pc, #28]	; (8006340 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f003 0307 	and.w	r3, r3, #7
 8006328:	693a      	ldr	r2, [r7, #16]
 800632a:	429a      	cmp	r2, r3
 800632c:	d001      	beq.n	8006332 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800632e:	2301      	movs	r3, #1
 8006330:	e000      	b.n	8006334 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8006332:	2300      	movs	r3, #0
}
 8006334:	4618      	mov	r0, r3
 8006336:	3718      	adds	r7, #24
 8006338:	46bd      	mov	sp, r7
 800633a:	bd80      	pop	{r7, pc}
 800633c:	40021000 	.word	0x40021000
 8006340:	40022000 	.word	0x40022000

08006344 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b086      	sub	sp, #24
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800634c:	2300      	movs	r3, #0
 800634e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006350:	2300      	movs	r3, #0
 8006352:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800635c:	2b00      	cmp	r3, #0
 800635e:	d031      	beq.n	80063c4 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006364:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006368:	d01a      	beq.n	80063a0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800636a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800636e:	d814      	bhi.n	800639a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006370:	2b00      	cmp	r3, #0
 8006372:	d009      	beq.n	8006388 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006374:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006378:	d10f      	bne.n	800639a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800637a:	4b5d      	ldr	r3, [pc, #372]	; (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800637c:	68db      	ldr	r3, [r3, #12]
 800637e:	4a5c      	ldr	r2, [pc, #368]	; (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006380:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006384:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006386:	e00c      	b.n	80063a2 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	3304      	adds	r3, #4
 800638c:	2100      	movs	r1, #0
 800638e:	4618      	mov	r0, r3
 8006390:	f000 f9de 	bl	8006750 <RCCEx_PLLSAI1_Config>
 8006394:	4603      	mov	r3, r0
 8006396:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006398:	e003      	b.n	80063a2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800639a:	2301      	movs	r3, #1
 800639c:	74fb      	strb	r3, [r7, #19]
      break;
 800639e:	e000      	b.n	80063a2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80063a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80063a2:	7cfb      	ldrb	r3, [r7, #19]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d10b      	bne.n	80063c0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80063a8:	4b51      	ldr	r3, [pc, #324]	; (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80063aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063ae:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063b6:	494e      	ldr	r1, [pc, #312]	; (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80063b8:	4313      	orrs	r3, r2
 80063ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80063be:	e001      	b.n	80063c4 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063c0:	7cfb      	ldrb	r3, [r7, #19]
 80063c2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	f000 809e 	beq.w	800650e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80063d2:	2300      	movs	r3, #0
 80063d4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80063d6:	4b46      	ldr	r3, [pc, #280]	; (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80063d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d101      	bne.n	80063e6 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80063e2:	2301      	movs	r3, #1
 80063e4:	e000      	b.n	80063e8 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80063e6:	2300      	movs	r3, #0
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d00d      	beq.n	8006408 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80063ec:	4b40      	ldr	r3, [pc, #256]	; (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80063ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063f0:	4a3f      	ldr	r2, [pc, #252]	; (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80063f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80063f6:	6593      	str	r3, [r2, #88]	; 0x58
 80063f8:	4b3d      	ldr	r3, [pc, #244]	; (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80063fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006400:	60bb      	str	r3, [r7, #8]
 8006402:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006404:	2301      	movs	r3, #1
 8006406:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006408:	4b3a      	ldr	r3, [pc, #232]	; (80064f4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	4a39      	ldr	r2, [pc, #228]	; (80064f4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800640e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006412:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006414:	f7fd fd8e 	bl	8003f34 <HAL_GetTick>
 8006418:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800641a:	e009      	b.n	8006430 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800641c:	f7fd fd8a 	bl	8003f34 <HAL_GetTick>
 8006420:	4602      	mov	r2, r0
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	1ad3      	subs	r3, r2, r3
 8006426:	2b02      	cmp	r3, #2
 8006428:	d902      	bls.n	8006430 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800642a:	2303      	movs	r3, #3
 800642c:	74fb      	strb	r3, [r7, #19]
        break;
 800642e:	e005      	b.n	800643c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006430:	4b30      	ldr	r3, [pc, #192]	; (80064f4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006438:	2b00      	cmp	r3, #0
 800643a:	d0ef      	beq.n	800641c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 800643c:	7cfb      	ldrb	r3, [r7, #19]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d15a      	bne.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006442:	4b2b      	ldr	r3, [pc, #172]	; (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006444:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006448:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800644c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800644e:	697b      	ldr	r3, [r7, #20]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d01e      	beq.n	8006492 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006458:	697a      	ldr	r2, [r7, #20]
 800645a:	429a      	cmp	r2, r3
 800645c:	d019      	beq.n	8006492 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800645e:	4b24      	ldr	r3, [pc, #144]	; (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006460:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006464:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006468:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800646a:	4b21      	ldr	r3, [pc, #132]	; (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800646c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006470:	4a1f      	ldr	r2, [pc, #124]	; (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006472:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006476:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800647a:	4b1d      	ldr	r3, [pc, #116]	; (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800647c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006480:	4a1b      	ldr	r2, [pc, #108]	; (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006482:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006486:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800648a:	4a19      	ldr	r2, [pc, #100]	; (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800648c:	697b      	ldr	r3, [r7, #20]
 800648e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006492:	697b      	ldr	r3, [r7, #20]
 8006494:	f003 0301 	and.w	r3, r3, #1
 8006498:	2b00      	cmp	r3, #0
 800649a:	d016      	beq.n	80064ca <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800649c:	f7fd fd4a 	bl	8003f34 <HAL_GetTick>
 80064a0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80064a2:	e00b      	b.n	80064bc <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80064a4:	f7fd fd46 	bl	8003f34 <HAL_GetTick>
 80064a8:	4602      	mov	r2, r0
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	1ad3      	subs	r3, r2, r3
 80064ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80064b2:	4293      	cmp	r3, r2
 80064b4:	d902      	bls.n	80064bc <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80064b6:	2303      	movs	r3, #3
 80064b8:	74fb      	strb	r3, [r7, #19]
            break;
 80064ba:	e006      	b.n	80064ca <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80064bc:	4b0c      	ldr	r3, [pc, #48]	; (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80064be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064c2:	f003 0302 	and.w	r3, r3, #2
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d0ec      	beq.n	80064a4 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80064ca:	7cfb      	ldrb	r3, [r7, #19]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d10b      	bne.n	80064e8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80064d0:	4b07      	ldr	r3, [pc, #28]	; (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80064d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064d6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064de:	4904      	ldr	r1, [pc, #16]	; (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80064e0:	4313      	orrs	r3, r2
 80064e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80064e6:	e009      	b.n	80064fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80064e8:	7cfb      	ldrb	r3, [r7, #19]
 80064ea:	74bb      	strb	r3, [r7, #18]
 80064ec:	e006      	b.n	80064fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80064ee:	bf00      	nop
 80064f0:	40021000 	.word	0x40021000
 80064f4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064f8:	7cfb      	ldrb	r3, [r7, #19]
 80064fa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80064fc:	7c7b      	ldrb	r3, [r7, #17]
 80064fe:	2b01      	cmp	r3, #1
 8006500:	d105      	bne.n	800650e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006502:	4b8a      	ldr	r3, [pc, #552]	; (800672c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006504:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006506:	4a89      	ldr	r2, [pc, #548]	; (800672c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006508:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800650c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f003 0301 	and.w	r3, r3, #1
 8006516:	2b00      	cmp	r3, #0
 8006518:	d00a      	beq.n	8006530 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800651a:	4b84      	ldr	r3, [pc, #528]	; (800672c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800651c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006520:	f023 0203 	bic.w	r2, r3, #3
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	6a1b      	ldr	r3, [r3, #32]
 8006528:	4980      	ldr	r1, [pc, #512]	; (800672c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800652a:	4313      	orrs	r3, r2
 800652c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f003 0302 	and.w	r3, r3, #2
 8006538:	2b00      	cmp	r3, #0
 800653a:	d00a      	beq.n	8006552 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800653c:	4b7b      	ldr	r3, [pc, #492]	; (800672c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800653e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006542:	f023 020c 	bic.w	r2, r3, #12
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800654a:	4978      	ldr	r1, [pc, #480]	; (800672c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800654c:	4313      	orrs	r3, r2
 800654e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f003 0320 	and.w	r3, r3, #32
 800655a:	2b00      	cmp	r3, #0
 800655c:	d00a      	beq.n	8006574 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800655e:	4b73      	ldr	r3, [pc, #460]	; (800672c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006560:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006564:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800656c:	496f      	ldr	r1, [pc, #444]	; (800672c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800656e:	4313      	orrs	r3, r2
 8006570:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800657c:	2b00      	cmp	r3, #0
 800657e:	d00a      	beq.n	8006596 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006580:	4b6a      	ldr	r3, [pc, #424]	; (800672c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006582:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006586:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800658e:	4967      	ldr	r1, [pc, #412]	; (800672c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006590:	4313      	orrs	r3, r2
 8006592:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d00a      	beq.n	80065b8 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80065a2:	4b62      	ldr	r3, [pc, #392]	; (800672c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80065a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065a8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065b0:	495e      	ldr	r1, [pc, #376]	; (800672c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80065b2:	4313      	orrs	r3, r2
 80065b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d00a      	beq.n	80065da <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80065c4:	4b59      	ldr	r3, [pc, #356]	; (800672c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80065c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065ca:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065d2:	4956      	ldr	r1, [pc, #344]	; (800672c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80065d4:	4313      	orrs	r3, r2
 80065d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d00a      	beq.n	80065fc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80065e6:	4b51      	ldr	r3, [pc, #324]	; (800672c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80065e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065ec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065f4:	494d      	ldr	r1, [pc, #308]	; (800672c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80065f6:	4313      	orrs	r3, r2
 80065f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006604:	2b00      	cmp	r3, #0
 8006606:	d028      	beq.n	800665a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006608:	4b48      	ldr	r3, [pc, #288]	; (800672c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800660a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800660e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006616:	4945      	ldr	r1, [pc, #276]	; (800672c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006618:	4313      	orrs	r3, r2
 800661a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006622:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006626:	d106      	bne.n	8006636 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006628:	4b40      	ldr	r3, [pc, #256]	; (800672c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800662a:	68db      	ldr	r3, [r3, #12]
 800662c:	4a3f      	ldr	r2, [pc, #252]	; (800672c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800662e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006632:	60d3      	str	r3, [r2, #12]
 8006634:	e011      	b.n	800665a <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800663a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800663e:	d10c      	bne.n	800665a <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	3304      	adds	r3, #4
 8006644:	2101      	movs	r1, #1
 8006646:	4618      	mov	r0, r3
 8006648:	f000 f882 	bl	8006750 <RCCEx_PLLSAI1_Config>
 800664c:	4603      	mov	r3, r0
 800664e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006650:	7cfb      	ldrb	r3, [r7, #19]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d001      	beq.n	800665a <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8006656:	7cfb      	ldrb	r3, [r7, #19]
 8006658:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006662:	2b00      	cmp	r3, #0
 8006664:	d028      	beq.n	80066b8 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006666:	4b31      	ldr	r3, [pc, #196]	; (800672c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006668:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800666c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006674:	492d      	ldr	r1, [pc, #180]	; (800672c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006676:	4313      	orrs	r3, r2
 8006678:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006680:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006684:	d106      	bne.n	8006694 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006686:	4b29      	ldr	r3, [pc, #164]	; (800672c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006688:	68db      	ldr	r3, [r3, #12]
 800668a:	4a28      	ldr	r2, [pc, #160]	; (800672c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800668c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006690:	60d3      	str	r3, [r2, #12]
 8006692:	e011      	b.n	80066b8 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006698:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800669c:	d10c      	bne.n	80066b8 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	3304      	adds	r3, #4
 80066a2:	2101      	movs	r1, #1
 80066a4:	4618      	mov	r0, r3
 80066a6:	f000 f853 	bl	8006750 <RCCEx_PLLSAI1_Config>
 80066aa:	4603      	mov	r3, r0
 80066ac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80066ae:	7cfb      	ldrb	r3, [r7, #19]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d001      	beq.n	80066b8 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 80066b4:	7cfb      	ldrb	r3, [r7, #19]
 80066b6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d01c      	beq.n	80066fe <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80066c4:	4b19      	ldr	r3, [pc, #100]	; (800672c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80066c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066ca:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066d2:	4916      	ldr	r1, [pc, #88]	; (800672c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80066d4:	4313      	orrs	r3, r2
 80066d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80066e2:	d10c      	bne.n	80066fe <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	3304      	adds	r3, #4
 80066e8:	2102      	movs	r1, #2
 80066ea:	4618      	mov	r0, r3
 80066ec:	f000 f830 	bl	8006750 <RCCEx_PLLSAI1_Config>
 80066f0:	4603      	mov	r3, r0
 80066f2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80066f4:	7cfb      	ldrb	r3, [r7, #19]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d001      	beq.n	80066fe <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 80066fa:	7cfb      	ldrb	r3, [r7, #19]
 80066fc:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006706:	2b00      	cmp	r3, #0
 8006708:	d00a      	beq.n	8006720 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800670a:	4b08      	ldr	r3, [pc, #32]	; (800672c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800670c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006710:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006718:	4904      	ldr	r1, [pc, #16]	; (800672c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800671a:	4313      	orrs	r3, r2
 800671c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006720:	7cbb      	ldrb	r3, [r7, #18]
}
 8006722:	4618      	mov	r0, r3
 8006724:	3718      	adds	r7, #24
 8006726:	46bd      	mov	sp, r7
 8006728:	bd80      	pop	{r7, pc}
 800672a:	bf00      	nop
 800672c:	40021000 	.word	0x40021000

08006730 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8006730:	b480      	push	{r7}
 8006732:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8006734:	4b05      	ldr	r3, [pc, #20]	; (800674c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	4a04      	ldr	r2, [pc, #16]	; (800674c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800673a:	f043 0304 	orr.w	r3, r3, #4
 800673e:	6013      	str	r3, [r2, #0]
}
 8006740:	bf00      	nop
 8006742:	46bd      	mov	sp, r7
 8006744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006748:	4770      	bx	lr
 800674a:	bf00      	nop
 800674c:	40021000 	.word	0x40021000

08006750 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b084      	sub	sp, #16
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
 8006758:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800675a:	2300      	movs	r3, #0
 800675c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800675e:	4b74      	ldr	r3, [pc, #464]	; (8006930 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006760:	68db      	ldr	r3, [r3, #12]
 8006762:	f003 0303 	and.w	r3, r3, #3
 8006766:	2b00      	cmp	r3, #0
 8006768:	d018      	beq.n	800679c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800676a:	4b71      	ldr	r3, [pc, #452]	; (8006930 <RCCEx_PLLSAI1_Config+0x1e0>)
 800676c:	68db      	ldr	r3, [r3, #12]
 800676e:	f003 0203 	and.w	r2, r3, #3
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	429a      	cmp	r2, r3
 8006778:	d10d      	bne.n	8006796 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
       ||
 800677e:	2b00      	cmp	r3, #0
 8006780:	d009      	beq.n	8006796 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8006782:	4b6b      	ldr	r3, [pc, #428]	; (8006930 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006784:	68db      	ldr	r3, [r3, #12]
 8006786:	091b      	lsrs	r3, r3, #4
 8006788:	f003 0307 	and.w	r3, r3, #7
 800678c:	1c5a      	adds	r2, r3, #1
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	685b      	ldr	r3, [r3, #4]
       ||
 8006792:	429a      	cmp	r2, r3
 8006794:	d047      	beq.n	8006826 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006796:	2301      	movs	r3, #1
 8006798:	73fb      	strb	r3, [r7, #15]
 800679a:	e044      	b.n	8006826 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	2b03      	cmp	r3, #3
 80067a2:	d018      	beq.n	80067d6 <RCCEx_PLLSAI1_Config+0x86>
 80067a4:	2b03      	cmp	r3, #3
 80067a6:	d825      	bhi.n	80067f4 <RCCEx_PLLSAI1_Config+0xa4>
 80067a8:	2b01      	cmp	r3, #1
 80067aa:	d002      	beq.n	80067b2 <RCCEx_PLLSAI1_Config+0x62>
 80067ac:	2b02      	cmp	r3, #2
 80067ae:	d009      	beq.n	80067c4 <RCCEx_PLLSAI1_Config+0x74>
 80067b0:	e020      	b.n	80067f4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80067b2:	4b5f      	ldr	r3, [pc, #380]	; (8006930 <RCCEx_PLLSAI1_Config+0x1e0>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f003 0302 	and.w	r3, r3, #2
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d11d      	bne.n	80067fa <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80067be:	2301      	movs	r3, #1
 80067c0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80067c2:	e01a      	b.n	80067fa <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80067c4:	4b5a      	ldr	r3, [pc, #360]	; (8006930 <RCCEx_PLLSAI1_Config+0x1e0>)
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d116      	bne.n	80067fe <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80067d0:	2301      	movs	r3, #1
 80067d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80067d4:	e013      	b.n	80067fe <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80067d6:	4b56      	ldr	r3, [pc, #344]	; (8006930 <RCCEx_PLLSAI1_Config+0x1e0>)
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d10f      	bne.n	8006802 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80067e2:	4b53      	ldr	r3, [pc, #332]	; (8006930 <RCCEx_PLLSAI1_Config+0x1e0>)
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d109      	bne.n	8006802 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80067ee:	2301      	movs	r3, #1
 80067f0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80067f2:	e006      	b.n	8006802 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80067f4:	2301      	movs	r3, #1
 80067f6:	73fb      	strb	r3, [r7, #15]
      break;
 80067f8:	e004      	b.n	8006804 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80067fa:	bf00      	nop
 80067fc:	e002      	b.n	8006804 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80067fe:	bf00      	nop
 8006800:	e000      	b.n	8006804 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006802:	bf00      	nop
    }

    if(status == HAL_OK)
 8006804:	7bfb      	ldrb	r3, [r7, #15]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d10d      	bne.n	8006826 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800680a:	4b49      	ldr	r3, [pc, #292]	; (8006930 <RCCEx_PLLSAI1_Config+0x1e0>)
 800680c:	68db      	ldr	r3, [r3, #12]
 800680e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6819      	ldr	r1, [r3, #0]
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	685b      	ldr	r3, [r3, #4]
 800681a:	3b01      	subs	r3, #1
 800681c:	011b      	lsls	r3, r3, #4
 800681e:	430b      	orrs	r3, r1
 8006820:	4943      	ldr	r1, [pc, #268]	; (8006930 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006822:	4313      	orrs	r3, r2
 8006824:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006826:	7bfb      	ldrb	r3, [r7, #15]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d17c      	bne.n	8006926 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800682c:	4b40      	ldr	r3, [pc, #256]	; (8006930 <RCCEx_PLLSAI1_Config+0x1e0>)
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	4a3f      	ldr	r2, [pc, #252]	; (8006930 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006832:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006836:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006838:	f7fd fb7c 	bl	8003f34 <HAL_GetTick>
 800683c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800683e:	e009      	b.n	8006854 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006840:	f7fd fb78 	bl	8003f34 <HAL_GetTick>
 8006844:	4602      	mov	r2, r0
 8006846:	68bb      	ldr	r3, [r7, #8]
 8006848:	1ad3      	subs	r3, r2, r3
 800684a:	2b02      	cmp	r3, #2
 800684c:	d902      	bls.n	8006854 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800684e:	2303      	movs	r3, #3
 8006850:	73fb      	strb	r3, [r7, #15]
        break;
 8006852:	e005      	b.n	8006860 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006854:	4b36      	ldr	r3, [pc, #216]	; (8006930 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800685c:	2b00      	cmp	r3, #0
 800685e:	d1ef      	bne.n	8006840 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006860:	7bfb      	ldrb	r3, [r7, #15]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d15f      	bne.n	8006926 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d110      	bne.n	800688e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800686c:	4b30      	ldr	r3, [pc, #192]	; (8006930 <RCCEx_PLLSAI1_Config+0x1e0>)
 800686e:	691b      	ldr	r3, [r3, #16]
 8006870:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8006874:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006878:	687a      	ldr	r2, [r7, #4]
 800687a:	6892      	ldr	r2, [r2, #8]
 800687c:	0211      	lsls	r1, r2, #8
 800687e:	687a      	ldr	r2, [r7, #4]
 8006880:	68d2      	ldr	r2, [r2, #12]
 8006882:	06d2      	lsls	r2, r2, #27
 8006884:	430a      	orrs	r2, r1
 8006886:	492a      	ldr	r1, [pc, #168]	; (8006930 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006888:	4313      	orrs	r3, r2
 800688a:	610b      	str	r3, [r1, #16]
 800688c:	e027      	b.n	80068de <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	2b01      	cmp	r3, #1
 8006892:	d112      	bne.n	80068ba <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006894:	4b26      	ldr	r3, [pc, #152]	; (8006930 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006896:	691b      	ldr	r3, [r3, #16]
 8006898:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800689c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80068a0:	687a      	ldr	r2, [r7, #4]
 80068a2:	6892      	ldr	r2, [r2, #8]
 80068a4:	0211      	lsls	r1, r2, #8
 80068a6:	687a      	ldr	r2, [r7, #4]
 80068a8:	6912      	ldr	r2, [r2, #16]
 80068aa:	0852      	lsrs	r2, r2, #1
 80068ac:	3a01      	subs	r2, #1
 80068ae:	0552      	lsls	r2, r2, #21
 80068b0:	430a      	orrs	r2, r1
 80068b2:	491f      	ldr	r1, [pc, #124]	; (8006930 <RCCEx_PLLSAI1_Config+0x1e0>)
 80068b4:	4313      	orrs	r3, r2
 80068b6:	610b      	str	r3, [r1, #16]
 80068b8:	e011      	b.n	80068de <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80068ba:	4b1d      	ldr	r3, [pc, #116]	; (8006930 <RCCEx_PLLSAI1_Config+0x1e0>)
 80068bc:	691b      	ldr	r3, [r3, #16]
 80068be:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80068c2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80068c6:	687a      	ldr	r2, [r7, #4]
 80068c8:	6892      	ldr	r2, [r2, #8]
 80068ca:	0211      	lsls	r1, r2, #8
 80068cc:	687a      	ldr	r2, [r7, #4]
 80068ce:	6952      	ldr	r2, [r2, #20]
 80068d0:	0852      	lsrs	r2, r2, #1
 80068d2:	3a01      	subs	r2, #1
 80068d4:	0652      	lsls	r2, r2, #25
 80068d6:	430a      	orrs	r2, r1
 80068d8:	4915      	ldr	r1, [pc, #84]	; (8006930 <RCCEx_PLLSAI1_Config+0x1e0>)
 80068da:	4313      	orrs	r3, r2
 80068dc:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80068de:	4b14      	ldr	r3, [pc, #80]	; (8006930 <RCCEx_PLLSAI1_Config+0x1e0>)
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	4a13      	ldr	r2, [pc, #76]	; (8006930 <RCCEx_PLLSAI1_Config+0x1e0>)
 80068e4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80068e8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068ea:	f7fd fb23 	bl	8003f34 <HAL_GetTick>
 80068ee:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80068f0:	e009      	b.n	8006906 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80068f2:	f7fd fb1f 	bl	8003f34 <HAL_GetTick>
 80068f6:	4602      	mov	r2, r0
 80068f8:	68bb      	ldr	r3, [r7, #8]
 80068fa:	1ad3      	subs	r3, r2, r3
 80068fc:	2b02      	cmp	r3, #2
 80068fe:	d902      	bls.n	8006906 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8006900:	2303      	movs	r3, #3
 8006902:	73fb      	strb	r3, [r7, #15]
          break;
 8006904:	e005      	b.n	8006912 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006906:	4b0a      	ldr	r3, [pc, #40]	; (8006930 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800690e:	2b00      	cmp	r3, #0
 8006910:	d0ef      	beq.n	80068f2 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8006912:	7bfb      	ldrb	r3, [r7, #15]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d106      	bne.n	8006926 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006918:	4b05      	ldr	r3, [pc, #20]	; (8006930 <RCCEx_PLLSAI1_Config+0x1e0>)
 800691a:	691a      	ldr	r2, [r3, #16]
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	699b      	ldr	r3, [r3, #24]
 8006920:	4903      	ldr	r1, [pc, #12]	; (8006930 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006922:	4313      	orrs	r3, r2
 8006924:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006926:	7bfb      	ldrb	r3, [r7, #15]
}
 8006928:	4618      	mov	r0, r3
 800692a:	3710      	adds	r7, #16
 800692c:	46bd      	mov	sp, r7
 800692e:	bd80      	pop	{r7, pc}
 8006930:	40021000 	.word	0x40021000

08006934 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b084      	sub	sp, #16
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d101      	bne.n	8006946 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006942:	2301      	movs	r3, #1
 8006944:	e095      	b.n	8006a72 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800694a:	2b00      	cmp	r3, #0
 800694c:	d108      	bne.n	8006960 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	685b      	ldr	r3, [r3, #4]
 8006952:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006956:	d009      	beq.n	800696c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2200      	movs	r2, #0
 800695c:	61da      	str	r2, [r3, #28]
 800695e:	e005      	b.n	800696c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2200      	movs	r2, #0
 8006964:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2200      	movs	r2, #0
 800696a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2200      	movs	r2, #0
 8006970:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006978:	b2db      	uxtb	r3, r3
 800697a:	2b00      	cmp	r3, #0
 800697c:	d106      	bne.n	800698c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2200      	movs	r2, #0
 8006982:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006986:	6878      	ldr	r0, [r7, #4]
 8006988:	f7fd f8fe 	bl	8003b88 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2202      	movs	r2, #2
 8006990:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	681a      	ldr	r2, [r3, #0]
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80069a2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	68db      	ldr	r3, [r3, #12]
 80069a8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80069ac:	d902      	bls.n	80069b4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80069ae:	2300      	movs	r3, #0
 80069b0:	60fb      	str	r3, [r7, #12]
 80069b2:	e002      	b.n	80069ba <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80069b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80069b8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	68db      	ldr	r3, [r3, #12]
 80069be:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80069c2:	d007      	beq.n	80069d4 <HAL_SPI_Init+0xa0>
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	68db      	ldr	r3, [r3, #12]
 80069c8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80069cc:	d002      	beq.n	80069d4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	2200      	movs	r2, #0
 80069d2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	685b      	ldr	r3, [r3, #4]
 80069d8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	689b      	ldr	r3, [r3, #8]
 80069e0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80069e4:	431a      	orrs	r2, r3
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	691b      	ldr	r3, [r3, #16]
 80069ea:	f003 0302 	and.w	r3, r3, #2
 80069ee:	431a      	orrs	r2, r3
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	695b      	ldr	r3, [r3, #20]
 80069f4:	f003 0301 	and.w	r3, r3, #1
 80069f8:	431a      	orrs	r2, r3
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	699b      	ldr	r3, [r3, #24]
 80069fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006a02:	431a      	orrs	r2, r3
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	69db      	ldr	r3, [r3, #28]
 8006a08:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006a0c:	431a      	orrs	r2, r3
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6a1b      	ldr	r3, [r3, #32]
 8006a12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a16:	ea42 0103 	orr.w	r1, r2, r3
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a1e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	430a      	orrs	r2, r1
 8006a28:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	699b      	ldr	r3, [r3, #24]
 8006a2e:	0c1b      	lsrs	r3, r3, #16
 8006a30:	f003 0204 	and.w	r2, r3, #4
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a38:	f003 0310 	and.w	r3, r3, #16
 8006a3c:	431a      	orrs	r2, r3
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a42:	f003 0308 	and.w	r3, r3, #8
 8006a46:	431a      	orrs	r2, r3
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	68db      	ldr	r3, [r3, #12]
 8006a4c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006a50:	ea42 0103 	orr.w	r1, r2, r3
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	430a      	orrs	r2, r1
 8006a60:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	2200      	movs	r2, #0
 8006a66:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2201      	movs	r2, #1
 8006a6c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006a70:	2300      	movs	r3, #0
}
 8006a72:	4618      	mov	r0, r3
 8006a74:	3710      	adds	r7, #16
 8006a76:	46bd      	mov	sp, r7
 8006a78:	bd80      	pop	{r7, pc}

08006a7a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a7a:	b580      	push	{r7, lr}
 8006a7c:	b088      	sub	sp, #32
 8006a7e:	af00      	add	r7, sp, #0
 8006a80:	60f8      	str	r0, [r7, #12]
 8006a82:	60b9      	str	r1, [r7, #8]
 8006a84:	603b      	str	r3, [r7, #0]
 8006a86:	4613      	mov	r3, r2
 8006a88:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006a94:	2b01      	cmp	r3, #1
 8006a96:	d101      	bne.n	8006a9c <HAL_SPI_Transmit+0x22>
 8006a98:	2302      	movs	r3, #2
 8006a9a:	e158      	b.n	8006d4e <HAL_SPI_Transmit+0x2d4>
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	2201      	movs	r2, #1
 8006aa0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006aa4:	f7fd fa46 	bl	8003f34 <HAL_GetTick>
 8006aa8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006aaa:	88fb      	ldrh	r3, [r7, #6]
 8006aac:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006ab4:	b2db      	uxtb	r3, r3
 8006ab6:	2b01      	cmp	r3, #1
 8006ab8:	d002      	beq.n	8006ac0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006aba:	2302      	movs	r3, #2
 8006abc:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006abe:	e13d      	b.n	8006d3c <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8006ac0:	68bb      	ldr	r3, [r7, #8]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d002      	beq.n	8006acc <HAL_SPI_Transmit+0x52>
 8006ac6:	88fb      	ldrh	r3, [r7, #6]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d102      	bne.n	8006ad2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006acc:	2301      	movs	r3, #1
 8006ace:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006ad0:	e134      	b.n	8006d3c <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	2203      	movs	r2, #3
 8006ad6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	2200      	movs	r2, #0
 8006ade:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	68ba      	ldr	r2, [r7, #8]
 8006ae4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	88fa      	ldrh	r2, [r7, #6]
 8006aea:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	88fa      	ldrh	r2, [r7, #6]
 8006af0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	2200      	movs	r2, #0
 8006af6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	2200      	movs	r2, #0
 8006afc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	2200      	movs	r2, #0
 8006b04:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	2200      	movs	r2, #0
 8006b12:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	689b      	ldr	r3, [r3, #8]
 8006b18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b1c:	d10f      	bne.n	8006b3e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	681a      	ldr	r2, [r3, #0]
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b2c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	681a      	ldr	r2, [r3, #0]
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006b3c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b48:	2b40      	cmp	r3, #64	; 0x40
 8006b4a:	d007      	beq.n	8006b5c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	681a      	ldr	r2, [r3, #0]
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006b5a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	68db      	ldr	r3, [r3, #12]
 8006b60:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006b64:	d94b      	bls.n	8006bfe <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	685b      	ldr	r3, [r3, #4]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d002      	beq.n	8006b74 <HAL_SPI_Transmit+0xfa>
 8006b6e:	8afb      	ldrh	r3, [r7, #22]
 8006b70:	2b01      	cmp	r3, #1
 8006b72:	d13e      	bne.n	8006bf2 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b78:	881a      	ldrh	r2, [r3, #0]
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b84:	1c9a      	adds	r2, r3, #2
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b8e:	b29b      	uxth	r3, r3
 8006b90:	3b01      	subs	r3, #1
 8006b92:	b29a      	uxth	r2, r3
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006b98:	e02b      	b.n	8006bf2 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	689b      	ldr	r3, [r3, #8]
 8006ba0:	f003 0302 	and.w	r3, r3, #2
 8006ba4:	2b02      	cmp	r3, #2
 8006ba6:	d112      	bne.n	8006bce <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bac:	881a      	ldrh	r2, [r3, #0]
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bb8:	1c9a      	adds	r2, r3, #2
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006bc2:	b29b      	uxth	r3, r3
 8006bc4:	3b01      	subs	r3, #1
 8006bc6:	b29a      	uxth	r2, r3
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006bcc:	e011      	b.n	8006bf2 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006bce:	f7fd f9b1 	bl	8003f34 <HAL_GetTick>
 8006bd2:	4602      	mov	r2, r0
 8006bd4:	69bb      	ldr	r3, [r7, #24]
 8006bd6:	1ad3      	subs	r3, r2, r3
 8006bd8:	683a      	ldr	r2, [r7, #0]
 8006bda:	429a      	cmp	r2, r3
 8006bdc:	d803      	bhi.n	8006be6 <HAL_SPI_Transmit+0x16c>
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006be4:	d102      	bne.n	8006bec <HAL_SPI_Transmit+0x172>
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d102      	bne.n	8006bf2 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8006bec:	2303      	movs	r3, #3
 8006bee:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006bf0:	e0a4      	b.n	8006d3c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006bf6:	b29b      	uxth	r3, r3
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d1ce      	bne.n	8006b9a <HAL_SPI_Transmit+0x120>
 8006bfc:	e07c      	b.n	8006cf8 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	685b      	ldr	r3, [r3, #4]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d002      	beq.n	8006c0c <HAL_SPI_Transmit+0x192>
 8006c06:	8afb      	ldrh	r3, [r7, #22]
 8006c08:	2b01      	cmp	r3, #1
 8006c0a:	d170      	bne.n	8006cee <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c10:	b29b      	uxth	r3, r3
 8006c12:	2b01      	cmp	r3, #1
 8006c14:	d912      	bls.n	8006c3c <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c1a:	881a      	ldrh	r2, [r3, #0]
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c26:	1c9a      	adds	r2, r3, #2
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c30:	b29b      	uxth	r3, r3
 8006c32:	3b02      	subs	r3, #2
 8006c34:	b29a      	uxth	r2, r3
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006c3a:	e058      	b.n	8006cee <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	330c      	adds	r3, #12
 8006c46:	7812      	ldrb	r2, [r2, #0]
 8006c48:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c4e:	1c5a      	adds	r2, r3, #1
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c58:	b29b      	uxth	r3, r3
 8006c5a:	3b01      	subs	r3, #1
 8006c5c:	b29a      	uxth	r2, r3
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8006c62:	e044      	b.n	8006cee <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	689b      	ldr	r3, [r3, #8]
 8006c6a:	f003 0302 	and.w	r3, r3, #2
 8006c6e:	2b02      	cmp	r3, #2
 8006c70:	d12b      	bne.n	8006cca <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c76:	b29b      	uxth	r3, r3
 8006c78:	2b01      	cmp	r3, #1
 8006c7a:	d912      	bls.n	8006ca2 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c80:	881a      	ldrh	r2, [r3, #0]
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c8c:	1c9a      	adds	r2, r3, #2
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c96:	b29b      	uxth	r3, r3
 8006c98:	3b02      	subs	r3, #2
 8006c9a:	b29a      	uxth	r2, r3
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006ca0:	e025      	b.n	8006cee <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	330c      	adds	r3, #12
 8006cac:	7812      	ldrb	r2, [r2, #0]
 8006cae:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cb4:	1c5a      	adds	r2, r3, #1
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006cbe:	b29b      	uxth	r3, r3
 8006cc0:	3b01      	subs	r3, #1
 8006cc2:	b29a      	uxth	r2, r3
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006cc8:	e011      	b.n	8006cee <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006cca:	f7fd f933 	bl	8003f34 <HAL_GetTick>
 8006cce:	4602      	mov	r2, r0
 8006cd0:	69bb      	ldr	r3, [r7, #24]
 8006cd2:	1ad3      	subs	r3, r2, r3
 8006cd4:	683a      	ldr	r2, [r7, #0]
 8006cd6:	429a      	cmp	r2, r3
 8006cd8:	d803      	bhi.n	8006ce2 <HAL_SPI_Transmit+0x268>
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ce0:	d102      	bne.n	8006ce8 <HAL_SPI_Transmit+0x26e>
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d102      	bne.n	8006cee <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8006ce8:	2303      	movs	r3, #3
 8006cea:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006cec:	e026      	b.n	8006d3c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006cf2:	b29b      	uxth	r3, r3
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d1b5      	bne.n	8006c64 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006cf8:	69ba      	ldr	r2, [r7, #24]
 8006cfa:	6839      	ldr	r1, [r7, #0]
 8006cfc:	68f8      	ldr	r0, [r7, #12]
 8006cfe:	f000 f949 	bl	8006f94 <SPI_EndRxTxTransaction>
 8006d02:	4603      	mov	r3, r0
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d002      	beq.n	8006d0e <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	2220      	movs	r2, #32
 8006d0c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	689b      	ldr	r3, [r3, #8]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d10a      	bne.n	8006d2c <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006d16:	2300      	movs	r3, #0
 8006d18:	613b      	str	r3, [r7, #16]
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	68db      	ldr	r3, [r3, #12]
 8006d20:	613b      	str	r3, [r7, #16]
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	689b      	ldr	r3, [r3, #8]
 8006d28:	613b      	str	r3, [r7, #16]
 8006d2a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d002      	beq.n	8006d3a <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8006d34:	2301      	movs	r3, #1
 8006d36:	77fb      	strb	r3, [r7, #31]
 8006d38:	e000      	b.n	8006d3c <HAL_SPI_Transmit+0x2c2>
  }

error:
 8006d3a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	2201      	movs	r2, #1
 8006d40:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	2200      	movs	r2, #0
 8006d48:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006d4c:	7ffb      	ldrb	r3, [r7, #31]
}
 8006d4e:	4618      	mov	r0, r3
 8006d50:	3720      	adds	r7, #32
 8006d52:	46bd      	mov	sp, r7
 8006d54:	bd80      	pop	{r7, pc}
	...

08006d58 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b088      	sub	sp, #32
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	60f8      	str	r0, [r7, #12]
 8006d60:	60b9      	str	r1, [r7, #8]
 8006d62:	603b      	str	r3, [r7, #0]
 8006d64:	4613      	mov	r3, r2
 8006d66:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006d68:	f7fd f8e4 	bl	8003f34 <HAL_GetTick>
 8006d6c:	4602      	mov	r2, r0
 8006d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d70:	1a9b      	subs	r3, r3, r2
 8006d72:	683a      	ldr	r2, [r7, #0]
 8006d74:	4413      	add	r3, r2
 8006d76:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006d78:	f7fd f8dc 	bl	8003f34 <HAL_GetTick>
 8006d7c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006d7e:	4b39      	ldr	r3, [pc, #228]	; (8006e64 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	015b      	lsls	r3, r3, #5
 8006d84:	0d1b      	lsrs	r3, r3, #20
 8006d86:	69fa      	ldr	r2, [r7, #28]
 8006d88:	fb02 f303 	mul.w	r3, r2, r3
 8006d8c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006d8e:	e054      	b.n	8006e3a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d96:	d050      	beq.n	8006e3a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006d98:	f7fd f8cc 	bl	8003f34 <HAL_GetTick>
 8006d9c:	4602      	mov	r2, r0
 8006d9e:	69bb      	ldr	r3, [r7, #24]
 8006da0:	1ad3      	subs	r3, r2, r3
 8006da2:	69fa      	ldr	r2, [r7, #28]
 8006da4:	429a      	cmp	r2, r3
 8006da6:	d902      	bls.n	8006dae <SPI_WaitFlagStateUntilTimeout+0x56>
 8006da8:	69fb      	ldr	r3, [r7, #28]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d13d      	bne.n	8006e2a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	685a      	ldr	r2, [r3, #4]
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006dbc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	685b      	ldr	r3, [r3, #4]
 8006dc2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006dc6:	d111      	bne.n	8006dec <SPI_WaitFlagStateUntilTimeout+0x94>
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	689b      	ldr	r3, [r3, #8]
 8006dcc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006dd0:	d004      	beq.n	8006ddc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	689b      	ldr	r3, [r3, #8]
 8006dd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006dda:	d107      	bne.n	8006dec <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	681a      	ldr	r2, [r3, #0]
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006dea:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006df0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006df4:	d10f      	bne.n	8006e16 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	681a      	ldr	r2, [r3, #0]
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006e04:	601a      	str	r2, [r3, #0]
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	681a      	ldr	r2, [r3, #0]
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006e14:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	2201      	movs	r2, #1
 8006e1a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	2200      	movs	r2, #0
 8006e22:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006e26:	2303      	movs	r3, #3
 8006e28:	e017      	b.n	8006e5a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006e2a:	697b      	ldr	r3, [r7, #20]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d101      	bne.n	8006e34 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006e30:	2300      	movs	r3, #0
 8006e32:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006e34:	697b      	ldr	r3, [r7, #20]
 8006e36:	3b01      	subs	r3, #1
 8006e38:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	689a      	ldr	r2, [r3, #8]
 8006e40:	68bb      	ldr	r3, [r7, #8]
 8006e42:	4013      	ands	r3, r2
 8006e44:	68ba      	ldr	r2, [r7, #8]
 8006e46:	429a      	cmp	r2, r3
 8006e48:	bf0c      	ite	eq
 8006e4a:	2301      	moveq	r3, #1
 8006e4c:	2300      	movne	r3, #0
 8006e4e:	b2db      	uxtb	r3, r3
 8006e50:	461a      	mov	r2, r3
 8006e52:	79fb      	ldrb	r3, [r7, #7]
 8006e54:	429a      	cmp	r2, r3
 8006e56:	d19b      	bne.n	8006d90 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006e58:	2300      	movs	r3, #0
}
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	3720      	adds	r7, #32
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	bd80      	pop	{r7, pc}
 8006e62:	bf00      	nop
 8006e64:	2000000c 	.word	0x2000000c

08006e68 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b08a      	sub	sp, #40	; 0x28
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	60f8      	str	r0, [r7, #12]
 8006e70:	60b9      	str	r1, [r7, #8]
 8006e72:	607a      	str	r2, [r7, #4]
 8006e74:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006e76:	2300      	movs	r3, #0
 8006e78:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006e7a:	f7fd f85b 	bl	8003f34 <HAL_GetTick>
 8006e7e:	4602      	mov	r2, r0
 8006e80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e82:	1a9b      	subs	r3, r3, r2
 8006e84:	683a      	ldr	r2, [r7, #0]
 8006e86:	4413      	add	r3, r2
 8006e88:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8006e8a:	f7fd f853 	bl	8003f34 <HAL_GetTick>
 8006e8e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	330c      	adds	r3, #12
 8006e96:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006e98:	4b3d      	ldr	r3, [pc, #244]	; (8006f90 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8006e9a:	681a      	ldr	r2, [r3, #0]
 8006e9c:	4613      	mov	r3, r2
 8006e9e:	009b      	lsls	r3, r3, #2
 8006ea0:	4413      	add	r3, r2
 8006ea2:	00da      	lsls	r2, r3, #3
 8006ea4:	1ad3      	subs	r3, r2, r3
 8006ea6:	0d1b      	lsrs	r3, r3, #20
 8006ea8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006eaa:	fb02 f303 	mul.w	r3, r2, r3
 8006eae:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006eb0:	e060      	b.n	8006f74 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006eb2:	68bb      	ldr	r3, [r7, #8]
 8006eb4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006eb8:	d107      	bne.n	8006eca <SPI_WaitFifoStateUntilTimeout+0x62>
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d104      	bne.n	8006eca <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006ec0:	69fb      	ldr	r3, [r7, #28]
 8006ec2:	781b      	ldrb	r3, [r3, #0]
 8006ec4:	b2db      	uxtb	r3, r3
 8006ec6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006ec8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ed0:	d050      	beq.n	8006f74 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006ed2:	f7fd f82f 	bl	8003f34 <HAL_GetTick>
 8006ed6:	4602      	mov	r2, r0
 8006ed8:	6a3b      	ldr	r3, [r7, #32]
 8006eda:	1ad3      	subs	r3, r2, r3
 8006edc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ede:	429a      	cmp	r2, r3
 8006ee0:	d902      	bls.n	8006ee8 <SPI_WaitFifoStateUntilTimeout+0x80>
 8006ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d13d      	bne.n	8006f64 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	685a      	ldr	r2, [r3, #4]
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006ef6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	685b      	ldr	r3, [r3, #4]
 8006efc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006f00:	d111      	bne.n	8006f26 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	689b      	ldr	r3, [r3, #8]
 8006f06:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f0a:	d004      	beq.n	8006f16 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	689b      	ldr	r3, [r3, #8]
 8006f10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f14:	d107      	bne.n	8006f26 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	681a      	ldr	r2, [r3, #0]
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f24:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f2e:	d10f      	bne.n	8006f50 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	681a      	ldr	r2, [r3, #0]
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006f3e:	601a      	str	r2, [r3, #0]
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	681a      	ldr	r2, [r3, #0]
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006f4e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	2201      	movs	r2, #1
 8006f54:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006f60:	2303      	movs	r3, #3
 8006f62:	e010      	b.n	8006f86 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006f64:	69bb      	ldr	r3, [r7, #24]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d101      	bne.n	8006f6e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8006f6e:	69bb      	ldr	r3, [r7, #24]
 8006f70:	3b01      	subs	r3, #1
 8006f72:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	689a      	ldr	r2, [r3, #8]
 8006f7a:	68bb      	ldr	r3, [r7, #8]
 8006f7c:	4013      	ands	r3, r2
 8006f7e:	687a      	ldr	r2, [r7, #4]
 8006f80:	429a      	cmp	r2, r3
 8006f82:	d196      	bne.n	8006eb2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006f84:	2300      	movs	r3, #0
}
 8006f86:	4618      	mov	r0, r3
 8006f88:	3728      	adds	r7, #40	; 0x28
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	bd80      	pop	{r7, pc}
 8006f8e:	bf00      	nop
 8006f90:	2000000c 	.word	0x2000000c

08006f94 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b086      	sub	sp, #24
 8006f98:	af02      	add	r7, sp, #8
 8006f9a:	60f8      	str	r0, [r7, #12]
 8006f9c:	60b9      	str	r1, [r7, #8]
 8006f9e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	9300      	str	r3, [sp, #0]
 8006fa4:	68bb      	ldr	r3, [r7, #8]
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8006fac:	68f8      	ldr	r0, [r7, #12]
 8006fae:	f7ff ff5b 	bl	8006e68 <SPI_WaitFifoStateUntilTimeout>
 8006fb2:	4603      	mov	r3, r0
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d007      	beq.n	8006fc8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006fbc:	f043 0220 	orr.w	r2, r3, #32
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006fc4:	2303      	movs	r3, #3
 8006fc6:	e027      	b.n	8007018 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	9300      	str	r3, [sp, #0]
 8006fcc:	68bb      	ldr	r3, [r7, #8]
 8006fce:	2200      	movs	r2, #0
 8006fd0:	2180      	movs	r1, #128	; 0x80
 8006fd2:	68f8      	ldr	r0, [r7, #12]
 8006fd4:	f7ff fec0 	bl	8006d58 <SPI_WaitFlagStateUntilTimeout>
 8006fd8:	4603      	mov	r3, r0
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d007      	beq.n	8006fee <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006fe2:	f043 0220 	orr.w	r2, r3, #32
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006fea:	2303      	movs	r3, #3
 8006fec:	e014      	b.n	8007018 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	9300      	str	r3, [sp, #0]
 8006ff2:	68bb      	ldr	r3, [r7, #8]
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006ffa:	68f8      	ldr	r0, [r7, #12]
 8006ffc:	f7ff ff34 	bl	8006e68 <SPI_WaitFifoStateUntilTimeout>
 8007000:	4603      	mov	r3, r0
 8007002:	2b00      	cmp	r3, #0
 8007004:	d007      	beq.n	8007016 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800700a:	f043 0220 	orr.w	r2, r3, #32
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007012:	2303      	movs	r3, #3
 8007014:	e000      	b.n	8007018 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8007016:	2300      	movs	r3, #0
}
 8007018:	4618      	mov	r0, r3
 800701a:	3710      	adds	r7, #16
 800701c:	46bd      	mov	sp, r7
 800701e:	bd80      	pop	{r7, pc}

08007020 <__errno>:
 8007020:	4b01      	ldr	r3, [pc, #4]	; (8007028 <__errno+0x8>)
 8007022:	6818      	ldr	r0, [r3, #0]
 8007024:	4770      	bx	lr
 8007026:	bf00      	nop
 8007028:	20000018 	.word	0x20000018

0800702c <__libc_init_array>:
 800702c:	b570      	push	{r4, r5, r6, lr}
 800702e:	4d0d      	ldr	r5, [pc, #52]	; (8007064 <__libc_init_array+0x38>)
 8007030:	4c0d      	ldr	r4, [pc, #52]	; (8007068 <__libc_init_array+0x3c>)
 8007032:	1b64      	subs	r4, r4, r5
 8007034:	10a4      	asrs	r4, r4, #2
 8007036:	2600      	movs	r6, #0
 8007038:	42a6      	cmp	r6, r4
 800703a:	d109      	bne.n	8007050 <__libc_init_array+0x24>
 800703c:	4d0b      	ldr	r5, [pc, #44]	; (800706c <__libc_init_array+0x40>)
 800703e:	4c0c      	ldr	r4, [pc, #48]	; (8007070 <__libc_init_array+0x44>)
 8007040:	f001 ffa0 	bl	8008f84 <_init>
 8007044:	1b64      	subs	r4, r4, r5
 8007046:	10a4      	asrs	r4, r4, #2
 8007048:	2600      	movs	r6, #0
 800704a:	42a6      	cmp	r6, r4
 800704c:	d105      	bne.n	800705a <__libc_init_array+0x2e>
 800704e:	bd70      	pop	{r4, r5, r6, pc}
 8007050:	f855 3b04 	ldr.w	r3, [r5], #4
 8007054:	4798      	blx	r3
 8007056:	3601      	adds	r6, #1
 8007058:	e7ee      	b.n	8007038 <__libc_init_array+0xc>
 800705a:	f855 3b04 	ldr.w	r3, [r5], #4
 800705e:	4798      	blx	r3
 8007060:	3601      	adds	r6, #1
 8007062:	e7f2      	b.n	800704a <__libc_init_array+0x1e>
 8007064:	080098d0 	.word	0x080098d0
 8007068:	080098d0 	.word	0x080098d0
 800706c:	080098d0 	.word	0x080098d0
 8007070:	080098d4 	.word	0x080098d4

08007074 <memset>:
 8007074:	4402      	add	r2, r0
 8007076:	4603      	mov	r3, r0
 8007078:	4293      	cmp	r3, r2
 800707a:	d100      	bne.n	800707e <memset+0xa>
 800707c:	4770      	bx	lr
 800707e:	f803 1b01 	strb.w	r1, [r3], #1
 8007082:	e7f9      	b.n	8007078 <memset+0x4>

08007084 <rand>:
 8007084:	4b16      	ldr	r3, [pc, #88]	; (80070e0 <rand+0x5c>)
 8007086:	b510      	push	{r4, lr}
 8007088:	681c      	ldr	r4, [r3, #0]
 800708a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800708c:	b9b3      	cbnz	r3, 80070bc <rand+0x38>
 800708e:	2018      	movs	r0, #24
 8007090:	f000 f866 	bl	8007160 <malloc>
 8007094:	63a0      	str	r0, [r4, #56]	; 0x38
 8007096:	b928      	cbnz	r0, 80070a4 <rand+0x20>
 8007098:	4602      	mov	r2, r0
 800709a:	4b12      	ldr	r3, [pc, #72]	; (80070e4 <rand+0x60>)
 800709c:	4812      	ldr	r0, [pc, #72]	; (80070e8 <rand+0x64>)
 800709e:	214e      	movs	r1, #78	; 0x4e
 80070a0:	f000 f82e 	bl	8007100 <__assert_func>
 80070a4:	4a11      	ldr	r2, [pc, #68]	; (80070ec <rand+0x68>)
 80070a6:	4b12      	ldr	r3, [pc, #72]	; (80070f0 <rand+0x6c>)
 80070a8:	e9c0 2300 	strd	r2, r3, [r0]
 80070ac:	4b11      	ldr	r3, [pc, #68]	; (80070f4 <rand+0x70>)
 80070ae:	6083      	str	r3, [r0, #8]
 80070b0:	230b      	movs	r3, #11
 80070b2:	8183      	strh	r3, [r0, #12]
 80070b4:	2201      	movs	r2, #1
 80070b6:	2300      	movs	r3, #0
 80070b8:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80070bc:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 80070be:	4a0e      	ldr	r2, [pc, #56]	; (80070f8 <rand+0x74>)
 80070c0:	6920      	ldr	r0, [r4, #16]
 80070c2:	6963      	ldr	r3, [r4, #20]
 80070c4:	490d      	ldr	r1, [pc, #52]	; (80070fc <rand+0x78>)
 80070c6:	4342      	muls	r2, r0
 80070c8:	fb01 2203 	mla	r2, r1, r3, r2
 80070cc:	fba0 0101 	umull	r0, r1, r0, r1
 80070d0:	1c43      	adds	r3, r0, #1
 80070d2:	eb42 0001 	adc.w	r0, r2, r1
 80070d6:	e9c4 3004 	strd	r3, r0, [r4, #16]
 80070da:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80070de:	bd10      	pop	{r4, pc}
 80070e0:	20000018 	.word	0x20000018
 80070e4:	0800975c 	.word	0x0800975c
 80070e8:	08009773 	.word	0x08009773
 80070ec:	abcd330e 	.word	0xabcd330e
 80070f0:	e66d1234 	.word	0xe66d1234
 80070f4:	0005deec 	.word	0x0005deec
 80070f8:	5851f42d 	.word	0x5851f42d
 80070fc:	4c957f2d 	.word	0x4c957f2d

08007100 <__assert_func>:
 8007100:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007102:	4614      	mov	r4, r2
 8007104:	461a      	mov	r2, r3
 8007106:	4b09      	ldr	r3, [pc, #36]	; (800712c <__assert_func+0x2c>)
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	4605      	mov	r5, r0
 800710c:	68d8      	ldr	r0, [r3, #12]
 800710e:	b14c      	cbz	r4, 8007124 <__assert_func+0x24>
 8007110:	4b07      	ldr	r3, [pc, #28]	; (8007130 <__assert_func+0x30>)
 8007112:	9100      	str	r1, [sp, #0]
 8007114:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007118:	4906      	ldr	r1, [pc, #24]	; (8007134 <__assert_func+0x34>)
 800711a:	462b      	mov	r3, r5
 800711c:	f000 f80e 	bl	800713c <fiprintf>
 8007120:	f000 fcc4 	bl	8007aac <abort>
 8007124:	4b04      	ldr	r3, [pc, #16]	; (8007138 <__assert_func+0x38>)
 8007126:	461c      	mov	r4, r3
 8007128:	e7f3      	b.n	8007112 <__assert_func+0x12>
 800712a:	bf00      	nop
 800712c:	20000018 	.word	0x20000018
 8007130:	080097ce 	.word	0x080097ce
 8007134:	080097db 	.word	0x080097db
 8007138:	08009809 	.word	0x08009809

0800713c <fiprintf>:
 800713c:	b40e      	push	{r1, r2, r3}
 800713e:	b503      	push	{r0, r1, lr}
 8007140:	4601      	mov	r1, r0
 8007142:	ab03      	add	r3, sp, #12
 8007144:	4805      	ldr	r0, [pc, #20]	; (800715c <fiprintf+0x20>)
 8007146:	f853 2b04 	ldr.w	r2, [r3], #4
 800714a:	6800      	ldr	r0, [r0, #0]
 800714c:	9301      	str	r3, [sp, #4]
 800714e:	f000 f919 	bl	8007384 <_vfiprintf_r>
 8007152:	b002      	add	sp, #8
 8007154:	f85d eb04 	ldr.w	lr, [sp], #4
 8007158:	b003      	add	sp, #12
 800715a:	4770      	bx	lr
 800715c:	20000018 	.word	0x20000018

08007160 <malloc>:
 8007160:	4b02      	ldr	r3, [pc, #8]	; (800716c <malloc+0xc>)
 8007162:	4601      	mov	r1, r0
 8007164:	6818      	ldr	r0, [r3, #0]
 8007166:	f000 b86f 	b.w	8007248 <_malloc_r>
 800716a:	bf00      	nop
 800716c:	20000018 	.word	0x20000018

08007170 <_free_r>:
 8007170:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007172:	2900      	cmp	r1, #0
 8007174:	d044      	beq.n	8007200 <_free_r+0x90>
 8007176:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800717a:	9001      	str	r0, [sp, #4]
 800717c:	2b00      	cmp	r3, #0
 800717e:	f1a1 0404 	sub.w	r4, r1, #4
 8007182:	bfb8      	it	lt
 8007184:	18e4      	addlt	r4, r4, r3
 8007186:	f000 feb9 	bl	8007efc <__malloc_lock>
 800718a:	4a1e      	ldr	r2, [pc, #120]	; (8007204 <_free_r+0x94>)
 800718c:	9801      	ldr	r0, [sp, #4]
 800718e:	6813      	ldr	r3, [r2, #0]
 8007190:	b933      	cbnz	r3, 80071a0 <_free_r+0x30>
 8007192:	6063      	str	r3, [r4, #4]
 8007194:	6014      	str	r4, [r2, #0]
 8007196:	b003      	add	sp, #12
 8007198:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800719c:	f000 beb4 	b.w	8007f08 <__malloc_unlock>
 80071a0:	42a3      	cmp	r3, r4
 80071a2:	d908      	bls.n	80071b6 <_free_r+0x46>
 80071a4:	6825      	ldr	r5, [r4, #0]
 80071a6:	1961      	adds	r1, r4, r5
 80071a8:	428b      	cmp	r3, r1
 80071aa:	bf01      	itttt	eq
 80071ac:	6819      	ldreq	r1, [r3, #0]
 80071ae:	685b      	ldreq	r3, [r3, #4]
 80071b0:	1949      	addeq	r1, r1, r5
 80071b2:	6021      	streq	r1, [r4, #0]
 80071b4:	e7ed      	b.n	8007192 <_free_r+0x22>
 80071b6:	461a      	mov	r2, r3
 80071b8:	685b      	ldr	r3, [r3, #4]
 80071ba:	b10b      	cbz	r3, 80071c0 <_free_r+0x50>
 80071bc:	42a3      	cmp	r3, r4
 80071be:	d9fa      	bls.n	80071b6 <_free_r+0x46>
 80071c0:	6811      	ldr	r1, [r2, #0]
 80071c2:	1855      	adds	r5, r2, r1
 80071c4:	42a5      	cmp	r5, r4
 80071c6:	d10b      	bne.n	80071e0 <_free_r+0x70>
 80071c8:	6824      	ldr	r4, [r4, #0]
 80071ca:	4421      	add	r1, r4
 80071cc:	1854      	adds	r4, r2, r1
 80071ce:	42a3      	cmp	r3, r4
 80071d0:	6011      	str	r1, [r2, #0]
 80071d2:	d1e0      	bne.n	8007196 <_free_r+0x26>
 80071d4:	681c      	ldr	r4, [r3, #0]
 80071d6:	685b      	ldr	r3, [r3, #4]
 80071d8:	6053      	str	r3, [r2, #4]
 80071da:	4421      	add	r1, r4
 80071dc:	6011      	str	r1, [r2, #0]
 80071de:	e7da      	b.n	8007196 <_free_r+0x26>
 80071e0:	d902      	bls.n	80071e8 <_free_r+0x78>
 80071e2:	230c      	movs	r3, #12
 80071e4:	6003      	str	r3, [r0, #0]
 80071e6:	e7d6      	b.n	8007196 <_free_r+0x26>
 80071e8:	6825      	ldr	r5, [r4, #0]
 80071ea:	1961      	adds	r1, r4, r5
 80071ec:	428b      	cmp	r3, r1
 80071ee:	bf04      	itt	eq
 80071f0:	6819      	ldreq	r1, [r3, #0]
 80071f2:	685b      	ldreq	r3, [r3, #4]
 80071f4:	6063      	str	r3, [r4, #4]
 80071f6:	bf04      	itt	eq
 80071f8:	1949      	addeq	r1, r1, r5
 80071fa:	6021      	streq	r1, [r4, #0]
 80071fc:	6054      	str	r4, [r2, #4]
 80071fe:	e7ca      	b.n	8007196 <_free_r+0x26>
 8007200:	b003      	add	sp, #12
 8007202:	bd30      	pop	{r4, r5, pc}
 8007204:	2000367c 	.word	0x2000367c

08007208 <sbrk_aligned>:
 8007208:	b570      	push	{r4, r5, r6, lr}
 800720a:	4e0e      	ldr	r6, [pc, #56]	; (8007244 <sbrk_aligned+0x3c>)
 800720c:	460c      	mov	r4, r1
 800720e:	6831      	ldr	r1, [r6, #0]
 8007210:	4605      	mov	r5, r0
 8007212:	b911      	cbnz	r1, 800721a <sbrk_aligned+0x12>
 8007214:	f000 fb7a 	bl	800790c <_sbrk_r>
 8007218:	6030      	str	r0, [r6, #0]
 800721a:	4621      	mov	r1, r4
 800721c:	4628      	mov	r0, r5
 800721e:	f000 fb75 	bl	800790c <_sbrk_r>
 8007222:	1c43      	adds	r3, r0, #1
 8007224:	d00a      	beq.n	800723c <sbrk_aligned+0x34>
 8007226:	1cc4      	adds	r4, r0, #3
 8007228:	f024 0403 	bic.w	r4, r4, #3
 800722c:	42a0      	cmp	r0, r4
 800722e:	d007      	beq.n	8007240 <sbrk_aligned+0x38>
 8007230:	1a21      	subs	r1, r4, r0
 8007232:	4628      	mov	r0, r5
 8007234:	f000 fb6a 	bl	800790c <_sbrk_r>
 8007238:	3001      	adds	r0, #1
 800723a:	d101      	bne.n	8007240 <sbrk_aligned+0x38>
 800723c:	f04f 34ff 	mov.w	r4, #4294967295
 8007240:	4620      	mov	r0, r4
 8007242:	bd70      	pop	{r4, r5, r6, pc}
 8007244:	20003680 	.word	0x20003680

08007248 <_malloc_r>:
 8007248:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800724c:	1ccd      	adds	r5, r1, #3
 800724e:	f025 0503 	bic.w	r5, r5, #3
 8007252:	3508      	adds	r5, #8
 8007254:	2d0c      	cmp	r5, #12
 8007256:	bf38      	it	cc
 8007258:	250c      	movcc	r5, #12
 800725a:	2d00      	cmp	r5, #0
 800725c:	4607      	mov	r7, r0
 800725e:	db01      	blt.n	8007264 <_malloc_r+0x1c>
 8007260:	42a9      	cmp	r1, r5
 8007262:	d905      	bls.n	8007270 <_malloc_r+0x28>
 8007264:	230c      	movs	r3, #12
 8007266:	603b      	str	r3, [r7, #0]
 8007268:	2600      	movs	r6, #0
 800726a:	4630      	mov	r0, r6
 800726c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007270:	4e2e      	ldr	r6, [pc, #184]	; (800732c <_malloc_r+0xe4>)
 8007272:	f000 fe43 	bl	8007efc <__malloc_lock>
 8007276:	6833      	ldr	r3, [r6, #0]
 8007278:	461c      	mov	r4, r3
 800727a:	bb34      	cbnz	r4, 80072ca <_malloc_r+0x82>
 800727c:	4629      	mov	r1, r5
 800727e:	4638      	mov	r0, r7
 8007280:	f7ff ffc2 	bl	8007208 <sbrk_aligned>
 8007284:	1c43      	adds	r3, r0, #1
 8007286:	4604      	mov	r4, r0
 8007288:	d14d      	bne.n	8007326 <_malloc_r+0xde>
 800728a:	6834      	ldr	r4, [r6, #0]
 800728c:	4626      	mov	r6, r4
 800728e:	2e00      	cmp	r6, #0
 8007290:	d140      	bne.n	8007314 <_malloc_r+0xcc>
 8007292:	6823      	ldr	r3, [r4, #0]
 8007294:	4631      	mov	r1, r6
 8007296:	4638      	mov	r0, r7
 8007298:	eb04 0803 	add.w	r8, r4, r3
 800729c:	f000 fb36 	bl	800790c <_sbrk_r>
 80072a0:	4580      	cmp	r8, r0
 80072a2:	d13a      	bne.n	800731a <_malloc_r+0xd2>
 80072a4:	6821      	ldr	r1, [r4, #0]
 80072a6:	3503      	adds	r5, #3
 80072a8:	1a6d      	subs	r5, r5, r1
 80072aa:	f025 0503 	bic.w	r5, r5, #3
 80072ae:	3508      	adds	r5, #8
 80072b0:	2d0c      	cmp	r5, #12
 80072b2:	bf38      	it	cc
 80072b4:	250c      	movcc	r5, #12
 80072b6:	4629      	mov	r1, r5
 80072b8:	4638      	mov	r0, r7
 80072ba:	f7ff ffa5 	bl	8007208 <sbrk_aligned>
 80072be:	3001      	adds	r0, #1
 80072c0:	d02b      	beq.n	800731a <_malloc_r+0xd2>
 80072c2:	6823      	ldr	r3, [r4, #0]
 80072c4:	442b      	add	r3, r5
 80072c6:	6023      	str	r3, [r4, #0]
 80072c8:	e00e      	b.n	80072e8 <_malloc_r+0xa0>
 80072ca:	6822      	ldr	r2, [r4, #0]
 80072cc:	1b52      	subs	r2, r2, r5
 80072ce:	d41e      	bmi.n	800730e <_malloc_r+0xc6>
 80072d0:	2a0b      	cmp	r2, #11
 80072d2:	d916      	bls.n	8007302 <_malloc_r+0xba>
 80072d4:	1961      	adds	r1, r4, r5
 80072d6:	42a3      	cmp	r3, r4
 80072d8:	6025      	str	r5, [r4, #0]
 80072da:	bf18      	it	ne
 80072dc:	6059      	strne	r1, [r3, #4]
 80072de:	6863      	ldr	r3, [r4, #4]
 80072e0:	bf08      	it	eq
 80072e2:	6031      	streq	r1, [r6, #0]
 80072e4:	5162      	str	r2, [r4, r5]
 80072e6:	604b      	str	r3, [r1, #4]
 80072e8:	4638      	mov	r0, r7
 80072ea:	f104 060b 	add.w	r6, r4, #11
 80072ee:	f000 fe0b 	bl	8007f08 <__malloc_unlock>
 80072f2:	f026 0607 	bic.w	r6, r6, #7
 80072f6:	1d23      	adds	r3, r4, #4
 80072f8:	1af2      	subs	r2, r6, r3
 80072fa:	d0b6      	beq.n	800726a <_malloc_r+0x22>
 80072fc:	1b9b      	subs	r3, r3, r6
 80072fe:	50a3      	str	r3, [r4, r2]
 8007300:	e7b3      	b.n	800726a <_malloc_r+0x22>
 8007302:	6862      	ldr	r2, [r4, #4]
 8007304:	42a3      	cmp	r3, r4
 8007306:	bf0c      	ite	eq
 8007308:	6032      	streq	r2, [r6, #0]
 800730a:	605a      	strne	r2, [r3, #4]
 800730c:	e7ec      	b.n	80072e8 <_malloc_r+0xa0>
 800730e:	4623      	mov	r3, r4
 8007310:	6864      	ldr	r4, [r4, #4]
 8007312:	e7b2      	b.n	800727a <_malloc_r+0x32>
 8007314:	4634      	mov	r4, r6
 8007316:	6876      	ldr	r6, [r6, #4]
 8007318:	e7b9      	b.n	800728e <_malloc_r+0x46>
 800731a:	230c      	movs	r3, #12
 800731c:	603b      	str	r3, [r7, #0]
 800731e:	4638      	mov	r0, r7
 8007320:	f000 fdf2 	bl	8007f08 <__malloc_unlock>
 8007324:	e7a1      	b.n	800726a <_malloc_r+0x22>
 8007326:	6025      	str	r5, [r4, #0]
 8007328:	e7de      	b.n	80072e8 <_malloc_r+0xa0>
 800732a:	bf00      	nop
 800732c:	2000367c 	.word	0x2000367c

08007330 <__sfputc_r>:
 8007330:	6893      	ldr	r3, [r2, #8]
 8007332:	3b01      	subs	r3, #1
 8007334:	2b00      	cmp	r3, #0
 8007336:	b410      	push	{r4}
 8007338:	6093      	str	r3, [r2, #8]
 800733a:	da08      	bge.n	800734e <__sfputc_r+0x1e>
 800733c:	6994      	ldr	r4, [r2, #24]
 800733e:	42a3      	cmp	r3, r4
 8007340:	db01      	blt.n	8007346 <__sfputc_r+0x16>
 8007342:	290a      	cmp	r1, #10
 8007344:	d103      	bne.n	800734e <__sfputc_r+0x1e>
 8007346:	f85d 4b04 	ldr.w	r4, [sp], #4
 800734a:	f000 baef 	b.w	800792c <__swbuf_r>
 800734e:	6813      	ldr	r3, [r2, #0]
 8007350:	1c58      	adds	r0, r3, #1
 8007352:	6010      	str	r0, [r2, #0]
 8007354:	7019      	strb	r1, [r3, #0]
 8007356:	4608      	mov	r0, r1
 8007358:	f85d 4b04 	ldr.w	r4, [sp], #4
 800735c:	4770      	bx	lr

0800735e <__sfputs_r>:
 800735e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007360:	4606      	mov	r6, r0
 8007362:	460f      	mov	r7, r1
 8007364:	4614      	mov	r4, r2
 8007366:	18d5      	adds	r5, r2, r3
 8007368:	42ac      	cmp	r4, r5
 800736a:	d101      	bne.n	8007370 <__sfputs_r+0x12>
 800736c:	2000      	movs	r0, #0
 800736e:	e007      	b.n	8007380 <__sfputs_r+0x22>
 8007370:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007374:	463a      	mov	r2, r7
 8007376:	4630      	mov	r0, r6
 8007378:	f7ff ffda 	bl	8007330 <__sfputc_r>
 800737c:	1c43      	adds	r3, r0, #1
 800737e:	d1f3      	bne.n	8007368 <__sfputs_r+0xa>
 8007380:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007384 <_vfiprintf_r>:
 8007384:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007388:	460d      	mov	r5, r1
 800738a:	b09d      	sub	sp, #116	; 0x74
 800738c:	4614      	mov	r4, r2
 800738e:	4698      	mov	r8, r3
 8007390:	4606      	mov	r6, r0
 8007392:	b118      	cbz	r0, 800739c <_vfiprintf_r+0x18>
 8007394:	6983      	ldr	r3, [r0, #24]
 8007396:	b90b      	cbnz	r3, 800739c <_vfiprintf_r+0x18>
 8007398:	f000 fcaa 	bl	8007cf0 <__sinit>
 800739c:	4b89      	ldr	r3, [pc, #548]	; (80075c4 <_vfiprintf_r+0x240>)
 800739e:	429d      	cmp	r5, r3
 80073a0:	d11b      	bne.n	80073da <_vfiprintf_r+0x56>
 80073a2:	6875      	ldr	r5, [r6, #4]
 80073a4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80073a6:	07d9      	lsls	r1, r3, #31
 80073a8:	d405      	bmi.n	80073b6 <_vfiprintf_r+0x32>
 80073aa:	89ab      	ldrh	r3, [r5, #12]
 80073ac:	059a      	lsls	r2, r3, #22
 80073ae:	d402      	bmi.n	80073b6 <_vfiprintf_r+0x32>
 80073b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80073b2:	f000 fd3b 	bl	8007e2c <__retarget_lock_acquire_recursive>
 80073b6:	89ab      	ldrh	r3, [r5, #12]
 80073b8:	071b      	lsls	r3, r3, #28
 80073ba:	d501      	bpl.n	80073c0 <_vfiprintf_r+0x3c>
 80073bc:	692b      	ldr	r3, [r5, #16]
 80073be:	b9eb      	cbnz	r3, 80073fc <_vfiprintf_r+0x78>
 80073c0:	4629      	mov	r1, r5
 80073c2:	4630      	mov	r0, r6
 80073c4:	f000 fb04 	bl	80079d0 <__swsetup_r>
 80073c8:	b1c0      	cbz	r0, 80073fc <_vfiprintf_r+0x78>
 80073ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80073cc:	07dc      	lsls	r4, r3, #31
 80073ce:	d50e      	bpl.n	80073ee <_vfiprintf_r+0x6a>
 80073d0:	f04f 30ff 	mov.w	r0, #4294967295
 80073d4:	b01d      	add	sp, #116	; 0x74
 80073d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073da:	4b7b      	ldr	r3, [pc, #492]	; (80075c8 <_vfiprintf_r+0x244>)
 80073dc:	429d      	cmp	r5, r3
 80073de:	d101      	bne.n	80073e4 <_vfiprintf_r+0x60>
 80073e0:	68b5      	ldr	r5, [r6, #8]
 80073e2:	e7df      	b.n	80073a4 <_vfiprintf_r+0x20>
 80073e4:	4b79      	ldr	r3, [pc, #484]	; (80075cc <_vfiprintf_r+0x248>)
 80073e6:	429d      	cmp	r5, r3
 80073e8:	bf08      	it	eq
 80073ea:	68f5      	ldreq	r5, [r6, #12]
 80073ec:	e7da      	b.n	80073a4 <_vfiprintf_r+0x20>
 80073ee:	89ab      	ldrh	r3, [r5, #12]
 80073f0:	0598      	lsls	r0, r3, #22
 80073f2:	d4ed      	bmi.n	80073d0 <_vfiprintf_r+0x4c>
 80073f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80073f6:	f000 fd1a 	bl	8007e2e <__retarget_lock_release_recursive>
 80073fa:	e7e9      	b.n	80073d0 <_vfiprintf_r+0x4c>
 80073fc:	2300      	movs	r3, #0
 80073fe:	9309      	str	r3, [sp, #36]	; 0x24
 8007400:	2320      	movs	r3, #32
 8007402:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007406:	f8cd 800c 	str.w	r8, [sp, #12]
 800740a:	2330      	movs	r3, #48	; 0x30
 800740c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80075d0 <_vfiprintf_r+0x24c>
 8007410:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007414:	f04f 0901 	mov.w	r9, #1
 8007418:	4623      	mov	r3, r4
 800741a:	469a      	mov	sl, r3
 800741c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007420:	b10a      	cbz	r2, 8007426 <_vfiprintf_r+0xa2>
 8007422:	2a25      	cmp	r2, #37	; 0x25
 8007424:	d1f9      	bne.n	800741a <_vfiprintf_r+0x96>
 8007426:	ebba 0b04 	subs.w	fp, sl, r4
 800742a:	d00b      	beq.n	8007444 <_vfiprintf_r+0xc0>
 800742c:	465b      	mov	r3, fp
 800742e:	4622      	mov	r2, r4
 8007430:	4629      	mov	r1, r5
 8007432:	4630      	mov	r0, r6
 8007434:	f7ff ff93 	bl	800735e <__sfputs_r>
 8007438:	3001      	adds	r0, #1
 800743a:	f000 80aa 	beq.w	8007592 <_vfiprintf_r+0x20e>
 800743e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007440:	445a      	add	r2, fp
 8007442:	9209      	str	r2, [sp, #36]	; 0x24
 8007444:	f89a 3000 	ldrb.w	r3, [sl]
 8007448:	2b00      	cmp	r3, #0
 800744a:	f000 80a2 	beq.w	8007592 <_vfiprintf_r+0x20e>
 800744e:	2300      	movs	r3, #0
 8007450:	f04f 32ff 	mov.w	r2, #4294967295
 8007454:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007458:	f10a 0a01 	add.w	sl, sl, #1
 800745c:	9304      	str	r3, [sp, #16]
 800745e:	9307      	str	r3, [sp, #28]
 8007460:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007464:	931a      	str	r3, [sp, #104]	; 0x68
 8007466:	4654      	mov	r4, sl
 8007468:	2205      	movs	r2, #5
 800746a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800746e:	4858      	ldr	r0, [pc, #352]	; (80075d0 <_vfiprintf_r+0x24c>)
 8007470:	f7f8 feae 	bl	80001d0 <memchr>
 8007474:	9a04      	ldr	r2, [sp, #16]
 8007476:	b9d8      	cbnz	r0, 80074b0 <_vfiprintf_r+0x12c>
 8007478:	06d1      	lsls	r1, r2, #27
 800747a:	bf44      	itt	mi
 800747c:	2320      	movmi	r3, #32
 800747e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007482:	0713      	lsls	r3, r2, #28
 8007484:	bf44      	itt	mi
 8007486:	232b      	movmi	r3, #43	; 0x2b
 8007488:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800748c:	f89a 3000 	ldrb.w	r3, [sl]
 8007490:	2b2a      	cmp	r3, #42	; 0x2a
 8007492:	d015      	beq.n	80074c0 <_vfiprintf_r+0x13c>
 8007494:	9a07      	ldr	r2, [sp, #28]
 8007496:	4654      	mov	r4, sl
 8007498:	2000      	movs	r0, #0
 800749a:	f04f 0c0a 	mov.w	ip, #10
 800749e:	4621      	mov	r1, r4
 80074a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80074a4:	3b30      	subs	r3, #48	; 0x30
 80074a6:	2b09      	cmp	r3, #9
 80074a8:	d94e      	bls.n	8007548 <_vfiprintf_r+0x1c4>
 80074aa:	b1b0      	cbz	r0, 80074da <_vfiprintf_r+0x156>
 80074ac:	9207      	str	r2, [sp, #28]
 80074ae:	e014      	b.n	80074da <_vfiprintf_r+0x156>
 80074b0:	eba0 0308 	sub.w	r3, r0, r8
 80074b4:	fa09 f303 	lsl.w	r3, r9, r3
 80074b8:	4313      	orrs	r3, r2
 80074ba:	9304      	str	r3, [sp, #16]
 80074bc:	46a2      	mov	sl, r4
 80074be:	e7d2      	b.n	8007466 <_vfiprintf_r+0xe2>
 80074c0:	9b03      	ldr	r3, [sp, #12]
 80074c2:	1d19      	adds	r1, r3, #4
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	9103      	str	r1, [sp, #12]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	bfbb      	ittet	lt
 80074cc:	425b      	neglt	r3, r3
 80074ce:	f042 0202 	orrlt.w	r2, r2, #2
 80074d2:	9307      	strge	r3, [sp, #28]
 80074d4:	9307      	strlt	r3, [sp, #28]
 80074d6:	bfb8      	it	lt
 80074d8:	9204      	strlt	r2, [sp, #16]
 80074da:	7823      	ldrb	r3, [r4, #0]
 80074dc:	2b2e      	cmp	r3, #46	; 0x2e
 80074de:	d10c      	bne.n	80074fa <_vfiprintf_r+0x176>
 80074e0:	7863      	ldrb	r3, [r4, #1]
 80074e2:	2b2a      	cmp	r3, #42	; 0x2a
 80074e4:	d135      	bne.n	8007552 <_vfiprintf_r+0x1ce>
 80074e6:	9b03      	ldr	r3, [sp, #12]
 80074e8:	1d1a      	adds	r2, r3, #4
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	9203      	str	r2, [sp, #12]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	bfb8      	it	lt
 80074f2:	f04f 33ff 	movlt.w	r3, #4294967295
 80074f6:	3402      	adds	r4, #2
 80074f8:	9305      	str	r3, [sp, #20]
 80074fa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80075e0 <_vfiprintf_r+0x25c>
 80074fe:	7821      	ldrb	r1, [r4, #0]
 8007500:	2203      	movs	r2, #3
 8007502:	4650      	mov	r0, sl
 8007504:	f7f8 fe64 	bl	80001d0 <memchr>
 8007508:	b140      	cbz	r0, 800751c <_vfiprintf_r+0x198>
 800750a:	2340      	movs	r3, #64	; 0x40
 800750c:	eba0 000a 	sub.w	r0, r0, sl
 8007510:	fa03 f000 	lsl.w	r0, r3, r0
 8007514:	9b04      	ldr	r3, [sp, #16]
 8007516:	4303      	orrs	r3, r0
 8007518:	3401      	adds	r4, #1
 800751a:	9304      	str	r3, [sp, #16]
 800751c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007520:	482c      	ldr	r0, [pc, #176]	; (80075d4 <_vfiprintf_r+0x250>)
 8007522:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007526:	2206      	movs	r2, #6
 8007528:	f7f8 fe52 	bl	80001d0 <memchr>
 800752c:	2800      	cmp	r0, #0
 800752e:	d03f      	beq.n	80075b0 <_vfiprintf_r+0x22c>
 8007530:	4b29      	ldr	r3, [pc, #164]	; (80075d8 <_vfiprintf_r+0x254>)
 8007532:	bb1b      	cbnz	r3, 800757c <_vfiprintf_r+0x1f8>
 8007534:	9b03      	ldr	r3, [sp, #12]
 8007536:	3307      	adds	r3, #7
 8007538:	f023 0307 	bic.w	r3, r3, #7
 800753c:	3308      	adds	r3, #8
 800753e:	9303      	str	r3, [sp, #12]
 8007540:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007542:	443b      	add	r3, r7
 8007544:	9309      	str	r3, [sp, #36]	; 0x24
 8007546:	e767      	b.n	8007418 <_vfiprintf_r+0x94>
 8007548:	fb0c 3202 	mla	r2, ip, r2, r3
 800754c:	460c      	mov	r4, r1
 800754e:	2001      	movs	r0, #1
 8007550:	e7a5      	b.n	800749e <_vfiprintf_r+0x11a>
 8007552:	2300      	movs	r3, #0
 8007554:	3401      	adds	r4, #1
 8007556:	9305      	str	r3, [sp, #20]
 8007558:	4619      	mov	r1, r3
 800755a:	f04f 0c0a 	mov.w	ip, #10
 800755e:	4620      	mov	r0, r4
 8007560:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007564:	3a30      	subs	r2, #48	; 0x30
 8007566:	2a09      	cmp	r2, #9
 8007568:	d903      	bls.n	8007572 <_vfiprintf_r+0x1ee>
 800756a:	2b00      	cmp	r3, #0
 800756c:	d0c5      	beq.n	80074fa <_vfiprintf_r+0x176>
 800756e:	9105      	str	r1, [sp, #20]
 8007570:	e7c3      	b.n	80074fa <_vfiprintf_r+0x176>
 8007572:	fb0c 2101 	mla	r1, ip, r1, r2
 8007576:	4604      	mov	r4, r0
 8007578:	2301      	movs	r3, #1
 800757a:	e7f0      	b.n	800755e <_vfiprintf_r+0x1da>
 800757c:	ab03      	add	r3, sp, #12
 800757e:	9300      	str	r3, [sp, #0]
 8007580:	462a      	mov	r2, r5
 8007582:	4b16      	ldr	r3, [pc, #88]	; (80075dc <_vfiprintf_r+0x258>)
 8007584:	a904      	add	r1, sp, #16
 8007586:	4630      	mov	r0, r6
 8007588:	f3af 8000 	nop.w
 800758c:	4607      	mov	r7, r0
 800758e:	1c78      	adds	r0, r7, #1
 8007590:	d1d6      	bne.n	8007540 <_vfiprintf_r+0x1bc>
 8007592:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007594:	07d9      	lsls	r1, r3, #31
 8007596:	d405      	bmi.n	80075a4 <_vfiprintf_r+0x220>
 8007598:	89ab      	ldrh	r3, [r5, #12]
 800759a:	059a      	lsls	r2, r3, #22
 800759c:	d402      	bmi.n	80075a4 <_vfiprintf_r+0x220>
 800759e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80075a0:	f000 fc45 	bl	8007e2e <__retarget_lock_release_recursive>
 80075a4:	89ab      	ldrh	r3, [r5, #12]
 80075a6:	065b      	lsls	r3, r3, #25
 80075a8:	f53f af12 	bmi.w	80073d0 <_vfiprintf_r+0x4c>
 80075ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 80075ae:	e711      	b.n	80073d4 <_vfiprintf_r+0x50>
 80075b0:	ab03      	add	r3, sp, #12
 80075b2:	9300      	str	r3, [sp, #0]
 80075b4:	462a      	mov	r2, r5
 80075b6:	4b09      	ldr	r3, [pc, #36]	; (80075dc <_vfiprintf_r+0x258>)
 80075b8:	a904      	add	r1, sp, #16
 80075ba:	4630      	mov	r0, r6
 80075bc:	f000 f880 	bl	80076c0 <_printf_i>
 80075c0:	e7e4      	b.n	800758c <_vfiprintf_r+0x208>
 80075c2:	bf00      	nop
 80075c4:	08009860 	.word	0x08009860
 80075c8:	08009880 	.word	0x08009880
 80075cc:	08009840 	.word	0x08009840
 80075d0:	0800980a 	.word	0x0800980a
 80075d4:	08009814 	.word	0x08009814
 80075d8:	00000000 	.word	0x00000000
 80075dc:	0800735f 	.word	0x0800735f
 80075e0:	08009810 	.word	0x08009810

080075e4 <_printf_common>:
 80075e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80075e8:	4616      	mov	r6, r2
 80075ea:	4699      	mov	r9, r3
 80075ec:	688a      	ldr	r2, [r1, #8]
 80075ee:	690b      	ldr	r3, [r1, #16]
 80075f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80075f4:	4293      	cmp	r3, r2
 80075f6:	bfb8      	it	lt
 80075f8:	4613      	movlt	r3, r2
 80075fa:	6033      	str	r3, [r6, #0]
 80075fc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007600:	4607      	mov	r7, r0
 8007602:	460c      	mov	r4, r1
 8007604:	b10a      	cbz	r2, 800760a <_printf_common+0x26>
 8007606:	3301      	adds	r3, #1
 8007608:	6033      	str	r3, [r6, #0]
 800760a:	6823      	ldr	r3, [r4, #0]
 800760c:	0699      	lsls	r1, r3, #26
 800760e:	bf42      	ittt	mi
 8007610:	6833      	ldrmi	r3, [r6, #0]
 8007612:	3302      	addmi	r3, #2
 8007614:	6033      	strmi	r3, [r6, #0]
 8007616:	6825      	ldr	r5, [r4, #0]
 8007618:	f015 0506 	ands.w	r5, r5, #6
 800761c:	d106      	bne.n	800762c <_printf_common+0x48>
 800761e:	f104 0a19 	add.w	sl, r4, #25
 8007622:	68e3      	ldr	r3, [r4, #12]
 8007624:	6832      	ldr	r2, [r6, #0]
 8007626:	1a9b      	subs	r3, r3, r2
 8007628:	42ab      	cmp	r3, r5
 800762a:	dc26      	bgt.n	800767a <_printf_common+0x96>
 800762c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007630:	1e13      	subs	r3, r2, #0
 8007632:	6822      	ldr	r2, [r4, #0]
 8007634:	bf18      	it	ne
 8007636:	2301      	movne	r3, #1
 8007638:	0692      	lsls	r2, r2, #26
 800763a:	d42b      	bmi.n	8007694 <_printf_common+0xb0>
 800763c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007640:	4649      	mov	r1, r9
 8007642:	4638      	mov	r0, r7
 8007644:	47c0      	blx	r8
 8007646:	3001      	adds	r0, #1
 8007648:	d01e      	beq.n	8007688 <_printf_common+0xa4>
 800764a:	6823      	ldr	r3, [r4, #0]
 800764c:	68e5      	ldr	r5, [r4, #12]
 800764e:	6832      	ldr	r2, [r6, #0]
 8007650:	f003 0306 	and.w	r3, r3, #6
 8007654:	2b04      	cmp	r3, #4
 8007656:	bf08      	it	eq
 8007658:	1aad      	subeq	r5, r5, r2
 800765a:	68a3      	ldr	r3, [r4, #8]
 800765c:	6922      	ldr	r2, [r4, #16]
 800765e:	bf0c      	ite	eq
 8007660:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007664:	2500      	movne	r5, #0
 8007666:	4293      	cmp	r3, r2
 8007668:	bfc4      	itt	gt
 800766a:	1a9b      	subgt	r3, r3, r2
 800766c:	18ed      	addgt	r5, r5, r3
 800766e:	2600      	movs	r6, #0
 8007670:	341a      	adds	r4, #26
 8007672:	42b5      	cmp	r5, r6
 8007674:	d11a      	bne.n	80076ac <_printf_common+0xc8>
 8007676:	2000      	movs	r0, #0
 8007678:	e008      	b.n	800768c <_printf_common+0xa8>
 800767a:	2301      	movs	r3, #1
 800767c:	4652      	mov	r2, sl
 800767e:	4649      	mov	r1, r9
 8007680:	4638      	mov	r0, r7
 8007682:	47c0      	blx	r8
 8007684:	3001      	adds	r0, #1
 8007686:	d103      	bne.n	8007690 <_printf_common+0xac>
 8007688:	f04f 30ff 	mov.w	r0, #4294967295
 800768c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007690:	3501      	adds	r5, #1
 8007692:	e7c6      	b.n	8007622 <_printf_common+0x3e>
 8007694:	18e1      	adds	r1, r4, r3
 8007696:	1c5a      	adds	r2, r3, #1
 8007698:	2030      	movs	r0, #48	; 0x30
 800769a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800769e:	4422      	add	r2, r4
 80076a0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80076a4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80076a8:	3302      	adds	r3, #2
 80076aa:	e7c7      	b.n	800763c <_printf_common+0x58>
 80076ac:	2301      	movs	r3, #1
 80076ae:	4622      	mov	r2, r4
 80076b0:	4649      	mov	r1, r9
 80076b2:	4638      	mov	r0, r7
 80076b4:	47c0      	blx	r8
 80076b6:	3001      	adds	r0, #1
 80076b8:	d0e6      	beq.n	8007688 <_printf_common+0xa4>
 80076ba:	3601      	adds	r6, #1
 80076bc:	e7d9      	b.n	8007672 <_printf_common+0x8e>
	...

080076c0 <_printf_i>:
 80076c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80076c4:	7e0f      	ldrb	r7, [r1, #24]
 80076c6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80076c8:	2f78      	cmp	r7, #120	; 0x78
 80076ca:	4691      	mov	r9, r2
 80076cc:	4680      	mov	r8, r0
 80076ce:	460c      	mov	r4, r1
 80076d0:	469a      	mov	sl, r3
 80076d2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80076d6:	d807      	bhi.n	80076e8 <_printf_i+0x28>
 80076d8:	2f62      	cmp	r7, #98	; 0x62
 80076da:	d80a      	bhi.n	80076f2 <_printf_i+0x32>
 80076dc:	2f00      	cmp	r7, #0
 80076de:	f000 80d8 	beq.w	8007892 <_printf_i+0x1d2>
 80076e2:	2f58      	cmp	r7, #88	; 0x58
 80076e4:	f000 80a3 	beq.w	800782e <_printf_i+0x16e>
 80076e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80076ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80076f0:	e03a      	b.n	8007768 <_printf_i+0xa8>
 80076f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80076f6:	2b15      	cmp	r3, #21
 80076f8:	d8f6      	bhi.n	80076e8 <_printf_i+0x28>
 80076fa:	a101      	add	r1, pc, #4	; (adr r1, 8007700 <_printf_i+0x40>)
 80076fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007700:	08007759 	.word	0x08007759
 8007704:	0800776d 	.word	0x0800776d
 8007708:	080076e9 	.word	0x080076e9
 800770c:	080076e9 	.word	0x080076e9
 8007710:	080076e9 	.word	0x080076e9
 8007714:	080076e9 	.word	0x080076e9
 8007718:	0800776d 	.word	0x0800776d
 800771c:	080076e9 	.word	0x080076e9
 8007720:	080076e9 	.word	0x080076e9
 8007724:	080076e9 	.word	0x080076e9
 8007728:	080076e9 	.word	0x080076e9
 800772c:	08007879 	.word	0x08007879
 8007730:	0800779d 	.word	0x0800779d
 8007734:	0800785b 	.word	0x0800785b
 8007738:	080076e9 	.word	0x080076e9
 800773c:	080076e9 	.word	0x080076e9
 8007740:	0800789b 	.word	0x0800789b
 8007744:	080076e9 	.word	0x080076e9
 8007748:	0800779d 	.word	0x0800779d
 800774c:	080076e9 	.word	0x080076e9
 8007750:	080076e9 	.word	0x080076e9
 8007754:	08007863 	.word	0x08007863
 8007758:	682b      	ldr	r3, [r5, #0]
 800775a:	1d1a      	adds	r2, r3, #4
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	602a      	str	r2, [r5, #0]
 8007760:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007764:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007768:	2301      	movs	r3, #1
 800776a:	e0a3      	b.n	80078b4 <_printf_i+0x1f4>
 800776c:	6820      	ldr	r0, [r4, #0]
 800776e:	6829      	ldr	r1, [r5, #0]
 8007770:	0606      	lsls	r6, r0, #24
 8007772:	f101 0304 	add.w	r3, r1, #4
 8007776:	d50a      	bpl.n	800778e <_printf_i+0xce>
 8007778:	680e      	ldr	r6, [r1, #0]
 800777a:	602b      	str	r3, [r5, #0]
 800777c:	2e00      	cmp	r6, #0
 800777e:	da03      	bge.n	8007788 <_printf_i+0xc8>
 8007780:	232d      	movs	r3, #45	; 0x2d
 8007782:	4276      	negs	r6, r6
 8007784:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007788:	485e      	ldr	r0, [pc, #376]	; (8007904 <_printf_i+0x244>)
 800778a:	230a      	movs	r3, #10
 800778c:	e019      	b.n	80077c2 <_printf_i+0x102>
 800778e:	680e      	ldr	r6, [r1, #0]
 8007790:	602b      	str	r3, [r5, #0]
 8007792:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007796:	bf18      	it	ne
 8007798:	b236      	sxthne	r6, r6
 800779a:	e7ef      	b.n	800777c <_printf_i+0xbc>
 800779c:	682b      	ldr	r3, [r5, #0]
 800779e:	6820      	ldr	r0, [r4, #0]
 80077a0:	1d19      	adds	r1, r3, #4
 80077a2:	6029      	str	r1, [r5, #0]
 80077a4:	0601      	lsls	r1, r0, #24
 80077a6:	d501      	bpl.n	80077ac <_printf_i+0xec>
 80077a8:	681e      	ldr	r6, [r3, #0]
 80077aa:	e002      	b.n	80077b2 <_printf_i+0xf2>
 80077ac:	0646      	lsls	r6, r0, #25
 80077ae:	d5fb      	bpl.n	80077a8 <_printf_i+0xe8>
 80077b0:	881e      	ldrh	r6, [r3, #0]
 80077b2:	4854      	ldr	r0, [pc, #336]	; (8007904 <_printf_i+0x244>)
 80077b4:	2f6f      	cmp	r7, #111	; 0x6f
 80077b6:	bf0c      	ite	eq
 80077b8:	2308      	moveq	r3, #8
 80077ba:	230a      	movne	r3, #10
 80077bc:	2100      	movs	r1, #0
 80077be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80077c2:	6865      	ldr	r5, [r4, #4]
 80077c4:	60a5      	str	r5, [r4, #8]
 80077c6:	2d00      	cmp	r5, #0
 80077c8:	bfa2      	ittt	ge
 80077ca:	6821      	ldrge	r1, [r4, #0]
 80077cc:	f021 0104 	bicge.w	r1, r1, #4
 80077d0:	6021      	strge	r1, [r4, #0]
 80077d2:	b90e      	cbnz	r6, 80077d8 <_printf_i+0x118>
 80077d4:	2d00      	cmp	r5, #0
 80077d6:	d04d      	beq.n	8007874 <_printf_i+0x1b4>
 80077d8:	4615      	mov	r5, r2
 80077da:	fbb6 f1f3 	udiv	r1, r6, r3
 80077de:	fb03 6711 	mls	r7, r3, r1, r6
 80077e2:	5dc7      	ldrb	r7, [r0, r7]
 80077e4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80077e8:	4637      	mov	r7, r6
 80077ea:	42bb      	cmp	r3, r7
 80077ec:	460e      	mov	r6, r1
 80077ee:	d9f4      	bls.n	80077da <_printf_i+0x11a>
 80077f0:	2b08      	cmp	r3, #8
 80077f2:	d10b      	bne.n	800780c <_printf_i+0x14c>
 80077f4:	6823      	ldr	r3, [r4, #0]
 80077f6:	07de      	lsls	r6, r3, #31
 80077f8:	d508      	bpl.n	800780c <_printf_i+0x14c>
 80077fa:	6923      	ldr	r3, [r4, #16]
 80077fc:	6861      	ldr	r1, [r4, #4]
 80077fe:	4299      	cmp	r1, r3
 8007800:	bfde      	ittt	le
 8007802:	2330      	movle	r3, #48	; 0x30
 8007804:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007808:	f105 35ff 	addle.w	r5, r5, #4294967295
 800780c:	1b52      	subs	r2, r2, r5
 800780e:	6122      	str	r2, [r4, #16]
 8007810:	f8cd a000 	str.w	sl, [sp]
 8007814:	464b      	mov	r3, r9
 8007816:	aa03      	add	r2, sp, #12
 8007818:	4621      	mov	r1, r4
 800781a:	4640      	mov	r0, r8
 800781c:	f7ff fee2 	bl	80075e4 <_printf_common>
 8007820:	3001      	adds	r0, #1
 8007822:	d14c      	bne.n	80078be <_printf_i+0x1fe>
 8007824:	f04f 30ff 	mov.w	r0, #4294967295
 8007828:	b004      	add	sp, #16
 800782a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800782e:	4835      	ldr	r0, [pc, #212]	; (8007904 <_printf_i+0x244>)
 8007830:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007834:	6829      	ldr	r1, [r5, #0]
 8007836:	6823      	ldr	r3, [r4, #0]
 8007838:	f851 6b04 	ldr.w	r6, [r1], #4
 800783c:	6029      	str	r1, [r5, #0]
 800783e:	061d      	lsls	r5, r3, #24
 8007840:	d514      	bpl.n	800786c <_printf_i+0x1ac>
 8007842:	07df      	lsls	r7, r3, #31
 8007844:	bf44      	itt	mi
 8007846:	f043 0320 	orrmi.w	r3, r3, #32
 800784a:	6023      	strmi	r3, [r4, #0]
 800784c:	b91e      	cbnz	r6, 8007856 <_printf_i+0x196>
 800784e:	6823      	ldr	r3, [r4, #0]
 8007850:	f023 0320 	bic.w	r3, r3, #32
 8007854:	6023      	str	r3, [r4, #0]
 8007856:	2310      	movs	r3, #16
 8007858:	e7b0      	b.n	80077bc <_printf_i+0xfc>
 800785a:	6823      	ldr	r3, [r4, #0]
 800785c:	f043 0320 	orr.w	r3, r3, #32
 8007860:	6023      	str	r3, [r4, #0]
 8007862:	2378      	movs	r3, #120	; 0x78
 8007864:	4828      	ldr	r0, [pc, #160]	; (8007908 <_printf_i+0x248>)
 8007866:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800786a:	e7e3      	b.n	8007834 <_printf_i+0x174>
 800786c:	0659      	lsls	r1, r3, #25
 800786e:	bf48      	it	mi
 8007870:	b2b6      	uxthmi	r6, r6
 8007872:	e7e6      	b.n	8007842 <_printf_i+0x182>
 8007874:	4615      	mov	r5, r2
 8007876:	e7bb      	b.n	80077f0 <_printf_i+0x130>
 8007878:	682b      	ldr	r3, [r5, #0]
 800787a:	6826      	ldr	r6, [r4, #0]
 800787c:	6961      	ldr	r1, [r4, #20]
 800787e:	1d18      	adds	r0, r3, #4
 8007880:	6028      	str	r0, [r5, #0]
 8007882:	0635      	lsls	r5, r6, #24
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	d501      	bpl.n	800788c <_printf_i+0x1cc>
 8007888:	6019      	str	r1, [r3, #0]
 800788a:	e002      	b.n	8007892 <_printf_i+0x1d2>
 800788c:	0670      	lsls	r0, r6, #25
 800788e:	d5fb      	bpl.n	8007888 <_printf_i+0x1c8>
 8007890:	8019      	strh	r1, [r3, #0]
 8007892:	2300      	movs	r3, #0
 8007894:	6123      	str	r3, [r4, #16]
 8007896:	4615      	mov	r5, r2
 8007898:	e7ba      	b.n	8007810 <_printf_i+0x150>
 800789a:	682b      	ldr	r3, [r5, #0]
 800789c:	1d1a      	adds	r2, r3, #4
 800789e:	602a      	str	r2, [r5, #0]
 80078a0:	681d      	ldr	r5, [r3, #0]
 80078a2:	6862      	ldr	r2, [r4, #4]
 80078a4:	2100      	movs	r1, #0
 80078a6:	4628      	mov	r0, r5
 80078a8:	f7f8 fc92 	bl	80001d0 <memchr>
 80078ac:	b108      	cbz	r0, 80078b2 <_printf_i+0x1f2>
 80078ae:	1b40      	subs	r0, r0, r5
 80078b0:	6060      	str	r0, [r4, #4]
 80078b2:	6863      	ldr	r3, [r4, #4]
 80078b4:	6123      	str	r3, [r4, #16]
 80078b6:	2300      	movs	r3, #0
 80078b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80078bc:	e7a8      	b.n	8007810 <_printf_i+0x150>
 80078be:	6923      	ldr	r3, [r4, #16]
 80078c0:	462a      	mov	r2, r5
 80078c2:	4649      	mov	r1, r9
 80078c4:	4640      	mov	r0, r8
 80078c6:	47d0      	blx	sl
 80078c8:	3001      	adds	r0, #1
 80078ca:	d0ab      	beq.n	8007824 <_printf_i+0x164>
 80078cc:	6823      	ldr	r3, [r4, #0]
 80078ce:	079b      	lsls	r3, r3, #30
 80078d0:	d413      	bmi.n	80078fa <_printf_i+0x23a>
 80078d2:	68e0      	ldr	r0, [r4, #12]
 80078d4:	9b03      	ldr	r3, [sp, #12]
 80078d6:	4298      	cmp	r0, r3
 80078d8:	bfb8      	it	lt
 80078da:	4618      	movlt	r0, r3
 80078dc:	e7a4      	b.n	8007828 <_printf_i+0x168>
 80078de:	2301      	movs	r3, #1
 80078e0:	4632      	mov	r2, r6
 80078e2:	4649      	mov	r1, r9
 80078e4:	4640      	mov	r0, r8
 80078e6:	47d0      	blx	sl
 80078e8:	3001      	adds	r0, #1
 80078ea:	d09b      	beq.n	8007824 <_printf_i+0x164>
 80078ec:	3501      	adds	r5, #1
 80078ee:	68e3      	ldr	r3, [r4, #12]
 80078f0:	9903      	ldr	r1, [sp, #12]
 80078f2:	1a5b      	subs	r3, r3, r1
 80078f4:	42ab      	cmp	r3, r5
 80078f6:	dcf2      	bgt.n	80078de <_printf_i+0x21e>
 80078f8:	e7eb      	b.n	80078d2 <_printf_i+0x212>
 80078fa:	2500      	movs	r5, #0
 80078fc:	f104 0619 	add.w	r6, r4, #25
 8007900:	e7f5      	b.n	80078ee <_printf_i+0x22e>
 8007902:	bf00      	nop
 8007904:	0800981b 	.word	0x0800981b
 8007908:	0800982c 	.word	0x0800982c

0800790c <_sbrk_r>:
 800790c:	b538      	push	{r3, r4, r5, lr}
 800790e:	4d06      	ldr	r5, [pc, #24]	; (8007928 <_sbrk_r+0x1c>)
 8007910:	2300      	movs	r3, #0
 8007912:	4604      	mov	r4, r0
 8007914:	4608      	mov	r0, r1
 8007916:	602b      	str	r3, [r5, #0]
 8007918:	f7fc fa32 	bl	8003d80 <_sbrk>
 800791c:	1c43      	adds	r3, r0, #1
 800791e:	d102      	bne.n	8007926 <_sbrk_r+0x1a>
 8007920:	682b      	ldr	r3, [r5, #0]
 8007922:	b103      	cbz	r3, 8007926 <_sbrk_r+0x1a>
 8007924:	6023      	str	r3, [r4, #0]
 8007926:	bd38      	pop	{r3, r4, r5, pc}
 8007928:	20003688 	.word	0x20003688

0800792c <__swbuf_r>:
 800792c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800792e:	460e      	mov	r6, r1
 8007930:	4614      	mov	r4, r2
 8007932:	4605      	mov	r5, r0
 8007934:	b118      	cbz	r0, 800793e <__swbuf_r+0x12>
 8007936:	6983      	ldr	r3, [r0, #24]
 8007938:	b90b      	cbnz	r3, 800793e <__swbuf_r+0x12>
 800793a:	f000 f9d9 	bl	8007cf0 <__sinit>
 800793e:	4b21      	ldr	r3, [pc, #132]	; (80079c4 <__swbuf_r+0x98>)
 8007940:	429c      	cmp	r4, r3
 8007942:	d12b      	bne.n	800799c <__swbuf_r+0x70>
 8007944:	686c      	ldr	r4, [r5, #4]
 8007946:	69a3      	ldr	r3, [r4, #24]
 8007948:	60a3      	str	r3, [r4, #8]
 800794a:	89a3      	ldrh	r3, [r4, #12]
 800794c:	071a      	lsls	r2, r3, #28
 800794e:	d52f      	bpl.n	80079b0 <__swbuf_r+0x84>
 8007950:	6923      	ldr	r3, [r4, #16]
 8007952:	b36b      	cbz	r3, 80079b0 <__swbuf_r+0x84>
 8007954:	6923      	ldr	r3, [r4, #16]
 8007956:	6820      	ldr	r0, [r4, #0]
 8007958:	1ac0      	subs	r0, r0, r3
 800795a:	6963      	ldr	r3, [r4, #20]
 800795c:	b2f6      	uxtb	r6, r6
 800795e:	4283      	cmp	r3, r0
 8007960:	4637      	mov	r7, r6
 8007962:	dc04      	bgt.n	800796e <__swbuf_r+0x42>
 8007964:	4621      	mov	r1, r4
 8007966:	4628      	mov	r0, r5
 8007968:	f000 f92e 	bl	8007bc8 <_fflush_r>
 800796c:	bb30      	cbnz	r0, 80079bc <__swbuf_r+0x90>
 800796e:	68a3      	ldr	r3, [r4, #8]
 8007970:	3b01      	subs	r3, #1
 8007972:	60a3      	str	r3, [r4, #8]
 8007974:	6823      	ldr	r3, [r4, #0]
 8007976:	1c5a      	adds	r2, r3, #1
 8007978:	6022      	str	r2, [r4, #0]
 800797a:	701e      	strb	r6, [r3, #0]
 800797c:	6963      	ldr	r3, [r4, #20]
 800797e:	3001      	adds	r0, #1
 8007980:	4283      	cmp	r3, r0
 8007982:	d004      	beq.n	800798e <__swbuf_r+0x62>
 8007984:	89a3      	ldrh	r3, [r4, #12]
 8007986:	07db      	lsls	r3, r3, #31
 8007988:	d506      	bpl.n	8007998 <__swbuf_r+0x6c>
 800798a:	2e0a      	cmp	r6, #10
 800798c:	d104      	bne.n	8007998 <__swbuf_r+0x6c>
 800798e:	4621      	mov	r1, r4
 8007990:	4628      	mov	r0, r5
 8007992:	f000 f919 	bl	8007bc8 <_fflush_r>
 8007996:	b988      	cbnz	r0, 80079bc <__swbuf_r+0x90>
 8007998:	4638      	mov	r0, r7
 800799a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800799c:	4b0a      	ldr	r3, [pc, #40]	; (80079c8 <__swbuf_r+0x9c>)
 800799e:	429c      	cmp	r4, r3
 80079a0:	d101      	bne.n	80079a6 <__swbuf_r+0x7a>
 80079a2:	68ac      	ldr	r4, [r5, #8]
 80079a4:	e7cf      	b.n	8007946 <__swbuf_r+0x1a>
 80079a6:	4b09      	ldr	r3, [pc, #36]	; (80079cc <__swbuf_r+0xa0>)
 80079a8:	429c      	cmp	r4, r3
 80079aa:	bf08      	it	eq
 80079ac:	68ec      	ldreq	r4, [r5, #12]
 80079ae:	e7ca      	b.n	8007946 <__swbuf_r+0x1a>
 80079b0:	4621      	mov	r1, r4
 80079b2:	4628      	mov	r0, r5
 80079b4:	f000 f80c 	bl	80079d0 <__swsetup_r>
 80079b8:	2800      	cmp	r0, #0
 80079ba:	d0cb      	beq.n	8007954 <__swbuf_r+0x28>
 80079bc:	f04f 37ff 	mov.w	r7, #4294967295
 80079c0:	e7ea      	b.n	8007998 <__swbuf_r+0x6c>
 80079c2:	bf00      	nop
 80079c4:	08009860 	.word	0x08009860
 80079c8:	08009880 	.word	0x08009880
 80079cc:	08009840 	.word	0x08009840

080079d0 <__swsetup_r>:
 80079d0:	4b32      	ldr	r3, [pc, #200]	; (8007a9c <__swsetup_r+0xcc>)
 80079d2:	b570      	push	{r4, r5, r6, lr}
 80079d4:	681d      	ldr	r5, [r3, #0]
 80079d6:	4606      	mov	r6, r0
 80079d8:	460c      	mov	r4, r1
 80079da:	b125      	cbz	r5, 80079e6 <__swsetup_r+0x16>
 80079dc:	69ab      	ldr	r3, [r5, #24]
 80079de:	b913      	cbnz	r3, 80079e6 <__swsetup_r+0x16>
 80079e0:	4628      	mov	r0, r5
 80079e2:	f000 f985 	bl	8007cf0 <__sinit>
 80079e6:	4b2e      	ldr	r3, [pc, #184]	; (8007aa0 <__swsetup_r+0xd0>)
 80079e8:	429c      	cmp	r4, r3
 80079ea:	d10f      	bne.n	8007a0c <__swsetup_r+0x3c>
 80079ec:	686c      	ldr	r4, [r5, #4]
 80079ee:	89a3      	ldrh	r3, [r4, #12]
 80079f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80079f4:	0719      	lsls	r1, r3, #28
 80079f6:	d42c      	bmi.n	8007a52 <__swsetup_r+0x82>
 80079f8:	06dd      	lsls	r5, r3, #27
 80079fa:	d411      	bmi.n	8007a20 <__swsetup_r+0x50>
 80079fc:	2309      	movs	r3, #9
 80079fe:	6033      	str	r3, [r6, #0]
 8007a00:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007a04:	81a3      	strh	r3, [r4, #12]
 8007a06:	f04f 30ff 	mov.w	r0, #4294967295
 8007a0a:	e03e      	b.n	8007a8a <__swsetup_r+0xba>
 8007a0c:	4b25      	ldr	r3, [pc, #148]	; (8007aa4 <__swsetup_r+0xd4>)
 8007a0e:	429c      	cmp	r4, r3
 8007a10:	d101      	bne.n	8007a16 <__swsetup_r+0x46>
 8007a12:	68ac      	ldr	r4, [r5, #8]
 8007a14:	e7eb      	b.n	80079ee <__swsetup_r+0x1e>
 8007a16:	4b24      	ldr	r3, [pc, #144]	; (8007aa8 <__swsetup_r+0xd8>)
 8007a18:	429c      	cmp	r4, r3
 8007a1a:	bf08      	it	eq
 8007a1c:	68ec      	ldreq	r4, [r5, #12]
 8007a1e:	e7e6      	b.n	80079ee <__swsetup_r+0x1e>
 8007a20:	0758      	lsls	r0, r3, #29
 8007a22:	d512      	bpl.n	8007a4a <__swsetup_r+0x7a>
 8007a24:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007a26:	b141      	cbz	r1, 8007a3a <__swsetup_r+0x6a>
 8007a28:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007a2c:	4299      	cmp	r1, r3
 8007a2e:	d002      	beq.n	8007a36 <__swsetup_r+0x66>
 8007a30:	4630      	mov	r0, r6
 8007a32:	f7ff fb9d 	bl	8007170 <_free_r>
 8007a36:	2300      	movs	r3, #0
 8007a38:	6363      	str	r3, [r4, #52]	; 0x34
 8007a3a:	89a3      	ldrh	r3, [r4, #12]
 8007a3c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007a40:	81a3      	strh	r3, [r4, #12]
 8007a42:	2300      	movs	r3, #0
 8007a44:	6063      	str	r3, [r4, #4]
 8007a46:	6923      	ldr	r3, [r4, #16]
 8007a48:	6023      	str	r3, [r4, #0]
 8007a4a:	89a3      	ldrh	r3, [r4, #12]
 8007a4c:	f043 0308 	orr.w	r3, r3, #8
 8007a50:	81a3      	strh	r3, [r4, #12]
 8007a52:	6923      	ldr	r3, [r4, #16]
 8007a54:	b94b      	cbnz	r3, 8007a6a <__swsetup_r+0x9a>
 8007a56:	89a3      	ldrh	r3, [r4, #12]
 8007a58:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007a5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a60:	d003      	beq.n	8007a6a <__swsetup_r+0x9a>
 8007a62:	4621      	mov	r1, r4
 8007a64:	4630      	mov	r0, r6
 8007a66:	f000 fa09 	bl	8007e7c <__smakebuf_r>
 8007a6a:	89a0      	ldrh	r0, [r4, #12]
 8007a6c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007a70:	f010 0301 	ands.w	r3, r0, #1
 8007a74:	d00a      	beq.n	8007a8c <__swsetup_r+0xbc>
 8007a76:	2300      	movs	r3, #0
 8007a78:	60a3      	str	r3, [r4, #8]
 8007a7a:	6963      	ldr	r3, [r4, #20]
 8007a7c:	425b      	negs	r3, r3
 8007a7e:	61a3      	str	r3, [r4, #24]
 8007a80:	6923      	ldr	r3, [r4, #16]
 8007a82:	b943      	cbnz	r3, 8007a96 <__swsetup_r+0xc6>
 8007a84:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007a88:	d1ba      	bne.n	8007a00 <__swsetup_r+0x30>
 8007a8a:	bd70      	pop	{r4, r5, r6, pc}
 8007a8c:	0781      	lsls	r1, r0, #30
 8007a8e:	bf58      	it	pl
 8007a90:	6963      	ldrpl	r3, [r4, #20]
 8007a92:	60a3      	str	r3, [r4, #8]
 8007a94:	e7f4      	b.n	8007a80 <__swsetup_r+0xb0>
 8007a96:	2000      	movs	r0, #0
 8007a98:	e7f7      	b.n	8007a8a <__swsetup_r+0xba>
 8007a9a:	bf00      	nop
 8007a9c:	20000018 	.word	0x20000018
 8007aa0:	08009860 	.word	0x08009860
 8007aa4:	08009880 	.word	0x08009880
 8007aa8:	08009840 	.word	0x08009840

08007aac <abort>:
 8007aac:	b508      	push	{r3, lr}
 8007aae:	2006      	movs	r0, #6
 8007ab0:	f000 fa58 	bl	8007f64 <raise>
 8007ab4:	2001      	movs	r0, #1
 8007ab6:	f7fc f8eb 	bl	8003c90 <_exit>
	...

08007abc <__sflush_r>:
 8007abc:	898a      	ldrh	r2, [r1, #12]
 8007abe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ac2:	4605      	mov	r5, r0
 8007ac4:	0710      	lsls	r0, r2, #28
 8007ac6:	460c      	mov	r4, r1
 8007ac8:	d458      	bmi.n	8007b7c <__sflush_r+0xc0>
 8007aca:	684b      	ldr	r3, [r1, #4]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	dc05      	bgt.n	8007adc <__sflush_r+0x20>
 8007ad0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	dc02      	bgt.n	8007adc <__sflush_r+0x20>
 8007ad6:	2000      	movs	r0, #0
 8007ad8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007adc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007ade:	2e00      	cmp	r6, #0
 8007ae0:	d0f9      	beq.n	8007ad6 <__sflush_r+0x1a>
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007ae8:	682f      	ldr	r7, [r5, #0]
 8007aea:	602b      	str	r3, [r5, #0]
 8007aec:	d032      	beq.n	8007b54 <__sflush_r+0x98>
 8007aee:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007af0:	89a3      	ldrh	r3, [r4, #12]
 8007af2:	075a      	lsls	r2, r3, #29
 8007af4:	d505      	bpl.n	8007b02 <__sflush_r+0x46>
 8007af6:	6863      	ldr	r3, [r4, #4]
 8007af8:	1ac0      	subs	r0, r0, r3
 8007afa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007afc:	b10b      	cbz	r3, 8007b02 <__sflush_r+0x46>
 8007afe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007b00:	1ac0      	subs	r0, r0, r3
 8007b02:	2300      	movs	r3, #0
 8007b04:	4602      	mov	r2, r0
 8007b06:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007b08:	6a21      	ldr	r1, [r4, #32]
 8007b0a:	4628      	mov	r0, r5
 8007b0c:	47b0      	blx	r6
 8007b0e:	1c43      	adds	r3, r0, #1
 8007b10:	89a3      	ldrh	r3, [r4, #12]
 8007b12:	d106      	bne.n	8007b22 <__sflush_r+0x66>
 8007b14:	6829      	ldr	r1, [r5, #0]
 8007b16:	291d      	cmp	r1, #29
 8007b18:	d82c      	bhi.n	8007b74 <__sflush_r+0xb8>
 8007b1a:	4a2a      	ldr	r2, [pc, #168]	; (8007bc4 <__sflush_r+0x108>)
 8007b1c:	40ca      	lsrs	r2, r1
 8007b1e:	07d6      	lsls	r6, r2, #31
 8007b20:	d528      	bpl.n	8007b74 <__sflush_r+0xb8>
 8007b22:	2200      	movs	r2, #0
 8007b24:	6062      	str	r2, [r4, #4]
 8007b26:	04d9      	lsls	r1, r3, #19
 8007b28:	6922      	ldr	r2, [r4, #16]
 8007b2a:	6022      	str	r2, [r4, #0]
 8007b2c:	d504      	bpl.n	8007b38 <__sflush_r+0x7c>
 8007b2e:	1c42      	adds	r2, r0, #1
 8007b30:	d101      	bne.n	8007b36 <__sflush_r+0x7a>
 8007b32:	682b      	ldr	r3, [r5, #0]
 8007b34:	b903      	cbnz	r3, 8007b38 <__sflush_r+0x7c>
 8007b36:	6560      	str	r0, [r4, #84]	; 0x54
 8007b38:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007b3a:	602f      	str	r7, [r5, #0]
 8007b3c:	2900      	cmp	r1, #0
 8007b3e:	d0ca      	beq.n	8007ad6 <__sflush_r+0x1a>
 8007b40:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007b44:	4299      	cmp	r1, r3
 8007b46:	d002      	beq.n	8007b4e <__sflush_r+0x92>
 8007b48:	4628      	mov	r0, r5
 8007b4a:	f7ff fb11 	bl	8007170 <_free_r>
 8007b4e:	2000      	movs	r0, #0
 8007b50:	6360      	str	r0, [r4, #52]	; 0x34
 8007b52:	e7c1      	b.n	8007ad8 <__sflush_r+0x1c>
 8007b54:	6a21      	ldr	r1, [r4, #32]
 8007b56:	2301      	movs	r3, #1
 8007b58:	4628      	mov	r0, r5
 8007b5a:	47b0      	blx	r6
 8007b5c:	1c41      	adds	r1, r0, #1
 8007b5e:	d1c7      	bne.n	8007af0 <__sflush_r+0x34>
 8007b60:	682b      	ldr	r3, [r5, #0]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d0c4      	beq.n	8007af0 <__sflush_r+0x34>
 8007b66:	2b1d      	cmp	r3, #29
 8007b68:	d001      	beq.n	8007b6e <__sflush_r+0xb2>
 8007b6a:	2b16      	cmp	r3, #22
 8007b6c:	d101      	bne.n	8007b72 <__sflush_r+0xb6>
 8007b6e:	602f      	str	r7, [r5, #0]
 8007b70:	e7b1      	b.n	8007ad6 <__sflush_r+0x1a>
 8007b72:	89a3      	ldrh	r3, [r4, #12]
 8007b74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b78:	81a3      	strh	r3, [r4, #12]
 8007b7a:	e7ad      	b.n	8007ad8 <__sflush_r+0x1c>
 8007b7c:	690f      	ldr	r7, [r1, #16]
 8007b7e:	2f00      	cmp	r7, #0
 8007b80:	d0a9      	beq.n	8007ad6 <__sflush_r+0x1a>
 8007b82:	0793      	lsls	r3, r2, #30
 8007b84:	680e      	ldr	r6, [r1, #0]
 8007b86:	bf08      	it	eq
 8007b88:	694b      	ldreq	r3, [r1, #20]
 8007b8a:	600f      	str	r7, [r1, #0]
 8007b8c:	bf18      	it	ne
 8007b8e:	2300      	movne	r3, #0
 8007b90:	eba6 0807 	sub.w	r8, r6, r7
 8007b94:	608b      	str	r3, [r1, #8]
 8007b96:	f1b8 0f00 	cmp.w	r8, #0
 8007b9a:	dd9c      	ble.n	8007ad6 <__sflush_r+0x1a>
 8007b9c:	6a21      	ldr	r1, [r4, #32]
 8007b9e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007ba0:	4643      	mov	r3, r8
 8007ba2:	463a      	mov	r2, r7
 8007ba4:	4628      	mov	r0, r5
 8007ba6:	47b0      	blx	r6
 8007ba8:	2800      	cmp	r0, #0
 8007baa:	dc06      	bgt.n	8007bba <__sflush_r+0xfe>
 8007bac:	89a3      	ldrh	r3, [r4, #12]
 8007bae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007bb2:	81a3      	strh	r3, [r4, #12]
 8007bb4:	f04f 30ff 	mov.w	r0, #4294967295
 8007bb8:	e78e      	b.n	8007ad8 <__sflush_r+0x1c>
 8007bba:	4407      	add	r7, r0
 8007bbc:	eba8 0800 	sub.w	r8, r8, r0
 8007bc0:	e7e9      	b.n	8007b96 <__sflush_r+0xda>
 8007bc2:	bf00      	nop
 8007bc4:	20400001 	.word	0x20400001

08007bc8 <_fflush_r>:
 8007bc8:	b538      	push	{r3, r4, r5, lr}
 8007bca:	690b      	ldr	r3, [r1, #16]
 8007bcc:	4605      	mov	r5, r0
 8007bce:	460c      	mov	r4, r1
 8007bd0:	b913      	cbnz	r3, 8007bd8 <_fflush_r+0x10>
 8007bd2:	2500      	movs	r5, #0
 8007bd4:	4628      	mov	r0, r5
 8007bd6:	bd38      	pop	{r3, r4, r5, pc}
 8007bd8:	b118      	cbz	r0, 8007be2 <_fflush_r+0x1a>
 8007bda:	6983      	ldr	r3, [r0, #24]
 8007bdc:	b90b      	cbnz	r3, 8007be2 <_fflush_r+0x1a>
 8007bde:	f000 f887 	bl	8007cf0 <__sinit>
 8007be2:	4b14      	ldr	r3, [pc, #80]	; (8007c34 <_fflush_r+0x6c>)
 8007be4:	429c      	cmp	r4, r3
 8007be6:	d11b      	bne.n	8007c20 <_fflush_r+0x58>
 8007be8:	686c      	ldr	r4, [r5, #4]
 8007bea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d0ef      	beq.n	8007bd2 <_fflush_r+0xa>
 8007bf2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007bf4:	07d0      	lsls	r0, r2, #31
 8007bf6:	d404      	bmi.n	8007c02 <_fflush_r+0x3a>
 8007bf8:	0599      	lsls	r1, r3, #22
 8007bfa:	d402      	bmi.n	8007c02 <_fflush_r+0x3a>
 8007bfc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007bfe:	f000 f915 	bl	8007e2c <__retarget_lock_acquire_recursive>
 8007c02:	4628      	mov	r0, r5
 8007c04:	4621      	mov	r1, r4
 8007c06:	f7ff ff59 	bl	8007abc <__sflush_r>
 8007c0a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007c0c:	07da      	lsls	r2, r3, #31
 8007c0e:	4605      	mov	r5, r0
 8007c10:	d4e0      	bmi.n	8007bd4 <_fflush_r+0xc>
 8007c12:	89a3      	ldrh	r3, [r4, #12]
 8007c14:	059b      	lsls	r3, r3, #22
 8007c16:	d4dd      	bmi.n	8007bd4 <_fflush_r+0xc>
 8007c18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007c1a:	f000 f908 	bl	8007e2e <__retarget_lock_release_recursive>
 8007c1e:	e7d9      	b.n	8007bd4 <_fflush_r+0xc>
 8007c20:	4b05      	ldr	r3, [pc, #20]	; (8007c38 <_fflush_r+0x70>)
 8007c22:	429c      	cmp	r4, r3
 8007c24:	d101      	bne.n	8007c2a <_fflush_r+0x62>
 8007c26:	68ac      	ldr	r4, [r5, #8]
 8007c28:	e7df      	b.n	8007bea <_fflush_r+0x22>
 8007c2a:	4b04      	ldr	r3, [pc, #16]	; (8007c3c <_fflush_r+0x74>)
 8007c2c:	429c      	cmp	r4, r3
 8007c2e:	bf08      	it	eq
 8007c30:	68ec      	ldreq	r4, [r5, #12]
 8007c32:	e7da      	b.n	8007bea <_fflush_r+0x22>
 8007c34:	08009860 	.word	0x08009860
 8007c38:	08009880 	.word	0x08009880
 8007c3c:	08009840 	.word	0x08009840

08007c40 <std>:
 8007c40:	2300      	movs	r3, #0
 8007c42:	b510      	push	{r4, lr}
 8007c44:	4604      	mov	r4, r0
 8007c46:	e9c0 3300 	strd	r3, r3, [r0]
 8007c4a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007c4e:	6083      	str	r3, [r0, #8]
 8007c50:	8181      	strh	r1, [r0, #12]
 8007c52:	6643      	str	r3, [r0, #100]	; 0x64
 8007c54:	81c2      	strh	r2, [r0, #14]
 8007c56:	6183      	str	r3, [r0, #24]
 8007c58:	4619      	mov	r1, r3
 8007c5a:	2208      	movs	r2, #8
 8007c5c:	305c      	adds	r0, #92	; 0x5c
 8007c5e:	f7ff fa09 	bl	8007074 <memset>
 8007c62:	4b05      	ldr	r3, [pc, #20]	; (8007c78 <std+0x38>)
 8007c64:	6263      	str	r3, [r4, #36]	; 0x24
 8007c66:	4b05      	ldr	r3, [pc, #20]	; (8007c7c <std+0x3c>)
 8007c68:	62a3      	str	r3, [r4, #40]	; 0x28
 8007c6a:	4b05      	ldr	r3, [pc, #20]	; (8007c80 <std+0x40>)
 8007c6c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007c6e:	4b05      	ldr	r3, [pc, #20]	; (8007c84 <std+0x44>)
 8007c70:	6224      	str	r4, [r4, #32]
 8007c72:	6323      	str	r3, [r4, #48]	; 0x30
 8007c74:	bd10      	pop	{r4, pc}
 8007c76:	bf00      	nop
 8007c78:	08007f9d 	.word	0x08007f9d
 8007c7c:	08007fbf 	.word	0x08007fbf
 8007c80:	08007ff7 	.word	0x08007ff7
 8007c84:	0800801b 	.word	0x0800801b

08007c88 <_cleanup_r>:
 8007c88:	4901      	ldr	r1, [pc, #4]	; (8007c90 <_cleanup_r+0x8>)
 8007c8a:	f000 b8af 	b.w	8007dec <_fwalk_reent>
 8007c8e:	bf00      	nop
 8007c90:	08007bc9 	.word	0x08007bc9

08007c94 <__sfmoreglue>:
 8007c94:	b570      	push	{r4, r5, r6, lr}
 8007c96:	2268      	movs	r2, #104	; 0x68
 8007c98:	1e4d      	subs	r5, r1, #1
 8007c9a:	4355      	muls	r5, r2
 8007c9c:	460e      	mov	r6, r1
 8007c9e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007ca2:	f7ff fad1 	bl	8007248 <_malloc_r>
 8007ca6:	4604      	mov	r4, r0
 8007ca8:	b140      	cbz	r0, 8007cbc <__sfmoreglue+0x28>
 8007caa:	2100      	movs	r1, #0
 8007cac:	e9c0 1600 	strd	r1, r6, [r0]
 8007cb0:	300c      	adds	r0, #12
 8007cb2:	60a0      	str	r0, [r4, #8]
 8007cb4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007cb8:	f7ff f9dc 	bl	8007074 <memset>
 8007cbc:	4620      	mov	r0, r4
 8007cbe:	bd70      	pop	{r4, r5, r6, pc}

08007cc0 <__sfp_lock_acquire>:
 8007cc0:	4801      	ldr	r0, [pc, #4]	; (8007cc8 <__sfp_lock_acquire+0x8>)
 8007cc2:	f000 b8b3 	b.w	8007e2c <__retarget_lock_acquire_recursive>
 8007cc6:	bf00      	nop
 8007cc8:	20003685 	.word	0x20003685

08007ccc <__sfp_lock_release>:
 8007ccc:	4801      	ldr	r0, [pc, #4]	; (8007cd4 <__sfp_lock_release+0x8>)
 8007cce:	f000 b8ae 	b.w	8007e2e <__retarget_lock_release_recursive>
 8007cd2:	bf00      	nop
 8007cd4:	20003685 	.word	0x20003685

08007cd8 <__sinit_lock_acquire>:
 8007cd8:	4801      	ldr	r0, [pc, #4]	; (8007ce0 <__sinit_lock_acquire+0x8>)
 8007cda:	f000 b8a7 	b.w	8007e2c <__retarget_lock_acquire_recursive>
 8007cde:	bf00      	nop
 8007ce0:	20003686 	.word	0x20003686

08007ce4 <__sinit_lock_release>:
 8007ce4:	4801      	ldr	r0, [pc, #4]	; (8007cec <__sinit_lock_release+0x8>)
 8007ce6:	f000 b8a2 	b.w	8007e2e <__retarget_lock_release_recursive>
 8007cea:	bf00      	nop
 8007cec:	20003686 	.word	0x20003686

08007cf0 <__sinit>:
 8007cf0:	b510      	push	{r4, lr}
 8007cf2:	4604      	mov	r4, r0
 8007cf4:	f7ff fff0 	bl	8007cd8 <__sinit_lock_acquire>
 8007cf8:	69a3      	ldr	r3, [r4, #24]
 8007cfa:	b11b      	cbz	r3, 8007d04 <__sinit+0x14>
 8007cfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d00:	f7ff bff0 	b.w	8007ce4 <__sinit_lock_release>
 8007d04:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007d08:	6523      	str	r3, [r4, #80]	; 0x50
 8007d0a:	4b13      	ldr	r3, [pc, #76]	; (8007d58 <__sinit+0x68>)
 8007d0c:	4a13      	ldr	r2, [pc, #76]	; (8007d5c <__sinit+0x6c>)
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	62a2      	str	r2, [r4, #40]	; 0x28
 8007d12:	42a3      	cmp	r3, r4
 8007d14:	bf04      	itt	eq
 8007d16:	2301      	moveq	r3, #1
 8007d18:	61a3      	streq	r3, [r4, #24]
 8007d1a:	4620      	mov	r0, r4
 8007d1c:	f000 f820 	bl	8007d60 <__sfp>
 8007d20:	6060      	str	r0, [r4, #4]
 8007d22:	4620      	mov	r0, r4
 8007d24:	f000 f81c 	bl	8007d60 <__sfp>
 8007d28:	60a0      	str	r0, [r4, #8]
 8007d2a:	4620      	mov	r0, r4
 8007d2c:	f000 f818 	bl	8007d60 <__sfp>
 8007d30:	2200      	movs	r2, #0
 8007d32:	60e0      	str	r0, [r4, #12]
 8007d34:	2104      	movs	r1, #4
 8007d36:	6860      	ldr	r0, [r4, #4]
 8007d38:	f7ff ff82 	bl	8007c40 <std>
 8007d3c:	68a0      	ldr	r0, [r4, #8]
 8007d3e:	2201      	movs	r2, #1
 8007d40:	2109      	movs	r1, #9
 8007d42:	f7ff ff7d 	bl	8007c40 <std>
 8007d46:	68e0      	ldr	r0, [r4, #12]
 8007d48:	2202      	movs	r2, #2
 8007d4a:	2112      	movs	r1, #18
 8007d4c:	f7ff ff78 	bl	8007c40 <std>
 8007d50:	2301      	movs	r3, #1
 8007d52:	61a3      	str	r3, [r4, #24]
 8007d54:	e7d2      	b.n	8007cfc <__sinit+0xc>
 8007d56:	bf00      	nop
 8007d58:	08009758 	.word	0x08009758
 8007d5c:	08007c89 	.word	0x08007c89

08007d60 <__sfp>:
 8007d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d62:	4607      	mov	r7, r0
 8007d64:	f7ff ffac 	bl	8007cc0 <__sfp_lock_acquire>
 8007d68:	4b1e      	ldr	r3, [pc, #120]	; (8007de4 <__sfp+0x84>)
 8007d6a:	681e      	ldr	r6, [r3, #0]
 8007d6c:	69b3      	ldr	r3, [r6, #24]
 8007d6e:	b913      	cbnz	r3, 8007d76 <__sfp+0x16>
 8007d70:	4630      	mov	r0, r6
 8007d72:	f7ff ffbd 	bl	8007cf0 <__sinit>
 8007d76:	3648      	adds	r6, #72	; 0x48
 8007d78:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007d7c:	3b01      	subs	r3, #1
 8007d7e:	d503      	bpl.n	8007d88 <__sfp+0x28>
 8007d80:	6833      	ldr	r3, [r6, #0]
 8007d82:	b30b      	cbz	r3, 8007dc8 <__sfp+0x68>
 8007d84:	6836      	ldr	r6, [r6, #0]
 8007d86:	e7f7      	b.n	8007d78 <__sfp+0x18>
 8007d88:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007d8c:	b9d5      	cbnz	r5, 8007dc4 <__sfp+0x64>
 8007d8e:	4b16      	ldr	r3, [pc, #88]	; (8007de8 <__sfp+0x88>)
 8007d90:	60e3      	str	r3, [r4, #12]
 8007d92:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007d96:	6665      	str	r5, [r4, #100]	; 0x64
 8007d98:	f000 f847 	bl	8007e2a <__retarget_lock_init_recursive>
 8007d9c:	f7ff ff96 	bl	8007ccc <__sfp_lock_release>
 8007da0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007da4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007da8:	6025      	str	r5, [r4, #0]
 8007daa:	61a5      	str	r5, [r4, #24]
 8007dac:	2208      	movs	r2, #8
 8007dae:	4629      	mov	r1, r5
 8007db0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007db4:	f7ff f95e 	bl	8007074 <memset>
 8007db8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007dbc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007dc0:	4620      	mov	r0, r4
 8007dc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007dc4:	3468      	adds	r4, #104	; 0x68
 8007dc6:	e7d9      	b.n	8007d7c <__sfp+0x1c>
 8007dc8:	2104      	movs	r1, #4
 8007dca:	4638      	mov	r0, r7
 8007dcc:	f7ff ff62 	bl	8007c94 <__sfmoreglue>
 8007dd0:	4604      	mov	r4, r0
 8007dd2:	6030      	str	r0, [r6, #0]
 8007dd4:	2800      	cmp	r0, #0
 8007dd6:	d1d5      	bne.n	8007d84 <__sfp+0x24>
 8007dd8:	f7ff ff78 	bl	8007ccc <__sfp_lock_release>
 8007ddc:	230c      	movs	r3, #12
 8007dde:	603b      	str	r3, [r7, #0]
 8007de0:	e7ee      	b.n	8007dc0 <__sfp+0x60>
 8007de2:	bf00      	nop
 8007de4:	08009758 	.word	0x08009758
 8007de8:	ffff0001 	.word	0xffff0001

08007dec <_fwalk_reent>:
 8007dec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007df0:	4606      	mov	r6, r0
 8007df2:	4688      	mov	r8, r1
 8007df4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007df8:	2700      	movs	r7, #0
 8007dfa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007dfe:	f1b9 0901 	subs.w	r9, r9, #1
 8007e02:	d505      	bpl.n	8007e10 <_fwalk_reent+0x24>
 8007e04:	6824      	ldr	r4, [r4, #0]
 8007e06:	2c00      	cmp	r4, #0
 8007e08:	d1f7      	bne.n	8007dfa <_fwalk_reent+0xe>
 8007e0a:	4638      	mov	r0, r7
 8007e0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e10:	89ab      	ldrh	r3, [r5, #12]
 8007e12:	2b01      	cmp	r3, #1
 8007e14:	d907      	bls.n	8007e26 <_fwalk_reent+0x3a>
 8007e16:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007e1a:	3301      	adds	r3, #1
 8007e1c:	d003      	beq.n	8007e26 <_fwalk_reent+0x3a>
 8007e1e:	4629      	mov	r1, r5
 8007e20:	4630      	mov	r0, r6
 8007e22:	47c0      	blx	r8
 8007e24:	4307      	orrs	r7, r0
 8007e26:	3568      	adds	r5, #104	; 0x68
 8007e28:	e7e9      	b.n	8007dfe <_fwalk_reent+0x12>

08007e2a <__retarget_lock_init_recursive>:
 8007e2a:	4770      	bx	lr

08007e2c <__retarget_lock_acquire_recursive>:
 8007e2c:	4770      	bx	lr

08007e2e <__retarget_lock_release_recursive>:
 8007e2e:	4770      	bx	lr

08007e30 <__swhatbuf_r>:
 8007e30:	b570      	push	{r4, r5, r6, lr}
 8007e32:	460e      	mov	r6, r1
 8007e34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e38:	2900      	cmp	r1, #0
 8007e3a:	b096      	sub	sp, #88	; 0x58
 8007e3c:	4614      	mov	r4, r2
 8007e3e:	461d      	mov	r5, r3
 8007e40:	da08      	bge.n	8007e54 <__swhatbuf_r+0x24>
 8007e42:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007e46:	2200      	movs	r2, #0
 8007e48:	602a      	str	r2, [r5, #0]
 8007e4a:	061a      	lsls	r2, r3, #24
 8007e4c:	d410      	bmi.n	8007e70 <__swhatbuf_r+0x40>
 8007e4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007e52:	e00e      	b.n	8007e72 <__swhatbuf_r+0x42>
 8007e54:	466a      	mov	r2, sp
 8007e56:	f000 f907 	bl	8008068 <_fstat_r>
 8007e5a:	2800      	cmp	r0, #0
 8007e5c:	dbf1      	blt.n	8007e42 <__swhatbuf_r+0x12>
 8007e5e:	9a01      	ldr	r2, [sp, #4]
 8007e60:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007e64:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007e68:	425a      	negs	r2, r3
 8007e6a:	415a      	adcs	r2, r3
 8007e6c:	602a      	str	r2, [r5, #0]
 8007e6e:	e7ee      	b.n	8007e4e <__swhatbuf_r+0x1e>
 8007e70:	2340      	movs	r3, #64	; 0x40
 8007e72:	2000      	movs	r0, #0
 8007e74:	6023      	str	r3, [r4, #0]
 8007e76:	b016      	add	sp, #88	; 0x58
 8007e78:	bd70      	pop	{r4, r5, r6, pc}
	...

08007e7c <__smakebuf_r>:
 8007e7c:	898b      	ldrh	r3, [r1, #12]
 8007e7e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007e80:	079d      	lsls	r5, r3, #30
 8007e82:	4606      	mov	r6, r0
 8007e84:	460c      	mov	r4, r1
 8007e86:	d507      	bpl.n	8007e98 <__smakebuf_r+0x1c>
 8007e88:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007e8c:	6023      	str	r3, [r4, #0]
 8007e8e:	6123      	str	r3, [r4, #16]
 8007e90:	2301      	movs	r3, #1
 8007e92:	6163      	str	r3, [r4, #20]
 8007e94:	b002      	add	sp, #8
 8007e96:	bd70      	pop	{r4, r5, r6, pc}
 8007e98:	ab01      	add	r3, sp, #4
 8007e9a:	466a      	mov	r2, sp
 8007e9c:	f7ff ffc8 	bl	8007e30 <__swhatbuf_r>
 8007ea0:	9900      	ldr	r1, [sp, #0]
 8007ea2:	4605      	mov	r5, r0
 8007ea4:	4630      	mov	r0, r6
 8007ea6:	f7ff f9cf 	bl	8007248 <_malloc_r>
 8007eaa:	b948      	cbnz	r0, 8007ec0 <__smakebuf_r+0x44>
 8007eac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007eb0:	059a      	lsls	r2, r3, #22
 8007eb2:	d4ef      	bmi.n	8007e94 <__smakebuf_r+0x18>
 8007eb4:	f023 0303 	bic.w	r3, r3, #3
 8007eb8:	f043 0302 	orr.w	r3, r3, #2
 8007ebc:	81a3      	strh	r3, [r4, #12]
 8007ebe:	e7e3      	b.n	8007e88 <__smakebuf_r+0xc>
 8007ec0:	4b0d      	ldr	r3, [pc, #52]	; (8007ef8 <__smakebuf_r+0x7c>)
 8007ec2:	62b3      	str	r3, [r6, #40]	; 0x28
 8007ec4:	89a3      	ldrh	r3, [r4, #12]
 8007ec6:	6020      	str	r0, [r4, #0]
 8007ec8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ecc:	81a3      	strh	r3, [r4, #12]
 8007ece:	9b00      	ldr	r3, [sp, #0]
 8007ed0:	6163      	str	r3, [r4, #20]
 8007ed2:	9b01      	ldr	r3, [sp, #4]
 8007ed4:	6120      	str	r0, [r4, #16]
 8007ed6:	b15b      	cbz	r3, 8007ef0 <__smakebuf_r+0x74>
 8007ed8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007edc:	4630      	mov	r0, r6
 8007ede:	f000 f8d5 	bl	800808c <_isatty_r>
 8007ee2:	b128      	cbz	r0, 8007ef0 <__smakebuf_r+0x74>
 8007ee4:	89a3      	ldrh	r3, [r4, #12]
 8007ee6:	f023 0303 	bic.w	r3, r3, #3
 8007eea:	f043 0301 	orr.w	r3, r3, #1
 8007eee:	81a3      	strh	r3, [r4, #12]
 8007ef0:	89a0      	ldrh	r0, [r4, #12]
 8007ef2:	4305      	orrs	r5, r0
 8007ef4:	81a5      	strh	r5, [r4, #12]
 8007ef6:	e7cd      	b.n	8007e94 <__smakebuf_r+0x18>
 8007ef8:	08007c89 	.word	0x08007c89

08007efc <__malloc_lock>:
 8007efc:	4801      	ldr	r0, [pc, #4]	; (8007f04 <__malloc_lock+0x8>)
 8007efe:	f7ff bf95 	b.w	8007e2c <__retarget_lock_acquire_recursive>
 8007f02:	bf00      	nop
 8007f04:	20003684 	.word	0x20003684

08007f08 <__malloc_unlock>:
 8007f08:	4801      	ldr	r0, [pc, #4]	; (8007f10 <__malloc_unlock+0x8>)
 8007f0a:	f7ff bf90 	b.w	8007e2e <__retarget_lock_release_recursive>
 8007f0e:	bf00      	nop
 8007f10:	20003684 	.word	0x20003684

08007f14 <_raise_r>:
 8007f14:	291f      	cmp	r1, #31
 8007f16:	b538      	push	{r3, r4, r5, lr}
 8007f18:	4604      	mov	r4, r0
 8007f1a:	460d      	mov	r5, r1
 8007f1c:	d904      	bls.n	8007f28 <_raise_r+0x14>
 8007f1e:	2316      	movs	r3, #22
 8007f20:	6003      	str	r3, [r0, #0]
 8007f22:	f04f 30ff 	mov.w	r0, #4294967295
 8007f26:	bd38      	pop	{r3, r4, r5, pc}
 8007f28:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007f2a:	b112      	cbz	r2, 8007f32 <_raise_r+0x1e>
 8007f2c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007f30:	b94b      	cbnz	r3, 8007f46 <_raise_r+0x32>
 8007f32:	4620      	mov	r0, r4
 8007f34:	f000 f830 	bl	8007f98 <_getpid_r>
 8007f38:	462a      	mov	r2, r5
 8007f3a:	4601      	mov	r1, r0
 8007f3c:	4620      	mov	r0, r4
 8007f3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007f42:	f000 b817 	b.w	8007f74 <_kill_r>
 8007f46:	2b01      	cmp	r3, #1
 8007f48:	d00a      	beq.n	8007f60 <_raise_r+0x4c>
 8007f4a:	1c59      	adds	r1, r3, #1
 8007f4c:	d103      	bne.n	8007f56 <_raise_r+0x42>
 8007f4e:	2316      	movs	r3, #22
 8007f50:	6003      	str	r3, [r0, #0]
 8007f52:	2001      	movs	r0, #1
 8007f54:	e7e7      	b.n	8007f26 <_raise_r+0x12>
 8007f56:	2400      	movs	r4, #0
 8007f58:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007f5c:	4628      	mov	r0, r5
 8007f5e:	4798      	blx	r3
 8007f60:	2000      	movs	r0, #0
 8007f62:	e7e0      	b.n	8007f26 <_raise_r+0x12>

08007f64 <raise>:
 8007f64:	4b02      	ldr	r3, [pc, #8]	; (8007f70 <raise+0xc>)
 8007f66:	4601      	mov	r1, r0
 8007f68:	6818      	ldr	r0, [r3, #0]
 8007f6a:	f7ff bfd3 	b.w	8007f14 <_raise_r>
 8007f6e:	bf00      	nop
 8007f70:	20000018 	.word	0x20000018

08007f74 <_kill_r>:
 8007f74:	b538      	push	{r3, r4, r5, lr}
 8007f76:	4d07      	ldr	r5, [pc, #28]	; (8007f94 <_kill_r+0x20>)
 8007f78:	2300      	movs	r3, #0
 8007f7a:	4604      	mov	r4, r0
 8007f7c:	4608      	mov	r0, r1
 8007f7e:	4611      	mov	r1, r2
 8007f80:	602b      	str	r3, [r5, #0]
 8007f82:	f7fb fe75 	bl	8003c70 <_kill>
 8007f86:	1c43      	adds	r3, r0, #1
 8007f88:	d102      	bne.n	8007f90 <_kill_r+0x1c>
 8007f8a:	682b      	ldr	r3, [r5, #0]
 8007f8c:	b103      	cbz	r3, 8007f90 <_kill_r+0x1c>
 8007f8e:	6023      	str	r3, [r4, #0]
 8007f90:	bd38      	pop	{r3, r4, r5, pc}
 8007f92:	bf00      	nop
 8007f94:	20003688 	.word	0x20003688

08007f98 <_getpid_r>:
 8007f98:	f7fb be62 	b.w	8003c60 <_getpid>

08007f9c <__sread>:
 8007f9c:	b510      	push	{r4, lr}
 8007f9e:	460c      	mov	r4, r1
 8007fa0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fa4:	f000 f894 	bl	80080d0 <_read_r>
 8007fa8:	2800      	cmp	r0, #0
 8007faa:	bfab      	itete	ge
 8007fac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007fae:	89a3      	ldrhlt	r3, [r4, #12]
 8007fb0:	181b      	addge	r3, r3, r0
 8007fb2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007fb6:	bfac      	ite	ge
 8007fb8:	6563      	strge	r3, [r4, #84]	; 0x54
 8007fba:	81a3      	strhlt	r3, [r4, #12]
 8007fbc:	bd10      	pop	{r4, pc}

08007fbe <__swrite>:
 8007fbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007fc2:	461f      	mov	r7, r3
 8007fc4:	898b      	ldrh	r3, [r1, #12]
 8007fc6:	05db      	lsls	r3, r3, #23
 8007fc8:	4605      	mov	r5, r0
 8007fca:	460c      	mov	r4, r1
 8007fcc:	4616      	mov	r6, r2
 8007fce:	d505      	bpl.n	8007fdc <__swrite+0x1e>
 8007fd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fd4:	2302      	movs	r3, #2
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	f000 f868 	bl	80080ac <_lseek_r>
 8007fdc:	89a3      	ldrh	r3, [r4, #12]
 8007fde:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007fe2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007fe6:	81a3      	strh	r3, [r4, #12]
 8007fe8:	4632      	mov	r2, r6
 8007fea:	463b      	mov	r3, r7
 8007fec:	4628      	mov	r0, r5
 8007fee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007ff2:	f000 b817 	b.w	8008024 <_write_r>

08007ff6 <__sseek>:
 8007ff6:	b510      	push	{r4, lr}
 8007ff8:	460c      	mov	r4, r1
 8007ffa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ffe:	f000 f855 	bl	80080ac <_lseek_r>
 8008002:	1c43      	adds	r3, r0, #1
 8008004:	89a3      	ldrh	r3, [r4, #12]
 8008006:	bf15      	itete	ne
 8008008:	6560      	strne	r0, [r4, #84]	; 0x54
 800800a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800800e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008012:	81a3      	strheq	r3, [r4, #12]
 8008014:	bf18      	it	ne
 8008016:	81a3      	strhne	r3, [r4, #12]
 8008018:	bd10      	pop	{r4, pc}

0800801a <__sclose>:
 800801a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800801e:	f000 b813 	b.w	8008048 <_close_r>
	...

08008024 <_write_r>:
 8008024:	b538      	push	{r3, r4, r5, lr}
 8008026:	4d07      	ldr	r5, [pc, #28]	; (8008044 <_write_r+0x20>)
 8008028:	4604      	mov	r4, r0
 800802a:	4608      	mov	r0, r1
 800802c:	4611      	mov	r1, r2
 800802e:	2200      	movs	r2, #0
 8008030:	602a      	str	r2, [r5, #0]
 8008032:	461a      	mov	r2, r3
 8008034:	f7fb fe53 	bl	8003cde <_write>
 8008038:	1c43      	adds	r3, r0, #1
 800803a:	d102      	bne.n	8008042 <_write_r+0x1e>
 800803c:	682b      	ldr	r3, [r5, #0]
 800803e:	b103      	cbz	r3, 8008042 <_write_r+0x1e>
 8008040:	6023      	str	r3, [r4, #0]
 8008042:	bd38      	pop	{r3, r4, r5, pc}
 8008044:	20003688 	.word	0x20003688

08008048 <_close_r>:
 8008048:	b538      	push	{r3, r4, r5, lr}
 800804a:	4d06      	ldr	r5, [pc, #24]	; (8008064 <_close_r+0x1c>)
 800804c:	2300      	movs	r3, #0
 800804e:	4604      	mov	r4, r0
 8008050:	4608      	mov	r0, r1
 8008052:	602b      	str	r3, [r5, #0]
 8008054:	f7fb fe5f 	bl	8003d16 <_close>
 8008058:	1c43      	adds	r3, r0, #1
 800805a:	d102      	bne.n	8008062 <_close_r+0x1a>
 800805c:	682b      	ldr	r3, [r5, #0]
 800805e:	b103      	cbz	r3, 8008062 <_close_r+0x1a>
 8008060:	6023      	str	r3, [r4, #0]
 8008062:	bd38      	pop	{r3, r4, r5, pc}
 8008064:	20003688 	.word	0x20003688

08008068 <_fstat_r>:
 8008068:	b538      	push	{r3, r4, r5, lr}
 800806a:	4d07      	ldr	r5, [pc, #28]	; (8008088 <_fstat_r+0x20>)
 800806c:	2300      	movs	r3, #0
 800806e:	4604      	mov	r4, r0
 8008070:	4608      	mov	r0, r1
 8008072:	4611      	mov	r1, r2
 8008074:	602b      	str	r3, [r5, #0]
 8008076:	f7fb fe5a 	bl	8003d2e <_fstat>
 800807a:	1c43      	adds	r3, r0, #1
 800807c:	d102      	bne.n	8008084 <_fstat_r+0x1c>
 800807e:	682b      	ldr	r3, [r5, #0]
 8008080:	b103      	cbz	r3, 8008084 <_fstat_r+0x1c>
 8008082:	6023      	str	r3, [r4, #0]
 8008084:	bd38      	pop	{r3, r4, r5, pc}
 8008086:	bf00      	nop
 8008088:	20003688 	.word	0x20003688

0800808c <_isatty_r>:
 800808c:	b538      	push	{r3, r4, r5, lr}
 800808e:	4d06      	ldr	r5, [pc, #24]	; (80080a8 <_isatty_r+0x1c>)
 8008090:	2300      	movs	r3, #0
 8008092:	4604      	mov	r4, r0
 8008094:	4608      	mov	r0, r1
 8008096:	602b      	str	r3, [r5, #0]
 8008098:	f7fb fe59 	bl	8003d4e <_isatty>
 800809c:	1c43      	adds	r3, r0, #1
 800809e:	d102      	bne.n	80080a6 <_isatty_r+0x1a>
 80080a0:	682b      	ldr	r3, [r5, #0]
 80080a2:	b103      	cbz	r3, 80080a6 <_isatty_r+0x1a>
 80080a4:	6023      	str	r3, [r4, #0]
 80080a6:	bd38      	pop	{r3, r4, r5, pc}
 80080a8:	20003688 	.word	0x20003688

080080ac <_lseek_r>:
 80080ac:	b538      	push	{r3, r4, r5, lr}
 80080ae:	4d07      	ldr	r5, [pc, #28]	; (80080cc <_lseek_r+0x20>)
 80080b0:	4604      	mov	r4, r0
 80080b2:	4608      	mov	r0, r1
 80080b4:	4611      	mov	r1, r2
 80080b6:	2200      	movs	r2, #0
 80080b8:	602a      	str	r2, [r5, #0]
 80080ba:	461a      	mov	r2, r3
 80080bc:	f7fb fe52 	bl	8003d64 <_lseek>
 80080c0:	1c43      	adds	r3, r0, #1
 80080c2:	d102      	bne.n	80080ca <_lseek_r+0x1e>
 80080c4:	682b      	ldr	r3, [r5, #0]
 80080c6:	b103      	cbz	r3, 80080ca <_lseek_r+0x1e>
 80080c8:	6023      	str	r3, [r4, #0]
 80080ca:	bd38      	pop	{r3, r4, r5, pc}
 80080cc:	20003688 	.word	0x20003688

080080d0 <_read_r>:
 80080d0:	b538      	push	{r3, r4, r5, lr}
 80080d2:	4d07      	ldr	r5, [pc, #28]	; (80080f0 <_read_r+0x20>)
 80080d4:	4604      	mov	r4, r0
 80080d6:	4608      	mov	r0, r1
 80080d8:	4611      	mov	r1, r2
 80080da:	2200      	movs	r2, #0
 80080dc:	602a      	str	r2, [r5, #0]
 80080de:	461a      	mov	r2, r3
 80080e0:	f7fb fde0 	bl	8003ca4 <_read>
 80080e4:	1c43      	adds	r3, r0, #1
 80080e6:	d102      	bne.n	80080ee <_read_r+0x1e>
 80080e8:	682b      	ldr	r3, [r5, #0]
 80080ea:	b103      	cbz	r3, 80080ee <_read_r+0x1e>
 80080ec:	6023      	str	r3, [r4, #0]
 80080ee:	bd38      	pop	{r3, r4, r5, pc}
 80080f0:	20003688 	.word	0x20003688

080080f4 <pow>:
 80080f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080f6:	ed2d 8b02 	vpush	{d8}
 80080fa:	eeb0 8a40 	vmov.f32	s16, s0
 80080fe:	eef0 8a60 	vmov.f32	s17, s1
 8008102:	ec55 4b11 	vmov	r4, r5, d1
 8008106:	f000 f893 	bl	8008230 <__ieee754_pow>
 800810a:	4622      	mov	r2, r4
 800810c:	462b      	mov	r3, r5
 800810e:	4620      	mov	r0, r4
 8008110:	4629      	mov	r1, r5
 8008112:	ec57 6b10 	vmov	r6, r7, d0
 8008116:	f7f8 fd01 	bl	8000b1c <__aeabi_dcmpun>
 800811a:	2800      	cmp	r0, #0
 800811c:	d13b      	bne.n	8008196 <pow+0xa2>
 800811e:	ec51 0b18 	vmov	r0, r1, d8
 8008122:	2200      	movs	r2, #0
 8008124:	2300      	movs	r3, #0
 8008126:	f7f8 fcc7 	bl	8000ab8 <__aeabi_dcmpeq>
 800812a:	b1b8      	cbz	r0, 800815c <pow+0x68>
 800812c:	2200      	movs	r2, #0
 800812e:	2300      	movs	r3, #0
 8008130:	4620      	mov	r0, r4
 8008132:	4629      	mov	r1, r5
 8008134:	f7f8 fcc0 	bl	8000ab8 <__aeabi_dcmpeq>
 8008138:	2800      	cmp	r0, #0
 800813a:	d146      	bne.n	80081ca <pow+0xd6>
 800813c:	ec45 4b10 	vmov	d0, r4, r5
 8008140:	f000 fe8f 	bl	8008e62 <finite>
 8008144:	b338      	cbz	r0, 8008196 <pow+0xa2>
 8008146:	2200      	movs	r2, #0
 8008148:	2300      	movs	r3, #0
 800814a:	4620      	mov	r0, r4
 800814c:	4629      	mov	r1, r5
 800814e:	f7f8 fcbd 	bl	8000acc <__aeabi_dcmplt>
 8008152:	b300      	cbz	r0, 8008196 <pow+0xa2>
 8008154:	f7fe ff64 	bl	8007020 <__errno>
 8008158:	2322      	movs	r3, #34	; 0x22
 800815a:	e01b      	b.n	8008194 <pow+0xa0>
 800815c:	ec47 6b10 	vmov	d0, r6, r7
 8008160:	f000 fe7f 	bl	8008e62 <finite>
 8008164:	b9e0      	cbnz	r0, 80081a0 <pow+0xac>
 8008166:	eeb0 0a48 	vmov.f32	s0, s16
 800816a:	eef0 0a68 	vmov.f32	s1, s17
 800816e:	f000 fe78 	bl	8008e62 <finite>
 8008172:	b1a8      	cbz	r0, 80081a0 <pow+0xac>
 8008174:	ec45 4b10 	vmov	d0, r4, r5
 8008178:	f000 fe73 	bl	8008e62 <finite>
 800817c:	b180      	cbz	r0, 80081a0 <pow+0xac>
 800817e:	4632      	mov	r2, r6
 8008180:	463b      	mov	r3, r7
 8008182:	4630      	mov	r0, r6
 8008184:	4639      	mov	r1, r7
 8008186:	f7f8 fcc9 	bl	8000b1c <__aeabi_dcmpun>
 800818a:	2800      	cmp	r0, #0
 800818c:	d0e2      	beq.n	8008154 <pow+0x60>
 800818e:	f7fe ff47 	bl	8007020 <__errno>
 8008192:	2321      	movs	r3, #33	; 0x21
 8008194:	6003      	str	r3, [r0, #0]
 8008196:	ecbd 8b02 	vpop	{d8}
 800819a:	ec47 6b10 	vmov	d0, r6, r7
 800819e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80081a0:	2200      	movs	r2, #0
 80081a2:	2300      	movs	r3, #0
 80081a4:	4630      	mov	r0, r6
 80081a6:	4639      	mov	r1, r7
 80081a8:	f7f8 fc86 	bl	8000ab8 <__aeabi_dcmpeq>
 80081ac:	2800      	cmp	r0, #0
 80081ae:	d0f2      	beq.n	8008196 <pow+0xa2>
 80081b0:	eeb0 0a48 	vmov.f32	s0, s16
 80081b4:	eef0 0a68 	vmov.f32	s1, s17
 80081b8:	f000 fe53 	bl	8008e62 <finite>
 80081bc:	2800      	cmp	r0, #0
 80081be:	d0ea      	beq.n	8008196 <pow+0xa2>
 80081c0:	ec45 4b10 	vmov	d0, r4, r5
 80081c4:	f000 fe4d 	bl	8008e62 <finite>
 80081c8:	e7c3      	b.n	8008152 <pow+0x5e>
 80081ca:	4f01      	ldr	r7, [pc, #4]	; (80081d0 <pow+0xdc>)
 80081cc:	2600      	movs	r6, #0
 80081ce:	e7e2      	b.n	8008196 <pow+0xa2>
 80081d0:	3ff00000 	.word	0x3ff00000

080081d4 <sqrt>:
 80081d4:	b538      	push	{r3, r4, r5, lr}
 80081d6:	ed2d 8b02 	vpush	{d8}
 80081da:	ec55 4b10 	vmov	r4, r5, d0
 80081de:	f000 fd55 	bl	8008c8c <__ieee754_sqrt>
 80081e2:	4622      	mov	r2, r4
 80081e4:	462b      	mov	r3, r5
 80081e6:	4620      	mov	r0, r4
 80081e8:	4629      	mov	r1, r5
 80081ea:	eeb0 8a40 	vmov.f32	s16, s0
 80081ee:	eef0 8a60 	vmov.f32	s17, s1
 80081f2:	f7f8 fc93 	bl	8000b1c <__aeabi_dcmpun>
 80081f6:	b990      	cbnz	r0, 800821e <sqrt+0x4a>
 80081f8:	2200      	movs	r2, #0
 80081fa:	2300      	movs	r3, #0
 80081fc:	4620      	mov	r0, r4
 80081fe:	4629      	mov	r1, r5
 8008200:	f7f8 fc64 	bl	8000acc <__aeabi_dcmplt>
 8008204:	b158      	cbz	r0, 800821e <sqrt+0x4a>
 8008206:	f7fe ff0b 	bl	8007020 <__errno>
 800820a:	2321      	movs	r3, #33	; 0x21
 800820c:	6003      	str	r3, [r0, #0]
 800820e:	2200      	movs	r2, #0
 8008210:	2300      	movs	r3, #0
 8008212:	4610      	mov	r0, r2
 8008214:	4619      	mov	r1, r3
 8008216:	f7f8 fb11 	bl	800083c <__aeabi_ddiv>
 800821a:	ec41 0b18 	vmov	d8, r0, r1
 800821e:	eeb0 0a48 	vmov.f32	s0, s16
 8008222:	eef0 0a68 	vmov.f32	s1, s17
 8008226:	ecbd 8b02 	vpop	{d8}
 800822a:	bd38      	pop	{r3, r4, r5, pc}
 800822c:	0000      	movs	r0, r0
	...

08008230 <__ieee754_pow>:
 8008230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008234:	ed2d 8b06 	vpush	{d8-d10}
 8008238:	b089      	sub	sp, #36	; 0x24
 800823a:	ed8d 1b00 	vstr	d1, [sp]
 800823e:	e9dd 2900 	ldrd	r2, r9, [sp]
 8008242:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8008246:	ea58 0102 	orrs.w	r1, r8, r2
 800824a:	ec57 6b10 	vmov	r6, r7, d0
 800824e:	d115      	bne.n	800827c <__ieee754_pow+0x4c>
 8008250:	19b3      	adds	r3, r6, r6
 8008252:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8008256:	4152      	adcs	r2, r2
 8008258:	4299      	cmp	r1, r3
 800825a:	4b89      	ldr	r3, [pc, #548]	; (8008480 <__ieee754_pow+0x250>)
 800825c:	4193      	sbcs	r3, r2
 800825e:	f080 84d2 	bcs.w	8008c06 <__ieee754_pow+0x9d6>
 8008262:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008266:	4630      	mov	r0, r6
 8008268:	4639      	mov	r1, r7
 800826a:	f7f8 f807 	bl	800027c <__adddf3>
 800826e:	ec41 0b10 	vmov	d0, r0, r1
 8008272:	b009      	add	sp, #36	; 0x24
 8008274:	ecbd 8b06 	vpop	{d8-d10}
 8008278:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800827c:	4b81      	ldr	r3, [pc, #516]	; (8008484 <__ieee754_pow+0x254>)
 800827e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8008282:	429c      	cmp	r4, r3
 8008284:	ee10 aa10 	vmov	sl, s0
 8008288:	463d      	mov	r5, r7
 800828a:	dc06      	bgt.n	800829a <__ieee754_pow+0x6a>
 800828c:	d101      	bne.n	8008292 <__ieee754_pow+0x62>
 800828e:	2e00      	cmp	r6, #0
 8008290:	d1e7      	bne.n	8008262 <__ieee754_pow+0x32>
 8008292:	4598      	cmp	r8, r3
 8008294:	dc01      	bgt.n	800829a <__ieee754_pow+0x6a>
 8008296:	d10f      	bne.n	80082b8 <__ieee754_pow+0x88>
 8008298:	b172      	cbz	r2, 80082b8 <__ieee754_pow+0x88>
 800829a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800829e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 80082a2:	ea55 050a 	orrs.w	r5, r5, sl
 80082a6:	d1dc      	bne.n	8008262 <__ieee754_pow+0x32>
 80082a8:	e9dd 3200 	ldrd	r3, r2, [sp]
 80082ac:	18db      	adds	r3, r3, r3
 80082ae:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 80082b2:	4152      	adcs	r2, r2
 80082b4:	429d      	cmp	r5, r3
 80082b6:	e7d0      	b.n	800825a <__ieee754_pow+0x2a>
 80082b8:	2d00      	cmp	r5, #0
 80082ba:	da3b      	bge.n	8008334 <__ieee754_pow+0x104>
 80082bc:	4b72      	ldr	r3, [pc, #456]	; (8008488 <__ieee754_pow+0x258>)
 80082be:	4598      	cmp	r8, r3
 80082c0:	dc51      	bgt.n	8008366 <__ieee754_pow+0x136>
 80082c2:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80082c6:	4598      	cmp	r8, r3
 80082c8:	f340 84ac 	ble.w	8008c24 <__ieee754_pow+0x9f4>
 80082cc:	ea4f 5328 	mov.w	r3, r8, asr #20
 80082d0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80082d4:	2b14      	cmp	r3, #20
 80082d6:	dd0f      	ble.n	80082f8 <__ieee754_pow+0xc8>
 80082d8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80082dc:	fa22 f103 	lsr.w	r1, r2, r3
 80082e0:	fa01 f303 	lsl.w	r3, r1, r3
 80082e4:	4293      	cmp	r3, r2
 80082e6:	f040 849d 	bne.w	8008c24 <__ieee754_pow+0x9f4>
 80082ea:	f001 0101 	and.w	r1, r1, #1
 80082ee:	f1c1 0302 	rsb	r3, r1, #2
 80082f2:	9304      	str	r3, [sp, #16]
 80082f4:	b182      	cbz	r2, 8008318 <__ieee754_pow+0xe8>
 80082f6:	e05f      	b.n	80083b8 <__ieee754_pow+0x188>
 80082f8:	2a00      	cmp	r2, #0
 80082fa:	d15b      	bne.n	80083b4 <__ieee754_pow+0x184>
 80082fc:	f1c3 0314 	rsb	r3, r3, #20
 8008300:	fa48 f103 	asr.w	r1, r8, r3
 8008304:	fa01 f303 	lsl.w	r3, r1, r3
 8008308:	4543      	cmp	r3, r8
 800830a:	f040 8488 	bne.w	8008c1e <__ieee754_pow+0x9ee>
 800830e:	f001 0101 	and.w	r1, r1, #1
 8008312:	f1c1 0302 	rsb	r3, r1, #2
 8008316:	9304      	str	r3, [sp, #16]
 8008318:	4b5c      	ldr	r3, [pc, #368]	; (800848c <__ieee754_pow+0x25c>)
 800831a:	4598      	cmp	r8, r3
 800831c:	d132      	bne.n	8008384 <__ieee754_pow+0x154>
 800831e:	f1b9 0f00 	cmp.w	r9, #0
 8008322:	f280 8478 	bge.w	8008c16 <__ieee754_pow+0x9e6>
 8008326:	4959      	ldr	r1, [pc, #356]	; (800848c <__ieee754_pow+0x25c>)
 8008328:	4632      	mov	r2, r6
 800832a:	463b      	mov	r3, r7
 800832c:	2000      	movs	r0, #0
 800832e:	f7f8 fa85 	bl	800083c <__aeabi_ddiv>
 8008332:	e79c      	b.n	800826e <__ieee754_pow+0x3e>
 8008334:	2300      	movs	r3, #0
 8008336:	9304      	str	r3, [sp, #16]
 8008338:	2a00      	cmp	r2, #0
 800833a:	d13d      	bne.n	80083b8 <__ieee754_pow+0x188>
 800833c:	4b51      	ldr	r3, [pc, #324]	; (8008484 <__ieee754_pow+0x254>)
 800833e:	4598      	cmp	r8, r3
 8008340:	d1ea      	bne.n	8008318 <__ieee754_pow+0xe8>
 8008342:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8008346:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800834a:	ea53 030a 	orrs.w	r3, r3, sl
 800834e:	f000 845a 	beq.w	8008c06 <__ieee754_pow+0x9d6>
 8008352:	4b4f      	ldr	r3, [pc, #316]	; (8008490 <__ieee754_pow+0x260>)
 8008354:	429c      	cmp	r4, r3
 8008356:	dd08      	ble.n	800836a <__ieee754_pow+0x13a>
 8008358:	f1b9 0f00 	cmp.w	r9, #0
 800835c:	f2c0 8457 	blt.w	8008c0e <__ieee754_pow+0x9de>
 8008360:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008364:	e783      	b.n	800826e <__ieee754_pow+0x3e>
 8008366:	2302      	movs	r3, #2
 8008368:	e7e5      	b.n	8008336 <__ieee754_pow+0x106>
 800836a:	f1b9 0f00 	cmp.w	r9, #0
 800836e:	f04f 0000 	mov.w	r0, #0
 8008372:	f04f 0100 	mov.w	r1, #0
 8008376:	f6bf af7a 	bge.w	800826e <__ieee754_pow+0x3e>
 800837a:	e9dd 0300 	ldrd	r0, r3, [sp]
 800837e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8008382:	e774      	b.n	800826e <__ieee754_pow+0x3e>
 8008384:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8008388:	d106      	bne.n	8008398 <__ieee754_pow+0x168>
 800838a:	4632      	mov	r2, r6
 800838c:	463b      	mov	r3, r7
 800838e:	4630      	mov	r0, r6
 8008390:	4639      	mov	r1, r7
 8008392:	f7f8 f929 	bl	80005e8 <__aeabi_dmul>
 8008396:	e76a      	b.n	800826e <__ieee754_pow+0x3e>
 8008398:	4b3e      	ldr	r3, [pc, #248]	; (8008494 <__ieee754_pow+0x264>)
 800839a:	4599      	cmp	r9, r3
 800839c:	d10c      	bne.n	80083b8 <__ieee754_pow+0x188>
 800839e:	2d00      	cmp	r5, #0
 80083a0:	db0a      	blt.n	80083b8 <__ieee754_pow+0x188>
 80083a2:	ec47 6b10 	vmov	d0, r6, r7
 80083a6:	b009      	add	sp, #36	; 0x24
 80083a8:	ecbd 8b06 	vpop	{d8-d10}
 80083ac:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083b0:	f000 bc6c 	b.w	8008c8c <__ieee754_sqrt>
 80083b4:	2300      	movs	r3, #0
 80083b6:	9304      	str	r3, [sp, #16]
 80083b8:	ec47 6b10 	vmov	d0, r6, r7
 80083bc:	f000 fd48 	bl	8008e50 <fabs>
 80083c0:	ec51 0b10 	vmov	r0, r1, d0
 80083c4:	f1ba 0f00 	cmp.w	sl, #0
 80083c8:	d129      	bne.n	800841e <__ieee754_pow+0x1ee>
 80083ca:	b124      	cbz	r4, 80083d6 <__ieee754_pow+0x1a6>
 80083cc:	4b2f      	ldr	r3, [pc, #188]	; (800848c <__ieee754_pow+0x25c>)
 80083ce:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80083d2:	429a      	cmp	r2, r3
 80083d4:	d123      	bne.n	800841e <__ieee754_pow+0x1ee>
 80083d6:	f1b9 0f00 	cmp.w	r9, #0
 80083da:	da05      	bge.n	80083e8 <__ieee754_pow+0x1b8>
 80083dc:	4602      	mov	r2, r0
 80083de:	460b      	mov	r3, r1
 80083e0:	2000      	movs	r0, #0
 80083e2:	492a      	ldr	r1, [pc, #168]	; (800848c <__ieee754_pow+0x25c>)
 80083e4:	f7f8 fa2a 	bl	800083c <__aeabi_ddiv>
 80083e8:	2d00      	cmp	r5, #0
 80083ea:	f6bf af40 	bge.w	800826e <__ieee754_pow+0x3e>
 80083ee:	9b04      	ldr	r3, [sp, #16]
 80083f0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80083f4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80083f8:	4323      	orrs	r3, r4
 80083fa:	d108      	bne.n	800840e <__ieee754_pow+0x1de>
 80083fc:	4602      	mov	r2, r0
 80083fe:	460b      	mov	r3, r1
 8008400:	4610      	mov	r0, r2
 8008402:	4619      	mov	r1, r3
 8008404:	f7f7 ff38 	bl	8000278 <__aeabi_dsub>
 8008408:	4602      	mov	r2, r0
 800840a:	460b      	mov	r3, r1
 800840c:	e78f      	b.n	800832e <__ieee754_pow+0xfe>
 800840e:	9b04      	ldr	r3, [sp, #16]
 8008410:	2b01      	cmp	r3, #1
 8008412:	f47f af2c 	bne.w	800826e <__ieee754_pow+0x3e>
 8008416:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800841a:	4619      	mov	r1, r3
 800841c:	e727      	b.n	800826e <__ieee754_pow+0x3e>
 800841e:	0feb      	lsrs	r3, r5, #31
 8008420:	3b01      	subs	r3, #1
 8008422:	9306      	str	r3, [sp, #24]
 8008424:	9a06      	ldr	r2, [sp, #24]
 8008426:	9b04      	ldr	r3, [sp, #16]
 8008428:	4313      	orrs	r3, r2
 800842a:	d102      	bne.n	8008432 <__ieee754_pow+0x202>
 800842c:	4632      	mov	r2, r6
 800842e:	463b      	mov	r3, r7
 8008430:	e7e6      	b.n	8008400 <__ieee754_pow+0x1d0>
 8008432:	4b19      	ldr	r3, [pc, #100]	; (8008498 <__ieee754_pow+0x268>)
 8008434:	4598      	cmp	r8, r3
 8008436:	f340 80fb 	ble.w	8008630 <__ieee754_pow+0x400>
 800843a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800843e:	4598      	cmp	r8, r3
 8008440:	4b13      	ldr	r3, [pc, #76]	; (8008490 <__ieee754_pow+0x260>)
 8008442:	dd0c      	ble.n	800845e <__ieee754_pow+0x22e>
 8008444:	429c      	cmp	r4, r3
 8008446:	dc0f      	bgt.n	8008468 <__ieee754_pow+0x238>
 8008448:	f1b9 0f00 	cmp.w	r9, #0
 800844c:	da0f      	bge.n	800846e <__ieee754_pow+0x23e>
 800844e:	2000      	movs	r0, #0
 8008450:	b009      	add	sp, #36	; 0x24
 8008452:	ecbd 8b06 	vpop	{d8-d10}
 8008456:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800845a:	f000 bcf0 	b.w	8008e3e <__math_oflow>
 800845e:	429c      	cmp	r4, r3
 8008460:	dbf2      	blt.n	8008448 <__ieee754_pow+0x218>
 8008462:	4b0a      	ldr	r3, [pc, #40]	; (800848c <__ieee754_pow+0x25c>)
 8008464:	429c      	cmp	r4, r3
 8008466:	dd19      	ble.n	800849c <__ieee754_pow+0x26c>
 8008468:	f1b9 0f00 	cmp.w	r9, #0
 800846c:	dcef      	bgt.n	800844e <__ieee754_pow+0x21e>
 800846e:	2000      	movs	r0, #0
 8008470:	b009      	add	sp, #36	; 0x24
 8008472:	ecbd 8b06 	vpop	{d8-d10}
 8008476:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800847a:	f000 bcd7 	b.w	8008e2c <__math_uflow>
 800847e:	bf00      	nop
 8008480:	fff00000 	.word	0xfff00000
 8008484:	7ff00000 	.word	0x7ff00000
 8008488:	433fffff 	.word	0x433fffff
 800848c:	3ff00000 	.word	0x3ff00000
 8008490:	3fefffff 	.word	0x3fefffff
 8008494:	3fe00000 	.word	0x3fe00000
 8008498:	41e00000 	.word	0x41e00000
 800849c:	4b60      	ldr	r3, [pc, #384]	; (8008620 <__ieee754_pow+0x3f0>)
 800849e:	2200      	movs	r2, #0
 80084a0:	f7f7 feea 	bl	8000278 <__aeabi_dsub>
 80084a4:	a354      	add	r3, pc, #336	; (adr r3, 80085f8 <__ieee754_pow+0x3c8>)
 80084a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084aa:	4604      	mov	r4, r0
 80084ac:	460d      	mov	r5, r1
 80084ae:	f7f8 f89b 	bl	80005e8 <__aeabi_dmul>
 80084b2:	a353      	add	r3, pc, #332	; (adr r3, 8008600 <__ieee754_pow+0x3d0>)
 80084b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084b8:	4606      	mov	r6, r0
 80084ba:	460f      	mov	r7, r1
 80084bc:	4620      	mov	r0, r4
 80084be:	4629      	mov	r1, r5
 80084c0:	f7f8 f892 	bl	80005e8 <__aeabi_dmul>
 80084c4:	4b57      	ldr	r3, [pc, #348]	; (8008624 <__ieee754_pow+0x3f4>)
 80084c6:	4682      	mov	sl, r0
 80084c8:	468b      	mov	fp, r1
 80084ca:	2200      	movs	r2, #0
 80084cc:	4620      	mov	r0, r4
 80084ce:	4629      	mov	r1, r5
 80084d0:	f7f8 f88a 	bl	80005e8 <__aeabi_dmul>
 80084d4:	4602      	mov	r2, r0
 80084d6:	460b      	mov	r3, r1
 80084d8:	a14b      	add	r1, pc, #300	; (adr r1, 8008608 <__ieee754_pow+0x3d8>)
 80084da:	e9d1 0100 	ldrd	r0, r1, [r1]
 80084de:	f7f7 fecb 	bl	8000278 <__aeabi_dsub>
 80084e2:	4622      	mov	r2, r4
 80084e4:	462b      	mov	r3, r5
 80084e6:	f7f8 f87f 	bl	80005e8 <__aeabi_dmul>
 80084ea:	4602      	mov	r2, r0
 80084ec:	460b      	mov	r3, r1
 80084ee:	2000      	movs	r0, #0
 80084f0:	494d      	ldr	r1, [pc, #308]	; (8008628 <__ieee754_pow+0x3f8>)
 80084f2:	f7f7 fec1 	bl	8000278 <__aeabi_dsub>
 80084f6:	4622      	mov	r2, r4
 80084f8:	4680      	mov	r8, r0
 80084fa:	4689      	mov	r9, r1
 80084fc:	462b      	mov	r3, r5
 80084fe:	4620      	mov	r0, r4
 8008500:	4629      	mov	r1, r5
 8008502:	f7f8 f871 	bl	80005e8 <__aeabi_dmul>
 8008506:	4602      	mov	r2, r0
 8008508:	460b      	mov	r3, r1
 800850a:	4640      	mov	r0, r8
 800850c:	4649      	mov	r1, r9
 800850e:	f7f8 f86b 	bl	80005e8 <__aeabi_dmul>
 8008512:	a33f      	add	r3, pc, #252	; (adr r3, 8008610 <__ieee754_pow+0x3e0>)
 8008514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008518:	f7f8 f866 	bl	80005e8 <__aeabi_dmul>
 800851c:	4602      	mov	r2, r0
 800851e:	460b      	mov	r3, r1
 8008520:	4650      	mov	r0, sl
 8008522:	4659      	mov	r1, fp
 8008524:	f7f7 fea8 	bl	8000278 <__aeabi_dsub>
 8008528:	4602      	mov	r2, r0
 800852a:	460b      	mov	r3, r1
 800852c:	4680      	mov	r8, r0
 800852e:	4689      	mov	r9, r1
 8008530:	4630      	mov	r0, r6
 8008532:	4639      	mov	r1, r7
 8008534:	f7f7 fea2 	bl	800027c <__adddf3>
 8008538:	2000      	movs	r0, #0
 800853a:	4632      	mov	r2, r6
 800853c:	463b      	mov	r3, r7
 800853e:	4604      	mov	r4, r0
 8008540:	460d      	mov	r5, r1
 8008542:	f7f7 fe99 	bl	8000278 <__aeabi_dsub>
 8008546:	4602      	mov	r2, r0
 8008548:	460b      	mov	r3, r1
 800854a:	4640      	mov	r0, r8
 800854c:	4649      	mov	r1, r9
 800854e:	f7f7 fe93 	bl	8000278 <__aeabi_dsub>
 8008552:	9b04      	ldr	r3, [sp, #16]
 8008554:	9a06      	ldr	r2, [sp, #24]
 8008556:	3b01      	subs	r3, #1
 8008558:	4313      	orrs	r3, r2
 800855a:	4682      	mov	sl, r0
 800855c:	468b      	mov	fp, r1
 800855e:	f040 81e7 	bne.w	8008930 <__ieee754_pow+0x700>
 8008562:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8008618 <__ieee754_pow+0x3e8>
 8008566:	eeb0 8a47 	vmov.f32	s16, s14
 800856a:	eef0 8a67 	vmov.f32	s17, s15
 800856e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008572:	2600      	movs	r6, #0
 8008574:	4632      	mov	r2, r6
 8008576:	463b      	mov	r3, r7
 8008578:	e9dd 0100 	ldrd	r0, r1, [sp]
 800857c:	f7f7 fe7c 	bl	8000278 <__aeabi_dsub>
 8008580:	4622      	mov	r2, r4
 8008582:	462b      	mov	r3, r5
 8008584:	f7f8 f830 	bl	80005e8 <__aeabi_dmul>
 8008588:	e9dd 2300 	ldrd	r2, r3, [sp]
 800858c:	4680      	mov	r8, r0
 800858e:	4689      	mov	r9, r1
 8008590:	4650      	mov	r0, sl
 8008592:	4659      	mov	r1, fp
 8008594:	f7f8 f828 	bl	80005e8 <__aeabi_dmul>
 8008598:	4602      	mov	r2, r0
 800859a:	460b      	mov	r3, r1
 800859c:	4640      	mov	r0, r8
 800859e:	4649      	mov	r1, r9
 80085a0:	f7f7 fe6c 	bl	800027c <__adddf3>
 80085a4:	4632      	mov	r2, r6
 80085a6:	463b      	mov	r3, r7
 80085a8:	4680      	mov	r8, r0
 80085aa:	4689      	mov	r9, r1
 80085ac:	4620      	mov	r0, r4
 80085ae:	4629      	mov	r1, r5
 80085b0:	f7f8 f81a 	bl	80005e8 <__aeabi_dmul>
 80085b4:	460b      	mov	r3, r1
 80085b6:	4604      	mov	r4, r0
 80085b8:	460d      	mov	r5, r1
 80085ba:	4602      	mov	r2, r0
 80085bc:	4649      	mov	r1, r9
 80085be:	4640      	mov	r0, r8
 80085c0:	f7f7 fe5c 	bl	800027c <__adddf3>
 80085c4:	4b19      	ldr	r3, [pc, #100]	; (800862c <__ieee754_pow+0x3fc>)
 80085c6:	4299      	cmp	r1, r3
 80085c8:	ec45 4b19 	vmov	d9, r4, r5
 80085cc:	4606      	mov	r6, r0
 80085ce:	460f      	mov	r7, r1
 80085d0:	468b      	mov	fp, r1
 80085d2:	f340 82f1 	ble.w	8008bb8 <__ieee754_pow+0x988>
 80085d6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80085da:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80085de:	4303      	orrs	r3, r0
 80085e0:	f000 81e4 	beq.w	80089ac <__ieee754_pow+0x77c>
 80085e4:	ec51 0b18 	vmov	r0, r1, d8
 80085e8:	2200      	movs	r2, #0
 80085ea:	2300      	movs	r3, #0
 80085ec:	f7f8 fa6e 	bl	8000acc <__aeabi_dcmplt>
 80085f0:	3800      	subs	r0, #0
 80085f2:	bf18      	it	ne
 80085f4:	2001      	movne	r0, #1
 80085f6:	e72b      	b.n	8008450 <__ieee754_pow+0x220>
 80085f8:	60000000 	.word	0x60000000
 80085fc:	3ff71547 	.word	0x3ff71547
 8008600:	f85ddf44 	.word	0xf85ddf44
 8008604:	3e54ae0b 	.word	0x3e54ae0b
 8008608:	55555555 	.word	0x55555555
 800860c:	3fd55555 	.word	0x3fd55555
 8008610:	652b82fe 	.word	0x652b82fe
 8008614:	3ff71547 	.word	0x3ff71547
 8008618:	00000000 	.word	0x00000000
 800861c:	bff00000 	.word	0xbff00000
 8008620:	3ff00000 	.word	0x3ff00000
 8008624:	3fd00000 	.word	0x3fd00000
 8008628:	3fe00000 	.word	0x3fe00000
 800862c:	408fffff 	.word	0x408fffff
 8008630:	4bd5      	ldr	r3, [pc, #852]	; (8008988 <__ieee754_pow+0x758>)
 8008632:	402b      	ands	r3, r5
 8008634:	2200      	movs	r2, #0
 8008636:	b92b      	cbnz	r3, 8008644 <__ieee754_pow+0x414>
 8008638:	4bd4      	ldr	r3, [pc, #848]	; (800898c <__ieee754_pow+0x75c>)
 800863a:	f7f7 ffd5 	bl	80005e8 <__aeabi_dmul>
 800863e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8008642:	460c      	mov	r4, r1
 8008644:	1523      	asrs	r3, r4, #20
 8008646:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800864a:	4413      	add	r3, r2
 800864c:	9305      	str	r3, [sp, #20]
 800864e:	4bd0      	ldr	r3, [pc, #832]	; (8008990 <__ieee754_pow+0x760>)
 8008650:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8008654:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8008658:	429c      	cmp	r4, r3
 800865a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800865e:	dd08      	ble.n	8008672 <__ieee754_pow+0x442>
 8008660:	4bcc      	ldr	r3, [pc, #816]	; (8008994 <__ieee754_pow+0x764>)
 8008662:	429c      	cmp	r4, r3
 8008664:	f340 8162 	ble.w	800892c <__ieee754_pow+0x6fc>
 8008668:	9b05      	ldr	r3, [sp, #20]
 800866a:	3301      	adds	r3, #1
 800866c:	9305      	str	r3, [sp, #20]
 800866e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8008672:	2400      	movs	r4, #0
 8008674:	00e3      	lsls	r3, r4, #3
 8008676:	9307      	str	r3, [sp, #28]
 8008678:	4bc7      	ldr	r3, [pc, #796]	; (8008998 <__ieee754_pow+0x768>)
 800867a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800867e:	ed93 7b00 	vldr	d7, [r3]
 8008682:	4629      	mov	r1, r5
 8008684:	ec53 2b17 	vmov	r2, r3, d7
 8008688:	eeb0 9a47 	vmov.f32	s18, s14
 800868c:	eef0 9a67 	vmov.f32	s19, s15
 8008690:	4682      	mov	sl, r0
 8008692:	f7f7 fdf1 	bl	8000278 <__aeabi_dsub>
 8008696:	4652      	mov	r2, sl
 8008698:	4606      	mov	r6, r0
 800869a:	460f      	mov	r7, r1
 800869c:	462b      	mov	r3, r5
 800869e:	ec51 0b19 	vmov	r0, r1, d9
 80086a2:	f7f7 fdeb 	bl	800027c <__adddf3>
 80086a6:	4602      	mov	r2, r0
 80086a8:	460b      	mov	r3, r1
 80086aa:	2000      	movs	r0, #0
 80086ac:	49bb      	ldr	r1, [pc, #748]	; (800899c <__ieee754_pow+0x76c>)
 80086ae:	f7f8 f8c5 	bl	800083c <__aeabi_ddiv>
 80086b2:	ec41 0b1a 	vmov	d10, r0, r1
 80086b6:	4602      	mov	r2, r0
 80086b8:	460b      	mov	r3, r1
 80086ba:	4630      	mov	r0, r6
 80086bc:	4639      	mov	r1, r7
 80086be:	f7f7 ff93 	bl	80005e8 <__aeabi_dmul>
 80086c2:	2300      	movs	r3, #0
 80086c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80086c8:	9302      	str	r3, [sp, #8]
 80086ca:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80086ce:	46ab      	mov	fp, r5
 80086d0:	106d      	asrs	r5, r5, #1
 80086d2:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80086d6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80086da:	ec41 0b18 	vmov	d8, r0, r1
 80086de:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 80086e2:	2200      	movs	r2, #0
 80086e4:	4640      	mov	r0, r8
 80086e6:	4649      	mov	r1, r9
 80086e8:	4614      	mov	r4, r2
 80086ea:	461d      	mov	r5, r3
 80086ec:	f7f7 ff7c 	bl	80005e8 <__aeabi_dmul>
 80086f0:	4602      	mov	r2, r0
 80086f2:	460b      	mov	r3, r1
 80086f4:	4630      	mov	r0, r6
 80086f6:	4639      	mov	r1, r7
 80086f8:	f7f7 fdbe 	bl	8000278 <__aeabi_dsub>
 80086fc:	ec53 2b19 	vmov	r2, r3, d9
 8008700:	4606      	mov	r6, r0
 8008702:	460f      	mov	r7, r1
 8008704:	4620      	mov	r0, r4
 8008706:	4629      	mov	r1, r5
 8008708:	f7f7 fdb6 	bl	8000278 <__aeabi_dsub>
 800870c:	4602      	mov	r2, r0
 800870e:	460b      	mov	r3, r1
 8008710:	4650      	mov	r0, sl
 8008712:	4659      	mov	r1, fp
 8008714:	f7f7 fdb0 	bl	8000278 <__aeabi_dsub>
 8008718:	4642      	mov	r2, r8
 800871a:	464b      	mov	r3, r9
 800871c:	f7f7 ff64 	bl	80005e8 <__aeabi_dmul>
 8008720:	4602      	mov	r2, r0
 8008722:	460b      	mov	r3, r1
 8008724:	4630      	mov	r0, r6
 8008726:	4639      	mov	r1, r7
 8008728:	f7f7 fda6 	bl	8000278 <__aeabi_dsub>
 800872c:	ec53 2b1a 	vmov	r2, r3, d10
 8008730:	f7f7 ff5a 	bl	80005e8 <__aeabi_dmul>
 8008734:	ec53 2b18 	vmov	r2, r3, d8
 8008738:	ec41 0b19 	vmov	d9, r0, r1
 800873c:	ec51 0b18 	vmov	r0, r1, d8
 8008740:	f7f7 ff52 	bl	80005e8 <__aeabi_dmul>
 8008744:	a37c      	add	r3, pc, #496	; (adr r3, 8008938 <__ieee754_pow+0x708>)
 8008746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800874a:	4604      	mov	r4, r0
 800874c:	460d      	mov	r5, r1
 800874e:	f7f7 ff4b 	bl	80005e8 <__aeabi_dmul>
 8008752:	a37b      	add	r3, pc, #492	; (adr r3, 8008940 <__ieee754_pow+0x710>)
 8008754:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008758:	f7f7 fd90 	bl	800027c <__adddf3>
 800875c:	4622      	mov	r2, r4
 800875e:	462b      	mov	r3, r5
 8008760:	f7f7 ff42 	bl	80005e8 <__aeabi_dmul>
 8008764:	a378      	add	r3, pc, #480	; (adr r3, 8008948 <__ieee754_pow+0x718>)
 8008766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800876a:	f7f7 fd87 	bl	800027c <__adddf3>
 800876e:	4622      	mov	r2, r4
 8008770:	462b      	mov	r3, r5
 8008772:	f7f7 ff39 	bl	80005e8 <__aeabi_dmul>
 8008776:	a376      	add	r3, pc, #472	; (adr r3, 8008950 <__ieee754_pow+0x720>)
 8008778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800877c:	f7f7 fd7e 	bl	800027c <__adddf3>
 8008780:	4622      	mov	r2, r4
 8008782:	462b      	mov	r3, r5
 8008784:	f7f7 ff30 	bl	80005e8 <__aeabi_dmul>
 8008788:	a373      	add	r3, pc, #460	; (adr r3, 8008958 <__ieee754_pow+0x728>)
 800878a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800878e:	f7f7 fd75 	bl	800027c <__adddf3>
 8008792:	4622      	mov	r2, r4
 8008794:	462b      	mov	r3, r5
 8008796:	f7f7 ff27 	bl	80005e8 <__aeabi_dmul>
 800879a:	a371      	add	r3, pc, #452	; (adr r3, 8008960 <__ieee754_pow+0x730>)
 800879c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087a0:	f7f7 fd6c 	bl	800027c <__adddf3>
 80087a4:	4622      	mov	r2, r4
 80087a6:	4606      	mov	r6, r0
 80087a8:	460f      	mov	r7, r1
 80087aa:	462b      	mov	r3, r5
 80087ac:	4620      	mov	r0, r4
 80087ae:	4629      	mov	r1, r5
 80087b0:	f7f7 ff1a 	bl	80005e8 <__aeabi_dmul>
 80087b4:	4602      	mov	r2, r0
 80087b6:	460b      	mov	r3, r1
 80087b8:	4630      	mov	r0, r6
 80087ba:	4639      	mov	r1, r7
 80087bc:	f7f7 ff14 	bl	80005e8 <__aeabi_dmul>
 80087c0:	4642      	mov	r2, r8
 80087c2:	4604      	mov	r4, r0
 80087c4:	460d      	mov	r5, r1
 80087c6:	464b      	mov	r3, r9
 80087c8:	ec51 0b18 	vmov	r0, r1, d8
 80087cc:	f7f7 fd56 	bl	800027c <__adddf3>
 80087d0:	ec53 2b19 	vmov	r2, r3, d9
 80087d4:	f7f7 ff08 	bl	80005e8 <__aeabi_dmul>
 80087d8:	4622      	mov	r2, r4
 80087da:	462b      	mov	r3, r5
 80087dc:	f7f7 fd4e 	bl	800027c <__adddf3>
 80087e0:	4642      	mov	r2, r8
 80087e2:	4682      	mov	sl, r0
 80087e4:	468b      	mov	fp, r1
 80087e6:	464b      	mov	r3, r9
 80087e8:	4640      	mov	r0, r8
 80087ea:	4649      	mov	r1, r9
 80087ec:	f7f7 fefc 	bl	80005e8 <__aeabi_dmul>
 80087f0:	4b6b      	ldr	r3, [pc, #428]	; (80089a0 <__ieee754_pow+0x770>)
 80087f2:	2200      	movs	r2, #0
 80087f4:	4606      	mov	r6, r0
 80087f6:	460f      	mov	r7, r1
 80087f8:	f7f7 fd40 	bl	800027c <__adddf3>
 80087fc:	4652      	mov	r2, sl
 80087fe:	465b      	mov	r3, fp
 8008800:	f7f7 fd3c 	bl	800027c <__adddf3>
 8008804:	2000      	movs	r0, #0
 8008806:	4604      	mov	r4, r0
 8008808:	460d      	mov	r5, r1
 800880a:	4602      	mov	r2, r0
 800880c:	460b      	mov	r3, r1
 800880e:	4640      	mov	r0, r8
 8008810:	4649      	mov	r1, r9
 8008812:	f7f7 fee9 	bl	80005e8 <__aeabi_dmul>
 8008816:	4b62      	ldr	r3, [pc, #392]	; (80089a0 <__ieee754_pow+0x770>)
 8008818:	4680      	mov	r8, r0
 800881a:	4689      	mov	r9, r1
 800881c:	2200      	movs	r2, #0
 800881e:	4620      	mov	r0, r4
 8008820:	4629      	mov	r1, r5
 8008822:	f7f7 fd29 	bl	8000278 <__aeabi_dsub>
 8008826:	4632      	mov	r2, r6
 8008828:	463b      	mov	r3, r7
 800882a:	f7f7 fd25 	bl	8000278 <__aeabi_dsub>
 800882e:	4602      	mov	r2, r0
 8008830:	460b      	mov	r3, r1
 8008832:	4650      	mov	r0, sl
 8008834:	4659      	mov	r1, fp
 8008836:	f7f7 fd1f 	bl	8000278 <__aeabi_dsub>
 800883a:	ec53 2b18 	vmov	r2, r3, d8
 800883e:	f7f7 fed3 	bl	80005e8 <__aeabi_dmul>
 8008842:	4622      	mov	r2, r4
 8008844:	4606      	mov	r6, r0
 8008846:	460f      	mov	r7, r1
 8008848:	462b      	mov	r3, r5
 800884a:	ec51 0b19 	vmov	r0, r1, d9
 800884e:	f7f7 fecb 	bl	80005e8 <__aeabi_dmul>
 8008852:	4602      	mov	r2, r0
 8008854:	460b      	mov	r3, r1
 8008856:	4630      	mov	r0, r6
 8008858:	4639      	mov	r1, r7
 800885a:	f7f7 fd0f 	bl	800027c <__adddf3>
 800885e:	4606      	mov	r6, r0
 8008860:	460f      	mov	r7, r1
 8008862:	4602      	mov	r2, r0
 8008864:	460b      	mov	r3, r1
 8008866:	4640      	mov	r0, r8
 8008868:	4649      	mov	r1, r9
 800886a:	f7f7 fd07 	bl	800027c <__adddf3>
 800886e:	a33e      	add	r3, pc, #248	; (adr r3, 8008968 <__ieee754_pow+0x738>)
 8008870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008874:	2000      	movs	r0, #0
 8008876:	4604      	mov	r4, r0
 8008878:	460d      	mov	r5, r1
 800887a:	f7f7 feb5 	bl	80005e8 <__aeabi_dmul>
 800887e:	4642      	mov	r2, r8
 8008880:	ec41 0b18 	vmov	d8, r0, r1
 8008884:	464b      	mov	r3, r9
 8008886:	4620      	mov	r0, r4
 8008888:	4629      	mov	r1, r5
 800888a:	f7f7 fcf5 	bl	8000278 <__aeabi_dsub>
 800888e:	4602      	mov	r2, r0
 8008890:	460b      	mov	r3, r1
 8008892:	4630      	mov	r0, r6
 8008894:	4639      	mov	r1, r7
 8008896:	f7f7 fcef 	bl	8000278 <__aeabi_dsub>
 800889a:	a335      	add	r3, pc, #212	; (adr r3, 8008970 <__ieee754_pow+0x740>)
 800889c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088a0:	f7f7 fea2 	bl	80005e8 <__aeabi_dmul>
 80088a4:	a334      	add	r3, pc, #208	; (adr r3, 8008978 <__ieee754_pow+0x748>)
 80088a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088aa:	4606      	mov	r6, r0
 80088ac:	460f      	mov	r7, r1
 80088ae:	4620      	mov	r0, r4
 80088b0:	4629      	mov	r1, r5
 80088b2:	f7f7 fe99 	bl	80005e8 <__aeabi_dmul>
 80088b6:	4602      	mov	r2, r0
 80088b8:	460b      	mov	r3, r1
 80088ba:	4630      	mov	r0, r6
 80088bc:	4639      	mov	r1, r7
 80088be:	f7f7 fcdd 	bl	800027c <__adddf3>
 80088c2:	9a07      	ldr	r2, [sp, #28]
 80088c4:	4b37      	ldr	r3, [pc, #220]	; (80089a4 <__ieee754_pow+0x774>)
 80088c6:	4413      	add	r3, r2
 80088c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088cc:	f7f7 fcd6 	bl	800027c <__adddf3>
 80088d0:	4682      	mov	sl, r0
 80088d2:	9805      	ldr	r0, [sp, #20]
 80088d4:	468b      	mov	fp, r1
 80088d6:	f7f7 fe1d 	bl	8000514 <__aeabi_i2d>
 80088da:	9a07      	ldr	r2, [sp, #28]
 80088dc:	4b32      	ldr	r3, [pc, #200]	; (80089a8 <__ieee754_pow+0x778>)
 80088de:	4413      	add	r3, r2
 80088e0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80088e4:	4606      	mov	r6, r0
 80088e6:	460f      	mov	r7, r1
 80088e8:	4652      	mov	r2, sl
 80088ea:	465b      	mov	r3, fp
 80088ec:	ec51 0b18 	vmov	r0, r1, d8
 80088f0:	f7f7 fcc4 	bl	800027c <__adddf3>
 80088f4:	4642      	mov	r2, r8
 80088f6:	464b      	mov	r3, r9
 80088f8:	f7f7 fcc0 	bl	800027c <__adddf3>
 80088fc:	4632      	mov	r2, r6
 80088fe:	463b      	mov	r3, r7
 8008900:	f7f7 fcbc 	bl	800027c <__adddf3>
 8008904:	2000      	movs	r0, #0
 8008906:	4632      	mov	r2, r6
 8008908:	463b      	mov	r3, r7
 800890a:	4604      	mov	r4, r0
 800890c:	460d      	mov	r5, r1
 800890e:	f7f7 fcb3 	bl	8000278 <__aeabi_dsub>
 8008912:	4642      	mov	r2, r8
 8008914:	464b      	mov	r3, r9
 8008916:	f7f7 fcaf 	bl	8000278 <__aeabi_dsub>
 800891a:	ec53 2b18 	vmov	r2, r3, d8
 800891e:	f7f7 fcab 	bl	8000278 <__aeabi_dsub>
 8008922:	4602      	mov	r2, r0
 8008924:	460b      	mov	r3, r1
 8008926:	4650      	mov	r0, sl
 8008928:	4659      	mov	r1, fp
 800892a:	e610      	b.n	800854e <__ieee754_pow+0x31e>
 800892c:	2401      	movs	r4, #1
 800892e:	e6a1      	b.n	8008674 <__ieee754_pow+0x444>
 8008930:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8008980 <__ieee754_pow+0x750>
 8008934:	e617      	b.n	8008566 <__ieee754_pow+0x336>
 8008936:	bf00      	nop
 8008938:	4a454eef 	.word	0x4a454eef
 800893c:	3fca7e28 	.word	0x3fca7e28
 8008940:	93c9db65 	.word	0x93c9db65
 8008944:	3fcd864a 	.word	0x3fcd864a
 8008948:	a91d4101 	.word	0xa91d4101
 800894c:	3fd17460 	.word	0x3fd17460
 8008950:	518f264d 	.word	0x518f264d
 8008954:	3fd55555 	.word	0x3fd55555
 8008958:	db6fabff 	.word	0xdb6fabff
 800895c:	3fdb6db6 	.word	0x3fdb6db6
 8008960:	33333303 	.word	0x33333303
 8008964:	3fe33333 	.word	0x3fe33333
 8008968:	e0000000 	.word	0xe0000000
 800896c:	3feec709 	.word	0x3feec709
 8008970:	dc3a03fd 	.word	0xdc3a03fd
 8008974:	3feec709 	.word	0x3feec709
 8008978:	145b01f5 	.word	0x145b01f5
 800897c:	be3e2fe0 	.word	0xbe3e2fe0
 8008980:	00000000 	.word	0x00000000
 8008984:	3ff00000 	.word	0x3ff00000
 8008988:	7ff00000 	.word	0x7ff00000
 800898c:	43400000 	.word	0x43400000
 8008990:	0003988e 	.word	0x0003988e
 8008994:	000bb679 	.word	0x000bb679
 8008998:	080098a0 	.word	0x080098a0
 800899c:	3ff00000 	.word	0x3ff00000
 80089a0:	40080000 	.word	0x40080000
 80089a4:	080098c0 	.word	0x080098c0
 80089a8:	080098b0 	.word	0x080098b0
 80089ac:	a3b5      	add	r3, pc, #724	; (adr r3, 8008c84 <__ieee754_pow+0xa54>)
 80089ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089b2:	4640      	mov	r0, r8
 80089b4:	4649      	mov	r1, r9
 80089b6:	f7f7 fc61 	bl	800027c <__adddf3>
 80089ba:	4622      	mov	r2, r4
 80089bc:	ec41 0b1a 	vmov	d10, r0, r1
 80089c0:	462b      	mov	r3, r5
 80089c2:	4630      	mov	r0, r6
 80089c4:	4639      	mov	r1, r7
 80089c6:	f7f7 fc57 	bl	8000278 <__aeabi_dsub>
 80089ca:	4602      	mov	r2, r0
 80089cc:	460b      	mov	r3, r1
 80089ce:	ec51 0b1a 	vmov	r0, r1, d10
 80089d2:	f7f8 f899 	bl	8000b08 <__aeabi_dcmpgt>
 80089d6:	2800      	cmp	r0, #0
 80089d8:	f47f ae04 	bne.w	80085e4 <__ieee754_pow+0x3b4>
 80089dc:	4aa4      	ldr	r2, [pc, #656]	; (8008c70 <__ieee754_pow+0xa40>)
 80089de:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80089e2:	4293      	cmp	r3, r2
 80089e4:	f340 8108 	ble.w	8008bf8 <__ieee754_pow+0x9c8>
 80089e8:	151b      	asrs	r3, r3, #20
 80089ea:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80089ee:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80089f2:	fa4a f303 	asr.w	r3, sl, r3
 80089f6:	445b      	add	r3, fp
 80089f8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80089fc:	4e9d      	ldr	r6, [pc, #628]	; (8008c74 <__ieee754_pow+0xa44>)
 80089fe:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8008a02:	4116      	asrs	r6, r2
 8008a04:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8008a08:	2000      	movs	r0, #0
 8008a0a:	ea23 0106 	bic.w	r1, r3, r6
 8008a0e:	f1c2 0214 	rsb	r2, r2, #20
 8008a12:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8008a16:	fa4a fa02 	asr.w	sl, sl, r2
 8008a1a:	f1bb 0f00 	cmp.w	fp, #0
 8008a1e:	4602      	mov	r2, r0
 8008a20:	460b      	mov	r3, r1
 8008a22:	4620      	mov	r0, r4
 8008a24:	4629      	mov	r1, r5
 8008a26:	bfb8      	it	lt
 8008a28:	f1ca 0a00 	rsblt	sl, sl, #0
 8008a2c:	f7f7 fc24 	bl	8000278 <__aeabi_dsub>
 8008a30:	ec41 0b19 	vmov	d9, r0, r1
 8008a34:	4642      	mov	r2, r8
 8008a36:	464b      	mov	r3, r9
 8008a38:	ec51 0b19 	vmov	r0, r1, d9
 8008a3c:	f7f7 fc1e 	bl	800027c <__adddf3>
 8008a40:	a37b      	add	r3, pc, #492	; (adr r3, 8008c30 <__ieee754_pow+0xa00>)
 8008a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a46:	2000      	movs	r0, #0
 8008a48:	4604      	mov	r4, r0
 8008a4a:	460d      	mov	r5, r1
 8008a4c:	f7f7 fdcc 	bl	80005e8 <__aeabi_dmul>
 8008a50:	ec53 2b19 	vmov	r2, r3, d9
 8008a54:	4606      	mov	r6, r0
 8008a56:	460f      	mov	r7, r1
 8008a58:	4620      	mov	r0, r4
 8008a5a:	4629      	mov	r1, r5
 8008a5c:	f7f7 fc0c 	bl	8000278 <__aeabi_dsub>
 8008a60:	4602      	mov	r2, r0
 8008a62:	460b      	mov	r3, r1
 8008a64:	4640      	mov	r0, r8
 8008a66:	4649      	mov	r1, r9
 8008a68:	f7f7 fc06 	bl	8000278 <__aeabi_dsub>
 8008a6c:	a372      	add	r3, pc, #456	; (adr r3, 8008c38 <__ieee754_pow+0xa08>)
 8008a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a72:	f7f7 fdb9 	bl	80005e8 <__aeabi_dmul>
 8008a76:	a372      	add	r3, pc, #456	; (adr r3, 8008c40 <__ieee754_pow+0xa10>)
 8008a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a7c:	4680      	mov	r8, r0
 8008a7e:	4689      	mov	r9, r1
 8008a80:	4620      	mov	r0, r4
 8008a82:	4629      	mov	r1, r5
 8008a84:	f7f7 fdb0 	bl	80005e8 <__aeabi_dmul>
 8008a88:	4602      	mov	r2, r0
 8008a8a:	460b      	mov	r3, r1
 8008a8c:	4640      	mov	r0, r8
 8008a8e:	4649      	mov	r1, r9
 8008a90:	f7f7 fbf4 	bl	800027c <__adddf3>
 8008a94:	4604      	mov	r4, r0
 8008a96:	460d      	mov	r5, r1
 8008a98:	4602      	mov	r2, r0
 8008a9a:	460b      	mov	r3, r1
 8008a9c:	4630      	mov	r0, r6
 8008a9e:	4639      	mov	r1, r7
 8008aa0:	f7f7 fbec 	bl	800027c <__adddf3>
 8008aa4:	4632      	mov	r2, r6
 8008aa6:	463b      	mov	r3, r7
 8008aa8:	4680      	mov	r8, r0
 8008aaa:	4689      	mov	r9, r1
 8008aac:	f7f7 fbe4 	bl	8000278 <__aeabi_dsub>
 8008ab0:	4602      	mov	r2, r0
 8008ab2:	460b      	mov	r3, r1
 8008ab4:	4620      	mov	r0, r4
 8008ab6:	4629      	mov	r1, r5
 8008ab8:	f7f7 fbde 	bl	8000278 <__aeabi_dsub>
 8008abc:	4642      	mov	r2, r8
 8008abe:	4606      	mov	r6, r0
 8008ac0:	460f      	mov	r7, r1
 8008ac2:	464b      	mov	r3, r9
 8008ac4:	4640      	mov	r0, r8
 8008ac6:	4649      	mov	r1, r9
 8008ac8:	f7f7 fd8e 	bl	80005e8 <__aeabi_dmul>
 8008acc:	a35e      	add	r3, pc, #376	; (adr r3, 8008c48 <__ieee754_pow+0xa18>)
 8008ace:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ad2:	4604      	mov	r4, r0
 8008ad4:	460d      	mov	r5, r1
 8008ad6:	f7f7 fd87 	bl	80005e8 <__aeabi_dmul>
 8008ada:	a35d      	add	r3, pc, #372	; (adr r3, 8008c50 <__ieee754_pow+0xa20>)
 8008adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ae0:	f7f7 fbca 	bl	8000278 <__aeabi_dsub>
 8008ae4:	4622      	mov	r2, r4
 8008ae6:	462b      	mov	r3, r5
 8008ae8:	f7f7 fd7e 	bl	80005e8 <__aeabi_dmul>
 8008aec:	a35a      	add	r3, pc, #360	; (adr r3, 8008c58 <__ieee754_pow+0xa28>)
 8008aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008af2:	f7f7 fbc3 	bl	800027c <__adddf3>
 8008af6:	4622      	mov	r2, r4
 8008af8:	462b      	mov	r3, r5
 8008afa:	f7f7 fd75 	bl	80005e8 <__aeabi_dmul>
 8008afe:	a358      	add	r3, pc, #352	; (adr r3, 8008c60 <__ieee754_pow+0xa30>)
 8008b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b04:	f7f7 fbb8 	bl	8000278 <__aeabi_dsub>
 8008b08:	4622      	mov	r2, r4
 8008b0a:	462b      	mov	r3, r5
 8008b0c:	f7f7 fd6c 	bl	80005e8 <__aeabi_dmul>
 8008b10:	a355      	add	r3, pc, #340	; (adr r3, 8008c68 <__ieee754_pow+0xa38>)
 8008b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b16:	f7f7 fbb1 	bl	800027c <__adddf3>
 8008b1a:	4622      	mov	r2, r4
 8008b1c:	462b      	mov	r3, r5
 8008b1e:	f7f7 fd63 	bl	80005e8 <__aeabi_dmul>
 8008b22:	4602      	mov	r2, r0
 8008b24:	460b      	mov	r3, r1
 8008b26:	4640      	mov	r0, r8
 8008b28:	4649      	mov	r1, r9
 8008b2a:	f7f7 fba5 	bl	8000278 <__aeabi_dsub>
 8008b2e:	4604      	mov	r4, r0
 8008b30:	460d      	mov	r5, r1
 8008b32:	4602      	mov	r2, r0
 8008b34:	460b      	mov	r3, r1
 8008b36:	4640      	mov	r0, r8
 8008b38:	4649      	mov	r1, r9
 8008b3a:	f7f7 fd55 	bl	80005e8 <__aeabi_dmul>
 8008b3e:	2200      	movs	r2, #0
 8008b40:	ec41 0b19 	vmov	d9, r0, r1
 8008b44:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008b48:	4620      	mov	r0, r4
 8008b4a:	4629      	mov	r1, r5
 8008b4c:	f7f7 fb94 	bl	8000278 <__aeabi_dsub>
 8008b50:	4602      	mov	r2, r0
 8008b52:	460b      	mov	r3, r1
 8008b54:	ec51 0b19 	vmov	r0, r1, d9
 8008b58:	f7f7 fe70 	bl	800083c <__aeabi_ddiv>
 8008b5c:	4632      	mov	r2, r6
 8008b5e:	4604      	mov	r4, r0
 8008b60:	460d      	mov	r5, r1
 8008b62:	463b      	mov	r3, r7
 8008b64:	4640      	mov	r0, r8
 8008b66:	4649      	mov	r1, r9
 8008b68:	f7f7 fd3e 	bl	80005e8 <__aeabi_dmul>
 8008b6c:	4632      	mov	r2, r6
 8008b6e:	463b      	mov	r3, r7
 8008b70:	f7f7 fb84 	bl	800027c <__adddf3>
 8008b74:	4602      	mov	r2, r0
 8008b76:	460b      	mov	r3, r1
 8008b78:	4620      	mov	r0, r4
 8008b7a:	4629      	mov	r1, r5
 8008b7c:	f7f7 fb7c 	bl	8000278 <__aeabi_dsub>
 8008b80:	4642      	mov	r2, r8
 8008b82:	464b      	mov	r3, r9
 8008b84:	f7f7 fb78 	bl	8000278 <__aeabi_dsub>
 8008b88:	460b      	mov	r3, r1
 8008b8a:	4602      	mov	r2, r0
 8008b8c:	493a      	ldr	r1, [pc, #232]	; (8008c78 <__ieee754_pow+0xa48>)
 8008b8e:	2000      	movs	r0, #0
 8008b90:	f7f7 fb72 	bl	8000278 <__aeabi_dsub>
 8008b94:	ec41 0b10 	vmov	d0, r0, r1
 8008b98:	ee10 3a90 	vmov	r3, s1
 8008b9c:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8008ba0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008ba4:	da2b      	bge.n	8008bfe <__ieee754_pow+0x9ce>
 8008ba6:	4650      	mov	r0, sl
 8008ba8:	f000 f966 	bl	8008e78 <scalbn>
 8008bac:	ec51 0b10 	vmov	r0, r1, d0
 8008bb0:	ec53 2b18 	vmov	r2, r3, d8
 8008bb4:	f7ff bbed 	b.w	8008392 <__ieee754_pow+0x162>
 8008bb8:	4b30      	ldr	r3, [pc, #192]	; (8008c7c <__ieee754_pow+0xa4c>)
 8008bba:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8008bbe:	429e      	cmp	r6, r3
 8008bc0:	f77f af0c 	ble.w	80089dc <__ieee754_pow+0x7ac>
 8008bc4:	4b2e      	ldr	r3, [pc, #184]	; (8008c80 <__ieee754_pow+0xa50>)
 8008bc6:	440b      	add	r3, r1
 8008bc8:	4303      	orrs	r3, r0
 8008bca:	d009      	beq.n	8008be0 <__ieee754_pow+0x9b0>
 8008bcc:	ec51 0b18 	vmov	r0, r1, d8
 8008bd0:	2200      	movs	r2, #0
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	f7f7 ff7a 	bl	8000acc <__aeabi_dcmplt>
 8008bd8:	3800      	subs	r0, #0
 8008bda:	bf18      	it	ne
 8008bdc:	2001      	movne	r0, #1
 8008bde:	e447      	b.n	8008470 <__ieee754_pow+0x240>
 8008be0:	4622      	mov	r2, r4
 8008be2:	462b      	mov	r3, r5
 8008be4:	f7f7 fb48 	bl	8000278 <__aeabi_dsub>
 8008be8:	4642      	mov	r2, r8
 8008bea:	464b      	mov	r3, r9
 8008bec:	f7f7 ff82 	bl	8000af4 <__aeabi_dcmpge>
 8008bf0:	2800      	cmp	r0, #0
 8008bf2:	f43f aef3 	beq.w	80089dc <__ieee754_pow+0x7ac>
 8008bf6:	e7e9      	b.n	8008bcc <__ieee754_pow+0x99c>
 8008bf8:	f04f 0a00 	mov.w	sl, #0
 8008bfc:	e71a      	b.n	8008a34 <__ieee754_pow+0x804>
 8008bfe:	ec51 0b10 	vmov	r0, r1, d0
 8008c02:	4619      	mov	r1, r3
 8008c04:	e7d4      	b.n	8008bb0 <__ieee754_pow+0x980>
 8008c06:	491c      	ldr	r1, [pc, #112]	; (8008c78 <__ieee754_pow+0xa48>)
 8008c08:	2000      	movs	r0, #0
 8008c0a:	f7ff bb30 	b.w	800826e <__ieee754_pow+0x3e>
 8008c0e:	2000      	movs	r0, #0
 8008c10:	2100      	movs	r1, #0
 8008c12:	f7ff bb2c 	b.w	800826e <__ieee754_pow+0x3e>
 8008c16:	4630      	mov	r0, r6
 8008c18:	4639      	mov	r1, r7
 8008c1a:	f7ff bb28 	b.w	800826e <__ieee754_pow+0x3e>
 8008c1e:	9204      	str	r2, [sp, #16]
 8008c20:	f7ff bb7a 	b.w	8008318 <__ieee754_pow+0xe8>
 8008c24:	2300      	movs	r3, #0
 8008c26:	f7ff bb64 	b.w	80082f2 <__ieee754_pow+0xc2>
 8008c2a:	bf00      	nop
 8008c2c:	f3af 8000 	nop.w
 8008c30:	00000000 	.word	0x00000000
 8008c34:	3fe62e43 	.word	0x3fe62e43
 8008c38:	fefa39ef 	.word	0xfefa39ef
 8008c3c:	3fe62e42 	.word	0x3fe62e42
 8008c40:	0ca86c39 	.word	0x0ca86c39
 8008c44:	be205c61 	.word	0xbe205c61
 8008c48:	72bea4d0 	.word	0x72bea4d0
 8008c4c:	3e663769 	.word	0x3e663769
 8008c50:	c5d26bf1 	.word	0xc5d26bf1
 8008c54:	3ebbbd41 	.word	0x3ebbbd41
 8008c58:	af25de2c 	.word	0xaf25de2c
 8008c5c:	3f11566a 	.word	0x3f11566a
 8008c60:	16bebd93 	.word	0x16bebd93
 8008c64:	3f66c16c 	.word	0x3f66c16c
 8008c68:	5555553e 	.word	0x5555553e
 8008c6c:	3fc55555 	.word	0x3fc55555
 8008c70:	3fe00000 	.word	0x3fe00000
 8008c74:	000fffff 	.word	0x000fffff
 8008c78:	3ff00000 	.word	0x3ff00000
 8008c7c:	4090cbff 	.word	0x4090cbff
 8008c80:	3f6f3400 	.word	0x3f6f3400
 8008c84:	652b82fe 	.word	0x652b82fe
 8008c88:	3c971547 	.word	0x3c971547

08008c8c <__ieee754_sqrt>:
 8008c8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c90:	ec55 4b10 	vmov	r4, r5, d0
 8008c94:	4e55      	ldr	r6, [pc, #340]	; (8008dec <__ieee754_sqrt+0x160>)
 8008c96:	43ae      	bics	r6, r5
 8008c98:	ee10 0a10 	vmov	r0, s0
 8008c9c:	ee10 3a10 	vmov	r3, s0
 8008ca0:	462a      	mov	r2, r5
 8008ca2:	4629      	mov	r1, r5
 8008ca4:	d110      	bne.n	8008cc8 <__ieee754_sqrt+0x3c>
 8008ca6:	ee10 2a10 	vmov	r2, s0
 8008caa:	462b      	mov	r3, r5
 8008cac:	f7f7 fc9c 	bl	80005e8 <__aeabi_dmul>
 8008cb0:	4602      	mov	r2, r0
 8008cb2:	460b      	mov	r3, r1
 8008cb4:	4620      	mov	r0, r4
 8008cb6:	4629      	mov	r1, r5
 8008cb8:	f7f7 fae0 	bl	800027c <__adddf3>
 8008cbc:	4604      	mov	r4, r0
 8008cbe:	460d      	mov	r5, r1
 8008cc0:	ec45 4b10 	vmov	d0, r4, r5
 8008cc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008cc8:	2d00      	cmp	r5, #0
 8008cca:	dc10      	bgt.n	8008cee <__ieee754_sqrt+0x62>
 8008ccc:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8008cd0:	4330      	orrs	r0, r6
 8008cd2:	d0f5      	beq.n	8008cc0 <__ieee754_sqrt+0x34>
 8008cd4:	b15d      	cbz	r5, 8008cee <__ieee754_sqrt+0x62>
 8008cd6:	ee10 2a10 	vmov	r2, s0
 8008cda:	462b      	mov	r3, r5
 8008cdc:	ee10 0a10 	vmov	r0, s0
 8008ce0:	f7f7 faca 	bl	8000278 <__aeabi_dsub>
 8008ce4:	4602      	mov	r2, r0
 8008ce6:	460b      	mov	r3, r1
 8008ce8:	f7f7 fda8 	bl	800083c <__aeabi_ddiv>
 8008cec:	e7e6      	b.n	8008cbc <__ieee754_sqrt+0x30>
 8008cee:	1512      	asrs	r2, r2, #20
 8008cf0:	d074      	beq.n	8008ddc <__ieee754_sqrt+0x150>
 8008cf2:	07d4      	lsls	r4, r2, #31
 8008cf4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8008cf8:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8008cfc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008d00:	bf5e      	ittt	pl
 8008d02:	0fda      	lsrpl	r2, r3, #31
 8008d04:	005b      	lslpl	r3, r3, #1
 8008d06:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8008d0a:	2400      	movs	r4, #0
 8008d0c:	0fda      	lsrs	r2, r3, #31
 8008d0e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8008d12:	107f      	asrs	r7, r7, #1
 8008d14:	005b      	lsls	r3, r3, #1
 8008d16:	2516      	movs	r5, #22
 8008d18:	4620      	mov	r0, r4
 8008d1a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8008d1e:	1886      	adds	r6, r0, r2
 8008d20:	428e      	cmp	r6, r1
 8008d22:	bfde      	ittt	le
 8008d24:	1b89      	suble	r1, r1, r6
 8008d26:	18b0      	addle	r0, r6, r2
 8008d28:	18a4      	addle	r4, r4, r2
 8008d2a:	0049      	lsls	r1, r1, #1
 8008d2c:	3d01      	subs	r5, #1
 8008d2e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8008d32:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8008d36:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008d3a:	d1f0      	bne.n	8008d1e <__ieee754_sqrt+0x92>
 8008d3c:	462a      	mov	r2, r5
 8008d3e:	f04f 0e20 	mov.w	lr, #32
 8008d42:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8008d46:	4281      	cmp	r1, r0
 8008d48:	eb06 0c05 	add.w	ip, r6, r5
 8008d4c:	dc02      	bgt.n	8008d54 <__ieee754_sqrt+0xc8>
 8008d4e:	d113      	bne.n	8008d78 <__ieee754_sqrt+0xec>
 8008d50:	459c      	cmp	ip, r3
 8008d52:	d811      	bhi.n	8008d78 <__ieee754_sqrt+0xec>
 8008d54:	f1bc 0f00 	cmp.w	ip, #0
 8008d58:	eb0c 0506 	add.w	r5, ip, r6
 8008d5c:	da43      	bge.n	8008de6 <__ieee754_sqrt+0x15a>
 8008d5e:	2d00      	cmp	r5, #0
 8008d60:	db41      	blt.n	8008de6 <__ieee754_sqrt+0x15a>
 8008d62:	f100 0801 	add.w	r8, r0, #1
 8008d66:	1a09      	subs	r1, r1, r0
 8008d68:	459c      	cmp	ip, r3
 8008d6a:	bf88      	it	hi
 8008d6c:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8008d70:	eba3 030c 	sub.w	r3, r3, ip
 8008d74:	4432      	add	r2, r6
 8008d76:	4640      	mov	r0, r8
 8008d78:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8008d7c:	f1be 0e01 	subs.w	lr, lr, #1
 8008d80:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8008d84:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008d88:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8008d8c:	d1db      	bne.n	8008d46 <__ieee754_sqrt+0xba>
 8008d8e:	430b      	orrs	r3, r1
 8008d90:	d006      	beq.n	8008da0 <__ieee754_sqrt+0x114>
 8008d92:	1c50      	adds	r0, r2, #1
 8008d94:	bf13      	iteet	ne
 8008d96:	3201      	addne	r2, #1
 8008d98:	3401      	addeq	r4, #1
 8008d9a:	4672      	moveq	r2, lr
 8008d9c:	f022 0201 	bicne.w	r2, r2, #1
 8008da0:	1063      	asrs	r3, r4, #1
 8008da2:	0852      	lsrs	r2, r2, #1
 8008da4:	07e1      	lsls	r1, r4, #31
 8008da6:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8008daa:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8008dae:	bf48      	it	mi
 8008db0:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8008db4:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8008db8:	4614      	mov	r4, r2
 8008dba:	e781      	b.n	8008cc0 <__ieee754_sqrt+0x34>
 8008dbc:	0ad9      	lsrs	r1, r3, #11
 8008dbe:	3815      	subs	r0, #21
 8008dc0:	055b      	lsls	r3, r3, #21
 8008dc2:	2900      	cmp	r1, #0
 8008dc4:	d0fa      	beq.n	8008dbc <__ieee754_sqrt+0x130>
 8008dc6:	02cd      	lsls	r5, r1, #11
 8008dc8:	d50a      	bpl.n	8008de0 <__ieee754_sqrt+0x154>
 8008dca:	f1c2 0420 	rsb	r4, r2, #32
 8008dce:	fa23 f404 	lsr.w	r4, r3, r4
 8008dd2:	1e55      	subs	r5, r2, #1
 8008dd4:	4093      	lsls	r3, r2
 8008dd6:	4321      	orrs	r1, r4
 8008dd8:	1b42      	subs	r2, r0, r5
 8008dda:	e78a      	b.n	8008cf2 <__ieee754_sqrt+0x66>
 8008ddc:	4610      	mov	r0, r2
 8008dde:	e7f0      	b.n	8008dc2 <__ieee754_sqrt+0x136>
 8008de0:	0049      	lsls	r1, r1, #1
 8008de2:	3201      	adds	r2, #1
 8008de4:	e7ef      	b.n	8008dc6 <__ieee754_sqrt+0x13a>
 8008de6:	4680      	mov	r8, r0
 8008de8:	e7bd      	b.n	8008d66 <__ieee754_sqrt+0xda>
 8008dea:	bf00      	nop
 8008dec:	7ff00000 	.word	0x7ff00000

08008df0 <with_errno>:
 8008df0:	b570      	push	{r4, r5, r6, lr}
 8008df2:	4604      	mov	r4, r0
 8008df4:	460d      	mov	r5, r1
 8008df6:	4616      	mov	r6, r2
 8008df8:	f7fe f912 	bl	8007020 <__errno>
 8008dfc:	4629      	mov	r1, r5
 8008dfe:	6006      	str	r6, [r0, #0]
 8008e00:	4620      	mov	r0, r4
 8008e02:	bd70      	pop	{r4, r5, r6, pc}

08008e04 <xflow>:
 8008e04:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008e06:	4614      	mov	r4, r2
 8008e08:	461d      	mov	r5, r3
 8008e0a:	b108      	cbz	r0, 8008e10 <xflow+0xc>
 8008e0c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008e10:	e9cd 2300 	strd	r2, r3, [sp]
 8008e14:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008e18:	4620      	mov	r0, r4
 8008e1a:	4629      	mov	r1, r5
 8008e1c:	f7f7 fbe4 	bl	80005e8 <__aeabi_dmul>
 8008e20:	2222      	movs	r2, #34	; 0x22
 8008e22:	b003      	add	sp, #12
 8008e24:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008e28:	f7ff bfe2 	b.w	8008df0 <with_errno>

08008e2c <__math_uflow>:
 8008e2c:	b508      	push	{r3, lr}
 8008e2e:	2200      	movs	r2, #0
 8008e30:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008e34:	f7ff ffe6 	bl	8008e04 <xflow>
 8008e38:	ec41 0b10 	vmov	d0, r0, r1
 8008e3c:	bd08      	pop	{r3, pc}

08008e3e <__math_oflow>:
 8008e3e:	b508      	push	{r3, lr}
 8008e40:	2200      	movs	r2, #0
 8008e42:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8008e46:	f7ff ffdd 	bl	8008e04 <xflow>
 8008e4a:	ec41 0b10 	vmov	d0, r0, r1
 8008e4e:	bd08      	pop	{r3, pc}

08008e50 <fabs>:
 8008e50:	ec51 0b10 	vmov	r0, r1, d0
 8008e54:	ee10 2a10 	vmov	r2, s0
 8008e58:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008e5c:	ec43 2b10 	vmov	d0, r2, r3
 8008e60:	4770      	bx	lr

08008e62 <finite>:
 8008e62:	b082      	sub	sp, #8
 8008e64:	ed8d 0b00 	vstr	d0, [sp]
 8008e68:	9801      	ldr	r0, [sp, #4]
 8008e6a:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8008e6e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8008e72:	0fc0      	lsrs	r0, r0, #31
 8008e74:	b002      	add	sp, #8
 8008e76:	4770      	bx	lr

08008e78 <scalbn>:
 8008e78:	b570      	push	{r4, r5, r6, lr}
 8008e7a:	ec55 4b10 	vmov	r4, r5, d0
 8008e7e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8008e82:	4606      	mov	r6, r0
 8008e84:	462b      	mov	r3, r5
 8008e86:	b99a      	cbnz	r2, 8008eb0 <scalbn+0x38>
 8008e88:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8008e8c:	4323      	orrs	r3, r4
 8008e8e:	d036      	beq.n	8008efe <scalbn+0x86>
 8008e90:	4b39      	ldr	r3, [pc, #228]	; (8008f78 <scalbn+0x100>)
 8008e92:	4629      	mov	r1, r5
 8008e94:	ee10 0a10 	vmov	r0, s0
 8008e98:	2200      	movs	r2, #0
 8008e9a:	f7f7 fba5 	bl	80005e8 <__aeabi_dmul>
 8008e9e:	4b37      	ldr	r3, [pc, #220]	; (8008f7c <scalbn+0x104>)
 8008ea0:	429e      	cmp	r6, r3
 8008ea2:	4604      	mov	r4, r0
 8008ea4:	460d      	mov	r5, r1
 8008ea6:	da10      	bge.n	8008eca <scalbn+0x52>
 8008ea8:	a32b      	add	r3, pc, #172	; (adr r3, 8008f58 <scalbn+0xe0>)
 8008eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eae:	e03a      	b.n	8008f26 <scalbn+0xae>
 8008eb0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8008eb4:	428a      	cmp	r2, r1
 8008eb6:	d10c      	bne.n	8008ed2 <scalbn+0x5a>
 8008eb8:	ee10 2a10 	vmov	r2, s0
 8008ebc:	4620      	mov	r0, r4
 8008ebe:	4629      	mov	r1, r5
 8008ec0:	f7f7 f9dc 	bl	800027c <__adddf3>
 8008ec4:	4604      	mov	r4, r0
 8008ec6:	460d      	mov	r5, r1
 8008ec8:	e019      	b.n	8008efe <scalbn+0x86>
 8008eca:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8008ece:	460b      	mov	r3, r1
 8008ed0:	3a36      	subs	r2, #54	; 0x36
 8008ed2:	4432      	add	r2, r6
 8008ed4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8008ed8:	428a      	cmp	r2, r1
 8008eda:	dd08      	ble.n	8008eee <scalbn+0x76>
 8008edc:	2d00      	cmp	r5, #0
 8008ede:	a120      	add	r1, pc, #128	; (adr r1, 8008f60 <scalbn+0xe8>)
 8008ee0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008ee4:	da1c      	bge.n	8008f20 <scalbn+0xa8>
 8008ee6:	a120      	add	r1, pc, #128	; (adr r1, 8008f68 <scalbn+0xf0>)
 8008ee8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008eec:	e018      	b.n	8008f20 <scalbn+0xa8>
 8008eee:	2a00      	cmp	r2, #0
 8008ef0:	dd08      	ble.n	8008f04 <scalbn+0x8c>
 8008ef2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008ef6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008efa:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008efe:	ec45 4b10 	vmov	d0, r4, r5
 8008f02:	bd70      	pop	{r4, r5, r6, pc}
 8008f04:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8008f08:	da19      	bge.n	8008f3e <scalbn+0xc6>
 8008f0a:	f24c 3350 	movw	r3, #50000	; 0xc350
 8008f0e:	429e      	cmp	r6, r3
 8008f10:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8008f14:	dd0a      	ble.n	8008f2c <scalbn+0xb4>
 8008f16:	a112      	add	r1, pc, #72	; (adr r1, 8008f60 <scalbn+0xe8>)
 8008f18:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d1e2      	bne.n	8008ee6 <scalbn+0x6e>
 8008f20:	a30f      	add	r3, pc, #60	; (adr r3, 8008f60 <scalbn+0xe8>)
 8008f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f26:	f7f7 fb5f 	bl	80005e8 <__aeabi_dmul>
 8008f2a:	e7cb      	b.n	8008ec4 <scalbn+0x4c>
 8008f2c:	a10a      	add	r1, pc, #40	; (adr r1, 8008f58 <scalbn+0xe0>)
 8008f2e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d0b8      	beq.n	8008ea8 <scalbn+0x30>
 8008f36:	a10e      	add	r1, pc, #56	; (adr r1, 8008f70 <scalbn+0xf8>)
 8008f38:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008f3c:	e7b4      	b.n	8008ea8 <scalbn+0x30>
 8008f3e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008f42:	3236      	adds	r2, #54	; 0x36
 8008f44:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008f48:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8008f4c:	4620      	mov	r0, r4
 8008f4e:	4b0c      	ldr	r3, [pc, #48]	; (8008f80 <scalbn+0x108>)
 8008f50:	2200      	movs	r2, #0
 8008f52:	e7e8      	b.n	8008f26 <scalbn+0xae>
 8008f54:	f3af 8000 	nop.w
 8008f58:	c2f8f359 	.word	0xc2f8f359
 8008f5c:	01a56e1f 	.word	0x01a56e1f
 8008f60:	8800759c 	.word	0x8800759c
 8008f64:	7e37e43c 	.word	0x7e37e43c
 8008f68:	8800759c 	.word	0x8800759c
 8008f6c:	fe37e43c 	.word	0xfe37e43c
 8008f70:	c2f8f359 	.word	0xc2f8f359
 8008f74:	81a56e1f 	.word	0x81a56e1f
 8008f78:	43500000 	.word	0x43500000
 8008f7c:	ffff3cb0 	.word	0xffff3cb0
 8008f80:	3c900000 	.word	0x3c900000

08008f84 <_init>:
 8008f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f86:	bf00      	nop
 8008f88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f8a:	bc08      	pop	{r3}
 8008f8c:	469e      	mov	lr, r3
 8008f8e:	4770      	bx	lr

08008f90 <_fini>:
 8008f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f92:	bf00      	nop
 8008f94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f96:	bc08      	pop	{r3}
 8008f98:	469e      	mov	lr, r3
 8008f9a:	4770      	bx	lr
